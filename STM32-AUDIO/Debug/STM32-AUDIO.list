
STM32-AUDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08011da4  08011da4  00021da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012448  08012448  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012448  08012448  00022448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012450  08012450  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012450  08012450  00022450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012454  08012454  00022454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08012458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000303c  200000e0  08012538  000300e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000311c  08012538  0003311c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024efd  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bce  00000000  00000000  0005500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0005abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a0  00000000  00000000  0005c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4c2  00000000  00000000  0005df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000286f2  00000000  00000000  0007c432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009589a  00000000  00000000  000a4b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0013a410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011d8c 	.word	0x08011d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	08011d8c 	.word	0x08011d8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	603a      	str	r2, [r7, #0]
 800058e:	80fb      	strh	r3, [r7, #6]
 8000590:	460b      	mov	r3, r1
 8000592:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8000598:	2200      	movs	r2, #0
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 800059e:	f000 f8f9 	bl	8000794 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <AUDIO_OUT_Init+0x90>)
 80005a6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005aa:	f006 fcbd 	bl	8006f28 <HAL_I2S_GetState>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4816      	ldr	r0, [pc, #88]	; (8000610 <AUDIO_OUT_Init+0x8c>)
 80005b8:	f000 f94a 	bl	8000850 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80005bc:	6838      	ldr	r0, [r7, #0]
 80005be:	f000 fa0f 	bl	80009e0 <I2S3_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d10e      	bne.n	80005f0 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2094      	movs	r0, #148	; 0x94
 80005d8:	4798      	blx	r3
 80005da:	4603      	mov	r3, r0
 80005dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005e0:	2be0      	cmp	r3, #224	; 0xe0
 80005e2:	d103      	bne.n	80005ec <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <AUDIO_OUT_Init+0x94>)
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e001      	b.n	80005f0 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d107      	bne.n	8000606 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <AUDIO_OUT_Init+0x98>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	797a      	ldrb	r2, [r7, #5]
 80005fe:	88f9      	ldrh	r1, [r7, #6]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2094      	movs	r0, #148	; 0x94
 8000604:	47a0      	blx	r4
  }
  
  return ret;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	20000100 	.word	0x20000100
 8000614:	40003c00 	.word	0x40003c00
 8000618:	20000004 	.word	0x20000004
 800061c:	200000fc 	.word	0x200000fc

08000620 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <AUDIO_OUT_Play+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	b292      	uxth	r2, r2
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	2094      	movs	r0, #148	; 0x94
 8000638:	4798      	blx	r3
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e00f      	b.n	8000664 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800064a:	d203      	bcs.n	8000654 <AUDIO_OUT_Play+0x34>
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	085b      	lsrs	r3, r3, #1
 8000650:	b29b      	uxth	r3, r3
 8000652:	e001      	b.n	8000658 <AUDIO_OUT_Play+0x38>
 8000654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000658:	461a      	mov	r2, r3
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <AUDIO_OUT_Play+0x50>)
 800065e:	f006 f8e1 	bl	8006824 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000662:	2300      	movs	r3, #0
  }
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000fc 	.word	0x200000fc
 8000670:	20000100 	.word	0x20000100

08000674 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <AUDIO_OUT_Pause+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	2094      	movs	r0, #148	; 0x94
 8000680:	4798      	blx	r3
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	e003      	b.n	8000694 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <AUDIO_OUT_Pause+0x28>)
 800068e:	f006 f971 	bl	8006974 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000692:	2300      	movs	r3, #0
  }
}
 8000694:	4618      	mov	r0, r3
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000fc 	.word	0x200000fc
 800069c:	20000100 	.word	0x20000100

080006a0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <AUDIO_OUT_Resume+0x24>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	2094      	movs	r0, #148	; 0x94
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e003      	b.n	80006c0 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <AUDIO_OUT_Resume+0x28>)
 80006ba:	f006 f9bd 	bl	8006a38 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80006be:	2300      	movs	r3, #0
  }
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000fc 	.word	0x200000fc
 80006c8:	20000100 	.word	0x20000100

080006cc <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <AUDIO_OUT_Stop+0x44>)
 80006d6:	f006 fa43 	bl	8006b60 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <AUDIO_OUT_Stop+0x48>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	2094      	movs	r0, #148	; 0x94
 80006e4:	4798      	blx	r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e00b      	b.n	8000708 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d107      	bne.n	8000706 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f002 fb3e 	bl	8002d78 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <AUDIO_OUT_Stop+0x4c>)
 8000702:	f003 fb15 	bl	8003d30 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000706:	2300      	movs	r3, #0
  }
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000100 	.word	0x20000100
 8000714:	200000fc 	.word	0x200000fc
 8000718:	40020c00 	.word	0x40020c00

0800071c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <AUDIO_OUT_SetVolume+0x2c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	79fa      	ldrb	r2, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	2094      	movs	r0, #148	; 0x94
 8000732:	4798      	blx	r3
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800073e:	2300      	movs	r3, #0
  }
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000fc 	.word	0x200000fc

0800074c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <HAL_I2S_TxCpltCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 800075e:	f002 fa47 	bl	8002bf0 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40003c00 	.word	0x40003c00

08000770 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d101      	bne.n	8000786 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 8000782:	f002 fa49 	bl	8002c18 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40003c00 	.word	0x40003c00

08000794 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007b2:	e010      	b.n	80007d6 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80007b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007b8:	4a22      	ldr	r2, [pc, #136]	; (8000844 <AUDIO_OUT_ClockConfig+0xb0>)
 80007ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d103      	bne.n	80007cc <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80007c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 80007cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d0:	3301      	adds	r3, #1
 80007d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d9ea      	bls.n	80007b4 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fd06 	bl	80081f4 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 80007e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d115      	bne.n	8000820 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80007f8:	2308      	movs	r3, #8
 80007fa:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80007fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000800:	4a11      	ldr	r2, [pc, #68]	; (8000848 <AUDIO_OUT_ClockConfig+0xb4>)
 8000802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000806:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000808:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800080c:	4a0f      	ldr	r2, [pc, #60]	; (800084c <AUDIO_OUT_ClockConfig+0xb8>)
 800080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000812:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fbfb 	bl	8008014 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800081e:	e00d      	b.n	800083c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000820:	2301      	movs	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000828:	f44f 7381 	mov.w	r3, #258	; 0x102
 800082c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fbec 	bl	8008014 <HAL_RCCEx_PeriphCLKConfig>
}
 800083c:	bf00      	nop
 800083e:	3730      	adds	r7, #48	; 0x30
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08011ef0 	.word	0x08011ef0
 8000848:	08011f10 	.word	0x08011f10
 800084c:	08011f30 	.word	0x08011f30

08000850 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a55      	ldr	r2, [pc, #340]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	4b4f      	ldr	r3, [pc, #316]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a4e      	ldr	r2, [pc, #312]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b48      	ldr	r3, [pc, #288]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a47      	ldr	r2, [pc, #284]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80008c0:	2306      	movs	r3, #6
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	483c      	ldr	r0, [pc, #240]	; (80009bc <AUDIO_OUT_MspInit+0x16c>)
 80008cc:	f002 ffc8 	bl	8003860 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4839      	ldr	r0, [pc, #228]	; (80009c0 <AUDIO_OUT_MspInit+0x170>)
 80008dc:	f002 ffc0 	bl	8003860 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482d      	ldr	r0, [pc, #180]	; (80009bc <AUDIO_OUT_MspInit+0x16c>)
 8000908:	f002 ffaa 	bl	8003860 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 8000916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <AUDIO_OUT_MspInit+0x168>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <AUDIO_OUT_MspInit+0x174>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d136      	bne.n	80009a0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800093a:	2240      	movs	r2, #64	; 0x40
 800093c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800094e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000952:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095a:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000968:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800096c:	2204      	movs	r2, #4
 800096e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000972:	2203      	movs	r2, #3
 8000974:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000984:	4a11      	ldr	r2, [pc, #68]	; (80009cc <AUDIO_OUT_MspInit+0x17c>)
 8000986:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800098c:	639a      	str	r2, [r3, #56]	; 0x38
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 8000996:	f002 fbd3 	bl	8003140 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <AUDIO_OUT_MspInit+0x178>)
 800099c:	f002 fb22 	bl	8002fe4 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	210e      	movs	r1, #14
 80009a4:	202f      	movs	r0, #47	; 0x2f
 80009a6:	f002 fae6 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80009aa:	202f      	movs	r0, #47	; 0x2f
 80009ac:	f002 faff 	bl	8002fae <HAL_NVIC_EnableIRQ>
}
 80009b0:	bf00      	nop
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40003c00 	.word	0x40003c00
 80009c8:	20000148 	.word	0x20000148
 80009cc:	400260b8 	.word	0x400260b8

080009d0 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <I2S3_Init+0x68>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <I2S3_Init+0x6c>)
 80009ec:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <I2S3_Init+0x68>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	69da      	ldr	r2, [r3, #28]
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <I2S3_Init+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009fc:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <I2S3_Init+0x68>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <I2S3_Init+0x68>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <I2S3_Init+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <I2S3_Init+0x68>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <I2S3_Init+0x68>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <I2S3_Init+0x68>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <I2S3_Init+0x68>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <I2S3_Init+0x68>)
 8000a2e:	f005 fdb9 	bl	80065a4 <HAL_I2S_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000a3c:	2300      	movs	r3, #0
  }
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000100 	.word	0x20000100
 8000a4c:	40003c00 	.word	0x40003c00

08000a50 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_I2S_ErrorCallback+0x20>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000a62:	f7ff ffb5 	bl	80009d0 <AUDIO_OUT_Error_CallBack>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40003c00 	.word	0x40003c00

08000a74 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <I2Cx_Init+0x58>)
 8000a7a:	f005 fa29 	bl	8005ed0 <HAL_I2C_GetState>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d121      	bne.n	8000ac8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <I2Cx_Init+0x58>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <I2Cx_Init+0x5c>)
 8000a88:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <I2Cx_Init+0x58>)
 8000a8c:	2243      	movs	r2, #67	; 0x43
 8000a8e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <I2Cx_Init+0x58>)
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <I2Cx_Init+0x60>)
 8000a94:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <I2Cx_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <I2Cx_Init+0x58>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <I2Cx_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <I2Cx_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <I2Cx_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <I2Cx_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <I2Cx_Init+0x58>)
 8000abe:	f000 f86b 	bl	8000b98 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000ac2:	4802      	ldr	r0, [pc, #8]	; (8000acc <I2Cx_Init+0x58>)
 8000ac4:	f004 fd70 	bl	80055a8 <HAL_I2C_Init>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200001a8 	.word	0x200001a8
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	717b      	strb	r3, [r7, #5]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000aee:	797b      	ldrb	r3, [r7, #5]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <I2Cx_WriteData+0x48>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	88f9      	ldrh	r1, [r7, #6]
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <I2Cx_WriteData+0x4c>)
 8000b06:	f004 fec3 	bl	8005890 <HAL_I2C_Mem_Write>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b14:	f000 f834 	bl	8000b80 <I2Cx_Error>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	200001a8 	.word	0x200001a8

08000b28 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4613      	mov	r3, r2
 8000b36:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <I2Cx_ReadData+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	88f9      	ldrh	r1, [r7, #6]
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	f107 030e 	add.w	r3, r7, #14
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <I2Cx_ReadData+0x54>)
 8000b5a:	f004 ff93 	bl	8005a84 <HAL_I2C_Mem_Read>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000b68:	f000 f80a 	bl	8000b80 <I2Cx_Error>
  }
  return value;
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	200001a8 	.word	0x200001a8

08000b80 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <I2Cx_Error+0x14>)
 8000b86:	f004 fe53 	bl	8005830 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000b8a:	f7ff ff73 	bl	8000a74 <I2Cx_Init>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001a8 	.word	0x200001a8

08000b98 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000bd8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000be6:	2302      	movs	r3, #2
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <I2Cx_MspInit+0xa8>)
 8000bf6:	f002 fe33 	bl	8003860 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000bfc:	6a1b      	ldr	r3, [r3, #32]
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <I2Cx_MspInit+0xa4>)
 8000c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c10:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	201f      	movs	r0, #31
 8000c18:	f002 f9ad 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000c1c:	201f      	movs	r0, #31
 8000c1e:	f002 f9c6 	bl	8002fae <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	210f      	movs	r1, #15
 8000c26:	2020      	movs	r0, #32
 8000c28:	f002 f9a5 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000c2c:	2020      	movs	r0, #32
 8000c2e:	f002 f9be 	bl	8002fae <HAL_NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400

08000c44 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <AUDIO_IO_Init+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <AUDIO_IO_Init+0x68>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <AUDIO_IO_Init+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000c66:	2310      	movs	r3, #16
 8000c68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <AUDIO_IO_Init+0x6c>)
 8000c7c:	f002 fdf0 	bl	8003860 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000c80:	f7ff fef8 	bl	8000a74 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <AUDIO_IO_Init+0x6c>)
 8000c8a:	f003 f851 	bl	8003d30 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f002 f872 	bl	8002d78 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <AUDIO_IO_Init+0x6c>)
 8000c9a:	f003 f849 	bl	8003d30 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000c9e:	2005      	movs	r0, #5
 8000ca0:	f002 f86a 	bl	8002d78 <HAL_Delay>
}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	71bb      	strb	r3, [r7, #6]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	797a      	ldrb	r2, [r7, #5]
 8000cda:	79b9      	ldrb	r1, [r7, #6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fefb 	bl	8000ad8 <I2Cx_WriteData>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	79ba      	ldrb	r2, [r7, #6]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff10 	bl	8000b28 <I2Cx_ReadData>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <AUDIO_StorageParse>:
UINT br, bw;  // File read/write count

uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0d6      	sub	sp, #344	; 0x158
 8000d18:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USERPath);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4945      	ldr	r1, [pc, #276]	; (8000e38 <AUDIO_StorageParse+0x124>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00f fa82 	bl	801022e <f_opendir>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000d38:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d16b      	bne.n	8000e18 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000d40:	e066      	b.n	8000e10 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000d42:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00f fb08 	bl	8010360 <f_readdir>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000d56:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d15c      	bne.n	8000e18 <AUDIO_StorageParse+0x104>
 8000d5e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d62:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d66:	7d9b      	ldrb	r3, [r3, #22]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d055      	beq.n	8000e18 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000d6c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d74:	7d9b      	ldrb	r3, [r3, #22]
 8000d76:	2b2e      	cmp	r3, #46	; 0x2e
 8000d78:	d100      	bne.n	8000d7c <AUDIO_StorageParse+0x68>
      {
        continue;
 8000d7a:	e049      	b.n	8000e10 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000d7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d80:	3316      	adds	r3, #22
 8000d82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000d88:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d8c:	2b17      	cmp	r3, #23
 8000d8e:	d83f      	bhi.n	8000e10 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000d90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000d94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d98:	7a1b      	ldrb	r3, [r3, #8]
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d136      	bne.n	8000e10 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000da2:	4927      	ldr	r1, [pc, #156]	; (8000e40 <AUDIO_StorageParse+0x12c>)
 8000da4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000da8:	f010 f953 	bl	8011052 <strstr>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d107      	bne.n	8000dc2 <AUDIO_StorageParse+0xae>
 8000db2:	4924      	ldr	r1, [pc, #144]	; (8000e44 <AUDIO_StorageParse+0x130>)
 8000db4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000db8:	f010 f94b 	bl	8011052 <strstr>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d026      	beq.n	8000e10 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000dc4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3301      	adds	r3, #1
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000de0:	4618      	mov	r0, r3
 8000de2:	f010 f923 	bl	801102c <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000de8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000dec:	461a      	mov	r2, r3
 8000dee:	4913      	ldr	r1, [pc, #76]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000e02:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000e0c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <AUDIO_StorageParse+0x134>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d094      	beq.n	8000d42 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <AUDIO_StorageParse+0x128>)
 8000e1a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <AUDIO_StorageParse+0x138>)
 8000e20:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00f fa75 	bl	8010314 <f_closedir>
  return res;
 8000e2a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200027f4 	.word	0x200027f4
 8000e3c:	200013b4 	.word	0x200013b4
 8000e40:	08011da4 	.word	0x08011da4
 8000e44:	08011da8 	.word	0x08011da8
 8000e48:	20002e04 	.word	0x20002e04
 8000e4c:	200001fc 	.word	0x200001fc

08000e50 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000e54:	f7ff ff5e 	bl	8000d14 <AUDIO_StorageParse>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <AUDIO_GetWavObjectNumber+0x14>
 8000e5e:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <AUDIO_GetWavObjectNumber+0x18>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	e7ff      	b.n	8000e64 <AUDIO_GetWavObjectNumber+0x14>
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200001fc 	.word	0x200001fc

08000e6c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	4603      	mov	r3, r0
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	81bb      	strh	r3, [r7, #12]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000e84:	f7ff fede 	bl	8000c44 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fb01 	bl	8001498 <CODEC_IO_Write>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000ea0:	89bb      	ldrh	r3, [r7, #12]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d81b      	bhi.n	8000ee0 <cs43l22_Init+0x74>
 8000ea8:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <cs43l22_Init+0x44>)
 8000eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eae:	bf00      	nop
 8000eb0:	08000ec1 	.word	0x08000ec1
 8000eb4:	08000ec9 	.word	0x08000ec9
 8000eb8:	08000ed1 	.word	0x08000ed1
 8000ebc:	08000ed9 	.word	0x08000ed9
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <cs43l22_Init+0x1c4>)
 8000ec2:	22fa      	movs	r2, #250	; 0xfa
 8000ec4:	701a      	strb	r2, [r3, #0]
    break;
 8000ec6:	e00f      	b.n	8000ee8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000ec8:	4b59      	ldr	r3, [pc, #356]	; (8001030 <cs43l22_Init+0x1c4>)
 8000eca:	22af      	movs	r2, #175	; 0xaf
 8000ecc:	701a      	strb	r2, [r3, #0]
    break;
 8000ece:	e00b      	b.n	8000ee8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <cs43l22_Init+0x1c4>)
 8000ed2:	22aa      	movs	r2, #170	; 0xaa
 8000ed4:	701a      	strb	r2, [r3, #0]
    break;
 8000ed6:	e007      	b.n	8000ee8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000ed8:	4b55      	ldr	r3, [pc, #340]	; (8001030 <cs43l22_Init+0x1c4>)
 8000eda:	2205      	movs	r2, #5
 8000edc:	701a      	strb	r2, [r3, #0]
    break;    
 8000ede:	e003      	b.n	8000ee8 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <cs43l22_Init+0x1c4>)
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	701a      	strb	r2, [r3, #0]
    break;    
 8000ee6:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <cs43l22_Init+0x1c4>)
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 facf 	bl	8001498 <CODEC_IO_Write>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2281      	movs	r2, #129	; 0x81
 8000f0a:	2105      	movs	r1, #5
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fac3 	bl	8001498 <CODEC_IO_Write>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	4413      	add	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000f1c:	89fb      	ldrh	r3, [r7, #14]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2204      	movs	r2, #4
 8000f22:	2106      	movs	r1, #6
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fab7 	bl	8001498 <CODEC_IO_Write>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	4413      	add	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000f34:	7afa      	ldrb	r2, [r7, #11]
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f964 	bl	8001208 <cs43l22_SetVolume>
 8000f40:	4602      	mov	r2, r0
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4413      	add	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d023      	beq.n	8000f96 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2206      	movs	r2, #6
 8000f54:	210f      	movs	r1, #15
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa9e 	bl	8001498 <CODEC_IO_Write>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2124      	movs	r1, #36	; 0x24
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 fa92 	bl	8001498 <CODEC_IO_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2200      	movs	r2, #0
 8000f84:	2125      	movs	r1, #37	; 0x25
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fa86 	bl	8001498 <CODEC_IO_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fa7a 	bl	8001498 <CODEC_IO_Write>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	210e      	movs	r1, #14
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fa6e 	bl	8001498 <CODEC_IO_Write>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2127      	movs	r1, #39	; 0x27
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fa62 	bl	8001498 <CODEC_IO_Write>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4413      	add	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000fde:	89fb      	ldrh	r3, [r7, #14]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	211f      	movs	r1, #31
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fa56 	bl	8001498 <CODEC_IO_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	211a      	movs	r1, #26
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fa4a 	bl	8001498 <CODEC_IO_Write>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	220a      	movs	r2, #10
 8001014:	211b      	movs	r1, #27
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fa3e 	bl	8001498 <CODEC_IO_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001026:	697b      	ldr	r3, [r7, #20]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001fe 	.word	0x200001fe

08001034 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001038:	f7ff fe3c 	bl	8000cb4 <AUDIO_IO_DeInit>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 800104a:	f7ff fdfb 	bl	8000c44 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe48 	bl	8000cea <AUDIO_IO_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	80fb      	strh	r3, [r7, #6]
 800107c:	4613      	mov	r3, r2
 800107e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <cs43l22_Play+0x70>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d123      	bne.n	80010d4 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2206      	movs	r2, #6
 8001092:	210e      	movs	r1, #14
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f9ff 	bl	8001498 <CODEC_IO_Write>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f919 	bl	80012e0 <cs43l22_SetMute>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	229e      	movs	r2, #158	; 0x9e
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f9ea 	bl	8001498 <CODEC_IO_Write>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <cs43l22_Play+0x70>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000034 	.word	0x20000034

080010e4 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2101      	movs	r1, #1
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f8f2 	bl	80012e0 <cs43l22_SetMute>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2201      	movs	r2, #1
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f9c3 	bl	8001498 <CODEC_IO_Write>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f8ce 	bl	80012e0 <cs43l22_SetMute>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	e002      	b.n	8001158 <cs43l22_Resume+0x30>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2bfe      	cmp	r3, #254	; 0xfe
 800115c:	d9f9      	bls.n	8001152 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <cs43l22_Resume+0x74>)
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	2104      	movs	r1, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f994 	bl	8001498 <CODEC_IO_Write>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	229e      	movs	r2, #158	; 0x9e
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f988 	bl	8001498 <CODEC_IO_Write>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200001fe 	.word	0x200001fe

080011a0 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f893 	bl	80012e0 <cs43l22_SetMute>
 80011ba:	4602      	mov	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2204      	movs	r2, #4
 80011c8:	210e      	movs	r1, #14
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f964 	bl	8001498 <CODEC_IO_Write>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	229f      	movs	r2, #159	; 0x9f
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f958 	bl	8001498 <CODEC_IO_Write>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <cs43l22_Stop+0x64>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
  return counter;    
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000034 	.word	0x20000034

08001208 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	4613      	mov	r3, r2
 8001216:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d80b      	bhi.n	800123a <cs43l22_SetVolume+0x32>
 8001222:	797a      	ldrb	r2, [r7, #5]
 8001224:	4613      	mov	r3, r2
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <cs43l22_SetVolume+0xb8>)
 800122c:	fb82 1203 	smull	r1, r2, r2, r3
 8001230:	1152      	asrs	r2, r2, #5
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	e000      	b.n	800123c <cs43l22_SetVolume+0x34>
 800123a:	23ff      	movs	r3, #255	; 0xff
 800123c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	2be6      	cmp	r3, #230	; 0xe6
 8001242:	d91c      	bls.n	800127e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	3319      	adds	r3, #25
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	2120      	movs	r1, #32
 8001252:	f000 f921 	bl	8001498 <CODEC_IO_Write>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	3319      	adds	r3, #25
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	2121      	movs	r1, #33	; 0x21
 800126e:	f000 f913 	bl	8001498 <CODEC_IO_Write>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e01b      	b.n	80012b6 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	3319      	adds	r3, #25
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	2120      	movs	r1, #32
 800128c:	f000 f904 	bl	8001498 <CODEC_IO_Write>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	3319      	adds	r3, #25
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	2121      	movs	r1, #33	; 0x21
 80012a8:	f000 f8f6 	bl	8001498 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	51eb851f 	.word	0x51eb851f

080012c4 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	80fb      	strh	r3, [r7, #6]
  return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d124      	bne.n	8001340 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	2104      	movs	r1, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f8ca 	bl	8001498 <CODEC_IO_Write>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2201      	movs	r2, #1
 8001314:	2122      	movs	r1, #34	; 0x22
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f8be 	bl	8001498 <CODEC_IO_Write>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2201      	movs	r2, #1
 800132c:	2123      	movs	r1, #35	; 0x23
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f8b2 	bl	8001498 <CODEC_IO_Write>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e025      	b.n	800138c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2200      	movs	r2, #0
 8001346:	2122      	movs	r1, #34	; 0x22
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f8a5 	bl	8001498 <CODEC_IO_Write>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2200      	movs	r2, #0
 800135e:	2123      	movs	r1, #35	; 0x23
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f899 	bl	8001498 <CODEC_IO_Write>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <cs43l22_SetMute+0xb8>)
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	2104      	movs	r1, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f88b 	bl	8001498 <CODEC_IO_Write>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001fe 	.word	0x200001fe

0800139c <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d84b      	bhi.n	8001450 <cs43l22_SetOutputMode+0xb4>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <cs43l22_SetOutputMode+0x24>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013f1 	.word	0x080013f1
 80013c8:	08001411 	.word	0x08001411
 80013cc:	08001431 	.word	0x08001431
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	22fa      	movs	r2, #250	; 0xfa
 80013d6:	2104      	movs	r1, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f85d 	bl	8001498 <CODEC_IO_Write>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <cs43l22_SetOutputMode+0xe0>)
 80013ea:	22fa      	movs	r2, #250	; 0xfa
 80013ec:	701a      	strb	r2, [r3, #0]
      break;
 80013ee:	e03f      	b.n	8001470 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	22af      	movs	r2, #175	; 0xaf
 80013f6:	2104      	movs	r1, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f84d 	bl	8001498 <CODEC_IO_Write>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <cs43l22_SetOutputMode+0xe0>)
 800140a:	22af      	movs	r2, #175	; 0xaf
 800140c:	701a      	strb	r2, [r3, #0]
      break;
 800140e:	e02f      	b.n	8001470 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	22aa      	movs	r2, #170	; 0xaa
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f83d 	bl	8001498 <CODEC_IO_Write>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <cs43l22_SetOutputMode+0xe0>)
 800142a:	22aa      	movs	r2, #170	; 0xaa
 800142c:	701a      	strb	r2, [r3, #0]
      break;
 800142e:	e01f      	b.n	8001470 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2205      	movs	r2, #5
 8001436:	2104      	movs	r1, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f82d 	bl	8001498 <CODEC_IO_Write>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <cs43l22_SetOutputMode+0xe0>)
 800144a:	2205      	movs	r2, #5
 800144c:	701a      	strb	r2, [r3, #0]
      break;    
 800144e:	e00f      	b.n	8001470 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2205      	movs	r2, #5
 8001456:	2104      	movs	r1, #4
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f81d 	bl	8001498 <CODEC_IO_Write>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <cs43l22_SetOutputMode+0xe0>)
 800146a:	2205      	movs	r2, #5
 800146c:	701a      	strb	r2, [r3, #0]
      break;
 800146e:	bf00      	nop
  }  
  return counter;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001fe 	.word	0x200001fe

08001480 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	460b      	mov	r3, r1
 80014a4:	71bb      	strb	r3, [r7, #6]
 80014a6:	4613      	mov	r3, r2
 80014a8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80014ae:	797a      	ldrb	r2, [r7, #5]
 80014b0:	79b9      	ldrb	r1, [r7, #6]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc04 	bl	8000cc2 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2110      	movs	r1, #16
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <SELECT+0x18>)
 80014d2:	f002 fc2d 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f001 fc4e 	bl	8002d78 <HAL_Delay>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40020800 	.word	0x40020800

080014e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2110      	movs	r1, #16
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <DESELECT+0x18>)
 80014ee:	f002 fc1f 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f001 fc40 	bl	8002d78 <HAL_Delay>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020800 	.word	0x40020800

08001500 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800150a:	bf00      	nop
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <SPI_TxByte+0x30>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b02      	cmp	r3, #2
 8001518:	d1f8      	bne.n	800150c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800151a:	1df9      	adds	r1, r7, #7
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	2201      	movs	r2, #1
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <SPI_TxByte+0x30>)
 8001522:	f006 ff92 	bl	800844a <HAL_SPI_Transmit>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000304 	.word	0x20000304

08001534 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001540:	bf00      	nop
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SPI_TxBuffer+0x30>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b02      	cmp	r3, #2
 800154e:	d1f8      	bne.n	8001542 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001550:	887a      	ldrh	r2, [r7, #2]
 8001552:	2364      	movs	r3, #100	; 0x64
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <SPI_TxBuffer+0x30>)
 8001558:	f006 ff77 	bl	800844a <HAL_SPI_Transmit>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000304 	.word	0x20000304

08001568 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800156e:	23ff      	movs	r3, #255	; 0xff
 8001570:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001572:	bf00      	nop
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <SPI_RxByte+0x34>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d1f8      	bne.n	8001574 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001582:	1dba      	adds	r2, r7, #6
 8001584:	1df9      	adds	r1, r7, #7
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <SPI_RxByte+0x34>)
 800158e:	f007 f898 	bl	80086c2 <HAL_SPI_TransmitReceive>

  return data;
 8001592:	79bb      	ldrb	r3, [r7, #6]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000304 	.word	0x20000304

080015a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80015a8:	f7ff ffde 	bl	8001568 <SPI_RxByte>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <SD_ReadyWait+0x30>)
 80015c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015c8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80015ca:	f7ff ffcd 	bl	8001568 <SPI_RxByte>
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d003      	beq.n	80015e0 <SD_ReadyWait+0x24>
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SD_ReadyWait+0x30>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f4      	bne.n	80015ca <SD_ReadyWait+0xe>

  return res;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000202 	.word	0x20000202

080015f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80015f6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80015fa:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80015fc:	f7ff ff72 	bl	80014e4 <DESELECT>
  for(int i = 0; i < 10; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e005      	b.n	8001612 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001606:	20ff      	movs	r0, #255	; 0xff
 8001608:	f7ff ff7a 	bl	8001500 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3301      	adds	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b09      	cmp	r3, #9
 8001616:	ddf6      	ble.n	8001606 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001618:	f7ff ff56 	bl	80014c8 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001630:	2395      	movs	r3, #149	; 0x95
 8001632:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001634:	463b      	mov	r3, r7
 8001636:	2106      	movs	r1, #6
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff7b 	bl	8001534 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800163e:	e002      	b.n	8001646 <SD_PowerOn+0x56>
  {
    cnt--;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3b01      	subs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001646:	f7ff ff8f 	bl	8001568 <SPI_RxByte>
 800164a:	4603      	mov	r3, r0
 800164c:	2b01      	cmp	r3, #1
 800164e:	d002      	beq.n	8001656 <SD_PowerOn+0x66>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f4      	bne.n	8001640 <SD_PowerOn+0x50>
  }

  DESELECT();
 8001656:	f7ff ff45 	bl	80014e4 <DESELECT>
  SPI_TxByte(0XFF);
 800165a:	20ff      	movs	r0, #255	; 0xff
 800165c:	f7ff ff50 	bl	8001500 <SPI_TxByte>

  PowerFlag = 1;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <SD_PowerOn+0x80>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000205 	.word	0x20000205

08001674 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <SD_PowerOff+0x14>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000205 	.word	0x20000205

0800168c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <SD_CheckPower+0x14>)
 8001692:	781b      	ldrb	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000205 	.word	0x20000205

080016a4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <SD_RxDataBlock+0x58>)
 80016b0:	22c8      	movs	r2, #200	; 0xc8
 80016b2:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80016b4:	f7ff ff58 	bl	8001568 <SPI_RxByte>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d103      	bne.n	80016ca <SD_RxDataBlock+0x26>
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <SD_RxDataBlock+0x58>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f4      	bne.n	80016b4 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2bfe      	cmp	r3, #254	; 0xfe
 80016ce:	d001      	beq.n	80016d4 <SD_RxDataBlock+0x30>
 80016d0:	2300      	movs	r3, #0
 80016d2:	e00f      	b.n	80016f4 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff60 	bl	80015a0 <SPI_RxBytePtr>
  } while(len--);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	603a      	str	r2, [r7, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f4      	bne.n	80016d4 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80016ea:	f7ff ff3d 	bl	8001568 <SPI_RxByte>
  SPI_RxByte();
 80016ee:	f7ff ff3b 	bl	8001568 <SPI_RxByte>

  return TRUE;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000200 	.word	0x20000200

08001700 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001710:	f7ff ff54 	bl	80015bc <SD_ReadyWait>
 8001714:	4603      	mov	r3, r0
 8001716:	2bff      	cmp	r3, #255	; 0xff
 8001718:	d001      	beq.n	800171e <SD_TxDataBlock+0x1e>
 800171a:	2300      	movs	r3, #0
 800171c:	e02f      	b.n	800177e <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff feed 	bl	8001500 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	2bfd      	cmp	r3, #253	; 0xfd
 800172a:	d020      	beq.n	800176e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff feff 	bl	8001534 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8001736:	f7ff ff17 	bl	8001568 <SPI_RxByte>
    SPI_RxByte();
 800173a:	f7ff ff15 	bl	8001568 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800173e:	e00b      	b.n	8001758 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001740:	f7ff ff12 	bl	8001568 <SPI_RxByte>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b05      	cmp	r3, #5
 8001750:	d006      	beq.n	8001760 <SD_TxDataBlock+0x60>
      i++;
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	3301      	adds	r3, #1
 8001756:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d9f0      	bls.n	8001740 <SD_TxDataBlock+0x40>
 800175e:	e000      	b.n	8001762 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001760:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8001762:	bf00      	nop
 8001764:	f7ff ff00 	bl	8001568 <SPI_RxByte>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0fa      	beq.n	8001764 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2b05      	cmp	r3, #5
 8001776:	d101      	bne.n	800177c <SD_TxDataBlock+0x7c>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <SD_TxDataBlock+0x7e>

  return FALSE;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	6039      	str	r1, [r7, #0]
 8001790:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001792:	f7ff ff13 	bl	80015bc <SD_ReadyWait>
 8001796:	4603      	mov	r3, r0
 8001798:	2bff      	cmp	r3, #255	; 0xff
 800179a:	d001      	beq.n	80017a0 <SD_SendCmd+0x1a>
 800179c:	23ff      	movs	r3, #255	; 0xff
 800179e:	e042      	b.n	8001826 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff feac 	bl	8001500 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	0e1b      	lsrs	r3, r3, #24
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fea6 	bl	8001500 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	0c1b      	lsrs	r3, r3, #16
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fea0 	bl	8001500 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe9a 	bl	8001500 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe95 	bl	8001500 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b40      	cmp	r3, #64	; 0x40
 80017da:	d102      	bne.n	80017e2 <SD_SendCmd+0x5c>
 80017dc:	2395      	movs	r3, #149	; 0x95
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e007      	b.n	80017f2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b48      	cmp	r3, #72	; 0x48
 80017e6:	d102      	bne.n	80017ee <SD_SendCmd+0x68>
 80017e8:	2387      	movs	r3, #135	; 0x87
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <SD_SendCmd+0x6c>
  else crc = 1;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe83 	bl	8001500 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	2b4c      	cmp	r3, #76	; 0x4c
 80017fe:	d101      	bne.n	8001804 <SD_SendCmd+0x7e>
 8001800:	f7ff feb2 	bl	8001568 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8001804:	230a      	movs	r3, #10
 8001806:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001808:	f7ff feae 	bl	8001568 <SPI_RxByte>
 800180c:	4603      	mov	r3, r0
 800180e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001810:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001814:	2b00      	cmp	r3, #0
 8001816:	da05      	bge.n	8001824 <SD_SendCmd+0x9e>
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	3b01      	subs	r3, #1
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f1      	bne.n	8001808 <SD_SendCmd+0x82>

  return res;
 8001824:	7b7b      	ldrb	r3, [r7, #13]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SD_disk_initialize+0x14>
 8001840:	2301      	movs	r3, #1
 8001842:	e0d1      	b.n	80019e8 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <SD_disk_initialize+0x1c0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <SD_disk_initialize+0x2a>
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <SD_disk_initialize+0x1c0>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	e0c6      	b.n	80019e8 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800185a:	f7ff fec9 	bl	80015f0 <SD_PowerOn>

  /* slave select */
  SELECT();
 800185e:	f7ff fe33 	bl	80014c8 <SELECT>

  /* check disk type */
  type = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001866:	2100      	movs	r1, #0
 8001868:	2040      	movs	r0, #64	; 0x40
 800186a:	f7ff ff8c 	bl	8001786 <SD_SendCmd>
 800186e:	4603      	mov	r3, r0
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 80a1 	bne.w	80019b8 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <SD_disk_initialize+0x1c4>)
 8001878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187c:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800187e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001882:	2048      	movs	r0, #72	; 0x48
 8001884:	f7ff ff7f 	bl	8001786 <SD_SendCmd>
 8001888:	4603      	mov	r3, r0
 800188a:	2b01      	cmp	r3, #1
 800188c:	d155      	bne.n	800193a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e00c      	b.n	80018ae <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8001894:	7bfc      	ldrb	r4, [r7, #15]
 8001896:	f7ff fe67 	bl	8001568 <SPI_RxByte>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	f104 0310 	add.w	r3, r4, #16
 80018a2:	443b      	add	r3, r7
 80018a4:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	3301      	adds	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d9ef      	bls.n	8001894 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d17e      	bne.n	80019b8 <SD_disk_initialize+0x188>
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	2baa      	cmp	r3, #170	; 0xaa
 80018be:	d17b      	bne.n	80019b8 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80018c0:	2100      	movs	r1, #0
 80018c2:	2077      	movs	r0, #119	; 0x77
 80018c4:	f7ff ff5f 	bl	8001786 <SD_SendCmd>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d807      	bhi.n	80018de <SD_disk_initialize+0xae>
 80018ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018d2:	2069      	movs	r0, #105	; 0x69
 80018d4:	f7ff ff57 	bl	8001786 <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d004      	beq.n	80018e8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80018de:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <SD_disk_initialize+0x1c4>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ec      	bne.n	80018c0 <SD_disk_initialize+0x90>
 80018e6:	e000      	b.n	80018ea <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80018e8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <SD_disk_initialize+0x1c4>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d062      	beq.n	80019b8 <SD_disk_initialize+0x188>
 80018f2:	2100      	movs	r1, #0
 80018f4:	207a      	movs	r0, #122	; 0x7a
 80018f6:	f7ff ff46 	bl	8001786 <SD_SendCmd>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d15b      	bne.n	80019b8 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e00c      	b.n	8001920 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001906:	7bfc      	ldrb	r4, [r7, #15]
 8001908:	f7ff fe2e 	bl	8001568 <SPI_RxByte>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	f104 0310 	add.w	r3, r4, #16
 8001914:	443b      	add	r3, r7
 8001916:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d9ef      	bls.n	8001906 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001926:	7a3b      	ldrb	r3, [r7, #8]
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SD_disk_initialize+0x104>
 8001930:	230c      	movs	r3, #12
 8001932:	e000      	b.n	8001936 <SD_disk_initialize+0x106>
 8001934:	2304      	movs	r3, #4
 8001936:	73bb      	strb	r3, [r7, #14]
 8001938:	e03e      	b.n	80019b8 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800193a:	2100      	movs	r1, #0
 800193c:	2077      	movs	r0, #119	; 0x77
 800193e:	f7ff ff22 	bl	8001786 <SD_SendCmd>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d808      	bhi.n	800195a <SD_disk_initialize+0x12a>
 8001948:	2100      	movs	r1, #0
 800194a:	2069      	movs	r0, #105	; 0x69
 800194c:	f7ff ff1b 	bl	8001786 <SD_SendCmd>
 8001950:	4603      	mov	r3, r0
 8001952:	2b01      	cmp	r3, #1
 8001954:	d801      	bhi.n	800195a <SD_disk_initialize+0x12a>
 8001956:	2302      	movs	r3, #2
 8001958:	e000      	b.n	800195c <SD_disk_initialize+0x12c>
 800195a:	2301      	movs	r3, #1
 800195c:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d10e      	bne.n	8001982 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001964:	2100      	movs	r1, #0
 8001966:	2077      	movs	r0, #119	; 0x77
 8001968:	f7ff ff0d 	bl	8001786 <SD_SendCmd>
 800196c:	4603      	mov	r3, r0
 800196e:	2b01      	cmp	r3, #1
 8001970:	d80e      	bhi.n	8001990 <SD_disk_initialize+0x160>
 8001972:	2100      	movs	r1, #0
 8001974:	2069      	movs	r0, #105	; 0x69
 8001976:	f7ff ff06 	bl	8001786 <SD_SendCmd>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <SD_disk_initialize+0x160>
 8001980:	e00c      	b.n	800199c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001982:	2100      	movs	r1, #0
 8001984:	2041      	movs	r0, #65	; 0x41
 8001986:	f7ff fefe 	bl	8001786 <SD_SendCmd>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <SD_disk_initialize+0x1c4>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e2      	bne.n	800195e <SD_disk_initialize+0x12e>
 8001998:	e000      	b.n	800199c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800199a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <SD_disk_initialize+0x1c4>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <SD_disk_initialize+0x184>
 80019a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a8:	2050      	movs	r0, #80	; 0x50
 80019aa:	f7ff feec 	bl	8001786 <SD_SendCmd>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SD_disk_initialize+0x188>
 80019b4:	2300      	movs	r3, #0
 80019b6:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <SD_disk_initialize+0x1c8>)
 80019ba:	7bbb      	ldrb	r3, [r7, #14]
 80019bc:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80019be:	f7ff fd91 	bl	80014e4 <DESELECT>
  SPI_RxByte();
 80019c2:	f7ff fdd1 	bl	8001568 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <SD_disk_initialize+0x1c0>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SD_disk_initialize+0x1c0>)
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e001      	b.n	80019e2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80019de:	f7ff fe49 	bl	8001674 <SD_PowerOff>
  }

  return Stat;
 80019e2:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <SD_disk_initialize+0x1c0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	20000035 	.word	0x20000035
 80019f4:	20000200 	.word	0x20000200
 80019f8:	20000204 	.word	0x20000204

080019fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SD_disk_status+0x14>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e002      	b.n	8001a16 <SD_disk_status+0x1a>
  return Stat;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SD_disk_status+0x28>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000035 	.word	0x20000035

08001a28 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <SD_disk_read+0x1c>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <SD_disk_read+0x20>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e051      	b.n	8001aec <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <SD_disk_read+0xcc>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SD_disk_read+0x32>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e048      	b.n	8001aec <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <SD_disk_read+0xd0>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <SD_disk_read+0x44>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	025b      	lsls	r3, r3, #9
 8001a6a:	607b      	str	r3, [r7, #4]

  SELECT();
 8001a6c:	f7ff fd2c 	bl	80014c8 <SELECT>

  if (count == 1)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d111      	bne.n	8001a9a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	2051      	movs	r0, #81	; 0x51
 8001a7a:	f7ff fe84 	bl	8001786 <SD_SendCmd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d129      	bne.n	8001ad8 <SD_disk_read+0xb0>
 8001a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a88:	68b8      	ldr	r0, [r7, #8]
 8001a8a:	f7ff fe0b 	bl	80016a4 <SD_RxDataBlock>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <SD_disk_read+0xb0>
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	e01e      	b.n	8001ad8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	2052      	movs	r0, #82	; 0x52
 8001a9e:	f7ff fe72 	bl	8001786 <SD_SendCmd>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d117      	bne.n	8001ad8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aac:	68b8      	ldr	r0, [r7, #8]
 8001aae:	f7ff fdf9 	bl	80016a4 <SD_RxDataBlock>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <SD_disk_read+0xa6>
        buff += 512;
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001abe:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ed      	bne.n	8001aa8 <SD_disk_read+0x80>
 8001acc:	e000      	b.n	8001ad0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001ace:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	204c      	movs	r0, #76	; 0x4c
 8001ad4:	f7ff fe57 	bl	8001786 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001ad8:	f7ff fd04 	bl	80014e4 <DESELECT>
  SPI_RxByte();
 8001adc:	f7ff fd44 	bl	8001568 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000035 	.word	0x20000035
 8001af8:	20000204 	.word	0x20000204

08001afc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <SD_disk_write+0x1c>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <SD_disk_write+0x20>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e06b      	b.n	8001bf4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b1c:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <SD_disk_write+0x100>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SD_disk_write+0x32>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e062      	b.n	8001bf4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <SD_disk_write+0x100>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SD_disk_write+0x44>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e059      	b.n	8001bf4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <SD_disk_write+0x104>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <SD_disk_write+0x56>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	025b      	lsls	r3, r3, #9
 8001b50:	607b      	str	r3, [r7, #4]

  SELECT();
 8001b52:	f7ff fcb9 	bl	80014c8 <SELECT>

  if (count == 1)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d110      	bne.n	8001b7e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	2058      	movs	r0, #88	; 0x58
 8001b60:	f7ff fe11 	bl	8001786 <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d13a      	bne.n	8001be0 <SD_disk_write+0xe4>
 8001b6a:	21fe      	movs	r1, #254	; 0xfe
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f7ff fdc7 	bl	8001700 <SD_TxDataBlock>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d033      	beq.n	8001be0 <SD_disk_write+0xe4>
      count = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	e030      	b.n	8001be0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <SD_disk_write+0x104>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2077      	movs	r0, #119	; 0x77
 8001b8e:	f7ff fdfa 	bl	8001786 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	2057      	movs	r0, #87	; 0x57
 8001b96:	f7ff fdf6 	bl	8001786 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	2059      	movs	r0, #89	; 0x59
 8001b9e:	f7ff fdf2 	bl	8001786 <SD_SendCmd>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11b      	bne.n	8001be0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ba8:	21fc      	movs	r1, #252	; 0xfc
 8001baa:	68b8      	ldr	r0, [r7, #8]
 8001bac:	f7ff fda8 	bl	8001700 <SD_TxDataBlock>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <SD_disk_write+0xd0>
        buff += 512;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bbc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ee      	bne.n	8001ba8 <SD_disk_write+0xac>
 8001bca:	e000      	b.n	8001bce <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001bcc:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001bce:	21fd      	movs	r1, #253	; 0xfd
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fd95 	bl	8001700 <SD_TxDataBlock>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <SD_disk_write+0xe4>
      {
        count = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001be0:	f7ff fc80 	bl	80014e4 <DESELECT>
  SPI_RxByte();
 8001be4:	f7ff fcc0 	bl	8001568 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000035 	.word	0x20000035
 8001c00:	20000204 	.word	0x20000204

08001c04 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b08b      	sub	sp, #44	; 0x2c
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	603a      	str	r2, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	460b      	mov	r3, r1
 8001c12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SD_disk_ioctl+0x1e>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e115      	b.n	8001e4e <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d124      	bne.n	8001c78 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d012      	beq.n	8001c5c <SD_disk_ioctl+0x58>
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	dc1a      	bgt.n	8001c70 <SD_disk_ioctl+0x6c>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <SD_disk_ioctl+0x40>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d006      	beq.n	8001c50 <SD_disk_ioctl+0x4c>
 8001c42:	e015      	b.n	8001c70 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001c44:	f7ff fd16 	bl	8001674 <SD_PowerOff>
      res = RES_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c4e:	e0fc      	b.n	8001e4a <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001c50:	f7ff fcce 	bl	80015f0 <SD_PowerOn>
      res = RES_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c5a:	e0f6      	b.n	8001e4a <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	1c5c      	adds	r4, r3, #1
 8001c60:	f7ff fd14 	bl	800168c <SD_CheckPower>
 8001c64:	4603      	mov	r3, r0
 8001c66:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c6e:	e0ec      	b.n	8001e4a <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001c70:	2304      	movs	r3, #4
 8001c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c76:	e0e8      	b.n	8001e4a <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c78:	4b77      	ldr	r3, [pc, #476]	; (8001e58 <SD_disk_ioctl+0x254>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <SD_disk_ioctl+0x86>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e0e1      	b.n	8001e4e <SD_disk_ioctl+0x24a>

    SELECT();
 8001c8a:	f7ff fc1d 	bl	80014c8 <SELECT>

    switch (ctrl)
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	2b0d      	cmp	r3, #13
 8001c92:	f200 80cb 	bhi.w	8001e2c <SD_disk_ioctl+0x228>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <SD_disk_ioctl+0x98>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001d97 	.word	0x08001d97
 8001ca0:	08001cd5 	.word	0x08001cd5
 8001ca4:	08001d87 	.word	0x08001d87
 8001ca8:	08001e2d 	.word	0x08001e2d
 8001cac:	08001e2d 	.word	0x08001e2d
 8001cb0:	08001e2d 	.word	0x08001e2d
 8001cb4:	08001e2d 	.word	0x08001e2d
 8001cb8:	08001e2d 	.word	0x08001e2d
 8001cbc:	08001e2d 	.word	0x08001e2d
 8001cc0:	08001e2d 	.word	0x08001e2d
 8001cc4:	08001e2d 	.word	0x08001e2d
 8001cc8:	08001da9 	.word	0x08001da9
 8001ccc:	08001dcd 	.word	0x08001dcd
 8001cd0:	08001df1 	.word	0x08001df1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2049      	movs	r0, #73	; 0x49
 8001cd8:	f7ff fd55 	bl	8001786 <SD_SendCmd>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 80a8 	bne.w	8001e34 <SD_disk_ioctl+0x230>
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	2110      	movs	r1, #16
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fcda 	bl	80016a4 <SD_RxDataBlock>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 809e 	beq.w	8001e34 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001cf8:	7b3b      	ldrb	r3, [r7, #12]
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10e      	bne.n	8001d20 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001d02:	7d7b      	ldrb	r3, [r7, #21]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	7d3b      	ldrb	r3, [r7, #20]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001d16:	8bfb      	ldrh	r3, [r7, #30]
 8001d18:	029a      	lsls	r2, r3, #10
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e02e      	b.n	8001d7e <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001d20:	7c7b      	ldrb	r3, [r7, #17]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	7dbb      	ldrb	r3, [r7, #22]
 8001d2a:	09db      	lsrs	r3, r3, #7
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	7d7b      	ldrb	r3, [r7, #21]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0306 	and.w	r3, r3, #6
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	3302      	adds	r3, #2
 8001d44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001d48:	7d3b      	ldrb	r3, [r7, #20]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	7cbb      	ldrb	r3, [r7, #18]
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001d70:	8bfa      	ldrh	r2, [r7, #30]
 8001d72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d76:	3b09      	subs	r3, #9
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001d84:	e056      	b.n	8001e34 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001d94:	e055      	b.n	8001e42 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001d96:	f7ff fc11 	bl	80015bc <SD_ReadyWait>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2bff      	cmp	r3, #255	; 0xff
 8001d9e:	d14b      	bne.n	8001e38 <SD_disk_ioctl+0x234>
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001da6:	e047      	b.n	8001e38 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001da8:	2100      	movs	r1, #0
 8001daa:	2049      	movs	r0, #73	; 0x49
 8001dac:	f7ff fceb 	bl	8001786 <SD_SendCmd>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d142      	bne.n	8001e3c <SD_disk_ioctl+0x238>
 8001db6:	2110      	movs	r1, #16
 8001db8:	6a38      	ldr	r0, [r7, #32]
 8001dba:	f7ff fc73 	bl	80016a4 <SD_RxDataBlock>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03b      	beq.n	8001e3c <SD_disk_ioctl+0x238>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dca:	e037      	b.n	8001e3c <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001dcc:	2100      	movs	r1, #0
 8001dce:	204a      	movs	r0, #74	; 0x4a
 8001dd0:	f7ff fcd9 	bl	8001786 <SD_SendCmd>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d132      	bne.n	8001e40 <SD_disk_ioctl+0x23c>
 8001dda:	2110      	movs	r1, #16
 8001ddc:	6a38      	ldr	r0, [r7, #32]
 8001dde:	f7ff fc61 	bl	80016a4 <SD_RxDataBlock>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d02b      	beq.n	8001e40 <SD_disk_ioctl+0x23c>
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dee:	e027      	b.n	8001e40 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001df0:	2100      	movs	r1, #0
 8001df2:	207a      	movs	r0, #122	; 0x7a
 8001df4:	f7ff fcc7 	bl	8001786 <SD_SendCmd>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e04:	e00b      	b.n	8001e1e <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001e06:	6a3c      	ldr	r4, [r7, #32]
 8001e08:	1c63      	adds	r3, r4, #1
 8001e0a:	623b      	str	r3, [r7, #32]
 8001e0c:	f7ff fbac 	bl	8001568 <SPI_RxByte>
 8001e10:	4603      	mov	r3, r0
 8001e12:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d9ef      	bls.n	8001e06 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e32:	e006      	b.n	8001e42 <SD_disk_ioctl+0x23e>
      break;
 8001e34:	bf00      	nop
 8001e36:	e004      	b.n	8001e42 <SD_disk_ioctl+0x23e>
      break;
 8001e38:	bf00      	nop
 8001e3a:	e002      	b.n	8001e42 <SD_disk_ioctl+0x23e>
      break;
 8001e3c:	bf00      	nop
 8001e3e:	e000      	b.n	8001e42 <SD_disk_ioctl+0x23e>
      break;
 8001e40:	bf00      	nop
    }

    DESELECT();
 8001e42:	f7ff fb4f 	bl	80014e4 <DESELECT>
    SPI_RxByte();
 8001e46:	f7ff fb8f 	bl	8001568 <SPI_RxByte>
  }

  return res;
 8001e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	372c      	adds	r7, #44	; 0x2c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000035 	.word	0x20000035

08001e5c <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_GPIO_EXTI_Callback+0x16>
		AudioState = AUDIO_STATE_NEXT;
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_GPIO_EXTI_Callback+0x24>)
 8001e6e:	2205      	movs	r2, #5
 8001e70:	701a      	strb	r2, [r3, #0]
		if(AudioState == AUDIO_STATE_PLAY){
			AudioState = AUDIO_STATE_PAUSE;
		}
		*/
	}
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200013b0 	.word	0x200013b0

08001e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8c:	f000 ff02 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e90:	f000 f86a 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e94:	f000 f9ac 	bl	80021f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e98:	f000 f98a 	bl	80021b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e9c:	f000 f8cc 	bl	8002038 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001ea0:	f000 f8f8 	bl	8002094 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001ea4:	f008 fa22 	bl	800a2ec <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001ea8:	f00e fbba 	bl	8010620 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8001eac:	f000 f956 	bl	800215c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001eb0:	f000 f91e 	bl	80020f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  FATFS       FatFs;                //Fatfs handle
  FRESULT     fres;                 //Result after operations


  printf("Beginning the SD card mounting\r\n");
 8001eb4:	4824      	ldr	r0, [pc, #144]	; (8001f48 <main+0xc4>)
 8001eb6:	f00f f8a1 	bl	8010ffc <puts>

  //Mount the SD Card
  fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	3b1c      	subs	r3, #28
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4922      	ldr	r1, [pc, #136]	; (8001f4c <main+0xc8>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00d fb75 	bl	800f5b4 <f_mount>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ed0:	f102 021f 	add.w	r2, r2, #31
 8001ed4:	7013      	strb	r3, [r2, #0]
  if (fres != FR_OK)
 8001ed6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001eda:	f103 031f 	add.w	r3, r3, #31
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <main+0x74>
  {
	  printf("No SD Card found : (%d)\r\n", fres);
 8001ee4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ee8:	f103 031f 	add.w	r3, r3, #31
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <main+0xcc>)
 8001ef2:	f00e fffd 	bl	8010ef0 <iprintf>
	  while(1);
 8001ef6:	e7fe      	b.n	8001ef6 <main+0x72>
  }
  else{
	  printf("SD Card Mounted Successfully!!!\r\n");
 8001ef8:	4816      	ldr	r0, [pc, #88]	; (8001f54 <main+0xd0>)
 8001efa:	f00f f87f 	bl	8010ffc <puts>
  }

  printf("Start playing the song\r\n");
 8001efe:	4816      	ldr	r0, [pc, #88]	; (8001f58 <main+0xd4>)
 8001f00:	f00f f87c 	bl	8010ffc <puts>
  AUDIO_PLAYER_Start(0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fcf9 	bl	80028fc <AUDIO_PLAYER_Start>

  while (!IsFinished)
 8001f0a:	e009      	b.n	8001f20 <main+0x9c>
  {
	AUDIO_PLAYER_Process(TRUE);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 fd55 	bl	80029bc <AUDIO_PLAYER_Process>

	if (AudioState == AUDIO_STATE_STOP)
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <main+0xd8>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d102      	bne.n	8001f20 <main+0x9c>
	{
		IsFinished = 1;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <main+0xdc>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  while (!IsFinished)
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <main+0xdc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f1      	beq.n	8001f0c <main+0x88>
	}
  }

  if(AudioState == AUDIO_STATE_STOP){
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <main+0xd8>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d107      	bne.n	8001f40 <main+0xbc>
	  //We're done, so de-mount the drive
	  f_mount(NULL, "", 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	4906      	ldr	r1, [pc, #24]	; (8001f4c <main+0xc8>)
 8001f34:	2000      	movs	r0, #0
 8001f36:	f00d fb3d 	bl	800f5b4 <f_mount>
	  printf("SD Card Unmounted Successfully!!!\r\n");
 8001f3a:	480a      	ldr	r0, [pc, #40]	; (8001f64 <main+0xe0>)
 8001f3c:	f00f f85e 	bl	8010ffc <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001f40:	f00e fb94 	bl	801066c <MX_USB_HOST_Process>
 8001f44:	e7fc      	b.n	8001f40 <main+0xbc>
 8001f46:	bf00      	nop
 8001f48:	08011dac 	.word	0x08011dac
 8001f4c:	08011dcc 	.word	0x08011dcc
 8001f50:	08011dd0 	.word	0x08011dd0
 8001f54:	08011dec 	.word	0x08011dec
 8001f58:	08011e10 	.word	0x08011e10
 8001f5c:	200013b0 	.word	0x200013b0
 8001f60:	200003a0 	.word	0x200003a0
 8001f64:	08011e28 	.word	0x08011e28

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b094      	sub	sp, #80	; 0x50
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2230      	movs	r2, #48	; 0x30
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00e fed2 	bl	8010d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <SystemClock_Config+0xc8>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <SystemClock_Config+0xc8>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <SystemClock_Config+0xc8>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <SystemClock_Config+0xcc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a20      	ldr	r2, [pc, #128]	; (8002034 <SystemClock_Config+0xcc>)
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <SystemClock_Config+0xcc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001fdc:	23c0      	movs	r3, #192	; 0xc0
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fb79 	bl	80076e4 <HAL_RCC_OscConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ff8:	f000 f982 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffc:	230f      	movs	r3, #15
 8001ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800200c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2103      	movs	r1, #3
 8002018:	4618      	mov	r0, r3
 800201a:	f005 fddb 	bl	8007bd4 <HAL_RCC_ClockConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002024:	f000 f96c 	bl	8002300 <Error_Handler>
  }
}
 8002028:	bf00      	nop
 800202a:	3750      	adds	r7, #80	; 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000

08002038 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_I2C1_Init+0x50>)
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <MX_I2C1_Init+0x54>)
 8002040:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_I2C1_Init+0x50>)
 8002044:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_I2C1_Init+0x58>)
 8002046:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_I2C1_Init+0x50>)
 8002056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <MX_I2C1_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_I2C1_Init+0x50>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <MX_I2C1_Init+0x50>)
 8002076:	f003 fa97 	bl	80055a8 <HAL_I2C_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002080:	f000 f93e 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000208 	.word	0x20000208
 800208c:	40005400 	.word	0x40005400
 8002090:	000186a0 	.word	0x000186a0

08002094 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_I2S3_Init+0x54>)
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <MX_I2S3_Init+0x58>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020c0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_I2S3_Init+0x54>)
 80020d6:	f004 fa65 	bl	80065a4 <HAL_I2S_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80020e0:	f000 f90e 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000025c 	.word	0x2000025c
 80020ec:	40003c00 	.word	0x40003c00

080020f0 <MX_SPI1_Init>:
  * @param None
  * @retval None
  */

static void MX_SPI1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_SPI1_Init+0x64>)
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <MX_SPI1_Init+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_SPI1_Init+0x64>)
 80020fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002100:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_SPI1_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_SPI1_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_SPI1_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_SPI1_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_SPI1_Init+0x64>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_SPI1_Init+0x64>)
 8002124:	2238      	movs	r2, #56	; 0x38
 8002126:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_SPI1_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_SPI1_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_SPI1_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_SPI1_Init+0x64>)
 800213c:	220a      	movs	r2, #10
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_SPI1_Init+0x64>)
 8002142:	f006 f8f9 	bl	8008338 <HAL_SPI_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800214c:	f000 f8d8 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000304 	.word	0x20000304
 8002158:	40013000 	.word	0x40013000

0800215c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_USART1_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART1_UART_Init+0x4c>)
 8002194:	f006 fd02 	bl	8008b9c <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f000 f8af 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000035c 	.word	0x2000035c
 80021ac:	40011000 	.word	0x40011000

080021b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_DMA_Init+0x3c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <MX_DMA_Init+0x3c>)
 80021c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_DMA_Init+0x3c>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2010      	movs	r0, #16
 80021d8:	f000 fecd 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021dc:	2010      	movs	r0, #16
 80021de:	f000 fee6 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <MX_GPIO_Init+0xe0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <MX_GPIO_Init+0xe0>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <MX_GPIO_Init+0xe0>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_GPIO_Init+0xe0>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2111      	movs	r1, #17
 800227a:	4816      	ldr	r0, [pc, #88]	; (80022d4 <MX_GPIO_Init+0xe4>)
 800227c:	f001 fd58 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002280:	2311      	movs	r3, #17
 8002282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	4619      	mov	r1, r3
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <MX_GPIO_Init+0xe4>)
 8002298:	f001 fae2 	bl	8003860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800229c:	2301      	movs	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4809      	ldr	r0, [pc, #36]	; (80022d8 <MX_GPIO_Init+0xe8>)
 80022b2:	f001 fad5 	bl	8003860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2006      	movs	r0, #6
 80022bc:	f000 fe5b 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022c0:	2006      	movs	r0, #6
 80022c2:	f000 fe74 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	; 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020000 	.word	0x40020000

080022dc <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022e4:	1d39      	adds	r1, r7, #4
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	2201      	movs	r2, #1
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <__io_putchar+0x20>)
 80022ee:	f006 fca2 	bl	8008c36 <HAL_UART_Transmit>
  return ch;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000035c 	.word	0x2000035c

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	e7fe      	b.n	8002308 <Error_Handler+0x8>
	...

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_MspInit+0x4c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_MspInit+0x4c>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_MspInit+0x4c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_MspInit+0x4c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_MspInit+0x4c>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_MspInit+0x4c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_I2C_MspInit+0x84>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12c      	bne.n	80023d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800239a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a0:	2312      	movs	r3, #18
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ac:	2304      	movs	r3, #4
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <HAL_I2C_MspInit+0x8c>)
 80023b8:	f001 fa52 	bl	8003860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 80023c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_I2C_MspInit+0x88>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023d8:	bf00      	nop
 80023da:	3728      	adds	r7, #40	; 0x28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40005400 	.word	0x40005400
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020400 	.word	0x40020400

080023ec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_I2C_MspDeInit+0x38>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_I2C_MspDeInit+0x3c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_I2C_MspDeInit+0x3c>)
 8002404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800240a:	2140      	movs	r1, #64	; 0x40
 800240c:	4807      	ldr	r0, [pc, #28]	; (800242c <HAL_I2C_MspDeInit+0x40>)
 800240e:	f001 fbab 	bl	8003b68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_I2C_MspDeInit+0x40>)
 8002418:	f001 fba6 	bl	8003b68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40005400 	.word	0x40005400
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400

08002430 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b090      	sub	sp, #64	; 0x40
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a4f      	ldr	r2, [pc, #316]	; (800259c <HAL_I2S_MspInit+0x16c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	f040 8096 	bne.w	8002592 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002466:	2301      	movs	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800246a:	23c8      	movs	r3, #200	; 0xc8
 800246c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800246e:	2305      	movs	r3, #5
 8002470:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4618      	mov	r0, r3
 800247c:	f005 fdca 	bl	8008014 <HAL_RCCEx_PeriphCLKConfig>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8002486:	f7ff ff3b 	bl	8002300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 8002494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a35      	ldr	r2, [pc, #212]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_I2S_MspInit+0x170>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024de:	2310      	movs	r3, #16
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024ee:	2306      	movs	r3, #6
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	482a      	ldr	r0, [pc, #168]	; (80025a4 <HAL_I2S_MspInit+0x174>)
 80024fa:	f001 f9b1 	bl	8003860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80024fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002510:	2306      	movs	r3, #6
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	4823      	ldr	r0, [pc, #140]	; (80025a8 <HAL_I2S_MspInit+0x178>)
 800251c:	f001 f9a0 	bl	8003860 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002522:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_I2S_MspInit+0x180>)
 8002524:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800252e:	2240      	movs	r2, #64	; 0x40
 8002530:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002546:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002556:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002560:	2204      	movs	r2, #4
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002566:	2203      	movs	r2, #3
 8002568:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800256c:	2200      	movs	r2, #0
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 8002578:	f000 fd34 	bl	8002fe4 <HAL_DMA_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8002582:	f7ff febd 	bl	8002300 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_I2S_MspInit+0x17c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002592:	bf00      	nop
 8002594:	3740      	adds	r7, #64	; 0x40
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40003c00 	.word	0x40003c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020800 	.word	0x40020800
 80025ac:	200002a4 	.word	0x200002a4
 80025b0:	40026088 	.word	0x40026088

080025b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_SPI_MspInit+0x84>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12b      	bne.n	800262e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_SPI_MspInit+0x88>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_SPI_MspInit+0x88>)
 80025e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_SPI_MspInit+0x88>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_SPI_MspInit+0x88>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_SPI_MspInit+0x88>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_SPI_MspInit+0x88>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800260e:	23e0      	movs	r3, #224	; 0xe0
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800261e:	2305      	movs	r3, #5
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <HAL_SPI_MspInit+0x8c>)
 800262a:	f001 f919 	bl	8003860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40013000 	.word	0x40013000
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_UART_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12c      	bne.n	80026c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_UART_MspInit+0x88>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_UART_MspInit+0x88>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_UART_MspInit+0x88>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_UART_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_UART_MspInit+0x88>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_UART_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800269e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b0:	2307      	movs	r3, #7
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 80026bc:	f001 f8d0 	bl	8003860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <NMI_Handler+0x4>

080026da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <MemManage_Handler+0x4>

080026e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f000 fb0a 	bl	8002d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800272c:	2001      	movs	r0, #1
 800272e:	f001 fb19 	bl	8003d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <DMA1_Stream5_IRQHandler+0x10>)
 800273e:	f000 fe25 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200002a4 	.word	0x200002a4

0800274c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <OTG_FS_IRQHandler+0x10>)
 8002752:	f001 fd89 	bl	8004268 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20002e08 	.word	0x20002e08

08002760 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e00a      	b.n	8002788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002772:	f3af 8000 	nop.w
 8002776:	4601      	mov	r1, r0
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf0      	blt.n	8002772 <_read+0x12>
  }

  return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e009      	b.n	80027c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fd91 	bl	80022dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf1      	blt.n	80027ac <_write+0x12>
  }
  return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_close>:

int _close(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fa:	605a      	str	r2, [r3, #4]
  return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_isatty>:

int _isatty(int file)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <_sbrk+0x5c>)
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <_sbrk+0x60>)
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <_sbrk+0x64>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <_sbrk+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800286c:	f00e fa10 	bl	8010c90 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20020000 	.word	0x20020000
 800289c:	00000400 	.word	0x00000400
 80028a0:	200003a4 	.word	0x200003a4
 80028a4:	20003120 	.word	0x20003120

080028a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <SystemInit+0x20>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <SystemInit+0x20>)
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <PlayerInit+0x2c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4619      	mov	r1, r3
 80028de:	2003      	movs	r0, #3
 80028e0:	f7fd fe50 	bl	8000584 <AUDIO_OUT_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <PlayerInit+0x22>
	{
		return 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 80028ee:	2300      	movs	r3, #0
	}
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2000003c 	.word	0x2000003c

080028fc <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8002906:	4828      	ldr	r0, [pc, #160]	; (80029a8 <AUDIO_PLAYER_Start+0xac>)
 8002908:	f00d fa43 	bl	800fd92 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 800290c:	f7fe faa0 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	b29b      	uxth	r3, r3
 8002918:	429a      	cmp	r2, r3
 800291a:	d93f      	bls.n	800299c <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <AUDIO_PLAYER_Start+0xb0>)
 800292a:	4413      	add	r3, r2
 800292c:	3301      	adds	r3, #1
 800292e:	2201      	movs	r2, #1
 8002930:	4619      	mov	r1, r3
 8002932:	481d      	ldr	r0, [pc, #116]	; (80029a8 <AUDIO_PLAYER_Start+0xac>)
 8002934:	f00c fe84 	bl	800f640 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	222c      	movs	r2, #44	; 0x2c
 800293e:	491c      	ldr	r1, [pc, #112]	; (80029b0 <AUDIO_PLAYER_Start+0xb4>)
 8002940:	4819      	ldr	r0, [pc, #100]	; (80029a8 <AUDIO_PLAYER_Start+0xac>)
 8002942:	f00d f849 	bl	800f9d8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <AUDIO_PLAYER_Start+0xb4>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ffbe 	bl	80028cc <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <AUDIO_PLAYER_Start+0xb8>)
 8002952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 800295a:	2100      	movs	r1, #0
 800295c:	4812      	ldr	r0, [pc, #72]	; (80029a8 <AUDIO_PLAYER_Start+0xac>)
 800295e:	f00d fa42 	bl	800fde6 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800296a:	4912      	ldr	r1, [pc, #72]	; (80029b4 <AUDIO_PLAYER_Start+0xb8>)
 800296c:	480e      	ldr	r0, [pc, #56]	; (80029a8 <AUDIO_PLAYER_Start+0xac>)
 800296e:	f00d f833 	bl	800f9d8 <f_read>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <AUDIO_PLAYER_Start+0xbc>)
 800297a:	2203      	movs	r2, #3
 800297c:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002988:	480a      	ldr	r0, [pc, #40]	; (80029b4 <AUDIO_PLAYER_Start+0xb8>)
 800298a:	f7fd fe49 	bl	8000620 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <AUDIO_PLAYER_Start+0xb8>)
 8002992:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002996:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8002998:	2300      	movs	r3, #0
 800299a:	e000      	b.n	800299e <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200017bc 	.word	0x200017bc
 80029ac:	200013b4 	.word	0x200013b4
 80029b0:	20001790 	.word	0x20001790
 80029b4:	200003a8 	.word	0x200003a8
 80029b8:	200013b0 	.word	0x200013b0

080029bc <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 80029ca:	4b82      	ldr	r3, [pc, #520]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3b03      	subs	r3, #3
 80029d0:	2b0a      	cmp	r3, #10
 80029d2:	f200 80f6 	bhi.w	8002bc2 <AUDIO_PLAYER_Process+0x206>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <AUDIO_PLAYER_Process+0x20>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a09 	.word	0x08002a09
 80029e0:	08002bc3 	.word	0x08002bc3
 80029e4:	08002acf 	.word	0x08002acf
 80029e8:	08002b1d 	.word	0x08002b1d
 80029ec:	08002bc3 	.word	0x08002bc3
 80029f0:	08002bc3 	.word	0x08002bc3
 80029f4:	08002abd 	.word	0x08002abd
 80029f8:	08002b5f 	.word	0x08002b5f
 80029fc:	08002b6b 	.word	0x08002b6b
 8002a00:	08002b77 	.word	0x08002b77
 8002a04:	08002b9d 	.word	0x08002b9d
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002a08:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <AUDIO_PLAYER_Process+0x220>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d305      	bcc.n	8002a24 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f7fd fe57 	bl	80006cc <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002a20:	2205      	movs	r2, #5
 8002a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11e      	bne.n	8002a6e <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a38:	4967      	ldr	r1, [pc, #412]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a3a:	4869      	ldr	r0, [pc, #420]	; (8002be0 <AUDIO_PLAYER_Process+0x224>)
 8002a3c:	f00c ffcc 	bl	800f9d8 <f_read>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a46:	2002      	movs	r0, #2
 8002a48:	f7fd fe40 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0bc      	b.n	8002bca <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a6c:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002a6e:	4b5a      	ldr	r3, [pc, #360]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	f040 80a5 	bne.w	8002bc6 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002a7c:	f107 0308 	add.w	r3, r7, #8
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	4957      	ldr	r1, [pc, #348]	; (8002be4 <AUDIO_PLAYER_Process+0x228>)
 8002a86:	4856      	ldr	r0, [pc, #344]	; (8002be0 <AUDIO_PLAYER_Process+0x224>)
 8002a88:	f00c ffa6 	bl	800f9d8 <f_read>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002a92:	2002      	movs	r0, #2
 8002a94:	f7fd fe1a 	bl	80006cc <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e096      	b.n	8002bca <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002a9c:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <AUDIO_PLAYER_Process+0x21c>)
 8002ab4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ab8:	6053      	str	r3, [r2, #4]
    }
    break;
 8002aba:	e084      	b.n	8002bc6 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7fd fe05 	bl	80006cc <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8002ac2:	4b44      	ldr	r3, [pc, #272]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
    break;
 8002acc:	e07c      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8002ace:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae6:	461c      	mov	r4, r3
 8002ae8:	f7fe f9b2 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 8002aec:	4603      	mov	r3, r0
 8002aee:	429c      	cmp	r4, r3
 8002af0:	db09      	blt.n	8002b06 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e002      	b.n	8002b06 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002b02:	2209      	movs	r2, #9
 8002b04:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b06:	2002      	movs	r0, #2
 8002b08:	f7fd fde0 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002b0c:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fef1 	bl	80028fc <AUDIO_PLAYER_Start>
    break;    
 8002b1a:	e055      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da07      	bge.n	8002b48 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002b38:	f7fe f98a 	bl	8000e50 <AUDIO_GetWavObjectNumber>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b21a      	sxth	r2, r3
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b46:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002b48:	2002      	movs	r0, #2
 8002b4a:	f7fd fdbf 	bl	80006cc <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002b4e:	4b26      	ldr	r3, [pc, #152]	; (8002be8 <AUDIO_PLAYER_Process+0x22c>)
 8002b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fed0 	bl	80028fc <AUDIO_PLAYER_Start>
    break;   
 8002b5c:	e034      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8002b5e:	f7fd fd89 	bl	8000674 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
    break;
 8002b68:	e02e      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8002b6a:	f7fd fd99 	bl	80006a0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002b70:	2203      	movs	r2, #3
 8002b72:	701a      	strb	r2, [r3, #0]
    break;
 8002b74:	e028      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b5a      	cmp	r3, #90	; 0x5a
 8002b7c:	d804      	bhi.n	8002b88 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330a      	adds	r3, #10
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002b86:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fdc4 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002b96:	2203      	movs	r2, #3
 8002b98:	701a      	strb	r2, [r3, #0]
    break;
 8002b9a:	e015      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d904      	bls.n	8002bae <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3b0a      	subs	r3, #10
 8002baa:	4a10      	ldr	r2, [pc, #64]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002bac:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <AUDIO_PLAYER_Process+0x230>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fdb1 	bl	800071c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <AUDIO_PLAYER_Process+0x218>)
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	701a      	strb	r2, [r3, #0]
    break;
 8002bc0:	e002      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <AUDIO_PLAYER_Process+0x20c>
    break;
 8002bc6:	bf00      	nop
  }
  return audio_error;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200013b0 	.word	0x200013b0
 8002bd8:	200003a8 	.word	0x200003a8
 8002bdc:	20001790 	.word	0x20001790
 8002be0:	200017bc 	.word	0x200017bc
 8002be4:	20000ba8 	.word	0x20000ba8
 8002be8:	200013b2 	.word	0x200013b2
 8002bec:	2000003c 	.word	0x2000003c

08002bf0 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d104      	bne.n	8002c06 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c02:	2202      	movs	r2, #2
 8002c04:	701a      	strb	r2, [r3, #0]
  }
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	200013b0 	.word	0x200013b0
 8002c14:	200003a8 	.word	0x200003a8

08002c18 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d104      	bne.n	8002c2e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	200013b0 	.word	0x200013b0
 8002c3c:	200003a8 	.word	0x200003a8

08002c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c44:	480d      	ldr	r0, [pc, #52]	; (8002c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c46:	490e      	ldr	r1, [pc, #56]	; (8002c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c5c:	4c0b      	ldr	r4, [pc, #44]	; (8002c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c6a:	f7ff fe1d 	bl	80028a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c6e:	f00e f815 	bl	8010c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c72:	f7ff f907 	bl	8001e84 <main>
  bx  lr    
 8002c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002c84:	08012458 	.word	0x08012458
  ldr r2, =_sbss
 8002c88:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002c8c:	2000311c 	.word	0x2000311c

08002c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_Init+0x40>)
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_Init+0x40>)
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_Init+0x40>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f000 f94f 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc2:	200f      	movs	r0, #15
 8002cc4:	f000 f808 	bl	8002cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc8:	f7ff fb20 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00

08002cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_InitTick+0x54>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_InitTick+0x58>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f967 	bl	8002fca <HAL_SYSTICK_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00e      	b.n	8002d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d80a      	bhi.n	8002d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f000 f92f 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <HAL_InitTick+0x5c>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000038 	.word	0x20000038
 8002d30:	20000044 	.word	0x20000044
 8002d34:	20000040 	.word	0x20000040

08002d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_IncTick+0x20>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_IncTick+0x24>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_IncTick+0x24>)
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000044 	.word	0x20000044
 8002d5c:	200027ec 	.word	0x200027ec

08002d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return uwTick;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_GetTick+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	200027ec 	.word	0x200027ec

08002d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff ffee 	bl	8002d60 <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d005      	beq.n	8002d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_Delay+0x44>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d9e:	bf00      	nop
 8002da0:	f7ff ffde 	bl	8002d60 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d8f7      	bhi.n	8002da0 <HAL_Delay+0x28>
  {
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000044 	.word	0x20000044

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	; (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff feb6 	bl	8002d60 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e099      	b.n	8003134 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003022:	f7ff fe9d 	bl	8002d60 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b05      	cmp	r3, #5
 800302e:	d908      	bls.n	8003042 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e078      	b.n	8003134 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e8      	bne.n	8003022 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_DMA_Init+0x158>)
 800305c:	4013      	ands	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4313      	orrs	r3, r2
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d117      	bne.n	8003106 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb3d 	bl	8003768 <DMA_CheckFifoParam>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003102:	2301      	movs	r3, #1
 8003104:	e016      	b.n	8003134 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 faf4 	bl	80036fc <DMA_CalcBaseAndBitshift>
 8003114:	4603      	mov	r3, r0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	f010803f 	.word	0xf010803f

08003140 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e050      	b.n	80031f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d101      	bne.n	8003162 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
 8003160:	e048      	b.n	80031f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2221      	movs	r2, #33	; 0x21
 80031a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 faaa 	bl	80036fc <DMA_CalcBaseAndBitshift>
 80031a8:	4603      	mov	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	223f      	movs	r2, #63	; 0x3f
 80031d6:	409a      	lsls	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_DMA_Start_IT+0x26>
 800321e:	2302      	movs	r3, #2
 8003220:	e040      	b.n	80032a4 <HAL_DMA_Start_IT+0xa8>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d12f      	bne.n	8003296 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fa28 	bl	80036a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	223f      	movs	r2, #63	; 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0216 	orr.w	r2, r2, #22
 800326a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e005      	b.n	80032a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032ba:	f7ff fd51 	bl	8002d60 <HAL_GetTick>
 80032be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d008      	beq.n	80032de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e052      	b.n	8003384 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0216 	bic.w	r2, r2, #22
 80032ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_DMA_Abort+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0208 	bic.w	r2, r2, #8
 800331c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332e:	e013      	b.n	8003358 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003330:	f7ff fd16 	bl	8002d60 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b05      	cmp	r3, #5
 800333c:	d90c      	bls.n	8003358 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e015      	b.n	8003384 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e4      	bne.n	8003330 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	223f      	movs	r2, #63	; 0x3f
 800336c:	409a      	lsls	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003398:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <HAL_DMA_IRQHandler+0x248>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a8e      	ldr	r2, [pc, #568]	; (80035d8 <HAL_DMA_IRQHandler+0x24c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2201      	movs	r2, #1
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2201      	movs	r2, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d043      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03c      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2210      	movs	r2, #16
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d024      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e01f      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e016      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	2220      	movs	r2, #32
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 808f 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8087 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2220      	movs	r2, #32
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b05      	cmp	r3, #5
 8003534:	d136      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_IRQHandler+0x1da>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d07e      	beq.n	8003698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
        }
        return;
 80035a2:	e079      	b.n	8003698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d031      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e02c      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
 80035d2:	bf00      	nop
 80035d4:	20000038 	.word	0x20000038
 80035d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e01e      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0210 	bic.w	r2, r2, #16
 800360a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	2b00      	cmp	r3, #0
 8003632:	d032      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2205      	movs	r2, #5
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d307      	bcc.n	8003674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f2      	bne.n	8003658 <HAL_DMA_IRQHandler+0x2cc>
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e000      	b.n	800369a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003698:	bf00      	nop
    }
  }
}
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d108      	bne.n	80036e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036de:	e007      	b.n	80036f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3b10      	subs	r3, #16
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <DMA_CalcBaseAndBitshift+0x64>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <DMA_CalcBaseAndBitshift+0x68>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d909      	bls.n	800373e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	659a      	str	r2, [r3, #88]	; 0x58
 800373c:	e007      	b.n	800374e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	aaaaaaab 	.word	0xaaaaaaab
 8003764:	08011f68 	.word	0x08011f68

08003768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d856      	bhi.n	8003836 <DMA_CheckFifoParam+0xce>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <DMA_CheckFifoParam+0x28>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b3 	.word	0x080037b3
 8003798:	080037a1 	.word	0x080037a1
 800379c:	08003837 	.word	0x08003837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d046      	beq.n	800383a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e043      	b.n	800383a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ba:	d140      	bne.n	800383e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e03d      	b.n	800383e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	d121      	bne.n	8003810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d837      	bhi.n	8003842 <DMA_CheckFifoParam+0xda>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <DMA_CheckFifoParam+0x70>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037ef 	.word	0x080037ef
 80037e0:	080037e9 	.word	0x080037e9
 80037e4:	08003801 	.word	0x08003801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e030      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d025      	beq.n	8003846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e022      	b.n	8003846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003808:	d11f      	bne.n	800384a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800380e:	e01c      	b.n	800384a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d903      	bls.n	800381e <DMA_CheckFifoParam+0xb6>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d003      	beq.n	8003824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800381c:	e018      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      break;
 8003822:	e015      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e00b      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 8003836:	bf00      	nop
 8003838:	e00a      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e008      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e006      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;   
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
    }
  } 
  
  return status; 
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e159      	b.n	8003b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8148 	bne.w	8003b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d005      	beq.n	80038b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d130      	bne.n	8003914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0201 	and.w	r2, r3, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d017      	beq.n	8003950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d123      	bne.n	80039a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a2 	beq.w	8003b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	4a56      	ldr	r2, [pc, #344]	; (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	; 0x44
 80039f6:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a02:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	3302      	adds	r3, #2
 8003a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a49      	ldr	r2, [pc, #292]	; (8003b50 <HAL_GPIO_Init+0x2f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_Init+0x202>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a48      	ldr	r2, [pc, #288]	; (8003b54 <HAL_GPIO_Init+0x2f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0x1fe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a47      	ldr	r2, [pc, #284]	; (8003b58 <HAL_GPIO_Init+0x2f8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_Init+0x1fa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a46      	ldr	r2, [pc, #280]	; (8003b5c <HAL_GPIO_Init+0x2fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x1f6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a45      	ldr	r2, [pc, #276]	; (8003b60 <HAL_GPIO_Init+0x300>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_Init+0x1f2>
 8003a4e:	2304      	movs	r3, #4
 8003a50:	e008      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e006      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e004      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e002      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a62:	2300      	movs	r3, #0
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f002 0203 	and.w	r2, r2, #3
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4093      	lsls	r3, r2
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a74:	4935      	ldr	r1, [pc, #212]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad6:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b24:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <HAL_GPIO_Init+0x304>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	f67f aea2 	bls.w	800387c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3724      	adds	r7, #36	; 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e0bb      	b.n	8003cfc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b84:	2201      	movs	r2, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	f040 80ab 	bne.w	8003cf6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ba0:	4a5c      	ldr	r2, [pc, #368]	; (8003d14 <HAL_GPIO_DeInit+0x1ac>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a54      	ldr	r2, [pc, #336]	; (8003d18 <HAL_GPIO_DeInit+0x1b0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_GPIO_DeInit+0x96>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a53      	ldr	r2, [pc, #332]	; (8003d1c <HAL_GPIO_DeInit+0x1b4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_DeInit+0x92>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_GPIO_DeInit+0x1b8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_GPIO_DeInit+0x8e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_GPIO_DeInit+0x1bc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <HAL_GPIO_DeInit+0x8a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_GPIO_DeInit+0x1c0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_GPIO_DeInit+0x86>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e008      	b.n	8003c00 <HAL_GPIO_DeInit+0x98>
 8003bee:	2307      	movs	r3, #7
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_DeInit+0x98>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e004      	b.n	8003c00 <HAL_GPIO_DeInit+0x98>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_DeInit+0x98>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_DeInit+0x98>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	f002 0203 	and.w	r2, r2, #3
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d132      	bne.n	8003c76 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	4944      	ldr	r1, [pc, #272]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c1e:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	4941      	ldr	r1, [pc, #260]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	493d      	ldr	r1, [pc, #244]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	493a      	ldr	r1, [pc, #232]	; (8003d2c <HAL_GPIO_DeInit+0x1c4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_GPIO_DeInit+0x1ac>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	43da      	mvns	r2, r3
 8003c68:	482a      	ldr	r0, [pc, #168]	; (8003d14 <HAL_GPIO_DeInit+0x1ac>)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	400a      	ands	r2, r1
 8003c70:	3302      	adds	r3, #2
 8003c72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2103      	movs	r1, #3
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	401a      	ands	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	08da      	lsrs	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3208      	adds	r2, #8
 8003c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	08d2      	lsrs	r2, r2, #3
 8003cac:	4019      	ands	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3208      	adds	r2, #8
 8003cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2103      	movs	r1, #3
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	401a      	ands	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2103      	movs	r1, #3
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b0f      	cmp	r3, #15
 8003d00:	f67f af40 	bls.w	8003b84 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40013800 	.word	0x40013800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40020c00 	.word	0x40020c00
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f86a 	bl	8001e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40013c00 	.word	0x40013c00

08003d94 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b08f      	sub	sp, #60	; 0x3c
 8003d98:	af0a      	add	r7, sp, #40	; 0x28
 8003d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e054      	b.n	8003e50 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f00c fc8b 	bl	80106dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f005 fb0d 	bl	8009404 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	687e      	ldr	r6, [r7, #4]
 8003df2:	466d      	mov	r5, sp
 8003df4:	f106 0410 	add.w	r4, r6, #16
 8003df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e08:	1d33      	adds	r3, r6, #4
 8003e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f005 fa87 	bl	8009320 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 fb04 	bl	8009426 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	687e      	ldr	r6, [r7, #4]
 8003e26:	466d      	mov	r5, sp
 8003e28:	f106 0410 	add.w	r4, r6, #16
 8003e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e38:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e3c:	1d33      	adds	r3, r6, #4
 8003e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f005 fc8d 	bl	8009760 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e58 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af04      	add	r7, sp, #16
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	70fb      	strb	r3, [r7, #3]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70bb      	strb	r3, [r7, #2]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_HCD_HC_Init+0x28>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e076      	b.n	8003f6e <HAL_HCD_HC_Init+0x116>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	333d      	adds	r3, #61	; 0x3d
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3338      	adds	r3, #56	; 0x38
 8003ea8:	787a      	ldrb	r2, [r7, #1]
 8003eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3340      	adds	r3, #64	; 0x40
 8003eba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ebc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	212c      	movs	r1, #44	; 0x2c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	3339      	adds	r3, #57	; 0x39
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	333f      	adds	r3, #63	; 0x3f
 8003ede:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	78ba      	ldrb	r2, [r7, #2]
 8003ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eec:	b2d0      	uxtb	r0, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	333a      	adds	r3, #58	; 0x3a
 8003efa:	4602      	mov	r2, r0
 8003efc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003efe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da09      	bge.n	8003f1a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	333b      	adds	r3, #59	; 0x3b
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e008      	b.n	8003f2c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	333b      	adds	r3, #59	; 0x3b
 8003f28:	2200      	movs	r2, #0
 8003f2a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	212c      	movs	r1, #44	; 0x2c
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	333c      	adds	r3, #60	; 0x3c
 8003f3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f3e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	787c      	ldrb	r4, [r7, #1]
 8003f46:	78ba      	ldrb	r2, [r7, #2]
 8003f48:	78f9      	ldrb	r1, [r7, #3]
 8003f4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	f005 fd86 	bl	8009a6c <USB_HC_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}

08003f76 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_HCD_HC_Halt+0x1e>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e00f      	b.n	8003fb4 <HAL_HCD_HC_Halt+0x3e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 ffd6 	bl	8009f56 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	70fb      	strb	r3, [r7, #3]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70bb      	strb	r3, [r7, #2]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	333b      	adds	r3, #59	; 0x3b
 8003fe4:	78ba      	ldrb	r2, [r7, #2]
 8003fe6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	333f      	adds	r3, #63	; 0x3f
 8003ff6:	787a      	ldrb	r2, [r7, #1]
 8003ff8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ffa:	7c3b      	ldrb	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d112      	bne.n	8004026 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3342      	adds	r3, #66	; 0x42
 800400e:	2203      	movs	r2, #3
 8004010:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	333d      	adds	r3, #61	; 0x3d
 8004020:	7f3a      	ldrb	r2, [r7, #28]
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e008      	b.n	8004038 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	3342      	adds	r3, #66	; 0x42
 8004034:	2202      	movs	r2, #2
 8004036:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b03      	cmp	r3, #3
 800403c:	f200 80c6 	bhi.w	80041cc <HAL_HCD_HC_SubmitRequest+0x210>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004059 	.word	0x08004059
 800404c:	080041b9 	.word	0x080041b9
 8004050:	080040bd 	.word	0x080040bd
 8004054:	0800413b 	.word	0x0800413b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004058:	7c3b      	ldrb	r3, [r7, #16]
 800405a:	2b01      	cmp	r3, #1
 800405c:	f040 80b8 	bne.w	80041d0 <HAL_HCD_HC_SubmitRequest+0x214>
 8004060:	78bb      	ldrb	r3, [r7, #2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 80b4 	bne.w	80041d0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004068:	8b3b      	ldrh	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3355      	adds	r3, #85	; 0x55
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	3355      	adds	r3, #85	; 0x55
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3342      	adds	r3, #66	; 0x42
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80040a6:	e093      	b.n	80041d0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3342      	adds	r3, #66	; 0x42
 80040b6:	2202      	movs	r2, #2
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e089      	b.n	80041d0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80040bc:	78bb      	ldrb	r3, [r7, #2]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	3355      	adds	r3, #85	; 0x55
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3342      	adds	r3, #66	; 0x42
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80040e8:	e073      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3342      	adds	r3, #66	; 0x42
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
      break;
 80040fc:	e069      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	3354      	adds	r3, #84	; 0x54
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3342      	adds	r3, #66	; 0x42
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
      break;
 8004124:	e055      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3342      	adds	r3, #66	; 0x42
 8004134:	2202      	movs	r2, #2
 8004136:	701a      	strb	r2, [r3, #0]
      break;
 8004138:	e04b      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800413a:	78bb      	ldrb	r3, [r7, #2]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11d      	bne.n	800417c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3355      	adds	r3, #85	; 0x55
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3342      	adds	r3, #66	; 0x42
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004166:	e034      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3342      	adds	r3, #66	; 0x42
 8004176:	2202      	movs	r2, #2
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	e02a      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3354      	adds	r3, #84	; 0x54
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3342      	adds	r3, #66	; 0x42
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
      break;
 80041a2:	e016      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3342      	adds	r3, #66	; 0x42
 80041b2:	2202      	movs	r2, #2
 80041b4:	701a      	strb	r2, [r3, #0]
      break;
 80041b6:	e00c      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3342      	adds	r3, #66	; 0x42
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80041d0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	3344      	adds	r3, #68	; 0x44
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	8b3a      	ldrh	r2, [r7, #24]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	202c      	movs	r0, #44	; 0x2c
 80041ec:	fb00 f303 	mul.w	r3, r0, r3
 80041f0:	440b      	add	r3, r1
 80041f2:	334c      	adds	r3, #76	; 0x4c
 80041f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3360      	adds	r3, #96	; 0x60
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3350      	adds	r3, #80	; 0x50
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	3339      	adds	r3, #57	; 0x39
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3361      	adds	r3, #97	; 0x61
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	222c      	movs	r2, #44	; 0x2c
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	3338      	adds	r3, #56	; 0x38
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	18d1      	adds	r1, r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	f005 fd2a 	bl	8009cb0 <USB_HC_StartXfer>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop

08004268 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f005 fa2b 	bl	80096da <USB_GetMode>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	f040 80f6 	bne.w	8004478 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f005 fa0f 	bl	80096b4 <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80ec 	beq.w	8004476 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f005 fa06 	bl	80096b4 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b2:	d104      	bne.n	80042be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80042bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f005 f9f6 	bl	80096b4 <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d2:	d104      	bne.n	80042de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f005 f9e6 	bl	80096b4 <USB_ReadInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f2:	d104      	bne.n	80042fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f005 f9d6 	bl	80096b4 <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	d103      	bne.n	800431a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2202      	movs	r2, #2
 8004318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f005 f9c8 	bl	80096b4 <USB_ReadInterrupts>
 8004324:	4603      	mov	r3, r0
 8004326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800432a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432e:	d11c      	bne.n	800436a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004338:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800434a:	2110      	movs	r1, #16
 800434c:	6938      	ldr	r0, [r7, #16]
 800434e:	f005 f8b7 	bl	80094c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004352:	6938      	ldr	r0, [r7, #16]
 8004354:	f005 f8e8 	bl	8009528 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f005 fabe 	bl	80098e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f00c fa37 	bl	80107d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f005 f9a0 	bl	80096b4 <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800437e:	d102      	bne.n	8004386 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f001 f89e 	bl	80054c2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 f992 	bl	80096b4 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d106      	bne.n	80043a8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f00c fa00 	bl	80107a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 f981 	bl	80096b4 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d101      	bne.n	80043c0 <HAL_HCD_IRQHandler+0x158>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_HCD_IRQHandler+0x15a>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0210 	bic.w	r2, r2, #16
 80043d4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 ffa1 	bl	800531e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0210 	orr.w	r2, r2, #16
 80043ea:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 f95f 	bl	80096b4 <USB_ReadInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004400:	d13a      	bne.n	8004478 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f005 fd94 	bl	8009f34 <USB_HC_ReadInterrupt>
 800440c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e025      	b.n	8004460 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d018      	beq.n	800445a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800443a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443e:	d106      	bne.n	800444e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8ab 	bl	80045a2 <HCD_HC_IN_IRQHandler>
 800444c:	e005      	b.n	800445a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fbf9 	bl	8004c4c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3301      	adds	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3d4      	bcc.n	8004414 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004472:	615a      	str	r2, [r3, #20]
 8004474:	e000      	b.n	8004478 <HAL_HCD_IRQHandler+0x210>
      return;
 8004476:	bf00      	nop
    }
  }
}
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_HCD_Start+0x16>
 8004490:	2302      	movs	r3, #2
 8004492:	e013      	b.n	80044bc <HAL_HCD_Start+0x3e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	f005 fa80 	bl	80099a8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 ff98 	bl	80093e2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_HCD_Stop+0x16>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e00d      	b.n	80044f6 <HAL_HCD_Stop+0x32>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f005 fe6e 	bl	800a1c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fa22 	bl	8009954 <USB_ResetPort>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3360      	adds	r3, #96	; 0x60
 8004534:	781b      	ldrb	r3, [r3, #0]
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	3350      	adds	r3, #80	; 0x50
 800455c:	681b      	ldr	r3, [r3, #0]
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f005 fa66 	bl	8009a48 <USB_GetCurrentFrame>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f005 fa41 	bl	8009a1a <USB_GetHostSpeed>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d11a      	bne.n	8004608 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045de:	461a      	mov	r2, r3
 80045e0:	2304      	movs	r3, #4
 80045e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	212c      	movs	r1, #44	; 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3361      	adds	r3, #97	; 0x61
 80045f2:	2206      	movs	r2, #6
 80045f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f005 fca8 	bl	8009f56 <USB_HC_Halt>
 8004606:	e0af      	b.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d11b      	bne.n	8004658 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004632:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	3361      	adds	r3, #97	; 0x61
 8004642:	2207      	movs	r2, #7
 8004644:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f005 fc80 	bl	8009f56 <USB_HC_Halt>
 8004656:	e087      	b.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b20      	cmp	r3, #32
 800466c:	d109      	bne.n	8004682 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467a:	461a      	mov	r2, r3
 800467c:	2320      	movs	r3, #32
 800467e:	6093      	str	r3, [r2, #8]
 8004680:	e072      	b.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d11a      	bne.n	80046ce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a4:	461a      	mov	r2, r3
 80046a6:	2308      	movs	r3, #8
 80046a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	3361      	adds	r3, #97	; 0x61
 80046b8:	2205      	movs	r2, #5
 80046ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f005 fc45 	bl	8009f56 <USB_HC_Halt>
 80046cc:	e04c      	b.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d11b      	bne.n	800471e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3361      	adds	r3, #97	; 0x61
 8004708:	2208      	movs	r2, #8
 800470a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	4611      	mov	r1, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f005 fc1d 	bl	8009f56 <USB_HC_Halt>
 800471c:	e024      	b.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d119      	bne.n	8004768 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	461a      	mov	r2, r3
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3361      	adds	r3, #97	; 0x61
 8004754:	2206      	movs	r2, #6
 8004756:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f005 fbf7 	bl	8009f56 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477e:	d112      	bne.n	80047a6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f005 fbe3 	bl	8009f56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80047a4:	e24e      	b.n	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	f040 80df 	bne.w	800497c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d019      	beq.n	80047fa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3348      	adds	r3, #72	; 0x48
 80047d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0159      	lsls	r1, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	440b      	add	r3, r1
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	202c      	movs	r0, #44	; 0x2c
 80047f0:	fb00 f303 	mul.w	r3, r0, r3
 80047f4:	440b      	add	r3, r1
 80047f6:	3350      	adds	r3, #80	; 0x50
 80047f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3361      	adds	r3, #97	; 0x61
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	335c      	adds	r3, #92	; 0x5c
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	461a      	mov	r2, r3
 800482c:	2301      	movs	r3, #1
 800482e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	212c      	movs	r1, #44	; 0x2c
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	333f      	adds	r3, #63	; 0x3f
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	333f      	adds	r3, #63	; 0x3f
 8004852:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004854:	2b02      	cmp	r3, #2
 8004856:	d111      	bne.n	800487c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f005 fb77 	bl	8009f56 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	461a      	mov	r2, r3
 8004876:	2310      	movs	r3, #16
 8004878:	6093      	str	r3, [r2, #8]
 800487a:	e03a      	b.n	80048f2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	333f      	adds	r3, #63	; 0x3f
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d009      	beq.n	80048a4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	333f      	adds	r3, #63	; 0x3f
 800489e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d126      	bne.n	80048f2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3360      	adds	r3, #96	; 0x60
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	b2d9      	uxtb	r1, r3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	202c      	movs	r0, #44	; 0x2c
 80048e0:	fb00 f303 	mul.w	r3, r0, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3360      	adds	r3, #96	; 0x60
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f00b ff81 	bl	80107f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d12b      	bne.n	8004952 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	212c      	movs	r1, #44	; 0x2c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	3348      	adds	r3, #72	; 0x48
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	202c      	movs	r0, #44	; 0x2c
 8004910:	fb00 f202 	mul.w	r2, r0, r2
 8004914:	440a      	add	r2, r1
 8004916:	3240      	adds	r2, #64	; 0x40
 8004918:	8812      	ldrh	r2, [r2, #0]
 800491a:	fbb3 f3f2 	udiv	r3, r3, r2
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 818e 	beq.w	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3354      	adds	r3, #84	; 0x54
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2d8      	uxtb	r0, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	3354      	adds	r3, #84	; 0x54
 800494c:	4602      	mov	r2, r0
 800494e:	701a      	strb	r2, [r3, #0]
}
 8004950:	e178      	b.n	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3354      	adds	r3, #84	; 0x54
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f083 0301 	eor.w	r3, r3, #1
 8004966:	b2d8      	uxtb	r0, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3354      	adds	r3, #84	; 0x54
 8004976:	4602      	mov	r2, r0
 8004978:	701a      	strb	r2, [r3, #0]
}
 800497a:	e163      	b.n	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	f040 80f6 	bne.w	8004b80 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3361      	adds	r3, #97	; 0x61
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d109      	bne.n	80049bc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3360      	adds	r3, #96	; 0x60
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e0c9      	b.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3361      	adds	r3, #97	; 0x61
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d109      	bne.n	80049e4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3360      	adds	r3, #96	; 0x60
 80049de:	2205      	movs	r2, #5
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e0b5      	b.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3361      	adds	r3, #97	; 0x61
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d009      	beq.n	8004a0c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3361      	adds	r3, #97	; 0x61
 8004a06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d150      	bne.n	8004aae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	335c      	adds	r3, #92	; 0x5c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	202c      	movs	r0, #44	; 0x2c
 8004a24:	fb00 f303 	mul.w	r3, r0, r3
 8004a28:	440b      	add	r3, r1
 8004a2a:	335c      	adds	r3, #92	; 0x5c
 8004a2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	212c      	movs	r1, #44	; 0x2c
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	335c      	adds	r3, #92	; 0x5c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d912      	bls.n	8004a68 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	335c      	adds	r3, #92	; 0x5c
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	3360      	adds	r3, #96	; 0x60
 8004a62:	2204      	movs	r2, #4
 8004a64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a66:	e073      	b.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	212c      	movs	r1, #44	; 0x2c
 8004a6e:	fb01 f303 	mul.w	r3, r1, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	3360      	adds	r3, #96	; 0x60
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a98:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004aac:	e050      	b.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3361      	adds	r3, #97	; 0x61
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d122      	bne.n	8004b08 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3360      	adds	r3, #96	; 0x60
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e023      	b.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3361      	adds	r3, #97	; 0x61
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d119      	bne.n	8004b50 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	335c      	adds	r3, #92	; 0x5c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	202c      	movs	r0, #44	; 0x2c
 8004b34:	fb00 f303 	mul.w	r3, r0, r3
 8004b38:	440b      	add	r3, r1
 8004b3a:	335c      	adds	r3, #92	; 0x5c
 8004b3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	3360      	adds	r3, #96	; 0x60
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2302      	movs	r3, #2
 8004b60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	b2d9      	uxtb	r1, r3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	202c      	movs	r0, #44	; 0x2c
 8004b6c:	fb00 f303 	mul.w	r3, r0, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	3360      	adds	r3, #96	; 0x60
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f00b fe3b 	bl	80107f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b7e:	e061      	b.n	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d156      	bne.n	8004c44 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	333f      	adds	r3, #63	; 0x3f
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d111      	bne.n	8004bce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	335c      	adds	r3, #92	; 0x5c
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f005 f9c5 	bl	8009f56 <USB_HC_Halt>
 8004bcc:	e031      	b.n	8004c32 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	333f      	adds	r3, #63	; 0x3f
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	333f      	adds	r3, #63	; 0x3f
 8004bf0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d11d      	bne.n	8004c32 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	335c      	adds	r3, #92	; 0x5c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3361      	adds	r3, #97	; 0x61
 8004c1e:	2203      	movs	r2, #3
 8004c20:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f005 f992 	bl	8009f56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2310      	movs	r3, #16
 8004c42:	6093      	str	r3, [r2, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3718      	adds	r7, #24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11a      	bne.n	8004cb2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3361      	adds	r3, #97	; 0x61
 8004c9c:	2206      	movs	r2, #6
 8004c9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f005 f953 	bl	8009f56 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004cb0:	e331      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d12e      	bne.n	8004d26 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	333d      	adds	r3, #61	; 0x3d
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 8313 	bne.w	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	333d      	adds	r3, #61	; 0x3d
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3360      	adds	r3, #96	; 0x60
 8004d10:	2202      	movs	r2, #2
 8004d12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f005 f919 	bl	8009f56 <USB_HC_Halt>
}
 8004d24:	e2f7      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3c:	d112      	bne.n	8004d64 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f005 f8fa 	bl	8009f56 <USB_HC_Halt>
}
 8004d62:	e2d8      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d140      	bne.n	8004dfc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	335c      	adds	r3, #92	; 0x5c
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d111      	bne.n	8004dc6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	333d      	adds	r3, #61	; 0x3d
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	3361      	adds	r3, #97	; 0x61
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f005 f8ae 	bl	8009f56 <USB_HC_Halt>
}
 8004dfa:	e28c      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d12c      	bne.n	8004e6c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	212c      	movs	r1, #44	; 0x2c
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3361      	adds	r3, #97	; 0x61
 8004e20:	2204      	movs	r2, #4
 8004e22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	333d      	adds	r3, #61	; 0x3d
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	335c      	adds	r3, #92	; 0x5c
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f005 f87f 	bl	8009f56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e64:	461a      	mov	r2, r3
 8004e66:	2340      	movs	r3, #64	; 0x40
 8004e68:	6093      	str	r3, [r2, #8]
}
 8004e6a:	e254      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d11a      	bne.n	8004eb8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2308      	movs	r3, #8
 8004e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3361      	adds	r3, #97	; 0x61
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f005 f850 	bl	8009f56 <USB_HC_Halt>
}
 8004eb6:	e22e      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d140      	bne.n	8004f50 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	335c      	adds	r3, #92	; 0x5c
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3361      	adds	r3, #97	; 0x61
 8004eee:	2203      	movs	r2, #3
 8004ef0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	212c      	movs	r1, #44	; 0x2c
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	4413      	add	r3, r2
 8004efe:	333d      	adds	r3, #61	; 0x3d
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d112      	bne.n	8004f2c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	333c      	adds	r3, #60	; 0x3c
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d108      	bne.n	8004f2c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	212c      	movs	r1, #44	; 0x2c
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	333d      	adds	r3, #61	; 0x3d
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f005 f80d 	bl	8009f56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	6093      	str	r3, [r2, #8]
}
 8004f4e:	e1e2      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d164      	bne.n	8005030 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d111      	bne.n	8004f92 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3361      	adds	r3, #97	; 0x61
 8004f7c:	2206      	movs	r2, #6
 8004f7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 ffe3 	bl	8009f56 <USB_HC_Halt>
 8004f90:	e044      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	335c      	adds	r3, #92	; 0x5c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	202c      	movs	r0, #44	; 0x2c
 8004faa:	fb00 f303 	mul.w	r3, r0, r3
 8004fae:	440b      	add	r3, r1
 8004fb0:	335c      	adds	r3, #92	; 0x5c
 8004fb2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	212c      	movs	r1, #44	; 0x2c
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	335c      	adds	r3, #92	; 0x5c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d920      	bls.n	800500a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	212c      	movs	r1, #44	; 0x2c
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	335c      	adds	r3, #92	; 0x5c
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	212c      	movs	r1, #44	; 0x2c
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3360      	adds	r3, #96	; 0x60
 8004fe8:	2204      	movs	r2, #4
 8004fea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	202c      	movs	r0, #44	; 0x2c
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3360      	adds	r3, #96	; 0x60
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f00b fbf6 	bl	80107f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005008:	e008      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3360      	adds	r3, #96	; 0x60
 8005018:	2202      	movs	r2, #2
 800501a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	461a      	mov	r2, r3
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	6093      	str	r3, [r2, #8]
}
 800502e:	e172      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d11b      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	3361      	adds	r3, #97	; 0x61
 8005056:	2208      	movs	r2, #8
 8005058:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f004 ff76 	bl	8009f56 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507c:	6093      	str	r3, [r2, #8]
}
 800507e:	e14a      	b.n	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	f040 813f 	bne.w	8005316 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3361      	adds	r3, #97	; 0x61
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d17d      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3360      	adds	r3, #96	; 0x60
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	212c      	movs	r1, #44	; 0x2c
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	333f      	adds	r3, #63	; 0x3f
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d00a      	beq.n	80050e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	212c      	movs	r1, #44	; 0x2c
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	4413      	add	r3, r2
 80050de:	333f      	adds	r3, #63	; 0x3f
 80050e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	f040 8100 	bne.w	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d113      	bne.n	8005118 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3355      	adds	r3, #85	; 0x55
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f083 0301 	eor.w	r3, r3, #1
 8005104:	b2d8      	uxtb	r0, r3
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	3355      	adds	r3, #85	; 0x55
 8005114:	4602      	mov	r2, r0
 8005116:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b01      	cmp	r3, #1
 800511e:	f040 80e3 	bne.w	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	212c      	movs	r1, #44	; 0x2c
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	4413      	add	r3, r2
 800512e:	334c      	adds	r3, #76	; 0x4c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80d8 	beq.w	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	334c      	adds	r3, #76	; 0x4c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	202c      	movs	r0, #44	; 0x2c
 800514e:	fb00 f202 	mul.w	r2, r0, r2
 8005152:	440a      	add	r2, r1
 8005154:	3240      	adds	r2, #64	; 0x40
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	4413      	add	r3, r2
 800515a:	3b01      	subs	r3, #1
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	202c      	movs	r0, #44	; 0x2c
 8005162:	fb00 f202 	mul.w	r2, r0, r2
 8005166:	440a      	add	r2, r1
 8005168:	3240      	adds	r2, #64	; 0x40
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80b5 	beq.w	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	3355      	adds	r3, #85	; 0x55
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f083 0301 	eor.w	r3, r3, #1
 8005192:	b2d8      	uxtb	r0, r3
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	212c      	movs	r1, #44	; 0x2c
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	4413      	add	r3, r2
 80051a0:	3355      	adds	r3, #85	; 0x55
 80051a2:	4602      	mov	r2, r0
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e09f      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	212c      	movs	r1, #44	; 0x2c
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	3361      	adds	r3, #97	; 0x61
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d109      	bne.n	80051d0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	212c      	movs	r1, #44	; 0x2c
 80051c2:	fb01 f303 	mul.w	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	3360      	adds	r3, #96	; 0x60
 80051ca:	2202      	movs	r2, #2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e08b      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3361      	adds	r3, #97	; 0x61
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d109      	bne.n	80051f8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	212c      	movs	r1, #44	; 0x2c
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	3360      	adds	r3, #96	; 0x60
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e077      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	3361      	adds	r3, #97	; 0x61
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b05      	cmp	r3, #5
 800520a:	d109      	bne.n	8005220 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3360      	adds	r3, #96	; 0x60
 800521a:	2205      	movs	r2, #5
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e063      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3361      	adds	r3, #97	; 0x61
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b06      	cmp	r3, #6
 8005232:	d009      	beq.n	8005248 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3361      	adds	r3, #97	; 0x61
 8005242:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005244:	2b08      	cmp	r3, #8
 8005246:	d14f      	bne.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	335c      	adds	r3, #92	; 0x5c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	202c      	movs	r0, #44	; 0x2c
 8005260:	fb00 f303 	mul.w	r3, r0, r3
 8005264:	440b      	add	r3, r1
 8005266:	335c      	adds	r3, #92	; 0x5c
 8005268:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	212c      	movs	r1, #44	; 0x2c
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	4413      	add	r3, r2
 8005276:	335c      	adds	r3, #92	; 0x5c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d912      	bls.n	80052a4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	212c      	movs	r1, #44	; 0x2c
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	4413      	add	r3, r2
 800528a:	335c      	adds	r3, #92	; 0x5c
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	212c      	movs	r1, #44	; 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3360      	adds	r3, #96	; 0x60
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e021      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3360      	adds	r3, #96	; 0x60
 80052b2:	2202      	movs	r2, #2
 80052b4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052cc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f4:	461a      	mov	r2, r3
 80052f6:	2302      	movs	r3, #2
 80052f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	b2d9      	uxtb	r1, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	202c      	movs	r0, #44	; 0x2c
 8005304:	fb00 f303 	mul.w	r3, r0, r3
 8005308:	4413      	add	r3, r2
 800530a:	3360      	adds	r3, #96	; 0x60
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f00b fa6f 	bl	80107f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005316:	bf00      	nop
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b08a      	sub	sp, #40	; 0x28
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	0c5b      	lsrs	r3, r3, #17
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005352:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d004      	beq.n	8005364 <HCD_RXQLVL_IRQHandler+0x46>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b05      	cmp	r3, #5
 800535e:	f000 80a9 	beq.w	80054b4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005362:	e0aa      	b.n	80054ba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80a6 	beq.w	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	212c      	movs	r1, #44	; 0x2c
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3344      	adds	r3, #68	; 0x44
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 809b 	beq.w	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	3350      	adds	r3, #80	; 0x50
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	441a      	add	r2, r3
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	202c      	movs	r0, #44	; 0x2c
 800539c:	fb00 f303 	mul.w	r3, r0, r3
 80053a0:	440b      	add	r3, r1
 80053a2:	334c      	adds	r3, #76	; 0x4c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d87a      	bhi.n	80054a0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	212c      	movs	r1, #44	; 0x2c
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	3344      	adds	r3, #68	; 0x44
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	b292      	uxth	r2, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	f004 f91e 	bl	8009604 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3344      	adds	r3, #68	; 0x44
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	441a      	add	r2, r3
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	202c      	movs	r0, #44	; 0x2c
 80053e2:	fb00 f303 	mul.w	r3, r0, r3
 80053e6:	440b      	add	r3, r1
 80053e8:	3344      	adds	r3, #68	; 0x44
 80053ea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	212c      	movs	r1, #44	; 0x2c
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	4413      	add	r3, r2
 80053f8:	3350      	adds	r3, #80	; 0x50
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	441a      	add	r2, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	202c      	movs	r0, #44	; 0x2c
 8005406:	fb00 f303 	mul.w	r3, r0, r3
 800540a:	440b      	add	r3, r1
 800540c:	3350      	adds	r3, #80	; 0x50
 800540e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	0cdb      	lsrs	r3, r3, #19
 8005420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005424:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3340      	adds	r3, #64	; 0x40
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4293      	cmp	r3, r2
 800543c:	d13c      	bne.n	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d039      	beq.n	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800545a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005462:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	212c      	movs	r1, #44	; 0x2c
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	3354      	adds	r3, #84	; 0x54
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	f083 0301 	eor.w	r3, r3, #1
 800548a:	b2d8      	uxtb	r0, r3
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	212c      	movs	r1, #44	; 0x2c
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	3354      	adds	r3, #84	; 0x54
 800549a:	4602      	mov	r2, r0
 800549c:	701a      	strb	r2, [r3, #0]
      break;
 800549e:	e00b      	b.n	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3360      	adds	r3, #96	; 0x60
 80054ae:	2204      	movs	r2, #4
 80054b0:	701a      	strb	r2, [r3, #0]
      break;
 80054b2:	e001      	b.n	80054b8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80054b8:	bf00      	nop
  }
}
 80054ba:	bf00      	nop
 80054bc:	3728      	adds	r7, #40	; 0x28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b086      	sub	sp, #24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054ee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d10b      	bne.n	8005512 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f00b f959 	bl	80107bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d132      	bne.n	8005582 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f043 0308 	orr.w	r3, r3, #8
 8005522:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d126      	bne.n	800557c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d113      	bne.n	800555e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800553c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005540:	d106      	bne.n	8005550 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2102      	movs	r1, #2
 8005548:	4618      	mov	r0, r3
 800554a:	f004 f9c9 	bl	80098e0 <USB_InitFSLSPClkSel>
 800554e:	e011      	b.n	8005574 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	4618      	mov	r0, r3
 8005558:	f004 f9c2 	bl	80098e0 <USB_InitFSLSPClkSel>
 800555c:	e00a      	b.n	8005574 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d106      	bne.n	8005574 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556c:	461a      	mov	r2, r3
 800556e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005572:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f00b f94b 	bl	8010810 <HAL_HCD_PortEnabled_Callback>
 800557a:	e002      	b.n	8005582 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f00b f955 	bl	801082c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d103      	bne.n	8005594 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f043 0320 	orr.w	r3, r3, #32
 8005592:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e12b      	b.n	8005812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc fec4 	bl	800235c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2224      	movs	r2, #36	; 0x24
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800560a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800560c:	f002 fcda 	bl	8007fc4 <HAL_RCC_GetPCLK1Freq>
 8005610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a81      	ldr	r2, [pc, #516]	; (800581c <HAL_I2C_Init+0x274>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d807      	bhi.n	800562c <HAL_I2C_Init+0x84>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a80      	ldr	r2, [pc, #512]	; (8005820 <HAL_I2C_Init+0x278>)
 8005620:	4293      	cmp	r3, r2
 8005622:	bf94      	ite	ls
 8005624:	2301      	movls	r3, #1
 8005626:	2300      	movhi	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e006      	b.n	800563a <HAL_I2C_Init+0x92>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a7d      	ldr	r2, [pc, #500]	; (8005824 <HAL_I2C_Init+0x27c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	bf94      	ite	ls
 8005634:	2301      	movls	r3, #1
 8005636:	2300      	movhi	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e0e7      	b.n	8005812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4a78      	ldr	r2, [pc, #480]	; (8005828 <HAL_I2C_Init+0x280>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0c9b      	lsrs	r3, r3, #18
 800564c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a6a      	ldr	r2, [pc, #424]	; (800581c <HAL_I2C_Init+0x274>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d802      	bhi.n	800567c <HAL_I2C_Init+0xd4>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	3301      	adds	r3, #1
 800567a:	e009      	b.n	8005690 <HAL_I2C_Init+0xe8>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	4a69      	ldr	r2, [pc, #420]	; (800582c <HAL_I2C_Init+0x284>)
 8005688:	fba2 2303 	umull	r2, r3, r2, r3
 800568c:	099b      	lsrs	r3, r3, #6
 800568e:	3301      	adds	r3, #1
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	430b      	orrs	r3, r1
 8005696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	495c      	ldr	r1, [pc, #368]	; (800581c <HAL_I2C_Init+0x274>)
 80056ac:	428b      	cmp	r3, r1
 80056ae:	d819      	bhi.n	80056e4 <HAL_I2C_Init+0x13c>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1e59      	subs	r1, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056c4:	400b      	ands	r3, r1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_I2C_Init+0x138>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1e59      	subs	r1, r3, #1
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056d8:	3301      	adds	r3, #1
 80056da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056de:	e051      	b.n	8005784 <HAL_I2C_Init+0x1dc>
 80056e0:	2304      	movs	r3, #4
 80056e2:	e04f      	b.n	8005784 <HAL_I2C_Init+0x1dc>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d111      	bne.n	8005710 <HAL_I2C_Init+0x168>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1e58      	subs	r0, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	440b      	add	r3, r1
 80056fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fe:	3301      	adds	r3, #1
 8005700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e012      	b.n	8005736 <HAL_I2C_Init+0x18e>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1e58      	subs	r0, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	0099      	lsls	r1, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	fbb0 f3f3 	udiv	r3, r0, r3
 8005726:	3301      	adds	r3, #1
 8005728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Init+0x196>
 800573a:	2301      	movs	r3, #1
 800573c:	e022      	b.n	8005784 <HAL_I2C_Init+0x1dc>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10e      	bne.n	8005764 <HAL_I2C_Init+0x1bc>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1e58      	subs	r0, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6859      	ldr	r1, [r3, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	440b      	add	r3, r1
 8005754:	fbb0 f3f3 	udiv	r3, r0, r3
 8005758:	3301      	adds	r3, #1
 800575a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005762:	e00f      	b.n	8005784 <HAL_I2C_Init+0x1dc>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1e58      	subs	r0, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	0099      	lsls	r1, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	fbb0 f3f3 	udiv	r3, r0, r3
 800577a:	3301      	adds	r3, #1
 800577c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	6809      	ldr	r1, [r1, #0]
 8005788:	4313      	orrs	r3, r2
 800578a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6911      	ldr	r1, [r2, #16]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68d2      	ldr	r2, [r2, #12]
 80057be:	4311      	orrs	r1, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	000186a0 	.word	0x000186a0
 8005820:	001e847f 	.word	0x001e847f
 8005824:	003d08ff 	.word	0x003d08ff
 8005828:	431bde83 	.word	0x431bde83
 800582c:	10624dd3 	.word	0x10624dd3

08005830 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e021      	b.n	8005886 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	; 0x24
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fdc6 	bl	80023ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058aa:	f7fd fa59 	bl	8002d60 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	f040 80d9 	bne.w	8005a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2319      	movs	r3, #25
 80058c4:	2201      	movs	r2, #1
 80058c6:	496d      	ldr	r1, [pc, #436]	; (8005a7c <HAL_I2C_Mem_Write+0x1ec>)
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fc8d 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
 80058d6:	e0cc      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_I2C_Mem_Write+0x56>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0c5      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d007      	beq.n	800590c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2221      	movs	r2, #33	; 0x21
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2240      	movs	r2, #64	; 0x40
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a4d      	ldr	r2, [pc, #308]	; (8005a80 <HAL_I2C_Mem_Write+0x1f0>)
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800594e:	88f8      	ldrh	r0, [r7, #6]
 8005950:	893a      	ldrh	r2, [r7, #8]
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fac4 	bl	8005eec <I2C_RequestMemoryWrite>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d052      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e081      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fd0e 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b04      	cmp	r3, #4
 8005984:	d107      	bne.n	8005996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06b      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d11b      	bne.n	8005a10 <HAL_I2C_Mem_Write+0x180>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d017      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1aa      	bne.n	800596e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fcfa 	bl	8006416 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d107      	bne.n	8005a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e016      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	00100002 	.word	0x00100002
 8005a80:	ffff0000 	.word	0xffff0000

08005a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	; 0x30
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	817b      	strh	r3, [r7, #10]
 8005a96:	460b      	mov	r3, r1
 8005a98:	813b      	strh	r3, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a9e:	f7fd f95f 	bl	8002d60 <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	f040 8208 	bne.w	8005ec2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2319      	movs	r3, #25
 8005ab8:	2201      	movs	r2, #1
 8005aba:	497b      	ldr	r1, [pc, #492]	; (8005ca8 <HAL_I2C_Mem_Read+0x224>)
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fb93 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e1fb      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_Mem_Read+0x56>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e1f4      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d007      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2222      	movs	r2, #34	; 0x22
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a5b      	ldr	r2, [pc, #364]	; (8005cac <HAL_I2C_Mem_Read+0x228>)
 8005b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b42:	88f8      	ldrh	r0, [r7, #6]
 8005b44:	893a      	ldrh	r2, [r7, #8]
 8005b46:	8979      	ldrh	r1, [r7, #10]
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4603      	mov	r3, r0
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fa60 	bl	8006018 <I2C_RequestMemoryRead>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e1b0      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	623b      	str	r3, [r7, #32]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e184      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d11b      	bne.n	8005bd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	61fb      	str	r3, [r7, #28]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e164      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d11b      	bne.n	8005c12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	e144      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c28:	e138      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	f200 80f1 	bhi.w	8005e16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d123      	bne.n	8005c84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fc29 	bl	8006498 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e139      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c82:	e10b      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d14e      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2200      	movs	r2, #0
 8005c94:	4906      	ldr	r1, [pc, #24]	; (8005cb0 <HAL_I2C_Mem_Read+0x22c>)
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 faa6 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d008      	beq.n	8005cb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e10e      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
 8005ca6:	bf00      	nop
 8005ca8:	00100002 	.word	0x00100002
 8005cac:	ffff0000 	.word	0xffff0000
 8005cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d28:	e0b8      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	2200      	movs	r2, #0
 8005d32:	4966      	ldr	r1, [pc, #408]	; (8005ecc <HAL_I2C_Mem_Read+0x448>)
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fa57 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0bf      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	494f      	ldr	r1, [pc, #316]	; (8005ecc <HAL_I2C_Mem_Read+0x448>)
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fa29 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e091      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e14:	e042      	b.n	8005e9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fb3c 	bl	8006498 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e04c      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d118      	bne.n	8005e9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f47f aec2 	bne.w	8005c2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3728      	adds	r7, #40	; 0x28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	00010004 	.word	0x00010004

08005ed0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	817b      	strh	r3, [r7, #10]
 8005efe:	460b      	mov	r3, r1
 8005f00:	813b      	strh	r3, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f960 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3c:	d103      	bne.n	8005f46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e05f      	b.n	800600a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f4a:	897b      	ldrh	r3, [r7, #10]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	492d      	ldr	r1, [pc, #180]	; (8006014 <I2C_RequestMemoryWrite+0x128>)
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f998 	bl	8006296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e04c      	b.n	800600a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f88:	6a39      	ldr	r1, [r7, #32]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fa02 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d107      	bne.n	8005fae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e02b      	b.n	800600a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d105      	bne.n	8005fc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	611a      	str	r2, [r3, #16]
 8005fc2:	e021      	b.n	8006008 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fc4:	893b      	ldrh	r3, [r7, #8]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd4:	6a39      	ldr	r1, [r7, #32]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f9dc 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00d      	beq.n	8005ffe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d107      	bne.n	8005ffa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e005      	b.n	800600a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ffe:	893b      	ldrh	r3, [r7, #8]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	00010002 	.word	0x00010002

08006018 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006040:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006050:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	2200      	movs	r2, #0
 800605a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f8c2 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d103      	bne.n	8006082 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e0aa      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006094:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	4952      	ldr	r1, [pc, #328]	; (80061e4 <I2C_RequestMemoryRead+0x1cc>)
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f8fa 	bl	8006296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e097      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c4:	6a39      	ldr	r1, [r7, #32]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f964 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d107      	bne.n	80060ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e076      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060f4:	893b      	ldrh	r3, [r7, #8]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	611a      	str	r2, [r3, #16]
 80060fe:	e021      	b.n	8006144 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006100:	893b      	ldrh	r3, [r7, #8]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	b29b      	uxth	r3, r3
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800610e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006110:	6a39      	ldr	r1, [r7, #32]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f93e 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00d      	beq.n	800613a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b04      	cmp	r3, #4
 8006124:	d107      	bne.n	8006136 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006134:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e050      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800613a:	893b      	ldrh	r3, [r7, #8]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	6a39      	ldr	r1, [r7, #32]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f923 	bl	8006394 <I2C_WaitOnTXEFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	2b04      	cmp	r3, #4
 800615a:	d107      	bne.n	800616c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e035      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2200      	movs	r2, #0
 8006188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f82b 	bl	80061e8 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d103      	bne.n	80061b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e013      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061b4:	897b      	ldrh	r3, [r7, #10]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	6a3a      	ldr	r2, [r7, #32]
 80061c8:	4906      	ldr	r1, [pc, #24]	; (80061e4 <I2C_RequestMemoryRead+0x1cc>)
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f863 	bl	8006296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	00010002 	.word	0x00010002

080061e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061f8:	e025      	b.n	8006246 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d021      	beq.n	8006246 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006202:	f7fc fdad 	bl	8002d60 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d302      	bcc.n	8006218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d116      	bne.n	8006246 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f043 0220 	orr.w	r2, r3, #32
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e023      	b.n	800628e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10d      	bne.n	800626c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	43da      	mvns	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	bf0c      	ite	eq
 8006262:	2301      	moveq	r3, #1
 8006264:	2300      	movne	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	e00c      	b.n	8006286 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	43da      	mvns	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	429a      	cmp	r2, r3
 800628a:	d0b6      	beq.n	80061fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
 80062a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a4:	e051      	b.n	800634a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b4:	d123      	bne.n	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f043 0204 	orr.w	r2, r3, #4
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e046      	b.n	800638c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d021      	beq.n	800634a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fc fd2b 	bl	8002d60 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d116      	bne.n	800634a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f043 0220 	orr.w	r2, r3, #32
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e020      	b.n	800638c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d10c      	bne.n	800636e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	43da      	mvns	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e00b      	b.n	8006386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	43da      	mvns	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4013      	ands	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d18d      	bne.n	80062a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a0:	e02d      	b.n	80063fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f8ce 	bl	8006544 <I2C_IsAcknowledgeFailed>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e02d      	b.n	800640e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d021      	beq.n	80063fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fc fcd1 	bl	8002d60 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d116      	bne.n	80063fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e007      	b.n	800640e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d1ca      	bne.n	80063a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006422:	e02d      	b.n	8006480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f88d 	bl	8006544 <I2C_IsAcknowledgeFailed>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e02d      	b.n	8006490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d021      	beq.n	8006480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643c:	f7fc fc90 	bl	8002d60 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d1ca      	bne.n	8006424 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a4:	e042      	b.n	800652c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0310 	and.w	r3, r3, #16
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d119      	bne.n	80064e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0210 	mvn.w	r2, #16
 80064bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e029      	b.n	800653c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e8:	f7fc fc3a 	bl	8002d60 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d116      	bne.n	800652c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f043 0220 	orr.w	r2, r3, #32
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e007      	b.n	800653c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d1b5      	bne.n	80064a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655a:	d11b      	bne.n	8006594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f043 0204 	orr.w	r2, r3, #4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e128      	b.n	8006808 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a90      	ldr	r2, [pc, #576]	; (8006810 <HAL_I2S_Init+0x26c>)
 80065ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb ff2d 	bl	8002430 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80065ec:	f023 030f 	bic.w	r3, r3, #15
 80065f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2202      	movs	r2, #2
 80065f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d060      	beq.n	80066c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800660a:	2310      	movs	r3, #16
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e001      	b.n	8006614 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006610:	2320      	movs	r3, #32
 8006612:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b20      	cmp	r3, #32
 800661a:	d802      	bhi.n	8006622 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006622:	2001      	movs	r0, #1
 8006624:	f001 fe28 	bl	8008278 <HAL_RCCEx_GetPeriphCLKFreq>
 8006628:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006632:	d125      	bne.n	8006680 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d010      	beq.n	800665e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	fbb2 f2f3 	udiv	r2, r2, r3
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	3305      	adds	r3, #5
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	e01f      	b.n	800669e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	fbb2 f2f3 	udiv	r2, r2, r3
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	3305      	adds	r3, #5
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	e00e      	b.n	800669e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	fbb2 f2f3 	udiv	r2, r2, r3
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	3305      	adds	r3, #5
 800669c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4a5c      	ldr	r2, [pc, #368]	; (8006814 <HAL_I2S_Init+0x270>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	e003      	b.n	80066cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80066c4:	2302      	movs	r3, #2
 80066c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d902      	bls.n	80066d8 <HAL_I2S_Init+0x134>
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2bff      	cmp	r3, #255	; 0xff
 80066d6:	d907      	bls.n	80066e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	f043 0210 	orr.w	r2, r3, #16
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e08f      	b.n	8006808 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	ea42 0103 	orr.w	r1, r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006706:	f023 030f 	bic.w	r3, r3, #15
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6851      	ldr	r1, [r2, #4]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	4311      	orrs	r1, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68d2      	ldr	r2, [r2, #12]
 8006718:	4311      	orrs	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6992      	ldr	r2, [r2, #24]
 800671e:	430a      	orrs	r2, r1
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800672a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d161      	bne.n	80067f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a38      	ldr	r2, [pc, #224]	; (8006818 <HAL_I2S_Init+0x274>)
 8006738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a37      	ldr	r2, [pc, #220]	; (800681c <HAL_I2S_Init+0x278>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d101      	bne.n	8006748 <HAL_I2S_Init+0x1a4>
 8006744:	4b36      	ldr	r3, [pc, #216]	; (8006820 <HAL_I2S_Init+0x27c>)
 8006746:	e001      	b.n	800674c <HAL_I2S_Init+0x1a8>
 8006748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	4932      	ldr	r1, [pc, #200]	; (800681c <HAL_I2S_Init+0x278>)
 8006754:	428a      	cmp	r2, r1
 8006756:	d101      	bne.n	800675c <HAL_I2S_Init+0x1b8>
 8006758:	4a31      	ldr	r2, [pc, #196]	; (8006820 <HAL_I2S_Init+0x27c>)
 800675a:	e001      	b.n	8006760 <HAL_I2S_Init+0x1bc>
 800675c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006760:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006764:	f023 030f 	bic.w	r3, r3, #15
 8006768:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <HAL_I2S_Init+0x278>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_I2S_Init+0x1d4>
 8006774:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <HAL_I2S_Init+0x27c>)
 8006776:	e001      	b.n	800677c <HAL_I2S_Init+0x1d8>
 8006778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800677c:	2202      	movs	r2, #2
 800677e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a25      	ldr	r2, [pc, #148]	; (800681c <HAL_I2S_Init+0x278>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_I2S_Init+0x1ea>
 800678a:	4b25      	ldr	r3, [pc, #148]	; (8006820 <HAL_I2S_Init+0x27c>)
 800678c:	e001      	b.n	8006792 <HAL_I2S_Init+0x1ee>
 800678e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679e:	d003      	beq.n	80067a8 <HAL_I2S_Init+0x204>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80067a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	e001      	b.n	80067b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067be:	4313      	orrs	r3, r2
 80067c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067c8:	4313      	orrs	r3, r2
 80067ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	897b      	ldrh	r3, [r7, #10]
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a0d      	ldr	r2, [pc, #52]	; (800681c <HAL_I2S_Init+0x278>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d101      	bne.n	80067f0 <HAL_I2S_Init+0x24c>
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <HAL_I2S_Init+0x27c>)
 80067ee:	e001      	b.n	80067f4 <HAL_I2S_Init+0x250>
 80067f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f4:	897a      	ldrh	r2, [r7, #10]
 80067f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	080070a9 	.word	0x080070a9
 8006814:	cccccccd 	.word	0xcccccccd
 8006818:	08007231 	.word	0x08007231
 800681c:	40003800 	.word	0x40003800
 8006820:	40003400 	.word	0x40003400

08006824 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_I2S_Transmit_DMA+0x1a>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e08e      	b.n	8006960 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_I2S_Transmit_DMA+0x2e>
 800684e:	2302      	movs	r3, #2
 8006850:	e086      	b.n	8006960 <HAL_I2S_Transmit_DMA+0x13c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	d005      	beq.n	8006872 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800686e:	2302      	movs	r3, #2
 8006870:	e076      	b.n	8006960 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2203      	movs	r2, #3
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d002      	beq.n	800689e <HAL_I2S_Transmit_DMA+0x7a>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d10a      	bne.n	80068b4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068b2:	e005      	b.n	80068c0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	4a28      	ldr	r2, [pc, #160]	; (8006968 <HAL_I2S_Transmit_DMA+0x144>)
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_I2S_Transmit_DMA+0x148>)
 80068ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	4a26      	ldr	r2, [pc, #152]	; (8006970 <HAL_I2S_Transmit_DMA+0x14c>)
 80068d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80068e0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80068e8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80068f0:	f7fc fc84 	bl	80031fc <HAL_DMA_Start_IT>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00f      	beq.n	800691a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f043 0208 	orr.w	r2, r3, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e022      	b.n	8006960 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006924:	2b00      	cmp	r3, #0
 8006926:	d107      	bne.n	8006938 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69da      	ldr	r2, [r3, #28]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006936:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0202 	orr.w	r2, r2, #2
 8006954:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	08006f87 	.word	0x08006f87
 800696c:	08006f45 	.word	0x08006f45
 8006970:	08006fa3 	.word	0x08006fa3

08006974 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_I2S_DMAPause+0x18>
 8006988:	2302      	movs	r3, #2
 800698a:	e04a      	b.n	8006a22 <HAL_I2S_DMAPause+0xae>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b03      	cmp	r3, #3
 800699e:	d108      	bne.n	80069b2 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0202 	bic.w	r2, r2, #2
 80069ae:	605a      	str	r2, [r3, #4]
 80069b0:	e032      	b.n	8006a18 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d108      	bne.n	80069d0 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0201 	bic.w	r2, r2, #1
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	e023      	b.n	8006a18 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b05      	cmp	r3, #5
 80069da:	d11d      	bne.n	8006a18 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0203 	bic.w	r2, r2, #3
 80069ea:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0f      	ldr	r2, [pc, #60]	; (8006a30 <HAL_I2S_DMAPause+0xbc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_I2S_DMAPause+0x86>
 80069f6:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <HAL_I2S_DMAPause+0xc0>)
 80069f8:	e001      	b.n	80069fe <HAL_I2S_DMAPause+0x8a>
 80069fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	490a      	ldr	r1, [pc, #40]	; (8006a30 <HAL_I2S_DMAPause+0xbc>)
 8006a06:	428b      	cmp	r3, r1
 8006a08:	d101      	bne.n	8006a0e <HAL_I2S_DMAPause+0x9a>
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_I2S_DMAPause+0xc0>)
 8006a0c:	e001      	b.n	8006a12 <HAL_I2S_DMAPause+0x9e>
 8006a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a12:	f022 0203 	bic.w	r2, r2, #3
 8006a16:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40003800 	.word	0x40003800
 8006a34:	40003400 	.word	0x40003400

08006a38 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_I2S_DMAResume+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e07d      	b.n	8006b4c <HAL_I2S_DMAResume+0x114>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d108      	bne.n	8006a76 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0202 	orr.w	r2, r2, #2
 8006a72:	605a      	str	r2, [r3, #4]
 8006a74:	e056      	b.n	8006b24 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d108      	bne.n	8006a94 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e047      	b.n	8006b24 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d141      	bne.n	8006b24 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0203 	orr.w	r2, r2, #3
 8006aae:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <HAL_I2S_DMAResume+0x120>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <HAL_I2S_DMAResume+0x86>
 8006aba:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <HAL_I2S_DMAResume+0x124>)
 8006abc:	e001      	b.n	8006ac2 <HAL_I2S_DMAResume+0x8a>
 8006abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4923      	ldr	r1, [pc, #140]	; (8006b58 <HAL_I2S_DMAResume+0x120>)
 8006aca:	428b      	cmp	r3, r1
 8006acc:	d101      	bne.n	8006ad2 <HAL_I2S_DMAResume+0x9a>
 8006ace:	4b23      	ldr	r3, [pc, #140]	; (8006b5c <HAL_I2S_DMAResume+0x124>)
 8006ad0:	e001      	b.n	8006ad6 <HAL_I2S_DMAResume+0x9e>
 8006ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ad6:	f042 0203 	orr.w	r2, r2, #3
 8006ada:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <HAL_I2S_DMAResume+0x120>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <HAL_I2S_DMAResume+0xb2>
 8006ae6:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <HAL_I2S_DMAResume+0x124>)
 8006ae8:	e001      	b.n	8006aee <HAL_I2S_DMAResume+0xb6>
 8006aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <HAL_I2S_DMAResume+0x120>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d101      	bne.n	8006b06 <HAL_I2S_DMAResume+0xce>
 8006b02:	4b16      	ldr	r3, [pc, #88]	; (8006b5c <HAL_I2S_DMAResume+0x124>)
 8006b04:	e001      	b.n	8006b0a <HAL_I2S_DMAResume+0xd2>
 8006b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4911      	ldr	r1, [pc, #68]	; (8006b58 <HAL_I2S_DMAResume+0x120>)
 8006b12:	428b      	cmp	r3, r1
 8006b14:	d101      	bne.n	8006b1a <HAL_I2S_DMAResume+0xe2>
 8006b16:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <HAL_I2S_DMAResume+0x124>)
 8006b18:	e001      	b.n	8006b1e <HAL_I2S_DMAResume+0xe6>
 8006b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b22:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b40:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40003800 	.word	0x40003800
 8006b5c:	40003400 	.word	0x40003400

08006b60 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b74:	d004      	beq.n	8006b80 <HAL_I2S_DMAStop+0x20>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 80d1 	bne.w	8006d22 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fc fb8d 	bl	80032ac <HAL_DMA_Abort>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f043 0208 	orr.w	r2, r3, #8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006ba8:	2364      	movs	r3, #100	; 0x64
 8006baa:	2201      	movs	r2, #1
 8006bac:	2102      	movs	r1, #2
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fb04 	bl	80071bc <I2S_WaitFlagStateUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	f043 0201 	orr.w	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006bd2:	2364      	movs	r3, #100	; 0x64
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 faef 	bl	80071bc <I2S_WaitFlagStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	f043 0201 	orr.w	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0202 	bic.w	r2, r2, #2
 8006c28:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	f040 8165 	bne.w	8006f02 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fc fb31 	bl	80032ac <HAL_DMA_Abort>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	f043 0208 	orr.w	r2, r3, #8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a8a      	ldr	r2, [pc, #552]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <HAL_I2S_DMAStop+0x10e>
 8006c6a:	4b8a      	ldr	r3, [pc, #552]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006c6c:	e001      	b.n	8006c72 <HAL_I2S_DMAStop+0x112>
 8006c6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4985      	ldr	r1, [pc, #532]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006c7a:	428b      	cmp	r3, r1
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2S_DMAStop+0x122>
 8006c7e:	4b85      	ldr	r3, [pc, #532]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006c80:	e001      	b.n	8006c86 <HAL_I2S_DMAStop+0x126>
 8006c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a7e      	ldr	r2, [pc, #504]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d101      	bne.n	8006c9e <HAL_I2S_DMAStop+0x13e>
 8006c9a:	4b7e      	ldr	r3, [pc, #504]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006c9c:	e001      	b.n	8006ca2 <HAL_I2S_DMAStop+0x142>
 8006c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a79      	ldr	r2, [pc, #484]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_I2S_DMAStop+0x154>
 8006cb0:	4b78      	ldr	r3, [pc, #480]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006cb2:	e001      	b.n	8006cb8 <HAL_I2S_DMAStop+0x158>
 8006cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a73      	ldr	r2, [pc, #460]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d101      	bne.n	8006ccc <HAL_I2S_DMAStop+0x16c>
 8006cc8:	4b72      	ldr	r3, [pc, #456]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006cca:	e001      	b.n	8006cd0 <HAL_I2S_DMAStop+0x170>
 8006ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	496e      	ldr	r1, [pc, #440]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006cd8:	428b      	cmp	r3, r1
 8006cda:	d101      	bne.n	8006ce0 <HAL_I2S_DMAStop+0x180>
 8006cdc:	4b6d      	ldr	r3, [pc, #436]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006cde:	e001      	b.n	8006ce4 <HAL_I2S_DMAStop+0x184>
 8006ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10c      	bne.n	8006d0c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006d0a:	e0fa      	b.n	8006f02 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a5f      	ldr	r2, [pc, #380]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d101      	bne.n	8006d1a <HAL_I2S_DMAStop+0x1ba>
 8006d16:	4b5f      	ldr	r3, [pc, #380]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006d18:	e001      	b.n	8006d1e <HAL_I2S_DMAStop+0x1be>
 8006d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d1e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006d20:	e0ef      	b.n	8006f02 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2a:	d005      	beq.n	8006d38 <HAL_I2S_DMAStop+0x1d8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d34:	f040 80e5 	bne.w	8006f02 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fc fab1 	bl	80032ac <HAL_DMA_Abort>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d54:	f043 0208 	orr.w	r2, r3, #8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	f040 809a 	bne.w	8006ea2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00f      	beq.n	8006d96 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc fa96 	bl	80032ac <HAL_DMA_Abort>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	f043 0208 	orr.w	r2, r3, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006d96:	f7fb ffe3 	bl	8002d60 <HAL_GetTick>
 8006d9a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006d9c:	e012      	b.n	8006dc4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006d9e:	f7fb ffdf 	bl	8002d60 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b64      	cmp	r3, #100	; 0x64
 8006daa:	d90b      	bls.n	8006dc4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db0:	f043 0201 	orr.w	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a31      	ldr	r2, [pc, #196]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d101      	bne.n	8006dd2 <HAL_I2S_DMAStop+0x272>
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006dd0:	e001      	b.n	8006dd6 <HAL_I2S_DMAStop+0x276>
 8006dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d1de      	bne.n	8006d9e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006de0:	e012      	b.n	8006e08 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006de2:	f7fb ffbd 	bl	8002d60 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b64      	cmp	r3, #100	; 0x64
 8006dee:	d90b      	bls.n	8006e08 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d101      	bne.n	8006e16 <HAL_I2S_DMAStop+0x2b6>
 8006e12:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e14:	e001      	b.n	8006e1a <HAL_I2S_DMAStop+0x2ba>
 8006e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e20:	2b80      	cmp	r3, #128	; 0x80
 8006e22:	d0de      	beq.n	8006de2 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d101      	bne.n	8006e32 <HAL_I2S_DMAStop+0x2d2>
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e30:	e001      	b.n	8006e36 <HAL_I2S_DMAStop+0x2d6>
 8006e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4914      	ldr	r1, [pc, #80]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e3e:	428b      	cmp	r3, r1
 8006e40:	d101      	bne.n	8006e46 <HAL_I2S_DMAStop+0x2e6>
 8006e42:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e44:	e001      	b.n	8006e4a <HAL_I2S_DMAStop+0x2ea>
 8006e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0d      	ldr	r2, [pc, #52]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_I2S_DMAStop+0x302>
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e60:	e001      	b.n	8006e66 <HAL_I2S_DMAStop+0x306>
 8006e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a07      	ldr	r2, [pc, #28]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d101      	bne.n	8006e7a <HAL_I2S_DMAStop+0x31a>
 8006e76:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e78:	e001      	b.n	8006e7e <HAL_I2S_DMAStop+0x31e>
 8006e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4902      	ldr	r1, [pc, #8]	; (8006e90 <HAL_I2S_DMAStop+0x330>)
 8006e86:	428b      	cmp	r3, r1
 8006e88:	d106      	bne.n	8006e98 <HAL_I2S_DMAStop+0x338>
 8006e8a:	4b02      	ldr	r3, [pc, #8]	; (8006e94 <HAL_I2S_DMAStop+0x334>)
 8006e8c:	e006      	b.n	8006e9c <HAL_I2S_DMAStop+0x33c>
 8006e8e:	bf00      	nop
 8006e90:	40003800 	.word	0x40003800
 8006e94:	40003400 	.word	0x40003400
 8006e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e9c:	f022 0202 	bic.w	r2, r2, #2
 8006ea0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60bb      	str	r3, [r7, #8]
 8006ec6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0201 	bic.w	r2, r2, #1
 8006ed6:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee0:	d10c      	bne.n	8006efc <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e002      	b.n	8006f02 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f36:	b2db      	uxtb	r3, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10e      	bne.n	8006f78 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0202 	bic.w	r2, r2, #2
 8006f68:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7f9 fbe7 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7f9 fbeb 	bl	8000770 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0203 	bic.w	r2, r2, #3
 8006fbe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	f043 0208 	orr.w	r2, r3, #8
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7f9 fd35 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	881a      	ldrh	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10e      	bne.n	8007042 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007032:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7f9 fb85 	bl	800074c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	b292      	uxth	r2, r2
 800705e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10e      	bne.n	80070a0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007090:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff ff3a 	bl	8006f14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d13a      	bne.n	800713a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d109      	bne.n	80070e2 <I2S_IRQHandler+0x3a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d102      	bne.n	80070e2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ffb4 	bl	800704a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d126      	bne.n	800713a <I2S_IRQHandler+0x92>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d11f      	bne.n	800713a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007108:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	f043 0202 	orr.w	r2, r3, #2
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7f9 fc8b 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d136      	bne.n	80071b4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b02      	cmp	r3, #2
 800714e:	d109      	bne.n	8007164 <I2S_IRQHandler+0xbc>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d102      	bne.n	8007164 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ff45 	bl	8006fee <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d122      	bne.n	80071b4 <I2S_IRQHandler+0x10c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b20      	cmp	r3, #32
 800717a:	d11b      	bne.n	80071b4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800718a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a6:	f043 0204 	orr.w	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7f9 fc4e 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80071cc:	f7fb fdc8 	bl	8002d60 <HAL_GetTick>
 80071d0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80071d2:	e018      	b.n	8007206 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d014      	beq.n	8007206 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80071dc:	f7fb fdc0 	bl	8002d60 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d902      	bls.n	80071f2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e00f      	b.n	8007226 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4013      	ands	r3, r2
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	bf0c      	ite	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	2300      	movne	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	429a      	cmp	r2, r3
 8007222:	d1d7      	bne.n	80071d4 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a92      	ldr	r2, [pc, #584]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d101      	bne.n	800724e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800724a:	4b92      	ldr	r3, [pc, #584]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800724c:	e001      	b.n	8007252 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800724e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a8b      	ldr	r2, [pc, #556]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d101      	bne.n	800726c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007268:	4b8a      	ldr	r3, [pc, #552]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800726a:	e001      	b.n	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800726c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d004      	beq.n	8007288 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 8099 	bne.w	80073ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b02      	cmp	r3, #2
 8007290:	d107      	bne.n	80072a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f925 	bl	80074ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d107      	bne.n	80072bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9c8 	bl	800764c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d13a      	bne.n	800733c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d035      	beq.n	800733c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a6e      	ldr	r2, [pc, #440]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d101      	bne.n	80072de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80072da:	4b6e      	ldr	r3, [pc, #440]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072dc:	e001      	b.n	80072e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80072de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4969      	ldr	r1, [pc, #420]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d101      	bne.n	80072f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80072ee:	4b69      	ldr	r3, [pc, #420]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80072f0:	e001      	b.n	80072f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80072f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800730a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7f9 fb8a 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b08      	cmp	r3, #8
 8007344:	f040 80c3 	bne.w	80074ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80bd 	beq.w	80074ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007362:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a49      	ldr	r2, [pc, #292]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d101      	bne.n	8007372 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800736e:	4b49      	ldr	r3, [pc, #292]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007370:	e001      	b.n	8007376 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4944      	ldr	r1, [pc, #272]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800737e:	428b      	cmp	r3, r1
 8007380:	d101      	bne.n	8007386 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007382:	4b44      	ldr	r3, [pc, #272]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007384:	e001      	b.n	800738a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007386:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800738a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800738e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007390:	2300      	movs	r3, #0
 8007392:	60bb      	str	r3, [r7, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]
 800739c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7f9 fb4c 	bl	8000a50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073b8:	e089      	b.n	80074ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d107      	bne.n	80073d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8be 	bl	8007550 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d107      	bne.n	80073ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f8fd 	bl	80075e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d12f      	bne.n	8007458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d02a      	beq.n	8007458 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007410:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1e      	ldr	r2, [pc, #120]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d101      	bne.n	8007420 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800741c:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800741e:	e001      	b.n	8007424 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4919      	ldr	r1, [pc, #100]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800742c:	428b      	cmp	r3, r1
 800742e:	d101      	bne.n	8007434 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007430:	4b18      	ldr	r3, [pc, #96]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007432:	e001      	b.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800743c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f043 0202 	orr.w	r2, r3, #2
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f9 fafc 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b08      	cmp	r3, #8
 8007460:	d136      	bne.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d031      	beq.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a07      	ldr	r2, [pc, #28]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007478:	e001      	b.n	800747e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800747a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4902      	ldr	r1, [pc, #8]	; (8007490 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007486:	428b      	cmp	r3, r1
 8007488:	d106      	bne.n	8007498 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800748a:	4b02      	ldr	r3, [pc, #8]	; (8007494 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800748c:	e006      	b.n	800749c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800748e:	bf00      	nop
 8007490:	40003800 	.word	0x40003800
 8007494:	40003400 	.word	0x40003400
 8007498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800749c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	f043 0204 	orr.w	r2, r3, #4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7f9 fac2 	bl	8000a50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074cc:	e000      	b.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074ce:	bf00      	nop
}
 80074d0:	bf00      	nop
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	1c99      	adds	r1, r3, #2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6251      	str	r1, [r2, #36]	; 0x24
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d113      	bne.n	8007546 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ffc9 	bl	80074d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	1c99      	adds	r1, r3, #2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6251      	str	r1, [r2, #36]	; 0x24
 8007562:	8819      	ldrh	r1, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <I2SEx_TxISR_I2SExt+0x90>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d101      	bne.n	8007572 <I2SEx_TxISR_I2SExt+0x22>
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <I2SEx_TxISR_I2SExt+0x94>)
 8007570:	e001      	b.n	8007576 <I2SEx_TxISR_I2SExt+0x26>
 8007572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007576:	460a      	mov	r2, r1
 8007578:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d121      	bne.n	80075d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <I2SEx_TxISR_I2SExt+0x90>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <I2SEx_TxISR_I2SExt+0x50>
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <I2SEx_TxISR_I2SExt+0x94>)
 800759e:	e001      	b.n	80075a4 <I2SEx_TxISR_I2SExt+0x54>
 80075a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	490d      	ldr	r1, [pc, #52]	; (80075e0 <I2SEx_TxISR_I2SExt+0x90>)
 80075ac:	428b      	cmp	r3, r1
 80075ae:	d101      	bne.n	80075b4 <I2SEx_TxISR_I2SExt+0x64>
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <I2SEx_TxISR_I2SExt+0x94>)
 80075b2:	e001      	b.n	80075b8 <I2SEx_TxISR_I2SExt+0x68>
 80075b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d106      	bne.n	80075d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff ff81 	bl	80074d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40003800 	.word	0x40003800
 80075e4:	40003400 	.word	0x40003400

080075e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68d8      	ldr	r0, [r3, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	1c99      	adds	r1, r3, #2
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007600:	b282      	uxth	r2, r0
 8007602:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d113      	bne.n	8007644 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800762a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff ff4a 	bl	80074d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a20      	ldr	r2, [pc, #128]	; (80076dc <I2SEx_RxISR_I2SExt+0x90>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d101      	bne.n	8007662 <I2SEx_RxISR_I2SExt+0x16>
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <I2SEx_RxISR_I2SExt+0x94>)
 8007660:	e001      	b.n	8007666 <I2SEx_RxISR_I2SExt+0x1a>
 8007662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007666:	68d8      	ldr	r0, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	1c99      	adds	r1, r3, #2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007672:	b282      	uxth	r2, r0
 8007674:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d121      	bne.n	80076d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a12      	ldr	r2, [pc, #72]	; (80076dc <I2SEx_RxISR_I2SExt+0x90>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <I2SEx_RxISR_I2SExt+0x50>
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <I2SEx_RxISR_I2SExt+0x94>)
 800769a:	e001      	b.n	80076a0 <I2SEx_RxISR_I2SExt+0x54>
 800769c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	490d      	ldr	r1, [pc, #52]	; (80076dc <I2SEx_RxISR_I2SExt+0x90>)
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d101      	bne.n	80076b0 <I2SEx_RxISR_I2SExt+0x64>
 80076ac:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <I2SEx_RxISR_I2SExt+0x94>)
 80076ae:	e001      	b.n	80076b4 <I2SEx_RxISR_I2SExt+0x68>
 80076b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80076b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ff03 	bl	80074d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40003800 	.word	0x40003800
 80076e0:	40003400 	.word	0x40003400

080076e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e267      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d075      	beq.n	80077ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007702:	4b88      	ldr	r3, [pc, #544]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 030c 	and.w	r3, r3, #12
 800770a:	2b04      	cmp	r3, #4
 800770c:	d00c      	beq.n	8007728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800770e:	4b85      	ldr	r3, [pc, #532]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007716:	2b08      	cmp	r3, #8
 8007718:	d112      	bne.n	8007740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800771a:	4b82      	ldr	r3, [pc, #520]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007726:	d10b      	bne.n	8007740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007728:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05b      	beq.n	80077ec <HAL_RCC_OscConfig+0x108>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d157      	bne.n	80077ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e242      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007748:	d106      	bne.n	8007758 <HAL_RCC_OscConfig+0x74>
 800774a:	4b76      	ldr	r3, [pc, #472]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a75      	ldr	r2, [pc, #468]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e01d      	b.n	8007794 <HAL_RCC_OscConfig+0xb0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007760:	d10c      	bne.n	800777c <HAL_RCC_OscConfig+0x98>
 8007762:	4b70      	ldr	r3, [pc, #448]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a6f      	ldr	r2, [pc, #444]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	4b6d      	ldr	r3, [pc, #436]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a6c      	ldr	r2, [pc, #432]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e00b      	b.n	8007794 <HAL_RCC_OscConfig+0xb0>
 800777c:	4b69      	ldr	r3, [pc, #420]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a68      	ldr	r2, [pc, #416]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	4b66      	ldr	r3, [pc, #408]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a65      	ldr	r2, [pc, #404]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 800778e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d013      	beq.n	80077c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779c:	f7fb fae0 	bl	8002d60 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077a4:	f7fb fadc 	bl	8002d60 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b64      	cmp	r3, #100	; 0x64
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e207      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b6:	4b5b      	ldr	r3, [pc, #364]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCC_OscConfig+0xc0>
 80077c2:	e014      	b.n	80077ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077c4:	f7fb facc 	bl	8002d60 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077cc:	f7fb fac8 	bl	8002d60 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b64      	cmp	r3, #100	; 0x64
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e1f3      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077de:	4b51      	ldr	r3, [pc, #324]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f0      	bne.n	80077cc <HAL_RCC_OscConfig+0xe8>
 80077ea:	e000      	b.n	80077ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d063      	beq.n	80078c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077fa:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007806:	4b47      	ldr	r3, [pc, #284]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800780e:	2b08      	cmp	r3, #8
 8007810:	d11c      	bne.n	800784c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007812:	4b44      	ldr	r3, [pc, #272]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d116      	bne.n	800784c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800781e:	4b41      	ldr	r3, [pc, #260]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_RCC_OscConfig+0x152>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d001      	beq.n	8007836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e1c7      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007836:	4b3b      	ldr	r3, [pc, #236]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4937      	ldr	r1, [pc, #220]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800784a:	e03a      	b.n	80078c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d020      	beq.n	8007896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007854:	4b34      	ldr	r3, [pc, #208]	; (8007928 <HAL_RCC_OscConfig+0x244>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785a:	f7fb fa81 	bl	8002d60 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007862:	f7fb fa7d 	bl	8002d60 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e1a8      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007874:	4b2b      	ldr	r3, [pc, #172]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007880:	4b28      	ldr	r3, [pc, #160]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	4925      	ldr	r1, [pc, #148]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]
 8007894:	e015      	b.n	80078c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <HAL_RCC_OscConfig+0x244>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb fa60 	bl	8002d60 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078a4:	f7fb fa5c 	bl	8002d60 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e187      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d036      	beq.n	800793c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d016      	beq.n	8007904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <HAL_RCC_OscConfig+0x248>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078dc:	f7fb fa40 	bl	8002d60 <HAL_GetTick>
 80078e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078e2:	e008      	b.n	80078f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078e4:	f7fb fa3c 	bl	8002d60 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e167      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_RCC_OscConfig+0x240>)
 80078f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0f0      	beq.n	80078e4 <HAL_RCC_OscConfig+0x200>
 8007902:	e01b      	b.n	800793c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <HAL_RCC_OscConfig+0x248>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800790a:	f7fb fa29 	bl	8002d60 <HAL_GetTick>
 800790e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007910:	e00e      	b.n	8007930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007912:	f7fb fa25 	bl	8002d60 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d907      	bls.n	8007930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e150      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
 8007924:	40023800 	.word	0x40023800
 8007928:	42470000 	.word	0x42470000
 800792c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007930:	4b88      	ldr	r3, [pc, #544]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1ea      	bne.n	8007912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8097 	beq.w	8007a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800794a:	2300      	movs	r3, #0
 800794c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800794e:	4b81      	ldr	r3, [pc, #516]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	4b7d      	ldr	r3, [pc, #500]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a7c      	ldr	r2, [pc, #496]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	4b7a      	ldr	r3, [pc, #488]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	60bb      	str	r3, [r7, #8]
 8007974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797a:	4b77      	ldr	r3, [pc, #476]	; (8007b58 <HAL_RCC_OscConfig+0x474>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007982:	2b00      	cmp	r3, #0
 8007984:	d118      	bne.n	80079b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007986:	4b74      	ldr	r3, [pc, #464]	; (8007b58 <HAL_RCC_OscConfig+0x474>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a73      	ldr	r2, [pc, #460]	; (8007b58 <HAL_RCC_OscConfig+0x474>)
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007992:	f7fb f9e5 	bl	8002d60 <HAL_GetTick>
 8007996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007998:	e008      	b.n	80079ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799a:	f7fb f9e1 	bl	8002d60 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e10c      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ac:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <HAL_RCC_OscConfig+0x474>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d106      	bne.n	80079ce <HAL_RCC_OscConfig+0x2ea>
 80079c0:	4b64      	ldr	r3, [pc, #400]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	4a63      	ldr	r2, [pc, #396]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	6713      	str	r3, [r2, #112]	; 0x70
 80079cc:	e01c      	b.n	8007a08 <HAL_RCC_OscConfig+0x324>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCC_OscConfig+0x30c>
 80079d6:	4b5f      	ldr	r3, [pc, #380]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	6713      	str	r3, [r2, #112]	; 0x70
 80079e2:	4b5c      	ldr	r3, [pc, #368]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	4a5b      	ldr	r2, [pc, #364]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079e8:	f043 0301 	orr.w	r3, r3, #1
 80079ec:	6713      	str	r3, [r2, #112]	; 0x70
 80079ee:	e00b      	b.n	8007a08 <HAL_RCC_OscConfig+0x324>
 80079f0:	4b58      	ldr	r3, [pc, #352]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	4a57      	ldr	r2, [pc, #348]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079f6:	f023 0301 	bic.w	r3, r3, #1
 80079fa:	6713      	str	r3, [r2, #112]	; 0x70
 80079fc:	4b55      	ldr	r3, [pc, #340]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	4a54      	ldr	r2, [pc, #336]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a02:	f023 0304 	bic.w	r3, r3, #4
 8007a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d015      	beq.n	8007a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a10:	f7fb f9a6 	bl	8002d60 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a16:	e00a      	b.n	8007a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a18:	f7fb f9a2 	bl	8002d60 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e0cb      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2e:	4b49      	ldr	r3, [pc, #292]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ee      	beq.n	8007a18 <HAL_RCC_OscConfig+0x334>
 8007a3a:	e014      	b.n	8007a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a3c:	f7fb f990 	bl	8002d60 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a44:	f7fb f98c 	bl	8002d60 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e0b5      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5a:	4b3e      	ldr	r3, [pc, #248]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1ee      	bne.n	8007a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a6c:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	4a38      	ldr	r2, [pc, #224]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a1 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a82:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d05c      	beq.n	8007b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d141      	bne.n	8007b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a96:	4b31      	ldr	r3, [pc, #196]	; (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fb f960 	bl	8002d60 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fb f95c 	bl	8002d60 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e087      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	019b      	lsls	r3, r3, #6
 8007ad2:	431a      	orrs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	3b01      	subs	r3, #1
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	061b      	lsls	r3, r3, #24
 8007ae6:	491b      	ldr	r1, [pc, #108]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af2:	f7fb f935 	bl	8002d60 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007afa:	f7fb f931 	bl	8002d60 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e05c      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCC_OscConfig+0x416>
 8007b18:	e054      	b.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1a:	4b10      	ldr	r3, [pc, #64]	; (8007b5c <HAL_RCC_OscConfig+0x478>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b20:	f7fb f91e 	bl	8002d60 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b28:	f7fb f91a 	bl	8002d60 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e045      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_RCC_OscConfig+0x470>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x444>
 8007b46:	e03d      	b.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d107      	bne.n	8007b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e038      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
 8007b54:	40023800 	.word	0x40023800
 8007b58:	40007000 	.word	0x40007000
 8007b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <HAL_RCC_OscConfig+0x4ec>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d028      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d121      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d11a      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b90:	4013      	ands	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d111      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	40023800 	.word	0x40023800

08007bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0cc      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007be8:	4b68      	ldr	r3, [pc, #416]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d90c      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf6:	4b65      	ldr	r3, [pc, #404]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfe:	4b63      	ldr	r3, [pc, #396]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0b8      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d020      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c28:	4b59      	ldr	r3, [pc, #356]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	4a58      	ldr	r2, [pc, #352]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c40:	4b53      	ldr	r3, [pc, #332]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4a52      	ldr	r2, [pc, #328]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c4c:	4b50      	ldr	r3, [pc, #320]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	494d      	ldr	r1, [pc, #308]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d044      	beq.n	8007cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d107      	bne.n	8007c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c72:	4b47      	ldr	r3, [pc, #284]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d119      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e07f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d003      	beq.n	8007c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d107      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c92:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e06f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ca2:	4b3b      	ldr	r3, [pc, #236]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e067      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cb2:	4b37      	ldr	r3, [pc, #220]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f023 0203 	bic.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4934      	ldr	r1, [pc, #208]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cc4:	f7fb f84c 	bl	8002d60 <HAL_GetTick>
 8007cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cca:	e00a      	b.n	8007ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ccc:	f7fb f848 	bl	8002d60 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e04f      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce2:	4b2b      	ldr	r3, [pc, #172]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 020c 	and.w	r2, r3, #12
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d1eb      	bne.n	8007ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cf4:	4b25      	ldr	r3, [pc, #148]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d20c      	bcs.n	8007d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d02:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0a:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0307 	and.w	r3, r3, #7
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e032      	b.n	8007d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d28:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4916      	ldr	r1, [pc, #88]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d46:	4b12      	ldr	r3, [pc, #72]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	490e      	ldr	r1, [pc, #56]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d5a:	f000 f821 	bl	8007da0 <HAL_RCC_GetSysClockFreq>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	091b      	lsrs	r3, r3, #4
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	490a      	ldr	r1, [pc, #40]	; (8007d94 <HAL_RCC_ClockConfig+0x1c0>)
 8007d6c:	5ccb      	ldrb	r3, [r1, r3]
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <HAL_RCC_ClockConfig+0x1c4>)
 8007d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_RCC_ClockConfig+0x1c8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fa ffac 	bl	8002cd8 <HAL_InitTick>

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023c00 	.word	0x40023c00
 8007d90:	40023800 	.word	0x40023800
 8007d94:	08011f50 	.word	0x08011f50
 8007d98:	20000038 	.word	0x20000038
 8007d9c:	20000040 	.word	0x20000040

08007da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da4:	b094      	sub	sp, #80	; 0x50
 8007da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	647b      	str	r3, [r7, #68]	; 0x44
 8007dac:	2300      	movs	r3, #0
 8007dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db0:	2300      	movs	r3, #0
 8007db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007db8:	4b79      	ldr	r3, [pc, #484]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 030c 	and.w	r3, r3, #12
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d00d      	beq.n	8007de0 <HAL_RCC_GetSysClockFreq+0x40>
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	f200 80e1 	bhi.w	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d003      	beq.n	8007dda <HAL_RCC_GetSysClockFreq+0x3a>
 8007dd2:	e0db      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007dd4:	4b73      	ldr	r3, [pc, #460]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007dd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007dd8:	e0db      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007dda:	4b73      	ldr	r3, [pc, #460]	; (8007fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dde:	e0d8      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007de0:	4b6f      	ldr	r3, [pc, #444]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007dea:	4b6d      	ldr	r3, [pc, #436]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d063      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007df6:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e08:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f04f 0000 	mov.w	r0, #0
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	0159      	lsls	r1, r3, #5
 8007e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e24:	0150      	lsls	r0, r2, #5
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	1a51      	subs	r1, r2, r1
 8007e2e:	6139      	str	r1, [r7, #16]
 8007e30:	4629      	mov	r1, r5
 8007e32:	eb63 0301 	sbc.w	r3, r3, r1
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e44:	4659      	mov	r1, fp
 8007e46:	018b      	lsls	r3, r1, #6
 8007e48:	4651      	mov	r1, sl
 8007e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e4e:	4651      	mov	r1, sl
 8007e50:	018a      	lsls	r2, r1, #6
 8007e52:	4651      	mov	r1, sl
 8007e54:	ebb2 0801 	subs.w	r8, r2, r1
 8007e58:	4659      	mov	r1, fp
 8007e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e72:	4690      	mov	r8, r2
 8007e74:	4699      	mov	r9, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	eb18 0303 	adds.w	r3, r8, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	462b      	mov	r3, r5
 8007e80:	eb49 0303 	adc.w	r3, r9, r3
 8007e84:	60fb      	str	r3, [r7, #12]
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e92:	4629      	mov	r1, r5
 8007e94:	024b      	lsls	r3, r1, #9
 8007e96:	4621      	mov	r1, r4
 8007e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	024a      	lsls	r2, r1, #9
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007eb0:	f7f8 f9e6 	bl	8000280 <__aeabi_uldivmod>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4613      	mov	r3, r2
 8007eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ebc:	e058      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b38      	ldr	r3, [pc, #224]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	4611      	mov	r1, r2
 8007eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ece:	623b      	str	r3, [r7, #32]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f04f 0000 	mov.w	r0, #0
 8007ee0:	f04f 0100 	mov.w	r1, #0
 8007ee4:	0159      	lsls	r1, r3, #5
 8007ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eea:	0150      	lsls	r0, r2, #5
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f10:	ebb2 040a 	subs.w	r4, r2, sl
 8007f14:	eb63 050b 	sbc.w	r5, r3, fp
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	00eb      	lsls	r3, r5, #3
 8007f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f26:	00e2      	lsls	r2, r4, #3
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	18e3      	adds	r3, r4, r3
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	464b      	mov	r3, r9
 8007f34:	eb45 0303 	adc.w	r3, r5, r3
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f46:	4629      	mov	r1, r5
 8007f48:	028b      	lsls	r3, r1, #10
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f50:	4621      	mov	r1, r4
 8007f52:	028a      	lsls	r2, r1, #10
 8007f54:	4610      	mov	r0, r2
 8007f56:	4619      	mov	r1, r3
 8007f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	61fa      	str	r2, [r7, #28]
 8007f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f64:	f7f8 f98c 	bl	8000280 <__aeabi_uldivmod>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f8a:	e002      	b.n	8007f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3750      	adds	r7, #80	; 0x50
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	00f42400 	.word	0x00f42400
 8007fa8:	007a1200 	.word	0x007a1200

08007fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fb0:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20000038 	.word	0x20000038

08007fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fc8:	f7ff fff0 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	0a9b      	lsrs	r3, r3, #10
 8007fd4:	f003 0307 	and.w	r3, r3, #7
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fda:	5ccb      	ldrb	r3, [r1, r3]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	08011f60 	.word	0x08011f60

08007fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ff0:	f7ff ffdc 	bl	8007fac <HAL_RCC_GetHCLKFreq>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	0b5b      	lsrs	r3, r3, #13
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	4903      	ldr	r1, [pc, #12]	; (8008010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008002:	5ccb      	ldrb	r3, [r1, r3]
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40023800 	.word	0x40023800
 8008010:	08011f60 	.word	0x08011f60

08008014 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008038:	2b00      	cmp	r3, #0
 800803a:	d038      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800803c:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008042:	f7fa fe8d 	bl	8002d60 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008048:	e008      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800804a:	f7fa fe89 	bl	8002d60 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e0bd      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800805c:	4b61      	ldr	r3, [pc, #388]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f0      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	019b      	lsls	r3, r3, #6
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	071b      	lsls	r3, r3, #28
 800807a:	495a      	ldr	r1, [pc, #360]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008082:	4b57      	ldr	r3, [pc, #348]	; (80081e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008088:	f7fa fe6a 	bl	8002d60 <HAL_GetTick>
 800808c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800808e:	e008      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008090:	f7fa fe66 	bl	8002d60 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d901      	bls.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e09a      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080a2:	4b50      	ldr	r3, [pc, #320]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0f0      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8083 	beq.w	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	4a47      	ldr	r2, [pc, #284]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ca:	6413      	str	r3, [r2, #64]	; 0x40
 80080cc:	4b45      	ldr	r3, [pc, #276]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080d8:	4b43      	ldr	r3, [pc, #268]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a42      	ldr	r2, [pc, #264]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080e4:	f7fa fe3c 	bl	8002d60 <HAL_GetTick>
 80080e8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80080ec:	f7fa fe38 	bl	8002d60 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e06c      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080fe:	4b3a      	ldr	r3, [pc, #232]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800810a:	4b36      	ldr	r3, [pc, #216]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008112:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d02f      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	d028      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008128:	4b2e      	ldr	r3, [pc, #184]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008130:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008138:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800813e:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008144:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d114      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008150:	f7fa fe06 	bl	8002d60 <HAL_GetTick>
 8008154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008156:	e00a      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008158:	f7fa fe02 	bl	8002d60 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f241 3288 	movw	r2, #5000	; 0x1388
 8008166:	4293      	cmp	r3, r2
 8008168:	d901      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e034      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ee      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008186:	d10d      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800819c:	4911      	ldr	r1, [pc, #68]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	608b      	str	r3, [r1, #8]
 80081a2:	e005      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4a0e      	ldr	r2, [pc, #56]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081ae:	6093      	str	r3, [r2, #8]
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081bc:	4909      	ldr	r1, [pc, #36]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7d1a      	ldrb	r2, [r3, #20]
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80081d4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	42470068 	.word	0x42470068
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40007000 	.word	0x40007000
 80081ec:	42470e40 	.word	0x42470e40
 80081f0:	424711e0 	.word	0x424711e0

080081f4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2203      	movs	r2, #3
 8008200:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8008202:	4b1c      	ldr	r3, [pc, #112]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008208:	099b      	lsrs	r3, r3, #6
 800820a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008212:	4b18      	ldr	r3, [pc, #96]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008218:	0f1b      	lsrs	r3, r3, #28
 800821a:	f003 0207 	and.w	r2, r3, #7
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8008222:	4b14      	ldr	r3, [pc, #80]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008228:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008238:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	431a      	orrs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800824c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800825e:	e002      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	751a      	strb	r2, [r3, #20]
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40023800 	.word	0x40023800

08008278 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d140      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008296:	4b24      	ldr	r3, [pc, #144]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d131      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80082ac:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80082ae:	617b      	str	r3, [r7, #20]
          break;
 80082b0:	e031      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80082b2:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082be:	d109      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082c0:	4b19      	ldr	r3, [pc, #100]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80082c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ca:	4a19      	ldr	r2, [pc, #100]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	e008      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082d4:	4b14      	ldr	r3, [pc, #80]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80082d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082de:	4a15      	ldr	r2, [pc, #84]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80082e6:	4b10      	ldr	r3, [pc, #64]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80082e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	fb02 f303 	mul.w	r3, r2, r3
 80082f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80082fa:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80082fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008300:	0f1b      	lsrs	r3, r3, #28
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	fbb2 f3f3 	udiv	r3, r2, r3
 800830c:	617b      	str	r3, [r7, #20]
          break;
 800830e:	e002      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
          break;
 8008314:	bf00      	nop
        }
      }
      break;
 8008316:	bf00      	nop
    }
  }
  return frequency;
 8008318:	697b      	ldr	r3, [r7, #20]
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40023800 	.word	0x40023800
 800832c:	00bb8000 	.word	0x00bb8000
 8008330:	007a1200 	.word	0x007a1200
 8008334:	00f42400 	.word	0x00f42400

08008338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e07b      	b.n	8008442 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800835a:	d009      	beq.n	8008370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	61da      	str	r2, [r3, #28]
 8008362:	e005      	b.n	8008370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fa f912 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f4:	ea42 0103 	orr.w	r1, r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	f003 0104 	and.w	r1, r3, #4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	f003 0210 	and.w	r2, r3, #16
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008430:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	603b      	str	r3, [r7, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008464:	2b01      	cmp	r3, #1
 8008466:	d101      	bne.n	800846c <HAL_SPI_Transmit+0x22>
 8008468:	2302      	movs	r3, #2
 800846a:	e126      	b.n	80086ba <HAL_SPI_Transmit+0x270>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008474:	f7fa fc74 	bl	8002d60 <HAL_GetTick>
 8008478:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800848e:	e10b      	b.n	80086a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SPI_Transmit+0x52>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084a0:	e102      	b.n	80086a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2203      	movs	r2, #3
 80084a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e8:	d10f      	bne.n	800850a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d007      	beq.n	8008528 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008530:	d14b      	bne.n	80085ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_SPI_Transmit+0xf6>
 800853a:	8afb      	ldrh	r3, [r7, #22]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d13e      	bne.n	80085be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	1c9a      	adds	r2, r3, #2
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008564:	e02b      	b.n	80085be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b02      	cmp	r3, #2
 8008572:	d112      	bne.n	800859a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	881a      	ldrh	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	1c9a      	adds	r2, r3, #2
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	86da      	strh	r2, [r3, #54]	; 0x36
 8008598:	e011      	b.n	80085be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800859a:	f7fa fbe1 	bl	8002d60 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d803      	bhi.n	80085b2 <HAL_SPI_Transmit+0x168>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d102      	bne.n	80085b8 <HAL_SPI_Transmit+0x16e>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085bc:	e074      	b.n	80086a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1ce      	bne.n	8008566 <HAL_SPI_Transmit+0x11c>
 80085c8:	e04c      	b.n	8008664 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <HAL_SPI_Transmit+0x18e>
 80085d2:	8afb      	ldrh	r3, [r7, #22]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d140      	bne.n	800865a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	330c      	adds	r3, #12
 80085e2:	7812      	ldrb	r2, [r2, #0]
 80085e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80085fe:	e02c      	b.n	800865a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b02      	cmp	r3, #2
 800860c:	d113      	bne.n	8008636 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	86da      	strh	r2, [r3, #54]	; 0x36
 8008634:	e011      	b.n	800865a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008636:	f7fa fb93 	bl	8002d60 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d803      	bhi.n	800864e <HAL_SPI_Transmit+0x204>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d102      	bne.n	8008654 <HAL_SPI_Transmit+0x20a>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008658:	e026      	b.n	80086a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800865e:	b29b      	uxth	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1cd      	bne.n	8008600 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fa55 	bl	8008b18 <SPI_EndRxTxTransaction>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008682:	2300      	movs	r3, #0
 8008684:	613b      	str	r3, [r7, #16]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	e000      	b.n	80086a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80086a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3720      	adds	r7, #32
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b08c      	sub	sp, #48	; 0x30
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
 80086ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086d0:	2301      	movs	r3, #1
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_SPI_TransmitReceive+0x26>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e18a      	b.n	80089fe <HAL_SPI_TransmitReceive+0x33c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086f0:	f7fa fb36 	bl	8002d60 <HAL_GetTick>
 80086f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008706:	887b      	ldrh	r3, [r7, #2]
 8008708:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800870a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800870e:	2b01      	cmp	r3, #1
 8008710:	d00f      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x70>
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008718:	d107      	bne.n	800872a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <HAL_SPI_TransmitReceive+0x68>
 8008722:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008726:	2b04      	cmp	r3, #4
 8008728:	d003      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800872a:	2302      	movs	r3, #2
 800872c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008730:	e15b      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x82>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x82>
 800873e:	887b      	ldrh	r3, [r7, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d103      	bne.n	800874c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800874a:	e14e      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b04      	cmp	r3, #4
 8008756:	d003      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2205      	movs	r2, #5
 800875c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	887a      	ldrh	r2, [r7, #2]
 8008770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	887a      	ldrh	r2, [r7, #2]
 8008776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	887a      	ldrh	r2, [r7, #2]
 8008782:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	887a      	ldrh	r2, [r7, #2]
 8008788:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d007      	beq.n	80087b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087bc:	d178      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x10a>
 80087c6:	8b7b      	ldrh	r3, [r7, #26]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d166      	bne.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f0:	e053      	b.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d11b      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x176>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x176>
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d113      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	881a      	ldrh	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b01      	cmp	r3, #1
 8008844:	d119      	bne.n	800887a <HAL_SPI_TransmitReceive+0x1b8>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800884a:	b29b      	uxth	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d014      	beq.n	800887a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	b292      	uxth	r2, r2
 800885c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008876:	2301      	movs	r3, #1
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800887a:	f7fa fa71 	bl	8002d60 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008886:	429a      	cmp	r2, r3
 8008888:	d807      	bhi.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d003      	beq.n	800889a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008898:	e0a7      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1a6      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x130>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1a1      	bne.n	80087f2 <HAL_SPI_TransmitReceive+0x130>
 80088ae:	e07c      	b.n	80089aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <HAL_SPI_TransmitReceive+0x1fc>
 80088b8:	8b7b      	ldrh	r3, [r7, #26]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d16b      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	7812      	ldrb	r2, [r2, #0]
 80088ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088e4:	e057      	b.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d11c      	bne.n	800892e <HAL_SPI_TransmitReceive+0x26c>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d017      	beq.n	800892e <HAL_SPI_TransmitReceive+0x26c>
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d114      	bne.n	800892e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b01      	cmp	r3, #1
 800893a:	d119      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x2ae>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d014      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008962:	b29b      	uxth	r3, r3
 8008964:	3b01      	subs	r3, #1
 8008966:	b29a      	uxth	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800896c:	2301      	movs	r3, #1
 800896e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008970:	f7fa f9f6 	bl	8002d60 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897c:	429a      	cmp	r2, r3
 800897e:	d803      	bhi.n	8008988 <HAL_SPI_TransmitReceive+0x2c6>
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d102      	bne.n	800898e <HAL_SPI_TransmitReceive+0x2cc>
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008994:	e029      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800899a:	b29b      	uxth	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1a2      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x224>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d19d      	bne.n	80088e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 f8b2 	bl	8008b18 <SPI_EndRxTxTransaction>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d006      	beq.n	80089c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089c6:	e010      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	e000      	b.n	80089ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3730      	adds	r7, #48	; 0x30
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a18:	f7fa f9a2 	bl	8002d60 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4413      	add	r3, r2
 8008a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a28:	f7fa f99a 	bl	8002d60 <HAL_GetTick>
 8008a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a2e:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	015b      	lsls	r3, r3, #5
 8008a34:	0d1b      	lsrs	r3, r3, #20
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a3e:	e054      	b.n	8008aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a46:	d050      	beq.n	8008aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a48:	f7fa f98a 	bl	8002d60 <HAL_GetTick>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d902      	bls.n	8008a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d13d      	bne.n	8008ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a76:	d111      	bne.n	8008a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a80:	d004      	beq.n	8008a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a8a:	d107      	bne.n	8008a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aa4:	d10f      	bne.n	8008ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e017      	b.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4013      	ands	r3, r2
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	bf0c      	ite	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	2300      	movne	r3, #0
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	461a      	mov	r2, r3
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d19b      	bne.n	8008a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3720      	adds	r7, #32
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000038 	.word	0x20000038

08008b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <SPI_EndRxTxTransaction+0x7c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <SPI_EndRxTxTransaction+0x80>)
 8008b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2e:	0d5b      	lsrs	r3, r3, #21
 8008b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b34:	fb02 f303 	mul.w	r3, r2, r3
 8008b38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b42:	d112      	bne.n	8008b6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff ff5a 	bl	8008a08 <SPI_WaitFlagStateUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d016      	beq.n	8008b88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e00f      	b.n	8008b8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b80:	2b80      	cmp	r3, #128	; 0x80
 8008b82:	d0f2      	beq.n	8008b6a <SPI_EndRxTxTransaction+0x52>
 8008b84:	e000      	b.n	8008b88 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b86:	bf00      	nop
  }

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000038 	.word	0x20000038
 8008b98:	165e9f81 	.word	0x165e9f81

08008b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e03f      	b.n	8008c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f9 fd3e 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2224      	movs	r2, #36	; 0x24
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f929 	bl	8008e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b08a      	sub	sp, #40	; 0x28
 8008c3a:	af02      	add	r7, sp, #8
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d17c      	bne.n	8008d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UART_Transmit+0x2c>
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e075      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_UART_Transmit+0x3e>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e06e      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c8a:	f7fa f869 	bl	8002d60 <HAL_GetTick>
 8008c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca4:	d108      	bne.n	8008cb8 <HAL_UART_Transmit+0x82>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	e003      	b.n	8008cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008cc8:	e02a      	b.n	8008d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2180      	movs	r1, #128	; 0x80
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f840 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e036      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	3302      	adds	r3, #2
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e007      	b.n	8008d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1cf      	bne.n	8008cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2200      	movs	r2, #0
 8008d32:	2140      	movs	r1, #64	; 0x40
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f810 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e006      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e000      	b.n	8008d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b090      	sub	sp, #64	; 0x40
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6a:	e050      	b.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d04c      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d7a:	f7f9 fff1 	bl	8002d60 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d241      	bcs.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008daa:	637a      	str	r2, [r7, #52]	; 0x34
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f023 0301 	bic.w	r3, r3, #1
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	3314      	adds	r3, #20
 8008ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dde:	623a      	str	r2, [r7, #32]
 8008de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	69f9      	ldr	r1, [r7, #28]
 8008de4:	6a3a      	ldr	r2, [r7, #32]
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e5      	bne.n	8008dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e00f      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4013      	ands	r3, r2
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	bf0c      	ite	eq
 8008e1e:	2301      	moveq	r3, #1
 8008e20:	2300      	movne	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d09f      	beq.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3740      	adds	r7, #64	; 0x40
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e3c:	b0c0      	sub	sp, #256	; 0x100
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	68d9      	ldr	r1, [r3, #12]
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	ea40 0301 	orr.w	r3, r0, r1
 8008e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e90:	f021 010c 	bic.w	r1, r1, #12
 8008e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb2:	6999      	ldr	r1, [r3, #24]
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	ea40 0301 	orr.w	r3, r0, r1
 8008ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	4b8f      	ldr	r3, [pc, #572]	; (8009104 <UART_SetConfig+0x2cc>)
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d005      	beq.n	8008ed8 <UART_SetConfig+0xa0>
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b8d      	ldr	r3, [pc, #564]	; (8009108 <UART_SetConfig+0x2d0>)
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d104      	bne.n	8008ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7ff f888 	bl	8007fec <HAL_RCC_GetPCLK2Freq>
 8008edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ee0:	e003      	b.n	8008eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ee2:	f7ff f86f 	bl	8007fc4 <HAL_RCC_GetPCLK1Freq>
 8008ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	f040 810c 	bne.w	8009110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	1891      	adds	r1, r2, r2
 8008f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f12:	415b      	adcs	r3, r3
 8008f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	eb12 0801 	adds.w	r8, r2, r1
 8008f20:	4629      	mov	r1, r5
 8008f22:	eb43 0901 	adc.w	r9, r3, r1
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	4699      	mov	r9, r3
 8008f3e:	4623      	mov	r3, r4
 8008f40:	eb18 0303 	adds.w	r3, r8, r3
 8008f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f48:	462b      	mov	r3, r5
 8008f4a:	eb49 0303 	adc.w	r3, r9, r3
 8008f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f66:	460b      	mov	r3, r1
 8008f68:	18db      	adds	r3, r3, r3
 8008f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	eb42 0303 	adc.w	r3, r2, r3
 8008f72:	657b      	str	r3, [r7, #84]	; 0x54
 8008f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f7c:	f7f7 f980 	bl	8000280 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4b61      	ldr	r3, [pc, #388]	; (800910c <UART_SetConfig+0x2d4>)
 8008f86:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	011c      	lsls	r4, r3, #4
 8008f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	1891      	adds	r1, r2, r2
 8008fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fa8:	415b      	adcs	r3, r3
 8008faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fd0:	4692      	mov	sl, r2
 8008fd2:	469b      	mov	fp, r3
 8008fd4:	4643      	mov	r3, r8
 8008fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8008fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8008fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	18db      	adds	r3, r3, r3
 8009000:	643b      	str	r3, [r7, #64]	; 0x40
 8009002:	4613      	mov	r3, r2
 8009004:	eb42 0303 	adc.w	r3, r2, r3
 8009008:	647b      	str	r3, [r7, #68]	; 0x44
 800900a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800900e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009012:	f7f7 f935 	bl	8000280 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4611      	mov	r1, r2
 800901c:	4b3b      	ldr	r3, [pc, #236]	; (800910c <UART_SetConfig+0x2d4>)
 800901e:	fba3 2301 	umull	r2, r3, r3, r1
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	2264      	movs	r2, #100	; 0x64
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	1acb      	subs	r3, r1, r3
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009032:	4b36      	ldr	r3, [pc, #216]	; (800910c <UART_SetConfig+0x2d4>)
 8009034:	fba3 2302 	umull	r2, r3, r3, r2
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009040:	441c      	add	r4, r3
 8009042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009046:	2200      	movs	r2, #0
 8009048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800904c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	1891      	adds	r1, r2, r2
 800905a:	63b9      	str	r1, [r7, #56]	; 0x38
 800905c:	415b      	adcs	r3, r3
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009064:	4641      	mov	r1, r8
 8009066:	1851      	adds	r1, r2, r1
 8009068:	6339      	str	r1, [r7, #48]	; 0x30
 800906a:	4649      	mov	r1, r9
 800906c:	414b      	adcs	r3, r1
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
 8009070:	f04f 0200 	mov.w	r2, #0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800907c:	4659      	mov	r1, fp
 800907e:	00cb      	lsls	r3, r1, #3
 8009080:	4651      	mov	r1, sl
 8009082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009086:	4651      	mov	r1, sl
 8009088:	00ca      	lsls	r2, r1, #3
 800908a:	4610      	mov	r0, r2
 800908c:	4619      	mov	r1, r3
 800908e:	4603      	mov	r3, r0
 8009090:	4642      	mov	r2, r8
 8009092:	189b      	adds	r3, r3, r2
 8009094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009098:	464b      	mov	r3, r9
 800909a:	460a      	mov	r2, r1
 800909c:	eb42 0303 	adc.w	r3, r2, r3
 80090a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090b8:	460b      	mov	r3, r1
 80090ba:	18db      	adds	r3, r3, r3
 80090bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80090be:	4613      	mov	r3, r2
 80090c0:	eb42 0303 	adc.w	r3, r2, r3
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090ce:	f7f7 f8d7 	bl	8000280 <__aeabi_uldivmod>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4b0d      	ldr	r3, [pc, #52]	; (800910c <UART_SetConfig+0x2d4>)
 80090d8:	fba3 1302 	umull	r1, r3, r3, r2
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	2164      	movs	r1, #100	; 0x64
 80090e0:	fb01 f303 	mul.w	r3, r1, r3
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	3332      	adds	r3, #50	; 0x32
 80090ea:	4a08      	ldr	r2, [pc, #32]	; (800910c <UART_SetConfig+0x2d4>)
 80090ec:	fba2 2303 	umull	r2, r3, r2, r3
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	f003 0207 	and.w	r2, r3, #7
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4422      	add	r2, r4
 80090fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009100:	e105      	b.n	800930e <UART_SetConfig+0x4d6>
 8009102:	bf00      	nop
 8009104:	40011000 	.word	0x40011000
 8009108:	40011400 	.word	0x40011400
 800910c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009114:	2200      	movs	r2, #0
 8009116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800911a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800911e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009122:	4642      	mov	r2, r8
 8009124:	464b      	mov	r3, r9
 8009126:	1891      	adds	r1, r2, r2
 8009128:	6239      	str	r1, [r7, #32]
 800912a:	415b      	adcs	r3, r3
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
 800912e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009132:	4641      	mov	r1, r8
 8009134:	1854      	adds	r4, r2, r1
 8009136:	4649      	mov	r1, r9
 8009138:	eb43 0501 	adc.w	r5, r3, r1
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	00eb      	lsls	r3, r5, #3
 8009146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800914a:	00e2      	lsls	r2, r4, #3
 800914c:	4614      	mov	r4, r2
 800914e:	461d      	mov	r5, r3
 8009150:	4643      	mov	r3, r8
 8009152:	18e3      	adds	r3, r4, r3
 8009154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009158:	464b      	mov	r3, r9
 800915a:	eb45 0303 	adc.w	r3, r5, r3
 800915e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800916e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	f04f 0300 	mov.w	r3, #0
 800917a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800917e:	4629      	mov	r1, r5
 8009180:	008b      	lsls	r3, r1, #2
 8009182:	4621      	mov	r1, r4
 8009184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009188:	4621      	mov	r1, r4
 800918a:	008a      	lsls	r2, r1, #2
 800918c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009190:	f7f7 f876 	bl	8000280 <__aeabi_uldivmod>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4b60      	ldr	r3, [pc, #384]	; (800931c <UART_SetConfig+0x4e4>)
 800919a:	fba3 2302 	umull	r2, r3, r3, r2
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	011c      	lsls	r4, r3, #4
 80091a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091b4:	4642      	mov	r2, r8
 80091b6:	464b      	mov	r3, r9
 80091b8:	1891      	adds	r1, r2, r2
 80091ba:	61b9      	str	r1, [r7, #24]
 80091bc:	415b      	adcs	r3, r3
 80091be:	61fb      	str	r3, [r7, #28]
 80091c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091c4:	4641      	mov	r1, r8
 80091c6:	1851      	adds	r1, r2, r1
 80091c8:	6139      	str	r1, [r7, #16]
 80091ca:	4649      	mov	r1, r9
 80091cc:	414b      	adcs	r3, r1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091dc:	4659      	mov	r1, fp
 80091de:	00cb      	lsls	r3, r1, #3
 80091e0:	4651      	mov	r1, sl
 80091e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e6:	4651      	mov	r1, sl
 80091e8:	00ca      	lsls	r2, r1, #3
 80091ea:	4610      	mov	r0, r2
 80091ec:	4619      	mov	r1, r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	4642      	mov	r2, r8
 80091f2:	189b      	adds	r3, r3, r2
 80091f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091f8:	464b      	mov	r3, r9
 80091fa:	460a      	mov	r2, r1
 80091fc:	eb42 0303 	adc.w	r3, r2, r3
 8009200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	67bb      	str	r3, [r7, #120]	; 0x78
 800920e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800921c:	4649      	mov	r1, r9
 800921e:	008b      	lsls	r3, r1, #2
 8009220:	4641      	mov	r1, r8
 8009222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009226:	4641      	mov	r1, r8
 8009228:	008a      	lsls	r2, r1, #2
 800922a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800922e:	f7f7 f827 	bl	8000280 <__aeabi_uldivmod>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4b39      	ldr	r3, [pc, #228]	; (800931c <UART_SetConfig+0x4e4>)
 8009238:	fba3 1302 	umull	r1, r3, r3, r2
 800923c:	095b      	lsrs	r3, r3, #5
 800923e:	2164      	movs	r1, #100	; 0x64
 8009240:	fb01 f303 	mul.w	r3, r1, r3
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	3332      	adds	r3, #50	; 0x32
 800924a:	4a34      	ldr	r2, [pc, #208]	; (800931c <UART_SetConfig+0x4e4>)
 800924c:	fba2 2303 	umull	r2, r3, r2, r3
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009256:	441c      	add	r4, r3
 8009258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800925c:	2200      	movs	r2, #0
 800925e:	673b      	str	r3, [r7, #112]	; 0x70
 8009260:	677a      	str	r2, [r7, #116]	; 0x74
 8009262:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009266:	4642      	mov	r2, r8
 8009268:	464b      	mov	r3, r9
 800926a:	1891      	adds	r1, r2, r2
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	415b      	adcs	r3, r3
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009276:	4641      	mov	r1, r8
 8009278:	1851      	adds	r1, r2, r1
 800927a:	6039      	str	r1, [r7, #0]
 800927c:	4649      	mov	r1, r9
 800927e:	414b      	adcs	r3, r1
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800928e:	4659      	mov	r1, fp
 8009290:	00cb      	lsls	r3, r1, #3
 8009292:	4651      	mov	r1, sl
 8009294:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009298:	4651      	mov	r1, sl
 800929a:	00ca      	lsls	r2, r1, #3
 800929c:	4610      	mov	r0, r2
 800929e:	4619      	mov	r1, r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	4642      	mov	r2, r8
 80092a4:	189b      	adds	r3, r3, r2
 80092a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80092a8:	464b      	mov	r3, r9
 80092aa:	460a      	mov	r2, r1
 80092ac:	eb42 0303 	adc.w	r3, r2, r3
 80092b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	663b      	str	r3, [r7, #96]	; 0x60
 80092bc:	667a      	str	r2, [r7, #100]	; 0x64
 80092be:	f04f 0200 	mov.w	r2, #0
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80092ca:	4649      	mov	r1, r9
 80092cc:	008b      	lsls	r3, r1, #2
 80092ce:	4641      	mov	r1, r8
 80092d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092d4:	4641      	mov	r1, r8
 80092d6:	008a      	lsls	r2, r1, #2
 80092d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80092dc:	f7f6 ffd0 	bl	8000280 <__aeabi_uldivmod>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <UART_SetConfig+0x4e4>)
 80092e6:	fba3 1302 	umull	r1, r3, r3, r2
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	2164      	movs	r1, #100	; 0x64
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	3332      	adds	r3, #50	; 0x32
 80092f8:	4a08      	ldr	r2, [pc, #32]	; (800931c <UART_SetConfig+0x4e4>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	f003 020f 	and.w	r2, r3, #15
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4422      	add	r2, r4
 800930c:	609a      	str	r2, [r3, #8]
}
 800930e:	bf00      	nop
 8009310:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009314:	46bd      	mov	sp, r7
 8009316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800931a:	bf00      	nop
 800931c:	51eb851f 	.word	0x51eb851f

08009320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009320:	b084      	sub	sp, #16
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	f107 001c 	add.w	r0, r7, #28
 800932e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	2b01      	cmp	r3, #1
 8009336:	d122      	bne.n	800937e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800934c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009362:	2b01      	cmp	r3, #1
 8009364:	d105      	bne.n	8009372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9c0 	bl	80096f8 <USB_CoreReset>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	e01a      	b.n	80093b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f9b4 	bl	80096f8 <USB_CoreReset>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	639a      	str	r2, [r3, #56]	; 0x38
 80093a6:	e005      	b.n	80093b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10b      	bne.n	80093d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f043 0206 	orr.w	r2, r3, #6
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f043 0220 	orr.w	r2, r3, #32
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093de:	b004      	add	sp, #16
 80093e0:	4770      	bx	lr

080093e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f043 0201 	orr.w	r2, r3, #1
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f023 0201 	bic.w	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d115      	bne.n	8009474 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009454:	2001      	movs	r0, #1
 8009456:	f7f9 fc8f 	bl	8002d78 <HAL_Delay>
      ms++;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3301      	adds	r3, #1
 800945e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f93a 	bl	80096da <USB_GetMode>
 8009466:	4603      	mov	r3, r0
 8009468:	2b01      	cmp	r3, #1
 800946a:	d01e      	beq.n	80094aa <USB_SetCurrentMode+0x84>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b31      	cmp	r3, #49	; 0x31
 8009470:	d9f0      	bls.n	8009454 <USB_SetCurrentMode+0x2e>
 8009472:	e01a      	b.n	80094aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d115      	bne.n	80094a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009486:	2001      	movs	r0, #1
 8009488:	f7f9 fc76 	bl	8002d78 <HAL_Delay>
      ms++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f921 	bl	80096da <USB_GetMode>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <USB_SetCurrentMode+0x84>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b31      	cmp	r3, #49	; 0x31
 80094a2:	d9f0      	bls.n	8009486 <USB_SetCurrentMode+0x60>
 80094a4:	e001      	b.n	80094aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e005      	b.n	80094b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b32      	cmp	r3, #50	; 0x32
 80094ae:	d101      	bne.n	80094b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4a13      	ldr	r2, [pc, #76]	; (8009524 <USB_FlushTxFifo+0x64>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d901      	bls.n	80094e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e01b      	b.n	8009518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	daf2      	bge.n	80094ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	019b      	lsls	r3, r3, #6
 80094f0:	f043 0220 	orr.w	r2, r3, #32
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a08      	ldr	r2, [pc, #32]	; (8009524 <USB_FlushTxFifo+0x64>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d901      	bls.n	800950a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e006      	b.n	8009518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b20      	cmp	r3, #32
 8009514:	d0f0      	beq.n	80094f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	00030d40 	.word	0x00030d40

08009528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a11      	ldr	r2, [pc, #68]	; (8009584 <USB_FlushRxFifo+0x5c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d901      	bls.n	8009546 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e018      	b.n	8009578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	daf2      	bge.n	8009534 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2210      	movs	r2, #16
 8009556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a08      	ldr	r2, [pc, #32]	; (8009584 <USB_FlushRxFifo+0x5c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d901      	bls.n	800956a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e006      	b.n	8009578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b10      	cmp	r3, #16
 8009574:	d0f0      	beq.n	8009558 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	00030d40 	.word	0x00030d40

08009588 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009588:	b480      	push	{r7}
 800958a:	b089      	sub	sp, #36	; 0x24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4611      	mov	r1, r2
 8009594:	461a      	mov	r2, r3
 8009596:	460b      	mov	r3, r1
 8009598:	71fb      	strb	r3, [r7, #7]
 800959a:	4613      	mov	r3, r2
 800959c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80095a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d123      	bne.n	80095f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095ae:	88bb      	ldrh	r3, [r7, #4]
 80095b0:	3303      	adds	r3, #3
 80095b2:	089b      	lsrs	r3, r3, #2
 80095b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80095b6:	2300      	movs	r3, #0
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	e018      	b.n	80095ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	031a      	lsls	r2, r3, #12
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c8:	461a      	mov	r2, r3
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	3301      	adds	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	3301      	adds	r3, #1
 80095da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	3301      	adds	r3, #1
 80095e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	3301      	adds	r3, #1
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d3e2      	bcc.n	80095bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3724      	adds	r7, #36	; 0x24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009604:	b480      	push	{r7}
 8009606:	b08b      	sub	sp, #44	; 0x2c
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	089b      	lsrs	r3, r3, #2
 800961e:	b29b      	uxth	r3, r3
 8009620:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800962a:	2300      	movs	r3, #0
 800962c:	623b      	str	r3, [r7, #32]
 800962e:	e014      	b.n	800965a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	601a      	str	r2, [r3, #0]
    pDest++;
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	3301      	adds	r3, #1
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	3301      	adds	r3, #1
 8009646:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	3301      	adds	r3, #1
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	3301      	adds	r3, #1
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	3301      	adds	r3, #1
 8009658:	623b      	str	r3, [r7, #32]
 800965a:	6a3a      	ldr	r2, [r7, #32]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	429a      	cmp	r2, r3
 8009660:	d3e6      	bcc.n	8009630 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009662:	8bfb      	ldrh	r3, [r7, #30]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01e      	beq.n	80096a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	461a      	mov	r2, r3
 8009674:	f107 0310 	add.w	r3, r7, #16
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	b2db      	uxtb	r3, r3
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	fa22 f303 	lsr.w	r3, r2, r3
 8009688:	b2da      	uxtb	r2, r3
 800968a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968c:	701a      	strb	r2, [r3, #0]
      i++;
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	3301      	adds	r3, #1
 8009692:	623b      	str	r3, [r7, #32]
      pDest++;
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	3301      	adds	r3, #1
 8009698:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800969a:	8bfb      	ldrh	r3, [r7, #30]
 800969c:	3b01      	subs	r3, #1
 800969e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80096a0:	8bfb      	ldrh	r3, [r7, #30]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1ea      	bne.n	800967c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	372c      	adds	r7, #44	; 0x2c
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	f003 0301 	and.w	r3, r3, #1
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a13      	ldr	r2, [pc, #76]	; (800975c <USB_CoreReset+0x64>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d901      	bls.n	8009716 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009712:	2303      	movs	r3, #3
 8009714:	e01b      	b.n	800974e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	daf2      	bge.n	8009704 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f043 0201 	orr.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <USB_CoreReset+0x64>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d901      	bls.n	8009740 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e006      	b.n	800974e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b01      	cmp	r3, #1
 800974a:	d0f0      	beq.n	800972e <USB_CoreReset+0x36>

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	00030d40 	.word	0x00030d40

08009760 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009760:	b084      	sub	sp, #16
 8009762:	b580      	push	{r7, lr}
 8009764:	b086      	sub	sp, #24
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800976e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009780:	461a      	mov	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d018      	beq.n	80097e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10a      	bne.n	80097d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ca:	f043 0304 	orr.w	r3, r3, #4
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	e014      	b.n	80097fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097e0:	f023 0304 	bic.w	r3, r3, #4
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	e009      	b.n	80097fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097f6:	f023 0304 	bic.w	r3, r3, #4
 80097fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097fc:	2110      	movs	r1, #16
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff fe5e 	bl	80094c0 <USB_FlushTxFifo>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff fe8a 	bl	8009528 <USB_FlushRxFifo>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	e015      	b.n	8009850 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009830:	461a      	mov	r2, r3
 8009832:	f04f 33ff 	mov.w	r3, #4294967295
 8009836:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009844:	461a      	mov	r2, r3
 8009846:	2300      	movs	r3, #0
 8009848:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	3301      	adds	r3, #1
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	429a      	cmp	r2, r3
 8009856:	d3e5      	bcc.n	8009824 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009878:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a13      	ldr	r2, [pc, #76]	; (80098cc <USB_HostInit+0x16c>)
 800987e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a13      	ldr	r2, [pc, #76]	; (80098d0 <USB_HostInit+0x170>)
 8009884:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009888:	e009      	b.n	800989e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2280      	movs	r2, #128	; 0x80
 800988e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a10      	ldr	r2, [pc, #64]	; (80098d4 <USB_HostInit+0x174>)
 8009894:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a0f      	ldr	r2, [pc, #60]	; (80098d8 <USB_HostInit+0x178>)
 800989a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d105      	bne.n	80098b0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	f043 0210 	orr.w	r2, r3, #16
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <USB_HostInit+0x17c>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098c8:	b004      	add	sp, #16
 80098ca:	4770      	bx	lr
 80098cc:	01000200 	.word	0x01000200
 80098d0:	00e00300 	.word	0x00e00300
 80098d4:	00600080 	.word	0x00600080
 80098d8:	004000e0 	.word	0x004000e0
 80098dc:	a3200008 	.word	0xa3200008

080098e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009918:	4313      	orrs	r3, r2
 800991a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d107      	bne.n	8009932 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009928:	461a      	mov	r2, r3
 800992a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800992e:	6053      	str	r3, [r2, #4]
 8009930:	e009      	b.n	8009946 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d106      	bne.n	8009946 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800993e:	461a      	mov	r2, r3
 8009940:	f241 7370 	movw	r3, #6000	; 0x1770
 8009944:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009974:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800997e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009982:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009984:	2064      	movs	r0, #100	; 0x64
 8009986:	f7f9 f9f7 	bl	8002d78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009996:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009998:	200a      	movs	r0, #10
 800999a:	f7f9 f9ed 	bl	8002d78 <HAL_Delay>

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d109      	bne.n	80099ec <USB_DriveVbus+0x44>
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d106      	bne.n	80099ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f6:	d109      	bne.n	8009a0c <USB_DriveVbus+0x64>
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	0c5b      	lsrs	r3, r3, #17
 8009a38:	f003 0303 	and.w	r3, r3, #3
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	b29b      	uxth	r3, r3
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
	...

08009a6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	70fb      	strb	r3, [r7, #3]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70bb      	strb	r3, [r7, #2]
 8009a82:	4613      	mov	r3, r2
 8009a84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d87e      	bhi.n	8009ba8 <USB_HC_Init+0x13c>
 8009aaa:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USB_HC_Init+0x44>)
 8009aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009b6b 	.word	0x08009b6b
 8009ab8:	08009ac1 	.word	0x08009ac1
 8009abc:	08009b2d 	.word	0x08009b2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009acc:	461a      	mov	r2, r3
 8009ace:	f240 439d 	movw	r3, #1181	; 0x49d
 8009ad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	da10      	bge.n	8009afe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	78fa      	ldrb	r2, [r7, #3]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009afa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009afc:	e057      	b.n	8009bae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d051      	beq.n	8009bae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	0151      	lsls	r1, r2, #5
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	440a      	add	r2, r1
 8009b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009b28:	60d3      	str	r3, [r2, #12]
      break;
 8009b2a:	e040      	b.n	8009bae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b38:	461a      	mov	r2, r3
 8009b3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8009b3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da34      	bge.n	8009bb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b68:	e023      	b.n	8009bb2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b76:	461a      	mov	r2, r3
 8009b78:	f240 2325 	movw	r3, #549	; 0x225
 8009b7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da17      	bge.n	8009bb6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ba0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009ba4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ba6:	e006      	b.n	8009bb6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	77fb      	strb	r3, [r7, #31]
      break;
 8009bac:	e004      	b.n	8009bb8 <USB_HC_Init+0x14c>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e002      	b.n	8009bb8 <USB_HC_Init+0x14c>
      break;
 8009bb2:	bf00      	nop
 8009bb4:	e000      	b.n	8009bb8 <USB_HC_Init+0x14c>
      break;
 8009bb6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	78fa      	ldrb	r2, [r7, #3]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bd2:	f043 0302 	orr.w	r3, r3, #2
 8009bd6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	f003 030f 	and.w	r3, r3, #15
 8009be6:	2101      	movs	r1, #1
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	6939      	ldr	r1, [r7, #16]
 8009bee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009c02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da03      	bge.n	8009c12 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	e001      	b.n	8009c16 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff feff 	bl	8009a1a <USB_GetHostSpeed>
 8009c1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d106      	bne.n	8009c34 <USB_HC_Init+0x1c8>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d003      	beq.n	8009c34 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c30:	617b      	str	r3, [r7, #20]
 8009c32:	e001      	b.n	8009c38 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c38:	787b      	ldrb	r3, [r7, #1]
 8009c3a:	059b      	lsls	r3, r3, #22
 8009c3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c40:	78bb      	ldrb	r3, [r7, #2]
 8009c42:	02db      	lsls	r3, r3, #11
 8009c44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c4e:	049b      	lsls	r3, r3, #18
 8009c50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	0159      	lsls	r1, r3, #5
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	440b      	add	r3, r1
 8009c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c74:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009c76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d003      	beq.n	8009c86 <USB_HC_Init+0x21a>
 8009c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d10f      	bne.n	8009ca6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	015a      	lsls	r2, r3, #5
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	0151      	lsls	r1, r2, #5
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	440a      	add	r2, r1
 8009c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ca4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009ca6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3720      	adds	r7, #32
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ccc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d02d      	beq.n	8009d36 <USB_HC_StartXfer+0x86>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d129      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d117      	bne.n	8009d18 <USB_HC_StartXfer+0x68>
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	79db      	ldrb	r3, [r3, #7]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <USB_HC_StartXfer+0x48>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	79db      	ldrb	r3, [r3, #7]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d10f      	bne.n	8009d18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	0151      	lsls	r1, r2, #5
 8009d0a:	6a3a      	ldr	r2, [r7, #32]
 8009d0c:	440a      	add	r2, r1
 8009d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10b      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	795b      	ldrb	r3, [r3, #5]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d107      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fa0f 	bl	800a150 <USB_DoPing>
      return HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e0f8      	b.n	8009f28 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	8912      	ldrh	r2, [r2, #8]
 8009d46:	4413      	add	r3, r2
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	8912      	ldrh	r2, [r2, #8]
 8009d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009d54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d56:	8b7b      	ldrh	r3, [r7, #26]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d90b      	bls.n	8009d74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009d5c:	8b7b      	ldrh	r3, [r7, #26]
 8009d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	8912      	ldrh	r2, [r2, #8]
 8009d66:	fb03 f202 	mul.w	r2, r3, r2
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	611a      	str	r2, [r3, #16]
 8009d6e:	e001      	b.n	8009d74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009d70:	2301      	movs	r3, #1
 8009d72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	78db      	ldrb	r3, [r3, #3]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d007      	beq.n	8009d8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	8912      	ldrh	r2, [r2, #8]
 8009d82:	fb03 f202 	mul.w	r2, r3, r2
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	611a      	str	r2, [r3, #16]
 8009d8a:	e003      	b.n	8009d94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	695a      	ldr	r2, [r3, #20]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009d9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d9e:	04d9      	lsls	r1, r3, #19
 8009da0:	4b63      	ldr	r3, [pc, #396]	; (8009f30 <USB_HC_StartXfer+0x280>)
 8009da2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009da4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	7a9b      	ldrb	r3, [r3, #10]
 8009daa:	075b      	lsls	r3, r3, #29
 8009dac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009db0:	69f9      	ldr	r1, [r7, #28]
 8009db2:	0148      	lsls	r0, r1, #5
 8009db4:	6a39      	ldr	r1, [r7, #32]
 8009db6:	4401      	add	r1, r0
 8009db8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009dbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009dbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	68d9      	ldr	r1, [r3, #12]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd6:	460a      	mov	r2, r1
 8009dd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bf0c      	ite	eq
 8009dea:	2301      	moveq	r3, #1
 8009dec:	2300      	movne	r3, #0
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	6a3a      	ldr	r2, [r7, #32]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	7e7b      	ldrb	r3, [r7, #25]
 8009e22:	075b      	lsls	r3, r3, #29
 8009e24:	69f9      	ldr	r1, [r7, #28]
 8009e26:	0148      	lsls	r0, r1, #5
 8009e28:	6a39      	ldr	r1, [r7, #32]
 8009e2a:	4401      	add	r1, r0
 8009e2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009e30:	4313      	orrs	r3, r2
 8009e32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e4a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	78db      	ldrb	r3, [r3, #3]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	e003      	b.n	8009e66 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e64:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e6c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e04e      	b.n	8009f28 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	78db      	ldrb	r3, [r3, #3]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d149      	bne.n	8009f26 <USB_HC_StartXfer+0x276>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d045      	beq.n	8009f26 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	79db      	ldrb	r3, [r3, #7]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	d830      	bhi.n	8009f04 <USB_HC_StartXfer+0x254>
 8009ea2:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <USB_HC_StartXfer+0x1f8>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009eb9 	.word	0x08009eb9
 8009eac:	08009edd 	.word	0x08009edd
 8009eb0:	08009eb9 	.word	0x08009eb9
 8009eb4:	08009edd 	.word	0x08009edd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	3303      	adds	r3, #3
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009ec2:	8afa      	ldrh	r2, [r7, #22]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d91c      	bls.n	8009f08 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f043 0220 	orr.w	r2, r3, #32
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	619a      	str	r2, [r3, #24]
        }
        break;
 8009eda:	e015      	b.n	8009f08 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	3303      	adds	r3, #3
 8009ee2:	089b      	lsrs	r3, r3, #2
 8009ee4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009ee6:	8afa      	ldrh	r2, [r7, #22]
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d90a      	bls.n	8009f0c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	619a      	str	r2, [r3, #24]
        }
        break;
 8009f02:	e003      	b.n	8009f0c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009f04:	bf00      	nop
 8009f06:	e002      	b.n	8009f0e <USB_HC_StartXfer+0x25e>
        break;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <USB_HC_StartXfer+0x25e>
        break;
 8009f0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	68d9      	ldr	r1, [r3, #12]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	785a      	ldrb	r2, [r3, #1]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	9000      	str	r0, [sp, #0]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f7ff fb31 	bl	8009588 <USB_WritePacket>
  }

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3728      	adds	r7, #40	; 0x28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	1ff80000 	.word	0x1ff80000

08009f34 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	b29b      	uxth	r3, r3
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b089      	sub	sp, #36	; 0x24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	0c9b      	lsrs	r3, r3, #18
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	0fdb      	lsrs	r3, r3, #31
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 0320 	and.w	r3, r3, #32
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d104      	bne.n	8009fb0 <USB_HC_Halt+0x5a>
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	e0c8      	b.n	800a142 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <USB_HC_Halt+0x66>
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d163      	bne.n	800a084 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	0151      	lsls	r1, r2, #5
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	440a      	add	r2, r1
 8009fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f040 80ab 	bne.w	800a140 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d133      	bne.n	800a05e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a014:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a034:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a042:	d81d      	bhi.n	800a080 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a05a:	d0ec      	beq.n	800a036 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a05c:	e070      	b.n	800a140 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	0151      	lsls	r1, r2, #5
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	440a      	add	r2, r1
 800a074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a07c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a07e:	e05f      	b.n	800a140 <USB_HC_Halt+0x1ea>
            break;
 800a080:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a082:	e05d      	b.n	800a140 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a09e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d133      	bne.n	800a11c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	0151      	lsls	r1, r2, #5
 800a0c6:	69fa      	ldr	r2, [r7, #28]
 800a0c8:	440a      	add	r2, r1
 800a0ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a100:	d81d      	bhi.n	800a13e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a118:	d0ec      	beq.n	800a0f4 <USB_HC_Halt+0x19e>
 800a11a:	e011      	b.n	800a140 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	440a      	add	r2, r1
 800a132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	e000      	b.n	800a140 <USB_HC_Halt+0x1ea>
          break;
 800a13e:	bf00      	nop
    }
  }

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3724      	adds	r7, #36	; 0x24
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a164:	2301      	movs	r3, #1
 800a166:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	04da      	lsls	r2, r3, #19
 800a16c:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <USB_DoPing+0x74>)
 800a16e:	4013      	ands	r3, r2
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	440a      	add	r2, r1
 800a178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a17c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a180:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a198:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	1ff80000 	.word	0x1ff80000

0800a1c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff f911 	bl	8009404 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1e2:	2110      	movs	r1, #16
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff f96b 	bl	80094c0 <USB_FlushTxFifo>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff f997 	bl	8009528 <USB_FlushRxFifo>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a204:	2300      	movs	r3, #0
 800a206:	61bb      	str	r3, [r7, #24]
 800a208:	e01f      	b.n	800a24a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a220:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a228:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a230:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a23e:	461a      	mov	r2, r3
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	3301      	adds	r3, #1
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	2b0f      	cmp	r3, #15
 800a24e:	d9dc      	bls.n	800a20a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a250:	2300      	movs	r3, #0
 800a252:	61bb      	str	r3, [r7, #24]
 800a254:	e034      	b.n	800a2c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a26c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a274:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a27c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	4413      	add	r3, r2
 800a286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a28a:	461a      	mov	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a29c:	d80c      	bhi.n	800a2b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2b4:	d0ec      	beq.n	800a290 <USB_StopHost+0xc8>
 800a2b6:	e000      	b.n	800a2ba <USB_StopHost+0xf2>
        break;
 800a2b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	2b0f      	cmp	r3, #15
 800a2c4:	d9c7      	bls.n	800a256 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff f880 	bl	80093e2 <USB_EnableGlobalInt>

  return ret;
 800a2e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a2f0:	4904      	ldr	r1, [pc, #16]	; (800a304 <MX_FATFS_Init+0x18>)
 800a2f2:	4805      	ldr	r0, [pc, #20]	; (800a308 <MX_FATFS_Init+0x1c>)
 800a2f4:	f006 f8be 	bl	8010474 <FATFS_LinkDriver>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4b03      	ldr	r3, [pc, #12]	; (800a30c <MX_FATFS_Init+0x20>)
 800a2fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a300:	bf00      	nop
 800a302:	bd80      	pop	{r7, pc}
 800a304:	200027f4 	.word	0x200027f4
 800a308:	20000048 	.word	0x20000048
 800a30c:	200027f0 	.word	0x200027f0

0800a310 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a314:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a316:	4618      	mov	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f7 fa7f 	bl	8001830 <SD_disk_initialize>
 800a332:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	4603      	mov	r3, r0
 800a344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7f7 fb57 	bl	80019fc <SD_disk_status>
 800a34e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a368:	7bf8      	ldrb	r0, [r7, #15]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	f7f7 fb5a 	bl	8001a28 <SD_disk_read>
 800a374:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a38e:	7bf8      	ldrb	r0, [r7, #15]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	f7f7 fbb1 	bl	8001afc <SD_disk_write>
 800a39a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	603a      	str	r2, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a3b4:	79b9      	ldrb	r1, [r7, #6]
 800a3b6:	79fb      	ldrb	r3, [r7, #7]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f7 fc22 	bl	8001c04 <SD_disk_ioctl>
 800a3c0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a3ca:	b590      	push	{r4, r7, lr}
 800a3cc:	b089      	sub	sp, #36	; 0x24
 800a3ce:	af04      	add	r7, sp, #16
 800a3d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3d8:	7919      	ldrb	r1, [r3, #4]
 800a3da:	2350      	movs	r3, #80	; 0x50
 800a3dc:	2206      	movs	r2, #6
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 f9a8 	bl	800b734 <USBH_FindInterface>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ea:	2bff      	cmp	r3, #255	; 0xff
 800a3ec:	d002      	beq.n	800a3f4 <USBH_MSC_InterfaceInit+0x2a>
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d901      	bls.n	800a3f8 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e106      	b.n	800a606 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 f97d 	bl	800b6fc <USBH_SelectInterface>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a40c:	2302      	movs	r3, #2
 800a40e:	e0fa      	b.n	800a606 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a416:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a41a:	f006 fc63 	bl	8010ce4 <malloc>
 800a41e:	4603      	mov	r3, r0
 800a420:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a432:	2302      	movs	r3, #2
 800a434:	e0e7      	b.n	800a606 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a43a:	2100      	movs	r1, #0
 800a43c:	68b8      	ldr	r0, [r7, #8]
 800a43e:	f006 fc6f 	bl	8010d20 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	211a      	movs	r1, #26
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	4413      	add	r3, r2
 800a44e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	b25b      	sxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	da16      	bge.n	800a488 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	211a      	movs	r1, #26
 800a460:	fb01 f303 	mul.w	r3, r1, r3
 800a464:	4413      	add	r3, r2
 800a466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	211a      	movs	r1, #26
 800a476:	fb01 f303 	mul.w	r3, r1, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a480:	881a      	ldrh	r2, [r3, #0]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	815a      	strh	r2, [r3, #10]
 800a486:	e015      	b.n	800a4b4 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	211a      	movs	r1, #26
 800a48e:	fb01 f303 	mul.w	r3, r1, r3
 800a492:	4413      	add	r3, r2
 800a494:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	211a      	movs	r1, #26
 800a4a4:	fb01 f303 	mul.w	r3, r1, r3
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a4ae:	881a      	ldrh	r2, [r3, #0]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	211a      	movs	r1, #26
 800a4ba:	fb01 f303 	mul.w	r3, r1, r3
 800a4be:	4413      	add	r3, r2
 800a4c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	da16      	bge.n	800a4fa <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	211a      	movs	r1, #26
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	211a      	movs	r1, #26
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4f2:	881a      	ldrh	r2, [r3, #0]
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	815a      	strh	r2, [r3, #10]
 800a4f8:	e015      	b.n	800a526 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	211a      	movs	r1, #26
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	4413      	add	r3, r2
 800a506:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	211a      	movs	r1, #26
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a520:	881a      	ldrh	r2, [r3, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2200      	movs	r2, #0
 800a530:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	799b      	ldrb	r3, [r3, #6]
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f002 fc13 	bl	800cd6a <USBH_AllocPipe>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	79db      	ldrb	r3, [r3, #7]
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f002 fc09 	bl	800cd6a <USBH_AllocPipe>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fbd7 	bl	800ad14 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	799b      	ldrb	r3, [r3, #6]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d01e      	beq.n	800a5ac <USBH_MSC_InterfaceInit+0x1e2>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	891b      	ldrh	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01a      	beq.n	800a5ac <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	7959      	ldrb	r1, [r3, #5]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	7998      	ldrb	r0, [r3, #6]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	8912      	ldrh	r2, [r2, #8]
 800a58e:	9202      	str	r2, [sp, #8]
 800a590:	2202      	movs	r2, #2
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	4623      	mov	r3, r4
 800a598:	4602      	mov	r2, r0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f002 fbb6 	bl	800cd0c <USBH_OpenPipe>
 800a5a0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	79db      	ldrb	r3, [r3, #7]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d02c      	beq.n	800a604 <USBH_MSC_InterfaceInit+0x23a>
 800a5aa:	e001      	b.n	800a5b0 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e02a      	b.n	800a606 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	895b      	ldrh	r3, [r3, #10]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d025      	beq.n	800a604 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	7919      	ldrb	r1, [r3, #4]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	79d8      	ldrb	r0, [r3, #7]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	8952      	ldrh	r2, [r2, #10]
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	9201      	str	r2, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4623      	mov	r3, r4
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f002 fb95 	bl	800cd0c <USBH_OpenPipe>
 800a5e2:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	791b      	ldrb	r3, [r3, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f006 fa9b 	bl	8010b28 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	795b      	ldrb	r3, [r3, #5]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f006 fa94 	bl	8010b28 <USBH_LL_SetToggle>

  return USBH_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	e000      	b.n	800a606 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a604:	2303      	movs	r3, #3
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd90      	pop	{r4, r7, pc}

0800a60e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	795b      	ldrb	r3, [r3, #5]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00e      	beq.n	800a646 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	795b      	ldrb	r3, [r3, #5]
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f002 fb8b 	bl	800cd4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	795b      	ldrb	r3, [r3, #5]
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f002 fbb6 	bl	800cdac <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	791b      	ldrb	r3, [r3, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00e      	beq.n	800a66c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f002 fb78 	bl	800cd4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f002 fba3 	bl	800cdac <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00b      	beq.n	800a690 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	4618      	mov	r0, r3
 800a682:	f006 fb37 	bl	8010cf4 <free>
    phost->pActiveClass->pData = 0U;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a68c:	2200      	movs	r2, #0
 800a68e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	7b9b      	ldrb	r3, [r3, #14]
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d041      	beq.n	800a73c <USBH_MSC_ClassRequest+0xa2>
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	dc4b      	bgt.n	800a754 <USBH_MSC_ClassRequest+0xba>
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <USBH_MSC_ClassRequest+0x2a>
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d147      	bne.n	800a754 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fb05 	bl	800acd8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	2b03      	cmp	r3, #3
 800a6d6:	d104      	bne.n	800a6e2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d137      	bne.n	800a758 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d804      	bhi.n	800a6fa <USBH_MSC_ClassRequest+0x60>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	e000      	b.n	800a6fc <USBH_MSC_ClassRequest+0x62>
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a700:	2300      	movs	r3, #0
 800a702:	73bb      	strb	r3, [r7, #14]
 800a704:	e014      	b.n	800a730 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	2134      	movs	r1, #52	; 0x34
 800a70c:	fb01 f303 	mul.w	r3, r1, r3
 800a710:	4413      	add	r3, r2
 800a712:	3392      	adds	r3, #146	; 0x92
 800a714:	2202      	movs	r2, #2
 800a716:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	2134      	movs	r1, #52	; 0x34
 800a71e:	fb01 f303 	mul.w	r3, r1, r3
 800a722:	4413      	add	r3, r2
 800a724:	33c1      	adds	r3, #193	; 0xc1
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	3301      	adds	r3, #1
 800a72e:	73bb      	strb	r3, [r7, #14]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	7bba      	ldrb	r2, [r7, #14]
 800a736:	429a      	cmp	r2, r3
 800a738:	d3e5      	bcc.n	800a706 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a73a:	e00d      	b.n	800a758 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a73c:	2100      	movs	r1, #0
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 fdc5 	bl	800c2ce <USBH_ClrFeature>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d108      	bne.n	800a75c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	7bda      	ldrb	r2, [r3, #15]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a752:	e003      	b.n	800a75c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a754:	bf00      	nop
 800a756:	e002      	b.n	800a75e <USBH_MSC_ClassRequest+0xc4>
      break;
 800a758:	bf00      	nop
 800a75a:	e000      	b.n	800a75e <USBH_MSC_ClassRequest+0xc4>
      break;
 800a75c:	bf00      	nop
  }

  return status;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a77a:	2301      	movs	r3, #1
 800a77c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a77e:	2301      	movs	r3, #1
 800a780:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a782:	2301      	movs	r3, #1
 800a784:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	7b1b      	ldrb	r3, [r3, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <USBH_MSC_Process+0x2e>
 800a78e:	2b01      	cmp	r3, #1
 800a790:	f000 8271 	beq.w	800ac76 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a794:	e272      	b.n	800ac7c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	f080 824f 	bcs.w	800ac46 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	2334      	movs	r3, #52	; 0x34
 800a7b4:	fb01 f303 	mul.w	r3, r1, r3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3391      	adds	r3, #145	; 0x91
 800a7bc:	2201      	movs	r2, #1
 800a7be:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	2334      	movs	r3, #52	; 0x34
 800a7cc:	fb01 f303 	mul.w	r3, r1, r3
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3390      	adds	r3, #144	; 0x90
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b08      	cmp	r3, #8
 800a7d8:	f200 8243 	bhi.w	800ac62 <USBH_MSC_Process+0x4fa>
 800a7dc:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <USBH_MSC_Process+0x7c>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800ac63 	.word	0x0800ac63
 800a7ec:	0800a8d1 	.word	0x0800a8d1
 800a7f0:	0800aa55 	.word	0x0800aa55
 800a7f4:	0800a82f 	.word	0x0800a82f
 800a7f8:	0800ab21 	.word	0x0800ab21
 800a7fc:	0800ac63 	.word	0x0800ac63
 800a800:	0800ac63 	.word	0x0800ac63
 800a804:	0800ac35 	.word	0x0800ac35
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a80e:	4619      	mov	r1, r3
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	2334      	movs	r3, #52	; 0x34
 800a814:	fb01 f303 	mul.w	r3, r1, r3
 800a818:	4413      	add	r3, r2
 800a81a:	3390      	adds	r3, #144	; 0x90
 800a81c:	2204      	movs	r2, #4
 800a81e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a82c:	e222      	b.n	800ac74 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a834:	b2d9      	uxtb	r1, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a83c:	461a      	mov	r2, r3
 800a83e:	2334      	movs	r3, #52	; 0x34
 800a840:	fb02 f303 	mul.w	r3, r2, r3
 800a844:	3398      	adds	r3, #152	; 0x98
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	4413      	add	r3, r2
 800a84a:	3307      	adds	r3, #7
 800a84c:	461a      	mov	r2, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fd7e 	bl	800b350 <USBH_MSC_SCSI_Inquiry>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10b      	bne.n	800a876 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a864:	4619      	mov	r1, r3
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	2334      	movs	r3, #52	; 0x34
 800a86a:	fb01 f303 	mul.w	r3, r1, r3
 800a86e:	4413      	add	r3, r2
 800a870:	3390      	adds	r3, #144	; 0x90
 800a872:	2202      	movs	r2, #2
 800a874:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d10c      	bne.n	800a896 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a882:	4619      	mov	r1, r3
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	2334      	movs	r3, #52	; 0x34
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	4413      	add	r3, r2
 800a88e:	3390      	adds	r3, #144	; 0x90
 800a890:	2205      	movs	r2, #5
 800a892:	701a      	strb	r2, [r3, #0]
            break;
 800a894:	e1e7      	b.n	800ac66 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	2b04      	cmp	r3, #4
 800a89a:	f040 81e4 	bne.w	800ac66 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	2334      	movs	r3, #52	; 0x34
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3390      	adds	r3, #144	; 0x90
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8bc:	4619      	mov	r1, r3
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	2334      	movs	r3, #52	; 0x34
 800a8c2:	fb01 f303 	mul.w	r3, r1, r3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	3391      	adds	r3, #145	; 0x91
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	701a      	strb	r2, [r3, #0]
            break;
 800a8ce:	e1ca      	b.n	800ac66 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fc7a 	bl	800b1d4 <USBH_MSC_SCSI_TestUnitReady>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d149      	bne.n	800a97e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	2334      	movs	r3, #52	; 0x34
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	3392      	adds	r3, #146	; 0x92
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00c      	beq.n	800a91e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a90a:	4619      	mov	r1, r3
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	2334      	movs	r3, #52	; 0x34
 800a910:	fb01 f303 	mul.w	r3, r1, r3
 800a914:	4413      	add	r3, r2
 800a916:	33c1      	adds	r3, #193	; 0xc1
 800a918:	2201      	movs	r2, #1
 800a91a:	701a      	strb	r2, [r3, #0]
 800a91c:	e00b      	b.n	800a936 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a924:	4619      	mov	r1, r3
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	2334      	movs	r3, #52	; 0x34
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	4413      	add	r3, r2
 800a930:	33c1      	adds	r3, #193	; 0xc1
 800a932:	2200      	movs	r2, #0
 800a934:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a93c:	4619      	mov	r1, r3
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	2334      	movs	r3, #52	; 0x34
 800a942:	fb01 f303 	mul.w	r3, r1, r3
 800a946:	4413      	add	r3, r2
 800a948:	3390      	adds	r3, #144	; 0x90
 800a94a:	2203      	movs	r2, #3
 800a94c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a954:	4619      	mov	r1, r3
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	2334      	movs	r3, #52	; 0x34
 800a95a:	fb01 f303 	mul.w	r3, r1, r3
 800a95e:	4413      	add	r3, r2
 800a960:	3391      	adds	r3, #145	; 0x91
 800a962:	2200      	movs	r2, #0
 800a964:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a96c:	4619      	mov	r1, r3
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	2334      	movs	r3, #52	; 0x34
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	4413      	add	r3, r2
 800a978:	3392      	adds	r3, #146	; 0x92
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d14a      	bne.n	800aa1a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a98a:	4619      	mov	r1, r3
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	2334      	movs	r3, #52	; 0x34
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	4413      	add	r3, r2
 800a996:	3392      	adds	r3, #146	; 0x92
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d00c      	beq.n	800a9b8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	2334      	movs	r3, #52	; 0x34
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	33c1      	adds	r3, #193	; 0xc1
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e00b      	b.n	800a9d0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9be:	4619      	mov	r1, r3
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	2334      	movs	r3, #52	; 0x34
 800a9c4:	fb01 f303 	mul.w	r3, r1, r3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	33c1      	adds	r3, #193	; 0xc1
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	2334      	movs	r3, #52	; 0x34
 800a9dc:	fb01 f303 	mul.w	r3, r1, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	3390      	adds	r3, #144	; 0x90
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	2334      	movs	r3, #52	; 0x34
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3391      	adds	r3, #145	; 0x91
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa06:	4619      	mov	r1, r3
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	2334      	movs	r3, #52	; 0x34
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	3392      	adds	r3, #146	; 0x92
 800aa14:	2202      	movs	r2, #2
 800aa16:	701a      	strb	r2, [r3, #0]
            break;
 800aa18:	e127      	b.n	800ac6a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	f040 8124 	bne.w	800ac6a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa28:	4619      	mov	r1, r3
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	2334      	movs	r3, #52	; 0x34
 800aa2e:	fb01 f303 	mul.w	r3, r1, r3
 800aa32:	4413      	add	r3, r2
 800aa34:	3390      	adds	r3, #144	; 0x90
 800aa36:	2201      	movs	r2, #1
 800aa38:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa40:	4619      	mov	r1, r3
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	2334      	movs	r3, #52	; 0x34
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	3391      	adds	r3, #145	; 0x91
 800aa4e:	2202      	movs	r2, #2
 800aa50:	701a      	strb	r2, [r3, #0]
            break;
 800aa52:	e10a      	b.n	800ac6a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa5a:	b2d9      	uxtb	r1, r3
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa62:	461a      	mov	r2, r3
 800aa64:	2334      	movs	r3, #52	; 0x34
 800aa66:	fb02 f303 	mul.w	r3, r2, r3
 800aa6a:	3390      	adds	r3, #144	; 0x90
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	4413      	add	r3, r2
 800aa70:	3304      	adds	r3, #4
 800aa72:	461a      	mov	r2, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fbf0 	bl	800b25a <USBH_MSC_SCSI_ReadCapacity>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d120      	bne.n	800aac6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	2334      	movs	r3, #52	; 0x34
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	4413      	add	r3, r2
 800aa96:	3390      	adds	r3, #144	; 0x90
 800aa98:	2201      	movs	r2, #1
 800aa9a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	2334      	movs	r3, #52	; 0x34
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	4413      	add	r3, r2
 800aaae:	3391      	adds	r3, #145	; 0x91
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaba:	3301      	adds	r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aac4:	e0d3      	b.n	800ac6e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d10c      	bne.n	800aae6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aad2:	4619      	mov	r1, r3
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	2334      	movs	r3, #52	; 0x34
 800aad8:	fb01 f303 	mul.w	r3, r1, r3
 800aadc:	4413      	add	r3, r2
 800aade:	3390      	adds	r3, #144	; 0x90
 800aae0:	2205      	movs	r2, #5
 800aae2:	701a      	strb	r2, [r3, #0]
            break;
 800aae4:	e0c3      	b.n	800ac6e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	f040 80c0 	bne.w	800ac6e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	2334      	movs	r3, #52	; 0x34
 800aafa:	fb01 f303 	mul.w	r3, r1, r3
 800aafe:	4413      	add	r3, r2
 800ab00:	3390      	adds	r3, #144	; 0x90
 800ab02:	2201      	movs	r2, #1
 800ab04:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	2334      	movs	r3, #52	; 0x34
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	3391      	adds	r3, #145	; 0x91
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	701a      	strb	r2, [r3, #0]
            break;
 800ab1e:	e0a6      	b.n	800ac6e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab26:	b2d9      	uxtb	r1, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab2e:	461a      	mov	r2, r3
 800ab30:	2334      	movs	r3, #52	; 0x34
 800ab32:	fb02 f303 	mul.w	r3, r2, r3
 800ab36:	3398      	adds	r3, #152	; 0x98
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fcaa 	bl	800b49a <USBH_MSC_SCSI_RequestSense>
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d145      	bne.n	800abdc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab56:	4619      	mov	r1, r3
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	2334      	movs	r3, #52	; 0x34
 800ab5c:	fb01 f303 	mul.w	r3, r1, r3
 800ab60:	4413      	add	r3, r2
 800ab62:	339c      	adds	r3, #156	; 0x9c
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	2b06      	cmp	r3, #6
 800ab68:	d00c      	beq.n	800ab84 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab70:	4619      	mov	r1, r3
 800ab72:	693a      	ldr	r2, [r7, #16]
 800ab74:	2334      	movs	r3, #52	; 0x34
 800ab76:	fb01 f303 	mul.w	r3, r1, r3
 800ab7a:	4413      	add	r3, r2
 800ab7c:	339c      	adds	r3, #156	; 0x9c
 800ab7e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d117      	bne.n	800abb4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d80c      	bhi.n	800abb4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aba0:	4619      	mov	r1, r3
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	2334      	movs	r3, #52	; 0x34
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	4413      	add	r3, r2
 800abac:	3390      	adds	r3, #144	; 0x90
 800abae:	2202      	movs	r2, #2
 800abb0:	701a      	strb	r2, [r3, #0]
                  break;
 800abb2:	e05f      	b.n	800ac74 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abba:	4619      	mov	r1, r3
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	2334      	movs	r3, #52	; 0x34
 800abc0:	fb01 f303 	mul.w	r3, r1, r3
 800abc4:	4413      	add	r3, r2
 800abc6:	3390      	adds	r3, #144	; 0x90
 800abc8:	2201      	movs	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abd2:	3301      	adds	r3, #1
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d10c      	bne.n	800abfc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abe8:	4619      	mov	r1, r3
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	2334      	movs	r3, #52	; 0x34
 800abee:	fb01 f303 	mul.w	r3, r1, r3
 800abf2:	4413      	add	r3, r2
 800abf4:	3390      	adds	r3, #144	; 0x90
 800abf6:	2208      	movs	r2, #8
 800abf8:	701a      	strb	r2, [r3, #0]
            break;
 800abfa:	e03a      	b.n	800ac72 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d137      	bne.n	800ac72 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac08:	4619      	mov	r1, r3
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	2334      	movs	r3, #52	; 0x34
 800ac0e:	fb01 f303 	mul.w	r3, r1, r3
 800ac12:	4413      	add	r3, r2
 800ac14:	3390      	adds	r3, #144	; 0x90
 800ac16:	2201      	movs	r2, #1
 800ac18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac20:	4619      	mov	r1, r3
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	2334      	movs	r3, #52	; 0x34
 800ac26:	fb01 f303 	mul.w	r3, r1, r3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3391      	adds	r3, #145	; 0x91
 800ac2e:	2202      	movs	r2, #2
 800ac30:	701a      	strb	r2, [r3, #0]
            break;
 800ac32:	e01e      	b.n	800ac72 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ac44:	e016      	b.n	800ac74 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2201      	movs	r2, #1
 800ac52:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac5a:	2102      	movs	r1, #2
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
      break;
 800ac60:	e00c      	b.n	800ac7c <USBH_MSC_Process+0x514>
            break;
 800ac62:	bf00      	nop
 800ac64:	e00a      	b.n	800ac7c <USBH_MSC_Process+0x514>
            break;
 800ac66:	bf00      	nop
 800ac68:	e008      	b.n	800ac7c <USBH_MSC_Process+0x514>
            break;
 800ac6a:	bf00      	nop
 800ac6c:	e006      	b.n	800ac7c <USBH_MSC_Process+0x514>
            break;
 800ac6e:	bf00      	nop
 800ac70:	e004      	b.n	800ac7c <USBH_MSC_Process+0x514>
            break;
 800ac72:	bf00      	nop
      break;
 800ac74:	e002      	b.n	800ac7c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7a:	bf00      	nop
  }
  return error;
 800ac7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2221      	movs	r2, #33	; 0x21
 800acaa:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	22ff      	movs	r2, #255	; 0xff
 800acb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800acc4:	2200      	movs	r2, #0
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 fdcd 	bl	800c868 <USBH_CtlReq>
 800acce:	4603      	mov	r3, r0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	22a1      	movs	r2, #161	; 0xa1
 800ace6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	22fe      	movs	r2, #254	; 0xfe
 800acec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800ad00:	2201      	movs	r2, #1
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fdaf 	bl	800c868 <USBH_CtlReq>
 800ad0a:	4603      	mov	r3, r0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4a09      	ldr	r2, [pc, #36]	; (800ad50 <USBH_MSC_BOT_Init+0x3c>)
 800ad2a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4a09      	ldr	r2, [pc, #36]	; (800ad54 <USBH_MSC_BOT_Init+0x40>)
 800ad30:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	43425355 	.word	0x43425355
 800ad54:	20304050 	.word	0x20304050

0800ad58 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ad64:	2301      	movs	r3, #1
 800ad66:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	2b0a      	cmp	r3, #10
 800ad8c:	f200 819e 	bhi.w	800b0cc <USBH_MSC_BOT_Process+0x374>
 800ad90:	a201      	add	r2, pc, #4	; (adr r2, 800ad98 <USBH_MSC_BOT_Process+0x40>)
 800ad92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad96:	bf00      	nop
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	0800aded 	.word	0x0800aded
 800ada0:	0800ae57 	.word	0x0800ae57
 800ada4:	0800ae75 	.word	0x0800ae75
 800ada8:	0800aef9 	.word	0x0800aef9
 800adac:	0800af1b 	.word	0x0800af1b
 800adb0:	0800afb3 	.word	0x0800afb3
 800adb4:	0800afcf 	.word	0x0800afcf
 800adb8:	0800b021 	.word	0x0800b021
 800adbc:	0800b051 	.word	0x0800b051
 800adc0:	0800b0b3 	.word	0x0800b0b3
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	795b      	ldrb	r3, [r3, #5]
 800adde:	2201      	movs	r2, #1
 800ade0:	9200      	str	r2, [sp, #0]
 800ade2:	221f      	movs	r2, #31
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 ff4e 	bl	800cc86 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800adea:	e17e      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	795b      	ldrb	r3, [r3, #5]
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f005 fe6e 	bl	8010ad4 <USBH_LL_GetURBState>
 800adf8:	4603      	mov	r3, r0
 800adfa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800adfc:	7d3b      	ldrb	r3, [r7, #20]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d118      	bne.n	800ae34 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ae10:	b25b      	sxtb	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da04      	bge.n	800ae20 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2203      	movs	r2, #3
 800ae1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae1e:	e157      	b.n	800b0d0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2205      	movs	r2, #5
 800ae24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae28:	e152      	b.n	800b0d0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae32:	e14d      	b.n	800b0d0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae34:	7d3b      	ldrb	r3, [r7, #20]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d104      	bne.n	800ae44 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae42:	e145      	b.n	800b0d0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ae44:	7d3b      	ldrb	r3, [r7, #20]
 800ae46:	2b05      	cmp	r3, #5
 800ae48:	f040 8142 	bne.w	800b0d0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	220a      	movs	r2, #10
 800ae50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae54:	e13c      	b.n	800b0d0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	895a      	ldrh	r2, [r3, #10]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	791b      	ldrb	r3, [r3, #4]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 ff33 	bl	800ccd0 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800ae72:	e13a      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	791b      	ldrb	r3, [r3, #4]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f005 fe2a 	bl	8010ad4 <USBH_LL_GetURBState>
 800ae80:	4603      	mov	r3, r0
 800ae82:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ae84:	7d3b      	ldrb	r3, [r7, #20]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d12d      	bne.n	800aee6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	8952      	ldrh	r2, [r2, #10]
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d910      	bls.n	800aeb8 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	8952      	ldrh	r2, [r2, #10]
 800aea0:	441a      	add	r2, r3
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	8952      	ldrh	r2, [r2, #10]
 800aeb0:	1a9a      	subs	r2, r3, r2
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	65da      	str	r2, [r3, #92]	; 0x5c
 800aeb6:	e002      	b.n	800aebe <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2200      	movs	r2, #0
 800aebc:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	895a      	ldrh	r2, [r3, #10]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	791b      	ldrb	r3, [r3, #4]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fefb 	bl	800ccd0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800aeda:	e0fb      	b.n	800b0d4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2207      	movs	r2, #7
 800aee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aee4:	e0f6      	b.n	800b0d4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800aee6:	7d3b      	ldrb	r3, [r7, #20]
 800aee8:	2b05      	cmp	r3, #5
 800aeea:	f040 80f3 	bne.w	800b0d4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2209      	movs	r2, #9
 800aef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aef6:	e0ed      	b.n	800b0d4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	891a      	ldrh	r2, [r3, #8]
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	795b      	ldrb	r3, [r3, #5]
 800af06:	2001      	movs	r0, #1
 800af08:	9000      	str	r0, [sp, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 febb 	bl	800cc86 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	2206      	movs	r2, #6
 800af14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af18:	e0e7      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	795b      	ldrb	r3, [r3, #5]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f005 fdd7 	bl	8010ad4 <USBH_LL_GetURBState>
 800af26:	4603      	mov	r3, r0
 800af28:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800af2a:	7d3b      	ldrb	r3, [r7, #20]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d12f      	bne.n	800af90 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	8912      	ldrh	r2, [r2, #8]
 800af38:	4293      	cmp	r3, r2
 800af3a:	d910      	bls.n	800af5e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	8912      	ldrh	r2, [r2, #8]
 800af46:	441a      	add	r2, r3
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	8912      	ldrh	r2, [r2, #8]
 800af56:	1a9a      	subs	r2, r3, r2
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	65da      	str	r2, [r3, #92]	; 0x5c
 800af5c:	e002      	b.n	800af64 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2200      	movs	r2, #0
 800af62:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00c      	beq.n	800af86 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	891a      	ldrh	r2, [r3, #8]
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	795b      	ldrb	r3, [r3, #5]
 800af7a:	2001      	movs	r0, #1
 800af7c:	9000      	str	r0, [sp, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 fe81 	bl	800cc86 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800af84:	e0a8      	b.n	800b0d8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2207      	movs	r2, #7
 800af8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af8e:	e0a3      	b.n	800b0d8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af90:	7d3b      	ldrb	r3, [r7, #20]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d104      	bne.n	800afa0 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2205      	movs	r2, #5
 800af9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800af9e:	e09b      	b.n	800b0d8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800afa0:	7d3b      	ldrb	r3, [r7, #20]
 800afa2:	2b05      	cmp	r3, #5
 800afa4:	f040 8098 	bne.w	800b0d8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	220a      	movs	r2, #10
 800afac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afb0:	e092      	b.n	800b0d8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	791b      	ldrb	r3, [r3, #4]
 800afbc:	220d      	movs	r2, #13
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f001 fe86 	bl	800ccd0 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2208      	movs	r2, #8
 800afc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800afcc:	e08d      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	791b      	ldrb	r3, [r3, #4]
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f005 fd7d 	bl	8010ad4 <USBH_LL_GetURBState>
 800afda:	4603      	mov	r3, r0
 800afdc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800afde:	7d3b      	ldrb	r3, [r7, #20]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d115      	bne.n	800b010 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f8a9 	bl	800b14c <USBH_MSC_DecodeCSW>
 800affa:	4603      	mov	r3, r0
 800affc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800affe:	7d7b      	ldrb	r3, [r7, #21]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d102      	bne.n	800b00a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b008:	e068      	b.n	800b0dc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b00a:	2302      	movs	r3, #2
 800b00c:	75fb      	strb	r3, [r7, #23]
      break;
 800b00e:	e065      	b.n	800b0dc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b010:	7d3b      	ldrb	r3, [r7, #20]
 800b012:	2b05      	cmp	r3, #5
 800b014:	d162      	bne.n	800b0dc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2209      	movs	r2, #9
 800b01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b01e:	e05d      	b.n	800b0dc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	2200      	movs	r2, #0
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f864 	bl	800b0f4 <USBH_MSC_BOT_Abort>
 800b02c:	4603      	mov	r3, r0
 800b02e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b030:	7dbb      	ldrb	r3, [r7, #22]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d104      	bne.n	800b040 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2207      	movs	r2, #7
 800b03a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b03e:	e04f      	b.n	800b0e0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b040:	7dbb      	ldrb	r3, [r7, #22]
 800b042:	2b04      	cmp	r3, #4
 800b044:	d14c      	bne.n	800b0e0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	220b      	movs	r2, #11
 800b04a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b04e:	e047      	b.n	800b0e0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	2201      	movs	r2, #1
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f84c 	bl	800b0f4 <USBH_MSC_BOT_Abort>
 800b05c:	4603      	mov	r3, r0
 800b05e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b060:	7dbb      	ldrb	r3, [r7, #22]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d11d      	bne.n	800b0a2 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	795b      	ldrb	r3, [r3, #5]
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f005 fd8b 	bl	8010b88 <USBH_LL_GetToggle>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	7959      	ldrb	r1, [r3, #5]
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	f1c3 0301 	rsb	r3, r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	461a      	mov	r2, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f005 fd4f 	bl	8010b28 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	791b      	ldrb	r3, [r3, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f005 fd48 	bl	8010b28 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2209      	movs	r2, #9
 800b09c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b0a0:	e020      	b.n	800b0e4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b0a2:	7dbb      	ldrb	r3, [r7, #22]
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d11d      	bne.n	800b0e4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	220b      	movs	r2, #11
 800b0ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b0b0:	e018      	b.n	800b0e4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fdf3 	bl	800ac9e <USBH_MSC_BOT_REQ_Reset>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d112      	bne.n	800b0e8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b0ca:	e00d      	b.n	800b0e8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e00c      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e00a      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e008      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0d8:	bf00      	nop
 800b0da:	e006      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0dc:	bf00      	nop
 800b0de:	e004      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0e0:	bf00      	nop
 800b0e2:	e002      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0e4:	bf00      	nop
 800b0e6:	e000      	b.n	800b0ea <USBH_MSC_BOT_Process+0x392>
      break;
 800b0e8:	bf00      	nop
  }
  return status;
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70fb      	strb	r3, [r7, #3]
 800b100:	4613      	mov	r3, r2
 800b102:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b104:	2302      	movs	r3, #2
 800b106:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b112:	78bb      	ldrb	r3, [r7, #2]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <USBH_MSC_BOT_Abort+0x2a>
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d009      	beq.n	800b130 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b11c:	e011      	b.n	800b142 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	79db      	ldrb	r3, [r3, #7]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 f8d2 	bl	800c2ce <USBH_ClrFeature>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73fb      	strb	r3, [r7, #15]
      break;
 800b12e:	e008      	b.n	800b142 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	799b      	ldrb	r3, [r3, #6]
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f8c9 	bl	800c2ce <USBH_ClrFeature>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]
      break;
 800b140:	bf00      	nop
  }
  return status;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b15e:	2301      	movs	r3, #1
 800b160:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	791b      	ldrb	r3, [r3, #4]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f005 fc21 	bl	80109b0 <USBH_LL_GetLastXferSize>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b0d      	cmp	r3, #13
 800b172:	d002      	beq.n	800b17a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b174:	2302      	movs	r3, #2
 800b176:	73fb      	strb	r3, [r7, #15]
 800b178:	e024      	b.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b17e:	4a14      	ldr	r2, [pc, #80]	; (800b1d0 <USBH_MSC_DecodeCSW+0x84>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d11d      	bne.n	800b1c0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d119      	bne.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b196:	2b00      	cmp	r3, #0
 800b198:	d102      	bne.n	800b1a0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]
 800b19e:	e011      	b.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d102      	bne.n	800b1b0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	73fb      	strb	r3, [r7, #15]
 800b1ae:	e009      	b.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d104      	bne.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	73fb      	strb	r3, [r7, #15]
 800b1be:	e001      	b.n	800b1c4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	53425355 	.word	0x53425355

0800b1d4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d002      	beq.n	800b1fe <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d021      	beq.n	800b240 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b1fc:	e028      	b.n	800b250 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	220a      	movs	r2, #10
 800b210:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	3363      	adds	r3, #99	; 0x63
 800b218:	2210      	movs	r2, #16
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f005 fd7f 	bl	8010d20 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2201      	movs	r2, #1
 800b22e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2202      	movs	r2, #2
 800b236:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b23a:	2301      	movs	r3, #1
 800b23c:	73fb      	strb	r3, [r7, #15]
      break;
 800b23e:	e007      	b.n	800b250 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fd87 	bl	800ad58 <USBH_MSC_BOT_Process>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
      break;
 800b24e:	bf00      	nop
  }

  return error;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	460b      	mov	r3, r1
 800b264:	607a      	str	r2, [r7, #4]
 800b266:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b268:	2301      	movs	r3, #1
 800b26a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d002      	beq.n	800b286 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b280:	2b02      	cmp	r3, #2
 800b282:	d027      	beq.n	800b2d4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b284:	e05f      	b.n	800b346 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2208      	movs	r2, #8
 800b28a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2280      	movs	r2, #128	; 0x80
 800b290:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	220a      	movs	r2, #10
 800b298:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3363      	adds	r3, #99	; 0x63
 800b2a0:	2210      	movs	r2, #16
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f005 fd3b 	bl	8010d20 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2225      	movs	r2, #37	; 0x25
 800b2ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2202      	movs	r2, #2
 800b2be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	f103 0210 	add.w	r2, r3, #16
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d2:	e038      	b.n	800b346 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fd3d 	bl	800ad58 <USBH_MSC_BOT_Process>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d12d      	bne.n	800b344 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ee:	3303      	adds	r3, #3
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2fa:	3302      	adds	r3, #2
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	021b      	lsls	r3, r3, #8
 800b300:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b308:	3301      	adds	r3, #1
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b30e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	061b      	lsls	r3, r3, #24
 800b31a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b326:	3307      	adds	r3, #7
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b332:	3306      	adds	r3, #6
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b29b      	uxth	r3, r3
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	b29a      	uxth	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	809a      	strh	r2, [r3, #4]
      break;
 800b344:	bf00      	nop
  }

  return error;
 800b346:	7dfb      	ldrb	r3, [r7, #23]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	460b      	mov	r3, r1
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b35e:	2302      	movs	r3, #2
 800b360:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b372:	2b01      	cmp	r3, #1
 800b374:	d002      	beq.n	800b37c <USBH_MSC_SCSI_Inquiry+0x2c>
 800b376:	2b02      	cmp	r3, #2
 800b378:	d03d      	beq.n	800b3f6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b37a:	e089      	b.n	800b490 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2224      	movs	r2, #36	; 0x24
 800b380:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2280      	movs	r2, #128	; 0x80
 800b386:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	220a      	movs	r2, #10
 800b38e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	3363      	adds	r3, #99	; 0x63
 800b396:	220a      	movs	r2, #10
 800b398:	2100      	movs	r1, #0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f005 fcc0 	bl	8010d20 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2212      	movs	r2, #18
 800b3a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
 800b3aa:	015b      	lsls	r3, r3, #5
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	2224      	movs	r2, #36	; 0x24
 800b3c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f103 0210 	add.w	r2, r3, #16
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f4:	e04c      	b.n	800b490 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b3f6:	7afb      	ldrb	r3, [r7, #11]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f7ff fcac 	bl	800ad58 <USBH_MSC_BOT_Process>
 800b400:	4603      	mov	r3, r0
 800b402:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d141      	bne.n	800b48e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b40a:	2222      	movs	r2, #34	; 0x22
 800b40c:	2100      	movs	r1, #0
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f005 fc86 	bl	8010d20 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f003 031f 	and.w	r3, r3, #31
 800b420:	b2da      	uxtb	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	b2da      	uxtb	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43c:	3301      	adds	r3, #1
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	b25b      	sxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	da03      	bge.n	800b44e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	709a      	strb	r2, [r3, #2]
 800b44c:	e002      	b.n	800b454 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	1cd8      	adds	r0, r3, #3
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b45e:	3308      	adds	r3, #8
 800b460:	2208      	movs	r2, #8
 800b462:	4619      	mov	r1, r3
 800b464:	f005 fc4e 	bl	8010d04 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f103 000c 	add.w	r0, r3, #12
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b474:	3310      	adds	r3, #16
 800b476:	2210      	movs	r2, #16
 800b478:	4619      	mov	r1, r3
 800b47a:	f005 fc43 	bl	8010d04 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	331d      	adds	r3, #29
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b488:	3220      	adds	r2, #32
 800b48a:	6812      	ldr	r2, [r2, #0]
 800b48c:	601a      	str	r2, [r3, #0]
      break;
 800b48e:	bf00      	nop
  }

  return error;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b086      	sub	sp, #24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b2:	69db      	ldr	r3, [r3, #28]
 800b4b4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d002      	beq.n	800b4c6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d03d      	beq.n	800b540 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b4c4:	e05d      	b.n	800b582 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	220e      	movs	r2, #14
 800b4ca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	2280      	movs	r2, #128	; 0x80
 800b4d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	3363      	adds	r3, #99	; 0x63
 800b4e0:	2210      	movs	r2, #16
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f005 fc1b 	bl	8010d20 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2203      	movs	r2, #3
 800b4ee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	015b      	lsls	r3, r3, #5
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	220e      	movs	r2, #14
 800b512:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2202      	movs	r2, #2
 800b52a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f103 0210 	add.w	r2, r3, #16
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b53a:	2301      	movs	r3, #1
 800b53c:	75fb      	strb	r3, [r7, #23]
      break;
 800b53e:	e020      	b.n	800b582 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b540:	7afb      	ldrb	r3, [r7, #11]
 800b542:	4619      	mov	r1, r3
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff fc07 	bl	800ad58 <USBH_MSC_BOT_Process>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d115      	bne.n	800b580 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b55a:	3302      	adds	r3, #2
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	b2da      	uxtb	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b56e:	7b1a      	ldrb	r2, [r3, #12]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57a:	7b5a      	ldrb	r2, [r3, #13]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	709a      	strb	r2, [r3, #2]
      break;
 800b580:	bf00      	nop
  }

  return error;
 800b582:	7dfb      	ldrb	r3, [r7, #23]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e029      	b.n	800b5f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	79fa      	ldrb	r2, [r7, #7]
 800b5a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 f81f 	bl	800b600 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f005 f929 	bl	8010848 <USBH_LL_Init>

  return USBH_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b60c:	2300      	movs	r3, #0
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	e009      	b.n	800b626 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	33e0      	adds	r3, #224	; 0xe0
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	2200      	movs	r2, #0
 800b61e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b0f      	cmp	r3, #15
 800b62a:	d9f2      	bls.n	800b612 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b62c:	2300      	movs	r3, #0
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	e009      	b.n	800b646 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4413      	add	r3, r2
 800b638:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b63c:	2200      	movs	r2, #0
 800b63e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3301      	adds	r3, #1
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b64c:	d3f1      	bcc.n	800b632 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2240      	movs	r2, #64	; 0x40
 800b672:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d016      	beq.n	800b6ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10e      	bne.n	800b6e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b6cc:	1c59      	adds	r1, r3, #1
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	33de      	adds	r3, #222	; 0xde
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
 800b6e2:	e004      	b.n	800b6ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	73fb      	strb	r3, [r7, #15]
 800b6e8:	e001      	b.n	800b6ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b712:	78fa      	ldrb	r2, [r7, #3]
 800b714:	429a      	cmp	r2, r3
 800b716:	d204      	bcs.n	800b722 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b720:	e001      	b.n	800b726 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b722:	2302      	movs	r3, #2
 800b724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b726:	7bfb      	ldrb	r3, [r7, #15]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b734:	b480      	push	{r7}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	4608      	mov	r0, r1
 800b73e:	4611      	mov	r1, r2
 800b740:	461a      	mov	r2, r3
 800b742:	4603      	mov	r3, r0
 800b744:	70fb      	strb	r3, [r7, #3]
 800b746:	460b      	mov	r3, r1
 800b748:	70bb      	strb	r3, [r7, #2]
 800b74a:	4613      	mov	r3, r2
 800b74c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b75c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b75e:	e025      	b.n	800b7ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b760:	7dfb      	ldrb	r3, [r7, #23]
 800b762:	221a      	movs	r2, #26
 800b764:	fb02 f303 	mul.w	r3, r2, r3
 800b768:	3308      	adds	r3, #8
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4413      	add	r3, r2
 800b76e:	3302      	adds	r3, #2
 800b770:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	795b      	ldrb	r3, [r3, #5]
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d002      	beq.n	800b782 <USBH_FindInterface+0x4e>
 800b77c:	78fb      	ldrb	r3, [r7, #3]
 800b77e:	2bff      	cmp	r3, #255	; 0xff
 800b780:	d111      	bne.n	800b7a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b786:	78ba      	ldrb	r2, [r7, #2]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d002      	beq.n	800b792 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b78c:	78bb      	ldrb	r3, [r7, #2]
 800b78e:	2bff      	cmp	r3, #255	; 0xff
 800b790:	d109      	bne.n	800b7a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b796:	787a      	ldrb	r2, [r7, #1]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d002      	beq.n	800b7a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b79c:	787b      	ldrb	r3, [r7, #1]
 800b79e:	2bff      	cmp	r3, #255	; 0xff
 800b7a0:	d101      	bne.n	800b7a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
 800b7a4:	e006      	b.n	800b7b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d9d6      	bls.n	800b760 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b7b2:	23ff      	movs	r3, #255	; 0xff
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f005 f879 	bl	80108c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f005 f992 	bl	8010afa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af04      	add	r7, sp, #16
 800b7e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d102      	bne.n	800b802 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2203      	movs	r2, #3
 800b800:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b0b      	cmp	r3, #11
 800b80a:	f200 81be 	bhi.w	800bb8a <USBH_Process+0x3aa>
 800b80e:	a201      	add	r2, pc, #4	; (adr r2, 800b814 <USBH_Process+0x34>)
 800b810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b814:	0800b845 	.word	0x0800b845
 800b818:	0800b877 	.word	0x0800b877
 800b81c:	0800b8df 	.word	0x0800b8df
 800b820:	0800bb25 	.word	0x0800bb25
 800b824:	0800bb8b 	.word	0x0800bb8b
 800b828:	0800b983 	.word	0x0800b983
 800b82c:	0800bacb 	.word	0x0800bacb
 800b830:	0800b9b9 	.word	0x0800b9b9
 800b834:	0800b9d9 	.word	0x0800b9d9
 800b838:	0800b9f9 	.word	0x0800b9f9
 800b83c:	0800ba3d 	.word	0x0800ba3d
 800b840:	0800bb0d 	.word	0x0800bb0d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 819e 	beq.w	800bb8e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b858:	20c8      	movs	r0, #200	; 0xc8
 800b85a:	f005 f9c5 	bl	8010be8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f005 f88b 	bl	801097a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b874:	e18b      	b.n	800bb8e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d107      	bne.n	800b890 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b88e:	e18d      	b.n	800bbac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b89a:	d914      	bls.n	800b8c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d903      	bls.n	800b8be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	220d      	movs	r2, #13
 800b8ba:	701a      	strb	r2, [r3, #0]
      break;
 800b8bc:	e176      	b.n	800bbac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	701a      	strb	r2, [r3, #0]
      break;
 800b8c4:	e172      	b.n	800bbac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b8cc:	f103 020a 	add.w	r2, r3, #10
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b8d6:	200a      	movs	r0, #10
 800b8d8:	f005 f986 	bl	8010be8 <USBH_Delay>
      break;
 800b8dc:	e166      	b.n	800bbac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ee:	2104      	movs	r1, #4
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b8f4:	2064      	movs	r0, #100	; 0x64
 800b8f6:	f005 f977 	bl	8010be8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f005 f816 	bl	801092c <USBH_LL_GetSpeed>
 800b900:	4603      	mov	r3, r0
 800b902:	461a      	mov	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2205      	movs	r2, #5
 800b90e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b910:	2100      	movs	r1, #0
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f001 fa29 	bl	800cd6a <USBH_AllocPipe>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b920:	2180      	movs	r1, #128	; 0x80
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fa21 	bl	800cd6a <USBH_AllocPipe>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7919      	ldrb	r1, [r3, #4]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b944:	b292      	uxth	r2, r2
 800b946:	9202      	str	r2, [sp, #8]
 800b948:	2200      	movs	r2, #0
 800b94a:	9201      	str	r2, [sp, #4]
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	4603      	mov	r3, r0
 800b950:	2280      	movs	r2, #128	; 0x80
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 f9da 	bl	800cd0c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7959      	ldrb	r1, [r3, #5]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b96c:	b292      	uxth	r2, r2
 800b96e:	9202      	str	r2, [sp, #8]
 800b970:	2200      	movs	r2, #0
 800b972:	9201      	str	r2, [sp, #4]
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	4603      	mov	r3, r0
 800b978:	2200      	movs	r2, #0
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 f9c6 	bl	800cd0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b980:	e114      	b.n	800bbac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f918 	bl	800bbb8 <USBH_HandleEnum>
 800b988:	4603      	mov	r3, r0
 800b98a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 80fe 	bne.w	800bb92 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d103      	bne.n	800b9b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b9ae:	e0f0      	b.n	800bb92 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2207      	movs	r2, #7
 800b9b4:	701a      	strb	r2, [r3, #0]
      break;
 800b9b6:	e0ec      	b.n	800bb92 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 80e9 	beq.w	800bb96 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2208      	movs	r2, #8
 800b9d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b9d6:	e0de      	b.n	800bb96 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fc2c 	bl	800c240 <USBH_SetCfg>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f040 80d5 	bne.w	800bb9a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2209      	movs	r2, #9
 800b9f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9f6:	e0d0      	b.n	800bb9a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b9fe:	f003 0320 	and.w	r3, r3, #32
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d016      	beq.n	800ba34 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ba06:	2101      	movs	r1, #1
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fc3c 	bl	800c286 <USBH_SetFeature>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d103      	bne.n	800ba22 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	220a      	movs	r2, #10
 800ba1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba20:	e0bd      	b.n	800bb9e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	f040 80b9 	bne.w	800bb9e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	220a      	movs	r2, #10
 800ba30:	701a      	strb	r2, [r3, #0]
      break;
 800ba32:	e0b4      	b.n	800bb9e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	220a      	movs	r2, #10
 800ba38:	701a      	strb	r2, [r3, #0]
      break;
 800ba3a:	e0b0      	b.n	800bb9e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80ad 	beq.w	800bba2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
 800ba54:	e016      	b.n	800ba84 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ba56:	7bfa      	ldrb	r2, [r7, #15]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	32de      	adds	r2, #222	; 0xde
 800ba5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba60:	791a      	ldrb	r2, [r3, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d108      	bne.n	800ba7e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ba6c:	7bfa      	ldrb	r2, [r7, #15]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	32de      	adds	r2, #222	; 0xde
 800ba72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ba7c:	e005      	b.n	800ba8a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	3301      	adds	r3, #1
 800ba82:	73fb      	strb	r3, [r7, #15]
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0e5      	beq.n	800ba56 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d016      	beq.n	800bac2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2206      	movs	r2, #6
 800baaa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bab2:	2103      	movs	r1, #3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bab8:	e073      	b.n	800bba2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	220d      	movs	r2, #13
 800babe:	701a      	strb	r2, [r3, #0]
      break;
 800bac0:	e06f      	b.n	800bba2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	220d      	movs	r2, #13
 800bac6:	701a      	strb	r2, [r3, #0]
      break;
 800bac8:	e06b      	b.n	800bba2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d017      	beq.n	800bb04 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d103      	bne.n	800baf4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	220b      	movs	r2, #11
 800baf0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800baf2:	e058      	b.n	800bba6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d154      	bne.n	800bba6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	220d      	movs	r2, #13
 800bb00:	701a      	strb	r2, [r3, #0]
      break;
 800bb02:	e050      	b.n	800bba6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	220d      	movs	r2, #13
 800bb08:	701a      	strb	r2, [r3, #0]
      break;
 800bb0a:	e04c      	b.n	800bba6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d049      	beq.n	800bbaa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
      }
      break;
 800bb22:	e042      	b.n	800bbaa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff fd67 	bl	800b600 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d009      	beq.n	800bb50 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d005      	beq.n	800bb66 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb60:	2105      	movs	r1, #5
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d107      	bne.n	800bb82 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fe20 	bl	800b7c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb80:	e014      	b.n	800bbac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f004 fe9c 	bl	80108c0 <USBH_LL_Start>
      break;
 800bb88:	e010      	b.n	800bbac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bb8a:	bf00      	nop
 800bb8c:	e00e      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bb8e:	bf00      	nop
 800bb90:	e00c      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bb92:	bf00      	nop
 800bb94:	e00a      	b.n	800bbac <USBH_Process+0x3cc>
    break;
 800bb96:	bf00      	nop
 800bb98:	e008      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bb9a:	bf00      	nop
 800bb9c:	e006      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bb9e:	bf00      	nop
 800bba0:	e004      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bba2:	bf00      	nop
 800bba4:	e002      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bba6:	bf00      	nop
 800bba8:	e000      	b.n	800bbac <USBH_Process+0x3cc>
      break;
 800bbaa:	bf00      	nop
  }
  return USBH_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop

0800bbb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b088      	sub	sp, #32
 800bbbc:	af04      	add	r7, sp, #16
 800bbbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	2b07      	cmp	r3, #7
 800bbce:	f200 81c1 	bhi.w	800bf54 <USBH_HandleEnum+0x39c>
 800bbd2:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBH_HandleEnum+0x20>)
 800bbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd8:	0800bbf9 	.word	0x0800bbf9
 800bbdc:	0800bcb7 	.word	0x0800bcb7
 800bbe0:	0800bd21 	.word	0x0800bd21
 800bbe4:	0800bdaf 	.word	0x0800bdaf
 800bbe8:	0800be19 	.word	0x0800be19
 800bbec:	0800be89 	.word	0x0800be89
 800bbf0:	0800becf 	.word	0x0800becf
 800bbf4:	0800bf15 	.word	0x0800bf15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bbf8:	2108      	movs	r1, #8
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa50 	bl	800c0a0 <USBH_Get_DevDesc>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d130      	bne.n	800bc6c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	7919      	ldrb	r1, [r3, #4]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	9202      	str	r2, [sp, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	9201      	str	r2, [sp, #4]
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2280      	movs	r2, #128	; 0x80
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 f865 	bl	800cd0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7959      	ldrb	r1, [r3, #5]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc56:	b292      	uxth	r2, r2
 800bc58:	9202      	str	r2, [sp, #8]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	9201      	str	r2, [sp, #4]
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	4603      	mov	r3, r0
 800bc62:	2200      	movs	r2, #0
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f001 f851 	bl	800cd0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bc6a:	e175      	b.n	800bf58 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	f040 8172 	bne.w	800bf58 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d903      	bls.n	800bc96 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	220d      	movs	r2, #13
 800bc92:	701a      	strb	r2, [r3, #0]
      break;
 800bc94:	e160      	b.n	800bf58 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	795b      	ldrb	r3, [r3, #5]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 f885 	bl	800cdac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	791b      	ldrb	r3, [r3, #4]
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f001 f87f 	bl	800cdac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
      break;
 800bcb4:	e150      	b.n	800bf58 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bcb6:	2112      	movs	r1, #18
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f9f1 	bl	800c0a0 <USBH_Get_DevDesc>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d103      	bne.n	800bcd0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bcce:	e145      	b.n	800bf5c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	f040 8142 	bne.w	800bf5c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcde:	3301      	adds	r3, #1
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d903      	bls.n	800bcfa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	220d      	movs	r2, #13
 800bcf6:	701a      	strb	r2, [r3, #0]
      break;
 800bcf8:	e130      	b.n	800bf5c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	795b      	ldrb	r3, [r3, #5]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f001 f853 	bl	800cdac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	791b      	ldrb	r3, [r3, #4]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f001 f84d 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
      break;
 800bd1e:	e11d      	b.n	800bf5c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bd20:	2101      	movs	r1, #1
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fa68 	bl	800c1f8 <USBH_SetAddress>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d132      	bne.n	800bd98 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bd32:	2002      	movs	r0, #2
 800bd34:	f004 ff58 	bl	8010be8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2203      	movs	r2, #3
 800bd44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	7919      	ldrb	r1, [r3, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bd5a:	b292      	uxth	r2, r2
 800bd5c:	9202      	str	r2, [sp, #8]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	9201      	str	r2, [sp, #4]
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	4603      	mov	r3, r0
 800bd66:	2280      	movs	r2, #128	; 0x80
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 ffcf 	bl	800cd0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	7959      	ldrb	r1, [r3, #5]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd82:	b292      	uxth	r2, r2
 800bd84:	9202      	str	r2, [sp, #8]
 800bd86:	2200      	movs	r2, #0
 800bd88:	9201      	str	r2, [sp, #4]
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2200      	movs	r2, #0
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 ffbb 	bl	800cd0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd96:	e0e3      	b.n	800bf60 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	f040 80e0 	bne.w	800bf60 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	220d      	movs	r2, #13
 800bda4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	705a      	strb	r2, [r3, #1]
      break;
 800bdac:	e0d8      	b.n	800bf60 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bdae:	2109      	movs	r1, #9
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f99d 	bl	800c0f0 <USBH_Get_CfgDesc>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2204      	movs	r2, #4
 800bdc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bdc6:	e0cd      	b.n	800bf64 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	f040 80ca 	bne.w	800bf64 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d903      	bls.n	800bdf2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	220d      	movs	r2, #13
 800bdee:	701a      	strb	r2, [r3, #0]
      break;
 800bdf0:	e0b8      	b.n	800bf64 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	795b      	ldrb	r3, [r3, #5]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 ffd7 	bl	800cdac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	791b      	ldrb	r3, [r3, #4]
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 ffd1 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
      break;
 800be16:	e0a5      	b.n	800bf64 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f965 	bl	800c0f0 <USBH_Get_CfgDesc>
 800be26:	4603      	mov	r3, r0
 800be28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2205      	movs	r2, #5
 800be34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be36:	e097      	b.n	800bf68 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	f040 8094 	bne.w	800bf68 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be46:	3301      	adds	r3, #1
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be56:	2b03      	cmp	r3, #3
 800be58:	d903      	bls.n	800be62 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	220d      	movs	r2, #13
 800be5e:	701a      	strb	r2, [r3, #0]
      break;
 800be60:	e082      	b.n	800bf68 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	795b      	ldrb	r3, [r3, #5]
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 ff9f 	bl	800cdac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	791b      	ldrb	r3, [r3, #4]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 ff99 	bl	800cdac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	701a      	strb	r2, [r3, #0]
      break;
 800be86:	e06f      	b.n	800bf68 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d019      	beq.n	800bec6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be9e:	23ff      	movs	r3, #255	; 0xff
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f949 	bl	800c138 <USBH_Get_StringDesc>
 800bea6:	4603      	mov	r3, r0
 800bea8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800beaa:	7bbb      	ldrb	r3, [r7, #14]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2206      	movs	r2, #6
 800beb4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800beb6:	e059      	b.n	800bf6c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d156      	bne.n	800bf6c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2206      	movs	r2, #6
 800bec2:	705a      	strb	r2, [r3, #1]
      break;
 800bec4:	e052      	b.n	800bf6c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2206      	movs	r2, #6
 800beca:	705a      	strb	r2, [r3, #1]
      break;
 800becc:	e04e      	b.n	800bf6c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d019      	beq.n	800bf0c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bee4:	23ff      	movs	r3, #255	; 0xff
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f926 	bl	800c138 <USBH_Get_StringDesc>
 800beec:	4603      	mov	r3, r0
 800beee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2207      	movs	r2, #7
 800befa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800befc:	e038      	b.n	800bf70 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800befe:	7bbb      	ldrb	r3, [r7, #14]
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d135      	bne.n	800bf70 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2207      	movs	r2, #7
 800bf08:	705a      	strb	r2, [r3, #1]
      break;
 800bf0a:	e031      	b.n	800bf70 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2207      	movs	r2, #7
 800bf10:	705a      	strb	r2, [r3, #1]
      break;
 800bf12:	e02d      	b.n	800bf70 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d017      	beq.n	800bf4e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bf2a:	23ff      	movs	r3, #255	; 0xff
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f903 	bl	800c138 <USBH_Get_StringDesc>
 800bf32:	4603      	mov	r3, r0
 800bf34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d102      	bne.n	800bf42 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bf40:	e018      	b.n	800bf74 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d115      	bne.n	800bf74 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
      break;
 800bf4c:	e012      	b.n	800bf74 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73fb      	strb	r3, [r7, #15]
      break;
 800bf52:	e00f      	b.n	800bf74 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bf54:	bf00      	nop
 800bf56:	e00e      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf58:	bf00      	nop
 800bf5a:	e00c      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf5c:	bf00      	nop
 800bf5e:	e00a      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf60:	bf00      	nop
 800bf62:	e008      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf64:	bf00      	nop
 800bf66:	e006      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf68:	bf00      	nop
 800bf6a:	e004      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf6c:	bf00      	nop
 800bf6e:	e002      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf70:	bf00      	nop
 800bf72:	e000      	b.n	800bf76 <USBH_HandleEnum+0x3be>
      break;
 800bf74:	bf00      	nop
  }
  return Status;
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bf92:	bf00      	nop
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f804 	bl	800bfc2 <USBH_HandleSof>
}
 800bfba:	bf00      	nop
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b0b      	cmp	r3, #11
 800bfd2:	d10a      	bne.n	800bfea <USBH_HandleSof+0x28>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d005      	beq.n	800bfea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
  }
}
 800bfea:	bf00      	nop
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c002:	bf00      	nop
}
 800c004:	370c      	adds	r7, #12
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c00e:	b480      	push	{r7}
 800c010:	b083      	sub	sp, #12
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c01e:	bf00      	nop
}
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b083      	sub	sp, #12
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f004 fc3c 	bl	80108f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	791b      	ldrb	r3, [r3, #4]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fe91 	bl	800cdac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	795b      	ldrb	r3, [r3, #5]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fe8b 	bl	800cdac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af02      	add	r7, sp, #8
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f864 	bl	800c18e <USBH_GetDescriptor>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0dc:	78fa      	ldrb	r2, [r7, #3]
 800c0de:	b292      	uxth	r2, r2
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	f000 f918 	bl	800c316 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	331c      	adds	r3, #28
 800c100:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c102:	887b      	ldrh	r3, [r7, #2]
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c10c:	2100      	movs	r1, #0
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f83d 	bl	800c18e <USBH_GetDescriptor>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d107      	bne.n	800c12e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c11e:	887b      	ldrh	r3, [r7, #2]
 800c120:	461a      	mov	r2, r3
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 f987 	bl	800c438 <USBH_ParseCfgDesc>
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	461a      	mov	r2, r3
 800c144:	460b      	mov	r3, r1
 800c146:	72fb      	strb	r3, [r7, #11]
 800c148:	4613      	mov	r3, r2
 800c14a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c154:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c15c:	893b      	ldrh	r3, [r7, #8]
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	460b      	mov	r3, r1
 800c162:	2100      	movs	r1, #0
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 f812 	bl	800c18e <USBH_GetDescriptor>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d107      	bne.n	800c184 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c17a:	893a      	ldrh	r2, [r7, #8]
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fb24 	bl	800c7cc <USBH_ParseStringDesc>
  }

  return status;
 800c184:	7dfb      	ldrb	r3, [r7, #23]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	72fb      	strb	r3, [r7, #11]
 800c19c:	4613      	mov	r3, r2
 800c19e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	789b      	ldrb	r3, [r3, #2]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d11c      	bne.n	800c1e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c1a8:	7afb      	ldrb	r3, [r7, #11]
 800c1aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2206      	movs	r2, #6
 800c1b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	893a      	ldrh	r2, [r7, #8]
 800c1be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c1c0:	893b      	ldrh	r3, [r7, #8]
 800c1c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c1c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ca:	d104      	bne.n	800c1d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f240 4209 	movw	r2, #1033	; 0x409
 800c1d2:	829a      	strh	r2, [r3, #20]
 800c1d4:	e002      	b.n	800c1dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	8b3a      	ldrh	r2, [r7, #24]
 800c1e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c1e2:	8b3b      	ldrh	r3, [r7, #24]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 fb3d 	bl	800c868 <USBH_CtlReq>
 800c1ee:	4603      	mov	r3, r0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	789b      	ldrb	r3, [r3, #2]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d10f      	bne.n	800c22c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2205      	movs	r2, #5
 800c216:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c218:	78fb      	ldrb	r3, [r7, #3]
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fb19 	bl	800c868 <USBH_CtlReq>
 800c236:	4603      	mov	r3, r0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	789b      	ldrb	r3, [r3, #2]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d10e      	bne.n	800c272 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2209      	movs	r2, #9
 800c25e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	887a      	ldrh	r2, [r7, #2]
 800c264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c272:	2200      	movs	r2, #0
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 faf6 	bl	800c868 <USBH_CtlReq>
 800c27c:	4603      	mov	r3, r0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	789b      	ldrb	r3, [r3, #2]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d10f      	bne.n	800c2ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2203      	movs	r2, #3
 800c2a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c2a6:	78fb      	ldrb	r3, [r7, #3]
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fad2 	bl	800c868 <USBH_CtlReq>
 800c2c4:	4603      	mov	r3, r0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	789b      	ldrb	r3, [r3, #2]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d10f      	bne.n	800c302 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c302:	2200      	movs	r2, #0
 800c304:	2100      	movs	r1, #0
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 faae 	bl	800c868 <USBH_CtlReq>
 800c30c:	4603      	mov	r3, r0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c316:	b480      	push	{r7}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	60b9      	str	r1, [r7, #8]
 800c320:	4613      	mov	r3, r2
 800c322:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	781a      	ldrb	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	785a      	ldrb	r2, [r3, #1]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	3302      	adds	r3, #2
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3303      	adds	r3, #3
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b29b      	uxth	r3, r3
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	b29b      	uxth	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	791a      	ldrb	r2, [r3, #4]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	795a      	ldrb	r2, [r3, #5]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	799a      	ldrb	r2, [r3, #6]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	79da      	ldrb	r2, [r3, #7]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	79db      	ldrb	r3, [r3, #7]
 800c374:	2b20      	cmp	r3, #32
 800c376:	dc11      	bgt.n	800c39c <USBH_ParseDevDesc+0x86>
 800c378:	2b08      	cmp	r3, #8
 800c37a:	db16      	blt.n	800c3aa <USBH_ParseDevDesc+0x94>
 800c37c:	3b08      	subs	r3, #8
 800c37e:	2201      	movs	r2, #1
 800c380:	fa02 f303 	lsl.w	r3, r2, r3
 800c384:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bf14      	ite	ne
 800c390:	2301      	movne	r3, #1
 800c392:	2300      	moveq	r3, #0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d102      	bne.n	800c3a0 <USBH_ParseDevDesc+0x8a>
 800c39a:	e006      	b.n	800c3aa <USBH_ParseDevDesc+0x94>
 800c39c:	2b40      	cmp	r3, #64	; 0x40
 800c39e:	d104      	bne.n	800c3aa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	79da      	ldrb	r2, [r3, #7]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	71da      	strb	r2, [r3, #7]
      break;
 800c3a8:	e003      	b.n	800c3b2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2240      	movs	r2, #64	; 0x40
 800c3ae:	71da      	strb	r2, [r3, #7]
      break;
 800c3b0:	bf00      	nop
  }

  if (length > 8U)
 800c3b2:	88fb      	ldrh	r3, [r7, #6]
 800c3b4:	2b08      	cmp	r3, #8
 800c3b6:	d939      	bls.n	800c42c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	3309      	adds	r3, #9
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	021b      	lsls	r3, r3, #8
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	330a      	adds	r3, #10
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	330b      	adds	r3, #11
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	021b      	lsls	r3, r3, #8
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	330c      	adds	r3, #12
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	330d      	adds	r3, #13
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	021b      	lsls	r3, r3, #8
 800c402:	b29b      	uxth	r3, r3
 800c404:	4313      	orrs	r3, r2
 800c406:	b29a      	uxth	r2, r3
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	7b9a      	ldrb	r2, [r3, #14]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	7bda      	ldrb	r2, [r3, #15]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	7c1a      	ldrb	r2, [r3, #16]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	7c5a      	ldrb	r2, [r3, #17]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	745a      	strb	r2, [r3, #17]
  }
}
 800c42c:	bf00      	nop
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08c      	sub	sp, #48	; 0x30
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	4613      	mov	r3, r2
 800c444:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c44c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	781a      	ldrb	r2, [r3, #0]
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	785a      	ldrb	r2, [r3, #1]
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	3302      	adds	r3, #2
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b29a      	uxth	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	3303      	adds	r3, #3
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	b29b      	uxth	r3, r3
 800c488:	021b      	lsls	r3, r3, #8
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	4313      	orrs	r3, r2
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c494:	bf28      	it	cs
 800c496:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	791a      	ldrb	r2, [r3, #4]
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	795a      	ldrb	r2, [r3, #5]
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	799a      	ldrb	r2, [r3, #6]
 800c4b4:	6a3b      	ldr	r3, [r7, #32]
 800c4b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	79da      	ldrb	r2, [r3, #7]
 800c4bc:	6a3b      	ldr	r3, [r7, #32]
 800c4be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	7a1a      	ldrb	r2, [r3, #8]
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b09      	cmp	r3, #9
 800c4ce:	d002      	beq.n	800c4d6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	2209      	movs	r2, #9
 800c4d4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	2b09      	cmp	r3, #9
 800c4da:	f240 809d 	bls.w	800c618 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c4de:	2309      	movs	r3, #9
 800c4e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4e6:	e081      	b.n	800c5ec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4e8:	f107 0316 	add.w	r3, r7, #22
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f0:	f000 f99f 	bl	800c832 <USBH_GetNextDesc>
 800c4f4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d176      	bne.n	800c5ec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b09      	cmp	r3, #9
 800c504:	d002      	beq.n	800c50c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	2209      	movs	r2, #9
 800c50a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c510:	221a      	movs	r2, #26
 800c512:	fb02 f303 	mul.w	r3, r2, r3
 800c516:	3308      	adds	r3, #8
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	4413      	add	r3, r2
 800c51c:	3302      	adds	r3, #2
 800c51e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c522:	69f8      	ldr	r0, [r7, #28]
 800c524:	f000 f87e 	bl	800c624 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c532:	e043      	b.n	800c5bc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c534:	f107 0316 	add.w	r3, r7, #22
 800c538:	4619      	mov	r1, r3
 800c53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c53c:	f000 f979 	bl	800c832 <USBH_GetNextDesc>
 800c540:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c544:	785b      	ldrb	r3, [r3, #1]
 800c546:	2b05      	cmp	r3, #5
 800c548:	d138      	bne.n	800c5bc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	795b      	ldrb	r3, [r3, #5]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d10f      	bne.n	800c572 <USBH_ParseCfgDesc+0x13a>
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	799b      	ldrb	r3, [r3, #6]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d10b      	bne.n	800c572 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	79db      	ldrb	r3, [r3, #7]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10f      	bne.n	800c582 <USBH_ParseCfgDesc+0x14a>
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b09      	cmp	r3, #9
 800c568:	d00b      	beq.n	800c582 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	2209      	movs	r2, #9
 800c56e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c570:	e007      	b.n	800c582 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b07      	cmp	r3, #7
 800c578:	d004      	beq.n	800c584 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57c:	2207      	movs	r2, #7
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	e000      	b.n	800c584 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c582:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c58c:	3201      	adds	r2, #1
 800c58e:	00d2      	lsls	r2, r2, #3
 800c590:	211a      	movs	r1, #26
 800c592:	fb01 f303 	mul.w	r3, r1, r3
 800c596:	4413      	add	r3, r2
 800c598:	3308      	adds	r3, #8
 800c59a:	6a3a      	ldr	r2, [r7, #32]
 800c59c:	4413      	add	r3, r2
 800c59e:	3304      	adds	r3, #4
 800c5a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a4:	69b9      	ldr	r1, [r7, #24]
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f86b 	bl	800c682 <USBH_ParseEPDesc>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c5b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	791b      	ldrb	r3, [r3, #4]
 800c5c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d204      	bcs.n	800c5d2 <USBH_ParseCfgDesc+0x19a>
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	885a      	ldrh	r2, [r3, #2]
 800c5cc:	8afb      	ldrh	r3, [r7, #22]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d8b0      	bhi.n	800c534 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	791b      	ldrb	r3, [r3, #4]
 800c5d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d201      	bcs.n	800c5e2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e01c      	b.n	800c61c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c5e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d805      	bhi.n	800c600 <USBH_ParseCfgDesc+0x1c8>
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	885a      	ldrh	r2, [r3, #2]
 800c5f8:	8afb      	ldrh	r3, [r7, #22]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	f63f af74 	bhi.w	800c4e8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	791b      	ldrb	r3, [r3, #4]
 800c604:	2b02      	cmp	r3, #2
 800c606:	bf28      	it	cs
 800c608:	2302      	movcs	r3, #2
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c610:	429a      	cmp	r2, r3
 800c612:	d201      	bcs.n	800c618 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c614:	2303      	movs	r3, #3
 800c616:	e001      	b.n	800c61c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3730      	adds	r7, #48	; 0x30
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	785a      	ldrb	r2, [r3, #1]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	789a      	ldrb	r2, [r3, #2]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	78da      	ldrb	r2, [r3, #3]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	791a      	ldrb	r2, [r3, #4]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	795a      	ldrb	r2, [r3, #5]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	799a      	ldrb	r2, [r3, #6]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	79da      	ldrb	r2, [r3, #7]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	7a1a      	ldrb	r2, [r3, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	721a      	strb	r2, [r3, #8]
}
 800c676:	bf00      	nop
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c682:	b480      	push	{r7}
 800c684:	b087      	sub	sp, #28
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	781a      	ldrb	r2, [r3, #0]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	785a      	ldrb	r2, [r3, #1]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	789a      	ldrb	r2, [r3, #2]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	78da      	ldrb	r2, [r3, #3]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3305      	adds	r3, #5
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	799a      	ldrb	r2, [r3, #6]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	889b      	ldrh	r3, [r3, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d102      	bne.n	800c6e4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	75fb      	strb	r3, [r7, #23]
 800c6e2:	e033      	b.n	800c74c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	889b      	ldrh	r3, [r3, #4]
 800c6e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c6ec:	f023 0307 	bic.w	r3, r3, #7
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	889b      	ldrh	r3, [r3, #4]
 800c6fa:	b21a      	sxth	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3304      	adds	r3, #4
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	b299      	uxth	r1, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3305      	adds	r3, #5
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	021b      	lsls	r3, r3, #8
 800c70e:	b29b      	uxth	r3, r3
 800c710:	430b      	orrs	r3, r1
 800c712:	b29b      	uxth	r3, r3
 800c714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d110      	bne.n	800c73e <USBH_ParseEPDesc+0xbc>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3304      	adds	r3, #4
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	b299      	uxth	r1, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3305      	adds	r3, #5
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	021b      	lsls	r3, r3, #8
 800c72e:	b29b      	uxth	r3, r3
 800c730:	430b      	orrs	r3, r1
 800c732:	b29b      	uxth	r3, r3
 800c734:	b21b      	sxth	r3, r3
 800c736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c73a:	b21b      	sxth	r3, r3
 800c73c:	e001      	b.n	800c742 <USBH_ParseEPDesc+0xc0>
 800c73e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c742:	4313      	orrs	r3, r2
 800c744:	b21b      	sxth	r3, r3
 800c746:	b29a      	uxth	r2, r3
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c752:	2b00      	cmp	r3, #0
 800c754:	d116      	bne.n	800c784 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	78db      	ldrb	r3, [r3, #3]
 800c75a:	f003 0303 	and.w	r3, r3, #3
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d005      	beq.n	800c76e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	78db      	ldrb	r3, [r3, #3]
 800c766:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c76a:	2b03      	cmp	r3, #3
 800c76c:	d127      	bne.n	800c7be <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	799b      	ldrb	r3, [r3, #6]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <USBH_ParseEPDesc+0xfc>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	799b      	ldrb	r3, [r3, #6]
 800c77a:	2b10      	cmp	r3, #16
 800c77c:	d91f      	bls.n	800c7be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c77e:	2303      	movs	r3, #3
 800c780:	75fb      	strb	r3, [r7, #23]
 800c782:	e01c      	b.n	800c7be <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	78db      	ldrb	r3, [r3, #3]
 800c788:	f003 0303 	and.w	r3, r3, #3
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d10a      	bne.n	800c7a6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	799b      	ldrb	r3, [r3, #6]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <USBH_ParseEPDesc+0x11e>
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	799b      	ldrb	r3, [r3, #6]
 800c79c:	2b10      	cmp	r3, #16
 800c79e:	d90e      	bls.n	800c7be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	75fb      	strb	r3, [r7, #23]
 800c7a4:	e00b      	b.n	800c7be <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	78db      	ldrb	r3, [r3, #3]
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d105      	bne.n	800c7be <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	799b      	ldrb	r3, [r3, #6]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	371c      	adds	r7, #28
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	d120      	bne.n	800c826 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	1e9a      	subs	r2, r3, #2
 800c7ea:	88fb      	ldrh	r3, [r7, #6]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	bf28      	it	cs
 800c7f0:	4613      	movcs	r3, r2
 800c7f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3302      	adds	r3, #2
 800c7f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	82fb      	strh	r3, [r7, #22]
 800c7fe:	e00b      	b.n	800c818 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c800:	8afb      	ldrh	r3, [r7, #22]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	4413      	add	r3, r2
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3301      	adds	r3, #1
 800c810:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c812:	8afb      	ldrh	r3, [r7, #22]
 800c814:	3302      	adds	r3, #2
 800c816:	82fb      	strh	r3, [r7, #22]
 800c818:	8afa      	ldrh	r2, [r7, #22]
 800c81a:	8abb      	ldrh	r3, [r7, #20]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d3ef      	bcc.n	800c800 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2200      	movs	r2, #0
 800c824:	701a      	strb	r2, [r3, #0]
  }
}
 800c826:	bf00      	nop
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c832:	b480      	push	{r7}
 800c834:	b085      	sub	sp, #20
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	881a      	ldrh	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b29b      	uxth	r3, r3
 800c846:	4413      	add	r3, r2
 800c848:	b29a      	uxth	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4413      	add	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c85a:	68fb      	ldr	r3, [r7, #12]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	4613      	mov	r3, r2
 800c874:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c876:	2301      	movs	r3, #1
 800c878:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	789b      	ldrb	r3, [r3, #2]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d002      	beq.n	800c888 <USBH_CtlReq+0x20>
 800c882:	2b02      	cmp	r3, #2
 800c884:	d00f      	beq.n	800c8a6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c886:	e027      	b.n	800c8d8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	88fa      	ldrh	r2, [r7, #6]
 800c892:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2201      	movs	r2, #1
 800c898:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2202      	movs	r2, #2
 800c89e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	75fb      	strb	r3, [r7, #23]
      break;
 800c8a4:	e018      	b.n	800c8d8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f000 f81c 	bl	800c8e4 <USBH_HandleControl>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <USBH_CtlReq+0x54>
 800c8b6:	7dfb      	ldrb	r3, [r7, #23]
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d106      	bne.n	800c8ca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	761a      	strb	r2, [r3, #24]
      break;
 800c8c8:	e005      	b.n	800c8d6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d102      	bne.n	800c8d6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	709a      	strb	r2, [r3, #2]
      break;
 800c8d6:	bf00      	nop
  }
  return status;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7e1b      	ldrb	r3, [r3, #24]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	2b0a      	cmp	r3, #10
 800c8fc:	f200 8156 	bhi.w	800cbac <USBH_HandleControl+0x2c8>
 800c900:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <USBH_HandleControl+0x24>)
 800c902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c906:	bf00      	nop
 800c908:	0800c935 	.word	0x0800c935
 800c90c:	0800c94f 	.word	0x0800c94f
 800c910:	0800c9b9 	.word	0x0800c9b9
 800c914:	0800c9df 	.word	0x0800c9df
 800c918:	0800ca17 	.word	0x0800ca17
 800c91c:	0800ca41 	.word	0x0800ca41
 800c920:	0800ca93 	.word	0x0800ca93
 800c924:	0800cab5 	.word	0x0800cab5
 800c928:	0800caf1 	.word	0x0800caf1
 800c92c:	0800cb17 	.word	0x0800cb17
 800c930:	0800cb55 	.word	0x0800cb55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f103 0110 	add.w	r1, r3, #16
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	795b      	ldrb	r3, [r3, #5]
 800c93e:	461a      	mov	r2, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f943 	bl	800cbcc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2202      	movs	r2, #2
 800c94a:	761a      	strb	r2, [r3, #24]
      break;
 800c94c:	e139      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	795b      	ldrb	r3, [r3, #5]
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f004 f8bd 	bl	8010ad4 <USBH_LL_GetURBState>
 800c95a:	4603      	mov	r3, r0
 800c95c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c95e:	7bbb      	ldrb	r3, [r7, #14]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d11e      	bne.n	800c9a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7c1b      	ldrb	r3, [r3, #16]
 800c968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c96c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8adb      	ldrh	r3, [r3, #22]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00a      	beq.n	800c98c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c976:	7b7b      	ldrb	r3, [r7, #13]
 800c978:	2b80      	cmp	r3, #128	; 0x80
 800c97a:	d103      	bne.n	800c984 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2203      	movs	r2, #3
 800c980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c982:	e115      	b.n	800cbb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2205      	movs	r2, #5
 800c988:	761a      	strb	r2, [r3, #24]
      break;
 800c98a:	e111      	b.n	800cbb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c98c:	7b7b      	ldrb	r3, [r7, #13]
 800c98e:	2b80      	cmp	r3, #128	; 0x80
 800c990:	d103      	bne.n	800c99a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2209      	movs	r2, #9
 800c996:	761a      	strb	r2, [r3, #24]
      break;
 800c998:	e10a      	b.n	800cbb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2207      	movs	r2, #7
 800c99e:	761a      	strb	r2, [r3, #24]
      break;
 800c9a0:	e106      	b.n	800cbb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c9a2:	7bbb      	ldrb	r3, [r7, #14]
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d003      	beq.n	800c9b0 <USBH_HandleControl+0xcc>
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	f040 8100 	bne.w	800cbb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	220b      	movs	r2, #11
 800c9b4:	761a      	strb	r2, [r3, #24]
      break;
 800c9b6:	e0fb      	b.n	800cbb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6899      	ldr	r1, [r3, #8]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	899a      	ldrh	r2, [r3, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	791b      	ldrb	r3, [r3, #4]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f93a 	bl	800cc4a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2204      	movs	r2, #4
 800c9da:	761a      	strb	r2, [r3, #24]
      break;
 800c9dc:	e0f1      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	791b      	ldrb	r3, [r3, #4]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f004 f875 	bl	8010ad4 <USBH_LL_GetURBState>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c9ee:	7bbb      	ldrb	r3, [r7, #14]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d102      	bne.n	800c9fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2209      	movs	r2, #9
 800c9f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c9fa:	7bbb      	ldrb	r3, [r7, #14]
 800c9fc:	2b05      	cmp	r3, #5
 800c9fe:	d102      	bne.n	800ca06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ca00:	2303      	movs	r3, #3
 800ca02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca04:	e0d6      	b.n	800cbb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	f040 80d3 	bne.w	800cbb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	220b      	movs	r2, #11
 800ca12:	761a      	strb	r2, [r3, #24]
      break;
 800ca14:	e0ce      	b.n	800cbb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6899      	ldr	r1, [r3, #8]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	899a      	ldrh	r2, [r3, #12]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	795b      	ldrb	r3, [r3, #5]
 800ca22:	2001      	movs	r0, #1
 800ca24:	9000      	str	r0, [sp, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f8ea 	bl	800cc00 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2206      	movs	r2, #6
 800ca3c:	761a      	strb	r2, [r3, #24]
      break;
 800ca3e:	e0c0      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	795b      	ldrb	r3, [r3, #5]
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f004 f844 	bl	8010ad4 <USBH_LL_GetURBState>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d103      	bne.n	800ca5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2207      	movs	r2, #7
 800ca5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca5c:	e0ac      	b.n	800cbb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	d105      	bne.n	800ca70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	220c      	movs	r2, #12
 800ca68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca6e:	e0a3      	b.n	800cbb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca70:	7bbb      	ldrb	r3, [r7, #14]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d103      	bne.n	800ca7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2205      	movs	r2, #5
 800ca7a:	761a      	strb	r2, [r3, #24]
      break;
 800ca7c:	e09c      	b.n	800cbb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ca7e:	7bbb      	ldrb	r3, [r7, #14]
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	f040 8099 	bne.w	800cbb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	220b      	movs	r2, #11
 800ca8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca90:	e092      	b.n	800cbb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	791b      	ldrb	r3, [r3, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	2100      	movs	r1, #0
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f8d5 	bl	800cc4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2208      	movs	r2, #8
 800cab0:	761a      	strb	r2, [r3, #24]

      break;
 800cab2:	e086      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	791b      	ldrb	r3, [r3, #4]
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f004 f80a 	bl	8010ad4 <USBH_LL_GetURBState>
 800cac0:	4603      	mov	r3, r0
 800cac2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d105      	bne.n	800cad6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	220d      	movs	r2, #13
 800cace:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cad4:	e072      	b.n	800cbbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cad6:	7bbb      	ldrb	r3, [r7, #14]
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d103      	bne.n	800cae4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	220b      	movs	r2, #11
 800cae0:	761a      	strb	r2, [r3, #24]
      break;
 800cae2:	e06b      	b.n	800cbbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	2b05      	cmp	r3, #5
 800cae8:	d168      	bne.n	800cbbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800caea:	2303      	movs	r3, #3
 800caec:	73fb      	strb	r3, [r7, #15]
      break;
 800caee:	e065      	b.n	800cbbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	795b      	ldrb	r3, [r3, #5]
 800caf4:	2201      	movs	r2, #1
 800caf6:	9200      	str	r2, [sp, #0]
 800caf8:	2200      	movs	r2, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f87f 	bl	800cc00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	220a      	movs	r2, #10
 800cb12:	761a      	strb	r2, [r3, #24]
      break;
 800cb14:	e055      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	795b      	ldrb	r3, [r3, #5]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f003 ffd9 	bl	8010ad4 <USBH_LL_GetURBState>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	220d      	movs	r2, #13
 800cb34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cb36:	e043      	b.n	800cbc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2209      	movs	r2, #9
 800cb42:	761a      	strb	r2, [r3, #24]
      break;
 800cb44:	e03c      	b.n	800cbc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d139      	bne.n	800cbc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	220b      	movs	r2, #11
 800cb50:	761a      	strb	r2, [r3, #24]
      break;
 800cb52:	e035      	b.n	800cbc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	7e5b      	ldrb	r3, [r3, #25]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	765a      	strb	r2, [r3, #25]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7e5b      	ldrb	r3, [r3, #25]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d806      	bhi.n	800cb76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cb74:	e025      	b.n	800cbc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb7c:	2106      	movs	r1, #6
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	795b      	ldrb	r3, [r3, #5]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f90c 	bl	800cdac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	791b      	ldrb	r3, [r3, #4]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f906 	bl	800cdac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cba6:	2302      	movs	r3, #2
 800cba8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbaa:	e00a      	b.n	800cbc2 <USBH_HandleControl+0x2de>

    default:
      break;
 800cbac:	bf00      	nop
 800cbae:	e008      	b.n	800cbc2 <USBH_HandleControl+0x2de>
      break;
 800cbb0:	bf00      	nop
 800cbb2:	e006      	b.n	800cbc2 <USBH_HandleControl+0x2de>
      break;
 800cbb4:	bf00      	nop
 800cbb6:	e004      	b.n	800cbc2 <USBH_HandleControl+0x2de>
      break;
 800cbb8:	bf00      	nop
 800cbba:	e002      	b.n	800cbc2 <USBH_HandleControl+0x2de>
      break;
 800cbbc:	bf00      	nop
 800cbbe:	e000      	b.n	800cbc2 <USBH_HandleControl+0x2de>
      break;
 800cbc0:	bf00      	nop
  }

  return status;
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b088      	sub	sp, #32
 800cbd0:	af04      	add	r7, sp, #16
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cbda:	79f9      	ldrb	r1, [r7, #7]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	9303      	str	r3, [sp, #12]
 800cbe0:	2308      	movs	r3, #8
 800cbe2:	9302      	str	r3, [sp, #8]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	2300      	movs	r3, #0
 800cbee:	2200      	movs	r2, #0
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f003 ff3e 	bl	8010a72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af04      	add	r7, sp, #16
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	460b      	mov	r3, r1
 800cc10:	80fb      	strh	r3, [r7, #6]
 800cc12:	4613      	mov	r3, r2
 800cc14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cc20:	2300      	movs	r3, #0
 800cc22:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc24:	7979      	ldrb	r1, [r7, #5]
 800cc26:	7e3b      	ldrb	r3, [r7, #24]
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	2301      	movs	r3, #1
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	2300      	movs	r3, #0
 800cc38:	2200      	movs	r2, #0
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f003 ff19 	bl	8010a72 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af04      	add	r7, sp, #16
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	4611      	mov	r1, r2
 800cc56:	461a      	mov	r2, r3
 800cc58:	460b      	mov	r3, r1
 800cc5a:	80fb      	strh	r3, [r7, #6]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc60:	7979      	ldrb	r1, [r7, #5]
 800cc62:	2300      	movs	r3, #0
 800cc64:	9303      	str	r3, [sp, #12]
 800cc66:	88fb      	ldrh	r3, [r7, #6]
 800cc68:	9302      	str	r3, [sp, #8]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	2301      	movs	r3, #1
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	2300      	movs	r3, #0
 800cc74:	2201      	movs	r2, #1
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f003 fefb 	bl	8010a72 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cc7c:	2300      	movs	r3, #0

}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b088      	sub	sp, #32
 800cc8a:	af04      	add	r7, sp, #16
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	4611      	mov	r1, r2
 800cc92:	461a      	mov	r2, r3
 800cc94:	460b      	mov	r3, r1
 800cc96:	80fb      	strh	r3, [r7, #6]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cca6:	2300      	movs	r3, #0
 800cca8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ccaa:	7979      	ldrb	r1, [r7, #5]
 800ccac:	7e3b      	ldrb	r3, [r7, #24]
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	88fb      	ldrh	r3, [r7, #6]
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	2301      	movs	r3, #1
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f003 fed6 	bl	8010a72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af04      	add	r7, sp, #16
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	461a      	mov	r2, r3
 800ccde:	460b      	mov	r3, r1
 800cce0:	80fb      	strh	r3, [r7, #6]
 800cce2:	4613      	mov	r3, r2
 800cce4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cce6:	7979      	ldrb	r1, [r7, #5]
 800cce8:	2300      	movs	r3, #0
 800ccea:	9303      	str	r3, [sp, #12]
 800ccec:	88fb      	ldrh	r3, [r7, #6]
 800ccee:	9302      	str	r3, [sp, #8]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f003 feb8 	bl	8010a72 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af04      	add	r7, sp, #16
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	4608      	mov	r0, r1
 800cd16:	4611      	mov	r1, r2
 800cd18:	461a      	mov	r2, r3
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	70fb      	strb	r3, [r7, #3]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70bb      	strb	r3, [r7, #2]
 800cd22:	4613      	mov	r3, r2
 800cd24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cd26:	7878      	ldrb	r0, [r7, #1]
 800cd28:	78ba      	ldrb	r2, [r7, #2]
 800cd2a:	78f9      	ldrb	r1, [r7, #3]
 800cd2c:	8b3b      	ldrh	r3, [r7, #24]
 800cd2e:	9302      	str	r3, [sp, #8]
 800cd30:	7d3b      	ldrb	r3, [r7, #20]
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	7c3b      	ldrb	r3, [r7, #16]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	4603      	mov	r3, r0
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f003 fe4b 	bl	80109d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cd56:	78fb      	ldrb	r3, [r7, #3]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f003 fe6a 	bl	8010a34 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	460b      	mov	r3, r1
 800cd74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f836 	bl	800cde8 <USBH_GetFreePipe>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cd80:	89fb      	ldrh	r3, [r7, #14]
 800cd82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d00a      	beq.n	800cda0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	89fb      	ldrh	r3, [r7, #14]
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	33e0      	adds	r3, #224	; 0xe0
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cda0:	89fb      	ldrh	r3, [r7, #14]
 800cda2:	b2db      	uxtb	r3, r3
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	2b0f      	cmp	r3, #15
 800cdbc:	d80d      	bhi.n	800cdda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	33e0      	adds	r3, #224	; 0xe0
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4413      	add	r3, r2
 800cdc8:	685a      	ldr	r2, [r3, #4]
 800cdca:	78fb      	ldrb	r3, [r7, #3]
 800cdcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	33e0      	adds	r3, #224	; 0xe0
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	440b      	add	r3, r1
 800cdd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
 800cdf8:	e00f      	b.n	800ce1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	33e0      	adds	r3, #224	; 0xe0
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	e007      	b.n	800ce24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	3301      	adds	r3, #1
 800ce18:	73fb      	strb	r3, [r7, #15]
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	2b0f      	cmp	r3, #15
 800ce1e:	d9ec      	bls.n	800cdfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ce20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3714      	adds	r7, #20
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	4a08      	ldr	r2, [pc, #32]	; (800ce60 <disk_status+0x30>)
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4413      	add	r3, r2
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	79fa      	ldrb	r2, [r7, #7]
 800ce48:	4905      	ldr	r1, [pc, #20]	; (800ce60 <disk_status+0x30>)
 800ce4a:	440a      	add	r2, r1
 800ce4c:	7a12      	ldrb	r2, [r2, #8]
 800ce4e:	4610      	mov	r0, r2
 800ce50:	4798      	blx	r3
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3710      	adds	r7, #16
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20002a20 	.word	0x20002a20

0800ce64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	4a0d      	ldr	r2, [pc, #52]	; (800ceac <disk_initialize+0x48>)
 800ce76:	5cd3      	ldrb	r3, [r2, r3]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d111      	bne.n	800cea0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	4a0b      	ldr	r2, [pc, #44]	; (800ceac <disk_initialize+0x48>)
 800ce80:	2101      	movs	r1, #1
 800ce82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	4a09      	ldr	r2, [pc, #36]	; (800ceac <disk_initialize+0x48>)
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	79fa      	ldrb	r2, [r7, #7]
 800ce92:	4906      	ldr	r1, [pc, #24]	; (800ceac <disk_initialize+0x48>)
 800ce94:	440a      	add	r2, r1
 800ce96:	7a12      	ldrb	r2, [r2, #8]
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4798      	blx	r3
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20002a20 	.word	0x20002a20

0800ceb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ceb0:	b590      	push	{r4, r7, lr}
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60b9      	str	r1, [r7, #8]
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	4603      	mov	r3, r0
 800cebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	4a0a      	ldr	r2, [pc, #40]	; (800ceec <disk_read+0x3c>)
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	689c      	ldr	r4, [r3, #8]
 800cecc:	7bfb      	ldrb	r3, [r7, #15]
 800cece:	4a07      	ldr	r2, [pc, #28]	; (800ceec <disk_read+0x3c>)
 800ced0:	4413      	add	r3, r2
 800ced2:	7a18      	ldrb	r0, [r3, #8]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	68b9      	ldr	r1, [r7, #8]
 800ceda:	47a0      	blx	r4
 800cedc:	4603      	mov	r3, r0
 800cede:	75fb      	strb	r3, [r7, #23]
  return res;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd90      	pop	{r4, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20002a20 	.word	0x20002a20

0800cef0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b087      	sub	sp, #28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
 800cefa:	603b      	str	r3, [r7, #0]
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <disk_write+0x3c>)
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	68dc      	ldr	r4, [r3, #12]
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	4a07      	ldr	r2, [pc, #28]	; (800cf2c <disk_write+0x3c>)
 800cf10:	4413      	add	r3, r2
 800cf12:	7a18      	ldrb	r0, [r3, #8]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	68b9      	ldr	r1, [r7, #8]
 800cf1a:	47a0      	blx	r4
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd90      	pop	{r4, r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20002a20 	.word	0x20002a20

0800cf30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	603a      	str	r2, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	4a09      	ldr	r2, [pc, #36]	; (800cf68 <disk_ioctl+0x38>)
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	79fa      	ldrb	r2, [r7, #7]
 800cf4e:	4906      	ldr	r1, [pc, #24]	; (800cf68 <disk_ioctl+0x38>)
 800cf50:	440a      	add	r2, r1
 800cf52:	7a10      	ldrb	r0, [r2, #8]
 800cf54:	79b9      	ldrb	r1, [r7, #6]
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	4798      	blx	r3
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20002a20 	.word	0x20002a20

0800cf6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf7c:	89fb      	ldrh	r3, [r7, #14]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	b21a      	sxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	b21b      	sxth	r3, r3
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	b21b      	sxth	r3, r3
 800cf8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf8e:	89fb      	ldrh	r3, [r7, #14]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	3303      	adds	r3, #3
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	3202      	adds	r2, #2
 800cfb4:	7812      	ldrb	r2, [r2, #0]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	7812      	ldrb	r2, [r2, #0]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	021b      	lsls	r3, r3, #8
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	7812      	ldrb	r2, [r2, #0]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	60fb      	str	r3, [r7, #12]
	return rv;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	460b      	mov	r3, r1
 800cfec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	1c5a      	adds	r2, r3, #1
 800cff2:	607a      	str	r2, [r7, #4]
 800cff4:	887a      	ldrh	r2, [r7, #2]
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	887b      	ldrh	r3, [r7, #2]
 800cffc:	0a1b      	lsrs	r3, r3, #8
 800cffe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	887a      	ldrh	r2, [r7, #2]
 800d008:	b2d2      	uxtb	r2, r2
 800d00a:	701a      	strb	r2, [r3, #0]
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	b2d2      	uxtb	r2, r2
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	0a1b      	lsrs	r3, r3, #8
 800d032:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	b2d2      	uxtb	r2, r2
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	0a1b      	lsrs	r3, r3, #8
 800d044:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	0a1b      	lsrs	r3, r3, #8
 800d056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	607a      	str	r2, [r7, #4]
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d070:	b480      	push	{r7}
 800d072:	b087      	sub	sp, #28
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00d      	beq.n	800d0a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	1c53      	adds	r3, r2, #1
 800d08e:	613b      	str	r3, [r7, #16]
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	1c59      	adds	r1, r3, #1
 800d094:	6179      	str	r1, [r7, #20]
 800d096:	7812      	ldrb	r2, [r2, #0]
 800d098:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	607b      	str	r3, [r7, #4]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f1      	bne.n	800d08a <mem_cpy+0x1a>
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d0b2:	b480      	push	{r7}
 800d0b4:	b087      	sub	sp, #28
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	60b9      	str	r1, [r7, #8]
 800d0bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	1c5a      	adds	r2, r3, #1
 800d0c6:	617a      	str	r2, [r7, #20]
 800d0c8:	68ba      	ldr	r2, [r7, #8]
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	607b      	str	r3, [r7, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1f3      	bne.n	800d0c2 <mem_set+0x10>
}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	371c      	adds	r7, #28
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d0e8:	b480      	push	{r7}
 800d0ea:	b089      	sub	sp, #36	; 0x24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	61fa      	str	r2, [r7, #28]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	4619      	mov	r1, r3
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	61ba      	str	r2, [r7, #24]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	1acb      	subs	r3, r1, r3
 800d114:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3b01      	subs	r3, #1
 800d11a:	607b      	str	r3, [r7, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <mem_cmp+0x40>
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0eb      	beq.n	800d100 <mem_cmp+0x18>

	return r;
 800d128:	697b      	ldr	r3, [r7, #20]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3724      	adds	r7, #36	; 0x24
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d136:	b480      	push	{r7}
 800d138:	b083      	sub	sp, #12
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d140:	e002      	b.n	800d148 <chk_chr+0x12>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3301      	adds	r3, #1
 800d146:	607b      	str	r3, [r7, #4]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <chk_chr+0x26>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	4293      	cmp	r3, r2
 800d15a:	d1f2      	bne.n	800d142 <chk_chr+0xc>
	return *str;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	781b      	ldrb	r3, [r3, #0]
}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d176:	2300      	movs	r3, #0
 800d178:	60bb      	str	r3, [r7, #8]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e029      	b.n	800d1d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d180:	4a27      	ldr	r2, [pc, #156]	; (800d220 <chk_lock+0xb4>)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	011b      	lsls	r3, r3, #4
 800d186:	4413      	add	r3, r2
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d01d      	beq.n	800d1ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d18e:	4a24      	ldr	r2, [pc, #144]	; (800d220 <chk_lock+0xb4>)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	011b      	lsls	r3, r3, #4
 800d194:	4413      	add	r3, r2
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d116      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d1a0:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <chk_lock+0xb4>)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	4413      	add	r3, r2
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d10c      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1b4:	4a1a      	ldr	r2, [pc, #104]	; (800d220 <chk_lock+0xb4>)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	011b      	lsls	r3, r3, #4
 800d1ba:	4413      	add	r3, r2
 800d1bc:	3308      	adds	r3, #8
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d102      	bne.n	800d1ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1c8:	e007      	b.n	800d1da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d9d2      	bls.n	800d180 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d109      	bne.n	800d1f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d102      	bne.n	800d1ec <chk_lock+0x80>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d101      	bne.n	800d1f0 <chk_lock+0x84>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e010      	b.n	800d212 <chk_lock+0xa6>
 800d1f0:	2312      	movs	r3, #18
 800d1f2:	e00e      	b.n	800d212 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d108      	bne.n	800d20c <chk_lock+0xa0>
 800d1fa:	4a09      	ldr	r2, [pc, #36]	; (800d220 <chk_lock+0xb4>)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	4413      	add	r3, r2
 800d202:	330c      	adds	r3, #12
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20a:	d101      	bne.n	800d210 <chk_lock+0xa4>
 800d20c:	2310      	movs	r3, #16
 800d20e:	e000      	b.n	800d212 <chk_lock+0xa6>
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	20002800 	.word	0x20002800

0800d224 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d22a:	2300      	movs	r3, #0
 800d22c:	607b      	str	r3, [r7, #4]
 800d22e:	e002      	b.n	800d236 <enq_lock+0x12>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3301      	adds	r3, #1
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d806      	bhi.n	800d24a <enq_lock+0x26>
 800d23c:	4a09      	ldr	r2, [pc, #36]	; (800d264 <enq_lock+0x40>)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	4413      	add	r3, r2
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1f2      	bne.n	800d230 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	bf14      	ite	ne
 800d250:	2301      	movne	r3, #1
 800d252:	2300      	moveq	r3, #0
 800d254:	b2db      	uxtb	r3, r3
}
 800d256:	4618      	mov	r0, r3
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	20002800 	.word	0x20002800

0800d268 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d272:	2300      	movs	r3, #0
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	e01f      	b.n	800d2b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d278:	4a41      	ldr	r2, [pc, #260]	; (800d380 <inc_lock+0x118>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	011b      	lsls	r3, r3, #4
 800d27e:	4413      	add	r3, r2
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	429a      	cmp	r2, r3
 800d288:	d113      	bne.n	800d2b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d28a:	4a3d      	ldr	r2, [pc, #244]	; (800d380 <inc_lock+0x118>)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	011b      	lsls	r3, r3, #4
 800d290:	4413      	add	r3, r2
 800d292:	3304      	adds	r3, #4
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d109      	bne.n	800d2b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d29e:	4a38      	ldr	r2, [pc, #224]	; (800d380 <inc_lock+0x118>)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	011b      	lsls	r3, r3, #4
 800d2a4:	4413      	add	r3, r2
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d006      	beq.n	800d2c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	60fb      	str	r3, [r7, #12]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d9dc      	bls.n	800d278 <inc_lock+0x10>
 800d2be:	e000      	b.n	800d2c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d2c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d132      	bne.n	800d32e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	e002      	b.n	800d2d4 <inc_lock+0x6c>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d806      	bhi.n	800d2e8 <inc_lock+0x80>
 800d2da:	4a29      	ldr	r2, [pc, #164]	; (800d380 <inc_lock+0x118>)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4413      	add	r3, r2
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1f2      	bne.n	800d2ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d101      	bne.n	800d2f2 <inc_lock+0x8a>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e040      	b.n	800d374 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4922      	ldr	r1, [pc, #136]	; (800d380 <inc_lock+0x118>)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	011b      	lsls	r3, r3, #4
 800d2fc:	440b      	add	r3, r1
 800d2fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	689a      	ldr	r2, [r3, #8]
 800d304:	491e      	ldr	r1, [pc, #120]	; (800d380 <inc_lock+0x118>)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	440b      	add	r3, r1
 800d30c:	3304      	adds	r3, #4
 800d30e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695a      	ldr	r2, [r3, #20]
 800d314:	491a      	ldr	r1, [pc, #104]	; (800d380 <inc_lock+0x118>)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	440b      	add	r3, r1
 800d31c:	3308      	adds	r3, #8
 800d31e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d320:	4a17      	ldr	r2, [pc, #92]	; (800d380 <inc_lock+0x118>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	4413      	add	r3, r2
 800d328:	330c      	adds	r3, #12
 800d32a:	2200      	movs	r2, #0
 800d32c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d009      	beq.n	800d348 <inc_lock+0xe0>
 800d334:	4a12      	ldr	r2, [pc, #72]	; (800d380 <inc_lock+0x118>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	4413      	add	r3, r2
 800d33c:	330c      	adds	r3, #12
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <inc_lock+0xe0>
 800d344:	2300      	movs	r3, #0
 800d346:	e015      	b.n	800d374 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <inc_lock+0xf8>
 800d34e:	4a0c      	ldr	r2, [pc, #48]	; (800d380 <inc_lock+0x118>)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	4413      	add	r3, r2
 800d356:	330c      	adds	r3, #12
 800d358:	881b      	ldrh	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	e001      	b.n	800d364 <inc_lock+0xfc>
 800d360:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d364:	4906      	ldr	r1, [pc, #24]	; (800d380 <inc_lock+0x118>)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	011b      	lsls	r3, r3, #4
 800d36a:	440b      	add	r3, r1
 800d36c:	330c      	adds	r3, #12
 800d36e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	3301      	adds	r3, #1
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	20002800 	.word	0x20002800

0800d384 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3b01      	subs	r3, #1
 800d390:	607b      	str	r3, [r7, #4]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d825      	bhi.n	800d3e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800d398:	4a17      	ldr	r2, [pc, #92]	; (800d3f8 <dec_lock+0x74>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	011b      	lsls	r3, r3, #4
 800d39e:	4413      	add	r3, r2
 800d3a0:	330c      	adds	r3, #12
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d3a6:	89fb      	ldrh	r3, [r7, #14]
 800d3a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ac:	d101      	bne.n	800d3b2 <dec_lock+0x2e>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <dec_lock+0x3a>
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d3be:	4a0e      	ldr	r2, [pc, #56]	; (800d3f8 <dec_lock+0x74>)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	011b      	lsls	r3, r3, #4
 800d3c4:	4413      	add	r3, r2
 800d3c6:	330c      	adds	r3, #12
 800d3c8:	89fa      	ldrh	r2, [r7, #14]
 800d3ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <dec_lock+0x5a>
 800d3d2:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <dec_lock+0x74>)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	4413      	add	r3, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	737b      	strb	r3, [r7, #13]
 800d3e2:	e001      	b.n	800d3e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d3e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	20002800 	.word	0x20002800

0800d3fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d404:	2300      	movs	r3, #0
 800d406:	60fb      	str	r3, [r7, #12]
 800d408:	e010      	b.n	800d42c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d40a:	4a0d      	ldr	r2, [pc, #52]	; (800d440 <clear_lock+0x44>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	429a      	cmp	r2, r3
 800d418:	d105      	bne.n	800d426 <clear_lock+0x2a>
 800d41a:	4a09      	ldr	r2, [pc, #36]	; (800d440 <clear_lock+0x44>)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	4413      	add	r3, r2
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3301      	adds	r3, #1
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d9eb      	bls.n	800d40a <clear_lock+0xe>
	}
}
 800d432:	bf00      	nop
 800d434:	bf00      	nop
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	20002800 	.word	0x20002800

0800d444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	78db      	ldrb	r3, [r3, #3]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d034      	beq.n	800d4c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7858      	ldrb	r0, [r3, #1]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d468:	2301      	movs	r3, #1
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	f7ff fd40 	bl	800cef0 <disk_write>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d476:	2301      	movs	r3, #1
 800d478:	73fb      	strb	r3, [r7, #15]
 800d47a:	e022      	b.n	800d4c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	1ad2      	subs	r2, r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d217      	bcs.n	800d4c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	789b      	ldrb	r3, [r3, #2]
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	e010      	b.n	800d4bc <sync_window+0x78>
					wsect += fs->fsize;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	7858      	ldrb	r0, [r3, #1]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	f7ff fd1d 	bl	800cef0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d8eb      	bhi.n	800d49a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d01b      	beq.n	800d51c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff ffad 	bl	800d444 <sync_window>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d113      	bne.n	800d51c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7858      	ldrb	r0, [r3, #1]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4fe:	2301      	movs	r3, #1
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	f7ff fcd5 	bl	800ceb0 <disk_read>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d004      	beq.n	800d516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d50c:	f04f 33ff 	mov.w	r3, #4294967295
 800d510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d512:	2301      	movs	r3, #1
 800d514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff ff87 	bl	800d444 <sync_window>
 800d536:	4603      	mov	r3, r0
 800d538:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d159      	bne.n	800d5f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b03      	cmp	r3, #3
 800d546:	d149      	bne.n	800d5dc <sync_fs+0xb4>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	791b      	ldrb	r3, [r3, #4]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d145      	bne.n	800d5dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	899b      	ldrh	r3, [r3, #12]
 800d55a:	461a      	mov	r2, r3
 800d55c:	2100      	movs	r1, #0
 800d55e:	f7ff fda8 	bl	800d0b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3338      	adds	r3, #56	; 0x38
 800d566:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d56a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff fd37 	bl	800cfe2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	3338      	adds	r3, #56	; 0x38
 800d578:	4921      	ldr	r1, [pc, #132]	; (800d600 <sync_fs+0xd8>)
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fd4c 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3338      	adds	r3, #56	; 0x38
 800d584:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d588:	491e      	ldr	r1, [pc, #120]	; (800d604 <sync_fs+0xdc>)
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fd44 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3338      	adds	r3, #56	; 0x38
 800d594:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	699b      	ldr	r3, [r3, #24]
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7ff fd3a 	bl	800d018 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3338      	adds	r3, #56	; 0x38
 800d5a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7ff fd30 	bl	800d018 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7858      	ldrb	r0, [r3, #1]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	f7ff fc8d 	bl	800cef0 <disk_write>
			fs->fsi_flag = 0;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	785b      	ldrb	r3, [r3, #1]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7ff fca3 	bl	800cf30 <disk_ioctl>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d001      	beq.n	800d5f4 <sync_fs+0xcc>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	41615252 	.word	0x41615252
 800d604:	61417272 	.word	0x61417272

0800d608 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	3b02      	subs	r3, #2
 800d616:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	69db      	ldr	r3, [r3, #28]
 800d61c:	3b02      	subs	r3, #2
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	429a      	cmp	r2, r3
 800d622:	d301      	bcc.n	800d628 <clust2sect+0x20>
 800d624:	2300      	movs	r3, #0
 800d626:	e008      	b.n	800d63a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	461a      	mov	r2, r3
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	fb03 f202 	mul.w	r2, r3, r2
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d638:	4413      	add	r3, r2
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b086      	sub	sp, #24
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d904      	bls.n	800d666 <get_fat+0x20>
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	429a      	cmp	r2, r3
 800d664:	d302      	bcc.n	800d66c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d666:	2301      	movs	r3, #1
 800d668:	617b      	str	r3, [r7, #20]
 800d66a:	e0bb      	b.n	800d7e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d66c:	f04f 33ff 	mov.w	r3, #4294967295
 800d670:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b03      	cmp	r3, #3
 800d678:	f000 8083 	beq.w	800d782 <get_fat+0x13c>
 800d67c:	2b03      	cmp	r3, #3
 800d67e:	f300 80a7 	bgt.w	800d7d0 <get_fat+0x18a>
 800d682:	2b01      	cmp	r3, #1
 800d684:	d002      	beq.n	800d68c <get_fat+0x46>
 800d686:	2b02      	cmp	r3, #2
 800d688:	d056      	beq.n	800d738 <get_fat+0xf2>
 800d68a:	e0a1      	b.n	800d7d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	085b      	lsrs	r3, r3, #1
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	899b      	ldrh	r3, [r3, #12]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6938      	ldr	r0, [r7, #16]
 800d6b0:	f7ff ff0c 	bl	800d4cc <move_window>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f040 808d 	bne.w	800d7d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	60fa      	str	r2, [r7, #12]
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	8992      	ldrh	r2, [r2, #12]
 800d6c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6ca:	fb01 f202 	mul.w	r2, r1, r2
 800d6ce:	1a9b      	subs	r3, r3, r2
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d6d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	899b      	ldrh	r3, [r3, #12]
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6ea:	4413      	add	r3, r2
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6938      	ldr	r0, [r7, #16]
 800d6f0:	f7ff feec 	bl	800d4cc <move_window>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d16f      	bne.n	800d7da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	899b      	ldrh	r3, [r3, #12]
 800d6fe:	461a      	mov	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	fbb3 f1f2 	udiv	r1, r3, r2
 800d706:	fb01 f202 	mul.w	r2, r1, r2
 800d70a:	1a9b      	subs	r3, r3, r2
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	4413      	add	r3, r2
 800d710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d714:	021b      	lsls	r3, r3, #8
 800d716:	461a      	mov	r2, r3
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <get_fat+0xe8>
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	091b      	lsrs	r3, r3, #4
 800d72c:	e002      	b.n	800d734 <get_fat+0xee>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d734:	617b      	str	r3, [r7, #20]
			break;
 800d736:	e055      	b.n	800d7e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	899b      	ldrh	r3, [r3, #12]
 800d740:	085b      	lsrs	r3, r3, #1
 800d742:	b29b      	uxth	r3, r3
 800d744:	4619      	mov	r1, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	fbb3 f3f1 	udiv	r3, r3, r1
 800d74c:	4413      	add	r3, r2
 800d74e:	4619      	mov	r1, r3
 800d750:	6938      	ldr	r0, [r7, #16]
 800d752:	f7ff febb 	bl	800d4cc <move_window>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d140      	bne.n	800d7de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	005b      	lsls	r3, r3, #1
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	8992      	ldrh	r2, [r2, #12]
 800d76a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d76e:	fb00 f202 	mul.w	r2, r0, r2
 800d772:	1a9b      	subs	r3, r3, r2
 800d774:	440b      	add	r3, r1
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fbf8 	bl	800cf6c <ld_word>
 800d77c:	4603      	mov	r3, r0
 800d77e:	617b      	str	r3, [r7, #20]
			break;
 800d780:	e030      	b.n	800d7e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	089b      	lsrs	r3, r3, #2
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	4619      	mov	r1, r3
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	fbb3 f3f1 	udiv	r3, r3, r1
 800d796:	4413      	add	r3, r2
 800d798:	4619      	mov	r1, r3
 800d79a:	6938      	ldr	r0, [r7, #16]
 800d79c:	f7ff fe96 	bl	800d4cc <move_window>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d11d      	bne.n	800d7e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	8992      	ldrh	r2, [r2, #12]
 800d7b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7b8:	fb00 f202 	mul.w	r2, r0, r2
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	440b      	add	r3, r1
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7ff fbeb 	bl	800cf9c <ld_dword>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d7cc:	617b      	str	r3, [r7, #20]
			break;
 800d7ce:	e009      	b.n	800d7e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	e006      	b.n	800d7e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7d6:	bf00      	nop
 800d7d8:	e004      	b.n	800d7e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7da:	bf00      	nop
 800d7dc:	e002      	b.n	800d7e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7de:	bf00      	nop
 800d7e0:	e000      	b.n	800d7e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d7e2:	bf00      	nop
		}
	}

	return val;
 800d7e4:	697b      	ldr	r3, [r7, #20]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3718      	adds	r7, #24
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d7ee:	b590      	push	{r4, r7, lr}
 800d7f0:	b089      	sub	sp, #36	; 0x24
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	60f8      	str	r0, [r7, #12]
 800d7f6:	60b9      	str	r1, [r7, #8]
 800d7f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	2b01      	cmp	r3, #1
 800d802:	f240 8102 	bls.w	800da0a <put_fat+0x21c>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	f080 80fc 	bcs.w	800da0a <put_fat+0x21c>
		switch (fs->fs_type) {
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b03      	cmp	r3, #3
 800d818:	f000 80b6 	beq.w	800d988 <put_fat+0x19a>
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	f300 80fd 	bgt.w	800da1c <put_fat+0x22e>
 800d822:	2b01      	cmp	r3, #1
 800d824:	d003      	beq.n	800d82e <put_fat+0x40>
 800d826:	2b02      	cmp	r3, #2
 800d828:	f000 8083 	beq.w	800d932 <put_fat+0x144>
 800d82c:	e0f6      	b.n	800da1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	61bb      	str	r3, [r7, #24]
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	085b      	lsrs	r3, r3, #1
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	4413      	add	r3, r2
 800d83a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	899b      	ldrh	r3, [r3, #12]
 800d844:	4619      	mov	r1, r3
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	fbb3 f3f1 	udiv	r3, r3, r1
 800d84c:	4413      	add	r3, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f7ff fe3b 	bl	800d4cc <move_window>
 800d856:	4603      	mov	r3, r0
 800d858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d85a:	7ffb      	ldrb	r3, [r7, #31]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 80d6 	bne.w	800da0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	61ba      	str	r2, [r7, #24]
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	8992      	ldrh	r2, [r2, #12]
 800d872:	fbb3 f0f2 	udiv	r0, r3, r2
 800d876:	fb00 f202 	mul.w	r2, r0, r2
 800d87a:	1a9b      	subs	r3, r3, r2
 800d87c:	440b      	add	r3, r1
 800d87e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	f003 0301 	and.w	r3, r3, #1
 800d886:	2b00      	cmp	r3, #0
 800d888:	d00d      	beq.n	800d8a6 <put_fat+0xb8>
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	b25b      	sxtb	r3, r3
 800d890:	f003 030f 	and.w	r3, r3, #15
 800d894:	b25a      	sxtb	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	011b      	lsls	r3, r3, #4
 800d89c:	b25b      	sxtb	r3, r3
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	b25b      	sxtb	r3, r3
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	e001      	b.n	800d8aa <put_fat+0xbc>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	899b      	ldrh	r3, [r3, #12]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8c4:	4413      	add	r3, r2
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff fdff 	bl	800d4cc <move_window>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8d2:	7ffb      	ldrb	r3, [r7, #31]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f040 809c 	bne.w	800da12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	899b      	ldrh	r3, [r3, #12]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8ec:	fb00 f202 	mul.w	r2, r0, r2
 800d8f0:	1a9b      	subs	r3, r3, r2
 800d8f2:	440b      	add	r3, r1
 800d8f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <put_fat+0x11a>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	091b      	lsrs	r3, r3, #4
 800d904:	b2db      	uxtb	r3, r3
 800d906:	e00e      	b.n	800d926 <put_fat+0x138>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b25b      	sxtb	r3, r3
 800d90e:	f023 030f 	bic.w	r3, r3, #15
 800d912:	b25a      	sxtb	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	0a1b      	lsrs	r3, r3, #8
 800d918:	b25b      	sxtb	r3, r3
 800d91a:	f003 030f 	and.w	r3, r3, #15
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b25b      	sxtb	r3, r3
 800d924:	b2db      	uxtb	r3, r3
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	70da      	strb	r2, [r3, #3]
			break;
 800d930:	e074      	b.n	800da1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	899b      	ldrh	r3, [r3, #12]
 800d93a:	085b      	lsrs	r3, r3, #1
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	4619      	mov	r1, r3
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	fbb3 f3f1 	udiv	r3, r3, r1
 800d946:	4413      	add	r3, r2
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff fdbe 	bl	800d4cc <move_window>
 800d950:	4603      	mov	r3, r0
 800d952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d954:	7ffb      	ldrb	r3, [r7, #31]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d15d      	bne.n	800da16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	8992      	ldrh	r2, [r2, #12]
 800d968:	fbb3 f0f2 	udiv	r0, r3, r2
 800d96c:	fb00 f202 	mul.w	r2, r0, r2
 800d970:	1a9b      	subs	r3, r3, r2
 800d972:	440b      	add	r3, r1
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	b292      	uxth	r2, r2
 800d978:	4611      	mov	r1, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff fb31 	bl	800cfe2 <st_word>
			fs->wflag = 1;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2201      	movs	r2, #1
 800d984:	70da      	strb	r2, [r3, #3]
			break;
 800d986:	e049      	b.n	800da1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	899b      	ldrh	r3, [r3, #12]
 800d990:	089b      	lsrs	r3, r3, #2
 800d992:	b29b      	uxth	r3, r3
 800d994:	4619      	mov	r1, r3
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	fbb3 f3f1 	udiv	r3, r3, r1
 800d99c:	4413      	add	r3, r2
 800d99e:	4619      	mov	r1, r3
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f7ff fd93 	bl	800d4cc <move_window>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9aa:	7ffb      	ldrb	r3, [r7, #31]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d134      	bne.n	800da1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	8992      	ldrh	r2, [r2, #12]
 800d9c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9c8:	fb00 f202 	mul.w	r2, r0, r2
 800d9cc:	1a9b      	subs	r3, r3, r2
 800d9ce:	440b      	add	r3, r1
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fae3 	bl	800cf9c <ld_dword>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d9dc:	4323      	orrs	r3, r4
 800d9de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	8992      	ldrh	r2, [r2, #12]
 800d9ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9f2:	fb00 f202 	mul.w	r2, r0, r2
 800d9f6:	1a9b      	subs	r3, r3, r2
 800d9f8:	440b      	add	r3, r1
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7ff fb0b 	bl	800d018 <st_dword>
			fs->wflag = 1;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2201      	movs	r2, #1
 800da06:	70da      	strb	r2, [r3, #3]
			break;
 800da08:	e008      	b.n	800da1c <put_fat+0x22e>
		}
	}
 800da0a:	bf00      	nop
 800da0c:	e006      	b.n	800da1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800da0e:	bf00      	nop
 800da10:	e004      	b.n	800da1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <put_fat+0x22e>
			if (res != FR_OK) break;
 800da1a:	bf00      	nop
	return res;
 800da1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3724      	adds	r7, #36	; 0x24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd90      	pop	{r4, r7, pc}

0800da26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b088      	sub	sp, #32
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	60f8      	str	r0, [r7, #12]
 800da2e:	60b9      	str	r1, [r7, #8]
 800da30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d904      	bls.n	800da4c <remove_chain+0x26>
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	69db      	ldr	r3, [r3, #28]
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d301      	bcc.n	800da50 <remove_chain+0x2a>
 800da4c:	2302      	movs	r3, #2
 800da4e:	e04b      	b.n	800dae8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00c      	beq.n	800da70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800da56:	f04f 32ff 	mov.w	r2, #4294967295
 800da5a:	6879      	ldr	r1, [r7, #4]
 800da5c:	69b8      	ldr	r0, [r7, #24]
 800da5e:	f7ff fec6 	bl	800d7ee <put_fat>
 800da62:	4603      	mov	r3, r0
 800da64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800da66:	7ffb      	ldrb	r3, [r7, #31]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d001      	beq.n	800da70 <remove_chain+0x4a>
 800da6c:	7ffb      	ldrb	r3, [r7, #31]
 800da6e:	e03b      	b.n	800dae8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	68f8      	ldr	r0, [r7, #12]
 800da74:	f7ff fde7 	bl	800d646 <get_fat>
 800da78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d031      	beq.n	800dae4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d101      	bne.n	800da8a <remove_chain+0x64>
 800da86:	2302      	movs	r3, #2
 800da88:	e02e      	b.n	800dae8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da90:	d101      	bne.n	800da96 <remove_chain+0x70>
 800da92:	2301      	movs	r3, #1
 800da94:	e028      	b.n	800dae8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800da96:	2200      	movs	r2, #0
 800da98:	68b9      	ldr	r1, [r7, #8]
 800da9a:	69b8      	ldr	r0, [r7, #24]
 800da9c:	f7ff fea7 	bl	800d7ee <put_fat>
 800daa0:	4603      	mov	r3, r0
 800daa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800daa4:	7ffb      	ldrb	r3, [r7, #31]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <remove_chain+0x88>
 800daaa:	7ffb      	ldrb	r3, [r7, #31]
 800daac:	e01c      	b.n	800dae8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	699a      	ldr	r2, [r3, #24]
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	69db      	ldr	r3, [r3, #28]
 800dab6:	3b02      	subs	r3, #2
 800dab8:	429a      	cmp	r2, r3
 800daba:	d20b      	bcs.n	800dad4 <remove_chain+0xae>
			fs->free_clst++;
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	791b      	ldrb	r3, [r3, #4]
 800daca:	f043 0301 	orr.w	r3, r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	69db      	ldr	r3, [r3, #28]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d3c6      	bcc.n	800da70 <remove_chain+0x4a>
 800dae2:	e000      	b.n	800dae6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dae4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3720      	adds	r7, #32
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10d      	bne.n	800db22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d004      	beq.n	800db1c <create_chain+0x2c>
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	69ba      	ldr	r2, [r7, #24]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d31b      	bcc.n	800db54 <create_chain+0x64>
 800db1c:	2301      	movs	r3, #1
 800db1e:	61bb      	str	r3, [r7, #24]
 800db20:	e018      	b.n	800db54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff fd8e 	bl	800d646 <get_fat>
 800db2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d801      	bhi.n	800db36 <create_chain+0x46>
 800db32:	2301      	movs	r3, #1
 800db34:	e070      	b.n	800dc18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3c:	d101      	bne.n	800db42 <create_chain+0x52>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	e06a      	b.n	800dc18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	69db      	ldr	r3, [r3, #28]
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d201      	bcs.n	800db50 <create_chain+0x60>
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	e063      	b.n	800dc18 <create_chain+0x128>
		scl = clst;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	3301      	adds	r3, #1
 800db5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	69db      	ldr	r3, [r3, #28]
 800db62:	69fa      	ldr	r2, [r7, #28]
 800db64:	429a      	cmp	r2, r3
 800db66:	d307      	bcc.n	800db78 <create_chain+0x88>
				ncl = 2;
 800db68:	2302      	movs	r3, #2
 800db6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800db6c:	69fa      	ldr	r2, [r7, #28]
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	429a      	cmp	r2, r3
 800db72:	d901      	bls.n	800db78 <create_chain+0x88>
 800db74:	2300      	movs	r3, #0
 800db76:	e04f      	b.n	800dc18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800db78:	69f9      	ldr	r1, [r7, #28]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff fd63 	bl	800d646 <get_fat>
 800db80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00e      	beq.n	800dba6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d003      	beq.n	800db96 <create_chain+0xa6>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db94:	d101      	bne.n	800db9a <create_chain+0xaa>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	e03e      	b.n	800dc18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800db9a:	69fa      	ldr	r2, [r7, #28]
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d1da      	bne.n	800db58 <create_chain+0x68>
 800dba2:	2300      	movs	r3, #0
 800dba4:	e038      	b.n	800dc18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dba6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbac:	69f9      	ldr	r1, [r7, #28]
 800dbae:	6938      	ldr	r0, [r7, #16]
 800dbb0:	f7ff fe1d 	bl	800d7ee <put_fat>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d109      	bne.n	800dbd2 <create_chain+0xe2>
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d006      	beq.n	800dbd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dbc4:	69fa      	ldr	r2, [r7, #28]
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6938      	ldr	r0, [r7, #16]
 800dbca:	f7ff fe10 	bl	800d7ee <put_fat>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d116      	bne.n	800dc06 <create_chain+0x116>
		fs->last_clst = ncl;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	3b02      	subs	r3, #2
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d804      	bhi.n	800dbf6 <create_chain+0x106>
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	791b      	ldrb	r3, [r3, #4]
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	711a      	strb	r2, [r3, #4]
 800dc04:	e007      	b.n	800dc16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d102      	bne.n	800dc12 <create_chain+0x122>
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc10:	e000      	b.n	800dc14 <create_chain+0x124>
 800dc12:	2301      	movs	r3, #1
 800dc14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc16:	69fb      	ldr	r3, [r7, #28]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3720      	adds	r7, #32
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc34:	3304      	adds	r3, #4
 800dc36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	899b      	ldrh	r3, [r3, #12]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	8952      	ldrh	r2, [r2, #10]
 800dc48:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	1d1a      	adds	r2, r3, #4
 800dc52:	613a      	str	r2, [r7, #16]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <clmt_clust+0x42>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e010      	b.n	800dc84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d307      	bcc.n	800dc7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	617b      	str	r3, [r7, #20]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	3304      	adds	r3, #4
 800dc76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc78:	e7e9      	b.n	800dc4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dc7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	4413      	add	r3, r2
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	371c      	adds	r7, #28
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dca6:	d204      	bcs.n	800dcb2 <dir_sdi+0x22>
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	f003 031f 	and.w	r3, r3, #31
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	e071      	b.n	800dd9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	683a      	ldr	r2, [r7, #0]
 800dcba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d106      	bne.n	800dcd6 <dir_sdi+0x46>
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d902      	bls.n	800dcd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10c      	bne.n	800dcf6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	095b      	lsrs	r3, r3, #5
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	8912      	ldrh	r2, [r2, #8]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d301      	bcc.n	800dcec <dir_sdi+0x5c>
 800dce8:	2302      	movs	r3, #2
 800dcea:	e056      	b.n	800dd9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	61da      	str	r2, [r3, #28]
 800dcf4:	e02d      	b.n	800dd52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	895b      	ldrh	r3, [r3, #10]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	899b      	ldrh	r3, [r3, #12]
 800dd00:	fb02 f303 	mul.w	r3, r2, r3
 800dd04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd06:	e019      	b.n	800dd3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6979      	ldr	r1, [r7, #20]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff fc9a 	bl	800d646 <get_fat>
 800dd12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1a:	d101      	bne.n	800dd20 <dir_sdi+0x90>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e03c      	b.n	800dd9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d904      	bls.n	800dd30 <dir_sdi+0xa0>
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	697a      	ldr	r2, [r7, #20]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d301      	bcc.n	800dd34 <dir_sdi+0xa4>
 800dd30:	2302      	movs	r3, #2
 800dd32:	e032      	b.n	800dd9a <dir_sdi+0x10a>
			ofs -= csz;
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d2e1      	bcs.n	800dd08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dd44:	6979      	ldr	r1, [r7, #20]
 800dd46:	6938      	ldr	r0, [r7, #16]
 800dd48:	f7ff fc5e 	bl	800d608 <clust2sect>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d101      	bne.n	800dd64 <dir_sdi+0xd4>
 800dd60:	2302      	movs	r3, #2
 800dd62:	e01a      	b.n	800dd9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	69da      	ldr	r2, [r3, #28]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	899b      	ldrh	r3, [r3, #12]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd74:	441a      	add	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	899b      	ldrh	r3, [r3, #12]
 800dd84:	461a      	mov	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd8c:	fb00 f202 	mul.w	r2, r0, r2
 800dd90:	1a9b      	subs	r3, r3, r2
 800dd92:	18ca      	adds	r2, r1, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b086      	sub	sp, #24
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	3320      	adds	r3, #32
 800ddb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <dir_next+0x28>
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddc8:	d301      	bcc.n	800ddce <dir_next+0x2c>
 800ddca:	2304      	movs	r3, #4
 800ddcc:	e0bb      	b.n	800df46 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	899b      	ldrh	r3, [r3, #12]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddda:	fb01 f202 	mul.w	r2, r1, r2
 800ddde:	1a9b      	subs	r3, r3, r2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f040 809d 	bne.w	800df20 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	69db      	ldr	r3, [r3, #28]
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10b      	bne.n	800de10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	095b      	lsrs	r3, r3, #5
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	8912      	ldrh	r2, [r2, #8]
 800de00:	4293      	cmp	r3, r2
 800de02:	f0c0 808d 	bcc.w	800df20 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	61da      	str	r2, [r3, #28]
 800de0c:	2304      	movs	r3, #4
 800de0e:	e09a      	b.n	800df46 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	899b      	ldrh	r3, [r3, #12]
 800de14:	461a      	mov	r2, r3
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	fbb3 f3f2 	udiv	r3, r3, r2
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	8952      	ldrh	r2, [r2, #10]
 800de20:	3a01      	subs	r2, #1
 800de22:	4013      	ands	r3, r2
 800de24:	2b00      	cmp	r3, #0
 800de26:	d17b      	bne.n	800df20 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	4619      	mov	r1, r3
 800de30:	4610      	mov	r0, r2
 800de32:	f7ff fc08 	bl	800d646 <get_fat>
 800de36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d801      	bhi.n	800de42 <dir_next+0xa0>
 800de3e:	2302      	movs	r3, #2
 800de40:	e081      	b.n	800df46 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de48:	d101      	bne.n	800de4e <dir_next+0xac>
 800de4a:	2301      	movs	r3, #1
 800de4c:	e07b      	b.n	800df46 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	429a      	cmp	r2, r3
 800de56:	d359      	bcc.n	800df0c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d104      	bne.n	800de68 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	61da      	str	r2, [r3, #28]
 800de64:	2304      	movs	r3, #4
 800de66:	e06e      	b.n	800df46 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	4619      	mov	r1, r3
 800de70:	4610      	mov	r0, r2
 800de72:	f7ff fe3d 	bl	800daf0 <create_chain>
 800de76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <dir_next+0xe0>
 800de7e:	2307      	movs	r3, #7
 800de80:	e061      	b.n	800df46 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d101      	bne.n	800de8c <dir_next+0xea>
 800de88:	2302      	movs	r3, #2
 800de8a:	e05c      	b.n	800df46 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de92:	d101      	bne.n	800de98 <dir_next+0xf6>
 800de94:	2301      	movs	r3, #1
 800de96:	e056      	b.n	800df46 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff fad3 	bl	800d444 <sync_window>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <dir_next+0x106>
 800dea4:	2301      	movs	r3, #1
 800dea6:	e04e      	b.n	800df46 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	899b      	ldrh	r3, [r3, #12]
 800deb2:	461a      	mov	r2, r3
 800deb4:	2100      	movs	r1, #0
 800deb6:	f7ff f8fc 	bl	800d0b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800deba:	2300      	movs	r3, #0
 800debc:	613b      	str	r3, [r7, #16]
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7ff fba1 	bl	800d608 <clust2sect>
 800dec6:	4602      	mov	r2, r0
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	635a      	str	r2, [r3, #52]	; 0x34
 800decc:	e012      	b.n	800def4 <dir_next+0x152>
						fs->wflag = 1;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2201      	movs	r2, #1
 800ded2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f7ff fab5 	bl	800d444 <sync_window>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <dir_next+0x142>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e030      	b.n	800df46 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	3301      	adds	r3, #1
 800dee8:	613b      	str	r3, [r7, #16]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	635a      	str	r2, [r3, #52]	; 0x34
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	895b      	ldrh	r3, [r3, #10]
 800def8:	461a      	mov	r2, r3
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	4293      	cmp	r3, r2
 800defe:	d3e6      	bcc.n	800dece <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df12:	6979      	ldr	r1, [r7, #20]
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff fb77 	bl	800d608 <clust2sect>
 800df1a:	4602      	mov	r2, r0
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	899b      	ldrh	r3, [r3, #12]
 800df30:	461a      	mov	r2, r3
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	fbb3 f0f2 	udiv	r0, r3, r2
 800df38:	fb00 f202 	mul.w	r2, r0, r2
 800df3c:	1a9b      	subs	r3, r3, r2
 800df3e:	18ca      	adds	r2, r1, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b086      	sub	sp, #24
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df5e:	2100      	movs	r1, #0
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff fe95 	bl	800dc90 <dir_sdi>
 800df66:	4603      	mov	r3, r0
 800df68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d12b      	bne.n	800dfc8 <dir_alloc+0x7a>
		n = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	4619      	mov	r1, r3
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff faa6 	bl	800d4cc <move_window>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d11d      	bne.n	800dfc6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2be5      	cmp	r3, #229	; 0xe5
 800df92:	d004      	beq.n	800df9e <dir_alloc+0x50>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d107      	bne.n	800dfae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d102      	bne.n	800dfb2 <dir_alloc+0x64>
 800dfac:	e00c      	b.n	800dfc8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff fef4 	bl	800dda2 <dir_next>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0d7      	beq.n	800df74 <dir_alloc+0x26>
 800dfc4:	e000      	b.n	800dfc8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dfc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	2b04      	cmp	r3, #4
 800dfcc:	d101      	bne.n	800dfd2 <dir_alloc+0x84>
 800dfce:	2307      	movs	r3, #7
 800dfd0:	75fb      	strb	r3, [r7, #23]
	return res;
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	331a      	adds	r3, #26
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe ffbe 	bl	800cf6c <ld_word>
 800dff0:	4603      	mov	r3, r0
 800dff2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d109      	bne.n	800e010 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	3314      	adds	r3, #20
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe ffb3 	bl	800cf6c <ld_word>
 800e006:	4603      	mov	r3, r0
 800e008:	041b      	lsls	r3, r3, #16
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e010:	68fb      	ldr	r3, [r7, #12]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	331a      	adds	r3, #26
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	b292      	uxth	r2, r2
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe ffd6 	bl	800cfe2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d109      	bne.n	800e052 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f103 0214 	add.w	r2, r3, #20
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	0c1b      	lsrs	r3, r3, #16
 800e048:	b29b      	uxth	r3, r3
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7fe ffc8 	bl	800cfe2 <st_word>
	}
}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	331a      	adds	r3, #26
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe ff7e 	bl	800cf6c <ld_word>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <cmp_lfn+0x1e>
 800e076:	2300      	movs	r3, #0
 800e078:	e059      	b.n	800e12e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e082:	1e5a      	subs	r2, r3, #1
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e090:	2301      	movs	r3, #1
 800e092:	81fb      	strh	r3, [r7, #14]
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	e033      	b.n	800e102 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e09a:	4a27      	ldr	r2, [pc, #156]	; (800e138 <cmp_lfn+0xdc>)
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe ff5f 	bl	800cf6c <ld_word>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e0b2:	89fb      	ldrh	r3, [r7, #14]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d01a      	beq.n	800e0ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2bfe      	cmp	r3, #254	; 0xfe
 800e0bc:	d812      	bhi.n	800e0e4 <cmp_lfn+0x88>
 800e0be:	89bb      	ldrh	r3, [r7, #12]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f002 fa23 	bl	801050c <ff_wtoupper>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461c      	mov	r4, r3
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	617a      	str	r2, [r7, #20]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f002 fa17 	bl	801050c <ff_wtoupper>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	429c      	cmp	r4, r3
 800e0e2:	d001      	beq.n	800e0e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e022      	b.n	800e12e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e0e8:	89bb      	ldrh	r3, [r7, #12]
 800e0ea:	81fb      	strh	r3, [r7, #14]
 800e0ec:	e006      	b.n	800e0fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e0ee:	89bb      	ldrh	r3, [r7, #12]
 800e0f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d001      	beq.n	800e0fc <cmp_lfn+0xa0>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e018      	b.n	800e12e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	3301      	adds	r3, #1
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b0c      	cmp	r3, #12
 800e106:	d9c8      	bls.n	800e09a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00b      	beq.n	800e12c <cmp_lfn+0xd0>
 800e114:	89fb      	ldrh	r3, [r7, #14]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d008      	beq.n	800e12c <cmp_lfn+0xd0>
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	4413      	add	r3, r2
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <cmp_lfn+0xd0>
 800e128:	2300      	movs	r3, #0
 800e12a:	e000      	b.n	800e12e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e12c:	2301      	movs	r3, #1
}
 800e12e:	4618      	mov	r0, r3
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	bd90      	pop	{r4, r7, pc}
 800e136:	bf00      	nop
 800e138:	08011ff0 	.word	0x08011ff0

0800e13c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	331a      	adds	r3, #26
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe ff0e 	bl	800cf6c <ld_word>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <pick_lfn+0x1e>
 800e156:	2300      	movs	r3, #0
 800e158:	e04d      	b.n	800e1f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e162:	1e5a      	subs	r2, r3, #1
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e170:	2301      	movs	r3, #1
 800e172:	81fb      	strh	r3, [r7, #14]
 800e174:	2300      	movs	r3, #0
 800e176:	613b      	str	r3, [r7, #16]
 800e178:	e028      	b.n	800e1cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e17a:	4a21      	ldr	r2, [pc, #132]	; (800e200 <pick_lfn+0xc4>)
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	4413      	add	r3, r2
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	461a      	mov	r2, r3
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	4413      	add	r3, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fe feef 	bl	800cf6c <ld_word>
 800e18e:	4603      	mov	r3, r0
 800e190:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00f      	beq.n	800e1b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2bfe      	cmp	r3, #254	; 0xfe
 800e19c:	d901      	bls.n	800e1a2 <pick_lfn+0x66>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e029      	b.n	800e1f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e1a2:	89bb      	ldrh	r3, [r7, #12]
 800e1a4:	81fb      	strh	r3, [r7, #14]
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	617a      	str	r2, [r7, #20]
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	89fa      	ldrh	r2, [r7, #14]
 800e1b4:	801a      	strh	r2, [r3, #0]
 800e1b6:	e006      	b.n	800e1c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e1b8:	89bb      	ldrh	r3, [r7, #12]
 800e1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d001      	beq.n	800e1c6 <pick_lfn+0x8a>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e017      	b.n	800e1f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2b0c      	cmp	r3, #12
 800e1d0:	d9d3      	bls.n	800e17a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2bfe      	cmp	r3, #254	; 0xfe
 800e1e2:	d901      	bls.n	800e1e8 <pick_lfn+0xac>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	e006      	b.n	800e1f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e1f4:	2301      	movs	r3, #1
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3718      	adds	r7, #24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	08011ff0 	.word	0x08011ff0

0800e204 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b088      	sub	sp, #32
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4611      	mov	r1, r2
 800e210:	461a      	mov	r2, r3
 800e212:	460b      	mov	r3, r1
 800e214:	71fb      	strb	r3, [r7, #7]
 800e216:	4613      	mov	r3, r2
 800e218:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	330d      	adds	r3, #13
 800e21e:	79ba      	ldrb	r2, [r7, #6]
 800e220:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	330b      	adds	r3, #11
 800e226:	220f      	movs	r2, #15
 800e228:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	330c      	adds	r3, #12
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	331a      	adds	r3, #26
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fe fed2 	bl	800cfe2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	1e5a      	subs	r2, r3, #1
 800e242:	4613      	mov	r3, r2
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	82fb      	strh	r3, [r7, #22]
 800e252:	2300      	movs	r3, #0
 800e254:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e256:	8afb      	ldrh	r3, [r7, #22]
 800e258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d007      	beq.n	800e270 <put_lfn+0x6c>
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	61fa      	str	r2, [r7, #28]
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e270:	4a17      	ldr	r2, [pc, #92]	; (800e2d0 <put_lfn+0xcc>)
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	4413      	add	r3, r2
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	461a      	mov	r2, r3
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	8afa      	ldrh	r2, [r7, #22]
 800e280:	4611      	mov	r1, r2
 800e282:	4618      	mov	r0, r3
 800e284:	f7fe fead 	bl	800cfe2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e288:	8afb      	ldrh	r3, [r7, #22]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <put_lfn+0x90>
 800e28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e292:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	3301      	adds	r3, #1
 800e298:	61bb      	str	r3, [r7, #24]
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b0c      	cmp	r3, #12
 800e29e:	d9da      	bls.n	800e256 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e2a0:	8afb      	ldrh	r3, [r7, #22]
 800e2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d006      	beq.n	800e2b8 <put_lfn+0xb4>
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <put_lfn+0xbc>
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	79fa      	ldrb	r2, [r7, #7]
 800e2c4:	701a      	strb	r2, [r3, #0]
}
 800e2c6:	bf00      	nop
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08011ff0 	.word	0x08011ff0

0800e2d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08c      	sub	sp, #48	; 0x30
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e2e2:	220b      	movs	r2, #11
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f7fe fec2 	bl	800d070 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	2b05      	cmp	r3, #5
 800e2f0:	d92b      	bls.n	800e34a <gen_numname+0x76>
		sr = seq;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e2f6:	e022      	b.n	800e33e <gen_numname+0x6a>
			wc = *lfn++;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	1c9a      	adds	r2, r3, #2
 800e2fc:	607a      	str	r2, [r7, #4]
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e302:	2300      	movs	r3, #0
 800e304:	62bb      	str	r3, [r7, #40]	; 0x28
 800e306:	e017      	b.n	800e338 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	005a      	lsls	r2, r3, #1
 800e30c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	4413      	add	r3, r2
 800e314:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e318:	085b      	lsrs	r3, r3, #1
 800e31a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d005      	beq.n	800e332 <gen_numname+0x5e>
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e32c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e330:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e334:	3301      	adds	r3, #1
 800e336:	62bb      	str	r3, [r7, #40]	; 0x28
 800e338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33a:	2b0f      	cmp	r3, #15
 800e33c:	d9e4      	bls.n	800e308 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1d8      	bne.n	800e2f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e34a:	2307      	movs	r3, #7
 800e34c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	b2db      	uxtb	r3, r3
 800e352:	f003 030f 	and.w	r3, r3, #15
 800e356:	b2db      	uxtb	r3, r3
 800e358:	3330      	adds	r3, #48	; 0x30
 800e35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e35e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e362:	2b39      	cmp	r3, #57	; 0x39
 800e364:	d904      	bls.n	800e370 <gen_numname+0x9c>
 800e366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e36a:	3307      	adds	r3, #7
 800e36c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	1e5a      	subs	r2, r3, #1
 800e374:	62ba      	str	r2, [r7, #40]	; 0x28
 800e376:	3330      	adds	r3, #48	; 0x30
 800e378:	443b      	add	r3, r7
 800e37a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e37e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	091b      	lsrs	r3, r3, #4
 800e386:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1df      	bne.n	800e34e <gen_numname+0x7a>
	ns[i] = '~';
 800e38e:	f107 0214 	add.w	r2, r7, #20
 800e392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e394:	4413      	add	r3, r2
 800e396:	227e      	movs	r2, #126	; 0x7e
 800e398:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e39a:	2300      	movs	r3, #0
 800e39c:	627b      	str	r3, [r7, #36]	; 0x24
 800e39e:	e002      	b.n	800e3a6 <gen_numname+0xd2>
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d205      	bcs.n	800e3ba <gen_numname+0xe6>
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	4413      	add	r3, r2
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b20      	cmp	r3, #32
 800e3b8:	d1f2      	bne.n	800e3a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	2b07      	cmp	r3, #7
 800e3be:	d807      	bhi.n	800e3d0 <gen_numname+0xfc>
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	1c5a      	adds	r2, r3, #1
 800e3c4:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3c6:	3330      	adds	r3, #48	; 0x30
 800e3c8:	443b      	add	r3, r7
 800e3ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e3ce:	e000      	b.n	800e3d2 <gen_numname+0xfe>
 800e3d0:	2120      	movs	r1, #32
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	627a      	str	r2, [r7, #36]	; 0x24
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	460a      	mov	r2, r1
 800e3de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	d9e9      	bls.n	800e3ba <gen_numname+0xe6>
}
 800e3e6:	bf00      	nop
 800e3e8:	bf00      	nop
 800e3ea:	3730      	adds	r7, #48	; 0x30
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e3fc:	230b      	movs	r3, #11
 800e3fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	b2da      	uxtb	r2, r3
 800e404:	0852      	lsrs	r2, r2, #1
 800e406:	01db      	lsls	r3, r3, #7
 800e408:	4313      	orrs	r3, r2
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	1c59      	adds	r1, r3, #1
 800e410:	6079      	str	r1, [r7, #4]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4413      	add	r3, r2
 800e416:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	60bb      	str	r3, [r7, #8]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1ed      	bne.n	800e400 <sum_sfn+0x10>
	return sum;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b086      	sub	sp, #24
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e43c:	2304      	movs	r3, #4
 800e43e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e446:	23ff      	movs	r3, #255	; 0xff
 800e448:	757b      	strb	r3, [r7, #21]
 800e44a:	23ff      	movs	r3, #255	; 0xff
 800e44c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e44e:	e081      	b.n	800e554 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	4619      	mov	r1, r3
 800e456:	6938      	ldr	r0, [r7, #16]
 800e458:	f7ff f838 	bl	800d4cc <move_window>
 800e45c:	4603      	mov	r3, r0
 800e45e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e460:	7dfb      	ldrb	r3, [r7, #23]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d17c      	bne.n	800e560 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e46e:	7dbb      	ldrb	r3, [r7, #22]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e474:	2304      	movs	r3, #4
 800e476:	75fb      	strb	r3, [r7, #23]
 800e478:	e077      	b.n	800e56a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	330b      	adds	r3, #11
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e486:	73fb      	strb	r3, [r7, #15]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7bfa      	ldrb	r2, [r7, #15]
 800e48c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e48e:	7dbb      	ldrb	r3, [r7, #22]
 800e490:	2be5      	cmp	r3, #229	; 0xe5
 800e492:	d00e      	beq.n	800e4b2 <dir_read+0x80>
 800e494:	7dbb      	ldrb	r3, [r7, #22]
 800e496:	2b2e      	cmp	r3, #46	; 0x2e
 800e498:	d00b      	beq.n	800e4b2 <dir_read+0x80>
 800e49a:	7bfb      	ldrb	r3, [r7, #15]
 800e49c:	f023 0320 	bic.w	r3, r3, #32
 800e4a0:	2b08      	cmp	r3, #8
 800e4a2:	bf0c      	ite	eq
 800e4a4:	2301      	moveq	r3, #1
 800e4a6:	2300      	movne	r3, #0
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d002      	beq.n	800e4b8 <dir_read+0x86>
				ord = 0xFF;
 800e4b2:	23ff      	movs	r3, #255	; 0xff
 800e4b4:	757b      	strb	r3, [r7, #21]
 800e4b6:	e044      	b.n	800e542 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	2b0f      	cmp	r3, #15
 800e4bc:	d12f      	bne.n	800e51e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e4be:	7dbb      	ldrb	r3, [r7, #22]
 800e4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00d      	beq.n	800e4e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a1b      	ldr	r3, [r3, #32]
 800e4cc:	7b5b      	ldrb	r3, [r3, #13]
 800e4ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
 800e4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4d6:	75bb      	strb	r3, [r7, #22]
 800e4d8:	7dbb      	ldrb	r3, [r7, #22]
 800e4da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	695a      	ldr	r2, [r3, #20]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e4e4:	7dba      	ldrb	r2, [r7, #22]
 800e4e6:	7d7b      	ldrb	r3, [r7, #21]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d115      	bne.n	800e518 <dir_read+0xe6>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6a1b      	ldr	r3, [r3, #32]
 800e4f0:	330d      	adds	r3, #13
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	7d3a      	ldrb	r2, [r7, #20]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d10e      	bne.n	800e518 <dir_read+0xe6>
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	691a      	ldr	r2, [r3, #16]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f7ff fe19 	bl	800e13c <pick_lfn>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <dir_read+0xe6>
 800e510:	7d7b      	ldrb	r3, [r7, #21]
 800e512:	3b01      	subs	r3, #1
 800e514:	b2db      	uxtb	r3, r3
 800e516:	e000      	b.n	800e51a <dir_read+0xe8>
 800e518:	23ff      	movs	r3, #255	; 0xff
 800e51a:	757b      	strb	r3, [r7, #21]
 800e51c:	e011      	b.n	800e542 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e51e:	7d7b      	ldrb	r3, [r7, #21]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d109      	bne.n	800e538 <dir_read+0x106>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a1b      	ldr	r3, [r3, #32]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7ff ff61 	bl	800e3f0 <sum_sfn>
 800e52e:	4603      	mov	r3, r0
 800e530:	461a      	mov	r2, r3
 800e532:	7d3b      	ldrb	r3, [r7, #20]
 800e534:	4293      	cmp	r3, r2
 800e536:	d015      	beq.n	800e564 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f04f 32ff 	mov.w	r2, #4294967295
 800e53e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e540:	e010      	b.n	800e564 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e542:	2100      	movs	r1, #0
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff fc2c 	bl	800dda2 <dir_next>
 800e54a:	4603      	mov	r3, r0
 800e54c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d109      	bne.n	800e568 <dir_read+0x136>
	while (dp->sect) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	69db      	ldr	r3, [r3, #28]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f47f af79 	bne.w	800e450 <dir_read+0x1e>
 800e55e:	e004      	b.n	800e56a <dir_read+0x138>
		if (res != FR_OK) break;
 800e560:	bf00      	nop
 800e562:	e002      	b.n	800e56a <dir_read+0x138>
					break;
 800e564:	bf00      	nop
 800e566:	e000      	b.n	800e56a <dir_read+0x138>
		if (res != FR_OK) break;
 800e568:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e56a:	7dfb      	ldrb	r3, [r7, #23]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <dir_read+0x144>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	61da      	str	r2, [r3, #28]
	return res;
 800e576:	7dfb      	ldrb	r3, [r7, #23]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e58e:	2100      	movs	r1, #0
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff fb7d 	bl	800dc90 <dir_sdi>
 800e596:	4603      	mov	r3, r0
 800e598:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <dir_find+0x24>
 800e5a0:	7dfb      	ldrb	r3, [r7, #23]
 800e5a2:	e0a9      	b.n	800e6f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5a4:	23ff      	movs	r3, #255	; 0xff
 800e5a6:	753b      	strb	r3, [r7, #20]
 800e5a8:	7d3b      	ldrb	r3, [r7, #20]
 800e5aa:	757b      	strb	r3, [r7, #21]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	69db      	ldr	r3, [r3, #28]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	6938      	ldr	r0, [r7, #16]
 800e5bc:	f7fe ff86 	bl	800d4cc <move_window>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5c4:	7dfb      	ldrb	r3, [r7, #23]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f040 8090 	bne.w	800e6ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a1b      	ldr	r3, [r3, #32]
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e5d4:	7dbb      	ldrb	r3, [r7, #22]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d102      	bne.n	800e5e0 <dir_find+0x60>
 800e5da:	2304      	movs	r3, #4
 800e5dc:	75fb      	strb	r3, [r7, #23]
 800e5de:	e08a      	b.n	800e6f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a1b      	ldr	r3, [r3, #32]
 800e5e4:	330b      	adds	r3, #11
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5ec:	73fb      	strb	r3, [r7, #15]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	7bfa      	ldrb	r2, [r7, #15]
 800e5f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e5f4:	7dbb      	ldrb	r3, [r7, #22]
 800e5f6:	2be5      	cmp	r3, #229	; 0xe5
 800e5f8:	d007      	beq.n	800e60a <dir_find+0x8a>
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
 800e5fc:	f003 0308 	and.w	r3, r3, #8
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <dir_find+0x98>
 800e604:	7bfb      	ldrb	r3, [r7, #15]
 800e606:	2b0f      	cmp	r3, #15
 800e608:	d006      	beq.n	800e618 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e60a:	23ff      	movs	r3, #255	; 0xff
 800e60c:	757b      	strb	r3, [r7, #21]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f04f 32ff 	mov.w	r2, #4294967295
 800e614:	631a      	str	r2, [r3, #48]	; 0x30
 800e616:	e05e      	b.n	800e6d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	2b0f      	cmp	r3, #15
 800e61c:	d136      	bne.n	800e68c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d154      	bne.n	800e6d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e62c:	7dbb      	ldrb	r3, [r7, #22]
 800e62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00d      	beq.n	800e652 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	7b5b      	ldrb	r3, [r3, #13]
 800e63c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e63e:	7dbb      	ldrb	r3, [r7, #22]
 800e640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e644:	75bb      	strb	r3, [r7, #22]
 800e646:	7dbb      	ldrb	r3, [r7, #22]
 800e648:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	695a      	ldr	r2, [r3, #20]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e652:	7dba      	ldrb	r2, [r7, #22]
 800e654:	7d7b      	ldrb	r3, [r7, #21]
 800e656:	429a      	cmp	r2, r3
 800e658:	d115      	bne.n	800e686 <dir_find+0x106>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a1b      	ldr	r3, [r3, #32]
 800e65e:	330d      	adds	r3, #13
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	7d3a      	ldrb	r2, [r7, #20]
 800e664:	429a      	cmp	r2, r3
 800e666:	d10e      	bne.n	800e686 <dir_find+0x106>
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	691a      	ldr	r2, [r3, #16]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a1b      	ldr	r3, [r3, #32]
 800e670:	4619      	mov	r1, r3
 800e672:	4610      	mov	r0, r2
 800e674:	f7ff fcf2 	bl	800e05c <cmp_lfn>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <dir_find+0x106>
 800e67e:	7d7b      	ldrb	r3, [r7, #21]
 800e680:	3b01      	subs	r3, #1
 800e682:	b2db      	uxtb	r3, r3
 800e684:	e000      	b.n	800e688 <dir_find+0x108>
 800e686:	23ff      	movs	r3, #255	; 0xff
 800e688:	757b      	strb	r3, [r7, #21]
 800e68a:	e024      	b.n	800e6d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e68c:	7d7b      	ldrb	r3, [r7, #21]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d109      	bne.n	800e6a6 <dir_find+0x126>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6a1b      	ldr	r3, [r3, #32]
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff feaa 	bl	800e3f0 <sum_sfn>
 800e69c:	4603      	mov	r3, r0
 800e69e:	461a      	mov	r2, r3
 800e6a0:	7d3b      	ldrb	r3, [r7, #20]
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d024      	beq.n	800e6f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e6ac:	f003 0301 	and.w	r3, r3, #1
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10a      	bne.n	800e6ca <dir_find+0x14a>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6a18      	ldr	r0, [r3, #32]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3324      	adds	r3, #36	; 0x24
 800e6bc:	220b      	movs	r2, #11
 800e6be:	4619      	mov	r1, r3
 800e6c0:	f7fe fd12 	bl	800d0e8 <mem_cmp>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d014      	beq.n	800e6f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6ca:	23ff      	movs	r3, #255	; 0xff
 800e6cc:	757b      	strb	r3, [r7, #21]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff fb62 	bl	800dda2 <dir_next>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e6e2:	7dfb      	ldrb	r3, [r7, #23]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f43f af65 	beq.w	800e5b4 <dir_find+0x34>
 800e6ea:	e004      	b.n	800e6f6 <dir_find+0x176>
		if (res != FR_OK) break;
 800e6ec:	bf00      	nop
 800e6ee:	e002      	b.n	800e6f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e6f0:	bf00      	nop
 800e6f2:	e000      	b.n	800e6f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e6f4:	bf00      	nop

	return res;
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08c      	sub	sp, #48	; 0x30
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e714:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <dir_register+0x20>
 800e71c:	2306      	movs	r3, #6
 800e71e:	e0e0      	b.n	800e8e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e720:	2300      	movs	r3, #0
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
 800e724:	e002      	b.n	800e72c <dir_register+0x2c>
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	3301      	adds	r3, #1
 800e72a:	627b      	str	r3, [r7, #36]	; 0x24
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	691a      	ldr	r2, [r3, #16]
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	4413      	add	r3, r2
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1f4      	bne.n	800e726 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e742:	f107 030c 	add.w	r3, r7, #12
 800e746:	220c      	movs	r2, #12
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fe fc91 	bl	800d070 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	f003 0301 	and.w	r3, r3, #1
 800e754:	2b00      	cmp	r3, #0
 800e756:	d032      	beq.n	800e7be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2240      	movs	r2, #64	; 0x40
 800e75c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e760:	2301      	movs	r3, #1
 800e762:	62bb      	str	r3, [r7, #40]	; 0x28
 800e764:	e016      	b.n	800e794 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	691a      	ldr	r2, [r3, #16]
 800e770:	f107 010c 	add.w	r1, r7, #12
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	f7ff fdad 	bl	800e2d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff ff00 	bl	800e580 <dir_find>
 800e780:	4603      	mov	r3, r0
 800e782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d106      	bne.n	800e79c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	3301      	adds	r3, #1
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	2b63      	cmp	r3, #99	; 0x63
 800e798:	d9e5      	bls.n	800e766 <dir_register+0x66>
 800e79a:	e000      	b.n	800e79e <dir_register+0x9e>
			if (res != FR_OK) break;
 800e79c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	2b64      	cmp	r3, #100	; 0x64
 800e7a2:	d101      	bne.n	800e7a8 <dir_register+0xa8>
 800e7a4:	2307      	movs	r3, #7
 800e7a6:	e09c      	b.n	800e8e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e7a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7ac:	2b04      	cmp	r3, #4
 800e7ae:	d002      	beq.n	800e7b6 <dir_register+0xb6>
 800e7b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7b4:	e095      	b.n	800e8e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e7b6:	7dfa      	ldrb	r2, [r7, #23]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	f003 0302 	and.w	r3, r3, #2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <dir_register+0xd8>
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	330c      	adds	r3, #12
 800e7cc:	4a47      	ldr	r2, [pc, #284]	; (800e8ec <dir_register+0x1ec>)
 800e7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d2:	089b      	lsrs	r3, r3, #2
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	e000      	b.n	800e7da <dir_register+0xda>
 800e7d8:	2301      	movs	r3, #1
 800e7da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e7dc:	6a39      	ldr	r1, [r7, #32]
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff fbb5 	bl	800df4e <dir_alloc>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e7ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d148      	bne.n	800e884 <dir_register+0x184>
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	623b      	str	r3, [r7, #32]
 800e7f8:	6a3b      	ldr	r3, [r7, #32]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d042      	beq.n	800e884 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695a      	ldr	r2, [r3, #20]
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	015b      	lsls	r3, r3, #5
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff fa40 	bl	800dc90 <dir_sdi>
 800e810:	4603      	mov	r3, r0
 800e812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d132      	bne.n	800e884 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3324      	adds	r3, #36	; 0x24
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff fde4 	bl	800e3f0 <sum_sfn>
 800e828:	4603      	mov	r3, r0
 800e82a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	4619      	mov	r1, r3
 800e832:	69f8      	ldr	r0, [r7, #28]
 800e834:	f7fe fe4a 	bl	800d4cc <move_window>
 800e838:	4603      	mov	r3, r0
 800e83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e83e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e842:	2b00      	cmp	r3, #0
 800e844:	d11d      	bne.n	800e882 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	6918      	ldr	r0, [r3, #16]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a19      	ldr	r1, [r3, #32]
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	b2da      	uxtb	r2, r3
 800e852:	7efb      	ldrb	r3, [r7, #27]
 800e854:	f7ff fcd6 	bl	800e204 <put_lfn>
				fs->wflag = 1;
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	2201      	movs	r2, #1
 800e85c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e85e:	2100      	movs	r1, #0
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff fa9e 	bl	800dda2 <dir_next>
 800e866:	4603      	mov	r3, r0
 800e868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e870:	2b00      	cmp	r3, #0
 800e872:	d107      	bne.n	800e884 <dir_register+0x184>
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	3b01      	subs	r3, #1
 800e878:	623b      	str	r3, [r7, #32]
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d1d5      	bne.n	800e82c <dir_register+0x12c>
 800e880:	e000      	b.n	800e884 <dir_register+0x184>
				if (res != FR_OK) break;
 800e882:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d128      	bne.n	800e8de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	69db      	ldr	r3, [r3, #28]
 800e890:	4619      	mov	r1, r3
 800e892:	69f8      	ldr	r0, [r7, #28]
 800e894:	f7fe fe1a 	bl	800d4cc <move_window>
 800e898:	4603      	mov	r3, r0
 800e89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d11b      	bne.n	800e8de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fe fbff 	bl	800d0b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a18      	ldr	r0, [r3, #32]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	3324      	adds	r3, #36	; 0x24
 800e8bc:	220b      	movs	r2, #11
 800e8be:	4619      	mov	r1, r3
 800e8c0:	f7fe fbd6 	bl	800d070 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	330c      	adds	r3, #12
 800e8d0:	f002 0218 	and.w	r2, r2, #24
 800e8d4:	b2d2      	uxtb	r2, r2
 800e8d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e8de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3730      	adds	r7, #48	; 0x30
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	4ec4ec4f 	.word	0x4ec4ec4f

0800e8f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b088      	sub	sp, #32
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f000 80c9 	beq.w	800eaa2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e918:	d032      	beq.n	800e980 <get_fileinfo+0x90>
			i = j = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e922:	e01b      	b.n	800e95c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e924:	89fb      	ldrh	r3, [r7, #14]
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 fdb3 	bl	8010494 <ff_convert>
 800e92e:	4603      	mov	r3, r0
 800e930:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e932:	89fb      	ldrh	r3, [r7, #14]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d102      	bne.n	800e93e <get_fileinfo+0x4e>
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e01a      	b.n	800e974 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	2bfe      	cmp	r3, #254	; 0xfe
 800e942:	d902      	bls.n	800e94a <get_fileinfo+0x5a>
 800e944:	2300      	movs	r3, #0
 800e946:	61fb      	str	r3, [r7, #28]
 800e948:	e014      	b.n	800e974 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	61fa      	str	r2, [r7, #28]
 800e950:	89fa      	ldrh	r2, [r7, #14]
 800e952:	b2d1      	uxtb	r1, r2
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	4413      	add	r3, r2
 800e958:	460a      	mov	r2, r1
 800e95a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	691a      	ldr	r2, [r3, #16]
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	1c59      	adds	r1, r3, #1
 800e964:	61b9      	str	r1, [r7, #24]
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	4413      	add	r3, r2
 800e96a:	881b      	ldrh	r3, [r3, #0]
 800e96c:	81fb      	strh	r3, [r7, #14]
 800e96e:	89fb      	ldrh	r3, [r7, #14]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1d7      	bne.n	800e924 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	4413      	add	r3, r2
 800e97a:	3316      	adds	r3, #22
 800e97c:	2200      	movs	r2, #0
 800e97e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	61bb      	str	r3, [r7, #24]
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e988:	683a      	ldr	r2, [r7, #0]
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	4413      	add	r3, r2
 800e98e:	3316      	adds	r3, #22
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e994:	e04c      	b.n	800ea30 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6a1a      	ldr	r2, [r3, #32]
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	1c59      	adds	r1, r3, #1
 800e99e:	61f9      	str	r1, [r7, #28]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	2b20      	cmp	r3, #32
 800e9aa:	d100      	bne.n	800e9ae <get_fileinfo+0xbe>
 800e9ac:	e040      	b.n	800ea30 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	2b05      	cmp	r3, #5
 800e9b2:	d101      	bne.n	800e9b8 <get_fileinfo+0xc8>
 800e9b4:	23e5      	movs	r3, #229	; 0xe5
 800e9b6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	2b09      	cmp	r3, #9
 800e9bc:	d10f      	bne.n	800e9de <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e9be:	89bb      	ldrh	r3, [r7, #12]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d105      	bne.n	800e9d0 <get_fileinfo+0xe0>
 800e9c4:	683a      	ldr	r2, [r7, #0]
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	3316      	adds	r3, #22
 800e9cc:	222e      	movs	r2, #46	; 0x2e
 800e9ce:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e9d0:	69bb      	ldr	r3, [r7, #24]
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	61ba      	str	r2, [r7, #24]
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	4413      	add	r3, r2
 800e9da:	222e      	movs	r2, #46	; 0x2e
 800e9dc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3309      	adds	r3, #9
 800e9e6:	7dfa      	ldrb	r2, [r7, #23]
 800e9e8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e9ea:	89bb      	ldrh	r3, [r7, #12]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d11c      	bne.n	800ea2a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
 800e9f2:	2b40      	cmp	r3, #64	; 0x40
 800e9f4:	d913      	bls.n	800ea1e <get_fileinfo+0x12e>
 800e9f6:	7dfb      	ldrb	r3, [r7, #23]
 800e9f8:	2b5a      	cmp	r3, #90	; 0x5a
 800e9fa:	d810      	bhi.n	800ea1e <get_fileinfo+0x12e>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	330c      	adds	r3, #12
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	461a      	mov	r2, r3
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	2b08      	cmp	r3, #8
 800ea0a:	d901      	bls.n	800ea10 <get_fileinfo+0x120>
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	e000      	b.n	800ea12 <get_fileinfo+0x122>
 800ea10:	2308      	movs	r3, #8
 800ea12:	4013      	ands	r3, r2
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ea18:	7dfb      	ldrb	r3, [r7, #23]
 800ea1a:	3320      	adds	r3, #32
 800ea1c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	4413      	add	r3, r2
 800ea24:	3316      	adds	r3, #22
 800ea26:	7dfa      	ldrb	r2, [r7, #23]
 800ea28:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	2b0a      	cmp	r3, #10
 800ea34:	d9af      	bls.n	800e996 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ea36:	89bb      	ldrh	r3, [r7, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d10d      	bne.n	800ea58 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ea3c:	683a      	ldr	r2, [r7, #0]
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	4413      	add	r3, r2
 800ea42:	3316      	adds	r3, #22
 800ea44:	2200      	movs	r2, #0
 800ea46:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a1b      	ldr	r3, [r3, #32]
 800ea4c:	330c      	adds	r3, #12
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d101      	bne.n	800ea58 <get_fileinfo+0x168>
 800ea54:	2300      	movs	r3, #0
 800ea56:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	3309      	adds	r3, #9
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a1b      	ldr	r3, [r3, #32]
 800ea68:	7ada      	ldrb	r2, [r3, #11]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	331c      	adds	r3, #28
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe fa91 	bl	800cf9c <ld_dword>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a1b      	ldr	r3, [r3, #32]
 800ea84:	3316      	adds	r3, #22
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe fa88 	bl	800cf9c <ld_dword>
 800ea8c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	80da      	strh	r2, [r3, #6]
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	0c1b      	lsrs	r3, r3, #16
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	809a      	strh	r2, [r3, #4]
 800eaa0:	e000      	b.n	800eaa4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eaa2:	bf00      	nop
}
 800eaa4:	3720      	adds	r7, #32
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
	...

0800eaac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b08a      	sub	sp, #40	; 0x28
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	60fb      	str	r3, [r7, #12]
 800eac4:	2300      	movs	r3, #0
 800eac6:	617b      	str	r3, [r7, #20]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	61ba      	str	r2, [r7, #24]
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	4413      	add	r3, r2
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eadc:	2b1f      	cmp	r3, #31
 800eade:	d940      	bls.n	800eb62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eae2:	2b2f      	cmp	r3, #47	; 0x2f
 800eae4:	d006      	beq.n	800eaf4 <create_name+0x48>
 800eae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eae8:	2b5c      	cmp	r3, #92	; 0x5c
 800eaea:	d110      	bne.n	800eb0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eaec:	e002      	b.n	800eaf4 <create_name+0x48>
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	61bb      	str	r3, [r7, #24]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	4413      	add	r3, r2
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2b2f      	cmp	r3, #47	; 0x2f
 800eafe:	d0f6      	beq.n	800eaee <create_name+0x42>
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b5c      	cmp	r3, #92	; 0x5c
 800eb0a:	d0f0      	beq.n	800eaee <create_name+0x42>
			break;
 800eb0c:	e02a      	b.n	800eb64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2bfe      	cmp	r3, #254	; 0xfe
 800eb12:	d901      	bls.n	800eb18 <create_name+0x6c>
 800eb14:	2306      	movs	r3, #6
 800eb16:	e17d      	b.n	800ee14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eb18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eb1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb20:	2101      	movs	r1, #1
 800eb22:	4618      	mov	r0, r3
 800eb24:	f001 fcb6 	bl	8010494 <ff_convert>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eb2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <create_name+0x8a>
 800eb32:	2306      	movs	r3, #6
 800eb34:	e16e      	b.n	800ee14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eb36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb38:	2b7f      	cmp	r3, #127	; 0x7f
 800eb3a:	d809      	bhi.n	800eb50 <create_name+0xa4>
 800eb3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb3e:	4619      	mov	r1, r3
 800eb40:	488d      	ldr	r0, [pc, #564]	; (800ed78 <create_name+0x2cc>)
 800eb42:	f7fe faf8 	bl	800d136 <chk_chr>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <create_name+0xa4>
 800eb4c:	2306      	movs	r3, #6
 800eb4e:	e161      	b.n	800ee14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	617a      	str	r2, [r7, #20]
 800eb56:	005b      	lsls	r3, r3, #1
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eb60:	e7b4      	b.n	800eacc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eb62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	441a      	add	r2, r3
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eb6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb70:	2b1f      	cmp	r3, #31
 800eb72:	d801      	bhi.n	800eb78 <create_name+0xcc>
 800eb74:	2304      	movs	r3, #4
 800eb76:	e000      	b.n	800eb7a <create_name+0xce>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eb7e:	e011      	b.n	800eba4 <create_name+0xf8>
		w = lfn[di - 1];
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb86:	3b01      	subs	r3, #1
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	881b      	ldrh	r3, [r3, #0]
 800eb90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800eb92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb94:	2b20      	cmp	r3, #32
 800eb96:	d002      	beq.n	800eb9e <create_name+0xf2>
 800eb98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb9a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb9c:	d106      	bne.n	800ebac <create_name+0x100>
		di--;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1ea      	bne.n	800eb80 <create_name+0xd4>
 800ebaa:	e000      	b.n	800ebae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ebac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	005b      	lsls	r3, r3, #1
 800ebb2:	68fa      	ldr	r2, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <create_name+0x118>
 800ebc0:	2306      	movs	r3, #6
 800ebc2:	e127      	b.n	800ee14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	3324      	adds	r3, #36	; 0x24
 800ebc8:	220b      	movs	r2, #11
 800ebca:	2120      	movs	r1, #32
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fe fa70 	bl	800d0b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	61bb      	str	r3, [r7, #24]
 800ebd6:	e002      	b.n	800ebde <create_name+0x132>
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	61bb      	str	r3, [r7, #24]
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	4413      	add	r3, r2
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	2b20      	cmp	r3, #32
 800ebea:	d0f5      	beq.n	800ebd8 <create_name+0x12c>
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	2b2e      	cmp	r3, #46	; 0x2e
 800ebf8:	d0ee      	beq.n	800ebd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d009      	beq.n	800ec14 <create_name+0x168>
 800ec00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec04:	f043 0303 	orr.w	r3, r3, #3
 800ec08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ec0c:	e002      	b.n	800ec14 <create_name+0x168>
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	617b      	str	r3, [r7, #20]
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d009      	beq.n	800ec2e <create_name+0x182>
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec20:	3b01      	subs	r3, #1
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4413      	add	r3, r2
 800ec28:	881b      	ldrh	r3, [r3, #0]
 800ec2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ec2c:	d1ef      	bne.n	800ec0e <create_name+0x162>

	i = b = 0; ni = 8;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec34:	2300      	movs	r3, #0
 800ec36:	623b      	str	r3, [r7, #32]
 800ec38:	2308      	movs	r3, #8
 800ec3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	1c5a      	adds	r2, r3, #1
 800ec40:	61ba      	str	r2, [r7, #24]
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	4413      	add	r3, r2
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ec4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f000 8090 	beq.w	800ed74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ec54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec56:	2b20      	cmp	r3, #32
 800ec58:	d006      	beq.n	800ec68 <create_name+0x1bc>
 800ec5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ec5e:	d10a      	bne.n	800ec76 <create_name+0x1ca>
 800ec60:	69ba      	ldr	r2, [r7, #24]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d006      	beq.n	800ec76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ec68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec6c:	f043 0303 	orr.w	r3, r3, #3
 800ec70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec74:	e07d      	b.n	800ed72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ec76:	6a3a      	ldr	r2, [r7, #32]
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d203      	bcs.n	800ec86 <create_name+0x1da>
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d123      	bne.n	800ecce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	2b0b      	cmp	r3, #11
 800ec8a:	d106      	bne.n	800ec9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ec8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec90:	f043 0303 	orr.w	r3, r3, #3
 800ec94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec98:	e075      	b.n	800ed86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ec9a:	69ba      	ldr	r2, [r7, #24]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d005      	beq.n	800ecae <create_name+0x202>
 800eca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eca6:	f043 0303 	orr.w	r3, r3, #3
 800ecaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ecae:	69ba      	ldr	r2, [r7, #24]
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d866      	bhi.n	800ed84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	2308      	movs	r3, #8
 800ecbc:	623b      	str	r3, [r7, #32]
 800ecbe:	230b      	movs	r3, #11
 800ecc0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ecc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eccc:	e051      	b.n	800ed72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ecce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecd0:	2b7f      	cmp	r3, #127	; 0x7f
 800ecd2:	d914      	bls.n	800ecfe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ecd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 fbdb 	bl	8010494 <ff_convert>
 800ecde:	4603      	mov	r3, r0
 800ece0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ece2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <create_name+0x246>
 800ece8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecea:	3b80      	subs	r3, #128	; 0x80
 800ecec:	4a23      	ldr	r2, [pc, #140]	; (800ed7c <create_name+0x2d0>)
 800ecee:	5cd3      	ldrb	r3, [r2, r3]
 800ecf0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ecf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf6:	f043 0302 	orr.w	r3, r3, #2
 800ecfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ecfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d007      	beq.n	800ed14 <create_name+0x268>
 800ed04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed06:	4619      	mov	r1, r3
 800ed08:	481d      	ldr	r0, [pc, #116]	; (800ed80 <create_name+0x2d4>)
 800ed0a:	f7fe fa14 	bl	800d136 <chk_chr>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d008      	beq.n	800ed26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ed14:	235f      	movs	r3, #95	; 0x5f
 800ed16:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ed18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed1c:	f043 0303 	orr.w	r3, r3, #3
 800ed20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed24:	e01b      	b.n	800ed5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ed26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed28:	2b40      	cmp	r3, #64	; 0x40
 800ed2a:	d909      	bls.n	800ed40 <create_name+0x294>
 800ed2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed2e:	2b5a      	cmp	r3, #90	; 0x5a
 800ed30:	d806      	bhi.n	800ed40 <create_name+0x294>
					b |= 2;
 800ed32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed36:	f043 0302 	orr.w	r3, r3, #2
 800ed3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed3e:	e00e      	b.n	800ed5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ed40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed42:	2b60      	cmp	r3, #96	; 0x60
 800ed44:	d90b      	bls.n	800ed5e <create_name+0x2b2>
 800ed46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed48:	2b7a      	cmp	r3, #122	; 0x7a
 800ed4a:	d808      	bhi.n	800ed5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ed4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed50:	f043 0301 	orr.w	r3, r3, #1
 800ed54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed5a:	3b20      	subs	r3, #32
 800ed5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ed5e:	6a3b      	ldr	r3, [r7, #32]
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	623a      	str	r2, [r7, #32]
 800ed64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed66:	b2d1      	uxtb	r1, r2
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	460a      	mov	r2, r1
 800ed6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ed72:	e763      	b.n	800ec3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ed74:	bf00      	nop
 800ed76:	e006      	b.n	800ed86 <create_name+0x2da>
 800ed78:	08011ea8 	.word	0x08011ea8
 800ed7c:	08011f70 	.word	0x08011f70
 800ed80:	08011eb4 	.word	0x08011eb4
			if (si > di) break;			/* No extension */
 800ed84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ed8c:	2be5      	cmp	r3, #229	; 0xe5
 800ed8e:	d103      	bne.n	800ed98 <create_name+0x2ec>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2205      	movs	r2, #5
 800ed94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	2b08      	cmp	r3, #8
 800ed9c:	d104      	bne.n	800eda8 <create_name+0x2fc>
 800ed9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800eda8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edac:	f003 030c 	and.w	r3, r3, #12
 800edb0:	2b0c      	cmp	r3, #12
 800edb2:	d005      	beq.n	800edc0 <create_name+0x314>
 800edb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edb8:	f003 0303 	and.w	r3, r3, #3
 800edbc:	2b03      	cmp	r3, #3
 800edbe:	d105      	bne.n	800edcc <create_name+0x320>
 800edc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc4:	f043 0302 	orr.w	r3, r3, #2
 800edc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800edcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd0:	f003 0302 	and.w	r3, r3, #2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d117      	bne.n	800ee08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800edd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eddc:	f003 0303 	and.w	r3, r3, #3
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d105      	bne.n	800edf0 <create_name+0x344>
 800ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede8:	f043 0310 	orr.w	r3, r3, #16
 800edec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800edf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800edf4:	f003 030c 	and.w	r3, r3, #12
 800edf8:	2b04      	cmp	r3, #4
 800edfa:	d105      	bne.n	800ee08 <create_name+0x35c>
 800edfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee00:	f043 0308 	orr.w	r3, r3, #8
 800ee04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ee0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ee12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3728      	adds	r7, #40	; 0x28
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ee30:	e002      	b.n	800ee38 <follow_path+0x1c>
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	603b      	str	r3, [r7, #0]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ee3e:	d0f8      	beq.n	800ee32 <follow_path+0x16>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	2b5c      	cmp	r3, #92	; 0x5c
 800ee46:	d0f4      	beq.n	800ee32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	2b1f      	cmp	r3, #31
 800ee54:	d80a      	bhi.n	800ee6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2280      	movs	r2, #128	; 0x80
 800ee5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ee5e:	2100      	movs	r1, #0
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7fe ff15 	bl	800dc90 <dir_sdi>
 800ee66:	4603      	mov	r3, r0
 800ee68:	75fb      	strb	r3, [r7, #23]
 800ee6a:	e048      	b.n	800eefe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ee6c:	463b      	mov	r3, r7
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff fe1b 	bl	800eaac <create_name>
 800ee76:	4603      	mov	r3, r0
 800ee78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee7a:	7dfb      	ldrb	r3, [r7, #23]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d139      	bne.n	800eef4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff fb7d 	bl	800e580 <dir_find>
 800ee86:	4603      	mov	r3, r0
 800ee88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	d12c      	bne.n	800eef8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	f003 0304 	and.w	r3, r3, #4
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d127      	bne.n	800eef8 <follow_path+0xdc>
 800eea8:	2305      	movs	r3, #5
 800eeaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eeac:	e024      	b.n	800eef8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eeae:	7afb      	ldrb	r3, [r7, #11]
 800eeb0:	f003 0304 	and.w	r3, r3, #4
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d121      	bne.n	800eefc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	799b      	ldrb	r3, [r3, #6]
 800eebc:	f003 0310 	and.w	r3, r3, #16
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d102      	bne.n	800eeca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eec4:	2305      	movs	r3, #5
 800eec6:	75fb      	strb	r3, [r7, #23]
 800eec8:	e019      	b.n	800eefe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	8992      	ldrh	r2, [r2, #12]
 800eed8:	fbb3 f0f2 	udiv	r0, r3, r2
 800eedc:	fb00 f202 	mul.w	r2, r0, r2
 800eee0:	1a9b      	subs	r3, r3, r2
 800eee2:	440b      	add	r3, r1
 800eee4:	4619      	mov	r1, r3
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f7ff f878 	bl	800dfdc <ld_clust>
 800eeec:	4602      	mov	r2, r0
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eef2:	e7bb      	b.n	800ee6c <follow_path+0x50>
			if (res != FR_OK) break;
 800eef4:	bf00      	nop
 800eef6:	e002      	b.n	800eefe <follow_path+0xe2>
				break;
 800eef8:	bf00      	nop
 800eefa:	e000      	b.n	800eefe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eefc:	bf00      	nop
			}
		}
	}

	return res;
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b087      	sub	sp, #28
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ef10:	f04f 33ff 	mov.w	r3, #4294967295
 800ef14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d031      	beq.n	800ef82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	e002      	b.n	800ef2c <get_ldnumber+0x24>
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	617b      	str	r3, [r7, #20]
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	2b1f      	cmp	r3, #31
 800ef32:	d903      	bls.n	800ef3c <get_ldnumber+0x34>
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b3a      	cmp	r3, #58	; 0x3a
 800ef3a:	d1f4      	bne.n	800ef26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b3a      	cmp	r3, #58	; 0x3a
 800ef42:	d11c      	bne.n	800ef7e <get_ldnumber+0x76>
			tp = *path;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	1c5a      	adds	r2, r3, #1
 800ef4e:	60fa      	str	r2, [r7, #12]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	3b30      	subs	r3, #48	; 0x30
 800ef54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	2b09      	cmp	r3, #9
 800ef5a:	d80e      	bhi.n	800ef7a <get_ldnumber+0x72>
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d10a      	bne.n	800ef7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d107      	bne.n	800ef7a <get_ldnumber+0x72>
					vol = (int)i;
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	3301      	adds	r3, #1
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	e002      	b.n	800ef84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ef7e:	2300      	movs	r3, #0
 800ef80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ef82:	693b      	ldr	r3, [r7, #16]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	371c      	adds	r7, #28
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	70da      	strb	r2, [r3, #3]
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f04f 32ff 	mov.w	r2, #4294967295
 800efa6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe fa8e 	bl	800d4cc <move_window>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <check_fs+0x2a>
 800efb6:	2304      	movs	r3, #4
 800efb8:	e038      	b.n	800f02c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3338      	adds	r3, #56	; 0x38
 800efbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fd ffd2 	bl	800cf6c <ld_word>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
 800efcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d001      	beq.n	800efd8 <check_fs+0x48>
 800efd4:	2303      	movs	r3, #3
 800efd6:	e029      	b.n	800f02c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efde:	2be9      	cmp	r3, #233	; 0xe9
 800efe0:	d009      	beq.n	800eff6 <check_fs+0x66>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efe8:	2beb      	cmp	r3, #235	; 0xeb
 800efea:	d11e      	bne.n	800f02a <check_fs+0x9a>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eff2:	2b90      	cmp	r3, #144	; 0x90
 800eff4:	d119      	bne.n	800f02a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	3338      	adds	r3, #56	; 0x38
 800effa:	3336      	adds	r3, #54	; 0x36
 800effc:	4618      	mov	r0, r3
 800effe:	f7fd ffcd 	bl	800cf9c <ld_dword>
 800f002:	4603      	mov	r3, r0
 800f004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f008:	4a0a      	ldr	r2, [pc, #40]	; (800f034 <check_fs+0xa4>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d101      	bne.n	800f012 <check_fs+0x82>
 800f00e:	2300      	movs	r3, #0
 800f010:	e00c      	b.n	800f02c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3338      	adds	r3, #56	; 0x38
 800f016:	3352      	adds	r3, #82	; 0x52
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fd ffbf 	bl	800cf9c <ld_dword>
 800f01e:	4603      	mov	r3, r0
 800f020:	4a05      	ldr	r2, [pc, #20]	; (800f038 <check_fs+0xa8>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d101      	bne.n	800f02a <check_fs+0x9a>
 800f026:	2300      	movs	r3, #0
 800f028:	e000      	b.n	800f02c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f02a:	2302      	movs	r3, #2
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	00544146 	.word	0x00544146
 800f038:	33544146 	.word	0x33544146

0800f03c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b096      	sub	sp, #88	; 0x58
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	4613      	mov	r3, r2
 800f048:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2200      	movs	r2, #0
 800f04e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f7ff ff59 	bl	800ef08 <get_ldnumber>
 800f056:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	da01      	bge.n	800f062 <find_volume+0x26>
 800f05e:	230b      	movs	r3, #11
 800f060:	e265      	b.n	800f52e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f062:	4a9f      	ldr	r2, [pc, #636]	; (800f2e0 <find_volume+0x2a4>)
 800f064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f06a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <find_volume+0x3a>
 800f072:	230c      	movs	r3, #12
 800f074:	e25b      	b.n	800f52e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f07a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	f023 0301 	bic.w	r3, r3, #1
 800f082:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d01a      	beq.n	800f0c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	785b      	ldrb	r3, [r3, #1]
 800f090:	4618      	mov	r0, r3
 800f092:	f7fd fecd 	bl	800ce30 <disk_status>
 800f096:	4603      	mov	r3, r0
 800f098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f09c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0a0:	f003 0301 	and.w	r3, r3, #1
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d10c      	bne.n	800f0c2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f0a8:	79fb      	ldrb	r3, [r7, #7]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d007      	beq.n	800f0be <find_volume+0x82>
 800f0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0b2:	f003 0304 	and.w	r3, r3, #4
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f0ba:	230a      	movs	r3, #10
 800f0bc:	e237      	b.n	800f52e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f0be:	2300      	movs	r3, #0
 800f0c0:	e235      	b.n	800f52e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	785b      	ldrb	r3, [r3, #1]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fd fec5 	bl	800ce64 <disk_initialize>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f0e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0e4:	f003 0301 	and.w	r3, r3, #1
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d001      	beq.n	800f0f0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e21e      	b.n	800f52e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f0f0:	79fb      	ldrb	r3, [r7, #7]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d007      	beq.n	800f106 <find_volume+0xca>
 800f0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0fa:	f003 0304 	and.w	r3, r3, #4
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f102:	230a      	movs	r3, #10
 800f104:	e213      	b.n	800f52e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f108:	7858      	ldrb	r0, [r3, #1]
 800f10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10c:	330c      	adds	r3, #12
 800f10e:	461a      	mov	r2, r3
 800f110:	2102      	movs	r1, #2
 800f112:	f7fd ff0d 	bl	800cf30 <disk_ioctl>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <find_volume+0xe4>
 800f11c:	2301      	movs	r3, #1
 800f11e:	e206      	b.n	800f52e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	899b      	ldrh	r3, [r3, #12]
 800f124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f128:	d80d      	bhi.n	800f146 <find_volume+0x10a>
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	899b      	ldrh	r3, [r3, #12]
 800f12e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f132:	d308      	bcc.n	800f146 <find_volume+0x10a>
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	899b      	ldrh	r3, [r3, #12]
 800f138:	461a      	mov	r2, r3
 800f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13c:	899b      	ldrh	r3, [r3, #12]
 800f13e:	3b01      	subs	r3, #1
 800f140:	4013      	ands	r3, r2
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <find_volume+0x10e>
 800f146:	2301      	movs	r3, #1
 800f148:	e1f1      	b.n	800f52e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f14e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f150:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f152:	f7ff ff1d 	bl	800ef90 <check_fs>
 800f156:	4603      	mov	r3, r0
 800f158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f160:	2b02      	cmp	r3, #2
 800f162:	d149      	bne.n	800f1f8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f164:	2300      	movs	r3, #0
 800f166:	643b      	str	r3, [r7, #64]	; 0x40
 800f168:	e01e      	b.n	800f1a8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f172:	011b      	lsls	r3, r3, #4
 800f174:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f178:	4413      	add	r3, r2
 800f17a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17e:	3304      	adds	r3, #4
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d006      	beq.n	800f194 <find_volume+0x158>
 800f186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f188:	3308      	adds	r3, #8
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fd ff06 	bl	800cf9c <ld_dword>
 800f190:	4602      	mov	r2, r0
 800f192:	e000      	b.n	800f196 <find_volume+0x15a>
 800f194:	2200      	movs	r2, #0
 800f196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	3358      	adds	r3, #88	; 0x58
 800f19c:	443b      	add	r3, r7
 800f19e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	643b      	str	r3, [r7, #64]	; 0x40
 800f1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d9dd      	bls.n	800f16a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <find_volume+0x182>
 800f1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	3358      	adds	r3, #88	; 0x58
 800f1c4:	443b      	add	r3, r7
 800f1c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f1ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d005      	beq.n	800f1de <find_volume+0x1a2>
 800f1d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1d6:	f7ff fedb 	bl	800ef90 <check_fs>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	e000      	b.n	800f1e0 <find_volume+0x1a4>
 800f1de:	2303      	movs	r3, #3
 800f1e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f1e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d905      	bls.n	800f1f8 <find_volume+0x1bc>
 800f1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	643b      	str	r3, [r7, #64]	; 0x40
 800f1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f4:	2b03      	cmp	r3, #3
 800f1f6:	d9e2      	bls.n	800f1be <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d101      	bne.n	800f204 <find_volume+0x1c8>
 800f200:	2301      	movs	r3, #1
 800f202:	e194      	b.n	800f52e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d901      	bls.n	800f210 <find_volume+0x1d4>
 800f20c:	230d      	movs	r3, #13
 800f20e:	e18e      	b.n	800f52e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	3338      	adds	r3, #56	; 0x38
 800f214:	330b      	adds	r3, #11
 800f216:	4618      	mov	r0, r3
 800f218:	f7fd fea8 	bl	800cf6c <ld_word>
 800f21c:	4603      	mov	r3, r0
 800f21e:	461a      	mov	r2, r3
 800f220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f222:	899b      	ldrh	r3, [r3, #12]
 800f224:	429a      	cmp	r2, r3
 800f226:	d001      	beq.n	800f22c <find_volume+0x1f0>
 800f228:	230d      	movs	r3, #13
 800f22a:	e180      	b.n	800f52e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	3338      	adds	r3, #56	; 0x38
 800f230:	3316      	adds	r3, #22
 800f232:	4618      	mov	r0, r3
 800f234:	f7fd fe9a 	bl	800cf6c <ld_word>
 800f238:	4603      	mov	r3, r0
 800f23a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <find_volume+0x214>
 800f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f244:	3338      	adds	r3, #56	; 0x38
 800f246:	3324      	adds	r3, #36	; 0x24
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fd fea7 	bl	800cf9c <ld_dword>
 800f24e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f254:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f258:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	789b      	ldrb	r3, [r3, #2]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d005      	beq.n	800f274 <find_volume+0x238>
 800f268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26a:	789b      	ldrb	r3, [r3, #2]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d001      	beq.n	800f274 <find_volume+0x238>
 800f270:	230d      	movs	r3, #13
 800f272:	e15c      	b.n	800f52e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	789b      	ldrb	r3, [r3, #2]
 800f278:	461a      	mov	r2, r3
 800f27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f27c:	fb02 f303 	mul.w	r3, r2, r3
 800f280:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f288:	b29a      	uxth	r2, r3
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	895b      	ldrh	r3, [r3, #10]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <find_volume+0x26c>
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	895b      	ldrh	r3, [r3, #10]
 800f29a:	461a      	mov	r2, r3
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	895b      	ldrh	r3, [r3, #10]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	4013      	ands	r3, r2
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <find_volume+0x270>
 800f2a8:	230d      	movs	r3, #13
 800f2aa:	e140      	b.n	800f52e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ae:	3338      	adds	r3, #56	; 0x38
 800f2b0:	3311      	adds	r3, #17
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fd fe5a 	bl	800cf6c <ld_word>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c2:	891b      	ldrh	r3, [r3, #8]
 800f2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2c6:	8992      	ldrh	r2, [r2, #12]
 800f2c8:	0952      	lsrs	r2, r2, #5
 800f2ca:	b292      	uxth	r2, r2
 800f2cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2d0:	fb01 f202 	mul.w	r2, r1, r2
 800f2d4:	1a9b      	subs	r3, r3, r2
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <find_volume+0x2a8>
 800f2dc:	230d      	movs	r3, #13
 800f2de:	e126      	b.n	800f52e <find_volume+0x4f2>
 800f2e0:	200027f8 	.word	0x200027f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	3338      	adds	r3, #56	; 0x38
 800f2e8:	3313      	adds	r3, #19
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd fe3e 	bl	800cf6c <ld_word>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d106      	bne.n	800f308 <find_volume+0x2cc>
 800f2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fc:	3338      	adds	r3, #56	; 0x38
 800f2fe:	3320      	adds	r3, #32
 800f300:	4618      	mov	r0, r3
 800f302:	f7fd fe4b 	bl	800cf9c <ld_dword>
 800f306:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30a:	3338      	adds	r3, #56	; 0x38
 800f30c:	330e      	adds	r3, #14
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fd fe2c 	bl	800cf6c <ld_word>
 800f314:	4603      	mov	r3, r0
 800f316:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <find_volume+0x2e6>
 800f31e:	230d      	movs	r3, #13
 800f320:	e105      	b.n	800f52e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f322:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f326:	4413      	add	r3, r2
 800f328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f32a:	8911      	ldrh	r1, [r2, #8]
 800f32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f32e:	8992      	ldrh	r2, [r2, #12]
 800f330:	0952      	lsrs	r2, r2, #5
 800f332:	b292      	uxth	r2, r2
 800f334:	fbb1 f2f2 	udiv	r2, r1, r2
 800f338:	b292      	uxth	r2, r2
 800f33a:	4413      	add	r3, r2
 800f33c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f33e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f342:	429a      	cmp	r2, r3
 800f344:	d201      	bcs.n	800f34a <find_volume+0x30e>
 800f346:	230d      	movs	r3, #13
 800f348:	e0f1      	b.n	800f52e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f34a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f352:	8952      	ldrh	r2, [r2, #10]
 800f354:	fbb3 f3f2 	udiv	r3, r3, r2
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d101      	bne.n	800f364 <find_volume+0x328>
 800f360:	230d      	movs	r3, #13
 800f362:	e0e4      	b.n	800f52e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f364:	2303      	movs	r3, #3
 800f366:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f370:	4293      	cmp	r3, r2
 800f372:	d802      	bhi.n	800f37a <find_volume+0x33e>
 800f374:	2302      	movs	r3, #2
 800f376:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f380:	4293      	cmp	r3, r2
 800f382:	d802      	bhi.n	800f38a <find_volume+0x34e>
 800f384:	2301      	movs	r3, #1
 800f386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	1c9a      	adds	r2, r3, #2
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f394:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f396:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f398:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f39c:	441a      	add	r2, r3
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f3a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a6:	441a      	add	r2, r3
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f3ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3b0:	2b03      	cmp	r3, #3
 800f3b2:	d11e      	bne.n	800f3f2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b6:	3338      	adds	r3, #56	; 0x38
 800f3b8:	332a      	adds	r3, #42	; 0x2a
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fd fdd6 	bl	800cf6c <ld_word>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <find_volume+0x38e>
 800f3c6:	230d      	movs	r3, #13
 800f3c8:	e0b1      	b.n	800f52e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	891b      	ldrh	r3, [r3, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d001      	beq.n	800f3d6 <find_volume+0x39a>
 800f3d2:	230d      	movs	r3, #13
 800f3d4:	e0ab      	b.n	800f52e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	3338      	adds	r3, #56	; 0x38
 800f3da:	332c      	adds	r3, #44	; 0x2c
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fd fddd 	bl	800cf9c <ld_dword>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ea:	69db      	ldr	r3, [r3, #28]
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	647b      	str	r3, [r7, #68]	; 0x44
 800f3f0:	e01f      	b.n	800f432 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	891b      	ldrh	r3, [r3, #8]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d101      	bne.n	800f3fe <find_volume+0x3c2>
 800f3fa:	230d      	movs	r3, #13
 800f3fc:	e097      	b.n	800f52e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f404:	441a      	add	r2, r3
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f40a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d103      	bne.n	800f41a <find_volume+0x3de>
 800f412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f414:	69db      	ldr	r3, [r3, #28]
 800f416:	005b      	lsls	r3, r3, #1
 800f418:	e00a      	b.n	800f430 <find_volume+0x3f4>
 800f41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41c:	69da      	ldr	r2, [r3, #28]
 800f41e:	4613      	mov	r3, r2
 800f420:	005b      	lsls	r3, r3, #1
 800f422:	4413      	add	r3, r2
 800f424:	085a      	lsrs	r2, r3, #1
 800f426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f428:	69db      	ldr	r3, [r3, #28]
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f430:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f434:	6a1a      	ldr	r2, [r3, #32]
 800f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	4619      	mov	r1, r3
 800f43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f43e:	440b      	add	r3, r1
 800f440:	3b01      	subs	r3, #1
 800f442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f444:	8989      	ldrh	r1, [r1, #12]
 800f446:	fbb3 f3f1 	udiv	r3, r3, r1
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d201      	bcs.n	800f452 <find_volume+0x416>
 800f44e:	230d      	movs	r3, #13
 800f450:	e06d      	b.n	800f52e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f454:	f04f 32ff 	mov.w	r2, #4294967295
 800f458:	619a      	str	r2, [r3, #24]
 800f45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45c:	699a      	ldr	r2, [r3, #24]
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	2280      	movs	r2, #128	; 0x80
 800f466:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d149      	bne.n	800f504 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f472:	3338      	adds	r3, #56	; 0x38
 800f474:	3330      	adds	r3, #48	; 0x30
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fd78 	bl	800cf6c <ld_word>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d140      	bne.n	800f504 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f484:	3301      	adds	r3, #1
 800f486:	4619      	mov	r1, r3
 800f488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f48a:	f7fe f81f 	bl	800d4cc <move_window>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d137      	bne.n	800f504 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f496:	2200      	movs	r2, #0
 800f498:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49c:	3338      	adds	r3, #56	; 0x38
 800f49e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd fd62 	bl	800cf6c <ld_word>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d127      	bne.n	800f504 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	3338      	adds	r3, #56	; 0x38
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fd fd6f 	bl	800cf9c <ld_dword>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4a1d      	ldr	r2, [pc, #116]	; (800f538 <find_volume+0x4fc>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d11e      	bne.n	800f504 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	3338      	adds	r3, #56	; 0x38
 800f4ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fd fd64 	bl	800cf9c <ld_dword>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	4a19      	ldr	r2, [pc, #100]	; (800f53c <find_volume+0x500>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d113      	bne.n	800f504 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	3338      	adds	r3, #56	; 0x38
 800f4e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fd fd59 	bl	800cf9c <ld_dword>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	3338      	adds	r3, #56	; 0x38
 800f4f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fd fd4f 	bl	800cf9c <ld_dword>
 800f4fe:	4602      	mov	r2, r0
 800f500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f502:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f50a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f50c:	4b0c      	ldr	r3, [pc, #48]	; (800f540 <find_volume+0x504>)
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	3301      	adds	r3, #1
 800f512:	b29a      	uxth	r2, r3
 800f514:	4b0a      	ldr	r3, [pc, #40]	; (800f540 <find_volume+0x504>)
 800f516:	801a      	strh	r2, [r3, #0]
 800f518:	4b09      	ldr	r3, [pc, #36]	; (800f540 <find_volume+0x504>)
 800f51a:	881a      	ldrh	r2, [r3, #0]
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	4a08      	ldr	r2, [pc, #32]	; (800f544 <find_volume+0x508>)
 800f524:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f528:	f7fd ff68 	bl	800d3fc <clear_lock>
#endif
	return FR_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3758      	adds	r7, #88	; 0x58
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	41615252 	.word	0x41615252
 800f53c:	61417272 	.word	0x61417272
 800f540:	200027fc 	.word	0x200027fc
 800f544:	20002820 	.word	0x20002820

0800f548 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f552:	2309      	movs	r3, #9
 800f554:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d01c      	beq.n	800f596 <validate+0x4e>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d018      	beq.n	800f596 <validate+0x4e>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d013      	beq.n	800f596 <validate+0x4e>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	889a      	ldrh	r2, [r3, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	88db      	ldrh	r3, [r3, #6]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d10c      	bne.n	800f596 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	785b      	ldrb	r3, [r3, #1]
 800f582:	4618      	mov	r0, r3
 800f584:	f7fd fc54 	bl	800ce30 <disk_status>
 800f588:	4603      	mov	r3, r0
 800f58a:	f003 0301 	and.w	r3, r3, #1
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <validate+0x4e>
			res = FR_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f596:	7bfb      	ldrb	r3, [r7, #15]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d102      	bne.n	800f5a2 <validate+0x5a>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	e000      	b.n	800f5a4 <validate+0x5c>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	683a      	ldr	r2, [r7, #0]
 800f5a6:	6013      	str	r3, [r2, #0]
	return res;
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3710      	adds	r7, #16
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
	...

0800f5b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f5c6:	f107 0310 	add.w	r3, r7, #16
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff fc9c 	bl	800ef08 <get_ldnumber>
 800f5d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	da01      	bge.n	800f5dc <f_mount+0x28>
 800f5d8:	230b      	movs	r3, #11
 800f5da:	e02b      	b.n	800f634 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f5dc:	4a17      	ldr	r2, [pc, #92]	; (800f63c <f_mount+0x88>)
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d005      	beq.n	800f5f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f5ec:	69b8      	ldr	r0, [r7, #24]
 800f5ee:	f7fd ff05 	bl	800d3fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d002      	beq.n	800f604 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2200      	movs	r2, #0
 800f602:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	490d      	ldr	r1, [pc, #52]	; (800f63c <f_mount+0x88>)
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <f_mount+0x66>
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d001      	beq.n	800f61e <f_mount+0x6a>
 800f61a:	2300      	movs	r3, #0
 800f61c:	e00a      	b.n	800f634 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f61e:	f107 010c 	add.w	r1, r7, #12
 800f622:	f107 0308 	add.w	r3, r7, #8
 800f626:	2200      	movs	r2, #0
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff fd07 	bl	800f03c <find_volume>
 800f62e:	4603      	mov	r3, r0
 800f630:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f632:	7dfb      	ldrb	r3, [r7, #23]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	200027f8 	.word	0x200027f8

0800f640 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b09a      	sub	sp, #104	; 0x68
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	4613      	mov	r3, r2
 800f64c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d101      	bne.n	800f658 <f_open+0x18>
 800f654:	2309      	movs	r3, #9
 800f656:	e1bb      	b.n	800f9d0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f658:	79fb      	ldrb	r3, [r7, #7]
 800f65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f65e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f660:	79fa      	ldrb	r2, [r7, #7]
 800f662:	f107 0114 	add.w	r1, r7, #20
 800f666:	f107 0308 	add.w	r3, r7, #8
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7ff fce6 	bl	800f03c <find_volume>
 800f670:	4603      	mov	r3, r0
 800f672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f040 819f 	bne.w	800f9be <f_open+0x37e>
		dj.obj.fs = fs;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	f107 0318 	add.w	r3, r7, #24
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7ff fbc5 	bl	800ee1c <follow_path>
 800f692:	4603      	mov	r3, r0
 800f694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d11a      	bne.n	800f6d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f6a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f6a4:	b25b      	sxtb	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	da03      	bge.n	800f6b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f6aa:	2306      	movs	r3, #6
 800f6ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f6b0:	e011      	b.n	800f6d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	f023 0301 	bic.w	r3, r3, #1
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bf14      	ite	ne
 800f6bc:	2301      	movne	r3, #1
 800f6be:	2300      	moveq	r3, #0
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f107 0318 	add.w	r3, r7, #24
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fd fd4e 	bl	800d16c <chk_lock>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	f003 031c 	and.w	r3, r3, #28
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d07f      	beq.n	800f7e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f6e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d017      	beq.n	800f718 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f6e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f6ec:	2b04      	cmp	r3, #4
 800f6ee:	d10e      	bne.n	800f70e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f6f0:	f7fd fd98 	bl	800d224 <enq_lock>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d006      	beq.n	800f708 <f_open+0xc8>
 800f6fa:	f107 0318 	add.w	r3, r7, #24
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe fffe 	bl	800e700 <dir_register>
 800f704:	4603      	mov	r3, r0
 800f706:	e000      	b.n	800f70a <f_open+0xca>
 800f708:	2312      	movs	r3, #18
 800f70a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f70e:	79fb      	ldrb	r3, [r7, #7]
 800f710:	f043 0308 	orr.w	r3, r3, #8
 800f714:	71fb      	strb	r3, [r7, #7]
 800f716:	e010      	b.n	800f73a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f718:	7fbb      	ldrb	r3, [r7, #30]
 800f71a:	f003 0311 	and.w	r3, r3, #17
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d003      	beq.n	800f72a <f_open+0xea>
					res = FR_DENIED;
 800f722:	2307      	movs	r3, #7
 800f724:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f728:	e007      	b.n	800f73a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f72a:	79fb      	ldrb	r3, [r7, #7]
 800f72c:	f003 0304 	and.w	r3, r3, #4
 800f730:	2b00      	cmp	r3, #0
 800f732:	d002      	beq.n	800f73a <f_open+0xfa>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f73a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d168      	bne.n	800f814 <f_open+0x1d4>
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	f003 0308 	and.w	r3, r3, #8
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d063      	beq.n	800f814 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f74c:	f7fa fde0 	bl	800a310 <get_fattime>
 800f750:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f754:	330e      	adds	r3, #14
 800f756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd fc5d 	bl	800d018 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f760:	3316      	adds	r3, #22
 800f762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f764:	4618      	mov	r0, r3
 800f766:	f7fd fc57 	bl	800d018 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76c:	330b      	adds	r3, #11
 800f76e:	2220      	movs	r2, #32
 800f770:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f776:	4611      	mov	r1, r2
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe fc2f 	bl	800dfdc <ld_clust>
 800f77e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f784:	2200      	movs	r2, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe fc47 	bl	800e01a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	331c      	adds	r3, #28
 800f790:	2100      	movs	r1, #0
 800f792:	4618      	mov	r0, r3
 800f794:	f7fd fc40 	bl	800d018 <st_dword>
					fs->wflag = 1;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	2201      	movs	r2, #1
 800f79c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f79e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d037      	beq.n	800f814 <f_open+0x1d4>
						dw = fs->winsect;
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f7aa:	f107 0318 	add.w	r3, r7, #24
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe f937 	bl	800da26 <remove_chain>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f7be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d126      	bne.n	800f814 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd fe7e 	bl	800d4cc <move_window>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7da:	3a01      	subs	r2, #1
 800f7dc:	615a      	str	r2, [r3, #20]
 800f7de:	e019      	b.n	800f814 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f7e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d115      	bne.n	800f814 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f7e8:	7fbb      	ldrb	r3, [r7, #30]
 800f7ea:	f003 0310 	and.w	r3, r3, #16
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d003      	beq.n	800f7fa <f_open+0x1ba>
					res = FR_NO_FILE;
 800f7f2:	2304      	movs	r3, #4
 800f7f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f7f8:	e00c      	b.n	800f814 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f7fa:	79fb      	ldrb	r3, [r7, #7]
 800f7fc:	f003 0302 	and.w	r3, r3, #2
 800f800:	2b00      	cmp	r3, #0
 800f802:	d007      	beq.n	800f814 <f_open+0x1d4>
 800f804:	7fbb      	ldrb	r3, [r7, #30]
 800f806:	f003 0301 	and.w	r3, r3, #1
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <f_open+0x1d4>
						res = FR_DENIED;
 800f80e:	2307      	movs	r3, #7
 800f810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d128      	bne.n	800f86e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	f003 0308 	and.w	r3, r3, #8
 800f822:	2b00      	cmp	r3, #0
 800f824:	d003      	beq.n	800f82e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f82c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	f023 0301 	bic.w	r3, r3, #1
 800f842:	2b00      	cmp	r3, #0
 800f844:	bf14      	ite	ne
 800f846:	2301      	movne	r3, #1
 800f848:	2300      	moveq	r3, #0
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	461a      	mov	r2, r3
 800f84e:	f107 0318 	add.w	r3, r7, #24
 800f852:	4611      	mov	r1, r2
 800f854:	4618      	mov	r0, r3
 800f856:	f7fd fd07 	bl	800d268 <inc_lock>
 800f85a:	4602      	mov	r2, r0
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	691b      	ldr	r3, [r3, #16]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d102      	bne.n	800f86e <f_open+0x22e>
 800f868:	2302      	movs	r3, #2
 800f86a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f86e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f872:	2b00      	cmp	r3, #0
 800f874:	f040 80a3 	bne.w	800f9be <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f87c:	4611      	mov	r1, r2
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fe fbac 	bl	800dfdc <ld_clust>
 800f884:	4602      	mov	r2, r0
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88c:	331c      	adds	r3, #28
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fd fb84 	bl	800cf9c <ld_dword>
 800f894:	4602      	mov	r2, r0
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2200      	movs	r2, #0
 800f89e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	88da      	ldrh	r2, [r3, #6]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	79fa      	ldrb	r2, [r7, #7]
 800f8b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3330      	adds	r3, #48	; 0x30
 800f8ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fd fbee 	bl	800d0b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f8d6:	79fb      	ldrb	r3, [r7, #7]
 800f8d8:	f003 0320 	and.w	r3, r3, #32
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d06e      	beq.n	800f9be <f_open+0x37e>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d06a      	beq.n	800f9be <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	68da      	ldr	r2, [r3, #12]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	895b      	ldrh	r3, [r3, #10]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	899b      	ldrh	r3, [r3, #12]
 800f8fa:	fb02 f303 	mul.w	r3, r2, r3
 800f8fe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f90c:	e016      	b.n	800f93c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f912:	4618      	mov	r0, r3
 800f914:	f7fd fe97 	bl	800d646 <get_fat>
 800f918:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f91a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d802      	bhi.n	800f926 <f_open+0x2e6>
 800f920:	2302      	movs	r3, #2
 800f922:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f92c:	d102      	bne.n	800f934 <f_open+0x2f4>
 800f92e:	2301      	movs	r3, #1
 800f930:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f93c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f940:	2b00      	cmp	r3, #0
 800f942:	d103      	bne.n	800f94c <f_open+0x30c>
 800f944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f948:	429a      	cmp	r2, r3
 800f94a:	d8e0      	bhi.n	800f90e <f_open+0x2ce>
				}
				fp->clust = clst;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f950:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f952:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f956:	2b00      	cmp	r3, #0
 800f958:	d131      	bne.n	800f9be <f_open+0x37e>
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	899b      	ldrh	r3, [r3, #12]
 800f95e:	461a      	mov	r2, r3
 800f960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f962:	fbb3 f1f2 	udiv	r1, r3, r2
 800f966:	fb01 f202 	mul.w	r2, r1, r2
 800f96a:	1a9b      	subs	r3, r3, r2
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d026      	beq.n	800f9be <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f974:	4618      	mov	r0, r3
 800f976:	f7fd fe47 	bl	800d608 <clust2sect>
 800f97a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d103      	bne.n	800f98a <f_open+0x34a>
						res = FR_INT_ERR;
 800f982:	2302      	movs	r3, #2
 800f984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f988:	e019      	b.n	800f9be <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	461a      	mov	r2, r3
 800f990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f992:	fbb3 f2f2 	udiv	r2, r3, r2
 800f996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f998:	441a      	add	r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	7858      	ldrb	r0, [r3, #1]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6a1a      	ldr	r2, [r3, #32]
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f7fd fa7f 	bl	800ceb0 <disk_read>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <f_open+0x37e>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f9be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <f_open+0x38c>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f9cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3768      	adds	r7, #104	; 0x68
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08e      	sub	sp, #56	; 0x38
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f107 0214 	add.w	r2, r7, #20
 800f9f6:	4611      	mov	r1, r2
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff fda5 	bl	800f548 <validate>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fa04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d107      	bne.n	800fa1c <f_read+0x44>
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	7d5b      	ldrb	r3, [r3, #21]
 800fa10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fa14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <f_read+0x4a>
 800fa1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa20:	e135      	b.n	800fc8e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	7d1b      	ldrb	r3, [r3, #20]
 800fa26:	f003 0301 	and.w	r3, r3, #1
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <f_read+0x5a>
 800fa2e:	2307      	movs	r3, #7
 800fa30:	e12d      	b.n	800fc8e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	68da      	ldr	r2, [r3, #12]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	f240 811e 	bls.w	800fc84 <f_read+0x2ac>
 800fa48:	6a3b      	ldr	r3, [r7, #32]
 800fa4a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fa4c:	e11a      	b.n	800fc84 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	697a      	ldr	r2, [r7, #20]
 800fa54:	8992      	ldrh	r2, [r2, #12]
 800fa56:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa5a:	fb01 f202 	mul.w	r2, r1, r2
 800fa5e:	1a9b      	subs	r3, r3, r2
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f040 80d5 	bne.w	800fc10 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	697a      	ldr	r2, [r7, #20]
 800fa6c:	8992      	ldrh	r2, [r2, #12]
 800fa6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	8952      	ldrh	r2, [r2, #10]
 800fa76:	3a01      	subs	r2, #1
 800fa78:	4013      	ands	r3, r2
 800fa7a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d12f      	bne.n	800fae2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	699b      	ldr	r3, [r3, #24]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d103      	bne.n	800fa92 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	633b      	str	r3, [r7, #48]	; 0x30
 800fa90:	e013      	b.n	800faba <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d007      	beq.n	800faaa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7fe f8bd 	bl	800dc20 <clmt_clust>
 800faa6:	6338      	str	r0, [r7, #48]	; 0x30
 800faa8:	e007      	b.n	800faba <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	69db      	ldr	r3, [r3, #28]
 800fab0:	4619      	mov	r1, r3
 800fab2:	4610      	mov	r0, r2
 800fab4:	f7fd fdc7 	bl	800d646 <get_fat>
 800fab8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d804      	bhi.n	800faca <f_read+0xf2>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2202      	movs	r2, #2
 800fac4:	755a      	strb	r2, [r3, #21]
 800fac6:	2302      	movs	r3, #2
 800fac8:	e0e1      	b.n	800fc8e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	d104      	bne.n	800fadc <f_read+0x104>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2201      	movs	r2, #1
 800fad6:	755a      	strb	r2, [r3, #21]
 800fad8:	2301      	movs	r3, #1
 800fada:	e0d8      	b.n	800fc8e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fae0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fae2:	697a      	ldr	r2, [r7, #20]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	4619      	mov	r1, r3
 800faea:	4610      	mov	r0, r2
 800faec:	f7fd fd8c 	bl	800d608 <clust2sect>
 800faf0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d104      	bne.n	800fb02 <f_read+0x12a>
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2202      	movs	r2, #2
 800fafc:	755a      	strb	r2, [r3, #21]
 800fafe:	2302      	movs	r3, #2
 800fb00:	e0c5      	b.n	800fc8e <f_read+0x2b6>
			sect += csect;
 800fb02:	69ba      	ldr	r2, [r7, #24]
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	4413      	add	r3, r2
 800fb08:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	899b      	ldrh	r3, [r3, #12]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb16:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d041      	beq.n	800fba2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fb1e:	69fa      	ldr	r2, [r7, #28]
 800fb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb22:	4413      	add	r3, r2
 800fb24:	697a      	ldr	r2, [r7, #20]
 800fb26:	8952      	ldrh	r2, [r2, #10]
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d905      	bls.n	800fb38 <f_read+0x160>
					cc = fs->csize - csect;
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	895b      	ldrh	r3, [r3, #10]
 800fb30:	461a      	mov	r2, r3
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	7858      	ldrb	r0, [r3, #1]
 800fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb42:	f7fd f9b5 	bl	800ceb0 <disk_read>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d004      	beq.n	800fb56 <f_read+0x17e>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	755a      	strb	r2, [r3, #21]
 800fb52:	2301      	movs	r3, #1
 800fb54:	e09b      	b.n	800fc8e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	7d1b      	ldrb	r3, [r3, #20]
 800fb5a:	b25b      	sxtb	r3, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	da18      	bge.n	800fb92 <f_read+0x1ba>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a1a      	ldr	r2, [r3, #32]
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d911      	bls.n	800fb92 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6a1a      	ldr	r2, [r3, #32]
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	697a      	ldr	r2, [r7, #20]
 800fb78:	8992      	ldrh	r2, [r2, #12]
 800fb7a:	fb02 f303 	mul.w	r3, r2, r3
 800fb7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb80:	18d0      	adds	r0, r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f7fd fa6f 	bl	800d070 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	461a      	mov	r2, r3
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	fb02 f303 	mul.w	r3, r2, r3
 800fb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fba0:	e05c      	b.n	800fc5c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	6a1b      	ldr	r3, [r3, #32]
 800fba6:	69ba      	ldr	r2, [r7, #24]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d02e      	beq.n	800fc0a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	7d1b      	ldrb	r3, [r3, #20]
 800fbb0:	b25b      	sxtb	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	da18      	bge.n	800fbe8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	7858      	ldrb	r0, [r3, #1]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6a1a      	ldr	r2, [r3, #32]
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	f7fd f993 	bl	800cef0 <disk_write>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d004      	beq.n	800fbda <f_read+0x202>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	755a      	strb	r2, [r3, #21]
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e059      	b.n	800fc8e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	7d1b      	ldrb	r3, [r3, #20]
 800fbde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	7858      	ldrb	r0, [r3, #1]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	69ba      	ldr	r2, [r7, #24]
 800fbf6:	f7fd f95b 	bl	800ceb0 <disk_read>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d004      	beq.n	800fc0a <f_read+0x232>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2201      	movs	r2, #1
 800fc04:	755a      	strb	r2, [r3, #21]
 800fc06:	2301      	movs	r3, #1
 800fc08:	e041      	b.n	800fc8e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	69ba      	ldr	r2, [r7, #24]
 800fc0e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	899b      	ldrh	r3, [r3, #12]
 800fc14:	4618      	mov	r0, r3
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	699b      	ldr	r3, [r3, #24]
 800fc1a:	697a      	ldr	r2, [r7, #20]
 800fc1c:	8992      	ldrh	r2, [r2, #12]
 800fc1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc22:	fb01 f202 	mul.w	r2, r1, r2
 800fc26:	1a9b      	subs	r3, r3, r2
 800fc28:	1ac3      	subs	r3, r0, r3
 800fc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d901      	bls.n	800fc38 <f_read+0x260>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	8992      	ldrh	r2, [r2, #12]
 800fc46:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc4a:	fb00 f202 	mul.w	r2, r0, r2
 800fc4e:	1a9b      	subs	r3, r3, r2
 800fc50:	440b      	add	r3, r1
 800fc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc54:	4619      	mov	r1, r3
 800fc56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc58:	f7fd fa0a 	bl	800d070 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fc5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc60:	4413      	add	r3, r2
 800fc62:	627b      	str	r3, [r7, #36]	; 0x24
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	699a      	ldr	r2, [r3, #24]
 800fc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6a:	441a      	add	r2, r3
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	619a      	str	r2, [r3, #24]
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	441a      	add	r2, r3
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	601a      	str	r2, [r3, #0]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f47f aee1 	bne.w	800fa4e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3738      	adds	r7, #56	; 0x38
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}

0800fc96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fc96:	b580      	push	{r7, lr}
 800fc98:	b086      	sub	sp, #24
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f107 0208 	add.w	r2, r7, #8
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7ff fc4e 	bl	800f548 <validate>
 800fcac:	4603      	mov	r3, r0
 800fcae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcb0:	7dfb      	ldrb	r3, [r7, #23]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d168      	bne.n	800fd88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	7d1b      	ldrb	r3, [r3, #20]
 800fcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d062      	beq.n	800fd88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7d1b      	ldrb	r3, [r3, #20]
 800fcc6:	b25b      	sxtb	r3, r3
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	da15      	bge.n	800fcf8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	7858      	ldrb	r0, [r3, #1]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a1a      	ldr	r2, [r3, #32]
 800fcda:	2301      	movs	r3, #1
 800fcdc:	f7fd f908 	bl	800cef0 <disk_write>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <f_sync+0x54>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e04f      	b.n	800fd8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	7d1b      	ldrb	r3, [r3, #20]
 800fcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fcf8:	f7fa fb0a 	bl	800a310 <get_fattime>
 800fcfc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fcfe:	68ba      	ldr	r2, [r7, #8]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd04:	4619      	mov	r1, r3
 800fd06:	4610      	mov	r0, r2
 800fd08:	f7fd fbe0 	bl	800d4cc <move_window>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d138      	bne.n	800fd88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	330b      	adds	r3, #11
 800fd20:	781a      	ldrb	r2, [r3, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	330b      	adds	r3, #11
 800fd26:	f042 0220 	orr.w	r2, r2, #32
 800fd2a:	b2d2      	uxtb	r2, r2
 800fd2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6818      	ldr	r0, [r3, #0]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	461a      	mov	r2, r3
 800fd38:	68f9      	ldr	r1, [r7, #12]
 800fd3a:	f7fe f96e 	bl	800e01a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	f103 021c 	add.w	r2, r3, #28
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	4619      	mov	r1, r3
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	f7fd f964 	bl	800d018 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3316      	adds	r3, #22
 800fd54:	6939      	ldr	r1, [r7, #16]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fd f95e 	bl	800d018 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	3312      	adds	r3, #18
 800fd60:	2100      	movs	r1, #0
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd f93d 	bl	800cfe2 <st_word>
					fs->wflag = 1;
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fd fbd9 	bl	800d528 <sync_fs>
 800fd76:	4603      	mov	r3, r0
 800fd78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	7d1b      	ldrb	r3, [r3, #20]
 800fd7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f7ff ff7b 	bl	800fc96 <f_sync>
 800fda0:	4603      	mov	r3, r0
 800fda2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fda4:	7bfb      	ldrb	r3, [r7, #15]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d118      	bne.n	800fddc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f107 0208 	add.w	r2, r7, #8
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff fbc8 	bl	800f548 <validate>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10c      	bne.n	800fddc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fd fadc 	bl	800d384 <dec_lock>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d102      	bne.n	800fddc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b090      	sub	sp, #64	; 0x40
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f107 0208 	add.w	r2, r7, #8
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fba5 	bl	800f548 <validate>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fe04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d103      	bne.n	800fe14 <f_lseek+0x2e>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	7d5b      	ldrb	r3, [r3, #21]
 800fe10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fe14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d002      	beq.n	800fe22 <f_lseek+0x3c>
 800fe1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe20:	e201      	b.n	8010226 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80d9 	beq.w	800ffde <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe32:	d15a      	bne.n	800feea <f_lseek+0x104>
			tbl = fp->cltbl;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe38:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	1d1a      	adds	r2, r3, #4
 800fe3e:	627a      	str	r2, [r7, #36]	; 0x24
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	617b      	str	r3, [r7, #20]
 800fe44:	2302      	movs	r3, #2
 800fe46:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d03a      	beq.n	800feca <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fe54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe56:	613b      	str	r3, [r7, #16]
 800fe58:	2300      	movs	r3, #0
 800fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	3302      	adds	r3, #2
 800fe60:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fe62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe68:	3301      	adds	r3, #1
 800fe6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fd fbe8 	bl	800d646 <get_fat>
 800fe76:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fe78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d804      	bhi.n	800fe88 <f_lseek+0xa2>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2202      	movs	r2, #2
 800fe82:	755a      	strb	r2, [r3, #21]
 800fe84:	2302      	movs	r3, #2
 800fe86:	e1ce      	b.n	8010226 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe8e:	d104      	bne.n	800fe9a <f_lseek+0xb4>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2201      	movs	r2, #1
 800fe94:	755a      	strb	r2, [r3, #21]
 800fe96:	2301      	movs	r3, #1
 800fe98:	e1c5      	b.n	8010226 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d0de      	beq.n	800fe62 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d809      	bhi.n	800fec0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	1d1a      	adds	r2, r3, #4
 800feb0:	627a      	str	r2, [r7, #36]	; 0x24
 800feb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feb4:	601a      	str	r2, [r3, #0]
 800feb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb8:	1d1a      	adds	r2, r3, #4
 800feba:	627a      	str	r2, [r7, #36]	; 0x24
 800febc:	693a      	ldr	r2, [r7, #16]
 800febe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d3c4      	bcc.n	800fe54 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d803      	bhi.n	800fee2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	2200      	movs	r2, #0
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	e19f      	b.n	8010222 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fee2:	2311      	movs	r3, #17
 800fee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fee8:	e19b      	b.n	8010222 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d902      	bls.n	800fefa <f_lseek+0x114>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	683a      	ldr	r2, [r7, #0]
 800fefe:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 818d 	beq.w	8010222 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7fd fe86 	bl	800dc20 <clmt_clust>
 800ff14:	4602      	mov	r2, r0
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ff1a:	68ba      	ldr	r2, [r7, #8]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	69db      	ldr	r3, [r3, #28]
 800ff20:	4619      	mov	r1, r3
 800ff22:	4610      	mov	r0, r2
 800ff24:	f7fd fb70 	bl	800d608 <clust2sect>
 800ff28:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d104      	bne.n	800ff3a <f_lseek+0x154>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2202      	movs	r2, #2
 800ff34:	755a      	strb	r2, [r3, #21]
 800ff36:	2302      	movs	r3, #2
 800ff38:	e175      	b.n	8010226 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3b01      	subs	r3, #1
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	8992      	ldrh	r2, [r2, #12]
 800ff42:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	8952      	ldrh	r2, [r2, #10]
 800ff4a:	3a01      	subs	r2, #1
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	69ba      	ldr	r2, [r7, #24]
 800ff50:	4413      	add	r3, r2
 800ff52:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	699b      	ldr	r3, [r3, #24]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	8992      	ldrh	r2, [r2, #12]
 800ff5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff60:	fb01 f202 	mul.w	r2, r1, r2
 800ff64:	1a9b      	subs	r3, r3, r2
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 815b 	beq.w	8010222 <f_lseek+0x43c>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6a1b      	ldr	r3, [r3, #32]
 800ff70:	69ba      	ldr	r2, [r7, #24]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	f000 8155 	beq.w	8010222 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	7d1b      	ldrb	r3, [r3, #20]
 800ff7c:	b25b      	sxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	da18      	bge.n	800ffb4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	7858      	ldrb	r0, [r3, #1]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6a1a      	ldr	r2, [r3, #32]
 800ff90:	2301      	movs	r3, #1
 800ff92:	f7fc ffad 	bl	800cef0 <disk_write>
 800ff96:	4603      	mov	r3, r0
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d004      	beq.n	800ffa6 <f_lseek+0x1c0>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	755a      	strb	r2, [r3, #21]
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	e13f      	b.n	8010226 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	7d1b      	ldrb	r3, [r3, #20]
 800ffaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffae:	b2da      	uxtb	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	7858      	ldrb	r0, [r3, #1]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	69ba      	ldr	r2, [r7, #24]
 800ffc2:	f7fc ff75 	bl	800ceb0 <disk_read>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d004      	beq.n	800ffd6 <f_lseek+0x1f0>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	755a      	strb	r2, [r3, #21]
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	e127      	b.n	8010226 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	69ba      	ldr	r2, [r7, #24]
 800ffda:	621a      	str	r2, [r3, #32]
 800ffdc:	e121      	b.n	8010222 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d908      	bls.n	800fffa <f_lseek+0x214>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	7d1b      	ldrb	r3, [r3, #20]
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d102      	bne.n	800fffa <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	699b      	ldr	r3, [r3, #24]
 800fffe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010000:	2300      	movs	r3, #0
 8010002:	637b      	str	r3, [r7, #52]	; 0x34
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010008:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	f000 80b5 	beq.w	801017c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	895b      	ldrh	r3, [r3, #10]
 8010016:	461a      	mov	r2, r3
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	899b      	ldrh	r3, [r3, #12]
 801001c:	fb02 f303 	mul.w	r3, r2, r3
 8010020:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010022:	6a3b      	ldr	r3, [r7, #32]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d01b      	beq.n	8010060 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	1e5a      	subs	r2, r3, #1
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	1e59      	subs	r1, r3, #1
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801003c:	429a      	cmp	r2, r3
 801003e:	d30f      	bcc.n	8010060 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010040:	6a3b      	ldr	r3, [r7, #32]
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	425b      	negs	r3, r3
 8010048:	401a      	ands	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	1ad3      	subs	r3, r2, r3
 8010056:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	69db      	ldr	r3, [r3, #28]
 801005c:	63bb      	str	r3, [r7, #56]	; 0x38
 801005e:	e022      	b.n	80100a6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	2b00      	cmp	r3, #0
 801006a:	d119      	bne.n	80100a0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2100      	movs	r1, #0
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd fd3d 	bl	800daf0 <create_chain>
 8010076:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007a:	2b01      	cmp	r3, #1
 801007c:	d104      	bne.n	8010088 <f_lseek+0x2a2>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2202      	movs	r2, #2
 8010082:	755a      	strb	r2, [r3, #21]
 8010084:	2302      	movs	r3, #2
 8010086:	e0ce      	b.n	8010226 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008e:	d104      	bne.n	801009a <f_lseek+0x2b4>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2201      	movs	r2, #1
 8010094:	755a      	strb	r2, [r3, #21]
 8010096:	2301      	movs	r3, #1
 8010098:	e0c5      	b.n	8010226 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801009e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80100a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d067      	beq.n	801017c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80100ac:	e03a      	b.n	8010124 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	603b      	str	r3, [r7, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	441a      	add	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	7d1b      	ldrb	r3, [r3, #20]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00b      	beq.n	80100e6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fd fd0c 	bl	800daf0 <create_chain>
 80100d8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80100da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d108      	bne.n	80100f2 <f_lseek+0x30c>
							ofs = 0; break;
 80100e0:	2300      	movs	r3, #0
 80100e2:	603b      	str	r3, [r7, #0]
 80100e4:	e022      	b.n	801012c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fd faab 	bl	800d646 <get_fat>
 80100f0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f8:	d104      	bne.n	8010104 <f_lseek+0x31e>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2201      	movs	r2, #1
 80100fe:	755a      	strb	r2, [r3, #21]
 8010100:	2301      	movs	r3, #1
 8010102:	e090      	b.n	8010226 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	2b01      	cmp	r3, #1
 8010108:	d904      	bls.n	8010114 <f_lseek+0x32e>
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	69db      	ldr	r3, [r3, #28]
 801010e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010110:	429a      	cmp	r2, r3
 8010112:	d304      	bcc.n	801011e <f_lseek+0x338>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2202      	movs	r2, #2
 8010118:	755a      	strb	r2, [r3, #21]
 801011a:	2302      	movs	r3, #2
 801011c:	e083      	b.n	8010226 <f_lseek+0x440>
					fp->clust = clst;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010122:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010124:	683a      	ldr	r2, [r7, #0]
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	429a      	cmp	r2, r3
 801012a:	d8c0      	bhi.n	80100ae <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	699a      	ldr	r2, [r3, #24]
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	441a      	add	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	899b      	ldrh	r3, [r3, #12]
 801013c:	461a      	mov	r2, r3
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	fbb3 f1f2 	udiv	r1, r3, r2
 8010144:	fb01 f202 	mul.w	r2, r1, r2
 8010148:	1a9b      	subs	r3, r3, r2
 801014a:	2b00      	cmp	r3, #0
 801014c:	d016      	beq.n	801017c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010152:	4618      	mov	r0, r3
 8010154:	f7fd fa58 	bl	800d608 <clust2sect>
 8010158:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015c:	2b00      	cmp	r3, #0
 801015e:	d104      	bne.n	801016a <f_lseek+0x384>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2202      	movs	r2, #2
 8010164:	755a      	strb	r2, [r3, #21]
 8010166:	2302      	movs	r3, #2
 8010168:	e05d      	b.n	8010226 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	899b      	ldrh	r3, [r3, #12]
 801016e:	461a      	mov	r2, r3
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	fbb3 f3f2 	udiv	r3, r3, r2
 8010176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010178:	4413      	add	r3, r2
 801017a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	699a      	ldr	r2, [r3, #24]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	429a      	cmp	r2, r3
 8010186:	d90a      	bls.n	801019e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	699a      	ldr	r2, [r3, #24]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	7d1b      	ldrb	r3, [r3, #20]
 8010194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010198:	b2da      	uxtb	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	699b      	ldr	r3, [r3, #24]
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	8992      	ldrh	r2, [r2, #12]
 80101a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80101aa:	fb01 f202 	mul.w	r2, r1, r2
 80101ae:	1a9b      	subs	r3, r3, r2
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d036      	beq.n	8010222 <f_lseek+0x43c>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a1b      	ldr	r3, [r3, #32]
 80101b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d031      	beq.n	8010222 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	7d1b      	ldrb	r3, [r3, #20]
 80101c2:	b25b      	sxtb	r3, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	da18      	bge.n	80101fa <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	7858      	ldrb	r0, [r3, #1]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6a1a      	ldr	r2, [r3, #32]
 80101d6:	2301      	movs	r3, #1
 80101d8:	f7fc fe8a 	bl	800cef0 <disk_write>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d004      	beq.n	80101ec <f_lseek+0x406>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2201      	movs	r2, #1
 80101e6:	755a      	strb	r2, [r3, #21]
 80101e8:	2301      	movs	r3, #1
 80101ea:	e01c      	b.n	8010226 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	7858      	ldrb	r0, [r3, #1]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010204:	2301      	movs	r3, #1
 8010206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010208:	f7fc fe52 	bl	800ceb0 <disk_read>
 801020c:	4603      	mov	r3, r0
 801020e:	2b00      	cmp	r3, #0
 8010210:	d004      	beq.n	801021c <f_lseek+0x436>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2201      	movs	r2, #1
 8010216:	755a      	strb	r2, [r3, #21]
 8010218:	2301      	movs	r3, #1
 801021a:	e004      	b.n	8010226 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010220:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010222:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010226:	4618      	mov	r0, r3
 8010228:	3740      	adds	r7, #64	; 0x40
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b086      	sub	sp, #24
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <f_opendir+0x14>
 801023e:	2309      	movs	r3, #9
 8010240:	e064      	b.n	801030c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010246:	f107 010c 	add.w	r1, r7, #12
 801024a:	463b      	mov	r3, r7
 801024c:	2200      	movs	r2, #0
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe fef4 	bl	800f03c <find_volume>
 8010254:	4603      	mov	r3, r0
 8010256:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d14f      	bne.n	80102fe <f_opendir+0xd0>
		obj->fs = fs;
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	4619      	mov	r1, r3
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7fe fdd7 	bl	800ee1c <follow_path>
 801026e:	4603      	mov	r3, r0
 8010270:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d13d      	bne.n	80102f4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801027e:	b25b      	sxtb	r3, r3
 8010280:	2b00      	cmp	r3, #0
 8010282:	db12      	blt.n	80102aa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	799b      	ldrb	r3, [r3, #6]
 8010288:	f003 0310 	and.w	r3, r3, #16
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00a      	beq.n	80102a6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6a1b      	ldr	r3, [r3, #32]
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f7fd fe9f 	bl	800dfdc <ld_clust>
 801029e:	4602      	mov	r2, r0
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	609a      	str	r2, [r3, #8]
 80102a4:	e001      	b.n	80102aa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80102a6:	2305      	movs	r3, #5
 80102a8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80102aa:	7dfb      	ldrb	r3, [r7, #23]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d121      	bne.n	80102f4 <f_opendir+0xc6>
				obj->id = fs->id;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	88da      	ldrh	r2, [r3, #6]
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80102b8:	2100      	movs	r1, #0
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7fd fce8 	bl	800dc90 <dir_sdi>
 80102c0:	4603      	mov	r3, r0
 80102c2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80102c4:	7dfb      	ldrb	r3, [r7, #23]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d114      	bne.n	80102f4 <f_opendir+0xc6>
					if (obj->sclust) {
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	689b      	ldr	r3, [r3, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00d      	beq.n	80102ee <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80102d2:	2100      	movs	r1, #0
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7fc ffc7 	bl	800d268 <inc_lock>
 80102da:	4602      	mov	r2, r0
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d105      	bne.n	80102f4 <f_opendir+0xc6>
 80102e8:	2312      	movs	r3, #18
 80102ea:	75fb      	strb	r3, [r7, #23]
 80102ec:	e002      	b.n	80102f4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2200      	movs	r2, #0
 80102f2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80102f4:	7dfb      	ldrb	r3, [r7, #23]
 80102f6:	2b04      	cmp	r3, #4
 80102f8:	d101      	bne.n	80102fe <f_opendir+0xd0>
 80102fa:	2305      	movs	r3, #5
 80102fc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <f_opendir+0xdc>
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801030a:	7dfb      	ldrb	r3, [r7, #23]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f107 0208 	add.w	r2, r7, #8
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff f90f 	bl	800f548 <validate>
 801032a:	4603      	mov	r3, r0
 801032c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801032e:	7bfb      	ldrb	r3, [r7, #15]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d110      	bne.n	8010356 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d006      	beq.n	801034a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	691b      	ldr	r3, [r3, #16]
 8010340:	4618      	mov	r0, r3
 8010342:	f7fd f81f 	bl	800d384 <dec_lock>
 8010346:	4603      	mov	r3, r0
 8010348:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801034a:	7bfb      	ldrb	r3, [r7, #15]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2200      	movs	r2, #0
 8010354:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010356:	7bfb      	ldrb	r3, [r7, #15]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f107 0208 	add.w	r2, r7, #8
 8010370:	4611      	mov	r1, r2
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff f8e8 	bl	800f548 <validate>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801037c:	7bfb      	ldrb	r3, [r7, #15]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d126      	bne.n	80103d0 <f_readdir+0x70>
		if (!fno) {
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d106      	bne.n	8010396 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010388:	2100      	movs	r1, #0
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7fd fc80 	bl	800dc90 <dir_sdi>
 8010390:	4603      	mov	r3, r0
 8010392:	73fb      	strb	r3, [r7, #15]
 8010394:	e01c      	b.n	80103d0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010396:	2100      	movs	r1, #0
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fe f84a 	bl	800e432 <dir_read>
 801039e:	4603      	mov	r3, r0
 80103a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d101      	bne.n	80103ac <f_readdir+0x4c>
 80103a8:	2300      	movs	r3, #0
 80103aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10e      	bne.n	80103d0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7fe fa9b 	bl	800e8f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80103ba:	2100      	movs	r1, #0
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7fd fcf0 	bl	800dda2 <dir_next>
 80103c2:	4603      	mov	r3, r0
 80103c4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80103c6:	7bfb      	ldrb	r3, [r7, #15]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d101      	bne.n	80103d0 <f_readdir+0x70>
 80103cc:	2300      	movs	r3, #0
 80103ce:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
	...

080103dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80103dc:	b480      	push	{r7}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	4613      	mov	r3, r2
 80103e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80103ea:	2301      	movs	r3, #1
 80103ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80103f2:	4b1f      	ldr	r3, [pc, #124]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 80103f4:	7a5b      	ldrb	r3, [r3, #9]
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d131      	bne.n	8010460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80103fc:	4b1c      	ldr	r3, [pc, #112]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 80103fe:	7a5b      	ldrb	r3, [r3, #9]
 8010400:	b2db      	uxtb	r3, r3
 8010402:	461a      	mov	r2, r3
 8010404:	4b1a      	ldr	r3, [pc, #104]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 8010406:	2100      	movs	r1, #0
 8010408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801040a:	4b19      	ldr	r3, [pc, #100]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 801040c:	7a5b      	ldrb	r3, [r3, #9]
 801040e:	b2db      	uxtb	r3, r3
 8010410:	4a17      	ldr	r2, [pc, #92]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801041a:	4b15      	ldr	r3, [pc, #84]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 801041c:	7a5b      	ldrb	r3, [r3, #9]
 801041e:	b2db      	uxtb	r3, r3
 8010420:	461a      	mov	r2, r3
 8010422:	4b13      	ldr	r3, [pc, #76]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 8010424:	4413      	add	r3, r2
 8010426:	79fa      	ldrb	r2, [r7, #7]
 8010428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801042a:	4b11      	ldr	r3, [pc, #68]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 801042c:	7a5b      	ldrb	r3, [r3, #9]
 801042e:	b2db      	uxtb	r3, r3
 8010430:	1c5a      	adds	r2, r3, #1
 8010432:	b2d1      	uxtb	r1, r2
 8010434:	4a0e      	ldr	r2, [pc, #56]	; (8010470 <FATFS_LinkDriverEx+0x94>)
 8010436:	7251      	strb	r1, [r2, #9]
 8010438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801043a:	7dbb      	ldrb	r3, [r7, #22]
 801043c:	3330      	adds	r3, #48	; 0x30
 801043e:	b2da      	uxtb	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	3301      	adds	r3, #1
 8010448:	223a      	movs	r2, #58	; 0x3a
 801044a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	3302      	adds	r3, #2
 8010450:	222f      	movs	r2, #47	; 0x2f
 8010452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	3303      	adds	r3, #3
 8010458:	2200      	movs	r2, #0
 801045a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010460:	7dfb      	ldrb	r3, [r7, #23]
}
 8010462:	4618      	mov	r0, r3
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	20002a20 	.word	0x20002a20

08010474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801047e:	2200      	movs	r2, #0
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff ffaa 	bl	80103dc <FATFS_LinkDriverEx>
 8010488:	4603      	mov	r3, r0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	4603      	mov	r3, r0
 801049c:	6039      	str	r1, [r7, #0]
 801049e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80104a0:	88fb      	ldrh	r3, [r7, #6]
 80104a2:	2b7f      	cmp	r3, #127	; 0x7f
 80104a4:	d802      	bhi.n	80104ac <ff_convert+0x18>
		c = chr;
 80104a6:	88fb      	ldrh	r3, [r7, #6]
 80104a8:	81fb      	strh	r3, [r7, #14]
 80104aa:	e025      	b.n	80104f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00b      	beq.n	80104ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80104b2:	88fb      	ldrh	r3, [r7, #6]
 80104b4:	2bff      	cmp	r3, #255	; 0xff
 80104b6:	d805      	bhi.n	80104c4 <ff_convert+0x30>
 80104b8:	88fb      	ldrh	r3, [r7, #6]
 80104ba:	3b80      	subs	r3, #128	; 0x80
 80104bc:	4a12      	ldr	r2, [pc, #72]	; (8010508 <ff_convert+0x74>)
 80104be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104c2:	e000      	b.n	80104c6 <ff_convert+0x32>
 80104c4:	2300      	movs	r3, #0
 80104c6:	81fb      	strh	r3, [r7, #14]
 80104c8:	e016      	b.n	80104f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80104ca:	2300      	movs	r3, #0
 80104cc:	81fb      	strh	r3, [r7, #14]
 80104ce:	e009      	b.n	80104e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80104d0:	89fb      	ldrh	r3, [r7, #14]
 80104d2:	4a0d      	ldr	r2, [pc, #52]	; (8010508 <ff_convert+0x74>)
 80104d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104d8:	88fa      	ldrh	r2, [r7, #6]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d006      	beq.n	80104ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80104de:	89fb      	ldrh	r3, [r7, #14]
 80104e0:	3301      	adds	r3, #1
 80104e2:	81fb      	strh	r3, [r7, #14]
 80104e4:	89fb      	ldrh	r3, [r7, #14]
 80104e6:	2b7f      	cmp	r3, #127	; 0x7f
 80104e8:	d9f2      	bls.n	80104d0 <ff_convert+0x3c>
 80104ea:	e000      	b.n	80104ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80104ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80104ee:	89fb      	ldrh	r3, [r7, #14]
 80104f0:	3380      	adds	r3, #128	; 0x80
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	b2db      	uxtb	r3, r3
 80104f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80104f8:	89fb      	ldrh	r3, [r7, #14]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3714      	adds	r7, #20
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	08012000 	.word	0x08012000

0801050c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	4603      	mov	r3, r0
 8010514:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010516:	88fb      	ldrh	r3, [r7, #6]
 8010518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801051c:	d201      	bcs.n	8010522 <ff_wtoupper+0x16>
 801051e:	4b3e      	ldr	r3, [pc, #248]	; (8010618 <ff_wtoupper+0x10c>)
 8010520:	e000      	b.n	8010524 <ff_wtoupper+0x18>
 8010522:	4b3e      	ldr	r3, [pc, #248]	; (801061c <ff_wtoupper+0x110>)
 8010524:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	1c9a      	adds	r2, r3, #2
 801052a:	617a      	str	r2, [r7, #20]
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010530:	8a7b      	ldrh	r3, [r7, #18]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d068      	beq.n	8010608 <ff_wtoupper+0xfc>
 8010536:	88fa      	ldrh	r2, [r7, #6]
 8010538:	8a7b      	ldrh	r3, [r7, #18]
 801053a:	429a      	cmp	r2, r3
 801053c:	d364      	bcc.n	8010608 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	1c9a      	adds	r2, r3, #2
 8010542:	617a      	str	r2, [r7, #20]
 8010544:	881b      	ldrh	r3, [r3, #0]
 8010546:	823b      	strh	r3, [r7, #16]
 8010548:	8a3b      	ldrh	r3, [r7, #16]
 801054a:	0a1b      	lsrs	r3, r3, #8
 801054c:	81fb      	strh	r3, [r7, #14]
 801054e:	8a3b      	ldrh	r3, [r7, #16]
 8010550:	b2db      	uxtb	r3, r3
 8010552:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010554:	88fa      	ldrh	r2, [r7, #6]
 8010556:	8a79      	ldrh	r1, [r7, #18]
 8010558:	8a3b      	ldrh	r3, [r7, #16]
 801055a:	440b      	add	r3, r1
 801055c:	429a      	cmp	r2, r3
 801055e:	da49      	bge.n	80105f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010560:	89fb      	ldrh	r3, [r7, #14]
 8010562:	2b08      	cmp	r3, #8
 8010564:	d84f      	bhi.n	8010606 <ff_wtoupper+0xfa>
 8010566:	a201      	add	r2, pc, #4	; (adr r2, 801056c <ff_wtoupper+0x60>)
 8010568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801056c:	08010591 	.word	0x08010591
 8010570:	080105a3 	.word	0x080105a3
 8010574:	080105b9 	.word	0x080105b9
 8010578:	080105c1 	.word	0x080105c1
 801057c:	080105c9 	.word	0x080105c9
 8010580:	080105d1 	.word	0x080105d1
 8010584:	080105d9 	.word	0x080105d9
 8010588:	080105e1 	.word	0x080105e1
 801058c:	080105e9 	.word	0x080105e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010590:	88fa      	ldrh	r2, [r7, #6]
 8010592:	8a7b      	ldrh	r3, [r7, #18]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	4413      	add	r3, r2
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	80fb      	strh	r3, [r7, #6]
 80105a0:	e027      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80105a2:	88fa      	ldrh	r2, [r7, #6]
 80105a4:	8a7b      	ldrh	r3, [r7, #18]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	f003 0301 	and.w	r3, r3, #1
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	88fa      	ldrh	r2, [r7, #6]
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	80fb      	strh	r3, [r7, #6]
 80105b6:	e01c      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80105b8:	88fb      	ldrh	r3, [r7, #6]
 80105ba:	3b10      	subs	r3, #16
 80105bc:	80fb      	strh	r3, [r7, #6]
 80105be:	e018      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80105c0:	88fb      	ldrh	r3, [r7, #6]
 80105c2:	3b20      	subs	r3, #32
 80105c4:	80fb      	strh	r3, [r7, #6]
 80105c6:	e014      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80105c8:	88fb      	ldrh	r3, [r7, #6]
 80105ca:	3b30      	subs	r3, #48	; 0x30
 80105cc:	80fb      	strh	r3, [r7, #6]
 80105ce:	e010      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80105d0:	88fb      	ldrh	r3, [r7, #6]
 80105d2:	3b1a      	subs	r3, #26
 80105d4:	80fb      	strh	r3, [r7, #6]
 80105d6:	e00c      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80105d8:	88fb      	ldrh	r3, [r7, #6]
 80105da:	3308      	adds	r3, #8
 80105dc:	80fb      	strh	r3, [r7, #6]
 80105de:	e008      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80105e0:	88fb      	ldrh	r3, [r7, #6]
 80105e2:	3b50      	subs	r3, #80	; 0x50
 80105e4:	80fb      	strh	r3, [r7, #6]
 80105e6:	e004      	b.n	80105f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80105e8:	88fb      	ldrh	r3, [r7, #6]
 80105ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80105ee:	80fb      	strh	r3, [r7, #6]
 80105f0:	bf00      	nop
			}
			break;
 80105f2:	e008      	b.n	8010606 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80105f4:	89fb      	ldrh	r3, [r7, #14]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d195      	bne.n	8010526 <ff_wtoupper+0x1a>
 80105fa:	8a3b      	ldrh	r3, [r7, #16]
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	4413      	add	r3, r2
 8010602:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010604:	e78f      	b.n	8010526 <ff_wtoupper+0x1a>
			break;
 8010606:	bf00      	nop
	}

	return chr;
 8010608:	88fb      	ldrh	r3, [r7, #6]
}
 801060a:	4618      	mov	r0, r3
 801060c:	371c      	adds	r7, #28
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	08012100 	.word	0x08012100
 801061c:	080122f4 	.word	0x080122f4

08010620 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010624:	2201      	movs	r2, #1
 8010626:	490e      	ldr	r1, [pc, #56]	; (8010660 <MX_USB_HOST_Init+0x40>)
 8010628:	480e      	ldr	r0, [pc, #56]	; (8010664 <MX_USB_HOST_Init+0x44>)
 801062a:	f7fa ffaf 	bl	800b58c <USBH_Init>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d001      	beq.n	8010638 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010634:	f7f1 fe64 	bl	8002300 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8010638:	490b      	ldr	r1, [pc, #44]	; (8010668 <MX_USB_HOST_Init+0x48>)
 801063a:	480a      	ldr	r0, [pc, #40]	; (8010664 <MX_USB_HOST_Init+0x44>)
 801063c:	f7fb f834 	bl	800b6a8 <USBH_RegisterClass>
 8010640:	4603      	mov	r3, r0
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010646:	f7f1 fe5b 	bl	8002300 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801064a:	4806      	ldr	r0, [pc, #24]	; (8010664 <MX_USB_HOST_Init+0x44>)
 801064c:	f7fb f8b8 	bl	800b7c0 <USBH_Start>
 8010650:	4603      	mov	r3, r0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010656:	f7f1 fe53 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801065a:	bf00      	nop
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	08010681 	.word	0x08010681
 8010664:	20002a2c 	.word	0x20002a2c
 8010668:	2000005c 	.word	0x2000005c

0801066c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010670:	4802      	ldr	r0, [pc, #8]	; (801067c <MX_USB_HOST_Process+0x10>)
 8010672:	f7fb f8b5 	bl	800b7e0 <USBH_Process>
}
 8010676:	bf00      	nop
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	20002a2c 	.word	0x20002a2c

08010680 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	3b01      	subs	r3, #1
 8010690:	2b04      	cmp	r3, #4
 8010692:	d819      	bhi.n	80106c8 <USBH_UserProcess+0x48>
 8010694:	a201      	add	r2, pc, #4	; (adr r2, 801069c <USBH_UserProcess+0x1c>)
 8010696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801069a:	bf00      	nop
 801069c:	080106c9 	.word	0x080106c9
 80106a0:	080106b9 	.word	0x080106b9
 80106a4:	080106c9 	.word	0x080106c9
 80106a8:	080106c1 	.word	0x080106c1
 80106ac:	080106b1 	.word	0x080106b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80106b0:	4b09      	ldr	r3, [pc, #36]	; (80106d8 <USBH_UserProcess+0x58>)
 80106b2:	2203      	movs	r2, #3
 80106b4:	701a      	strb	r2, [r3, #0]
  break;
 80106b6:	e008      	b.n	80106ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80106b8:	4b07      	ldr	r3, [pc, #28]	; (80106d8 <USBH_UserProcess+0x58>)
 80106ba:	2202      	movs	r2, #2
 80106bc:	701a      	strb	r2, [r3, #0]
  break;
 80106be:	e004      	b.n	80106ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80106c0:	4b05      	ldr	r3, [pc, #20]	; (80106d8 <USBH_UserProcess+0x58>)
 80106c2:	2201      	movs	r2, #1
 80106c4:	701a      	strb	r2, [r3, #0]
  break;
 80106c6:	e000      	b.n	80106ca <USBH_UserProcess+0x4a>

  default:
  break;
 80106c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80106ca:	bf00      	nop
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	20002e04 	.word	0x20002e04

080106dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b08a      	sub	sp, #40	; 0x28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106e4:	f107 0314 	add.w	r3, r7, #20
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	605a      	str	r2, [r3, #4]
 80106ee:	609a      	str	r2, [r3, #8]
 80106f0:	60da      	str	r2, [r3, #12]
 80106f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80106fc:	d147      	bne.n	801078e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106fe:	2300      	movs	r3, #0
 8010700:	613b      	str	r3, [r7, #16]
 8010702:	4b25      	ldr	r3, [pc, #148]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010706:	4a24      	ldr	r2, [pc, #144]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010708:	f043 0301 	orr.w	r3, r3, #1
 801070c:	6313      	str	r3, [r2, #48]	; 0x30
 801070e:	4b22      	ldr	r3, [pc, #136]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010712:	f003 0301 	and.w	r3, r3, #1
 8010716:	613b      	str	r3, [r7, #16]
 8010718:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801071a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010720:	2300      	movs	r3, #0
 8010722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010724:	2300      	movs	r3, #0
 8010726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010728:	f107 0314 	add.w	r3, r7, #20
 801072c:	4619      	mov	r1, r3
 801072e:	481b      	ldr	r0, [pc, #108]	; (801079c <HAL_HCD_MspInit+0xc0>)
 8010730:	f7f3 f896 	bl	8003860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801073a:	2302      	movs	r3, #2
 801073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801073e:	2300      	movs	r3, #0
 8010740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010742:	2303      	movs	r3, #3
 8010744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010746:	230a      	movs	r3, #10
 8010748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801074a:	f107 0314 	add.w	r3, r7, #20
 801074e:	4619      	mov	r1, r3
 8010750:	4812      	ldr	r0, [pc, #72]	; (801079c <HAL_HCD_MspInit+0xc0>)
 8010752:	f7f3 f885 	bl	8003860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010756:	4b10      	ldr	r3, [pc, #64]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801075a:	4a0f      	ldr	r2, [pc, #60]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 801075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010760:	6353      	str	r3, [r2, #52]	; 0x34
 8010762:	2300      	movs	r3, #0
 8010764:	60fb      	str	r3, [r7, #12]
 8010766:	4b0c      	ldr	r3, [pc, #48]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801076a:	4a0b      	ldr	r2, [pc, #44]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 801076c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010770:	6453      	str	r3, [r2, #68]	; 0x44
 8010772:	4b09      	ldr	r3, [pc, #36]	; (8010798 <HAL_HCD_MspInit+0xbc>)
 8010774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801077a:	60fb      	str	r3, [r7, #12]
 801077c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801077e:	2200      	movs	r2, #0
 8010780:	2100      	movs	r1, #0
 8010782:	2043      	movs	r0, #67	; 0x43
 8010784:	f7f2 fbf7 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010788:	2043      	movs	r0, #67	; 0x43
 801078a:	f7f2 fc10 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801078e:	bf00      	nop
 8010790:	3728      	adds	r7, #40	; 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	40023800 	.word	0x40023800
 801079c:	40020000 	.word	0x40020000

080107a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fb fbf5 	bl	800bf9e <USBH_LL_IncTimer>
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fb fc2d 	bl	800c02a <USBH_LL_Connect>
}
 80107d0:	bf00      	nop
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fb fc36 	bl	800c058 <USBH_LL_Disconnect>
}
 80107ec:	bf00      	nop
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	460b      	mov	r3, r1
 80107fe:	70fb      	strb	r3, [r7, #3]
 8010800:	4613      	mov	r3, r2
 8010802:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010804:	bf00      	nop
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801081e:	4618      	mov	r0, r3
 8010820:	f7fb fbe7 	bl	800bff2 <USBH_LL_PortEnabled>
}
 8010824:	bf00      	nop
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801083a:	4618      	mov	r0, r3
 801083c:	f7fb fbe7 	bl	800c00e <USBH_LL_PortDisabled>
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010856:	2b01      	cmp	r3, #1
 8010858:	d12a      	bne.n	80108b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801085a:	4a18      	ldr	r2, [pc, #96]	; (80108bc <USBH_LL_Init+0x74>)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	4a15      	ldr	r2, [pc, #84]	; (80108bc <USBH_LL_Init+0x74>)
 8010866:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801086a:	4b14      	ldr	r3, [pc, #80]	; (80108bc <USBH_LL_Init+0x74>)
 801086c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010870:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010872:	4b12      	ldr	r3, [pc, #72]	; (80108bc <USBH_LL_Init+0x74>)
 8010874:	2208      	movs	r2, #8
 8010876:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010878:	4b10      	ldr	r3, [pc, #64]	; (80108bc <USBH_LL_Init+0x74>)
 801087a:	2201      	movs	r2, #1
 801087c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801087e:	4b0f      	ldr	r3, [pc, #60]	; (80108bc <USBH_LL_Init+0x74>)
 8010880:	2200      	movs	r2, #0
 8010882:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010884:	4b0d      	ldr	r3, [pc, #52]	; (80108bc <USBH_LL_Init+0x74>)
 8010886:	2202      	movs	r2, #2
 8010888:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801088a:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <USBH_LL_Init+0x74>)
 801088c:	2200      	movs	r2, #0
 801088e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010890:	480a      	ldr	r0, [pc, #40]	; (80108bc <USBH_LL_Init+0x74>)
 8010892:	f7f3 fa7f 	bl	8003d94 <HAL_HCD_Init>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801089c:	f7f1 fd30 	bl	8002300 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80108a0:	4806      	ldr	r0, [pc, #24]	; (80108bc <USBH_LL_Init+0x74>)
 80108a2:	f7f3 fe62 	bl	800456a <HAL_HCD_GetCurrentFrame>
 80108a6:	4603      	mov	r3, r0
 80108a8:	4619      	mov	r1, r3
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7fb fb68 	bl	800bf80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20002e08 	.word	0x20002e08

080108c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7f3 fdd1 	bl	800447e <HAL_HCD_Start>
 80108dc:	4603      	mov	r3, r0
 80108de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 f98c 	bl	8010c00 <USBH_Get_USB_Status>
 80108e8:	4603      	mov	r3, r0
 80108ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801090c:	4618      	mov	r0, r3
 801090e:	f7f3 fdd9 	bl	80044c4 <HAL_HCD_Stop>
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	4618      	mov	r0, r3
 801091a:	f000 f971 	bl	8010c00 <USBH_Get_USB_Status>
 801091e:	4603      	mov	r3, r0
 8010920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010922:	7bbb      	ldrb	r3, [r7, #14]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010934:	2301      	movs	r3, #1
 8010936:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801093e:	4618      	mov	r0, r3
 8010940:	f7f3 fe21 	bl	8004586 <HAL_HCD_GetCurrentSpeed>
 8010944:	4603      	mov	r3, r0
 8010946:	2b02      	cmp	r3, #2
 8010948:	d00c      	beq.n	8010964 <USBH_LL_GetSpeed+0x38>
 801094a:	2b02      	cmp	r3, #2
 801094c:	d80d      	bhi.n	801096a <USBH_LL_GetSpeed+0x3e>
 801094e:	2b00      	cmp	r3, #0
 8010950:	d002      	beq.n	8010958 <USBH_LL_GetSpeed+0x2c>
 8010952:	2b01      	cmp	r3, #1
 8010954:	d003      	beq.n	801095e <USBH_LL_GetSpeed+0x32>
 8010956:	e008      	b.n	801096a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010958:	2300      	movs	r3, #0
 801095a:	73fb      	strb	r3, [r7, #15]
    break;
 801095c:	e008      	b.n	8010970 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801095e:	2301      	movs	r3, #1
 8010960:	73fb      	strb	r3, [r7, #15]
    break;
 8010962:	e005      	b.n	8010970 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010964:	2302      	movs	r3, #2
 8010966:	73fb      	strb	r3, [r7, #15]
    break;
 8010968:	e002      	b.n	8010970 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801096a:	2301      	movs	r3, #1
 801096c:	73fb      	strb	r3, [r7, #15]
    break;
 801096e:	bf00      	nop
  }
  return  speed;
 8010970:	7bfb      	ldrb	r3, [r7, #15]
}
 8010972:	4618      	mov	r0, r3
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010986:	2300      	movs	r3, #0
 8010988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010990:	4618      	mov	r0, r3
 8010992:	f7f3 fdb4 	bl	80044fe <HAL_HCD_ResetPort>
 8010996:	4603      	mov	r3, r0
 8010998:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801099a:	7bfb      	ldrb	r3, [r7, #15]
 801099c:	4618      	mov	r0, r3
 801099e:	f000 f92f 	bl	8010c00 <USBH_Get_USB_Status>
 80109a2:	4603      	mov	r3, r0
 80109a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	460b      	mov	r3, r1
 80109ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80109c2:	78fa      	ldrb	r2, [r7, #3]
 80109c4:	4611      	mov	r1, r2
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7f3 fdbb 	bl	8004542 <HAL_HCD_HC_GetXferCount>
 80109cc:	4603      	mov	r3, r0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80109d6:	b590      	push	{r4, r7, lr}
 80109d8:	b089      	sub	sp, #36	; 0x24
 80109da:	af04      	add	r7, sp, #16
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	4608      	mov	r0, r1
 80109e0:	4611      	mov	r1, r2
 80109e2:	461a      	mov	r2, r3
 80109e4:	4603      	mov	r3, r0
 80109e6:	70fb      	strb	r3, [r7, #3]
 80109e8:	460b      	mov	r3, r1
 80109ea:	70bb      	strb	r3, [r7, #2]
 80109ec:	4613      	mov	r3, r2
 80109ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109f0:	2300      	movs	r3, #0
 80109f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80109fe:	787c      	ldrb	r4, [r7, #1]
 8010a00:	78ba      	ldrb	r2, [r7, #2]
 8010a02:	78f9      	ldrb	r1, [r7, #3]
 8010a04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010a06:	9302      	str	r3, [sp, #8]
 8010a08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a0c:	9301      	str	r3, [sp, #4]
 8010a0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	4623      	mov	r3, r4
 8010a16:	f7f3 fa1f 	bl	8003e58 <HAL_HCD_HC_Init>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a1e:	7bfb      	ldrb	r3, [r7, #15]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f000 f8ed 	bl	8010c00 <USBH_Get_USB_Status>
 8010a26:	4603      	mov	r3, r0
 8010a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3714      	adds	r7, #20
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd90      	pop	{r4, r7, pc}

08010a34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a4e:	78fa      	ldrb	r2, [r7, #3]
 8010a50:	4611      	mov	r1, r2
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7f3 fa8f 	bl	8003f76 <HAL_HCD_HC_Halt>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f000 f8ce 	bl	8010c00 <USBH_Get_USB_Status>
 8010a64:	4603      	mov	r3, r0
 8010a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010a72:	b590      	push	{r4, r7, lr}
 8010a74:	b089      	sub	sp, #36	; 0x24
 8010a76:	af04      	add	r7, sp, #16
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	461a      	mov	r2, r3
 8010a80:	4603      	mov	r3, r0
 8010a82:	70fb      	strb	r3, [r7, #3]
 8010a84:	460b      	mov	r3, r1
 8010a86:	70bb      	strb	r3, [r7, #2]
 8010a88:	4613      	mov	r3, r2
 8010a8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010a9a:	787c      	ldrb	r4, [r7, #1]
 8010a9c:	78ba      	ldrb	r2, [r7, #2]
 8010a9e:	78f9      	ldrb	r1, [r7, #3]
 8010aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010aa4:	9303      	str	r3, [sp, #12]
 8010aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010aa8:	9302      	str	r3, [sp, #8]
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	4623      	mov	r3, r4
 8010ab6:	f7f3 fa81 	bl	8003fbc <HAL_HCD_HC_SubmitRequest>
 8010aba:	4603      	mov	r3, r0
 8010abc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010abe:	7bfb      	ldrb	r3, [r7, #15]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f000 f89d 	bl	8010c00 <USBH_Get_USB_Status>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd90      	pop	{r4, r7, pc}

08010ad4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	460b      	mov	r3, r1
 8010ade:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ae6:	78fa      	ldrb	r2, [r7, #3]
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f3 fd15 	bl	800451a <HAL_HCD_HC_GetURBState>
 8010af0:	4603      	mov	r3, r0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010afa:	b580      	push	{r7, lr}
 8010afc:	b082      	sub	sp, #8
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	460b      	mov	r3, r1
 8010b04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010b0c:	2b01      	cmp	r3, #1
 8010b0e:	d103      	bne.n	8010b18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010b10:	78fb      	ldrb	r3, [r7, #3]
 8010b12:	4618      	mov	r0, r3
 8010b14:	f000 f8a0 	bl	8010c58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010b18:	20c8      	movs	r0, #200	; 0xc8
 8010b1a:	f7f2 f92d 	bl	8002d78 <HAL_Delay>
  return USBH_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	460b      	mov	r3, r1
 8010b32:	70fb      	strb	r3, [r7, #3]
 8010b34:	4613      	mov	r3, r2
 8010b36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010b40:	78fb      	ldrb	r3, [r7, #3]
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	212c      	movs	r1, #44	; 0x2c
 8010b46:	fb01 f303 	mul.w	r3, r1, r3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	333b      	adds	r3, #59	; 0x3b
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d009      	beq.n	8010b68 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010b54:	78fb      	ldrb	r3, [r7, #3]
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	212c      	movs	r1, #44	; 0x2c
 8010b5a:	fb01 f303 	mul.w	r3, r1, r3
 8010b5e:	4413      	add	r3, r2
 8010b60:	3354      	adds	r3, #84	; 0x54
 8010b62:	78ba      	ldrb	r2, [r7, #2]
 8010b64:	701a      	strb	r2, [r3, #0]
 8010b66:	e008      	b.n	8010b7a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010b68:	78fb      	ldrb	r3, [r7, #3]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	212c      	movs	r1, #44	; 0x2c
 8010b6e:	fb01 f303 	mul.w	r3, r1, r3
 8010b72:	4413      	add	r3, r2
 8010b74:	3355      	adds	r3, #85	; 0x55
 8010b76:	78ba      	ldrb	r2, [r7, #2]
 8010b78:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010b7a:	2300      	movs	r3, #0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3714      	adds	r7, #20
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010b94:	2300      	movs	r3, #0
 8010b96:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b9e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010ba0:	78fb      	ldrb	r3, [r7, #3]
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	212c      	movs	r1, #44	; 0x2c
 8010ba6:	fb01 f303 	mul.w	r3, r1, r3
 8010baa:	4413      	add	r3, r2
 8010bac:	333b      	adds	r3, #59	; 0x3b
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d009      	beq.n	8010bc8 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010bb4:	78fb      	ldrb	r3, [r7, #3]
 8010bb6:	68ba      	ldr	r2, [r7, #8]
 8010bb8:	212c      	movs	r1, #44	; 0x2c
 8010bba:	fb01 f303 	mul.w	r3, r1, r3
 8010bbe:	4413      	add	r3, r2
 8010bc0:	3354      	adds	r3, #84	; 0x54
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	73fb      	strb	r3, [r7, #15]
 8010bc6:	e008      	b.n	8010bda <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010bc8:	78fb      	ldrb	r3, [r7, #3]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	212c      	movs	r1, #44	; 0x2c
 8010bce:	fb01 f303 	mul.w	r3, r1, r3
 8010bd2:	4413      	add	r3, r2
 8010bd4:	3355      	adds	r3, #85	; 0x55
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7f2 f8c1 	bl	8002d78 <HAL_Delay>
}
 8010bf6:	bf00      	nop
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
	...

08010c00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c0e:	79fb      	ldrb	r3, [r7, #7]
 8010c10:	2b03      	cmp	r3, #3
 8010c12:	d817      	bhi.n	8010c44 <USBH_Get_USB_Status+0x44>
 8010c14:	a201      	add	r2, pc, #4	; (adr r2, 8010c1c <USBH_Get_USB_Status+0x1c>)
 8010c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c1a:	bf00      	nop
 8010c1c:	08010c2d 	.word	0x08010c2d
 8010c20:	08010c33 	.word	0x08010c33
 8010c24:	08010c39 	.word	0x08010c39
 8010c28:	08010c3f 	.word	0x08010c3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010c30:	e00b      	b.n	8010c4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010c32:	2302      	movs	r3, #2
 8010c34:	73fb      	strb	r3, [r7, #15]
    break;
 8010c36:	e008      	b.n	8010c4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c3c:	e005      	b.n	8010c4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010c3e:	2302      	movs	r3, #2
 8010c40:	73fb      	strb	r3, [r7, #15]
    break;
 8010c42:	e002      	b.n	8010c4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010c44:	2302      	movs	r3, #2
 8010c46:	73fb      	strb	r3, [r7, #15]
    break;
 8010c48:	bf00      	nop
  }
  return usb_status;
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010c62:	79fb      	ldrb	r3, [r7, #7]
 8010c64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010c66:	79fb      	ldrb	r3, [r7, #7]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d102      	bne.n	8010c72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	73fb      	strb	r3, [r7, #15]
 8010c70:	e001      	b.n	8010c76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010c72:	2301      	movs	r3, #1
 8010c74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	2101      	movs	r1, #1
 8010c7c:	4803      	ldr	r0, [pc, #12]	; (8010c8c <MX_DriverVbusFS+0x34>)
 8010c7e:	f7f3 f857 	bl	8003d30 <HAL_GPIO_WritePin>
}
 8010c82:	bf00      	nop
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	40020800 	.word	0x40020800

08010c90 <__errno>:
 8010c90:	4b01      	ldr	r3, [pc, #4]	; (8010c98 <__errno+0x8>)
 8010c92:	6818      	ldr	r0, [r3, #0]
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	2000007c 	.word	0x2000007c

08010c9c <__libc_init_array>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	4d0d      	ldr	r5, [pc, #52]	; (8010cd4 <__libc_init_array+0x38>)
 8010ca0:	4c0d      	ldr	r4, [pc, #52]	; (8010cd8 <__libc_init_array+0x3c>)
 8010ca2:	1b64      	subs	r4, r4, r5
 8010ca4:	10a4      	asrs	r4, r4, #2
 8010ca6:	2600      	movs	r6, #0
 8010ca8:	42a6      	cmp	r6, r4
 8010caa:	d109      	bne.n	8010cc0 <__libc_init_array+0x24>
 8010cac:	4d0b      	ldr	r5, [pc, #44]	; (8010cdc <__libc_init_array+0x40>)
 8010cae:	4c0c      	ldr	r4, [pc, #48]	; (8010ce0 <__libc_init_array+0x44>)
 8010cb0:	f001 f86c 	bl	8011d8c <_init>
 8010cb4:	1b64      	subs	r4, r4, r5
 8010cb6:	10a4      	asrs	r4, r4, #2
 8010cb8:	2600      	movs	r6, #0
 8010cba:	42a6      	cmp	r6, r4
 8010cbc:	d105      	bne.n	8010cca <__libc_init_array+0x2e>
 8010cbe:	bd70      	pop	{r4, r5, r6, pc}
 8010cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cc4:	4798      	blx	r3
 8010cc6:	3601      	adds	r6, #1
 8010cc8:	e7ee      	b.n	8010ca8 <__libc_init_array+0xc>
 8010cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cce:	4798      	blx	r3
 8010cd0:	3601      	adds	r6, #1
 8010cd2:	e7f2      	b.n	8010cba <__libc_init_array+0x1e>
 8010cd4:	08012450 	.word	0x08012450
 8010cd8:	08012450 	.word	0x08012450
 8010cdc:	08012450 	.word	0x08012450
 8010ce0:	08012454 	.word	0x08012454

08010ce4 <malloc>:
 8010ce4:	4b02      	ldr	r3, [pc, #8]	; (8010cf0 <malloc+0xc>)
 8010ce6:	4601      	mov	r1, r0
 8010ce8:	6818      	ldr	r0, [r3, #0]
 8010cea:	f000 b88d 	b.w	8010e08 <_malloc_r>
 8010cee:	bf00      	nop
 8010cf0:	2000007c 	.word	0x2000007c

08010cf4 <free>:
 8010cf4:	4b02      	ldr	r3, [pc, #8]	; (8010d00 <free+0xc>)
 8010cf6:	4601      	mov	r1, r0
 8010cf8:	6818      	ldr	r0, [r3, #0]
 8010cfa:	f000 b819 	b.w	8010d30 <_free_r>
 8010cfe:	bf00      	nop
 8010d00:	2000007c 	.word	0x2000007c

08010d04 <memcpy>:
 8010d04:	440a      	add	r2, r1
 8010d06:	4291      	cmp	r1, r2
 8010d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d0c:	d100      	bne.n	8010d10 <memcpy+0xc>
 8010d0e:	4770      	bx	lr
 8010d10:	b510      	push	{r4, lr}
 8010d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d1a:	4291      	cmp	r1, r2
 8010d1c:	d1f9      	bne.n	8010d12 <memcpy+0xe>
 8010d1e:	bd10      	pop	{r4, pc}

08010d20 <memset>:
 8010d20:	4402      	add	r2, r0
 8010d22:	4603      	mov	r3, r0
 8010d24:	4293      	cmp	r3, r2
 8010d26:	d100      	bne.n	8010d2a <memset+0xa>
 8010d28:	4770      	bx	lr
 8010d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d2e:	e7f9      	b.n	8010d24 <memset+0x4>

08010d30 <_free_r>:
 8010d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d32:	2900      	cmp	r1, #0
 8010d34:	d044      	beq.n	8010dc0 <_free_r+0x90>
 8010d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d3a:	9001      	str	r0, [sp, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d42:	bfb8      	it	lt
 8010d44:	18e4      	addlt	r4, r4, r3
 8010d46:	f000 fc7b 	bl	8011640 <__malloc_lock>
 8010d4a:	4a1e      	ldr	r2, [pc, #120]	; (8010dc4 <_free_r+0x94>)
 8010d4c:	9801      	ldr	r0, [sp, #4]
 8010d4e:	6813      	ldr	r3, [r2, #0]
 8010d50:	b933      	cbnz	r3, 8010d60 <_free_r+0x30>
 8010d52:	6063      	str	r3, [r4, #4]
 8010d54:	6014      	str	r4, [r2, #0]
 8010d56:	b003      	add	sp, #12
 8010d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d5c:	f000 bc76 	b.w	801164c <__malloc_unlock>
 8010d60:	42a3      	cmp	r3, r4
 8010d62:	d908      	bls.n	8010d76 <_free_r+0x46>
 8010d64:	6825      	ldr	r5, [r4, #0]
 8010d66:	1961      	adds	r1, r4, r5
 8010d68:	428b      	cmp	r3, r1
 8010d6a:	bf01      	itttt	eq
 8010d6c:	6819      	ldreq	r1, [r3, #0]
 8010d6e:	685b      	ldreq	r3, [r3, #4]
 8010d70:	1949      	addeq	r1, r1, r5
 8010d72:	6021      	streq	r1, [r4, #0]
 8010d74:	e7ed      	b.n	8010d52 <_free_r+0x22>
 8010d76:	461a      	mov	r2, r3
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	b10b      	cbz	r3, 8010d80 <_free_r+0x50>
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d9fa      	bls.n	8010d76 <_free_r+0x46>
 8010d80:	6811      	ldr	r1, [r2, #0]
 8010d82:	1855      	adds	r5, r2, r1
 8010d84:	42a5      	cmp	r5, r4
 8010d86:	d10b      	bne.n	8010da0 <_free_r+0x70>
 8010d88:	6824      	ldr	r4, [r4, #0]
 8010d8a:	4421      	add	r1, r4
 8010d8c:	1854      	adds	r4, r2, r1
 8010d8e:	42a3      	cmp	r3, r4
 8010d90:	6011      	str	r1, [r2, #0]
 8010d92:	d1e0      	bne.n	8010d56 <_free_r+0x26>
 8010d94:	681c      	ldr	r4, [r3, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	6053      	str	r3, [r2, #4]
 8010d9a:	4421      	add	r1, r4
 8010d9c:	6011      	str	r1, [r2, #0]
 8010d9e:	e7da      	b.n	8010d56 <_free_r+0x26>
 8010da0:	d902      	bls.n	8010da8 <_free_r+0x78>
 8010da2:	230c      	movs	r3, #12
 8010da4:	6003      	str	r3, [r0, #0]
 8010da6:	e7d6      	b.n	8010d56 <_free_r+0x26>
 8010da8:	6825      	ldr	r5, [r4, #0]
 8010daa:	1961      	adds	r1, r4, r5
 8010dac:	428b      	cmp	r3, r1
 8010dae:	bf04      	itt	eq
 8010db0:	6819      	ldreq	r1, [r3, #0]
 8010db2:	685b      	ldreq	r3, [r3, #4]
 8010db4:	6063      	str	r3, [r4, #4]
 8010db6:	bf04      	itt	eq
 8010db8:	1949      	addeq	r1, r1, r5
 8010dba:	6021      	streq	r1, [r4, #0]
 8010dbc:	6054      	str	r4, [r2, #4]
 8010dbe:	e7ca      	b.n	8010d56 <_free_r+0x26>
 8010dc0:	b003      	add	sp, #12
 8010dc2:	bd30      	pop	{r4, r5, pc}
 8010dc4:	2000310c 	.word	0x2000310c

08010dc8 <sbrk_aligned>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	4e0e      	ldr	r6, [pc, #56]	; (8010e04 <sbrk_aligned+0x3c>)
 8010dcc:	460c      	mov	r4, r1
 8010dce:	6831      	ldr	r1, [r6, #0]
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	b911      	cbnz	r1, 8010dda <sbrk_aligned+0x12>
 8010dd4:	f000 f91a 	bl	801100c <_sbrk_r>
 8010dd8:	6030      	str	r0, [r6, #0]
 8010dda:	4621      	mov	r1, r4
 8010ddc:	4628      	mov	r0, r5
 8010dde:	f000 f915 	bl	801100c <_sbrk_r>
 8010de2:	1c43      	adds	r3, r0, #1
 8010de4:	d00a      	beq.n	8010dfc <sbrk_aligned+0x34>
 8010de6:	1cc4      	adds	r4, r0, #3
 8010de8:	f024 0403 	bic.w	r4, r4, #3
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	d007      	beq.n	8010e00 <sbrk_aligned+0x38>
 8010df0:	1a21      	subs	r1, r4, r0
 8010df2:	4628      	mov	r0, r5
 8010df4:	f000 f90a 	bl	801100c <_sbrk_r>
 8010df8:	3001      	adds	r0, #1
 8010dfa:	d101      	bne.n	8010e00 <sbrk_aligned+0x38>
 8010dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8010e00:	4620      	mov	r0, r4
 8010e02:	bd70      	pop	{r4, r5, r6, pc}
 8010e04:	20003110 	.word	0x20003110

08010e08 <_malloc_r>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	1ccd      	adds	r5, r1, #3
 8010e0e:	f025 0503 	bic.w	r5, r5, #3
 8010e12:	3508      	adds	r5, #8
 8010e14:	2d0c      	cmp	r5, #12
 8010e16:	bf38      	it	cc
 8010e18:	250c      	movcc	r5, #12
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	4607      	mov	r7, r0
 8010e1e:	db01      	blt.n	8010e24 <_malloc_r+0x1c>
 8010e20:	42a9      	cmp	r1, r5
 8010e22:	d905      	bls.n	8010e30 <_malloc_r+0x28>
 8010e24:	230c      	movs	r3, #12
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	2600      	movs	r6, #0
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e30:	4e2e      	ldr	r6, [pc, #184]	; (8010eec <_malloc_r+0xe4>)
 8010e32:	f000 fc05 	bl	8011640 <__malloc_lock>
 8010e36:	6833      	ldr	r3, [r6, #0]
 8010e38:	461c      	mov	r4, r3
 8010e3a:	bb34      	cbnz	r4, 8010e8a <_malloc_r+0x82>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7ff ffc2 	bl	8010dc8 <sbrk_aligned>
 8010e44:	1c43      	adds	r3, r0, #1
 8010e46:	4604      	mov	r4, r0
 8010e48:	d14d      	bne.n	8010ee6 <_malloc_r+0xde>
 8010e4a:	6834      	ldr	r4, [r6, #0]
 8010e4c:	4626      	mov	r6, r4
 8010e4e:	2e00      	cmp	r6, #0
 8010e50:	d140      	bne.n	8010ed4 <_malloc_r+0xcc>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	4631      	mov	r1, r6
 8010e56:	4638      	mov	r0, r7
 8010e58:	eb04 0803 	add.w	r8, r4, r3
 8010e5c:	f000 f8d6 	bl	801100c <_sbrk_r>
 8010e60:	4580      	cmp	r8, r0
 8010e62:	d13a      	bne.n	8010eda <_malloc_r+0xd2>
 8010e64:	6821      	ldr	r1, [r4, #0]
 8010e66:	3503      	adds	r5, #3
 8010e68:	1a6d      	subs	r5, r5, r1
 8010e6a:	f025 0503 	bic.w	r5, r5, #3
 8010e6e:	3508      	adds	r5, #8
 8010e70:	2d0c      	cmp	r5, #12
 8010e72:	bf38      	it	cc
 8010e74:	250c      	movcc	r5, #12
 8010e76:	4629      	mov	r1, r5
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f7ff ffa5 	bl	8010dc8 <sbrk_aligned>
 8010e7e:	3001      	adds	r0, #1
 8010e80:	d02b      	beq.n	8010eda <_malloc_r+0xd2>
 8010e82:	6823      	ldr	r3, [r4, #0]
 8010e84:	442b      	add	r3, r5
 8010e86:	6023      	str	r3, [r4, #0]
 8010e88:	e00e      	b.n	8010ea8 <_malloc_r+0xa0>
 8010e8a:	6822      	ldr	r2, [r4, #0]
 8010e8c:	1b52      	subs	r2, r2, r5
 8010e8e:	d41e      	bmi.n	8010ece <_malloc_r+0xc6>
 8010e90:	2a0b      	cmp	r2, #11
 8010e92:	d916      	bls.n	8010ec2 <_malloc_r+0xba>
 8010e94:	1961      	adds	r1, r4, r5
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	6025      	str	r5, [r4, #0]
 8010e9a:	bf18      	it	ne
 8010e9c:	6059      	strne	r1, [r3, #4]
 8010e9e:	6863      	ldr	r3, [r4, #4]
 8010ea0:	bf08      	it	eq
 8010ea2:	6031      	streq	r1, [r6, #0]
 8010ea4:	5162      	str	r2, [r4, r5]
 8010ea6:	604b      	str	r3, [r1, #4]
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	f104 060b 	add.w	r6, r4, #11
 8010eae:	f000 fbcd 	bl	801164c <__malloc_unlock>
 8010eb2:	f026 0607 	bic.w	r6, r6, #7
 8010eb6:	1d23      	adds	r3, r4, #4
 8010eb8:	1af2      	subs	r2, r6, r3
 8010eba:	d0b6      	beq.n	8010e2a <_malloc_r+0x22>
 8010ebc:	1b9b      	subs	r3, r3, r6
 8010ebe:	50a3      	str	r3, [r4, r2]
 8010ec0:	e7b3      	b.n	8010e2a <_malloc_r+0x22>
 8010ec2:	6862      	ldr	r2, [r4, #4]
 8010ec4:	42a3      	cmp	r3, r4
 8010ec6:	bf0c      	ite	eq
 8010ec8:	6032      	streq	r2, [r6, #0]
 8010eca:	605a      	strne	r2, [r3, #4]
 8010ecc:	e7ec      	b.n	8010ea8 <_malloc_r+0xa0>
 8010ece:	4623      	mov	r3, r4
 8010ed0:	6864      	ldr	r4, [r4, #4]
 8010ed2:	e7b2      	b.n	8010e3a <_malloc_r+0x32>
 8010ed4:	4634      	mov	r4, r6
 8010ed6:	6876      	ldr	r6, [r6, #4]
 8010ed8:	e7b9      	b.n	8010e4e <_malloc_r+0x46>
 8010eda:	230c      	movs	r3, #12
 8010edc:	603b      	str	r3, [r7, #0]
 8010ede:	4638      	mov	r0, r7
 8010ee0:	f000 fbb4 	bl	801164c <__malloc_unlock>
 8010ee4:	e7a1      	b.n	8010e2a <_malloc_r+0x22>
 8010ee6:	6025      	str	r5, [r4, #0]
 8010ee8:	e7de      	b.n	8010ea8 <_malloc_r+0xa0>
 8010eea:	bf00      	nop
 8010eec:	2000310c 	.word	0x2000310c

08010ef0 <iprintf>:
 8010ef0:	b40f      	push	{r0, r1, r2, r3}
 8010ef2:	4b0a      	ldr	r3, [pc, #40]	; (8010f1c <iprintf+0x2c>)
 8010ef4:	b513      	push	{r0, r1, r4, lr}
 8010ef6:	681c      	ldr	r4, [r3, #0]
 8010ef8:	b124      	cbz	r4, 8010f04 <iprintf+0x14>
 8010efa:	69a3      	ldr	r3, [r4, #24]
 8010efc:	b913      	cbnz	r3, 8010f04 <iprintf+0x14>
 8010efe:	4620      	mov	r0, r4
 8010f00:	f000 fa98 	bl	8011434 <__sinit>
 8010f04:	ab05      	add	r3, sp, #20
 8010f06:	9a04      	ldr	r2, [sp, #16]
 8010f08:	68a1      	ldr	r1, [r4, #8]
 8010f0a:	9301      	str	r3, [sp, #4]
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f000 fbcd 	bl	80116ac <_vfiprintf_r>
 8010f12:	b002      	add	sp, #8
 8010f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f18:	b004      	add	sp, #16
 8010f1a:	4770      	bx	lr
 8010f1c:	2000007c 	.word	0x2000007c

08010f20 <_puts_r>:
 8010f20:	b570      	push	{r4, r5, r6, lr}
 8010f22:	460e      	mov	r6, r1
 8010f24:	4605      	mov	r5, r0
 8010f26:	b118      	cbz	r0, 8010f30 <_puts_r+0x10>
 8010f28:	6983      	ldr	r3, [r0, #24]
 8010f2a:	b90b      	cbnz	r3, 8010f30 <_puts_r+0x10>
 8010f2c:	f000 fa82 	bl	8011434 <__sinit>
 8010f30:	69ab      	ldr	r3, [r5, #24]
 8010f32:	68ac      	ldr	r4, [r5, #8]
 8010f34:	b913      	cbnz	r3, 8010f3c <_puts_r+0x1c>
 8010f36:	4628      	mov	r0, r5
 8010f38:	f000 fa7c 	bl	8011434 <__sinit>
 8010f3c:	4b2c      	ldr	r3, [pc, #176]	; (8010ff0 <_puts_r+0xd0>)
 8010f3e:	429c      	cmp	r4, r3
 8010f40:	d120      	bne.n	8010f84 <_puts_r+0x64>
 8010f42:	686c      	ldr	r4, [r5, #4]
 8010f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f46:	07db      	lsls	r3, r3, #31
 8010f48:	d405      	bmi.n	8010f56 <_puts_r+0x36>
 8010f4a:	89a3      	ldrh	r3, [r4, #12]
 8010f4c:	0598      	lsls	r0, r3, #22
 8010f4e:	d402      	bmi.n	8010f56 <_puts_r+0x36>
 8010f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f52:	f000 fb0d 	bl	8011570 <__retarget_lock_acquire_recursive>
 8010f56:	89a3      	ldrh	r3, [r4, #12]
 8010f58:	0719      	lsls	r1, r3, #28
 8010f5a:	d51d      	bpl.n	8010f98 <_puts_r+0x78>
 8010f5c:	6923      	ldr	r3, [r4, #16]
 8010f5e:	b1db      	cbz	r3, 8010f98 <_puts_r+0x78>
 8010f60:	3e01      	subs	r6, #1
 8010f62:	68a3      	ldr	r3, [r4, #8]
 8010f64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	60a3      	str	r3, [r4, #8]
 8010f6c:	bb39      	cbnz	r1, 8010fbe <_puts_r+0x9e>
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	da38      	bge.n	8010fe4 <_puts_r+0xc4>
 8010f72:	4622      	mov	r2, r4
 8010f74:	210a      	movs	r1, #10
 8010f76:	4628      	mov	r0, r5
 8010f78:	f000 f882 	bl	8011080 <__swbuf_r>
 8010f7c:	3001      	adds	r0, #1
 8010f7e:	d011      	beq.n	8010fa4 <_puts_r+0x84>
 8010f80:	250a      	movs	r5, #10
 8010f82:	e011      	b.n	8010fa8 <_puts_r+0x88>
 8010f84:	4b1b      	ldr	r3, [pc, #108]	; (8010ff4 <_puts_r+0xd4>)
 8010f86:	429c      	cmp	r4, r3
 8010f88:	d101      	bne.n	8010f8e <_puts_r+0x6e>
 8010f8a:	68ac      	ldr	r4, [r5, #8]
 8010f8c:	e7da      	b.n	8010f44 <_puts_r+0x24>
 8010f8e:	4b1a      	ldr	r3, [pc, #104]	; (8010ff8 <_puts_r+0xd8>)
 8010f90:	429c      	cmp	r4, r3
 8010f92:	bf08      	it	eq
 8010f94:	68ec      	ldreq	r4, [r5, #12]
 8010f96:	e7d5      	b.n	8010f44 <_puts_r+0x24>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	f000 f8c2 	bl	8011124 <__swsetup_r>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d0dd      	beq.n	8010f60 <_puts_r+0x40>
 8010fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8010fa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010faa:	07da      	lsls	r2, r3, #31
 8010fac:	d405      	bmi.n	8010fba <_puts_r+0x9a>
 8010fae:	89a3      	ldrh	r3, [r4, #12]
 8010fb0:	059b      	lsls	r3, r3, #22
 8010fb2:	d402      	bmi.n	8010fba <_puts_r+0x9a>
 8010fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fb6:	f000 fadc 	bl	8011572 <__retarget_lock_release_recursive>
 8010fba:	4628      	mov	r0, r5
 8010fbc:	bd70      	pop	{r4, r5, r6, pc}
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	da04      	bge.n	8010fcc <_puts_r+0xac>
 8010fc2:	69a2      	ldr	r2, [r4, #24]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	dc06      	bgt.n	8010fd6 <_puts_r+0xb6>
 8010fc8:	290a      	cmp	r1, #10
 8010fca:	d004      	beq.n	8010fd6 <_puts_r+0xb6>
 8010fcc:	6823      	ldr	r3, [r4, #0]
 8010fce:	1c5a      	adds	r2, r3, #1
 8010fd0:	6022      	str	r2, [r4, #0]
 8010fd2:	7019      	strb	r1, [r3, #0]
 8010fd4:	e7c5      	b.n	8010f62 <_puts_r+0x42>
 8010fd6:	4622      	mov	r2, r4
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f000 f851 	bl	8011080 <__swbuf_r>
 8010fde:	3001      	adds	r0, #1
 8010fe0:	d1bf      	bne.n	8010f62 <_puts_r+0x42>
 8010fe2:	e7df      	b.n	8010fa4 <_puts_r+0x84>
 8010fe4:	6823      	ldr	r3, [r4, #0]
 8010fe6:	250a      	movs	r5, #10
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	6022      	str	r2, [r4, #0]
 8010fec:	701d      	strb	r5, [r3, #0]
 8010fee:	e7db      	b.n	8010fa8 <_puts_r+0x88>
 8010ff0:	080123d4 	.word	0x080123d4
 8010ff4:	080123f4 	.word	0x080123f4
 8010ff8:	080123b4 	.word	0x080123b4

08010ffc <puts>:
 8010ffc:	4b02      	ldr	r3, [pc, #8]	; (8011008 <puts+0xc>)
 8010ffe:	4601      	mov	r1, r0
 8011000:	6818      	ldr	r0, [r3, #0]
 8011002:	f7ff bf8d 	b.w	8010f20 <_puts_r>
 8011006:	bf00      	nop
 8011008:	2000007c 	.word	0x2000007c

0801100c <_sbrk_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4d06      	ldr	r5, [pc, #24]	; (8011028 <_sbrk_r+0x1c>)
 8011010:	2300      	movs	r3, #0
 8011012:	4604      	mov	r4, r0
 8011014:	4608      	mov	r0, r1
 8011016:	602b      	str	r3, [r5, #0]
 8011018:	f7f1 fc10 	bl	800283c <_sbrk>
 801101c:	1c43      	adds	r3, r0, #1
 801101e:	d102      	bne.n	8011026 <_sbrk_r+0x1a>
 8011020:	682b      	ldr	r3, [r5, #0]
 8011022:	b103      	cbz	r3, 8011026 <_sbrk_r+0x1a>
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	bd38      	pop	{r3, r4, r5, pc}
 8011028:	20003118 	.word	0x20003118

0801102c <strncpy>:
 801102c:	b510      	push	{r4, lr}
 801102e:	3901      	subs	r1, #1
 8011030:	4603      	mov	r3, r0
 8011032:	b132      	cbz	r2, 8011042 <strncpy+0x16>
 8011034:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011038:	f803 4b01 	strb.w	r4, [r3], #1
 801103c:	3a01      	subs	r2, #1
 801103e:	2c00      	cmp	r4, #0
 8011040:	d1f7      	bne.n	8011032 <strncpy+0x6>
 8011042:	441a      	add	r2, r3
 8011044:	2100      	movs	r1, #0
 8011046:	4293      	cmp	r3, r2
 8011048:	d100      	bne.n	801104c <strncpy+0x20>
 801104a:	bd10      	pop	{r4, pc}
 801104c:	f803 1b01 	strb.w	r1, [r3], #1
 8011050:	e7f9      	b.n	8011046 <strncpy+0x1a>

08011052 <strstr>:
 8011052:	780a      	ldrb	r2, [r1, #0]
 8011054:	b570      	push	{r4, r5, r6, lr}
 8011056:	b96a      	cbnz	r2, 8011074 <strstr+0x22>
 8011058:	bd70      	pop	{r4, r5, r6, pc}
 801105a:	429a      	cmp	r2, r3
 801105c:	d109      	bne.n	8011072 <strstr+0x20>
 801105e:	460c      	mov	r4, r1
 8011060:	4605      	mov	r5, r0
 8011062:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011066:	2b00      	cmp	r3, #0
 8011068:	d0f6      	beq.n	8011058 <strstr+0x6>
 801106a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801106e:	429e      	cmp	r6, r3
 8011070:	d0f7      	beq.n	8011062 <strstr+0x10>
 8011072:	3001      	adds	r0, #1
 8011074:	7803      	ldrb	r3, [r0, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1ef      	bne.n	801105a <strstr+0x8>
 801107a:	4618      	mov	r0, r3
 801107c:	e7ec      	b.n	8011058 <strstr+0x6>
	...

08011080 <__swbuf_r>:
 8011080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011082:	460e      	mov	r6, r1
 8011084:	4614      	mov	r4, r2
 8011086:	4605      	mov	r5, r0
 8011088:	b118      	cbz	r0, 8011092 <__swbuf_r+0x12>
 801108a:	6983      	ldr	r3, [r0, #24]
 801108c:	b90b      	cbnz	r3, 8011092 <__swbuf_r+0x12>
 801108e:	f000 f9d1 	bl	8011434 <__sinit>
 8011092:	4b21      	ldr	r3, [pc, #132]	; (8011118 <__swbuf_r+0x98>)
 8011094:	429c      	cmp	r4, r3
 8011096:	d12b      	bne.n	80110f0 <__swbuf_r+0x70>
 8011098:	686c      	ldr	r4, [r5, #4]
 801109a:	69a3      	ldr	r3, [r4, #24]
 801109c:	60a3      	str	r3, [r4, #8]
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	071a      	lsls	r2, r3, #28
 80110a2:	d52f      	bpl.n	8011104 <__swbuf_r+0x84>
 80110a4:	6923      	ldr	r3, [r4, #16]
 80110a6:	b36b      	cbz	r3, 8011104 <__swbuf_r+0x84>
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	6820      	ldr	r0, [r4, #0]
 80110ac:	1ac0      	subs	r0, r0, r3
 80110ae:	6963      	ldr	r3, [r4, #20]
 80110b0:	b2f6      	uxtb	r6, r6
 80110b2:	4283      	cmp	r3, r0
 80110b4:	4637      	mov	r7, r6
 80110b6:	dc04      	bgt.n	80110c2 <__swbuf_r+0x42>
 80110b8:	4621      	mov	r1, r4
 80110ba:	4628      	mov	r0, r5
 80110bc:	f000 f926 	bl	801130c <_fflush_r>
 80110c0:	bb30      	cbnz	r0, 8011110 <__swbuf_r+0x90>
 80110c2:	68a3      	ldr	r3, [r4, #8]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	60a3      	str	r3, [r4, #8]
 80110c8:	6823      	ldr	r3, [r4, #0]
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	6022      	str	r2, [r4, #0]
 80110ce:	701e      	strb	r6, [r3, #0]
 80110d0:	6963      	ldr	r3, [r4, #20]
 80110d2:	3001      	adds	r0, #1
 80110d4:	4283      	cmp	r3, r0
 80110d6:	d004      	beq.n	80110e2 <__swbuf_r+0x62>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	07db      	lsls	r3, r3, #31
 80110dc:	d506      	bpl.n	80110ec <__swbuf_r+0x6c>
 80110de:	2e0a      	cmp	r6, #10
 80110e0:	d104      	bne.n	80110ec <__swbuf_r+0x6c>
 80110e2:	4621      	mov	r1, r4
 80110e4:	4628      	mov	r0, r5
 80110e6:	f000 f911 	bl	801130c <_fflush_r>
 80110ea:	b988      	cbnz	r0, 8011110 <__swbuf_r+0x90>
 80110ec:	4638      	mov	r0, r7
 80110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f0:	4b0a      	ldr	r3, [pc, #40]	; (801111c <__swbuf_r+0x9c>)
 80110f2:	429c      	cmp	r4, r3
 80110f4:	d101      	bne.n	80110fa <__swbuf_r+0x7a>
 80110f6:	68ac      	ldr	r4, [r5, #8]
 80110f8:	e7cf      	b.n	801109a <__swbuf_r+0x1a>
 80110fa:	4b09      	ldr	r3, [pc, #36]	; (8011120 <__swbuf_r+0xa0>)
 80110fc:	429c      	cmp	r4, r3
 80110fe:	bf08      	it	eq
 8011100:	68ec      	ldreq	r4, [r5, #12]
 8011102:	e7ca      	b.n	801109a <__swbuf_r+0x1a>
 8011104:	4621      	mov	r1, r4
 8011106:	4628      	mov	r0, r5
 8011108:	f000 f80c 	bl	8011124 <__swsetup_r>
 801110c:	2800      	cmp	r0, #0
 801110e:	d0cb      	beq.n	80110a8 <__swbuf_r+0x28>
 8011110:	f04f 37ff 	mov.w	r7, #4294967295
 8011114:	e7ea      	b.n	80110ec <__swbuf_r+0x6c>
 8011116:	bf00      	nop
 8011118:	080123d4 	.word	0x080123d4
 801111c:	080123f4 	.word	0x080123f4
 8011120:	080123b4 	.word	0x080123b4

08011124 <__swsetup_r>:
 8011124:	4b32      	ldr	r3, [pc, #200]	; (80111f0 <__swsetup_r+0xcc>)
 8011126:	b570      	push	{r4, r5, r6, lr}
 8011128:	681d      	ldr	r5, [r3, #0]
 801112a:	4606      	mov	r6, r0
 801112c:	460c      	mov	r4, r1
 801112e:	b125      	cbz	r5, 801113a <__swsetup_r+0x16>
 8011130:	69ab      	ldr	r3, [r5, #24]
 8011132:	b913      	cbnz	r3, 801113a <__swsetup_r+0x16>
 8011134:	4628      	mov	r0, r5
 8011136:	f000 f97d 	bl	8011434 <__sinit>
 801113a:	4b2e      	ldr	r3, [pc, #184]	; (80111f4 <__swsetup_r+0xd0>)
 801113c:	429c      	cmp	r4, r3
 801113e:	d10f      	bne.n	8011160 <__swsetup_r+0x3c>
 8011140:	686c      	ldr	r4, [r5, #4]
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011148:	0719      	lsls	r1, r3, #28
 801114a:	d42c      	bmi.n	80111a6 <__swsetup_r+0x82>
 801114c:	06dd      	lsls	r5, r3, #27
 801114e:	d411      	bmi.n	8011174 <__swsetup_r+0x50>
 8011150:	2309      	movs	r3, #9
 8011152:	6033      	str	r3, [r6, #0]
 8011154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011158:	81a3      	strh	r3, [r4, #12]
 801115a:	f04f 30ff 	mov.w	r0, #4294967295
 801115e:	e03e      	b.n	80111de <__swsetup_r+0xba>
 8011160:	4b25      	ldr	r3, [pc, #148]	; (80111f8 <__swsetup_r+0xd4>)
 8011162:	429c      	cmp	r4, r3
 8011164:	d101      	bne.n	801116a <__swsetup_r+0x46>
 8011166:	68ac      	ldr	r4, [r5, #8]
 8011168:	e7eb      	b.n	8011142 <__swsetup_r+0x1e>
 801116a:	4b24      	ldr	r3, [pc, #144]	; (80111fc <__swsetup_r+0xd8>)
 801116c:	429c      	cmp	r4, r3
 801116e:	bf08      	it	eq
 8011170:	68ec      	ldreq	r4, [r5, #12]
 8011172:	e7e6      	b.n	8011142 <__swsetup_r+0x1e>
 8011174:	0758      	lsls	r0, r3, #29
 8011176:	d512      	bpl.n	801119e <__swsetup_r+0x7a>
 8011178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801117a:	b141      	cbz	r1, 801118e <__swsetup_r+0x6a>
 801117c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011180:	4299      	cmp	r1, r3
 8011182:	d002      	beq.n	801118a <__swsetup_r+0x66>
 8011184:	4630      	mov	r0, r6
 8011186:	f7ff fdd3 	bl	8010d30 <_free_r>
 801118a:	2300      	movs	r3, #0
 801118c:	6363      	str	r3, [r4, #52]	; 0x34
 801118e:	89a3      	ldrh	r3, [r4, #12]
 8011190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011194:	81a3      	strh	r3, [r4, #12]
 8011196:	2300      	movs	r3, #0
 8011198:	6063      	str	r3, [r4, #4]
 801119a:	6923      	ldr	r3, [r4, #16]
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	89a3      	ldrh	r3, [r4, #12]
 80111a0:	f043 0308 	orr.w	r3, r3, #8
 80111a4:	81a3      	strh	r3, [r4, #12]
 80111a6:	6923      	ldr	r3, [r4, #16]
 80111a8:	b94b      	cbnz	r3, 80111be <__swsetup_r+0x9a>
 80111aa:	89a3      	ldrh	r3, [r4, #12]
 80111ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111b4:	d003      	beq.n	80111be <__swsetup_r+0x9a>
 80111b6:	4621      	mov	r1, r4
 80111b8:	4630      	mov	r0, r6
 80111ba:	f000 fa01 	bl	80115c0 <__smakebuf_r>
 80111be:	89a0      	ldrh	r0, [r4, #12]
 80111c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111c4:	f010 0301 	ands.w	r3, r0, #1
 80111c8:	d00a      	beq.n	80111e0 <__swsetup_r+0xbc>
 80111ca:	2300      	movs	r3, #0
 80111cc:	60a3      	str	r3, [r4, #8]
 80111ce:	6963      	ldr	r3, [r4, #20]
 80111d0:	425b      	negs	r3, r3
 80111d2:	61a3      	str	r3, [r4, #24]
 80111d4:	6923      	ldr	r3, [r4, #16]
 80111d6:	b943      	cbnz	r3, 80111ea <__swsetup_r+0xc6>
 80111d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111dc:	d1ba      	bne.n	8011154 <__swsetup_r+0x30>
 80111de:	bd70      	pop	{r4, r5, r6, pc}
 80111e0:	0781      	lsls	r1, r0, #30
 80111e2:	bf58      	it	pl
 80111e4:	6963      	ldrpl	r3, [r4, #20]
 80111e6:	60a3      	str	r3, [r4, #8]
 80111e8:	e7f4      	b.n	80111d4 <__swsetup_r+0xb0>
 80111ea:	2000      	movs	r0, #0
 80111ec:	e7f7      	b.n	80111de <__swsetup_r+0xba>
 80111ee:	bf00      	nop
 80111f0:	2000007c 	.word	0x2000007c
 80111f4:	080123d4 	.word	0x080123d4
 80111f8:	080123f4 	.word	0x080123f4
 80111fc:	080123b4 	.word	0x080123b4

08011200 <__sflush_r>:
 8011200:	898a      	ldrh	r2, [r1, #12]
 8011202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011206:	4605      	mov	r5, r0
 8011208:	0710      	lsls	r0, r2, #28
 801120a:	460c      	mov	r4, r1
 801120c:	d458      	bmi.n	80112c0 <__sflush_r+0xc0>
 801120e:	684b      	ldr	r3, [r1, #4]
 8011210:	2b00      	cmp	r3, #0
 8011212:	dc05      	bgt.n	8011220 <__sflush_r+0x20>
 8011214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011216:	2b00      	cmp	r3, #0
 8011218:	dc02      	bgt.n	8011220 <__sflush_r+0x20>
 801121a:	2000      	movs	r0, #0
 801121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011222:	2e00      	cmp	r6, #0
 8011224:	d0f9      	beq.n	801121a <__sflush_r+0x1a>
 8011226:	2300      	movs	r3, #0
 8011228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801122c:	682f      	ldr	r7, [r5, #0]
 801122e:	602b      	str	r3, [r5, #0]
 8011230:	d032      	beq.n	8011298 <__sflush_r+0x98>
 8011232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	075a      	lsls	r2, r3, #29
 8011238:	d505      	bpl.n	8011246 <__sflush_r+0x46>
 801123a:	6863      	ldr	r3, [r4, #4]
 801123c:	1ac0      	subs	r0, r0, r3
 801123e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011240:	b10b      	cbz	r3, 8011246 <__sflush_r+0x46>
 8011242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011244:	1ac0      	subs	r0, r0, r3
 8011246:	2300      	movs	r3, #0
 8011248:	4602      	mov	r2, r0
 801124a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801124c:	6a21      	ldr	r1, [r4, #32]
 801124e:	4628      	mov	r0, r5
 8011250:	47b0      	blx	r6
 8011252:	1c43      	adds	r3, r0, #1
 8011254:	89a3      	ldrh	r3, [r4, #12]
 8011256:	d106      	bne.n	8011266 <__sflush_r+0x66>
 8011258:	6829      	ldr	r1, [r5, #0]
 801125a:	291d      	cmp	r1, #29
 801125c:	d82c      	bhi.n	80112b8 <__sflush_r+0xb8>
 801125e:	4a2a      	ldr	r2, [pc, #168]	; (8011308 <__sflush_r+0x108>)
 8011260:	40ca      	lsrs	r2, r1
 8011262:	07d6      	lsls	r6, r2, #31
 8011264:	d528      	bpl.n	80112b8 <__sflush_r+0xb8>
 8011266:	2200      	movs	r2, #0
 8011268:	6062      	str	r2, [r4, #4]
 801126a:	04d9      	lsls	r1, r3, #19
 801126c:	6922      	ldr	r2, [r4, #16]
 801126e:	6022      	str	r2, [r4, #0]
 8011270:	d504      	bpl.n	801127c <__sflush_r+0x7c>
 8011272:	1c42      	adds	r2, r0, #1
 8011274:	d101      	bne.n	801127a <__sflush_r+0x7a>
 8011276:	682b      	ldr	r3, [r5, #0]
 8011278:	b903      	cbnz	r3, 801127c <__sflush_r+0x7c>
 801127a:	6560      	str	r0, [r4, #84]	; 0x54
 801127c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801127e:	602f      	str	r7, [r5, #0]
 8011280:	2900      	cmp	r1, #0
 8011282:	d0ca      	beq.n	801121a <__sflush_r+0x1a>
 8011284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011288:	4299      	cmp	r1, r3
 801128a:	d002      	beq.n	8011292 <__sflush_r+0x92>
 801128c:	4628      	mov	r0, r5
 801128e:	f7ff fd4f 	bl	8010d30 <_free_r>
 8011292:	2000      	movs	r0, #0
 8011294:	6360      	str	r0, [r4, #52]	; 0x34
 8011296:	e7c1      	b.n	801121c <__sflush_r+0x1c>
 8011298:	6a21      	ldr	r1, [r4, #32]
 801129a:	2301      	movs	r3, #1
 801129c:	4628      	mov	r0, r5
 801129e:	47b0      	blx	r6
 80112a0:	1c41      	adds	r1, r0, #1
 80112a2:	d1c7      	bne.n	8011234 <__sflush_r+0x34>
 80112a4:	682b      	ldr	r3, [r5, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d0c4      	beq.n	8011234 <__sflush_r+0x34>
 80112aa:	2b1d      	cmp	r3, #29
 80112ac:	d001      	beq.n	80112b2 <__sflush_r+0xb2>
 80112ae:	2b16      	cmp	r3, #22
 80112b0:	d101      	bne.n	80112b6 <__sflush_r+0xb6>
 80112b2:	602f      	str	r7, [r5, #0]
 80112b4:	e7b1      	b.n	801121a <__sflush_r+0x1a>
 80112b6:	89a3      	ldrh	r3, [r4, #12]
 80112b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112bc:	81a3      	strh	r3, [r4, #12]
 80112be:	e7ad      	b.n	801121c <__sflush_r+0x1c>
 80112c0:	690f      	ldr	r7, [r1, #16]
 80112c2:	2f00      	cmp	r7, #0
 80112c4:	d0a9      	beq.n	801121a <__sflush_r+0x1a>
 80112c6:	0793      	lsls	r3, r2, #30
 80112c8:	680e      	ldr	r6, [r1, #0]
 80112ca:	bf08      	it	eq
 80112cc:	694b      	ldreq	r3, [r1, #20]
 80112ce:	600f      	str	r7, [r1, #0]
 80112d0:	bf18      	it	ne
 80112d2:	2300      	movne	r3, #0
 80112d4:	eba6 0807 	sub.w	r8, r6, r7
 80112d8:	608b      	str	r3, [r1, #8]
 80112da:	f1b8 0f00 	cmp.w	r8, #0
 80112de:	dd9c      	ble.n	801121a <__sflush_r+0x1a>
 80112e0:	6a21      	ldr	r1, [r4, #32]
 80112e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112e4:	4643      	mov	r3, r8
 80112e6:	463a      	mov	r2, r7
 80112e8:	4628      	mov	r0, r5
 80112ea:	47b0      	blx	r6
 80112ec:	2800      	cmp	r0, #0
 80112ee:	dc06      	bgt.n	80112fe <__sflush_r+0xfe>
 80112f0:	89a3      	ldrh	r3, [r4, #12]
 80112f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112f6:	81a3      	strh	r3, [r4, #12]
 80112f8:	f04f 30ff 	mov.w	r0, #4294967295
 80112fc:	e78e      	b.n	801121c <__sflush_r+0x1c>
 80112fe:	4407      	add	r7, r0
 8011300:	eba8 0800 	sub.w	r8, r8, r0
 8011304:	e7e9      	b.n	80112da <__sflush_r+0xda>
 8011306:	bf00      	nop
 8011308:	20400001 	.word	0x20400001

0801130c <_fflush_r>:
 801130c:	b538      	push	{r3, r4, r5, lr}
 801130e:	690b      	ldr	r3, [r1, #16]
 8011310:	4605      	mov	r5, r0
 8011312:	460c      	mov	r4, r1
 8011314:	b913      	cbnz	r3, 801131c <_fflush_r+0x10>
 8011316:	2500      	movs	r5, #0
 8011318:	4628      	mov	r0, r5
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	b118      	cbz	r0, 8011326 <_fflush_r+0x1a>
 801131e:	6983      	ldr	r3, [r0, #24]
 8011320:	b90b      	cbnz	r3, 8011326 <_fflush_r+0x1a>
 8011322:	f000 f887 	bl	8011434 <__sinit>
 8011326:	4b14      	ldr	r3, [pc, #80]	; (8011378 <_fflush_r+0x6c>)
 8011328:	429c      	cmp	r4, r3
 801132a:	d11b      	bne.n	8011364 <_fflush_r+0x58>
 801132c:	686c      	ldr	r4, [r5, #4]
 801132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d0ef      	beq.n	8011316 <_fflush_r+0xa>
 8011336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011338:	07d0      	lsls	r0, r2, #31
 801133a:	d404      	bmi.n	8011346 <_fflush_r+0x3a>
 801133c:	0599      	lsls	r1, r3, #22
 801133e:	d402      	bmi.n	8011346 <_fflush_r+0x3a>
 8011340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011342:	f000 f915 	bl	8011570 <__retarget_lock_acquire_recursive>
 8011346:	4628      	mov	r0, r5
 8011348:	4621      	mov	r1, r4
 801134a:	f7ff ff59 	bl	8011200 <__sflush_r>
 801134e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011350:	07da      	lsls	r2, r3, #31
 8011352:	4605      	mov	r5, r0
 8011354:	d4e0      	bmi.n	8011318 <_fflush_r+0xc>
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	059b      	lsls	r3, r3, #22
 801135a:	d4dd      	bmi.n	8011318 <_fflush_r+0xc>
 801135c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801135e:	f000 f908 	bl	8011572 <__retarget_lock_release_recursive>
 8011362:	e7d9      	b.n	8011318 <_fflush_r+0xc>
 8011364:	4b05      	ldr	r3, [pc, #20]	; (801137c <_fflush_r+0x70>)
 8011366:	429c      	cmp	r4, r3
 8011368:	d101      	bne.n	801136e <_fflush_r+0x62>
 801136a:	68ac      	ldr	r4, [r5, #8]
 801136c:	e7df      	b.n	801132e <_fflush_r+0x22>
 801136e:	4b04      	ldr	r3, [pc, #16]	; (8011380 <_fflush_r+0x74>)
 8011370:	429c      	cmp	r4, r3
 8011372:	bf08      	it	eq
 8011374:	68ec      	ldreq	r4, [r5, #12]
 8011376:	e7da      	b.n	801132e <_fflush_r+0x22>
 8011378:	080123d4 	.word	0x080123d4
 801137c:	080123f4 	.word	0x080123f4
 8011380:	080123b4 	.word	0x080123b4

08011384 <std>:
 8011384:	2300      	movs	r3, #0
 8011386:	b510      	push	{r4, lr}
 8011388:	4604      	mov	r4, r0
 801138a:	e9c0 3300 	strd	r3, r3, [r0]
 801138e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011392:	6083      	str	r3, [r0, #8]
 8011394:	8181      	strh	r1, [r0, #12]
 8011396:	6643      	str	r3, [r0, #100]	; 0x64
 8011398:	81c2      	strh	r2, [r0, #14]
 801139a:	6183      	str	r3, [r0, #24]
 801139c:	4619      	mov	r1, r3
 801139e:	2208      	movs	r2, #8
 80113a0:	305c      	adds	r0, #92	; 0x5c
 80113a2:	f7ff fcbd 	bl	8010d20 <memset>
 80113a6:	4b05      	ldr	r3, [pc, #20]	; (80113bc <std+0x38>)
 80113a8:	6263      	str	r3, [r4, #36]	; 0x24
 80113aa:	4b05      	ldr	r3, [pc, #20]	; (80113c0 <std+0x3c>)
 80113ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80113ae:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <std+0x40>)
 80113b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80113b2:	4b05      	ldr	r3, [pc, #20]	; (80113c8 <std+0x44>)
 80113b4:	6224      	str	r4, [r4, #32]
 80113b6:	6323      	str	r3, [r4, #48]	; 0x30
 80113b8:	bd10      	pop	{r4, pc}
 80113ba:	bf00      	nop
 80113bc:	08011c35 	.word	0x08011c35
 80113c0:	08011c57 	.word	0x08011c57
 80113c4:	08011c8f 	.word	0x08011c8f
 80113c8:	08011cb3 	.word	0x08011cb3

080113cc <_cleanup_r>:
 80113cc:	4901      	ldr	r1, [pc, #4]	; (80113d4 <_cleanup_r+0x8>)
 80113ce:	f000 b8af 	b.w	8011530 <_fwalk_reent>
 80113d2:	bf00      	nop
 80113d4:	0801130d 	.word	0x0801130d

080113d8 <__sfmoreglue>:
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	2268      	movs	r2, #104	; 0x68
 80113dc:	1e4d      	subs	r5, r1, #1
 80113de:	4355      	muls	r5, r2
 80113e0:	460e      	mov	r6, r1
 80113e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113e6:	f7ff fd0f 	bl	8010e08 <_malloc_r>
 80113ea:	4604      	mov	r4, r0
 80113ec:	b140      	cbz	r0, 8011400 <__sfmoreglue+0x28>
 80113ee:	2100      	movs	r1, #0
 80113f0:	e9c0 1600 	strd	r1, r6, [r0]
 80113f4:	300c      	adds	r0, #12
 80113f6:	60a0      	str	r0, [r4, #8]
 80113f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113fc:	f7ff fc90 	bl	8010d20 <memset>
 8011400:	4620      	mov	r0, r4
 8011402:	bd70      	pop	{r4, r5, r6, pc}

08011404 <__sfp_lock_acquire>:
 8011404:	4801      	ldr	r0, [pc, #4]	; (801140c <__sfp_lock_acquire+0x8>)
 8011406:	f000 b8b3 	b.w	8011570 <__retarget_lock_acquire_recursive>
 801140a:	bf00      	nop
 801140c:	20003115 	.word	0x20003115

08011410 <__sfp_lock_release>:
 8011410:	4801      	ldr	r0, [pc, #4]	; (8011418 <__sfp_lock_release+0x8>)
 8011412:	f000 b8ae 	b.w	8011572 <__retarget_lock_release_recursive>
 8011416:	bf00      	nop
 8011418:	20003115 	.word	0x20003115

0801141c <__sinit_lock_acquire>:
 801141c:	4801      	ldr	r0, [pc, #4]	; (8011424 <__sinit_lock_acquire+0x8>)
 801141e:	f000 b8a7 	b.w	8011570 <__retarget_lock_acquire_recursive>
 8011422:	bf00      	nop
 8011424:	20003116 	.word	0x20003116

08011428 <__sinit_lock_release>:
 8011428:	4801      	ldr	r0, [pc, #4]	; (8011430 <__sinit_lock_release+0x8>)
 801142a:	f000 b8a2 	b.w	8011572 <__retarget_lock_release_recursive>
 801142e:	bf00      	nop
 8011430:	20003116 	.word	0x20003116

08011434 <__sinit>:
 8011434:	b510      	push	{r4, lr}
 8011436:	4604      	mov	r4, r0
 8011438:	f7ff fff0 	bl	801141c <__sinit_lock_acquire>
 801143c:	69a3      	ldr	r3, [r4, #24]
 801143e:	b11b      	cbz	r3, 8011448 <__sinit+0x14>
 8011440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011444:	f7ff bff0 	b.w	8011428 <__sinit_lock_release>
 8011448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801144c:	6523      	str	r3, [r4, #80]	; 0x50
 801144e:	4b13      	ldr	r3, [pc, #76]	; (801149c <__sinit+0x68>)
 8011450:	4a13      	ldr	r2, [pc, #76]	; (80114a0 <__sinit+0x6c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	62a2      	str	r2, [r4, #40]	; 0x28
 8011456:	42a3      	cmp	r3, r4
 8011458:	bf04      	itt	eq
 801145a:	2301      	moveq	r3, #1
 801145c:	61a3      	streq	r3, [r4, #24]
 801145e:	4620      	mov	r0, r4
 8011460:	f000 f820 	bl	80114a4 <__sfp>
 8011464:	6060      	str	r0, [r4, #4]
 8011466:	4620      	mov	r0, r4
 8011468:	f000 f81c 	bl	80114a4 <__sfp>
 801146c:	60a0      	str	r0, [r4, #8]
 801146e:	4620      	mov	r0, r4
 8011470:	f000 f818 	bl	80114a4 <__sfp>
 8011474:	2200      	movs	r2, #0
 8011476:	60e0      	str	r0, [r4, #12]
 8011478:	2104      	movs	r1, #4
 801147a:	6860      	ldr	r0, [r4, #4]
 801147c:	f7ff ff82 	bl	8011384 <std>
 8011480:	68a0      	ldr	r0, [r4, #8]
 8011482:	2201      	movs	r2, #1
 8011484:	2109      	movs	r1, #9
 8011486:	f7ff ff7d 	bl	8011384 <std>
 801148a:	68e0      	ldr	r0, [r4, #12]
 801148c:	2202      	movs	r2, #2
 801148e:	2112      	movs	r1, #18
 8011490:	f7ff ff78 	bl	8011384 <std>
 8011494:	2301      	movs	r3, #1
 8011496:	61a3      	str	r3, [r4, #24]
 8011498:	e7d2      	b.n	8011440 <__sinit+0xc>
 801149a:	bf00      	nop
 801149c:	080123b0 	.word	0x080123b0
 80114a0:	080113cd 	.word	0x080113cd

080114a4 <__sfp>:
 80114a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a6:	4607      	mov	r7, r0
 80114a8:	f7ff ffac 	bl	8011404 <__sfp_lock_acquire>
 80114ac:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <__sfp+0x84>)
 80114ae:	681e      	ldr	r6, [r3, #0]
 80114b0:	69b3      	ldr	r3, [r6, #24]
 80114b2:	b913      	cbnz	r3, 80114ba <__sfp+0x16>
 80114b4:	4630      	mov	r0, r6
 80114b6:	f7ff ffbd 	bl	8011434 <__sinit>
 80114ba:	3648      	adds	r6, #72	; 0x48
 80114bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80114c0:	3b01      	subs	r3, #1
 80114c2:	d503      	bpl.n	80114cc <__sfp+0x28>
 80114c4:	6833      	ldr	r3, [r6, #0]
 80114c6:	b30b      	cbz	r3, 801150c <__sfp+0x68>
 80114c8:	6836      	ldr	r6, [r6, #0]
 80114ca:	e7f7      	b.n	80114bc <__sfp+0x18>
 80114cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114d0:	b9d5      	cbnz	r5, 8011508 <__sfp+0x64>
 80114d2:	4b16      	ldr	r3, [pc, #88]	; (801152c <__sfp+0x88>)
 80114d4:	60e3      	str	r3, [r4, #12]
 80114d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80114da:	6665      	str	r5, [r4, #100]	; 0x64
 80114dc:	f000 f847 	bl	801156e <__retarget_lock_init_recursive>
 80114e0:	f7ff ff96 	bl	8011410 <__sfp_lock_release>
 80114e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80114e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114ec:	6025      	str	r5, [r4, #0]
 80114ee:	61a5      	str	r5, [r4, #24]
 80114f0:	2208      	movs	r2, #8
 80114f2:	4629      	mov	r1, r5
 80114f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114f8:	f7ff fc12 	bl	8010d20 <memset>
 80114fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011504:	4620      	mov	r0, r4
 8011506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011508:	3468      	adds	r4, #104	; 0x68
 801150a:	e7d9      	b.n	80114c0 <__sfp+0x1c>
 801150c:	2104      	movs	r1, #4
 801150e:	4638      	mov	r0, r7
 8011510:	f7ff ff62 	bl	80113d8 <__sfmoreglue>
 8011514:	4604      	mov	r4, r0
 8011516:	6030      	str	r0, [r6, #0]
 8011518:	2800      	cmp	r0, #0
 801151a:	d1d5      	bne.n	80114c8 <__sfp+0x24>
 801151c:	f7ff ff78 	bl	8011410 <__sfp_lock_release>
 8011520:	230c      	movs	r3, #12
 8011522:	603b      	str	r3, [r7, #0]
 8011524:	e7ee      	b.n	8011504 <__sfp+0x60>
 8011526:	bf00      	nop
 8011528:	080123b0 	.word	0x080123b0
 801152c:	ffff0001 	.word	0xffff0001

08011530 <_fwalk_reent>:
 8011530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011534:	4606      	mov	r6, r0
 8011536:	4688      	mov	r8, r1
 8011538:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801153c:	2700      	movs	r7, #0
 801153e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011542:	f1b9 0901 	subs.w	r9, r9, #1
 8011546:	d505      	bpl.n	8011554 <_fwalk_reent+0x24>
 8011548:	6824      	ldr	r4, [r4, #0]
 801154a:	2c00      	cmp	r4, #0
 801154c:	d1f7      	bne.n	801153e <_fwalk_reent+0xe>
 801154e:	4638      	mov	r0, r7
 8011550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011554:	89ab      	ldrh	r3, [r5, #12]
 8011556:	2b01      	cmp	r3, #1
 8011558:	d907      	bls.n	801156a <_fwalk_reent+0x3a>
 801155a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801155e:	3301      	adds	r3, #1
 8011560:	d003      	beq.n	801156a <_fwalk_reent+0x3a>
 8011562:	4629      	mov	r1, r5
 8011564:	4630      	mov	r0, r6
 8011566:	47c0      	blx	r8
 8011568:	4307      	orrs	r7, r0
 801156a:	3568      	adds	r5, #104	; 0x68
 801156c:	e7e9      	b.n	8011542 <_fwalk_reent+0x12>

0801156e <__retarget_lock_init_recursive>:
 801156e:	4770      	bx	lr

08011570 <__retarget_lock_acquire_recursive>:
 8011570:	4770      	bx	lr

08011572 <__retarget_lock_release_recursive>:
 8011572:	4770      	bx	lr

08011574 <__swhatbuf_r>:
 8011574:	b570      	push	{r4, r5, r6, lr}
 8011576:	460e      	mov	r6, r1
 8011578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801157c:	2900      	cmp	r1, #0
 801157e:	b096      	sub	sp, #88	; 0x58
 8011580:	4614      	mov	r4, r2
 8011582:	461d      	mov	r5, r3
 8011584:	da08      	bge.n	8011598 <__swhatbuf_r+0x24>
 8011586:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	602a      	str	r2, [r5, #0]
 801158e:	061a      	lsls	r2, r3, #24
 8011590:	d410      	bmi.n	80115b4 <__swhatbuf_r+0x40>
 8011592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011596:	e00e      	b.n	80115b6 <__swhatbuf_r+0x42>
 8011598:	466a      	mov	r2, sp
 801159a:	f000 fbb1 	bl	8011d00 <_fstat_r>
 801159e:	2800      	cmp	r0, #0
 80115a0:	dbf1      	blt.n	8011586 <__swhatbuf_r+0x12>
 80115a2:	9a01      	ldr	r2, [sp, #4]
 80115a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80115a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80115ac:	425a      	negs	r2, r3
 80115ae:	415a      	adcs	r2, r3
 80115b0:	602a      	str	r2, [r5, #0]
 80115b2:	e7ee      	b.n	8011592 <__swhatbuf_r+0x1e>
 80115b4:	2340      	movs	r3, #64	; 0x40
 80115b6:	2000      	movs	r0, #0
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	b016      	add	sp, #88	; 0x58
 80115bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080115c0 <__smakebuf_r>:
 80115c0:	898b      	ldrh	r3, [r1, #12]
 80115c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115c4:	079d      	lsls	r5, r3, #30
 80115c6:	4606      	mov	r6, r0
 80115c8:	460c      	mov	r4, r1
 80115ca:	d507      	bpl.n	80115dc <__smakebuf_r+0x1c>
 80115cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	6123      	str	r3, [r4, #16]
 80115d4:	2301      	movs	r3, #1
 80115d6:	6163      	str	r3, [r4, #20]
 80115d8:	b002      	add	sp, #8
 80115da:	bd70      	pop	{r4, r5, r6, pc}
 80115dc:	ab01      	add	r3, sp, #4
 80115de:	466a      	mov	r2, sp
 80115e0:	f7ff ffc8 	bl	8011574 <__swhatbuf_r>
 80115e4:	9900      	ldr	r1, [sp, #0]
 80115e6:	4605      	mov	r5, r0
 80115e8:	4630      	mov	r0, r6
 80115ea:	f7ff fc0d 	bl	8010e08 <_malloc_r>
 80115ee:	b948      	cbnz	r0, 8011604 <__smakebuf_r+0x44>
 80115f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f4:	059a      	lsls	r2, r3, #22
 80115f6:	d4ef      	bmi.n	80115d8 <__smakebuf_r+0x18>
 80115f8:	f023 0303 	bic.w	r3, r3, #3
 80115fc:	f043 0302 	orr.w	r3, r3, #2
 8011600:	81a3      	strh	r3, [r4, #12]
 8011602:	e7e3      	b.n	80115cc <__smakebuf_r+0xc>
 8011604:	4b0d      	ldr	r3, [pc, #52]	; (801163c <__smakebuf_r+0x7c>)
 8011606:	62b3      	str	r3, [r6, #40]	; 0x28
 8011608:	89a3      	ldrh	r3, [r4, #12]
 801160a:	6020      	str	r0, [r4, #0]
 801160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011610:	81a3      	strh	r3, [r4, #12]
 8011612:	9b00      	ldr	r3, [sp, #0]
 8011614:	6163      	str	r3, [r4, #20]
 8011616:	9b01      	ldr	r3, [sp, #4]
 8011618:	6120      	str	r0, [r4, #16]
 801161a:	b15b      	cbz	r3, 8011634 <__smakebuf_r+0x74>
 801161c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011620:	4630      	mov	r0, r6
 8011622:	f000 fb7f 	bl	8011d24 <_isatty_r>
 8011626:	b128      	cbz	r0, 8011634 <__smakebuf_r+0x74>
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	f023 0303 	bic.w	r3, r3, #3
 801162e:	f043 0301 	orr.w	r3, r3, #1
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	89a0      	ldrh	r0, [r4, #12]
 8011636:	4305      	orrs	r5, r0
 8011638:	81a5      	strh	r5, [r4, #12]
 801163a:	e7cd      	b.n	80115d8 <__smakebuf_r+0x18>
 801163c:	080113cd 	.word	0x080113cd

08011640 <__malloc_lock>:
 8011640:	4801      	ldr	r0, [pc, #4]	; (8011648 <__malloc_lock+0x8>)
 8011642:	f7ff bf95 	b.w	8011570 <__retarget_lock_acquire_recursive>
 8011646:	bf00      	nop
 8011648:	20003114 	.word	0x20003114

0801164c <__malloc_unlock>:
 801164c:	4801      	ldr	r0, [pc, #4]	; (8011654 <__malloc_unlock+0x8>)
 801164e:	f7ff bf90 	b.w	8011572 <__retarget_lock_release_recursive>
 8011652:	bf00      	nop
 8011654:	20003114 	.word	0x20003114

08011658 <__sfputc_r>:
 8011658:	6893      	ldr	r3, [r2, #8]
 801165a:	3b01      	subs	r3, #1
 801165c:	2b00      	cmp	r3, #0
 801165e:	b410      	push	{r4}
 8011660:	6093      	str	r3, [r2, #8]
 8011662:	da08      	bge.n	8011676 <__sfputc_r+0x1e>
 8011664:	6994      	ldr	r4, [r2, #24]
 8011666:	42a3      	cmp	r3, r4
 8011668:	db01      	blt.n	801166e <__sfputc_r+0x16>
 801166a:	290a      	cmp	r1, #10
 801166c:	d103      	bne.n	8011676 <__sfputc_r+0x1e>
 801166e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011672:	f7ff bd05 	b.w	8011080 <__swbuf_r>
 8011676:	6813      	ldr	r3, [r2, #0]
 8011678:	1c58      	adds	r0, r3, #1
 801167a:	6010      	str	r0, [r2, #0]
 801167c:	7019      	strb	r1, [r3, #0]
 801167e:	4608      	mov	r0, r1
 8011680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011684:	4770      	bx	lr

08011686 <__sfputs_r>:
 8011686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011688:	4606      	mov	r6, r0
 801168a:	460f      	mov	r7, r1
 801168c:	4614      	mov	r4, r2
 801168e:	18d5      	adds	r5, r2, r3
 8011690:	42ac      	cmp	r4, r5
 8011692:	d101      	bne.n	8011698 <__sfputs_r+0x12>
 8011694:	2000      	movs	r0, #0
 8011696:	e007      	b.n	80116a8 <__sfputs_r+0x22>
 8011698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169c:	463a      	mov	r2, r7
 801169e:	4630      	mov	r0, r6
 80116a0:	f7ff ffda 	bl	8011658 <__sfputc_r>
 80116a4:	1c43      	adds	r3, r0, #1
 80116a6:	d1f3      	bne.n	8011690 <__sfputs_r+0xa>
 80116a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116ac <_vfiprintf_r>:
 80116ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b0:	460d      	mov	r5, r1
 80116b2:	b09d      	sub	sp, #116	; 0x74
 80116b4:	4614      	mov	r4, r2
 80116b6:	4698      	mov	r8, r3
 80116b8:	4606      	mov	r6, r0
 80116ba:	b118      	cbz	r0, 80116c4 <_vfiprintf_r+0x18>
 80116bc:	6983      	ldr	r3, [r0, #24]
 80116be:	b90b      	cbnz	r3, 80116c4 <_vfiprintf_r+0x18>
 80116c0:	f7ff feb8 	bl	8011434 <__sinit>
 80116c4:	4b89      	ldr	r3, [pc, #548]	; (80118ec <_vfiprintf_r+0x240>)
 80116c6:	429d      	cmp	r5, r3
 80116c8:	d11b      	bne.n	8011702 <_vfiprintf_r+0x56>
 80116ca:	6875      	ldr	r5, [r6, #4]
 80116cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ce:	07d9      	lsls	r1, r3, #31
 80116d0:	d405      	bmi.n	80116de <_vfiprintf_r+0x32>
 80116d2:	89ab      	ldrh	r3, [r5, #12]
 80116d4:	059a      	lsls	r2, r3, #22
 80116d6:	d402      	bmi.n	80116de <_vfiprintf_r+0x32>
 80116d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116da:	f7ff ff49 	bl	8011570 <__retarget_lock_acquire_recursive>
 80116de:	89ab      	ldrh	r3, [r5, #12]
 80116e0:	071b      	lsls	r3, r3, #28
 80116e2:	d501      	bpl.n	80116e8 <_vfiprintf_r+0x3c>
 80116e4:	692b      	ldr	r3, [r5, #16]
 80116e6:	b9eb      	cbnz	r3, 8011724 <_vfiprintf_r+0x78>
 80116e8:	4629      	mov	r1, r5
 80116ea:	4630      	mov	r0, r6
 80116ec:	f7ff fd1a 	bl	8011124 <__swsetup_r>
 80116f0:	b1c0      	cbz	r0, 8011724 <_vfiprintf_r+0x78>
 80116f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116f4:	07dc      	lsls	r4, r3, #31
 80116f6:	d50e      	bpl.n	8011716 <_vfiprintf_r+0x6a>
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	b01d      	add	sp, #116	; 0x74
 80116fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011702:	4b7b      	ldr	r3, [pc, #492]	; (80118f0 <_vfiprintf_r+0x244>)
 8011704:	429d      	cmp	r5, r3
 8011706:	d101      	bne.n	801170c <_vfiprintf_r+0x60>
 8011708:	68b5      	ldr	r5, [r6, #8]
 801170a:	e7df      	b.n	80116cc <_vfiprintf_r+0x20>
 801170c:	4b79      	ldr	r3, [pc, #484]	; (80118f4 <_vfiprintf_r+0x248>)
 801170e:	429d      	cmp	r5, r3
 8011710:	bf08      	it	eq
 8011712:	68f5      	ldreq	r5, [r6, #12]
 8011714:	e7da      	b.n	80116cc <_vfiprintf_r+0x20>
 8011716:	89ab      	ldrh	r3, [r5, #12]
 8011718:	0598      	lsls	r0, r3, #22
 801171a:	d4ed      	bmi.n	80116f8 <_vfiprintf_r+0x4c>
 801171c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801171e:	f7ff ff28 	bl	8011572 <__retarget_lock_release_recursive>
 8011722:	e7e9      	b.n	80116f8 <_vfiprintf_r+0x4c>
 8011724:	2300      	movs	r3, #0
 8011726:	9309      	str	r3, [sp, #36]	; 0x24
 8011728:	2320      	movs	r3, #32
 801172a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801172e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011732:	2330      	movs	r3, #48	; 0x30
 8011734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118f8 <_vfiprintf_r+0x24c>
 8011738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801173c:	f04f 0901 	mov.w	r9, #1
 8011740:	4623      	mov	r3, r4
 8011742:	469a      	mov	sl, r3
 8011744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011748:	b10a      	cbz	r2, 801174e <_vfiprintf_r+0xa2>
 801174a:	2a25      	cmp	r2, #37	; 0x25
 801174c:	d1f9      	bne.n	8011742 <_vfiprintf_r+0x96>
 801174e:	ebba 0b04 	subs.w	fp, sl, r4
 8011752:	d00b      	beq.n	801176c <_vfiprintf_r+0xc0>
 8011754:	465b      	mov	r3, fp
 8011756:	4622      	mov	r2, r4
 8011758:	4629      	mov	r1, r5
 801175a:	4630      	mov	r0, r6
 801175c:	f7ff ff93 	bl	8011686 <__sfputs_r>
 8011760:	3001      	adds	r0, #1
 8011762:	f000 80aa 	beq.w	80118ba <_vfiprintf_r+0x20e>
 8011766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011768:	445a      	add	r2, fp
 801176a:	9209      	str	r2, [sp, #36]	; 0x24
 801176c:	f89a 3000 	ldrb.w	r3, [sl]
 8011770:	2b00      	cmp	r3, #0
 8011772:	f000 80a2 	beq.w	80118ba <_vfiprintf_r+0x20e>
 8011776:	2300      	movs	r3, #0
 8011778:	f04f 32ff 	mov.w	r2, #4294967295
 801177c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011780:	f10a 0a01 	add.w	sl, sl, #1
 8011784:	9304      	str	r3, [sp, #16]
 8011786:	9307      	str	r3, [sp, #28]
 8011788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801178c:	931a      	str	r3, [sp, #104]	; 0x68
 801178e:	4654      	mov	r4, sl
 8011790:	2205      	movs	r2, #5
 8011792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011796:	4858      	ldr	r0, [pc, #352]	; (80118f8 <_vfiprintf_r+0x24c>)
 8011798:	f7ee fd22 	bl	80001e0 <memchr>
 801179c:	9a04      	ldr	r2, [sp, #16]
 801179e:	b9d8      	cbnz	r0, 80117d8 <_vfiprintf_r+0x12c>
 80117a0:	06d1      	lsls	r1, r2, #27
 80117a2:	bf44      	itt	mi
 80117a4:	2320      	movmi	r3, #32
 80117a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117aa:	0713      	lsls	r3, r2, #28
 80117ac:	bf44      	itt	mi
 80117ae:	232b      	movmi	r3, #43	; 0x2b
 80117b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b4:	f89a 3000 	ldrb.w	r3, [sl]
 80117b8:	2b2a      	cmp	r3, #42	; 0x2a
 80117ba:	d015      	beq.n	80117e8 <_vfiprintf_r+0x13c>
 80117bc:	9a07      	ldr	r2, [sp, #28]
 80117be:	4654      	mov	r4, sl
 80117c0:	2000      	movs	r0, #0
 80117c2:	f04f 0c0a 	mov.w	ip, #10
 80117c6:	4621      	mov	r1, r4
 80117c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117cc:	3b30      	subs	r3, #48	; 0x30
 80117ce:	2b09      	cmp	r3, #9
 80117d0:	d94e      	bls.n	8011870 <_vfiprintf_r+0x1c4>
 80117d2:	b1b0      	cbz	r0, 8011802 <_vfiprintf_r+0x156>
 80117d4:	9207      	str	r2, [sp, #28]
 80117d6:	e014      	b.n	8011802 <_vfiprintf_r+0x156>
 80117d8:	eba0 0308 	sub.w	r3, r0, r8
 80117dc:	fa09 f303 	lsl.w	r3, r9, r3
 80117e0:	4313      	orrs	r3, r2
 80117e2:	9304      	str	r3, [sp, #16]
 80117e4:	46a2      	mov	sl, r4
 80117e6:	e7d2      	b.n	801178e <_vfiprintf_r+0xe2>
 80117e8:	9b03      	ldr	r3, [sp, #12]
 80117ea:	1d19      	adds	r1, r3, #4
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	9103      	str	r1, [sp, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	bfbb      	ittet	lt
 80117f4:	425b      	neglt	r3, r3
 80117f6:	f042 0202 	orrlt.w	r2, r2, #2
 80117fa:	9307      	strge	r3, [sp, #28]
 80117fc:	9307      	strlt	r3, [sp, #28]
 80117fe:	bfb8      	it	lt
 8011800:	9204      	strlt	r2, [sp, #16]
 8011802:	7823      	ldrb	r3, [r4, #0]
 8011804:	2b2e      	cmp	r3, #46	; 0x2e
 8011806:	d10c      	bne.n	8011822 <_vfiprintf_r+0x176>
 8011808:	7863      	ldrb	r3, [r4, #1]
 801180a:	2b2a      	cmp	r3, #42	; 0x2a
 801180c:	d135      	bne.n	801187a <_vfiprintf_r+0x1ce>
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	1d1a      	adds	r2, r3, #4
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	9203      	str	r2, [sp, #12]
 8011816:	2b00      	cmp	r3, #0
 8011818:	bfb8      	it	lt
 801181a:	f04f 33ff 	movlt.w	r3, #4294967295
 801181e:	3402      	adds	r4, #2
 8011820:	9305      	str	r3, [sp, #20]
 8011822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011908 <_vfiprintf_r+0x25c>
 8011826:	7821      	ldrb	r1, [r4, #0]
 8011828:	2203      	movs	r2, #3
 801182a:	4650      	mov	r0, sl
 801182c:	f7ee fcd8 	bl	80001e0 <memchr>
 8011830:	b140      	cbz	r0, 8011844 <_vfiprintf_r+0x198>
 8011832:	2340      	movs	r3, #64	; 0x40
 8011834:	eba0 000a 	sub.w	r0, r0, sl
 8011838:	fa03 f000 	lsl.w	r0, r3, r0
 801183c:	9b04      	ldr	r3, [sp, #16]
 801183e:	4303      	orrs	r3, r0
 8011840:	3401      	adds	r4, #1
 8011842:	9304      	str	r3, [sp, #16]
 8011844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011848:	482c      	ldr	r0, [pc, #176]	; (80118fc <_vfiprintf_r+0x250>)
 801184a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801184e:	2206      	movs	r2, #6
 8011850:	f7ee fcc6 	bl	80001e0 <memchr>
 8011854:	2800      	cmp	r0, #0
 8011856:	d03f      	beq.n	80118d8 <_vfiprintf_r+0x22c>
 8011858:	4b29      	ldr	r3, [pc, #164]	; (8011900 <_vfiprintf_r+0x254>)
 801185a:	bb1b      	cbnz	r3, 80118a4 <_vfiprintf_r+0x1f8>
 801185c:	9b03      	ldr	r3, [sp, #12]
 801185e:	3307      	adds	r3, #7
 8011860:	f023 0307 	bic.w	r3, r3, #7
 8011864:	3308      	adds	r3, #8
 8011866:	9303      	str	r3, [sp, #12]
 8011868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801186a:	443b      	add	r3, r7
 801186c:	9309      	str	r3, [sp, #36]	; 0x24
 801186e:	e767      	b.n	8011740 <_vfiprintf_r+0x94>
 8011870:	fb0c 3202 	mla	r2, ip, r2, r3
 8011874:	460c      	mov	r4, r1
 8011876:	2001      	movs	r0, #1
 8011878:	e7a5      	b.n	80117c6 <_vfiprintf_r+0x11a>
 801187a:	2300      	movs	r3, #0
 801187c:	3401      	adds	r4, #1
 801187e:	9305      	str	r3, [sp, #20]
 8011880:	4619      	mov	r1, r3
 8011882:	f04f 0c0a 	mov.w	ip, #10
 8011886:	4620      	mov	r0, r4
 8011888:	f810 2b01 	ldrb.w	r2, [r0], #1
 801188c:	3a30      	subs	r2, #48	; 0x30
 801188e:	2a09      	cmp	r2, #9
 8011890:	d903      	bls.n	801189a <_vfiprintf_r+0x1ee>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0c5      	beq.n	8011822 <_vfiprintf_r+0x176>
 8011896:	9105      	str	r1, [sp, #20]
 8011898:	e7c3      	b.n	8011822 <_vfiprintf_r+0x176>
 801189a:	fb0c 2101 	mla	r1, ip, r1, r2
 801189e:	4604      	mov	r4, r0
 80118a0:	2301      	movs	r3, #1
 80118a2:	e7f0      	b.n	8011886 <_vfiprintf_r+0x1da>
 80118a4:	ab03      	add	r3, sp, #12
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	462a      	mov	r2, r5
 80118aa:	4b16      	ldr	r3, [pc, #88]	; (8011904 <_vfiprintf_r+0x258>)
 80118ac:	a904      	add	r1, sp, #16
 80118ae:	4630      	mov	r0, r6
 80118b0:	f3af 8000 	nop.w
 80118b4:	4607      	mov	r7, r0
 80118b6:	1c78      	adds	r0, r7, #1
 80118b8:	d1d6      	bne.n	8011868 <_vfiprintf_r+0x1bc>
 80118ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118bc:	07d9      	lsls	r1, r3, #31
 80118be:	d405      	bmi.n	80118cc <_vfiprintf_r+0x220>
 80118c0:	89ab      	ldrh	r3, [r5, #12]
 80118c2:	059a      	lsls	r2, r3, #22
 80118c4:	d402      	bmi.n	80118cc <_vfiprintf_r+0x220>
 80118c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118c8:	f7ff fe53 	bl	8011572 <__retarget_lock_release_recursive>
 80118cc:	89ab      	ldrh	r3, [r5, #12]
 80118ce:	065b      	lsls	r3, r3, #25
 80118d0:	f53f af12 	bmi.w	80116f8 <_vfiprintf_r+0x4c>
 80118d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118d6:	e711      	b.n	80116fc <_vfiprintf_r+0x50>
 80118d8:	ab03      	add	r3, sp, #12
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	462a      	mov	r2, r5
 80118de:	4b09      	ldr	r3, [pc, #36]	; (8011904 <_vfiprintf_r+0x258>)
 80118e0:	a904      	add	r1, sp, #16
 80118e2:	4630      	mov	r0, r6
 80118e4:	f000 f880 	bl	80119e8 <_printf_i>
 80118e8:	e7e4      	b.n	80118b4 <_vfiprintf_r+0x208>
 80118ea:	bf00      	nop
 80118ec:	080123d4 	.word	0x080123d4
 80118f0:	080123f4 	.word	0x080123f4
 80118f4:	080123b4 	.word	0x080123b4
 80118f8:	08012414 	.word	0x08012414
 80118fc:	0801241e 	.word	0x0801241e
 8011900:	00000000 	.word	0x00000000
 8011904:	08011687 	.word	0x08011687
 8011908:	0801241a 	.word	0x0801241a

0801190c <_printf_common>:
 801190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011910:	4616      	mov	r6, r2
 8011912:	4699      	mov	r9, r3
 8011914:	688a      	ldr	r2, [r1, #8]
 8011916:	690b      	ldr	r3, [r1, #16]
 8011918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801191c:	4293      	cmp	r3, r2
 801191e:	bfb8      	it	lt
 8011920:	4613      	movlt	r3, r2
 8011922:	6033      	str	r3, [r6, #0]
 8011924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011928:	4607      	mov	r7, r0
 801192a:	460c      	mov	r4, r1
 801192c:	b10a      	cbz	r2, 8011932 <_printf_common+0x26>
 801192e:	3301      	adds	r3, #1
 8011930:	6033      	str	r3, [r6, #0]
 8011932:	6823      	ldr	r3, [r4, #0]
 8011934:	0699      	lsls	r1, r3, #26
 8011936:	bf42      	ittt	mi
 8011938:	6833      	ldrmi	r3, [r6, #0]
 801193a:	3302      	addmi	r3, #2
 801193c:	6033      	strmi	r3, [r6, #0]
 801193e:	6825      	ldr	r5, [r4, #0]
 8011940:	f015 0506 	ands.w	r5, r5, #6
 8011944:	d106      	bne.n	8011954 <_printf_common+0x48>
 8011946:	f104 0a19 	add.w	sl, r4, #25
 801194a:	68e3      	ldr	r3, [r4, #12]
 801194c:	6832      	ldr	r2, [r6, #0]
 801194e:	1a9b      	subs	r3, r3, r2
 8011950:	42ab      	cmp	r3, r5
 8011952:	dc26      	bgt.n	80119a2 <_printf_common+0x96>
 8011954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011958:	1e13      	subs	r3, r2, #0
 801195a:	6822      	ldr	r2, [r4, #0]
 801195c:	bf18      	it	ne
 801195e:	2301      	movne	r3, #1
 8011960:	0692      	lsls	r2, r2, #26
 8011962:	d42b      	bmi.n	80119bc <_printf_common+0xb0>
 8011964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011968:	4649      	mov	r1, r9
 801196a:	4638      	mov	r0, r7
 801196c:	47c0      	blx	r8
 801196e:	3001      	adds	r0, #1
 8011970:	d01e      	beq.n	80119b0 <_printf_common+0xa4>
 8011972:	6823      	ldr	r3, [r4, #0]
 8011974:	68e5      	ldr	r5, [r4, #12]
 8011976:	6832      	ldr	r2, [r6, #0]
 8011978:	f003 0306 	and.w	r3, r3, #6
 801197c:	2b04      	cmp	r3, #4
 801197e:	bf08      	it	eq
 8011980:	1aad      	subeq	r5, r5, r2
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	6922      	ldr	r2, [r4, #16]
 8011986:	bf0c      	ite	eq
 8011988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801198c:	2500      	movne	r5, #0
 801198e:	4293      	cmp	r3, r2
 8011990:	bfc4      	itt	gt
 8011992:	1a9b      	subgt	r3, r3, r2
 8011994:	18ed      	addgt	r5, r5, r3
 8011996:	2600      	movs	r6, #0
 8011998:	341a      	adds	r4, #26
 801199a:	42b5      	cmp	r5, r6
 801199c:	d11a      	bne.n	80119d4 <_printf_common+0xc8>
 801199e:	2000      	movs	r0, #0
 80119a0:	e008      	b.n	80119b4 <_printf_common+0xa8>
 80119a2:	2301      	movs	r3, #1
 80119a4:	4652      	mov	r2, sl
 80119a6:	4649      	mov	r1, r9
 80119a8:	4638      	mov	r0, r7
 80119aa:	47c0      	blx	r8
 80119ac:	3001      	adds	r0, #1
 80119ae:	d103      	bne.n	80119b8 <_printf_common+0xac>
 80119b0:	f04f 30ff 	mov.w	r0, #4294967295
 80119b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b8:	3501      	adds	r5, #1
 80119ba:	e7c6      	b.n	801194a <_printf_common+0x3e>
 80119bc:	18e1      	adds	r1, r4, r3
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	2030      	movs	r0, #48	; 0x30
 80119c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80119c6:	4422      	add	r2, r4
 80119c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80119cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80119d0:	3302      	adds	r3, #2
 80119d2:	e7c7      	b.n	8011964 <_printf_common+0x58>
 80119d4:	2301      	movs	r3, #1
 80119d6:	4622      	mov	r2, r4
 80119d8:	4649      	mov	r1, r9
 80119da:	4638      	mov	r0, r7
 80119dc:	47c0      	blx	r8
 80119de:	3001      	adds	r0, #1
 80119e0:	d0e6      	beq.n	80119b0 <_printf_common+0xa4>
 80119e2:	3601      	adds	r6, #1
 80119e4:	e7d9      	b.n	801199a <_printf_common+0x8e>
	...

080119e8 <_printf_i>:
 80119e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119ec:	7e0f      	ldrb	r7, [r1, #24]
 80119ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80119f0:	2f78      	cmp	r7, #120	; 0x78
 80119f2:	4691      	mov	r9, r2
 80119f4:	4680      	mov	r8, r0
 80119f6:	460c      	mov	r4, r1
 80119f8:	469a      	mov	sl, r3
 80119fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80119fe:	d807      	bhi.n	8011a10 <_printf_i+0x28>
 8011a00:	2f62      	cmp	r7, #98	; 0x62
 8011a02:	d80a      	bhi.n	8011a1a <_printf_i+0x32>
 8011a04:	2f00      	cmp	r7, #0
 8011a06:	f000 80d8 	beq.w	8011bba <_printf_i+0x1d2>
 8011a0a:	2f58      	cmp	r7, #88	; 0x58
 8011a0c:	f000 80a3 	beq.w	8011b56 <_printf_i+0x16e>
 8011a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011a18:	e03a      	b.n	8011a90 <_printf_i+0xa8>
 8011a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011a1e:	2b15      	cmp	r3, #21
 8011a20:	d8f6      	bhi.n	8011a10 <_printf_i+0x28>
 8011a22:	a101      	add	r1, pc, #4	; (adr r1, 8011a28 <_printf_i+0x40>)
 8011a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a28:	08011a81 	.word	0x08011a81
 8011a2c:	08011a95 	.word	0x08011a95
 8011a30:	08011a11 	.word	0x08011a11
 8011a34:	08011a11 	.word	0x08011a11
 8011a38:	08011a11 	.word	0x08011a11
 8011a3c:	08011a11 	.word	0x08011a11
 8011a40:	08011a95 	.word	0x08011a95
 8011a44:	08011a11 	.word	0x08011a11
 8011a48:	08011a11 	.word	0x08011a11
 8011a4c:	08011a11 	.word	0x08011a11
 8011a50:	08011a11 	.word	0x08011a11
 8011a54:	08011ba1 	.word	0x08011ba1
 8011a58:	08011ac5 	.word	0x08011ac5
 8011a5c:	08011b83 	.word	0x08011b83
 8011a60:	08011a11 	.word	0x08011a11
 8011a64:	08011a11 	.word	0x08011a11
 8011a68:	08011bc3 	.word	0x08011bc3
 8011a6c:	08011a11 	.word	0x08011a11
 8011a70:	08011ac5 	.word	0x08011ac5
 8011a74:	08011a11 	.word	0x08011a11
 8011a78:	08011a11 	.word	0x08011a11
 8011a7c:	08011b8b 	.word	0x08011b8b
 8011a80:	682b      	ldr	r3, [r5, #0]
 8011a82:	1d1a      	adds	r2, r3, #4
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	602a      	str	r2, [r5, #0]
 8011a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a90:	2301      	movs	r3, #1
 8011a92:	e0a3      	b.n	8011bdc <_printf_i+0x1f4>
 8011a94:	6820      	ldr	r0, [r4, #0]
 8011a96:	6829      	ldr	r1, [r5, #0]
 8011a98:	0606      	lsls	r6, r0, #24
 8011a9a:	f101 0304 	add.w	r3, r1, #4
 8011a9e:	d50a      	bpl.n	8011ab6 <_printf_i+0xce>
 8011aa0:	680e      	ldr	r6, [r1, #0]
 8011aa2:	602b      	str	r3, [r5, #0]
 8011aa4:	2e00      	cmp	r6, #0
 8011aa6:	da03      	bge.n	8011ab0 <_printf_i+0xc8>
 8011aa8:	232d      	movs	r3, #45	; 0x2d
 8011aaa:	4276      	negs	r6, r6
 8011aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ab0:	485e      	ldr	r0, [pc, #376]	; (8011c2c <_printf_i+0x244>)
 8011ab2:	230a      	movs	r3, #10
 8011ab4:	e019      	b.n	8011aea <_printf_i+0x102>
 8011ab6:	680e      	ldr	r6, [r1, #0]
 8011ab8:	602b      	str	r3, [r5, #0]
 8011aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011abe:	bf18      	it	ne
 8011ac0:	b236      	sxthne	r6, r6
 8011ac2:	e7ef      	b.n	8011aa4 <_printf_i+0xbc>
 8011ac4:	682b      	ldr	r3, [r5, #0]
 8011ac6:	6820      	ldr	r0, [r4, #0]
 8011ac8:	1d19      	adds	r1, r3, #4
 8011aca:	6029      	str	r1, [r5, #0]
 8011acc:	0601      	lsls	r1, r0, #24
 8011ace:	d501      	bpl.n	8011ad4 <_printf_i+0xec>
 8011ad0:	681e      	ldr	r6, [r3, #0]
 8011ad2:	e002      	b.n	8011ada <_printf_i+0xf2>
 8011ad4:	0646      	lsls	r6, r0, #25
 8011ad6:	d5fb      	bpl.n	8011ad0 <_printf_i+0xe8>
 8011ad8:	881e      	ldrh	r6, [r3, #0]
 8011ada:	4854      	ldr	r0, [pc, #336]	; (8011c2c <_printf_i+0x244>)
 8011adc:	2f6f      	cmp	r7, #111	; 0x6f
 8011ade:	bf0c      	ite	eq
 8011ae0:	2308      	moveq	r3, #8
 8011ae2:	230a      	movne	r3, #10
 8011ae4:	2100      	movs	r1, #0
 8011ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011aea:	6865      	ldr	r5, [r4, #4]
 8011aec:	60a5      	str	r5, [r4, #8]
 8011aee:	2d00      	cmp	r5, #0
 8011af0:	bfa2      	ittt	ge
 8011af2:	6821      	ldrge	r1, [r4, #0]
 8011af4:	f021 0104 	bicge.w	r1, r1, #4
 8011af8:	6021      	strge	r1, [r4, #0]
 8011afa:	b90e      	cbnz	r6, 8011b00 <_printf_i+0x118>
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d04d      	beq.n	8011b9c <_printf_i+0x1b4>
 8011b00:	4615      	mov	r5, r2
 8011b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b06:	fb03 6711 	mls	r7, r3, r1, r6
 8011b0a:	5dc7      	ldrb	r7, [r0, r7]
 8011b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011b10:	4637      	mov	r7, r6
 8011b12:	42bb      	cmp	r3, r7
 8011b14:	460e      	mov	r6, r1
 8011b16:	d9f4      	bls.n	8011b02 <_printf_i+0x11a>
 8011b18:	2b08      	cmp	r3, #8
 8011b1a:	d10b      	bne.n	8011b34 <_printf_i+0x14c>
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	07de      	lsls	r6, r3, #31
 8011b20:	d508      	bpl.n	8011b34 <_printf_i+0x14c>
 8011b22:	6923      	ldr	r3, [r4, #16]
 8011b24:	6861      	ldr	r1, [r4, #4]
 8011b26:	4299      	cmp	r1, r3
 8011b28:	bfde      	ittt	le
 8011b2a:	2330      	movle	r3, #48	; 0x30
 8011b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b34:	1b52      	subs	r2, r2, r5
 8011b36:	6122      	str	r2, [r4, #16]
 8011b38:	f8cd a000 	str.w	sl, [sp]
 8011b3c:	464b      	mov	r3, r9
 8011b3e:	aa03      	add	r2, sp, #12
 8011b40:	4621      	mov	r1, r4
 8011b42:	4640      	mov	r0, r8
 8011b44:	f7ff fee2 	bl	801190c <_printf_common>
 8011b48:	3001      	adds	r0, #1
 8011b4a:	d14c      	bne.n	8011be6 <_printf_i+0x1fe>
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b50:	b004      	add	sp, #16
 8011b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b56:	4835      	ldr	r0, [pc, #212]	; (8011c2c <_printf_i+0x244>)
 8011b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011b5c:	6829      	ldr	r1, [r5, #0]
 8011b5e:	6823      	ldr	r3, [r4, #0]
 8011b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b64:	6029      	str	r1, [r5, #0]
 8011b66:	061d      	lsls	r5, r3, #24
 8011b68:	d514      	bpl.n	8011b94 <_printf_i+0x1ac>
 8011b6a:	07df      	lsls	r7, r3, #31
 8011b6c:	bf44      	itt	mi
 8011b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8011b72:	6023      	strmi	r3, [r4, #0]
 8011b74:	b91e      	cbnz	r6, 8011b7e <_printf_i+0x196>
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	f023 0320 	bic.w	r3, r3, #32
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	2310      	movs	r3, #16
 8011b80:	e7b0      	b.n	8011ae4 <_printf_i+0xfc>
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	f043 0320 	orr.w	r3, r3, #32
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	2378      	movs	r3, #120	; 0x78
 8011b8c:	4828      	ldr	r0, [pc, #160]	; (8011c30 <_printf_i+0x248>)
 8011b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b92:	e7e3      	b.n	8011b5c <_printf_i+0x174>
 8011b94:	0659      	lsls	r1, r3, #25
 8011b96:	bf48      	it	mi
 8011b98:	b2b6      	uxthmi	r6, r6
 8011b9a:	e7e6      	b.n	8011b6a <_printf_i+0x182>
 8011b9c:	4615      	mov	r5, r2
 8011b9e:	e7bb      	b.n	8011b18 <_printf_i+0x130>
 8011ba0:	682b      	ldr	r3, [r5, #0]
 8011ba2:	6826      	ldr	r6, [r4, #0]
 8011ba4:	6961      	ldr	r1, [r4, #20]
 8011ba6:	1d18      	adds	r0, r3, #4
 8011ba8:	6028      	str	r0, [r5, #0]
 8011baa:	0635      	lsls	r5, r6, #24
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	d501      	bpl.n	8011bb4 <_printf_i+0x1cc>
 8011bb0:	6019      	str	r1, [r3, #0]
 8011bb2:	e002      	b.n	8011bba <_printf_i+0x1d2>
 8011bb4:	0670      	lsls	r0, r6, #25
 8011bb6:	d5fb      	bpl.n	8011bb0 <_printf_i+0x1c8>
 8011bb8:	8019      	strh	r1, [r3, #0]
 8011bba:	2300      	movs	r3, #0
 8011bbc:	6123      	str	r3, [r4, #16]
 8011bbe:	4615      	mov	r5, r2
 8011bc0:	e7ba      	b.n	8011b38 <_printf_i+0x150>
 8011bc2:	682b      	ldr	r3, [r5, #0]
 8011bc4:	1d1a      	adds	r2, r3, #4
 8011bc6:	602a      	str	r2, [r5, #0]
 8011bc8:	681d      	ldr	r5, [r3, #0]
 8011bca:	6862      	ldr	r2, [r4, #4]
 8011bcc:	2100      	movs	r1, #0
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f7ee fb06 	bl	80001e0 <memchr>
 8011bd4:	b108      	cbz	r0, 8011bda <_printf_i+0x1f2>
 8011bd6:	1b40      	subs	r0, r0, r5
 8011bd8:	6060      	str	r0, [r4, #4]
 8011bda:	6863      	ldr	r3, [r4, #4]
 8011bdc:	6123      	str	r3, [r4, #16]
 8011bde:	2300      	movs	r3, #0
 8011be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011be4:	e7a8      	b.n	8011b38 <_printf_i+0x150>
 8011be6:	6923      	ldr	r3, [r4, #16]
 8011be8:	462a      	mov	r2, r5
 8011bea:	4649      	mov	r1, r9
 8011bec:	4640      	mov	r0, r8
 8011bee:	47d0      	blx	sl
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	d0ab      	beq.n	8011b4c <_printf_i+0x164>
 8011bf4:	6823      	ldr	r3, [r4, #0]
 8011bf6:	079b      	lsls	r3, r3, #30
 8011bf8:	d413      	bmi.n	8011c22 <_printf_i+0x23a>
 8011bfa:	68e0      	ldr	r0, [r4, #12]
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	4298      	cmp	r0, r3
 8011c00:	bfb8      	it	lt
 8011c02:	4618      	movlt	r0, r3
 8011c04:	e7a4      	b.n	8011b50 <_printf_i+0x168>
 8011c06:	2301      	movs	r3, #1
 8011c08:	4632      	mov	r2, r6
 8011c0a:	4649      	mov	r1, r9
 8011c0c:	4640      	mov	r0, r8
 8011c0e:	47d0      	blx	sl
 8011c10:	3001      	adds	r0, #1
 8011c12:	d09b      	beq.n	8011b4c <_printf_i+0x164>
 8011c14:	3501      	adds	r5, #1
 8011c16:	68e3      	ldr	r3, [r4, #12]
 8011c18:	9903      	ldr	r1, [sp, #12]
 8011c1a:	1a5b      	subs	r3, r3, r1
 8011c1c:	42ab      	cmp	r3, r5
 8011c1e:	dcf2      	bgt.n	8011c06 <_printf_i+0x21e>
 8011c20:	e7eb      	b.n	8011bfa <_printf_i+0x212>
 8011c22:	2500      	movs	r5, #0
 8011c24:	f104 0619 	add.w	r6, r4, #25
 8011c28:	e7f5      	b.n	8011c16 <_printf_i+0x22e>
 8011c2a:	bf00      	nop
 8011c2c:	08012425 	.word	0x08012425
 8011c30:	08012436 	.word	0x08012436

08011c34 <__sread>:
 8011c34:	b510      	push	{r4, lr}
 8011c36:	460c      	mov	r4, r1
 8011c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c3c:	f000 f894 	bl	8011d68 <_read_r>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	bfab      	itete	ge
 8011c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c46:	89a3      	ldrhlt	r3, [r4, #12]
 8011c48:	181b      	addge	r3, r3, r0
 8011c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c4e:	bfac      	ite	ge
 8011c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c52:	81a3      	strhlt	r3, [r4, #12]
 8011c54:	bd10      	pop	{r4, pc}

08011c56 <__swrite>:
 8011c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5a:	461f      	mov	r7, r3
 8011c5c:	898b      	ldrh	r3, [r1, #12]
 8011c5e:	05db      	lsls	r3, r3, #23
 8011c60:	4605      	mov	r5, r0
 8011c62:	460c      	mov	r4, r1
 8011c64:	4616      	mov	r6, r2
 8011c66:	d505      	bpl.n	8011c74 <__swrite+0x1e>
 8011c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6c:	2302      	movs	r3, #2
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f000 f868 	bl	8011d44 <_lseek_r>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c7e:	81a3      	strh	r3, [r4, #12]
 8011c80:	4632      	mov	r2, r6
 8011c82:	463b      	mov	r3, r7
 8011c84:	4628      	mov	r0, r5
 8011c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	f000 b817 	b.w	8011cbc <_write_r>

08011c8e <__sseek>:
 8011c8e:	b510      	push	{r4, lr}
 8011c90:	460c      	mov	r4, r1
 8011c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c96:	f000 f855 	bl	8011d44 <_lseek_r>
 8011c9a:	1c43      	adds	r3, r0, #1
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	bf15      	itete	ne
 8011ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011caa:	81a3      	strheq	r3, [r4, #12]
 8011cac:	bf18      	it	ne
 8011cae:	81a3      	strhne	r3, [r4, #12]
 8011cb0:	bd10      	pop	{r4, pc}

08011cb2 <__sclose>:
 8011cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb6:	f000 b813 	b.w	8011ce0 <_close_r>
	...

08011cbc <_write_r>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4d07      	ldr	r5, [pc, #28]	; (8011cdc <_write_r+0x20>)
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	4608      	mov	r0, r1
 8011cc4:	4611      	mov	r1, r2
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	602a      	str	r2, [r5, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f7f0 fd65 	bl	800279a <_write>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d102      	bne.n	8011cda <_write_r+0x1e>
 8011cd4:	682b      	ldr	r3, [r5, #0]
 8011cd6:	b103      	cbz	r3, 8011cda <_write_r+0x1e>
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	20003118 	.word	0x20003118

08011ce0 <_close_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	4d06      	ldr	r5, [pc, #24]	; (8011cfc <_close_r+0x1c>)
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	4608      	mov	r0, r1
 8011cea:	602b      	str	r3, [r5, #0]
 8011cec:	f7f0 fd71 	bl	80027d2 <_close>
 8011cf0:	1c43      	adds	r3, r0, #1
 8011cf2:	d102      	bne.n	8011cfa <_close_r+0x1a>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	b103      	cbz	r3, 8011cfa <_close_r+0x1a>
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	20003118 	.word	0x20003118

08011d00 <_fstat_r>:
 8011d00:	b538      	push	{r3, r4, r5, lr}
 8011d02:	4d07      	ldr	r5, [pc, #28]	; (8011d20 <_fstat_r+0x20>)
 8011d04:	2300      	movs	r3, #0
 8011d06:	4604      	mov	r4, r0
 8011d08:	4608      	mov	r0, r1
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	602b      	str	r3, [r5, #0]
 8011d0e:	f7f0 fd6c 	bl	80027ea <_fstat>
 8011d12:	1c43      	adds	r3, r0, #1
 8011d14:	d102      	bne.n	8011d1c <_fstat_r+0x1c>
 8011d16:	682b      	ldr	r3, [r5, #0]
 8011d18:	b103      	cbz	r3, 8011d1c <_fstat_r+0x1c>
 8011d1a:	6023      	str	r3, [r4, #0]
 8011d1c:	bd38      	pop	{r3, r4, r5, pc}
 8011d1e:	bf00      	nop
 8011d20:	20003118 	.word	0x20003118

08011d24 <_isatty_r>:
 8011d24:	b538      	push	{r3, r4, r5, lr}
 8011d26:	4d06      	ldr	r5, [pc, #24]	; (8011d40 <_isatty_r+0x1c>)
 8011d28:	2300      	movs	r3, #0
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	4608      	mov	r0, r1
 8011d2e:	602b      	str	r3, [r5, #0]
 8011d30:	f7f0 fd6b 	bl	800280a <_isatty>
 8011d34:	1c43      	adds	r3, r0, #1
 8011d36:	d102      	bne.n	8011d3e <_isatty_r+0x1a>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	b103      	cbz	r3, 8011d3e <_isatty_r+0x1a>
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	20003118 	.word	0x20003118

08011d44 <_lseek_r>:
 8011d44:	b538      	push	{r3, r4, r5, lr}
 8011d46:	4d07      	ldr	r5, [pc, #28]	; (8011d64 <_lseek_r+0x20>)
 8011d48:	4604      	mov	r4, r0
 8011d4a:	4608      	mov	r0, r1
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	2200      	movs	r2, #0
 8011d50:	602a      	str	r2, [r5, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	f7f0 fd64 	bl	8002820 <_lseek>
 8011d58:	1c43      	adds	r3, r0, #1
 8011d5a:	d102      	bne.n	8011d62 <_lseek_r+0x1e>
 8011d5c:	682b      	ldr	r3, [r5, #0]
 8011d5e:	b103      	cbz	r3, 8011d62 <_lseek_r+0x1e>
 8011d60:	6023      	str	r3, [r4, #0]
 8011d62:	bd38      	pop	{r3, r4, r5, pc}
 8011d64:	20003118 	.word	0x20003118

08011d68 <_read_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4d07      	ldr	r5, [pc, #28]	; (8011d88 <_read_r+0x20>)
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	4608      	mov	r0, r1
 8011d70:	4611      	mov	r1, r2
 8011d72:	2200      	movs	r2, #0
 8011d74:	602a      	str	r2, [r5, #0]
 8011d76:	461a      	mov	r2, r3
 8011d78:	f7f0 fcf2 	bl	8002760 <_read>
 8011d7c:	1c43      	adds	r3, r0, #1
 8011d7e:	d102      	bne.n	8011d86 <_read_r+0x1e>
 8011d80:	682b      	ldr	r3, [r5, #0]
 8011d82:	b103      	cbz	r3, 8011d86 <_read_r+0x1e>
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	bd38      	pop	{r3, r4, r5, pc}
 8011d88:	20003118 	.word	0x20003118

08011d8c <_init>:
 8011d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d8e:	bf00      	nop
 8011d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d92:	bc08      	pop	{r3}
 8011d94:	469e      	mov	lr, r3
 8011d96:	4770      	bx	lr

08011d98 <_fini>:
 8011d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9a:	bf00      	nop
 8011d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d9e:	bc08      	pop	{r3}
 8011da0:	469e      	mov	lr, r3
 8011da2:	4770      	bx	lr
