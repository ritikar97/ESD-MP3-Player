
STM32-SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf0c  0800cf0c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf0c  0800cf0c  0001cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf14  0800cf14  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf14  0800cf14  0001cf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800cf1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f4  200000a8  0800cfc4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  0800cfc4  00020a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e7c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f26  00000000  00000000  00039f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bee5  00000000  00000000  000403b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba9e  00000000  00000000  0005c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d50  00000000  00000000  00077d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010aa8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  0010aadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7fc 	.word	0x0800c7fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	0800c7fc 	.word	0x0800c7fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <SELECT+0x18>)
 800058e:	f001 fc5f 	bl	8001e50 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f001 f9a2 	bl	80018dc <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40020800 	.word	0x40020800

080005a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <DESELECT+0x18>)
 80005aa:	f001 fc51 	bl	8001e50 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f001 f994 	bl	80018dc <HAL_Delay>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020800 	.word	0x40020800

080005bc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c6:	bf00      	nop
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SPI_TxByte+0x30>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d1f8      	bne.n	80005c8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005d6:	1df9      	adds	r1, r7, #7
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <SPI_TxByte+0x30>)
 80005de:	f003 fd7c 	bl	80040da <HAL_SPI_Transmit>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200000cc 	.word	0x200000cc

080005f0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005fc:	bf00      	nop
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SPI_TxBuffer+0x30>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b02      	cmp	r3, #2
 800060a:	d1f8      	bne.n	80005fe <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800060c:	887a      	ldrh	r2, [r7, #2]
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <SPI_TxBuffer+0x30>)
 8000614:	f003 fd61 	bl	80040da <HAL_SPI_Transmit>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000cc 	.word	0x200000cc

08000624 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <SPI_RxByte+0x34>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800063e:	1dba      	adds	r2, r7, #6
 8000640:	1df9      	adds	r1, r7, #7
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <SPI_RxByte+0x34>)
 800064a:	f003 fe82 	bl	8004352 <HAL_SPI_TransmitReceive>

  return data;
 800064e:	79bb      	ldrb	r3, [r7, #6]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000cc 	.word	0x200000cc

0800065c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000664:	f7ff ffde 	bl	8000624 <SPI_RxByte>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	701a      	strb	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <SD_ReadyWait+0x30>)
 8000680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000684:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000686:	f7ff ffcd 	bl	8000624 <SPI_RxByte>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2bff      	cmp	r3, #255	; 0xff
 8000692:	d003      	beq.n	800069c <SD_ReadyWait+0x24>
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SD_ReadyWait+0x30>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f4      	bne.n	8000686 <SD_ReadyWait+0xe>

  return res;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000c6 	.word	0x200000c6

080006ac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006b6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80006b8:	f7ff ff72 	bl	80005a0 <DESELECT>
  for(int i = 0; i < 10; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e005      	b.n	80006ce <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	f7ff ff7a 	bl	80005bc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	ddf6      	ble.n	80006c2 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80006d4:	f7ff ff56 	bl	8000584 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80006ec:	2395      	movs	r3, #149	; 0x95
 80006ee:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80006f0:	463b      	mov	r3, r7
 80006f2:	2106      	movs	r1, #6
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff7b 	bl	80005f0 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80006fa:	e002      	b.n	8000702 <SD_PowerOn+0x56>
  {
    cnt--;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	3b01      	subs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000702:	f7ff ff8f 	bl	8000624 <SPI_RxByte>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d002      	beq.n	8000712 <SD_PowerOn+0x66>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f4      	bne.n	80006fc <SD_PowerOn+0x50>
  }

  DESELECT();
 8000712:	f7ff ff45 	bl	80005a0 <DESELECT>
  SPI_TxByte(0XFF);
 8000716:	20ff      	movs	r0, #255	; 0xff
 8000718:	f7ff ff50 	bl	80005bc <SPI_TxByte>

  PowerFlag = 1;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_PowerOn+0x80>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c9 	.word	0x200000c9

08000730 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <SD_PowerOff+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	200000c9 	.word	0x200000c9

08000748 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <SD_CheckPower+0x14>)
 800074e:	781b      	ldrb	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000c9 	.word	0x200000c9

08000760 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SD_RxDataBlock+0x58>)
 800076c:	22c8      	movs	r2, #200	; 0xc8
 800076e:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000770:	f7ff ff58 	bl	8000624 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d103      	bne.n	8000786 <SD_RxDataBlock+0x26>
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <SD_RxDataBlock+0x58>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f4      	bne.n	8000770 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	2bfe      	cmp	r3, #254	; 0xfe
 800078a:	d001      	beq.n	8000790 <SD_RxDataBlock+0x30>
 800078c:	2300      	movs	r3, #0
 800078e:	e00f      	b.n	80007b0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff60 	bl	800065c <SPI_RxBytePtr>
  } while(len--);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	603a      	str	r2, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f4      	bne.n	8000790 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80007a6:	f7ff ff3d 	bl	8000624 <SPI_RxByte>
  SPI_RxByte();
 80007aa:	f7ff ff3b 	bl	8000624 <SPI_RxByte>

  return TRUE;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000c4 	.word	0x200000c4

080007bc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80007cc:	f7ff ff54 	bl	8000678 <SD_ReadyWait>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2bff      	cmp	r3, #255	; 0xff
 80007d4:	d001      	beq.n	80007da <SD_TxDataBlock+0x1e>
 80007d6:	2300      	movs	r3, #0
 80007d8:	e02f      	b.n	800083a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff feed 	bl	80005bc <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2bfd      	cmp	r3, #253	; 0xfd
 80007e6:	d020      	beq.n	800082a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff feff 	bl	80005f0 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80007f2:	f7ff ff17 	bl	8000624 <SPI_RxByte>
    SPI_RxByte();
 80007f6:	f7ff ff15 	bl	8000624 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80007fa:	e00b      	b.n	8000814 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80007fc:	f7ff ff12 	bl	8000624 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f003 031f 	and.w	r3, r3, #31
 800080a:	2b05      	cmp	r3, #5
 800080c:	d006      	beq.n	800081c <SD_TxDataBlock+0x60>
      i++;
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000814:	7bbb      	ldrb	r3, [r7, #14]
 8000816:	2b40      	cmp	r3, #64	; 0x40
 8000818:	d9f0      	bls.n	80007fc <SD_TxDataBlock+0x40>
 800081a:	e000      	b.n	800081e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800081c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800081e:	bf00      	nop
 8000820:	f7ff ff00 	bl	8000624 <SPI_RxByte>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0fa      	beq.n	8000820 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	2b05      	cmp	r3, #5
 8000832:	d101      	bne.n	8000838 <SD_TxDataBlock+0x7c>
 8000834:	2301      	movs	r3, #1
 8000836:	e000      	b.n	800083a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	4603      	mov	r3, r0
 800084a:	6039      	str	r1, [r7, #0]
 800084c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800084e:	f7ff ff13 	bl	8000678 <SD_ReadyWait>
 8000852:	4603      	mov	r3, r0
 8000854:	2bff      	cmp	r3, #255	; 0xff
 8000856:	d001      	beq.n	800085c <SD_SendCmd+0x1a>
 8000858:	23ff      	movs	r3, #255	; 0xff
 800085a:	e042      	b.n	80008e2 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff feac 	bl	80005bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0e1b      	lsrs	r3, r3, #24
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea6 	bl	80005bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fea0 	bl	80005bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe9a 	bl	80005bc <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe95 	bl	80005bc <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b40      	cmp	r3, #64	; 0x40
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x5c>
 8000898:	2395      	movs	r3, #149	; 0x95
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e007      	b.n	80008ae <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b48      	cmp	r3, #72	; 0x48
 80008a2:	d102      	bne.n	80008aa <SD_SendCmd+0x68>
 80008a4:	2387      	movs	r3, #135	; 0x87
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e001      	b.n	80008ae <SD_SendCmd+0x6c>
  else crc = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe83 	bl	80005bc <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b4c      	cmp	r3, #76	; 0x4c
 80008ba:	d101      	bne.n	80008c0 <SD_SendCmd+0x7e>
 80008bc:	f7ff feb2 	bl	8000624 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80008c0:	230a      	movs	r3, #10
 80008c2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80008c4:	f7ff feae 	bl	8000624 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da05      	bge.n	80008e0 <SD_SendCmd+0x9e>
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	73bb      	strb	r3, [r7, #14]
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f1      	bne.n	80008c4 <SD_SendCmd+0x82>

  return res;
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SD_disk_initialize+0x14>
 80008fc:	2301      	movs	r3, #1
 80008fe:	e0d1      	b.n	8000aa4 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000900:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <SD_disk_initialize+0x2a>
 800090e:	4b67      	ldr	r3, [pc, #412]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	e0c6      	b.n	8000aa4 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000916:	f7ff fec9 	bl	80006ac <SD_PowerOn>

  /* slave select */
  SELECT();
 800091a:	f7ff fe33 	bl	8000584 <SELECT>

  /* check disk type */
  type = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000922:	2100      	movs	r1, #0
 8000924:	2040      	movs	r0, #64	; 0x40
 8000926:	f7ff ff8c 	bl	8000842 <SD_SendCmd>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	f040 80a1 	bne.w	8000a74 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000932:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800093a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800093e:	2048      	movs	r0, #72	; 0x48
 8000940:	f7ff ff7f 	bl	8000842 <SD_SendCmd>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d155      	bne.n	80009f6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800094a:	2300      	movs	r3, #0
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	e00c      	b.n	800096a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000950:	7bfc      	ldrb	r4, [r7, #15]
 8000952:	f7ff fe67 	bl	8000624 <SPI_RxByte>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	f104 0310 	add.w	r3, r4, #16
 800095e:	443b      	add	r3, r7
 8000960:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	3301      	adds	r3, #1
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d9ef      	bls.n	8000950 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000970:	7abb      	ldrb	r3, [r7, #10]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d17e      	bne.n	8000a74 <SD_disk_initialize+0x188>
 8000976:	7afb      	ldrb	r3, [r7, #11]
 8000978:	2baa      	cmp	r3, #170	; 0xaa
 800097a:	d17b      	bne.n	8000a74 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800097c:	2100      	movs	r1, #0
 800097e:	2077      	movs	r0, #119	; 0x77
 8000980:	f7ff ff5f 	bl	8000842 <SD_SendCmd>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d807      	bhi.n	800099a <SD_disk_initialize+0xae>
 800098a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098e:	2069      	movs	r0, #105	; 0x69
 8000990:	f7ff ff57 	bl	8000842 <SD_SendCmd>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d004      	beq.n	80009a4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d1ec      	bne.n	800097c <SD_disk_initialize+0x90>
 80009a2:	e000      	b.n	80009a6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d062      	beq.n	8000a74 <SD_disk_initialize+0x188>
 80009ae:	2100      	movs	r1, #0
 80009b0:	207a      	movs	r0, #122	; 0x7a
 80009b2:	f7ff ff46 	bl	8000842 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d15b      	bne.n	8000a74 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe2e 	bl	8000624 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x104>
 80009ec:	230c      	movs	r3, #12
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x106>
 80009f0:	2304      	movs	r3, #4
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	e03e      	b.n	8000a74 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009f6:	2100      	movs	r1, #0
 80009f8:	2077      	movs	r0, #119	; 0x77
 80009fa:	f7ff ff22 	bl	8000842 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d808      	bhi.n	8000a16 <SD_disk_initialize+0x12a>
 8000a04:	2100      	movs	r1, #0
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff1b 	bl	8000842 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d801      	bhi.n	8000a16 <SD_disk_initialize+0x12a>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e000      	b.n	8000a18 <SD_disk_initialize+0x12c>
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10e      	bne.n	8000a3e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	; 0x77
 8000a24:	f7ff ff0d 	bl	8000842 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d80e      	bhi.n	8000a4c <SD_disk_initialize+0x160>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f7ff ff06 	bl	8000842 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <SD_disk_initialize+0x160>
 8000a3c:	e00c      	b.n	8000a58 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f7ff fefe 	bl	8000842 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1e2      	bne.n	8000a1a <SD_disk_initialize+0x12e>
 8000a54:	e000      	b.n	8000a58 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a56:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SD_disk_initialize+0x1c4>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d007      	beq.n	8000a70 <SD_disk_initialize+0x184>
 8000a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a64:	2050      	movs	r0, #80	; 0x50
 8000a66:	f7ff feec 	bl	8000842 <SD_SendCmd>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SD_disk_initialize+0x188>
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <SD_disk_initialize+0x1c8>)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000a7a:	f7ff fd91 	bl	80005a0 <DESELECT>
  SPI_RxByte();
 8000a7e:	f7ff fdd1 	bl	8000624 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e001      	b.n	8000a9e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a9a:	f7ff fe49 	bl	8000730 <SD_PowerOff>
  }

  return Stat;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	; (8000aac <SD_disk_initialize+0x1c0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200000c4 	.word	0x200000c4
 8000ab4:	200000c8 	.word	0x200000c8

08000ab8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SD_disk_status+0x14>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e002      	b.n	8000ad2 <SD_disk_status+0x1a>
  return Stat;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SD_disk_status+0x28>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	4603      	mov	r3, r0
 8000af2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <SD_disk_read+0x1c>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <SD_disk_read+0x20>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e051      	b.n	8000ba8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <SD_disk_read+0xcc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SD_disk_read+0x32>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e048      	b.n	8000ba8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <SD_disk_read+0xd0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <SD_disk_read+0x44>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	025b      	lsls	r3, r3, #9
 8000b26:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b28:	f7ff fd2c 	bl	8000584 <SELECT>

  if (count == 1)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d111      	bne.n	8000b56 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	2051      	movs	r0, #81	; 0x51
 8000b36:	f7ff fe84 	bl	8000842 <SD_SendCmd>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d129      	bne.n	8000b94 <SD_disk_read+0xb0>
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f7ff fe0b 	bl	8000760 <SD_RxDataBlock>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d021      	beq.n	8000b94 <SD_disk_read+0xb0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	e01e      	b.n	8000b94 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2052      	movs	r0, #82	; 0x52
 8000b5a:	f7ff fe72 	bl	8000842 <SD_SendCmd>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d117      	bne.n	8000b94 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fdf9 	bl	8000760 <SD_RxDataBlock>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00a      	beq.n	8000b8a <SD_disk_read+0xa6>
        buff += 512;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ed      	bne.n	8000b64 <SD_disk_read+0x80>
 8000b88:	e000      	b.n	8000b8c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b8a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	204c      	movs	r0, #76	; 0x4c
 8000b90:	f7ff fe57 	bl	8000842 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000b94:	f7ff fd04 	bl	80005a0 <DESELECT>
  SPI_RxByte();
 8000b98:	f7ff fd44 	bl	8000624 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf14      	ite	ne
 8000ba2:	2301      	movne	r3, #1
 8000ba4:	2300      	moveq	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	200000c8 	.word	0x200000c8

08000bb8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <SD_disk_write+0x1c>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <SD_disk_write+0x20>
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	e06b      	b.n	8000cb0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <SD_disk_write+0x100>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SD_disk_write+0x32>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e062      	b.n	8000cb0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bea:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <SD_disk_write+0x100>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SD_disk_write+0x44>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e059      	b.n	8000cb0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <SD_disk_write+0x104>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <SD_disk_write+0x56>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c0e:	f7ff fcb9 	bl	8000584 <SELECT>

  if (count == 1)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d110      	bne.n	8000c3a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	2058      	movs	r0, #88	; 0x58
 8000c1c:	f7ff fe11 	bl	8000842 <SD_SendCmd>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d13a      	bne.n	8000c9c <SD_disk_write+0xe4>
 8000c26:	21fe      	movs	r1, #254	; 0xfe
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f7ff fdc7 	bl	80007bc <SD_TxDataBlock>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d033      	beq.n	8000c9c <SD_disk_write+0xe4>
      count = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	e030      	b.n	8000c9c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <SD_disk_write+0x104>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2077      	movs	r0, #119	; 0x77
 8000c4a:	f7ff fdfa 	bl	8000842 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4e:	6839      	ldr	r1, [r7, #0]
 8000c50:	2057      	movs	r0, #87	; 0x57
 8000c52:	f7ff fdf6 	bl	8000842 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2059      	movs	r0, #89	; 0x59
 8000c5a:	f7ff fdf2 	bl	8000842 <SD_SendCmd>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11b      	bne.n	8000c9c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c64:	21fc      	movs	r1, #252	; 0xfc
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fda8 	bl	80007bc <SD_TxDataBlock>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00a      	beq.n	8000c88 <SD_disk_write+0xd0>
        buff += 512;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1ee      	bne.n	8000c64 <SD_disk_write+0xac>
 8000c86:	e000      	b.n	8000c8a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c88:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000c8a:	21fd      	movs	r1, #253	; 0xfd
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f7ff fd95 	bl	80007bc <SD_TxDataBlock>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <SD_disk_write+0xe4>
      {
        count = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000c9c:	f7ff fc80 	bl	80005a0 <DESELECT>
  SPI_RxByte();
 8000ca0:	f7ff fcc0 	bl	8000624 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200000c8 	.word	0x200000c8

08000cc0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	603a      	str	r2, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SD_disk_ioctl+0x1e>
 8000cda:	2304      	movs	r3, #4
 8000cdc:	e115      	b.n	8000f0a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d124      	bne.n	8000d34 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d012      	beq.n	8000d18 <SD_disk_ioctl+0x58>
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dc1a      	bgt.n	8000d2c <SD_disk_ioctl+0x6c>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <SD_disk_ioctl+0x40>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d006      	beq.n	8000d0c <SD_disk_ioctl+0x4c>
 8000cfe:	e015      	b.n	8000d2c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000d00:	f7ff fd16 	bl	8000730 <SD_PowerOff>
      res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d0a:	e0fc      	b.n	8000f06 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000d0c:	f7ff fcce 	bl	80006ac <SD_PowerOn>
      res = RES_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d16:	e0f6      	b.n	8000f06 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	1c5c      	adds	r4, r3, #1
 8000d1c:	f7ff fd14 	bl	8000748 <SD_CheckPower>
 8000d20:	4603      	mov	r3, r0
 8000d22:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d2a:	e0ec      	b.n	8000f06 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d32:	e0e8      	b.n	8000f06 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <SD_disk_ioctl+0x254>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x86>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e0e1      	b.n	8000f0a <SD_disk_ioctl+0x24a>

    SELECT();
 8000d46:	f7ff fc1d 	bl	8000584 <SELECT>

    switch (ctrl)
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b0d      	cmp	r3, #13
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <SD_disk_ioctl+0x228>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <SD_disk_ioctl+0x98>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000e53 	.word	0x08000e53
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000e43 	.word	0x08000e43
 8000d64:	08000ee9 	.word	0x08000ee9
 8000d68:	08000ee9 	.word	0x08000ee9
 8000d6c:	08000ee9 	.word	0x08000ee9
 8000d70:	08000ee9 	.word	0x08000ee9
 8000d74:	08000ee9 	.word	0x08000ee9
 8000d78:	08000ee9 	.word	0x08000ee9
 8000d7c:	08000ee9 	.word	0x08000ee9
 8000d80:	08000ee9 	.word	0x08000ee9
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd55 	bl	8000842 <SD_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a8 	bne.w	8000ef0 <SD_disk_ioctl+0x230>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcda 	bl	8000760 <SD_RxDataBlock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809e 	beq.w	8000ef0 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e40:	e056      	b.n	8000ef0 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e50:	e055      	b.n	8000efe <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e52:	f7ff fc11 	bl	8000678 <SD_ReadyWait>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14b      	bne.n	8000ef4 <SD_disk_ioctl+0x234>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e62:	e047      	b.n	8000ef4 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fceb 	bl	8000842 <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d142      	bne.n	8000ef8 <SD_disk_ioctl+0x238>
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc73 	bl	8000760 <SD_RxDataBlock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03b      	beq.n	8000ef8 <SD_disk_ioctl+0x238>
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e86:	e037      	b.n	8000ef8 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fcd9 	bl	8000842 <SD_SendCmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d132      	bne.n	8000efc <SD_disk_ioctl+0x23c>
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fc61 	bl	8000760 <SD_RxDataBlock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02b      	beq.n	8000efc <SD_disk_ioctl+0x23c>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eaa:	e027      	b.n	8000efc <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fcc7 	bl	8000842 <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fbac 	bl	8000624 <SPI_RxByte>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eee:	e006      	b.n	8000efe <SD_disk_ioctl+0x23e>
      break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <SD_disk_ioctl+0x23e>
      break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <SD_disk_ioctl+0x23e>
      break;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <SD_disk_ioctl+0x23e>
      break;
 8000efc:	bf00      	nop
    }

    DESELECT();
 8000efe:	f7ff fb4f 	bl	80005a0 <DESELECT>
    SPI_RxByte();
 8000f02:	f7ff fb8f 	bl	8000624 <SPI_RxByte>
  }

  return res;
 8000f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	372c      	adds	r7, #44	; 0x2c
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 fc6c 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f80f 	bl	8000f42 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 f8a8 	bl	8001078 <MX_GPIO_Init>
 // MX_I2C1_Init();
 // MX_I2S2_Init();
  //MX_I2S3_Init();
  MX_SPI1_Init();
 8000f28:	f000 f846 	bl	8000fb8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f2c:	f00a f918 	bl	800b160 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8000f30:	f000 f878 	bl	8001024 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000f34:	f005 f822 	bl	8005f7c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //process_SD_card();
  read_SD_card();
 8000f38:	f000 f990 	bl	800125c <read_SD_card>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f3c:	f00a f936 	bl	800b1ac <MX_USB_HOST_Process>
 8000f40:	e7fc      	b.n	8000f3c <main+0x24>

08000f42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b092      	sub	sp, #72	; 0x48
 8000f46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	2230      	movs	r2, #48	; 0x30
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a fc47 	bl	800b7e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fb8d 	bl	8003698 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f84:	f000 fa2e 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fdf1 	bl	8003b88 <HAL_RCC_ClockConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fac:	f000 fa1a 	bl	80013e4 <Error_Handler>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3748      	adds	r7, #72	; 0x48
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SPI1_Init+0x64>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI1_Init+0x64>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI1_Init+0x64>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI1_Init+0x64>)
 8000fec:	2238      	movs	r2, #56	; 0x38
 8000fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI1_Init+0x64>)
 8001004:	220a      	movs	r2, #10
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_SPI1_Init+0x64>)
 800100a:	f002 ffdd 	bl	8003fc8 <HAL_SPI_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001014:	f000 f9e6 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000cc 	.word	0x200000cc
 8001020:	40013000 	.word	0x40013000

08001024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART1_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART1_UART_Init+0x4c>)
 800105c:	f003 fbe6 	bl	800482c <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f9bd 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000124 	.word	0x20000124
 8001074:	40011000 	.word	0x40011000

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a63      	ldr	r2, [pc, #396]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b61      	ldr	r3, [pc, #388]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a55      	ldr	r2, [pc, #340]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <MX_GPIO_Init+0x1ac>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a47      	ldr	r2, [pc, #284]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <MX_GPIO_Init+0x1ac>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_GPIO_Init+0x1ac>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	483b      	ldr	r0, [pc, #236]	; (8001228 <MX_GPIO_Init+0x1b0>)
 800113c:	f000 fe88 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2101      	movs	r1, #1
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <MX_GPIO_Init+0x1b4>)
 8001146:	f000 fe83 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2110      	movs	r1, #16
 800114e:	4837      	ldr	r0, [pc, #220]	; (800122c <MX_GPIO_Init+0x1b4>)
 8001150:	f000 fe7e 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001154:	2200      	movs	r2, #0
 8001156:	f24f 0110 	movw	r1, #61456	; 0xf010
 800115a:	4835      	ldr	r0, [pc, #212]	; (8001230 <MX_GPIO_Init+0x1b8>)
 800115c:	f000 fe78 	bl	8001e50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001160:	2304      	movs	r3, #4
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_GPIO_Init+0x1b0>)
 8001174:	f000 fce8 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001178:	2308      	movs	r3, #8
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4826      	ldr	r0, [pc, #152]	; (8001228 <MX_GPIO_Init+0x1b0>)
 8001190:	f000 fcda 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001194:	2332      	movs	r3, #50	; 0x32
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001198:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	481f      	ldr	r0, [pc, #124]	; (8001228 <MX_GPIO_Init+0x1b0>)
 80011aa:	f000 fccd 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4;
 80011ae:	2311      	movs	r3, #17
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <MX_GPIO_Init+0x1b4>)
 80011c6:	f000 fcbf 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4815      	ldr	r0, [pc, #84]	; (8001234 <MX_GPIO_Init+0x1bc>)
 80011e0:	f000 fcb2 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011e4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_GPIO_Init+0x1b8>)
 80011fe:	f000 fca3 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001202:	2320      	movs	r3, #32
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x1b8>)
 8001216:	f000 fc97 	bl	8001b48 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40021000 	.word	0x40021000
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40020000 	.word	0x40020000

08001238 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	2201      	movs	r2, #1
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <__io_putchar+0x20>)
 800124a:	f003 fb3c 	bl	80048c6 <HAL_UART_Transmit>
  return ch;
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000124 	.word	0x20000124

0800125c <read_SD_card>:


void read_SD_card(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	f5ad 5d0e 	sub.w	sp, sp, #9088	; 0x2380
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0
	FRESULT     fres;                 //Result after operations
	FILINFO 	fno;
	DIR 		dir;
	BYTE 		buff[512];     /* File read buffer */

	printf("Beginning the SD card mounting\r\n");
 8001266:	4855      	ldr	r0, [pc, #340]	; (80013bc <read_SD_card+0x160>)
 8001268:	f00a fc2a 	bl	800bac0 <puts>

	do{
		//Mount the SD Card
		fres = f_mount(&FatFs, "", 1);    //1=mount now
 800126c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8001270:	f103 0318 	add.w	r3, r3, #24
 8001274:	3b1c      	subs	r3, #28
 8001276:	2201      	movs	r2, #1
 8001278:	4951      	ldr	r1, [pc, #324]	; (80013c0 <read_SD_card+0x164>)
 800127a:	4618      	mov	r0, r3
 800127c:	f009 f9f0 	bl	800a660 <f_mount>
 8001280:	4603      	mov	r3, r0
 8001282:	f507 520e 	add.w	r2, r7, #9088	; 0x2380
 8001286:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800128a:	7013      	strb	r3, [r2, #0]
		if (fres != FR_OK)
 800128c:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8001290:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <read_SD_card+0x52>
		{
		  printf("No SD Card found : (%d)\r\n", fres);
 800129a:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 800129e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4847      	ldr	r0, [pc, #284]	; (80013c4 <read_SD_card+0x168>)
 80012a8:	f00a fb84 	bl	800b9b4 <iprintf>
		  break;
 80012ac:	e078      	b.n	80013a0 <read_SD_card+0x144>
		}
		printf("SD Card Mounted Successfully!!!\r\n");
 80012ae:	4846      	ldr	r0, [pc, #280]	; (80013c8 <read_SD_card+0x16c>)
 80012b0:	f00a fc06 	bl	800bac0 <puts>


		fres = f_opendir(&dir, "/");
 80012b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80012b8:	3b38      	subs	r3, #56	; 0x38
 80012ba:	4944      	ldr	r1, [pc, #272]	; (80013cc <read_SD_card+0x170>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f009 fd40 	bl	800ad42 <f_opendir>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f507 520e 	add.w	r2, r7, #9088	; 0x2380
 80012c8:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80012cc:	7013      	strb	r3, [r2, #0]
	    if (fres == FR_OK) {
 80012ce:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 80012d2:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d161      	bne.n	80013a0 <read_SD_card+0x144>

			for (;;) {
				fres = f_readdir(&dir, &fno);
 80012dc:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80012e0:	3a04      	subs	r2, #4
 80012e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80012e6:	3b38      	subs	r3, #56	; 0x38
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f009 fd9c 	bl	800ae28 <f_readdir>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f507 520e 	add.w	r2, r7, #9088	; 0x2380
 80012f6:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80012fa:	7013      	strb	r3, [r2, #0]
				if (fres != FR_OK || fno.fname[0] == 0){
 80012fc:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8001300:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <read_SD_card+0xbc>
 800130a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800130e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001312:	7d9b      	ldrb	r3, [r3, #22]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <read_SD_card+0xc4>
					printf("No more files found\r\n");
 8001318:	482d      	ldr	r0, [pc, #180]	; (80013d0 <read_SD_card+0x174>)
 800131a:	f00a fbd1 	bl	800bac0 <puts>
					break;
 800131e:	e03f      	b.n	80013a0 <read_SD_card+0x144>
				}
				printf("reading file /%s ...\r\n",fno.fname);
 8001320:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001324:	3b04      	subs	r3, #4
 8001326:	3316      	adds	r3, #22
 8001328:	4619      	mov	r1, r3
 800132a:	482a      	ldr	r0, [pc, #168]	; (80013d4 <read_SD_card+0x178>)
 800132c:	f00a fb42 	bl	800b9b4 <iprintf>

				/* open the scanned file */
				fres = f_open(&fil, fno.fname, FA_READ);
 8001330:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001334:	3b04      	subs	r3, #4
 8001336:	f103 0116 	add.w	r1, r3, #22
 800133a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800133e:	3b2c      	subs	r3, #44	; 0x2c
 8001340:	2201      	movs	r2, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f009 f9d2 	bl	800a6ec <f_open>
 8001348:	4603      	mov	r3, r0
 800134a:	f507 520e 	add.w	r2, r7, #9088	; 0x2380
 800134e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8001352:	7013      	strb	r3, [r2, #0]
				if (fres != FR_OK){
 8001354:	f507 530e 	add.w	r3, r7, #9088	; 0x2380
 8001358:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00f      	beq.n	8001382 <read_SD_card+0x126>
					printf("Error: failed to open %s\r\n", fno.fname);
 8001362:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001366:	3b04      	subs	r3, #4
 8001368:	3316      	adds	r3, #22
 800136a:	4619      	mov	r1, r3
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <read_SD_card+0x17c>)
 800136e:	f00a fb21 	bl	800b9b4 <iprintf>
					continue;
 8001372:	e014      	b.n	800139e <read_SD_card+0x142>
				}

				/* Read data to the memory */
				while(f_gets(buff, sizeof(buff), &fil)){
					printf("%s\r\n", buff);
 8001374:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001378:	3b38      	subs	r3, #56	; 0x38
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <read_SD_card+0x180>)
 800137e:	f00a fb19 	bl	800b9b4 <iprintf>
				while(f_gets(buff, sizeof(buff), &fil)){
 8001382:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8001386:	3a2c      	subs	r2, #44	; 0x2c
 8001388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138c:	3b38      	subs	r3, #56	; 0x38
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	4618      	mov	r0, r3
 8001394:	f009 fd85 	bl	800aea2 <f_gets>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ea      	bne.n	8001374 <read_SD_card+0x118>
				fres = f_readdir(&dir, &fno);
 800139e:	e79d      	b.n	80012dc <read_SD_card+0x80>
			}
	    }
	}while(false);

	 //We're done, so de-mount the drive
	 f_mount(NULL, "", 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	4907      	ldr	r1, [pc, #28]	; (80013c0 <read_SD_card+0x164>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f009 f95b 	bl	800a660 <f_mount>
	 printf("SD Card Unmounted Successfully!!!\r\n");
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <read_SD_card+0x184>)
 80013ac:	f00a fb88 	bl	800bac0 <puts>
}
 80013b0:	bf00      	nop
 80013b2:	f507 570e 	add.w	r7, r7, #9088	; 0x2380
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	0800c814 	.word	0x0800c814
 80013c0:	0800c834 	.word	0x0800c834
 80013c4:	0800c838 	.word	0x0800c838
 80013c8:	0800c854 	.word	0x0800c854
 80013cc:	0800c878 	.word	0x0800c878
 80013d0:	0800c87c 	.word	0x0800c87c
 80013d4:	0800c894 	.word	0x0800c894
 80013d8:	0800c8ac 	.word	0x0800c8ac
 80013dc:	0800c8c8 	.word	0x0800c8c8
 80013e0:	0800c8d0 	.word	0x0800c8d0

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_MspInit+0x4c>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x4c>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800142e:	2007      	movs	r0, #7
 8001430:	f000 fb48 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_SPI_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 800146c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800149a:	23e0      	movs	r3, #224	; 0xe0
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014aa:	2305      	movs	r3, #5
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_SPI_MspInit+0x8c>)
 80014b6:	f000 fb47 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40013000 	.word	0x40013000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HAL_UART_MspInit+0xc0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d14a      	bne.n	8001588 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_UART_MspInit+0xc4>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a26      	ldr	r2, [pc, #152]	; (8001594 <HAL_UART_MspInit+0xc4>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_UART_MspInit+0xc4>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_UART_MspInit+0xc4>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001558:	2307      	movs	r3, #7
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	; (8001598 <HAL_UART_MspInit+0xc8>)
 8001564:	f000 faf0 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001578:	2307      	movs	r3, #7
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_UART_MspInit+0xcc>)
 8001584:	f000 fae0 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40011000 	.word	0x40011000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <SysTick_Handler+0x34>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <SysTick_Handler+0x18>
	  Timer1--;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <SysTick_Handler+0x34>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <SysTick_Handler+0x34>)
 80015fe:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <SysTick_Handler+0x38>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <SysTick_Handler+0x2c>
	  Timer2--;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Handler+0x38>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <SysTick_Handler+0x38>)
 8001612:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f942 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200000c4 	.word	0x200000c4
 8001620:	200000c6 	.word	0x200000c6

08001624 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <OTG_FS_IRQHandler+0x10>)
 800162a:	f000 fe95 	bl	8002358 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000788 	.word	0x20000788

08001638 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
  }

  return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fdd3 	bl	8001238 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf1      	blt.n	8001684 <_write+0x12>
  }
  return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_close>:

int _close(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	605a      	str	r2, [r3, #4]
  return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_isatty>:

int _isatty(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f00a f814 	bl	800b770 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20020000 	.word	0x20020000
 8001774:	00000400 	.word	0x00000400
 8001778:	20000168 	.word	0x20000168
 800177c:	20000aa0 	.word	0x20000aa0

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f009 ffd3 	bl	800b77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fb9f 	bl	8000f18 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80017e8:	0800cf1c 	.word	0x0800cf1c
  ldr r2, =_sbss
 80017ec:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80017f0:	20000a9c 	.word	0x20000a9c

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f94f 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fde0 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f967 	bl	8001b2e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f92f 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000004 	.word	0x20000004
 8001894:	2000000c 	.word	0x2000000c
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	2000016c 	.word	0x2000016c

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000016c 	.word	0x2000016c

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000000c 	.word	0x2000000c

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff29 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff3e 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff31 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e159      	b.n	8001e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8148 	bne.w	8001e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d005      	beq.n	8001b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d130      	bne.n	8001bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 0201 	and.w	r2, r3, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d017      	beq.n	8001c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d123      	bne.n	8001c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3208      	adds	r2, #8
 8001c86:	69b9      	ldr	r1, [r7, #24]
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a2 	beq.w	8001e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <HAL_GPIO_Init+0x2e8>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cea:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x2f0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x202>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_GPIO_Init+0x2f4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x1fe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a47      	ldr	r2, [pc, #284]	; (8001e40 <HAL_GPIO_Init+0x2f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x1fa>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a46      	ldr	r2, [pc, #280]	; (8001e44 <HAL_GPIO_Init+0x2fc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x1f6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <HAL_GPIO_Init+0x300>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x1f2>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x204>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x2ec>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a2f      	ldr	r2, [pc, #188]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	; (8001e4c <HAL_GPIO_Init+0x304>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f aea2 	bls.w	8001b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e6c:	e003      	b.n	8001e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	041a      	lsls	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e84:	b08f      	sub	sp, #60	; 0x3c
 8001e86:	af0a      	add	r7, sp, #40	; 0x28
 8001e88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e054      	b.n	8001f3e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f009 f9b4 	bl	800b21c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f8de 	bl	8005094 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	687e      	ldr	r6, [r7, #4]
 8001ee0:	466d      	mov	r5, sp
 8001ee2:	f106 0410 	add.w	r4, r6, #16
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef6:	1d33      	adds	r3, r6, #4
 8001ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f003 f858 	bl	8004fb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f8d5 	bl	80050b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	687e      	ldr	r6, [r7, #4]
 8001f14:	466d      	mov	r5, sp
 8001f16:	f106 0410 	add.w	r4, r6, #16
 8001f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f2a:	1d33      	adds	r3, r6, #4
 8001f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f003 fa5e 	bl	80053f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f46 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b089      	sub	sp, #36	; 0x24
 8001f4a:	af04      	add	r7, sp, #16
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	70fb      	strb	r3, [r7, #3]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70bb      	strb	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_HCD_HC_Init+0x28>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e076      	b.n	800205c <HAL_HCD_HC_Init+0x116>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	333d      	adds	r3, #61	; 0x3d
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3338      	adds	r3, #56	; 0x38
 8001f96:	787a      	ldrb	r2, [r7, #1]
 8001f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3340      	adds	r3, #64	; 0x40
 8001fa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001faa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3339      	adds	r3, #57	; 0x39
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	333f      	adds	r3, #63	; 0x3f
 8001fcc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001fd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	78ba      	ldrb	r2, [r7, #2]
 8001fd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fda:	b2d0      	uxtb	r0, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	333a      	adds	r3, #58	; 0x3a
 8001fe8:	4602      	mov	r2, r0
 8001fea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001fec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da09      	bge.n	8002008 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	333b      	adds	r3, #59	; 0x3b
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e008      	b.n	800201a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	333b      	adds	r3, #59	; 0x3b
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	333c      	adds	r3, #60	; 0x3c
 8002028:	f897 2020 	ldrb.w	r2, [r7, #32]
 800202c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	787c      	ldrb	r4, [r7, #1]
 8002034:	78ba      	ldrb	r2, [r7, #2]
 8002036:	78f9      	ldrb	r1, [r7, #3]
 8002038:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800203a:	9302      	str	r3, [sp, #8]
 800203c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4623      	mov	r3, r4
 800204a:	f003 fb57 	bl	80056fc <USB_HC_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bd90      	pop	{r4, r7, pc}

08002064 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_HCD_HC_Halt+0x1e>
 800207e:	2302      	movs	r3, #2
 8002080:	e00f      	b.n	80020a2 <HAL_HCD_HC_Halt+0x3e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fda7 	bl	8005be6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	70fb      	strb	r3, [r7, #3]
 80020be:	460b      	mov	r3, r1
 80020c0:	70bb      	strb	r3, [r7, #2]
 80020c2:	4613      	mov	r3, r2
 80020c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	333b      	adds	r3, #59	; 0x3b
 80020d4:	78ba      	ldrb	r2, [r7, #2]
 80020d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	333f      	adds	r3, #63	; 0x3f
 80020e6:	787a      	ldrb	r2, [r7, #1]
 80020e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020ea:	7c3b      	ldrb	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d112      	bne.n	8002116 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3342      	adds	r3, #66	; 0x42
 80020fe:	2203      	movs	r2, #3
 8002100:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	333d      	adds	r3, #61	; 0x3d
 8002110:	7f3a      	ldrb	r2, [r7, #28]
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e008      	b.n	8002128 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3342      	adds	r3, #66	; 0x42
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b03      	cmp	r3, #3
 800212c:	f200 80c6 	bhi.w	80022bc <HAL_HCD_HC_SubmitRequest+0x210>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	080022a9 	.word	0x080022a9
 8002140:	080021ad 	.word	0x080021ad
 8002144:	0800222b 	.word	0x0800222b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002148:	7c3b      	ldrb	r3, [r7, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	f040 80b8 	bne.w	80022c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80b4 	bne.w	80022c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002158:	8b3b      	ldrh	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d108      	bne.n	8002170 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3355      	adds	r3, #85	; 0x55
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3355      	adds	r3, #85	; 0x55
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3342      	adds	r3, #66	; 0x42
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002196:	e093      	b.n	80022c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2202      	movs	r2, #2
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e089      	b.n	80022c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021ac:	78bb      	ldrb	r3, [r7, #2]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11d      	bne.n	80021ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3355      	adds	r3, #85	; 0x55
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3342      	adds	r3, #66	; 0x42
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80021d8:	e073      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3342      	adds	r3, #66	; 0x42
 80021e8:	2202      	movs	r2, #2
 80021ea:	701a      	strb	r2, [r3, #0]
      break;
 80021ec:	e069      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3354      	adds	r3, #84	; 0x54
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3342      	adds	r3, #66	; 0x42
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
      break;
 8002214:	e055      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3342      	adds	r3, #66	; 0x42
 8002224:	2202      	movs	r2, #2
 8002226:	701a      	strb	r2, [r3, #0]
      break;
 8002228:	e04b      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800222a:	78bb      	ldrb	r3, [r7, #2]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11d      	bne.n	800226c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3355      	adds	r3, #85	; 0x55
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d109      	bne.n	8002258 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3342      	adds	r3, #66	; 0x42
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002256:	e034      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3342      	adds	r3, #66	; 0x42
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
      break;
 800226a:	e02a      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3354      	adds	r3, #84	; 0x54
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3342      	adds	r3, #66	; 0x42
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      break;
 8002292:	e016      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
      break;
 80022a6:	e00c      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3342      	adds	r3, #66	; 0x42
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80022bc:	bf00      	nop
 80022be:	e000      	b.n	80022c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80022c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	3344      	adds	r3, #68	; 0x44
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	8b3a      	ldrh	r2, [r7, #24]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	202c      	movs	r0, #44	; 0x2c
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	440b      	add	r3, r1
 80022e2:	334c      	adds	r3, #76	; 0x4c
 80022e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3350      	adds	r3, #80	; 0x50
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3339      	adds	r3, #57	; 0x39
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3361      	adds	r3, #97	; 0x61
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	222c      	movs	r2, #44	; 0x2c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	3338      	adds	r3, #56	; 0x38
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	18d1      	adds	r1, r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	f003 fafa 	bl	8005940 <USB_HC_StartXfer>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop

08002358 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fffb 	bl	800536a <USB_GetMode>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	f040 80f6 	bne.w	8002568 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f002 ffdf 	bl	8005344 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80ec 	beq.w	8002566 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f002 ffd6 	bl	8005344 <USB_ReadInterrupts>
 8002398:	4603      	mov	r3, r0
 800239a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023a2:	d104      	bne.n	80023ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80023ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 ffc6 	bl	8005344 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023c2:	d104      	bne.n	80023ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 ffb6 	bl	8005344 <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e2:	d104      	bne.n	80023ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 ffa6 	bl	8005344 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d103      	bne.n	800240a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2202      	movs	r2, #2
 8002408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ff98 	bl	8005344 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800241a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241e:	d11c      	bne.n	800245a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002428:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800243a:	2110      	movs	r1, #16
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f002 fe87 	bl	8005150 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002442:	6938      	ldr	r0, [r7, #16]
 8002444:	f002 feb8 	bl	80051b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f003 f88e 	bl	8005570 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f008 ff5f 	bl	800b318 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 ff70 	bl	8005344 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246e:	d102      	bne.n	8002476 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f001 f89e 	bl	80035b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 ff62 	bl	8005344 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b08      	cmp	r3, #8
 8002488:	d106      	bne.n	8002498 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f008 ff28 	bl	800b2e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 ff51 	bl	8005344 <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d101      	bne.n	80024b0 <HAL_HCD_IRQHandler+0x158>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_HCD_IRQHandler+0x15a>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0210 	bic.w	r2, r2, #16
 80024c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 ffa1 	bl	800340e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0210 	orr.w	r2, r2, #16
 80024da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 ff2f 	bl	8005344 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024f0:	d13a      	bne.n	8002568 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fb64 	bl	8005bc4 <USB_HC_ReadInterrupt>
 80024fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e025      	b.n	8002550 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d018      	beq.n	800254a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252e:	d106      	bne.n	800253e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	4619      	mov	r1, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f8ab 	bl	8002692 <HCD_HC_IN_IRQHandler>
 800253c:	e005      	b.n	800254a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fbf9 	bl	8002d3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	429a      	cmp	r2, r3
 8002558:	d3d4      	bcc.n	8002504 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	e000      	b.n	8002568 <HAL_HCD_IRQHandler+0x210>
      return;
 8002566:	bf00      	nop
    }
  }
}
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_HCD_Start+0x16>
 8002580:	2302      	movs	r3, #2
 8002582:	e013      	b.n	80025ac <HAL_HCD_Start+0x3e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f850 	bl	8005638 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fd68 	bl	8005072 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_HCD_Stop+0x16>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e00d      	b.n	80025e6 <HAL_HCD_Stop+0x32>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fc3e 	bl	8005e58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fff2 	bl	80055e4 <USB_ResetPort>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	781b      	ldrb	r3, [r3, #0]
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3350      	adds	r3, #80	; 0x50
 800264c:	681b      	ldr	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f003 f836 	bl	80056d8 <USB_GetCurrentFrame>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 f811 	bl	80056aa <USB_GetHostSpeed>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d11a      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	2304      	movs	r3, #4
 80026d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3361      	adds	r3, #97	; 0x61
 80026e2:	2206      	movs	r2, #6
 80026e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 fa78 	bl	8005be6 <USB_HC_Halt>
 80026f6:	e0af      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d11b      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002722:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3361      	adds	r3, #97	; 0x61
 8002732:	2207      	movs	r2, #7
 8002734:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fa50 	bl	8005be6 <USB_HC_Halt>
 8002746:	e087      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d109      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2320      	movs	r3, #32
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	e072      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d11a      	bne.n	80027be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2308      	movs	r3, #8
 8002798:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3361      	adds	r3, #97	; 0x61
 80027a8:	2205      	movs	r2, #5
 80027aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fa15 	bl	8005be6 <USB_HC_Halt>
 80027bc:	e04c      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d4:	d11b      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3361      	adds	r3, #97	; 0x61
 80027f8:	2208      	movs	r2, #8
 80027fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f003 f9ed 	bl	8005be6 <USB_HC_Halt>
 800280c:	e024      	b.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d119      	bne.n	8002858 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3361      	adds	r3, #97	; 0x61
 8002844:	2206      	movs	r2, #6
 8002846:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f9c7 	bl	8005be6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286e:	d112      	bne.n	8002896 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f003 f9b3 	bl	8005be6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002892:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002894:	e24e      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 80df 	bne.w	8002a6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3348      	adds	r3, #72	; 0x48
 80028c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0159      	lsls	r1, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80028d8:	1ad2      	subs	r2, r2, r3
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f303 	mul.w	r3, r0, r3
 80028e4:	440b      	add	r3, r1
 80028e6:	3350      	adds	r3, #80	; 0x50
 80028e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3361      	adds	r3, #97	; 0x61
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	335c      	adds	r3, #92	; 0x5c
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2301      	movs	r3, #1
 800291e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	333f      	adds	r3, #63	; 0x3f
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	333f      	adds	r3, #63	; 0x3f
 8002942:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002944:	2b02      	cmp	r3, #2
 8002946:	d111      	bne.n	800296c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f003 f947 	bl	8005be6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2310      	movs	r3, #16
 8002968:	6093      	str	r3, [r2, #8]
 800296a:	e03a      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	333f      	adds	r3, #63	; 0x3f
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d009      	beq.n	8002994 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	333f      	adds	r3, #63	; 0x3f
 800298e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002990:	2b01      	cmp	r3, #1
 8002992:	d126      	bne.n	80029e2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3360      	adds	r3, #96	; 0x60
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	202c      	movs	r0, #44	; 0x2c
 80029d0:	fb00 f303 	mul.w	r3, r0, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3360      	adds	r3, #96	; 0x60
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f008 fca9 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12b      	bne.n	8002a42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3348      	adds	r3, #72	; 0x48
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	202c      	movs	r0, #44	; 0x2c
 8002a00:	fb00 f202 	mul.w	r2, r0, r2
 8002a04:	440a      	add	r2, r1
 8002a06:	3240      	adds	r2, #64	; 0x40
 8002a08:	8812      	ldrh	r2, [r2, #0]
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 818e 	beq.w	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3354      	adds	r3, #84	; 0x54
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f083 0301 	eor.w	r3, r3, #1
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3354      	adds	r3, #84	; 0x54
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	701a      	strb	r2, [r3, #0]
}
 8002a40:	e178      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f083 0301 	eor.w	r3, r3, #1
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3354      	adds	r3, #84	; 0x54
 8002a66:	4602      	mov	r2, r0
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	e163      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	f040 80f6 	bne.w	8002c70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d109      	bne.n	8002aac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3360      	adds	r3, #96	; 0x60
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e0c9      	b.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3361      	adds	r3, #97	; 0x61
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d109      	bne.n	8002ad4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	2205      	movs	r2, #5
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e0b5      	b.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3361      	adds	r3, #97	; 0x61
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d009      	beq.n	8002afc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	3361      	adds	r3, #97	; 0x61
 8002af6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d150      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	202c      	movs	r0, #44	; 0x2c
 8002b14:	fb00 f303 	mul.w	r3, r0, r3
 8002b18:	440b      	add	r3, r1
 8002b1a:	335c      	adds	r3, #92	; 0x5c
 8002b1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d912      	bls.n	8002b58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	2204      	movs	r2, #4
 8002b54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b56:	e073      	b.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	2202      	movs	r2, #2
 8002b68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b9c:	e050      	b.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3361      	adds	r3, #97	; 0x61
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d122      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002be2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e023      	b.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3361      	adds	r3, #97	; 0x61
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d119      	bne.n	8002c40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	fb01 f303 	mul.w	r3, r1, r3
 8002c16:	4413      	add	r3, r2
 8002c18:	335c      	adds	r3, #92	; 0x5c
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	202c      	movs	r0, #44	; 0x2c
 8002c24:	fb00 f303 	mul.w	r3, r0, r3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2302      	movs	r3, #2
 8002c50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	b2d9      	uxtb	r1, r3
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	202c      	movs	r0, #44	; 0x2c
 8002c5c:	fb00 f303 	mul.w	r3, r0, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3360      	adds	r3, #96	; 0x60
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f008 fb63 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c6e:	e061      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d156      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	333f      	adds	r3, #63	; 0x3f
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d111      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 ff95 	bl	8005be6 <USB_HC_Halt>
 8002cbc:	e031      	b.n	8002d22 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	333f      	adds	r3, #63	; 0x3f
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	333f      	adds	r3, #63	; 0x3f
 8002ce0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d11d      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d110      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3361      	adds	r3, #97	; 0x61
 8002d0e:	2203      	movs	r2, #3
 8002d10:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 ff62 	bl	8005be6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2310      	movs	r3, #16
 8002d32:	6093      	str	r3, [r2, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d11a      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3361      	adds	r3, #97	; 0x61
 8002d8c:	2206      	movs	r2, #6
 8002d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 ff23 	bl	8005be6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002da0:	e331      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d12e      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	333d      	adds	r3, #61	; 0x3d
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	f040 8313 	bne.w	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	333d      	adds	r3, #61	; 0x3d
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fee9 	bl	8005be6 <USB_HC_Halt>
}
 8002e14:	e2f7      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2c:	d112      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 feca 	bl	8005be6 <USB_HC_Halt>
}
 8002e52:	e2d8      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d140      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d111      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	333d      	adds	r3, #61	; 0x3d
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3361      	adds	r3, #97	; 0x61
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fe7e 	bl	8005be6 <USB_HC_Halt>
}
 8002eea:	e28c      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d12c      	bne.n	8002f5c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3361      	adds	r3, #97	; 0x61
 8002f10:	2204      	movs	r2, #4
 8002f12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	333d      	adds	r3, #61	; 0x3d
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	335c      	adds	r3, #92	; 0x5c
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fe4f 	bl	8005be6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2340      	movs	r3, #64	; 0x40
 8002f58:	6093      	str	r3, [r2, #8]
}
 8002f5a:	e254      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d11a      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2308      	movs	r3, #8
 8002f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3361      	adds	r3, #97	; 0x61
 8002f92:	2205      	movs	r2, #5
 8002f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fe20 	bl	8005be6 <USB_HC_Halt>
}
 8002fa6:	e22e      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d140      	bne.n	8003040 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	335c      	adds	r3, #92	; 0x5c
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3361      	adds	r3, #97	; 0x61
 8002fde:	2203      	movs	r2, #3
 8002fe0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	333d      	adds	r3, #61	; 0x3d
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d112      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	333c      	adds	r3, #60	; 0x3c
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d108      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	333d      	adds	r3, #61	; 0x3d
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f002 fddd 	bl	8005be6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2310      	movs	r3, #16
 800303c:	6093      	str	r3, [r2, #8]
}
 800303e:	e1e2      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d164      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d111      	bne.n	8003082 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	2206      	movs	r2, #6
 800306e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fdb3 	bl	8005be6 <USB_HC_Halt>
 8003080:	e044      	b.n	800310c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	335c      	adds	r3, #92	; 0x5c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	202c      	movs	r0, #44	; 0x2c
 800309a:	fb00 f303 	mul.w	r3, r0, r3
 800309e:	440b      	add	r3, r1
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d920      	bls.n	80030fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	335c      	adds	r3, #92	; 0x5c
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	2204      	movs	r2, #4
 80030da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	202c      	movs	r0, #44	; 0x2c
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3360      	adds	r3, #96	; 0x60
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f008 f91e 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f8:	e008      	b.n	800310c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3360      	adds	r3, #96	; 0x60
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	6093      	str	r3, [r2, #8]
}
 800311e:	e172      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d11b      	bne.n	8003170 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3361      	adds	r3, #97	; 0x61
 8003146:	2208      	movs	r2, #8
 8003148:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fd46 	bl	8005be6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	461a      	mov	r2, r3
 8003168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316c:	6093      	str	r3, [r2, #8]
}
 800316e:	e14a      	b.n	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	f040 813f 	bne.w	8003406 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3361      	adds	r3, #97	; 0x61
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d17d      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333f      	adds	r3, #63	; 0x3f
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d00a      	beq.n	80031d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333f      	adds	r3, #63	; 0x3f
 80031d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f040 8100 	bne.w	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d113      	bne.n	8003208 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3355      	adds	r3, #85	; 0x55
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f083 0301 	eor.w	r3, r3, #1
 80031f4:	b2d8      	uxtb	r0, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3355      	adds	r3, #85	; 0x55
 8003204:	4602      	mov	r2, r0
 8003206:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 80e3 	bne.w	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	334c      	adds	r3, #76	; 0x4c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80d8 	beq.w	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	334c      	adds	r3, #76	; 0x4c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	202c      	movs	r0, #44	; 0x2c
 800323e:	fb00 f202 	mul.w	r2, r0, r2
 8003242:	440a      	add	r2, r1
 8003244:	3240      	adds	r2, #64	; 0x40
 8003246:	8812      	ldrh	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	3b01      	subs	r3, #1
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	202c      	movs	r0, #44	; 0x2c
 8003252:	fb00 f202 	mul.w	r2, r0, r2
 8003256:	440a      	add	r2, r1
 8003258:	3240      	adds	r2, #64	; 0x40
 800325a:	8812      	ldrh	r2, [r2, #0]
 800325c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80b5 	beq.w	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3355      	adds	r3, #85	; 0x55
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f083 0301 	eor.w	r3, r3, #1
 8003282:	b2d8      	uxtb	r0, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3355      	adds	r3, #85	; 0x55
 8003292:	4602      	mov	r2, r0
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e09f      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d109      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3360      	adds	r3, #96	; 0x60
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e08b      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3361      	adds	r3, #97	; 0x61
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d109      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3360      	adds	r3, #96	; 0x60
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e077      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3361      	adds	r3, #97	; 0x61
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d109      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3360      	adds	r3, #96	; 0x60
 800330a:	2205      	movs	r2, #5
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e063      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	212c      	movs	r1, #44	; 0x2c
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	3361      	adds	r3, #97	; 0x61
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b06      	cmp	r3, #6
 8003322:	d009      	beq.n	8003338 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	212c      	movs	r1, #44	; 0x2c
 800332a:	fb01 f303 	mul.w	r3, r1, r3
 800332e:	4413      	add	r3, r2
 8003330:	3361      	adds	r3, #97	; 0x61
 8003332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003334:	2b08      	cmp	r3, #8
 8003336:	d14f      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	335c      	adds	r3, #92	; 0x5c
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	202c      	movs	r0, #44	; 0x2c
 8003350:	fb00 f303 	mul.w	r3, r0, r3
 8003354:	440b      	add	r3, r1
 8003356:	335c      	adds	r3, #92	; 0x5c
 8003358:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	335c      	adds	r3, #92	; 0x5c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d912      	bls.n	8003394 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	335c      	adds	r3, #92	; 0x5c
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3360      	adds	r3, #96	; 0x60
 800338e:	2204      	movs	r2, #4
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e021      	b.n	80033d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	461a      	mov	r2, r3
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2302      	movs	r3, #2
 80033e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	b2d9      	uxtb	r1, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	202c      	movs	r0, #44	; 0x2c
 80033f4:	fb00 f303 	mul.w	r3, r0, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3360      	adds	r3, #96	; 0x60
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f007 ff97 	bl	800b334 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	; 0x28
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	0c5b      	lsrs	r3, r3, #17
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d004      	beq.n	8003454 <HCD_RXQLVL_IRQHandler+0x46>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b05      	cmp	r3, #5
 800344e:	f000 80a9 	beq.w	80035a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003452:	e0aa      	b.n	80035aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a6 	beq.w	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3344      	adds	r3, #68	; 0x44
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 809b 	beq.w	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3350      	adds	r3, #80	; 0x50
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	441a      	add	r2, r3
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	202c      	movs	r0, #44	; 0x2c
 800348c:	fb00 f303 	mul.w	r3, r0, r3
 8003490:	440b      	add	r3, r1
 8003492:	334c      	adds	r3, #76	; 0x4c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d87a      	bhi.n	8003590 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3344      	adds	r3, #68	; 0x44
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	b292      	uxth	r2, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f001 feee 	bl	8005294 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3344      	adds	r3, #68	; 0x44
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	441a      	add	r2, r3
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	202c      	movs	r0, #44	; 0x2c
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	440b      	add	r3, r1
 80034d8:	3344      	adds	r3, #68	; 0x44
 80034da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3350      	adds	r3, #80	; 0x50
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	441a      	add	r2, r3
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	202c      	movs	r0, #44	; 0x2c
 80034f6:	fb00 f303 	mul.w	r3, r0, r3
 80034fa:	440b      	add	r3, r1
 80034fc:	3350      	adds	r3, #80	; 0x50
 80034fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	0cdb      	lsrs	r3, r3, #19
 8003510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003514:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3340      	adds	r3, #64	; 0x40
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4293      	cmp	r3, r2
 800352c:	d13c      	bne.n	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d039      	beq.n	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800354a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003552:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3354      	adds	r3, #84	; 0x54
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	f083 0301 	eor.w	r3, r3, #1
 800357a:	b2d8      	uxtb	r0, r3
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3354      	adds	r3, #84	; 0x54
 800358a:	4602      	mov	r2, r0
 800358c:	701a      	strb	r2, [r3, #0]
      break;
 800358e:	e00b      	b.n	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3360      	adds	r3, #96	; 0x60
 800359e:	2204      	movs	r2, #4
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	e001      	b.n	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035a8:	bf00      	nop
  }
}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d10b      	bne.n	8003602 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f007 fe81 	bl	800b2fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d132      	bne.n	8003672 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d126      	bne.n	800366c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d113      	bne.n	800364e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800362c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003630:	d106      	bne.n	8003640 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f001 ff99 	bl	8005570 <USB_InitFSLSPClkSel>
 800363e:	e011      	b.n	8003664 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f001 ff92 	bl	8005570 <USB_InitFSLSPClkSel>
 800364c:	e00a      	b.n	8003664 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d106      	bne.n	8003664 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800365c:	461a      	mov	r2, r3
 800365e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003662:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f007 fe73 	bl	800b350 <HAL_HCD_PortEnabled_Callback>
 800366a:	e002      	b.n	8003672 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f007 fe7d 	bl	800b36c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b20      	cmp	r3, #32
 800367a:	d103      	bne.n	8003684 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f043 0320 	orr.w	r3, r3, #32
 8003682:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6013      	str	r3, [r2, #0]
}
 8003690:	bf00      	nop
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e267      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d075      	beq.n	80037a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	4b88      	ldr	r3, [pc, #544]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d00c      	beq.n	80036dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b82      	ldr	r3, [pc, #520]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d10b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d157      	bne.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e242      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x74>
 80036fe:	4b76      	ldr	r3, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a75      	ldr	r2, [pc, #468]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x98>
 8003716:	4b70      	ldr	r3, [pc, #448]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a6f      	ldr	r2, [pc, #444]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6c      	ldr	r2, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 8003730:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a65      	ldr	r2, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe f8b8 	bl	80018c4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe f8b4 	bl	80018c4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e207      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xc0>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe f8a4 	bl	80018c4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe f8a0 	bl	80018c4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1f3      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b51      	ldr	r3, [pc, #324]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1c7      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4937      	ldr	r1, [pc, #220]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x244>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe f859 	bl	80018c4 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003816:	f7fe f855 	bl	80018c4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1a8      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4925      	ldr	r1, [pc, #148]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x244>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f838 	bl	80018c4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003858:	f7fe f834 	bl	80018c4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e187      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d036      	beq.n	80038f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x248>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe f818 	bl	80018c4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe f814 	bl	80018c4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e167      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x200>
 80038b6:	e01b      	b.n	80038f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x248>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe f801 	bl	80018c4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e00e      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fd fffd 	bl	80018c4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d907      	bls.n	80038e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e150      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
 80038d8:	40023800 	.word	0x40023800
 80038dc:	42470000 	.word	0x42470000
 80038e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1ea      	bne.n	80038c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8097 	beq.w	8003a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003902:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b7a      	ldr	r3, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393a:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a73      	ldr	r2, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7fd ffbd 	bl	80018c4 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fd ffb9 	bl	80018c4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e10c      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x474>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d106      	bne.n	8003982 <HAL_RCC_OscConfig+0x2ea>
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	e01c      	b.n	80039bc <HAL_RCC_OscConfig+0x324>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b05      	cmp	r3, #5
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x30c>
 800398a:	4b5f      	ldr	r3, [pc, #380]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5e      	ldr	r2, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5b      	ldr	r2, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0x324>
 80039a4:	4b58      	ldr	r3, [pc, #352]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a57      	ldr	r2, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a54      	ldr	r2, [pc, #336]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0304 	bic.w	r3, r3, #4
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fd ff7e 	bl	80018c4 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039cc:	f7fd ff7a 	bl	80018c4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0cb      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ee      	beq.n	80039cc <HAL_RCC_OscConfig+0x334>
 80039ee:	e014      	b.n	8003a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f0:	f7fd ff68 	bl	80018c4 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fd ff64 	bl	80018c4 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0b5      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1ee      	bne.n	80039f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a20:	4b39      	ldr	r3, [pc, #228]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a1 	beq.w	8003b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a36:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d05c      	beq.n	8003afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d141      	bne.n	8003ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fd ff38 	bl	80018c4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fd ff34 	bl	80018c4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e087      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	491b      	ldr	r1, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fd ff0d 	bl	80018c4 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fd ff09 	bl	80018c4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e05c      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x416>
 8003acc:	e054      	b.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCC_OscConfig+0x478>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fef6 	bl	80018c4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fd fef2 	bl	80018c4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e045      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_OscConfig+0x470>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x444>
 8003afa:	e03d      	b.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e038      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d028      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d121      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d11a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fd fe24 	bl	80018c4 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fd fe20 	bl	80018c4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fd84 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	0800ca1c 	.word	0x0800ca1c
 8003d4c:	20000004 	.word	0x20000004
 8003d50:	20000008 	.word	0x20000008

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b094      	sub	sp, #80	; 0x50
 8003d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d60:	2300      	movs	r3, #0
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d64:	2300      	movs	r3, #0
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6c:	4b79      	ldr	r3, [pc, #484]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x40>
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	f200 80e1 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x34>
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d003      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d86:	e0db      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d88:	4b73      	ldr	r3, [pc, #460]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d8c:	e0db      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8e:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d92:	e0d8      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d063      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003daa:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	2200      	movs	r2, #0
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd8:	0150      	lsls	r0, r2, #5
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4621      	mov	r1, r4
 8003de0:	1a51      	subs	r1, r2, r1
 8003de2:	6139      	str	r1, [r7, #16]
 8003de4:	4629      	mov	r1, r5
 8003de6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003df8:	4659      	mov	r1, fp
 8003dfa:	018b      	lsls	r3, r1, #6
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e02:	4651      	mov	r1, sl
 8003e04:	018a      	lsls	r2, r1, #6
 8003e06:	4651      	mov	r1, sl
 8003e08:	ebb2 0801 	subs.w	r8, r2, r1
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e26:	4690      	mov	r8, r2
 8003e28:	4699      	mov	r9, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	eb18 0303 	adds.w	r3, r8, r3
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	462b      	mov	r3, r5
 8003e34:	eb49 0303 	adc.w	r3, r9, r3
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e46:	4629      	mov	r1, r5
 8003e48:	024b      	lsls	r3, r1, #9
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e50:	4621      	mov	r1, r4
 8003e52:	024a      	lsls	r2, r1, #9
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e64:	f7fc fa0c 	bl	8000280 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e70:	e058      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e82:	623b      	str	r3, [r7, #32]
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
 8003e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	464b      	mov	r3, r9
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9e:	0150      	lsls	r0, r2, #5
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	00eb      	lsls	r3, r5, #3
 8003ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eda:	00e2      	lsls	r2, r4, #3
 8003edc:	4614      	mov	r4, r2
 8003ede:	461d      	mov	r5, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	18e3      	adds	r3, r4, r3
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	eb45 0303 	adc.w	r3, r5, r3
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efa:	4629      	mov	r1, r5
 8003efc:	028b      	lsls	r3, r1, #10
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f04:	4621      	mov	r1, r4
 8003f06:	028a      	lsls	r2, r1, #10
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	61fa      	str	r2, [r7, #28]
 8003f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f18:	f7fc f9b2 	bl	8000280 <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3750      	adds	r7, #80	; 0x50
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800ca2c 	.word	0x0800ca2c

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800ca2c 	.word	0x0800ca2c

08003fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07b      	b.n	80040d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fea:	d009      	beq.n	8004000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
 8003ff2:	e005      	b.n	8004000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fa10 	bl	8001440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	ea42 0103 	orr.w	r1, r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0104 	and.w	r1, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0210 	and.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b088      	sub	sp, #32
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_SPI_Transmit+0x22>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e126      	b.n	800434a <HAL_SPI_Transmit+0x270>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004104:	f7fd fbde 	bl	80018c4 <HAL_GetTick>
 8004108:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800411e:	e10b      	b.n	8004338 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_Transmit+0x52>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004130:	e102      	b.n	8004338 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004178:	d10f      	bne.n	800419a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004188:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004198:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d007      	beq.n	80041b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c0:	d14b      	bne.n	800425a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_SPI_Transmit+0xf6>
 80041ca:	8afb      	ldrh	r3, [r7, #22]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d13e      	bne.n	800424e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041f4:	e02b      	b.n	800424e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d112      	bne.n	800422a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	881a      	ldrh	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	86da      	strh	r2, [r3, #54]	; 0x36
 8004228:	e011      	b.n	800424e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422a:	f7fd fb4b 	bl	80018c4 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d803      	bhi.n	8004242 <HAL_SPI_Transmit+0x168>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d102      	bne.n	8004248 <HAL_SPI_Transmit+0x16e>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800424c:	e074      	b.n	8004338 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ce      	bne.n	80041f6 <HAL_SPI_Transmit+0x11c>
 8004258:	e04c      	b.n	80042f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_SPI_Transmit+0x18e>
 8004262:	8afb      	ldrh	r3, [r7, #22]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d140      	bne.n	80042ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	7812      	ldrb	r2, [r2, #0]
 8004274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800428e:	e02c      	b.n	80042ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d113      	bne.n	80042c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	330c      	adds	r3, #12
 80042a8:	7812      	ldrb	r2, [r2, #0]
 80042aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80042c4:	e011      	b.n	80042ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c6:	f7fd fafd 	bl	80018c4 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d803      	bhi.n	80042de <HAL_SPI_Transmit+0x204>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Transmit+0x20a>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042e8:	e026      	b.n	8004338 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1cd      	bne.n	8004290 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fa55 	bl	80047a8 <SPI_EndRxTxTransaction>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e000      	b.n	8004338 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004336:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004348:	7ffb      	ldrb	r3, [r7, #31]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08c      	sub	sp, #48	; 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004360:	2301      	movs	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x26>
 8004374:	2302      	movs	r3, #2
 8004376:	e18a      	b.n	800468e <HAL_SPI_TransmitReceive+0x33c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004380:	f7fd faa0 	bl	80018c4 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004396:	887b      	ldrh	r3, [r7, #2]
 8004398:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800439a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00f      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x70>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a8:	d107      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x68>
 80043b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d003      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043c0:	e15b      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x82>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x82>
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043da:	e14e      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d003      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2205      	movs	r2, #5
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	887a      	ldrh	r2, [r7, #2]
 8004406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	887a      	ldrh	r2, [r7, #2]
 8004412:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d007      	beq.n	8004444 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d178      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_TransmitReceive+0x10a>
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d166      	bne.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004480:	e053      	b.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11b      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d113      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <HAL_SPI_TransmitReceive+0x1b8>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d014      	beq.n	800450a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	b292      	uxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004506:	2301      	movs	r3, #1
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800450a:	f7fd f9db 	bl	80018c4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004516:	429a      	cmp	r2, r3
 8004518:	d807      	bhi.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d003      	beq.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004528:	e0a7      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1a6      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x130>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1a1      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x130>
 800453e:	e07c      	b.n	800463a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SPI_TransmitReceive+0x1fc>
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d16b      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004574:	e057      	b.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d11c      	bne.n	80045be <HAL_SPI_TransmitReceive+0x26c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d017      	beq.n	80045be <HAL_SPI_TransmitReceive+0x26c>
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d114      	bne.n	80045be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d119      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x2ae>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d014      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004600:	f7fd f960 	bl	80018c4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_TransmitReceive+0x2c6>
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d102      	bne.n	800461e <HAL_SPI_TransmitReceive+0x2cc>
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004624:	e029      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1a2      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x224>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d19d      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8b2 	bl	80047a8 <SPI_EndRxTxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004656:	e010      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	e000      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004678:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800468e:	4618      	mov	r0, r3
 8004690:	3730      	adds	r7, #48	; 0x30
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046a8:	f7fd f90c 	bl	80018c4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4413      	add	r3, r2
 80046b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046b8:	f7fd f904 	bl	80018c4 <HAL_GetTick>
 80046bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046be:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	015b      	lsls	r3, r3, #5
 80046c4:	0d1b      	lsrs	r3, r3, #20
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	fb02 f303 	mul.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	e054      	b.n	800477a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d050      	beq.n	800477a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d8:	f7fd f8f4 	bl	80018c4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d902      	bls.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d13d      	bne.n	800476a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004706:	d111      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004710:	d004      	beq.n	800471c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471a:	d107      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004734:	d10f      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004754:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e017      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3b01      	subs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d19b      	bne.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000004 	.word	0x20000004

080047a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <SPI_EndRxTxTransaction+0x7c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1b      	ldr	r2, [pc, #108]	; (8004828 <SPI_EndRxTxTransaction+0x80>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0d5b      	lsrs	r3, r3, #21
 80047c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047c4:	fb02 f303 	mul.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d112      	bne.n	80047fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2200      	movs	r2, #0
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff5a 	bl	8004698 <SPI_WaitFlagStateUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e00f      	b.n	800481a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3b01      	subs	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d0f2      	beq.n	80047fa <SPI_EndRxTxTransaction+0x52>
 8004814:	e000      	b.n	8004818 <SPI_EndRxTxTransaction+0x70>
        break;
 8004816:	bf00      	nop
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000004 	.word	0x20000004
 8004828:	165e9f81 	.word	0x165e9f81

0800482c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e03f      	b.n	80048be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fe3c 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800486e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f929 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b08a      	sub	sp, #40	; 0x28
 80048ca:	af02      	add	r7, sp, #8
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d17c      	bne.n	80049e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_UART_Transmit+0x2c>
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e075      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Transmit+0x3e>
 8004900:	2302      	movs	r3, #2
 8004902:	e06e      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2221      	movs	r2, #33	; 0x21
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491a:	f7fc ffd3 	bl	80018c4 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Transmit+0x82>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004958:	e02a      	b.n	80049b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f840 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e036      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004988:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3302      	adds	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e007      	b.n	80049a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1cf      	bne.n	800495a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2140      	movs	r1, #64	; 0x40
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f810 	bl	80049ea <UART_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e006      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b090      	sub	sp, #64	; 0x40
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	e050      	b.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d04c      	beq.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a0a:	f7fc ff5b 	bl	80018c4 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d241      	bcs.n	8004a9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3314      	adds	r3, #20
 8004a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6e:	623a      	str	r2, [r7, #32]
 8004a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	69f9      	ldr	r1, [r7, #28]
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e5      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e00f      	b.n	8004abe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	79fb      	ldrb	r3, [r7, #7]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d09f      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3740      	adds	r7, #64	; 0x40
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b0c0      	sub	sp, #256	; 0x100
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	ea40 0301 	orr.w	r3, r0, r1
 8004af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b20:	f021 010c 	bic.w	r1, r1, #12
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	6999      	ldr	r1, [r3, #24]
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	ea40 0301 	orr.w	r3, r0, r1
 8004b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <UART_SetConfig+0x2cc>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <UART_SetConfig+0xa0>
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8d      	ldr	r3, [pc, #564]	; (8004d98 <UART_SetConfig+0x2d0>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d104      	bne.n	8004b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff fa1a 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b70:	e003      	b.n	8004b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7ff fa01 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8004b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b84:	f040 810c 	bne.w	8004da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	1891      	adds	r1, r2, r2
 8004ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba2:	415b      	adcs	r3, r3
 8004ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004baa:	4621      	mov	r1, r4
 8004bac:	eb12 0801 	adds.w	r8, r2, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0901 	adc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb49 0303 	adc.w	r3, r9, r3
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	18db      	adds	r3, r3, r3
 8004bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c0c:	f7fb fb38 	bl	8000280 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c40:	4641      	mov	r1, r8
 8004c42:	eb12 0a01 	adds.w	sl, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	4692      	mov	sl, r2
 8004c62:	469b      	mov	fp, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca2:	f7fb faed 	bl	8000280 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	; 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd0:	441c      	add	r4, r3
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cec:	415b      	adcs	r3, r3
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d5e:	f7fb fa8f 	bl	8000280 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	; 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3332      	adds	r3, #50	; 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x2d4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d90:	e105      	b.n	8004f9e <UART_SetConfig+0x4d6>
 8004d92:	bf00      	nop
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	6239      	str	r1, [r7, #32]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0501 	adc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004de8:	464b      	mov	r3, r9
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e0e:	4629      	mov	r1, r5
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4621      	mov	r1, r4
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e20:	f7fb fa2e 	bl	8000280 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b60      	ldr	r3, [pc, #384]	; (8004fac <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6139      	str	r1, [r7, #16]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eac:	4649      	mov	r1, r9
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	008a      	lsls	r2, r1, #2
 8004eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ebe:	f7fb f9df 	bl	8000280 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4b39      	ldr	r3, [pc, #228]	; (8004fac <UART_SetConfig+0x4e4>)
 8004ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	2164      	movs	r1, #100	; 0x64
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	3332      	adds	r3, #50	; 0x32
 8004eda:	4a34      	ldr	r2, [pc, #208]	; (8004fac <UART_SetConfig+0x4e4>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee6:	441c      	add	r4, r3
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	464b      	mov	r3, r9
 8004efa:	1891      	adds	r1, r2, r2
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	415b      	adcs	r3, r3
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f06:	4641      	mov	r1, r8
 8004f08:	1851      	adds	r1, r2, r1
 8004f0a:	6039      	str	r1, [r7, #0]
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	414b      	adcs	r3, r1
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f1e:	4659      	mov	r1, fp
 8004f20:	00cb      	lsls	r3, r1, #3
 8004f22:	4651      	mov	r1, sl
 8004f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f28:	4651      	mov	r1, sl
 8004f2a:	00ca      	lsls	r2, r1, #3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4603      	mov	r3, r0
 8004f32:	4642      	mov	r2, r8
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f38:	464b      	mov	r3, r9
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	eb42 0303 	adc.w	r3, r2, r3
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	008b      	lsls	r3, r1, #2
 8004f5e:	4641      	mov	r1, r8
 8004f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f64:	4641      	mov	r1, r8
 8004f66:	008a      	lsls	r2, r1, #2
 8004f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f6c:	f7fb f988 	bl	8000280 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <UART_SetConfig+0x4e4>)
 8004f76:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2164      	movs	r1, #100	; 0x64
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	; 0x32
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <UART_SetConfig+0x4e4>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4422      	add	r2, r4
 8004f9c:	609a      	str	r2, [r3, #8]
}
 8004f9e:	bf00      	nop
 8004fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	f107 001c 	add.w	r0, r7, #28
 8004fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d122      	bne.n	800500e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d105      	bne.n	8005002 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9c0 	bl	8005388 <USB_CoreReset>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e01a      	b.n	8005044 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9b4 	bl	8005388 <USB_CoreReset>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
 8005036:	e005      	b.n	8005044 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10b      	bne.n	8005062 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f043 0206 	orr.w	r2, r3, #6
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800506e:	b004      	add	sp, #16
 8005070:	4770      	bx	lr

08005072 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f043 0201 	orr.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 0201 	bic.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d115      	bne.n	8005104 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f7fc fbf9 	bl	80018dc <HAL_Delay>
      ms++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f93a 	bl	800536a <USB_GetMode>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d01e      	beq.n	800513a <USB_SetCurrentMode+0x84>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b31      	cmp	r3, #49	; 0x31
 8005100:	d9f0      	bls.n	80050e4 <USB_SetCurrentMode+0x2e>
 8005102:	e01a      	b.n	800513a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005116:	2001      	movs	r0, #1
 8005118:	f7fc fbe0 	bl	80018dc <HAL_Delay>
      ms++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f921 	bl	800536a <USB_GetMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <USB_SetCurrentMode+0x84>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b31      	cmp	r3, #49	; 0x31
 8005132:	d9f0      	bls.n	8005116 <USB_SetCurrentMode+0x60>
 8005134:	e001      	b.n	800513a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e005      	b.n	8005146 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b32      	cmp	r3, #50	; 0x32
 800513e:	d101      	bne.n	8005144 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3301      	adds	r3, #1
 8005162:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <USB_FlushTxFifo+0x64>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e01b      	b.n	80051a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	daf2      	bge.n	800515e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	019b      	lsls	r3, r3, #6
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <USB_FlushTxFifo+0x64>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e006      	b.n	80051a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d0f0      	beq.n	8005188 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <USB_FlushRxFifo+0x5c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e018      	b.n	8005208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	daf2      	bge.n	80051c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2210      	movs	r2, #16
 80051e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a08      	ldr	r2, [pc, #32]	; (8005214 <USB_FlushRxFifo+0x5c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e006      	b.n	8005208 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b10      	cmp	r3, #16
 8005204:	d0f0      	beq.n	80051e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	00030d40 	.word	0x00030d40

08005218 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	460b      	mov	r3, r1
 8005228:	71fb      	strb	r3, [r7, #7]
 800522a:	4613      	mov	r3, r2
 800522c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005236:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	d123      	bne.n	8005286 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800523e:	88bb      	ldrh	r3, [r7, #4]
 8005240:	3303      	adds	r3, #3
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e018      	b.n	800527e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	031a      	lsls	r2, r3, #12
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005258:	461a      	mov	r2, r3
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3301      	adds	r3, #1
 8005276:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3301      	adds	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3e2      	bcc.n	800524c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3724      	adds	r7, #36	; 0x24
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005294:	b480      	push	{r7}
 8005296:	b08b      	sub	sp, #44	; 0x2c
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	e014      	b.n	80052ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	3301      	adds	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	3301      	adds	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	3301      	adds	r3, #1
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	3301      	adds	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	3301      	adds	r3, #1
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	6a3a      	ldr	r2, [r7, #32]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3e6      	bcc.n	80052c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052f2:	8bfb      	ldrh	r3, [r7, #30]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01e      	beq.n	8005336 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005302:	461a      	mov	r2, r3
 8005304:	f107 0310 	add.w	r3, r7, #16
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
 8005318:	b2da      	uxtb	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	701a      	strb	r2, [r3, #0]
      i++;
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	3301      	adds	r3, #1
 8005322:	623b      	str	r3, [r7, #32]
      pDest++;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	3301      	adds	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800532a:	8bfb      	ldrh	r3, [r7, #30]
 800532c:	3b01      	subs	r3, #1
 800532e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ea      	bne.n	800530c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005338:	4618      	mov	r0, r3
 800533a:	372c      	adds	r7, #44	; 0x2c
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0301 	and.w	r3, r3, #1
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <USB_CoreReset+0x64>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e01b      	b.n	80053de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	daf2      	bge.n	8005394 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <USB_CoreReset+0x64>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e006      	b.n	80053de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d0f0      	beq.n	80053be <USB_CoreReset+0x36>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	00030d40 	.word	0x00030d40

080053f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053f0:	b084      	sub	sp, #16
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80053fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d018      	beq.n	8005478 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d10a      	bne.n	8005462 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545a:	f043 0304 	orr.w	r3, r3, #4
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e014      	b.n	800548c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e009      	b.n	800548c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005486:	f023 0304 	bic.w	r3, r3, #4
 800548a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800548c:	2110      	movs	r1, #16
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fe5e 	bl	8005150 <USB_FlushTxFifo>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fe8a 	bl	80051b8 <USB_FlushRxFifo>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e015      	b.n	80054e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
 80054c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3301      	adds	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d3e5      	bcc.n	80054b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a13      	ldr	r2, [pc, #76]	; (800555c <USB_HostInit+0x16c>)
 800550e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <USB_HostInit+0x170>)
 8005514:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005518:	e009      	b.n	800552e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <USB_HostInit+0x174>)
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a0f      	ldr	r2, [pc, #60]	; (8005568 <USB_HostInit+0x178>)
 800552a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f043 0210 	orr.w	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <USB_HostInit+0x17c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	01000200 	.word	0x01000200
 8005560:	00e00300 	.word	0x00e00300
 8005564:	00600080 	.word	0x00600080
 8005568:	004000e0 	.word	0x004000e0
 800556c:	a3200008 	.word	0xa3200008

08005570 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d107      	bne.n	80055c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b8:	461a      	mov	r2, r3
 80055ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055be:	6053      	str	r3, [r2, #4]
 80055c0:	e009      	b.n	80055d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d106      	bne.n	80055d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ce:	461a      	mov	r2, r3
 80055d0:	f241 7370 	movw	r3, #6000	; 0x1770
 80055d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005604:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800560e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005612:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005614:	2064      	movs	r0, #100	; 0x64
 8005616:	f7fc f961 	bl	80018dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005626:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005628:	200a      	movs	r0, #10
 800562a:	f7fc f957 	bl	80018dc <HAL_Delay>

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800565c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <USB_DriveVbus+0x44>
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800567a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005686:	d109      	bne.n	800569c <USB_DriveVbus+0x64>
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	0c5b      	lsrs	r3, r3, #17
 80056c8:	f003 0303 	and.w	r3, r3, #3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	b29b      	uxth	r3, r3
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	4603      	mov	r3, r0
 800570c:	70fb      	strb	r3, [r7, #3]
 800570e:	460b      	mov	r3, r1
 8005710:	70bb      	strb	r3, [r7, #2]
 8005712:	4613      	mov	r3, r2
 8005714:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	461a      	mov	r2, r3
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005732:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005736:	2b03      	cmp	r3, #3
 8005738:	d87e      	bhi.n	8005838 <USB_HC_Init+0x13c>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <USB_HC_Init+0x44>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005751 	.word	0x08005751
 8005744:	080057fb 	.word	0x080057fb
 8005748:	08005751 	.word	0x08005751
 800574c:	080057bd 	.word	0x080057bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	461a      	mov	r2, r3
 800575e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005762:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005764:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da10      	bge.n	800578e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	440a      	add	r2, r1
 8005782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800578c:	e057      	b.n	800583e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d051      	beq.n	800583e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057b8:	60d3      	str	r3, [r2, #12]
      break;
 80057ba:	e040      	b.n	800583e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	461a      	mov	r2, r3
 80057ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80057ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da34      	bge.n	8005842 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057f8:	e023      	b.n	8005842 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	f240 2325 	movw	r3, #549	; 0x225
 800580c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800580e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da17      	bge.n	8005846 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	440a      	add	r2, r1
 800582c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005830:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005834:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005836:	e006      	b.n	8005846 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	77fb      	strb	r3, [r7, #31]
      break;
 800583c:	e004      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <USB_HC_Init+0x14c>
      break;
 8005846:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	440a      	add	r2, r1
 800585e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	2101      	movs	r1, #1
 8005878:	fa01 f303 	lsl.w	r3, r1, r3
 800587c:	6939      	ldr	r1, [r7, #16]
 800587e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005882:	4313      	orrs	r3, r2
 8005884:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005892:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005896:	2b00      	cmp	r3, #0
 8005898:	da03      	bge.n	80058a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e001      	b.n	80058a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff feff 	bl	80056aa <USB_GetHostSpeed>
 80058ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d106      	bne.n	80058c4 <USB_HC_Init+0x1c8>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d003      	beq.n	80058c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e001      	b.n	80058c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	059b      	lsls	r3, r3, #22
 80058cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058d0:	78bb      	ldrb	r3, [r7, #2]
 80058d2:	02db      	lsls	r3, r3, #11
 80058d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058de:	049b      	lsls	r3, r3, #18
 80058e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	0159      	lsls	r1, r3, #5
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	440b      	add	r3, r1
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005904:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005906:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d003      	beq.n	8005916 <USB_HC_Init+0x21a>
 800590e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10f      	bne.n	8005936 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005936:	7ffb      	ldrb	r3, [r7, #31]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800595c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02d      	beq.n	80059c6 <USB_HC_StartXfer+0x86>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	791b      	ldrb	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d129      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d117      	bne.n	80059a8 <USB_HC_StartXfer+0x68>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	79db      	ldrb	r3, [r3, #7]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <USB_HC_StartXfer+0x48>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	79db      	ldrb	r3, [r3, #7]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d10f      	bne.n	80059a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	795b      	ldrb	r3, [r3, #5]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d107      	bne.n	80059c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fa0f 	bl	8005de0 <USB_DoPing>
      return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e0f8      	b.n	8005bb8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d018      	beq.n	8005a00 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	8912      	ldrh	r2, [r2, #8]
 80059d6:	4413      	add	r3, r2
 80059d8:	3b01      	subs	r3, #1
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	8912      	ldrh	r2, [r2, #8]
 80059de:	fbb3 f3f2 	udiv	r3, r3, r2
 80059e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059e6:	8b7b      	ldrh	r3, [r7, #26]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d90b      	bls.n	8005a04 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059ec:	8b7b      	ldrh	r3, [r7, #26]
 80059ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	8912      	ldrh	r2, [r2, #8]
 80059f6:	fb03 f202 	mul.w	r2, r3, r2
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	611a      	str	r2, [r3, #16]
 80059fe:	e001      	b.n	8005a04 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a00:	2301      	movs	r3, #1
 8005a02:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	8912      	ldrh	r2, [r2, #8]
 8005a12:	fb03 f202 	mul.w	r2, r3, r2
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	611a      	str	r2, [r3, #16]
 8005a1a:	e003      	b.n	8005a24 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a2e:	04d9      	lsls	r1, r3, #19
 8005a30:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <USB_HC_StartXfer+0x280>)
 8005a32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	7a9b      	ldrb	r3, [r3, #10]
 8005a3a:	075b      	lsls	r3, r3, #29
 8005a3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	6a39      	ldr	r1, [r7, #32]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68d9      	ldr	r1, [r3, #12]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	460a      	mov	r2, r1
 8005a68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	0151      	lsls	r1, r2, #5
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	440a      	add	r2, r1
 8005a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	7e7b      	ldrb	r3, [r7, #25]
 8005ab2:	075b      	lsls	r3, r3, #29
 8005ab4:	69f9      	ldr	r1, [r7, #28]
 8005ab6:	0148      	lsls	r0, r1, #5
 8005ab8:	6a39      	ldr	r1, [r7, #32]
 8005aba:	4401      	add	r1, r0
 8005abc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ada:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	e003      	b.n	8005af6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e04e      	b.n	8005bb8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	78db      	ldrb	r3, [r3, #3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d149      	bne.n	8005bb6 <USB_HC_StartXfer+0x276>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d045      	beq.n	8005bb6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	79db      	ldrb	r3, [r3, #7]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d830      	bhi.n	8005b94 <USB_HC_StartXfer+0x254>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <USB_HC_StartXfer+0x1f8>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005b49 	.word	0x08005b49
 8005b44:	08005b6d 	.word	0x08005b6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	3303      	adds	r3, #3
 8005b4e:	089b      	lsrs	r3, r3, #2
 8005b50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b52:	8afa      	ldrh	r2, [r7, #22]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d91c      	bls.n	8005b98 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	f043 0220 	orr.w	r2, r3, #32
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b6a:	e015      	b.n	8005b98 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	3303      	adds	r3, #3
 8005b72:	089b      	lsrs	r3, r3, #2
 8005b74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b76:	8afa      	ldrh	r2, [r7, #22]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d90a      	bls.n	8005b9c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b92:	e003      	b.n	8005b9c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b94:	bf00      	nop
 8005b96:	e002      	b.n	8005b9e <USB_HC_StartXfer+0x25e>
        break;
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <USB_HC_StartXfer+0x25e>
        break;
 8005b9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	68d9      	ldr	r1, [r3, #12]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785a      	ldrb	r2, [r3, #1]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2000      	movs	r0, #0
 8005bae:	9000      	str	r0, [sp, #0]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fb31 	bl	8005218 <USB_WritePacket>
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	1ff80000 	.word	0x1ff80000

08005bc4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	b29b      	uxth	r3, r3
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b089      	sub	sp, #36	; 0x24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0c9b      	lsrs	r3, r3, #18
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	0fdb      	lsrs	r3, r3, #31
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d104      	bne.n	8005c40 <USB_HC_Halt+0x5a>
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e0c8      	b.n	8005dd2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <USB_HC_Halt+0x66>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d163      	bne.n	8005d14 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 80ab 	bne.w	8005dd0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d133      	bne.n	8005cee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cd2:	d81d      	bhi.n	8005d10 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cea:	d0ec      	beq.n	8005cc6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cec:	e070      	b.n	8005dd0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d0e:	e05f      	b.n	8005dd0 <USB_HC_Halt+0x1ea>
            break;
 8005d10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d12:	e05d      	b.n	8005dd0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d133      	bne.n	8005dac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d90:	d81d      	bhi.n	8005dce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da8:	d0ec      	beq.n	8005d84 <USB_HC_Halt+0x19e>
 8005daa:	e011      	b.n	8005dd0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e000      	b.n	8005dd0 <USB_HC_Halt+0x1ea>
          break;
 8005dce:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3724      	adds	r7, #36	; 0x24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	04da      	lsls	r2, r3, #19
 8005dfc:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <USB_DoPing+0x74>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	1ff80000 	.word	0x1ff80000

08005e58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff f911 	bl	8005094 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e72:	2110      	movs	r1, #16
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f96b 	bl	8005150 <USB_FlushTxFifo>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff f997 	bl	80051b8 <USB_FlushRxFifo>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e94:	2300      	movs	r3, #0
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	e01f      	b.n	8005eda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ece:	461a      	mov	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b0f      	cmp	r3, #15
 8005ede:	d9dc      	bls.n	8005e9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e034      	b.n	8005f50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005efc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f2c:	d80c      	bhi.n	8005f48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f44:	d0ec      	beq.n	8005f20 <USB_StopHost+0xc8>
 8005f46:	e000      	b.n	8005f4a <USB_StopHost+0xf2>
        break;
 8005f48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b0f      	cmp	r3, #15
 8005f54:	d9c7      	bls.n	8005ee6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff f880 	bl	8005072 <USB_EnableGlobalInt>

  return ret;
 8005f72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3720      	adds	r7, #32
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005f80:	4904      	ldr	r1, [pc, #16]	; (8005f94 <MX_FATFS_Init+0x18>)
 8005f82:	4805      	ldr	r0, [pc, #20]	; (8005f98 <MX_FATFS_Init+0x1c>)
 8005f84:	f005 f816 	bl	800afb4 <FATFS_LinkDriver>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <MX_FATFS_Init+0x20>)
 8005f8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000174 	.word	0x20000174
 8005f98:	20000010 	.word	0x20000010
 8005f9c:	20000170 	.word	0x20000170

08005fa0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005fa4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fa fc95 	bl	80008ec <SD_disk_initialize>
 8005fc2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fa fd6d 	bl	8000ab8 <SD_disk_status>
 8005fde:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005ff8:	7bf8      	ldrb	r0, [r7, #15]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	f7fa fd70 	bl	8000ae4 <SD_disk_read>
 8006004:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800601e:	7bf8      	ldrb	r0, [r7, #15]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	f7fa fdc7 	bl	8000bb8 <SD_disk_write>
 800602a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	4603      	mov	r3, r0
 800603c:	603a      	str	r2, [r7, #0]
 800603e:	71fb      	strb	r3, [r7, #7]
 8006040:	460b      	mov	r3, r1
 8006042:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006044:	79b9      	ldrb	r1, [r7, #6]
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fa fe38 	bl	8000cc0 <SD_disk_ioctl>
 8006050:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800605a:	b590      	push	{r4, r7, lr}
 800605c:	b089      	sub	sp, #36	; 0x24
 800605e:	af04      	add	r7, sp, #16
 8006060:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006062:	2301      	movs	r3, #1
 8006064:	2202      	movs	r2, #2
 8006066:	2102      	movs	r1, #2
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc67 	bl	800693c <USBH_FindInterface>
 800606e:	4603      	mov	r3, r0
 8006070:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	2bff      	cmp	r3, #255	; 0xff
 8006076:	d002      	beq.n	800607e <USBH_CDC_InterfaceInit+0x24>
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d901      	bls.n	8006082 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800607e:	2302      	movs	r3, #2
 8006080:	e13d      	b.n	80062fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc3c 	bl	8006904 <USBH_SelectInterface>
 800608c:	4603      	mov	r3, r0
 800608e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006096:	2302      	movs	r3, #2
 8006098:	e131      	b.n	80062fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060a0:	2050      	movs	r0, #80	; 0x50
 80060a2:	f005 fb8f 	bl	800b7c4 <malloc>
 80060a6:	4603      	mov	r3, r0
 80060a8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80060ba:	2302      	movs	r3, #2
 80060bc:	e11f      	b.n	80062fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060be:	2250      	movs	r2, #80	; 0x50
 80060c0:	2100      	movs	r1, #0
 80060c2:	68b8      	ldr	r0, [r7, #8]
 80060c4:	f005 fb8e 	bl	800b7e4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	211a      	movs	r1, #26
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da15      	bge.n	800610c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	211a      	movs	r1, #26
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	4413      	add	r3, r2
 80060ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	211a      	movs	r1, #26
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006106:	881a      	ldrh	r2, [r3, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 ff2d 	bl	8007f72 <USBH_AllocPipe>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	7819      	ldrb	r1, [r3, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	7858      	ldrb	r0, [r3, #1]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	8952      	ldrh	r2, [r2, #10]
 8006138:	9202      	str	r2, [sp, #8]
 800613a:	2203      	movs	r2, #3
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4623      	mov	r3, r4
 8006142:	4602      	mov	r2, r0
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fee5 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f005 fa88 	bl	800b668 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006158:	2300      	movs	r3, #0
 800615a:	2200      	movs	r2, #0
 800615c:	210a      	movs	r1, #10
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fbec 	bl	800693c <USBH_FindInterface>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2bff      	cmp	r3, #255	; 0xff
 800616c:	d002      	beq.n	8006174 <USBH_CDC_InterfaceInit+0x11a>
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d901      	bls.n	8006178 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006174:	2302      	movs	r3, #2
 8006176:	e0c2      	b.n	80062fe <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	211a      	movs	r1, #26
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b25b      	sxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	da16      	bge.n	80061be <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	211a      	movs	r1, #26
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	211a      	movs	r1, #26
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	835a      	strh	r2, [r3, #26]
 80061bc:	e015      	b.n	80061ea <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	211a      	movs	r1, #26
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061ce:	781a      	ldrb	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	211a      	movs	r1, #26
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	4413      	add	r3, r2
 80061e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	211a      	movs	r1, #26
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da16      	bge.n	8006230 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	211a      	movs	r1, #26
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	211a      	movs	r1, #26
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006228:	881a      	ldrh	r2, [r3, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	835a      	strh	r2, [r3, #26]
 800622e:	e015      	b.n	800625c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	211a      	movs	r1, #26
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	4413      	add	r3, r2
 800623c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	211a      	movs	r1, #26
 800624c:	fb01 f303 	mul.w	r3, r1, r3
 8006250:	4413      	add	r3, r2
 8006252:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	7b9b      	ldrb	r3, [r3, #14]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f001 fe85 	bl	8007f72 <USBH_AllocPipe>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	7bdb      	ldrb	r3, [r3, #15]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fe7b 	bl	8007f72 <USBH_AllocPipe>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	7b59      	ldrb	r1, [r3, #13]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	7b98      	ldrb	r0, [r3, #14]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	8b12      	ldrh	r2, [r2, #24]
 800629c:	9202      	str	r2, [sp, #8]
 800629e:	2202      	movs	r2, #2
 80062a0:	9201      	str	r2, [sp, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4623      	mov	r3, r4
 80062a6:	4602      	mov	r2, r0
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fe33 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7b19      	ldrb	r1, [r3, #12]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	7bd8      	ldrb	r0, [r3, #15]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	8b52      	ldrh	r2, [r2, #26]
 80062c6:	9202      	str	r2, [sp, #8]
 80062c8:	2202      	movs	r2, #2
 80062ca:	9201      	str	r2, [sp, #4]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4623      	mov	r3, r4
 80062d0:	4602      	mov	r2, r0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fe1e 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	7b5b      	ldrb	r3, [r3, #13]
 80062e4:	2200      	movs	r2, #0
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f005 f9bd 	bl	800b668 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7b1b      	ldrb	r3, [r3, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f005 f9b6 	bl	800b668 <USBH_LL_SetToggle>

  return USBH_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}

08006306 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00e      	beq.n	800633e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fe13 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fe3e 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	7b1b      	ldrb	r3, [r3, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7b1b      	ldrb	r3, [r3, #12]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fe00 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	7b1b      	ldrb	r3, [r3, #12]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fe2b 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	7b5b      	ldrb	r3, [r3, #13]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	7b5b      	ldrb	r3, [r3, #13]
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fded 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	7b5b      	ldrb	r3, [r3, #13]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 fe18 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4618      	mov	r0, r3
 80063a0:	f005 fa18 	bl	800b7d4 <free>
    phost->pActiveClass->pData = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3340      	adds	r3, #64	; 0x40
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f8b2 	bl	800653a <GetLineCoding>
 80063d6:	4603      	mov	r3, r0
 80063d8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063e6:	2102      	movs	r1, #2
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006418:	2b04      	cmp	r3, #4
 800641a:	d877      	bhi.n	800650c <USBH_CDC_Process+0x114>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <USBH_CDC_Process+0x2c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006439 	.word	0x08006439
 8006428:	0800643f 	.word	0x0800643f
 800642c:	0800646f 	.word	0x0800646f
 8006430:	080064e3 	.word	0x080064e3
 8006434:	080064f1 	.word	0x080064f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e06d      	b.n	800651a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f897 	bl	8006578 <SetLineCoding>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800645c:	e058      	b.n	8006510 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d055      	beq.n	8006510 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2204      	movs	r2, #4
 8006468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800646c:	e050      	b.n	8006510 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3340      	adds	r3, #64	; 0x40
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f860 	bl	800653a <GetLineCoding>
 800647a:	4603      	mov	r3, r0
 800647c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d126      	bne.n	80064d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d13b      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d133      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d12b      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d124      	bne.n	8006514 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f958 	bl	8006780 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064d0:	e020      	b.n	8006514 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d01d      	beq.n	8006514 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2204      	movs	r2, #4
 80064dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064e0:	e018      	b.n	8006514 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f867 	bl	80065b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8da 	bl	80066a2 <CDC_ProcessReception>
      break;
 80064ee:	e014      	b.n	800651a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ffef 	bl	80074d6 <USBH_ClrFeature>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800650a:	e005      	b.n	8006518 <USBH_CDC_Process+0x120>

    default:
      break;
 800650c:	bf00      	nop
 800650e:	e004      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006510:	bf00      	nop
 8006512:	e002      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006518:	bf00      	nop

  }

  return status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	22a1      	movs	r2, #161	; 0xa1
 8006548:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2221      	movs	r2, #33	; 0x21
 800654e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2207      	movs	r2, #7
 8006560:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2207      	movs	r2, #7
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fa81 	bl	8007a70 <USBH_CtlReq>
 800656e:	4603      	mov	r3, r0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2207      	movs	r2, #7
 800659e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2207      	movs	r2, #7
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fa62 	bl	8007a70 <USBH_CtlReq>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af02      	add	r7, sp, #8
 80065bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d002      	beq.n	80065dc <CDC_ProcessTransmission+0x26>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d023      	beq.n	8006622 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80065da:	e05e      	b.n	800669a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	8b12      	ldrh	r2, [r2, #24]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d90b      	bls.n	8006600 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8b1a      	ldrh	r2, [r3, #24]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7b5b      	ldrb	r3, [r3, #13]
 80065f4:	2001      	movs	r0, #1
 80065f6:	9000      	str	r0, [sp, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fc48 	bl	8007e8e <USBH_BulkSendData>
 80065fe:	e00b      	b.n	8006618 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	7b5b      	ldrb	r3, [r3, #13]
 800660e:	2001      	movs	r0, #1
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fc3b 	bl	8007e8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006620:	e03b      	b.n	800669a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7b5b      	ldrb	r3, [r3, #13]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f004 fff3 	bl	800b614 <USBH_LL_GetURBState>
 800662e:	4603      	mov	r3, r0
 8006630:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d128      	bne.n	800668a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	8b12      	ldrh	r2, [r2, #24]
 8006640:	4293      	cmp	r3, r2
 8006642:	d90e      	bls.n	8006662 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	8b12      	ldrh	r2, [r2, #24]
 800664c:	1a9a      	subs	r2, r3, r2
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	8b12      	ldrh	r2, [r2, #24]
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	61da      	str	r2, [r3, #28]
 8006660:	e002      	b.n	8006668 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006678:	e00e      	b.n	8006698 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f868 	bl	8006758 <USBH_CDC_TransmitCallback>
      break;
 8006688:	e006      	b.n	8006698 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d103      	bne.n	8006698 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006698:	bf00      	nop
  }
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d002      	beq.n	80066c8 <CDC_ProcessReception+0x26>
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d00e      	beq.n	80066e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80066c6:	e043      	b.n	8006750 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6a19      	ldr	r1, [r3, #32]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	8b5a      	ldrh	r2, [r3, #26]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	7b1b      	ldrb	r3, [r3, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fbff 	bl	8007ed8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2204      	movs	r2, #4
 80066de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066e2:	e035      	b.n	8006750 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	7b1b      	ldrb	r3, [r3, #12]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f004 ff92 	bl	800b614 <USBH_LL_GetURBState>
 80066f0:	4603      	mov	r3, r0
 80066f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066f4:	7cfb      	ldrb	r3, [r7, #19]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d129      	bne.n	800674e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f004 fef5 	bl	800b4f0 <USBH_LL_GetLastXferSize>
 8006706:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d016      	beq.n	8006740 <CDC_ProcessReception+0x9e>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	8b5b      	ldrh	r3, [r3, #26]
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4293      	cmp	r3, r2
 800671c:	d910      	bls.n	8006740 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2203      	movs	r2, #3
 800673a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800673e:	e006      	b.n	800674e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f80f 	bl	800676c <USBH_CDC_ReceiveCallback>
      break;
 800674e:	bf00      	nop
  }
}
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e029      	b.n	8006800 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	79fa      	ldrb	r2, [r7, #7]
 80067b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f81f 	bl	8006808 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f004 fdc5 	bl	800b388 <USBH_LL_Init>

  return USBH_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e009      	b.n	800682e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	33e0      	adds	r3, #224	; 0xe0
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	2200      	movs	r2, #0
 8006826:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b0f      	cmp	r3, #15
 8006832:	d9f2      	bls.n	800681a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e009      	b.n	800684e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006854:	d3f1      	bcc.n	800683a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2240      	movs	r2, #64	; 0x40
 800687a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10e      	bne.n	80068ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	33de      	adds	r3, #222	; 0xde
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
 80068ea:	e004      	b.n	80068f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	e001      	b.n	80068f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068f2:	2302      	movs	r3, #2
 80068f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	429a      	cmp	r2, r3
 800691e:	d204      	bcs.n	800692a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006928:	e001      	b.n	800692e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	70fb      	strb	r3, [r7, #3]
 800694e:	460b      	mov	r3, r1
 8006950:	70bb      	strb	r3, [r7, #2]
 8006952:	4613      	mov	r3, r2
 8006954:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006964:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006966:	e025      	b.n	80069b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	221a      	movs	r2, #26
 800696c:	fb02 f303 	mul.w	r3, r2, r3
 8006970:	3308      	adds	r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	3302      	adds	r3, #2
 8006978:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	795b      	ldrb	r3, [r3, #5]
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	429a      	cmp	r2, r3
 8006982:	d002      	beq.n	800698a <USBH_FindInterface+0x4e>
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d111      	bne.n	80069ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800698e:	78ba      	ldrb	r2, [r7, #2]
 8006990:	429a      	cmp	r2, r3
 8006992:	d002      	beq.n	800699a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006994:	78bb      	ldrb	r3, [r7, #2]
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d109      	bne.n	80069ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800699e:	787a      	ldrb	r2, [r7, #1]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d002      	beq.n	80069aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069a4:	787b      	ldrb	r3, [r7, #1]
 80069a6:	2bff      	cmp	r3, #255	; 0xff
 80069a8:	d101      	bne.n	80069ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	e006      	b.n	80069bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	3301      	adds	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d9d6      	bls.n	8006968 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80069ba:	23ff      	movs	r3, #255	; 0xff
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f004 fd15 	bl	800b400 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069d6:	2101      	movs	r1, #1
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f004 fe2e 	bl	800b63a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2203      	movs	r2, #3
 8006a08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b0b      	cmp	r3, #11
 8006a12:	f200 81be 	bhi.w	8006d92 <USBH_Process+0x3aa>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBH_Process+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a7f 	.word	0x08006a7f
 8006a24:	08006ae7 	.word	0x08006ae7
 8006a28:	08006d2d 	.word	0x08006d2d
 8006a2c:	08006d93 	.word	0x08006d93
 8006a30:	08006b8b 	.word	0x08006b8b
 8006a34:	08006cd3 	.word	0x08006cd3
 8006a38:	08006bc1 	.word	0x08006bc1
 8006a3c:	08006be1 	.word	0x08006be1
 8006a40:	08006c01 	.word	0x08006c01
 8006a44:	08006c45 	.word	0x08006c45
 8006a48:	08006d15 	.word	0x08006d15
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 819e 	beq.w	8006d96 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a60:	20c8      	movs	r0, #200	; 0xc8
 8006a62:	f004 fe31 	bl	800b6c8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f004 fd27 	bl	800b4ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a7c:	e18b      	b.n	8006d96 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a96:	e18d      	b.n	8006db4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d914      	bls.n	8006ace <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d903      	bls.n	8006ac6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	220d      	movs	r2, #13
 8006ac2:	701a      	strb	r2, [r3, #0]
      break;
 8006ac4:	e176      	b.n	8006db4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
      break;
 8006acc:	e172      	b.n	8006db4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ad4:	f103 020a 	add.w	r2, r3, #10
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ade:	200a      	movs	r0, #10
 8006ae0:	f004 fdf2 	bl	800b6c8 <USBH_Delay>
      break;
 8006ae4:	e166      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af6:	2104      	movs	r1, #4
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006afc:	2064      	movs	r0, #100	; 0x64
 8006afe:	f004 fde3 	bl	800b6c8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f004 fcb2 	bl	800b46c <USBH_LL_GetSpeed>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2205      	movs	r2, #5
 8006b16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fa29 	bl	8007f72 <USBH_AllocPipe>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fa21 	bl	8007f72 <USBH_AllocPipe>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7919      	ldrb	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	9202      	str	r2, [sp, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4603      	mov	r3, r0
 8006b58:	2280      	movs	r2, #128	; 0x80
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f9da 	bl	8007f14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7959      	ldrb	r1, [r3, #5]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b74:	b292      	uxth	r2, r2
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2200      	movs	r2, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 f9c6 	bl	8007f14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b88:	e114      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f918 	bl	8006dc0 <USBH_HandleEnum>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 80fe 	bne.w	8006d9a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d103      	bne.n	8006bb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bb6:	e0f0      	b.n	8006d9a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2207      	movs	r2, #7
 8006bbc:	701a      	strb	r2, [r3, #0]
      break;
 8006bbe:	e0ec      	b.n	8006d9a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 80e9 	beq.w	8006d9e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006bde:	e0de      	b.n	8006d9e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc2c 	bl	8007448 <USBH_SetCfg>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 80d5 	bne.w	8006da2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2209      	movs	r2, #9
 8006bfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bfe:	e0d0      	b.n	8006da2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc3c 	bl	800748e <USBH_SetFeature>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	220a      	movs	r2, #10
 8006c26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c28:	e0bd      	b.n	8006da6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	f040 80b9 	bne.w	8006da6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	220a      	movs	r2, #10
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e0b4      	b.n	8006da6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	220a      	movs	r2, #10
 8006c40:	701a      	strb	r2, [r3, #0]
      break;
 8006c42:	e0b0      	b.n	8006da6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80ad 	beq.w	8006daa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e016      	b.n	8006c8c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	32de      	adds	r2, #222	; 0xde
 8006c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c68:	791a      	ldrb	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d108      	bne.n	8006c86 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	32de      	adds	r2, #222	; 0xde
 8006c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c84:	e005      	b.n	8006c92 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0e5      	beq.n	8006c5e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d016      	beq.n	8006cca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2206      	movs	r2, #6
 8006cb2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cba:	2103      	movs	r1, #3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cc0:	e073      	b.n	8006daa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e06f      	b.n	8006daa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	220d      	movs	r2, #13
 8006cce:	701a      	strb	r2, [r3, #0]
      break;
 8006cd0:	e06b      	b.n	8006daa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	220b      	movs	r2, #11
 8006cf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cfa:	e058      	b.n	8006dae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d154      	bne.n	8006dae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	220d      	movs	r2, #13
 8006d08:	701a      	strb	r2, [r3, #0]
      break;
 8006d0a:	e050      	b.n	8006dae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	220d      	movs	r2, #13
 8006d10:	701a      	strb	r2, [r3, #0]
      break;
 8006d12:	e04c      	b.n	8006dae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d049      	beq.n	8006db2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
      }
      break;
 8006d2a:	e042      	b.n	8006db2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fd67 	bl	8006808 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d68:	2105      	movs	r1, #5
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d107      	bne.n	8006d8a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fe20 	bl	80069c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d88:	e014      	b.n	8006db4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f004 fb38 	bl	800b400 <USBH_LL_Start>
      break;
 8006d90:	e010      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d92:	bf00      	nop
 8006d94:	e00e      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006d96:	bf00      	nop
 8006d98:	e00c      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e00a      	b.n	8006db4 <USBH_Process+0x3cc>
    break;
 8006d9e:	bf00      	nop
 8006da0:	e008      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006da2:	bf00      	nop
 8006da4:	e006      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006db2:	bf00      	nop
  }
  return USBH_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af04      	add	r7, sp, #16
 8006dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b07      	cmp	r3, #7
 8006dd6:	f200 81c1 	bhi.w	800715c <USBH_HandleEnum+0x39c>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBH_HandleEnum+0x20>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006ebf 	.word	0x08006ebf
 8006de8:	08006f29 	.word	0x08006f29
 8006dec:	08006fb7 	.word	0x08006fb7
 8006df0:	08007021 	.word	0x08007021
 8006df4:	08007091 	.word	0x08007091
 8006df8:	080070d7 	.word	0x080070d7
 8006dfc:	0800711d 	.word	0x0800711d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e00:	2108      	movs	r1, #8
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa50 	bl	80072a8 <USBH_Get_DevDesc>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d130      	bne.n	8006e74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7919      	ldrb	r1, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e36:	b292      	uxth	r2, r2
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f865 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7959      	ldrb	r1, [r3, #5]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	9202      	str	r2, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	9201      	str	r2, [sp, #4]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f851 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e72:	e175      	b.n	8007160 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 8172 	bne.w	8007160 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d903      	bls.n	8006e9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220d      	movs	r2, #13
 8006e9a:	701a      	strb	r2, [r3, #0]
      break;
 8006e9c:	e160      	b.n	8007160 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f885 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f87f 	bl	8007fb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
      break;
 8006ebc:	e150      	b.n	8007160 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006ebe:	2112      	movs	r1, #18
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9f1 	bl	80072a8 <USBH_Get_DevDesc>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ed6:	e145      	b.n	8007164 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	f040 8142 	bne.w	8007164 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d903      	bls.n	8006f02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	220d      	movs	r2, #13
 8006efe:	701a      	strb	r2, [r3, #0]
      break;
 8006f00:	e130      	b.n	8007164 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	795b      	ldrb	r3, [r3, #5]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 f853 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f84d 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
      break;
 8006f26:	e11d      	b.n	8007164 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f28:	2101      	movs	r1, #1
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa68 	bl	8007400 <USBH_SetAddress>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d132      	bne.n	8006fa0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f004 fbc4 	bl	800b6c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7919      	ldrb	r1, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f62:	b292      	uxth	r2, r2
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2280      	movs	r2, #128	; 0x80
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 ffcf 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7959      	ldrb	r1, [r3, #5]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	9202      	str	r2, [sp, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4603      	mov	r3, r0
 8006f96:	2200      	movs	r2, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 ffbb 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f9e:	e0e3      	b.n	8007168 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	f040 80e0 	bne.w	8007168 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220d      	movs	r2, #13
 8006fac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	705a      	strb	r2, [r3, #1]
      break;
 8006fb4:	e0d8      	b.n	8007168 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006fb6:	2109      	movs	r1, #9
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f99d 	bl	80072f8 <USBH_Get_CfgDesc>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fce:	e0cd      	b.n	800716c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	f040 80ca 	bne.w	800716c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fde:	3301      	adds	r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d903      	bls.n	8006ffa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	220d      	movs	r2, #13
 8006ff6:	701a      	strb	r2, [r3, #0]
      break;
 8006ff8:	e0b8      	b.n	800716c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	795b      	ldrb	r3, [r3, #5]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 ffd7 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 ffd1 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	e0a5      	b.n	800716c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f965 	bl	80072f8 <USBH_Get_CfgDesc>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2205      	movs	r2, #5
 800703c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800703e:	e097      	b.n	8007170 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b03      	cmp	r3, #3
 8007044:	f040 8094 	bne.w	8007170 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800705e:	2b03      	cmp	r3, #3
 8007060:	d903      	bls.n	800706a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	220d      	movs	r2, #13
 8007066:	701a      	strb	r2, [r3, #0]
      break;
 8007068:	e082      	b.n	8007170 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 ff9f 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 ff99 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
      break;
 800708e:	e06f      	b.n	8007170 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007096:	2b00      	cmp	r3, #0
 8007098:	d019      	beq.n	80070ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070a6:	23ff      	movs	r3, #255	; 0xff
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f949 	bl	8007340 <USBH_Get_StringDesc>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2206      	movs	r2, #6
 80070bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070be:	e059      	b.n	8007174 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d156      	bne.n	8007174 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2206      	movs	r2, #6
 80070ca:	705a      	strb	r2, [r3, #1]
      break;
 80070cc:	e052      	b.n	8007174 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2206      	movs	r2, #6
 80070d2:	705a      	strb	r2, [r3, #1]
      break;
 80070d4:	e04e      	b.n	8007174 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d019      	beq.n	8007114 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070ec:	23ff      	movs	r3, #255	; 0xff
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f926 	bl	8007340 <USBH_Get_StringDesc>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2207      	movs	r2, #7
 8007102:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007104:	e038      	b.n	8007178 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d135      	bne.n	8007178 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2207      	movs	r2, #7
 8007110:	705a      	strb	r2, [r3, #1]
      break;
 8007112:	e031      	b.n	8007178 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2207      	movs	r2, #7
 8007118:	705a      	strb	r2, [r3, #1]
      break;
 800711a:	e02d      	b.n	8007178 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007122:	2b00      	cmp	r3, #0
 8007124:	d017      	beq.n	8007156 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007132:	23ff      	movs	r3, #255	; 0xff
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f903 	bl	8007340 <USBH_Get_StringDesc>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007148:	e018      	b.n	800717c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d115      	bne.n	800717c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
      break;
 8007154:	e012      	b.n	800717c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
      break;
 800715a:	e00f      	b.n	800717c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800715c:	bf00      	nop
 800715e:	e00e      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007160:	bf00      	nop
 8007162:	e00c      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007164:	bf00      	nop
 8007166:	e00a      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007168:	bf00      	nop
 800716a:	e008      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 800716c:	bf00      	nop
 800716e:	e006      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 800717c:	bf00      	nop
  }
  return Status;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f804 	bl	80071ca <USBH_HandleSof>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b0b      	cmp	r3, #11
 80071da:	d10a      	bne.n	80071f2 <USBH_HandleSof+0x28>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
  }
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800720a:	bf00      	nop
}
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007226:	bf00      	nop
}
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f004 f8d8 	bl	800b436 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fe91 	bl	8007fb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fe8b 	bl	8007fb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c6:	2100      	movs	r1, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f864 	bl	8007396 <USBH_GetDescriptor>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	b292      	uxth	r2, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f000 f918 	bl	800751e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	331c      	adds	r3, #28
 8007308:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800730a:	887b      	ldrh	r3, [r7, #2]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f83d 	bl	8007396 <USBH_GetDescriptor>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f987 	bl	8007640 <USBH_ParseCfgDesc>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	461a      	mov	r2, r3
 800734c:	460b      	mov	r3, r1
 800734e:	72fb      	strb	r3, [r7, #11]
 8007350:	4613      	mov	r3, r2
 8007352:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800735c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	460b      	mov	r3, r1
 800736a:	2100      	movs	r1, #0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f812 	bl	8007396 <USBH_GetDescriptor>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007382:	893a      	ldrh	r2, [r7, #8]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fb24 	bl	80079d4 <USBH_ParseStringDesc>
  }

  return status;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	72fb      	strb	r3, [r7, #11]
 80073a4:	4613      	mov	r3, r2
 80073a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d11c      	bne.n	80073ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2206      	movs	r2, #6
 80073c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	893a      	ldrh	r2, [r7, #8]
 80073c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80073c8:	893b      	ldrh	r3, [r7, #8]
 80073ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d2:	d104      	bne.n	80073de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f240 4209 	movw	r2, #1033	; 0x409
 80073da:	829a      	strh	r2, [r3, #20]
 80073dc:	e002      	b.n	80073e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8b3a      	ldrh	r2, [r7, #24]
 80073e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073ea:	8b3b      	ldrh	r3, [r7, #24]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fb3d 	bl	8007a70 <USBH_CtlReq>
 80073f6:	4603      	mov	r3, r0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	789b      	ldrb	r3, [r3, #2]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10f      	bne.n	8007434 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	b29a      	uxth	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb19 	bl	8007a70 <USBH_CtlReq>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	789b      	ldrb	r3, [r3, #2]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10e      	bne.n	800747a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2209      	movs	r2, #9
 8007466:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 faf6 	bl	8007a70 <USBH_CtlReq>
 8007484:	4603      	mov	r3, r0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	789b      	ldrb	r3, [r3, #2]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10f      	bne.n	80074c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fad2 	bl	8007a70 <USBH_CtlReq>
 80074cc:	4603      	mov	r3, r0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10f      	bne.n	800750a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 faae 	bl	8007a70 <USBH_CtlReq>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	4613      	mov	r3, r2
 800752a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	785a      	ldrb	r2, [r3, #1]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	3302      	adds	r3, #2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	b29a      	uxth	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	3303      	adds	r3, #3
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	b29b      	uxth	r3, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	791a      	ldrb	r2, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	795a      	ldrb	r2, [r3, #5]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	799a      	ldrb	r2, [r3, #6]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	79da      	ldrb	r2, [r3, #7]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	79db      	ldrb	r3, [r3, #7]
 800757c:	2b20      	cmp	r3, #32
 800757e:	dc11      	bgt.n	80075a4 <USBH_ParseDevDesc+0x86>
 8007580:	2b08      	cmp	r3, #8
 8007582:	db16      	blt.n	80075b2 <USBH_ParseDevDesc+0x94>
 8007584:	3b08      	subs	r3, #8
 8007586:	2201      	movs	r2, #1
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <USBH_ParseDevDesc+0x8a>
 80075a2:	e006      	b.n	80075b2 <USBH_ParseDevDesc+0x94>
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d104      	bne.n	80075b2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	79da      	ldrb	r2, [r3, #7]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	71da      	strb	r2, [r3, #7]
      break;
 80075b0:	e003      	b.n	80075ba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2240      	movs	r2, #64	; 0x40
 80075b6:	71da      	strb	r2, [r3, #7]
      break;
 80075b8:	bf00      	nop
  }

  if (length > 8U)
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d939      	bls.n	8007634 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3308      	adds	r3, #8
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3309      	adds	r3, #9
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	330a      	adds	r3, #10
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	330b      	adds	r3, #11
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	330c      	adds	r3, #12
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	330d      	adds	r3, #13
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	b29b      	uxth	r3, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	7b9a      	ldrb	r2, [r3, #14]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	7bda      	ldrb	r2, [r3, #15]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	7c1a      	ldrb	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	7c5a      	ldrb	r2, [r3, #17]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	745a      	strb	r2, [r3, #17]
  }
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	; 0x30
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007654:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785a      	ldrb	r2, [r3, #1]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3302      	adds	r3, #2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769c:	bf28      	it	cs
 800769e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	791a      	ldrb	r2, [r3, #4]
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	795a      	ldrb	r2, [r3, #5]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	799a      	ldrb	r2, [r3, #6]
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	79da      	ldrb	r2, [r3, #7]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	7a1a      	ldrb	r2, [r3, #8]
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d002      	beq.n	80076de <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2209      	movs	r2, #9
 80076dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	f240 809d 	bls.w	8007820 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80076e6:	2309      	movs	r3, #9
 80076e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076ee:	e081      	b.n	80077f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076f0:	f107 0316 	add.w	r3, r7, #22
 80076f4:	4619      	mov	r1, r3
 80076f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f8:	f000 f99f 	bl	8007a3a <USBH_GetNextDesc>
 80076fc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d176      	bne.n	80077f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b09      	cmp	r3, #9
 800770c:	d002      	beq.n	8007714 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	2209      	movs	r2, #9
 8007712:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007718:	221a      	movs	r2, #26
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	3308      	adds	r3, #8
 8007720:	6a3a      	ldr	r2, [r7, #32]
 8007722:	4413      	add	r3, r2
 8007724:	3302      	adds	r3, #2
 8007726:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772a:	69f8      	ldr	r0, [r7, #28]
 800772c:	f000 f87e 	bl	800782c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800773a:	e043      	b.n	80077c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800773c:	f107 0316 	add.w	r3, r7, #22
 8007740:	4619      	mov	r1, r3
 8007742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007744:	f000 f979 	bl	8007a3a <USBH_GetNextDesc>
 8007748:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b05      	cmp	r3, #5
 8007750:	d138      	bne.n	80077c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d10f      	bne.n	800777a <USBH_ParseCfgDesc+0x13a>
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	799b      	ldrb	r3, [r3, #6]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d10b      	bne.n	800777a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	79db      	ldrb	r3, [r3, #7]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10f      	bne.n	800778a <USBH_ParseCfgDesc+0x14a>
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b09      	cmp	r3, #9
 8007770:	d00b      	beq.n	800778a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2209      	movs	r2, #9
 8007776:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007778:	e007      	b.n	800778a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b07      	cmp	r3, #7
 8007780:	d004      	beq.n	800778c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2207      	movs	r2, #7
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e000      	b.n	800778c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800778a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800778c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007790:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007794:	3201      	adds	r2, #1
 8007796:	00d2      	lsls	r2, r2, #3
 8007798:	211a      	movs	r1, #26
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3308      	adds	r3, #8
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	4413      	add	r3, r2
 80077a6:	3304      	adds	r3, #4
 80077a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80077aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ac:	69b9      	ldr	r1, [r7, #24]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f86b 	bl	800788a <USBH_ParseEPDesc>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80077ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077be:	3301      	adds	r3, #1
 80077c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d204      	bcs.n	80077da <USBH_ParseCfgDesc+0x19a>
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	885a      	ldrh	r2, [r3, #2]
 80077d4:	8afb      	ldrh	r3, [r7, #22]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d8b0      	bhi.n	800773c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d201      	bcs.n	80077ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e01c      	b.n	8007824 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80077ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077ee:	3301      	adds	r3, #1
 80077f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d805      	bhi.n	8007808 <USBH_ParseCfgDesc+0x1c8>
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	885a      	ldrh	r2, [r3, #2]
 8007800:	8afb      	ldrh	r3, [r7, #22]
 8007802:	429a      	cmp	r2, r3
 8007804:	f63f af74 	bhi.w	80076f0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	791b      	ldrb	r3, [r3, #4]
 800780c:	2b02      	cmp	r3, #2
 800780e:	bf28      	it	cs
 8007810:	2302      	movcs	r3, #2
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007818:	429a      	cmp	r2, r3
 800781a:	d201      	bcs.n	8007820 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800781c:	2303      	movs	r3, #3
 800781e:	e001      	b.n	8007824 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007824:	4618      	mov	r0, r3
 8007826:	3730      	adds	r7, #48	; 0x30
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	789a      	ldrb	r2, [r3, #2]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	78da      	ldrb	r2, [r3, #3]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	791a      	ldrb	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	795a      	ldrb	r2, [r3, #5]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	799a      	ldrb	r2, [r3, #6]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	79da      	ldrb	r2, [r3, #7]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	7a1a      	ldrb	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	721a      	strb	r2, [r3, #8]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800788a:	b480      	push	{r7}
 800788c:	b087      	sub	sp, #28
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	785a      	ldrb	r2, [r3, #1]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	789a      	ldrb	r2, [r3, #2]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	78da      	ldrb	r2, [r3, #3]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3305      	adds	r3, #5
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	799a      	ldrb	r2, [r3, #6]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	889b      	ldrh	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80078e6:	2303      	movs	r3, #3
 80078e8:	75fb      	strb	r3, [r7, #23]
 80078ea:	e033      	b.n	8007954 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	889b      	ldrh	r3, [r3, #4]
 80078f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	b21a      	sxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b299      	uxth	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3305      	adds	r3, #5
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	b29b      	uxth	r3, r3
 8007918:	430b      	orrs	r3, r1
 800791a:	b29b      	uxth	r3, r3
 800791c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007920:	2b00      	cmp	r3, #0
 8007922:	d110      	bne.n	8007946 <USBH_ParseEPDesc+0xbc>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b299      	uxth	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3305      	adds	r3, #5
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	430b      	orrs	r3, r1
 800793a:	b29b      	uxth	r3, r3
 800793c:	b21b      	sxth	r3, r3
 800793e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007942:	b21b      	sxth	r3, r3
 8007944:	e001      	b.n	800794a <USBH_ParseEPDesc+0xc0>
 8007946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794a:	4313      	orrs	r3, r2
 800794c:	b21b      	sxth	r3, r3
 800794e:	b29a      	uxth	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	78db      	ldrb	r3, [r3, #3]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d005      	beq.n	8007976 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	78db      	ldrb	r3, [r3, #3]
 800796e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007972:	2b03      	cmp	r3, #3
 8007974:	d127      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	799b      	ldrb	r3, [r3, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <USBH_ParseEPDesc+0xfc>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	799b      	ldrb	r3, [r3, #6]
 8007982:	2b10      	cmp	r3, #16
 8007984:	d91f      	bls.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	e01c      	b.n	80079c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	78db      	ldrb	r3, [r3, #3]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d10a      	bne.n	80079ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	799b      	ldrb	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <USBH_ParseEPDesc+0x11e>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	799b      	ldrb	r3, [r3, #6]
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d90e      	bls.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80079a8:	2303      	movs	r3, #3
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e00b      	b.n	80079c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	78db      	ldrb	r3, [r3, #3]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d105      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	799b      	ldrb	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80079c2:	2303      	movs	r3, #3
 80079c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d120      	bne.n	8007a2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	1e9a      	subs	r2, r3, #2
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bf28      	it	cs
 80079f8:	4613      	movcs	r3, r2
 80079fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3302      	adds	r3, #2
 8007a00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a02:	2300      	movs	r3, #0
 8007a04:	82fb      	strh	r3, [r7, #22]
 8007a06:	e00b      	b.n	8007a20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a08:	8afb      	ldrh	r3, [r7, #22]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a1a:	8afb      	ldrh	r3, [r7, #22]
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	82fb      	strh	r3, [r7, #22]
 8007a20:	8afa      	ldrh	r2, [r7, #22]
 8007a22:	8abb      	ldrh	r3, [r7, #20]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d3ef      	bcc.n	8007a08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  }
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4413      	add	r3, r2
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a62:	68fb      	ldr	r3, [r7, #12]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	789b      	ldrb	r3, [r3, #2]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d002      	beq.n	8007a90 <USBH_CtlReq+0x20>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d00f      	beq.n	8007aae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a8e:	e027      	b.n	8007ae0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	e018      	b.n	8007ae0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f81c 	bl	8007aec <USBH_HandleControl>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <USBH_CtlReq+0x54>
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d106      	bne.n	8007ad2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	761a      	strb	r2, [r3, #24]
      break;
 8007ad0:	e005      	b.n	8007ade <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d102      	bne.n	8007ade <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	709a      	strb	r2, [r3, #2]
      break;
 8007ade:	bf00      	nop
  }
  return status;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7e1b      	ldrb	r3, [r3, #24]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	2b0a      	cmp	r3, #10
 8007b04:	f200 8156 	bhi.w	8007db4 <USBH_HandleControl+0x2c8>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBH_HandleControl+0x24>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b57 	.word	0x08007b57
 8007b18:	08007bc1 	.word	0x08007bc1
 8007b1c:	08007be7 	.word	0x08007be7
 8007b20:	08007c1f 	.word	0x08007c1f
 8007b24:	08007c49 	.word	0x08007c49
 8007b28:	08007c9b 	.word	0x08007c9b
 8007b2c:	08007cbd 	.word	0x08007cbd
 8007b30:	08007cf9 	.word	0x08007cf9
 8007b34:	08007d1f 	.word	0x08007d1f
 8007b38:	08007d5d 	.word	0x08007d5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0110 	add.w	r1, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	795b      	ldrb	r3, [r3, #5]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f943 	bl	8007dd4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	761a      	strb	r2, [r3, #24]
      break;
 8007b54:	e139      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f003 fd59 	bl	800b614 <USBH_LL_GetURBState>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d11e      	bne.n	8007baa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8adb      	ldrh	r3, [r3, #22]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b7e:	7b7b      	ldrb	r3, [r7, #13]
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d103      	bne.n	8007b8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2203      	movs	r2, #3
 8007b88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b8a:	e115      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2205      	movs	r2, #5
 8007b90:	761a      	strb	r2, [r3, #24]
      break;
 8007b92:	e111      	b.n	8007db8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b94:	7b7b      	ldrb	r3, [r7, #13]
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d103      	bne.n	8007ba2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	761a      	strb	r2, [r3, #24]
      break;
 8007ba0:	e10a      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	761a      	strb	r2, [r3, #24]
      break;
 8007ba8:	e106      	b.n	8007db8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <USBH_HandleControl+0xcc>
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	f040 8100 	bne.w	8007db8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220b      	movs	r2, #11
 8007bbc:	761a      	strb	r2, [r3, #24]
      break;
 8007bbe:	e0fb      	b.n	8007db8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6899      	ldr	r1, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	899a      	ldrh	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f93a 	bl	8007e52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	761a      	strb	r2, [r3, #24]
      break;
 8007be4:	e0f1      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f003 fd11 	bl	800b614 <USBH_LL_GetURBState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2209      	movs	r2, #9
 8007c00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d102      	bne.n	8007c0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c0c:	e0d6      	b.n	8007dbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	f040 80d3 	bne.w	8007dbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	220b      	movs	r2, #11
 8007c1a:	761a      	strb	r2, [r3, #24]
      break;
 8007c1c:	e0ce      	b.n	8007dbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6899      	ldr	r1, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	899a      	ldrh	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	795b      	ldrb	r3, [r3, #5]
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	9000      	str	r0, [sp, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8ea 	bl	8007e08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2206      	movs	r2, #6
 8007c44:	761a      	strb	r2, [r3, #24]
      break;
 8007c46:	e0c0      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	795b      	ldrb	r3, [r3, #5]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f003 fce0 	bl	800b614 <USBH_LL_GetURBState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d103      	bne.n	8007c66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2207      	movs	r2, #7
 8007c62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c64:	e0ac      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d105      	bne.n	8007c78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220c      	movs	r2, #12
 8007c70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
      break;
 8007c76:	e0a3      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2205      	movs	r2, #5
 8007c82:	761a      	strb	r2, [r3, #24]
      break;
 8007c84:	e09c      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	f040 8099 	bne.w	8007dc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220b      	movs	r2, #11
 8007c92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	e092      	b.n	8007dc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8d5 	bl	8007e52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	761a      	strb	r2, [r3, #24]

      break;
 8007cba:	e086      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f003 fca6 	bl	800b614 <USBH_LL_GetURBState>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d105      	bne.n	8007cde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	220d      	movs	r2, #13
 8007cd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cdc:	e072      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220b      	movs	r2, #11
 8007ce8:	761a      	strb	r2, [r3, #24]
      break;
 8007cea:	e06b      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d168      	bne.n	8007dc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e065      	b.n	8007dc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	795b      	ldrb	r3, [r3, #5]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f87f 	bl	8007e08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	220a      	movs	r2, #10
 8007d1a:	761a      	strb	r2, [r3, #24]
      break;
 8007d1c:	e055      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f003 fc75 	bl	800b614 <USBH_LL_GetURBState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220d      	movs	r2, #13
 8007d3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d3e:	e043      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d103      	bne.n	8007d4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2209      	movs	r2, #9
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e03c      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d139      	bne.n	8007dc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	220b      	movs	r2, #11
 8007d58:	761a      	strb	r2, [r3, #24]
      break;
 8007d5a:	e035      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7e5b      	ldrb	r3, [r3, #25]
 8007d60:	3301      	adds	r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	765a      	strb	r2, [r3, #25]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7e5b      	ldrb	r3, [r3, #25]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d806      	bhi.n	8007d7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d7c:	e025      	b.n	8007dca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d84:	2106      	movs	r1, #6
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	795b      	ldrb	r3, [r3, #5]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f90c 	bl	8007fb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f906 	bl	8007fb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]
      break;
 8007db2:	e00a      	b.n	8007dca <USBH_HandleControl+0x2de>

    default:
      break;
 8007db4:	bf00      	nop
 8007db6:	e008      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007db8:	bf00      	nop
 8007dba:	e006      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc8:	bf00      	nop
  }

  return status;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af04      	add	r7, sp, #16
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007de2:	79f9      	ldrb	r1, [r7, #7]
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	2308      	movs	r3, #8
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	2200      	movs	r2, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f003 fbda 	bl	800b5b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	460b      	mov	r3, r1
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e2c:	7979      	ldrb	r1, [r7, #5]
 8007e2e:	7e3b      	ldrb	r3, [r7, #24]
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f003 fbb5 	bl	800b5b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af04      	add	r7, sp, #16
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	460b      	mov	r3, r1
 8007e62:	80fb      	strh	r3, [r7, #6]
 8007e64:	4613      	mov	r3, r2
 8007e66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e68:	7979      	ldrb	r1, [r7, #5]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	9302      	str	r3, [sp, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f003 fb97 	bl	800b5b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e84:	2300      	movs	r3, #0

}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af04      	add	r7, sp, #16
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	80fb      	strh	r3, [r7, #6]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eb2:	7979      	ldrb	r1, [r7, #5]
 8007eb4:	7e3b      	ldrb	r3, [r7, #24]
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f003 fb72 	bl	800b5b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	80fb      	strh	r3, [r7, #6]
 8007eea:	4613      	mov	r3, r2
 8007eec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eee:	7979      	ldrb	r1, [r7, #5]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	2301      	movs	r3, #1
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2201      	movs	r2, #1
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f003 fb54 	bl	800b5b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	70fb      	strb	r3, [r7, #3]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70bb      	strb	r3, [r7, #2]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f2e:	7878      	ldrb	r0, [r7, #1]
 8007f30:	78ba      	ldrb	r2, [r7, #2]
 8007f32:	78f9      	ldrb	r1, [r7, #3]
 8007f34:	8b3b      	ldrh	r3, [r7, #24]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	7d3b      	ldrb	r3, [r7, #20]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	7c3b      	ldrb	r3, [r7, #16]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4603      	mov	r3, r0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f003 fae7 	bl	800b516 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f003 fb06 	bl	800b574 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f836 	bl	8007ff0 <USBH_GetFreePipe>
 8007f84:	4603      	mov	r3, r0
 8007f86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00a      	beq.n	8007fa8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	33e0      	adds	r3, #224	; 0xe0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	b2db      	uxtb	r3, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d80d      	bhi.n	8007fe2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	33e0      	adds	r3, #224	; 0xe0
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	33e0      	adds	r3, #224	; 0xe0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e00f      	b.n	8008022 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	33e0      	adds	r3, #224	; 0xe0
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	b29b      	uxth	r3, r3
 800801a:	e007      	b.n	800802c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	3301      	adds	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b0f      	cmp	r3, #15
 8008026:	d9ec      	bls.n	8008002 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008028:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	4a08      	ldr	r2, [pc, #32]	; (8008068 <disk_status+0x30>)
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	79fa      	ldrb	r2, [r7, #7]
 8008050:	4905      	ldr	r1, [pc, #20]	; (8008068 <disk_status+0x30>)
 8008052:	440a      	add	r2, r1
 8008054:	7a12      	ldrb	r2, [r2, #8]
 8008056:	4610      	mov	r0, r2
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	200003a0 	.word	0x200003a0

0800806c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	4a0d      	ldr	r2, [pc, #52]	; (80080b4 <disk_initialize+0x48>)
 800807e:	5cd3      	ldrb	r3, [r2, r3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d111      	bne.n	80080a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	4a0b      	ldr	r2, [pc, #44]	; (80080b4 <disk_initialize+0x48>)
 8008088:	2101      	movs	r1, #1
 800808a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	4a09      	ldr	r2, [pc, #36]	; (80080b4 <disk_initialize+0x48>)
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	4906      	ldr	r1, [pc, #24]	; (80080b4 <disk_initialize+0x48>)
 800809c:	440a      	add	r2, r1
 800809e:	7a12      	ldrb	r2, [r2, #8]
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200003a0 	.word	0x200003a0

080080b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <disk_read+0x3c>)
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	689c      	ldr	r4, [r3, #8]
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <disk_read+0x3c>)
 80080d8:	4413      	add	r3, r2
 80080da:	7a18      	ldrb	r0, [r3, #8]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	47a0      	blx	r4
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200003a0 	.word	0x200003a0

080080f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <disk_write+0x3c>)
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68dc      	ldr	r4, [r3, #12]
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4a07      	ldr	r2, [pc, #28]	; (8008134 <disk_write+0x3c>)
 8008118:	4413      	add	r3, r2
 800811a:	7a18      	ldrb	r0, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	47a0      	blx	r4
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]
  return res;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}
 8008132:	bf00      	nop
 8008134:	200003a0 	.word	0x200003a0

08008138 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	603a      	str	r2, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
 8008144:	460b      	mov	r3, r1
 8008146:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <disk_ioctl+0x38>)
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	79fa      	ldrb	r2, [r7, #7]
 8008156:	4906      	ldr	r1, [pc, #24]	; (8008170 <disk_ioctl+0x38>)
 8008158:	440a      	add	r2, r1
 800815a:	7a10      	ldrb	r0, [r2, #8]
 800815c:	79b9      	ldrb	r1, [r7, #6]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
  return res;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	200003a0 	.word	0x200003a0

08008174 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008184:	89fb      	ldrh	r3, [r7, #14]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b21a      	sxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b21b      	sxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	b21b      	sxth	r3, r3
 8008194:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008196:	89fb      	ldrh	r3, [r7, #14]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3303      	adds	r3, #3
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	3202      	adds	r2, #2
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	3201      	adds	r2, #1
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
	return rv;
 80081dc:	68fb      	ldr	r3, [r7, #12]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	887a      	ldrh	r2, [r7, #2]
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	887b      	ldrh	r3, [r7, #2]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	887a      	ldrh	r2, [r7, #2]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	0a1b      	lsrs	r3, r3, #8
 800823a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	1c53      	adds	r3, r2, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	1c59      	adds	r1, r3, #1
 800829c:	6179      	str	r1, [r7, #20]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f1      	bne.n	8008292 <mem_cpy+0x1a>
	}
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	617a      	str	r2, [r7, #20]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3b01      	subs	r3, #1
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f3      	bne.n	80082ca <mem_set+0x10>
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	; 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	61fb      	str	r3, [r7, #28]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	61fa      	str	r2, [r7, #28]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	61ba      	str	r2, [r7, #24]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	1acb      	subs	r3, r1, r3
 800831c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3b01      	subs	r3, #1
 8008322:	607b      	str	r3, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <mem_cmp+0x40>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0eb      	beq.n	8008308 <mem_cmp+0x18>

	return r;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3724      	adds	r7, #36	; 0x24
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008348:	e002      	b.n	8008350 <chk_chr+0x12>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3301      	adds	r3, #1
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <chk_chr+0x26>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	4293      	cmp	r3, r2
 8008362:	d1f2      	bne.n	800834a <chk_chr+0xc>
	return *str;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	781b      	ldrb	r3, [r3, #0]
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e029      	b.n	80083dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <chk_lock+0xb4>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	4413      	add	r3, r2
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01d      	beq.n	80083d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008396:	4a24      	ldr	r2, [pc, #144]	; (8008428 <chk_lock+0xb4>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	4413      	add	r3, r2
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d116      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <chk_lock+0xb4>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d10c      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083bc:	4a1a      	ldr	r2, [pc, #104]	; (8008428 <chk_lock+0xb4>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4413      	add	r3, r2
 80083c4:	3308      	adds	r3, #8
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d102      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083d0:	e007      	b.n	80083e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d9d2      	bls.n	8008388 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d109      	bne.n	80083fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <chk_lock+0x80>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d101      	bne.n	80083f8 <chk_lock+0x84>
 80083f4:	2300      	movs	r3, #0
 80083f6:	e010      	b.n	800841a <chk_lock+0xa6>
 80083f8:	2312      	movs	r3, #18
 80083fa:	e00e      	b.n	800841a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <chk_lock+0xa0>
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <chk_lock+0xb4>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	4413      	add	r3, r2
 800840a:	330c      	adds	r3, #12
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d101      	bne.n	8008418 <chk_lock+0xa4>
 8008414:	2310      	movs	r3, #16
 8008416:	e000      	b.n	800841a <chk_lock+0xa6>
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000180 	.word	0x20000180

0800842c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	e002      	b.n	800843e <enq_lock+0x12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d806      	bhi.n	8008452 <enq_lock+0x26>
 8008444:	4a09      	ldr	r2, [pc, #36]	; (800846c <enq_lock+0x40>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	4413      	add	r3, r2
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f2      	bne.n	8008438 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b02      	cmp	r3, #2
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000180 	.word	0x20000180

08008470 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e01f      	b.n	80084c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008480:	4a41      	ldr	r2, [pc, #260]	; (8008588 <inc_lock+0x118>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	4413      	add	r3, r2
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d113      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008492:	4a3d      	ldr	r2, [pc, #244]	; (8008588 <inc_lock+0x118>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	3304      	adds	r3, #4
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d109      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084a6:	4a38      	ldr	r2, [pc, #224]	; (8008588 <inc_lock+0x118>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	3308      	adds	r3, #8
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d006      	beq.n	80084c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d9dc      	bls.n	8008480 <inc_lock+0x10>
 80084c6:	e000      	b.n	80084ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80084c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d132      	bne.n	8008536 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <inc_lock+0x6c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d806      	bhi.n	80084f0 <inc_lock+0x80>
 80084e2:	4a29      	ldr	r2, [pc, #164]	; (8008588 <inc_lock+0x118>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4413      	add	r3, r2
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f2      	bne.n	80084d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d101      	bne.n	80084fa <inc_lock+0x8a>
 80084f6:	2300      	movs	r3, #0
 80084f8:	e040      	b.n	800857c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4922      	ldr	r1, [pc, #136]	; (8008588 <inc_lock+0x118>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	440b      	add	r3, r1
 8008506:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	491e      	ldr	r1, [pc, #120]	; (8008588 <inc_lock+0x118>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	440b      	add	r3, r1
 8008514:	3304      	adds	r3, #4
 8008516:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	491a      	ldr	r1, [pc, #104]	; (8008588 <inc_lock+0x118>)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	440b      	add	r3, r1
 8008524:	3308      	adds	r3, #8
 8008526:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <inc_lock+0x118>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	4413      	add	r3, r2
 8008530:	330c      	adds	r3, #12
 8008532:	2200      	movs	r2, #0
 8008534:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <inc_lock+0xe0>
 800853c:	4a12      	ldr	r2, [pc, #72]	; (8008588 <inc_lock+0x118>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4413      	add	r3, r2
 8008544:	330c      	adds	r3, #12
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <inc_lock+0xe0>
 800854c:	2300      	movs	r3, #0
 800854e:	e015      	b.n	800857c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d108      	bne.n	8008568 <inc_lock+0xf8>
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <inc_lock+0x118>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	4413      	add	r3, r2
 800855e:	330c      	adds	r3, #12
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	e001      	b.n	800856c <inc_lock+0xfc>
 8008568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800856c:	4906      	ldr	r1, [pc, #24]	; (8008588 <inc_lock+0x118>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	440b      	add	r3, r1
 8008574:	330c      	adds	r3, #12
 8008576:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20000180 	.word	0x20000180

0800858c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e010      	b.n	80085bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800859a:	4a0d      	ldr	r2, [pc, #52]	; (80085d0 <clear_lock+0x44>)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	4413      	add	r3, r2
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d105      	bne.n	80085b6 <clear_lock+0x2a>
 80085aa:	4a09      	ldr	r2, [pc, #36]	; (80085d0 <clear_lock+0x44>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d9eb      	bls.n	800859a <clear_lock+0xe>
	}
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000180 	.word	0x20000180

080085d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d034      	beq.n	8008652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7858      	ldrb	r0, [r3, #1]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085f8:	2301      	movs	r3, #1
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	f7ff fd7c 	bl	80080f8 <disk_write>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008606:	2301      	movs	r3, #1
 8008608:	73fb      	strb	r3, [r7, #15]
 800860a:	e022      	b.n	8008652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	429a      	cmp	r2, r3
 8008620:	d217      	bcs.n	8008652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	789b      	ldrb	r3, [r3, #2]
 8008626:	613b      	str	r3, [r7, #16]
 8008628:	e010      	b.n	800864c <sync_window+0x78>
					wsect += fs->fsize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7858      	ldrb	r0, [r3, #1]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800863e:	2301      	movs	r3, #1
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	f7ff fd59 	bl	80080f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3b01      	subs	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d8eb      	bhi.n	800862a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d01b      	beq.n	80086ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ffad 	bl	80085d4 <sync_window>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d113      	bne.n	80086ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7858      	ldrb	r0, [r3, #1]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800868e:	2301      	movs	r3, #1
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	f7ff fd11 	bl	80080b8 <disk_read>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800869c:	f04f 33ff 	mov.w	r3, #4294967295
 80086a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	3b02      	subs	r3, #2
 80086c4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	3b02      	subs	r3, #2
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d301      	bcc.n	80086d6 <clust2sect+0x20>
 80086d2:	2300      	movs	r3, #0
 80086d4:	e008      	b.n	80086e8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	895b      	ldrh	r3, [r3, #10]
 80086da:	461a      	mov	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	fb03 f202 	mul.w	r2, r3, r2
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	4413      	add	r3, r2
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d904      	bls.n	8008714 <get_fat+0x20>
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d302      	bcc.n	800871a <get_fat+0x26>
		val = 1;	/* Internal error */
 8008714:	2301      	movs	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e0bb      	b.n	8008892 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800871a:	f04f 33ff 	mov.w	r3, #4294967295
 800871e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b03      	cmp	r3, #3
 8008726:	f000 8083 	beq.w	8008830 <get_fat+0x13c>
 800872a:	2b03      	cmp	r3, #3
 800872c:	f300 80a7 	bgt.w	800887e <get_fat+0x18a>
 8008730:	2b01      	cmp	r3, #1
 8008732:	d002      	beq.n	800873a <get_fat+0x46>
 8008734:	2b02      	cmp	r3, #2
 8008736:	d056      	beq.n	80087e6 <get_fat+0xf2>
 8008738:	e0a1      	b.n	800887e <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4413      	add	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	899b      	ldrh	r3, [r3, #12]
 8008750:	4619      	mov	r1, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	fbb3 f3f1 	udiv	r3, r3, r1
 8008758:	4413      	add	r3, r2
 800875a:	4619      	mov	r1, r3
 800875c:	6938      	ldr	r0, [r7, #16]
 800875e:	f7ff ff7d 	bl	800865c <move_window>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	f040 808d 	bne.w	8008884 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	60fa      	str	r2, [r7, #12]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	8992      	ldrh	r2, [r2, #12]
 8008774:	fbb3 f1f2 	udiv	r1, r3, r2
 8008778:	fb01 f202 	mul.w	r2, r1, r2
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4413      	add	r3, r2
 8008782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008786:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	899b      	ldrh	r3, [r3, #12]
 8008790:	4619      	mov	r1, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	fbb3 f3f1 	udiv	r3, r3, r1
 8008798:	4413      	add	r3, r2
 800879a:	4619      	mov	r1, r3
 800879c:	6938      	ldr	r0, [r7, #16]
 800879e:	f7ff ff5d 	bl	800865c <move_window>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d16f      	bne.n	8008888 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	899b      	ldrh	r3, [r3, #12]
 80087ac:	461a      	mov	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b4:	fb01 f202 	mul.w	r2, r1, r2
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4413      	add	r3, r2
 80087be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	461a      	mov	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <get_fat+0xe8>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	091b      	lsrs	r3, r3, #4
 80087da:	e002      	b.n	80087e2 <get_fat+0xee>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e2:	617b      	str	r3, [r7, #20]
			break;
 80087e4:	e055      	b.n	8008892 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	899b      	ldrh	r3, [r3, #12]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80087fa:	4413      	add	r3, r2
 80087fc:	4619      	mov	r1, r3
 80087fe:	6938      	ldr	r0, [r7, #16]
 8008800:	f7ff ff2c 	bl	800865c <move_window>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d140      	bne.n	800888c <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	8992      	ldrh	r2, [r2, #12]
 8008818:	fbb3 f0f2 	udiv	r0, r3, r2
 800881c:	fb00 f202 	mul.w	r2, r0, r2
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	440b      	add	r3, r1
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fca5 	bl	8008174 <ld_word>
 800882a:	4603      	mov	r3, r0
 800882c:	617b      	str	r3, [r7, #20]
			break;
 800882e:	e030      	b.n	8008892 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	899b      	ldrh	r3, [r3, #12]
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	b29b      	uxth	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	fbb3 f3f1 	udiv	r3, r3, r1
 8008844:	4413      	add	r3, r2
 8008846:	4619      	mov	r1, r3
 8008848:	6938      	ldr	r0, [r7, #16]
 800884a:	f7ff ff07 	bl	800865c <move_window>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d11d      	bne.n	8008890 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	8992      	ldrh	r2, [r2, #12]
 8008862:	fbb3 f0f2 	udiv	r0, r3, r2
 8008866:	fb00 f202 	mul.w	r2, r0, r2
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	440b      	add	r3, r1
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fc98 	bl	80081a4 <ld_dword>
 8008874:	4603      	mov	r3, r0
 8008876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800887a:	617b      	str	r3, [r7, #20]
			break;
 800887c:	e009      	b.n	8008892 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800887e:	2301      	movs	r3, #1
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e006      	b.n	8008892 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008884:	bf00      	nop
 8008886:	e004      	b.n	8008892 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008888:	bf00      	nop
 800888a:	e002      	b.n	8008892 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800888c:	bf00      	nop
 800888e:	e000      	b.n	8008892 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008890:	bf00      	nop
		}
	}

	return val;
 8008892:	697b      	ldr	r3, [r7, #20]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088a8:	2302      	movs	r3, #2
 80088aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	f240 8102 	bls.w	8008ab8 <put_fat+0x21c>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	f080 80fc 	bcs.w	8008ab8 <put_fat+0x21c>
		switch (fs->fs_type) {
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	f000 80b6 	beq.w	8008a36 <put_fat+0x19a>
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	f300 80fd 	bgt.w	8008aca <put_fat+0x22e>
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d003      	beq.n	80088dc <put_fat+0x40>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	f000 8083 	beq.w	80089e0 <put_fat+0x144>
 80088da:	e0f6      	b.n	8008aca <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	61bb      	str	r3, [r7, #24]
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4413      	add	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	899b      	ldrh	r3, [r3, #12]
 80088f2:	4619      	mov	r1, r3
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088fa:	4413      	add	r3, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff feac 	bl	800865c <move_window>
 8008904:	4603      	mov	r3, r0
 8008906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008908:	7ffb      	ldrb	r3, [r7, #31]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 80d6 	bne.w	8008abc <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	61ba      	str	r2, [r7, #24]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	8992      	ldrh	r2, [r2, #12]
 8008920:	fbb3 f0f2 	udiv	r0, r3, r2
 8008924:	fb00 f202 	mul.w	r2, r0, r2
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	440b      	add	r3, r1
 800892c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00d      	beq.n	8008954 <put_fat+0xb8>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b25b      	sxtb	r3, r3
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	b25a      	sxtb	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	b25b      	sxtb	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b25b      	sxtb	r3, r3
 8008950:	b2db      	uxtb	r3, r3
 8008952:	e001      	b.n	8008958 <put_fat+0xbc>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	899b      	ldrh	r3, [r3, #12]
 800896a:	4619      	mov	r1, r3
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008972:	4413      	add	r3, r2
 8008974:	4619      	mov	r1, r3
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff fe70 	bl	800865c <move_window>
 800897c:	4603      	mov	r3, r0
 800897e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008980:	7ffb      	ldrb	r3, [r7, #31]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f040 809c 	bne.w	8008ac0 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	461a      	mov	r2, r3
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	fbb3 f0f2 	udiv	r0, r3, r2
 800899a:	fb00 f202 	mul.w	r2, r0, r2
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	440b      	add	r3, r1
 80089a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <put_fat+0x11a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	091b      	lsrs	r3, r3, #4
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	e00e      	b.n	80089d4 <put_fat+0x138>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	f023 030f 	bic.w	r3, r3, #15
 80089c0:	b25a      	sxtb	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	b25b      	sxtb	r3, r3
 80089c8:	f003 030f 	and.w	r3, r3, #15
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	4313      	orrs	r3, r2
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2201      	movs	r2, #1
 80089dc:	70da      	strb	r2, [r3, #3]
			break;
 80089de:	e074      	b.n	8008aca <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	899b      	ldrh	r3, [r3, #12]
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	4619      	mov	r1, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80089f4:	4413      	add	r3, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7ff fe2f 	bl	800865c <move_window>
 80089fe:	4603      	mov	r3, r0
 8008a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a02:	7ffb      	ldrb	r3, [r7, #31]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d15d      	bne.n	8008ac4 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	8992      	ldrh	r2, [r2, #12]
 8008a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a1a:	fb00 f202 	mul.w	r2, r0, r2
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	440b      	add	r3, r1
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	b292      	uxth	r2, r2
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff fbde 	bl	80081ea <st_word>
			fs->wflag = 1;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	70da      	strb	r2, [r3, #3]
			break;
 8008a34:	e049      	b.n	8008aca <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	899b      	ldrh	r3, [r3, #12]
 8008a3e:	089b      	lsrs	r3, r3, #2
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a4a:	4413      	add	r3, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fe04 	bl	800865c <move_window>
 8008a54:	4603      	mov	r3, r0
 8008a56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a58:	7ffb      	ldrb	r3, [r7, #31]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d134      	bne.n	8008ac8 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	8992      	ldrh	r2, [r2, #12]
 8008a72:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a76:	fb00 f202 	mul.w	r2, r0, r2
 8008a7a:	1a9b      	subs	r3, r3, r2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fb90 	bl	80081a4 <ld_dword>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a8a:	4323      	orrs	r3, r4
 8008a8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	8992      	ldrh	r2, [r2, #12]
 8008a9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aa0:	fb00 f202 	mul.w	r2, r0, r2
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff fbb8 	bl	8008220 <st_dword>
			fs->wflag = 1;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	70da      	strb	r2, [r3, #3]
			break;
 8008ab6:	e008      	b.n	8008aca <put_fat+0x22e>
		}
	}
 8008ab8:	bf00      	nop
 8008aba:	e006      	b.n	8008aca <put_fat+0x22e>
			if (res != FR_OK) break;
 8008abc:	bf00      	nop
 8008abe:	e004      	b.n	8008aca <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ac8:	bf00      	nop
	return res;
 8008aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3724      	adds	r7, #36	; 0x24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd90      	pop	{r4, r7, pc}

08008ad4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d904      	bls.n	8008afa <remove_chain+0x26>
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d301      	bcc.n	8008afe <remove_chain+0x2a>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e04b      	b.n	8008b96 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00c      	beq.n	8008b1e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	69b8      	ldr	r0, [r7, #24]
 8008b0c:	f7ff fec6 	bl	800889c <put_fat>
 8008b10:	4603      	mov	r3, r0
 8008b12:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b14:	7ffb      	ldrb	r3, [r7, #31]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <remove_chain+0x4a>
 8008b1a:	7ffb      	ldrb	r3, [r7, #31]
 8008b1c:	e03b      	b.n	8008b96 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fde7 	bl	80086f4 <get_fat>
 8008b26:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d031      	beq.n	8008b92 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <remove_chain+0x64>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e02e      	b.n	8008b96 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d101      	bne.n	8008b44 <remove_chain+0x70>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e028      	b.n	8008b96 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b44:	2200      	movs	r2, #0
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	69b8      	ldr	r0, [r7, #24]
 8008b4a:	f7ff fea7 	bl	800889c <put_fat>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <remove_chain+0x88>
 8008b58:	7ffb      	ldrb	r3, [r7, #31]
 8008b5a:	e01c      	b.n	8008b96 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	3b02      	subs	r3, #2
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d20b      	bcs.n	8008b82 <remove_chain+0xae>
			fs->free_clst++;
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	791b      	ldrb	r3, [r3, #4]
 8008b78:	f043 0301 	orr.w	r3, r3, #1
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3c6      	bcc.n	8008b1e <remove_chain+0x4a>
 8008b90:	e000      	b.n	8008b94 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b92:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b088      	sub	sp, #32
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <create_chain+0x2c>
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d31b      	bcc.n	8008c02 <create_chain+0x64>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	61bb      	str	r3, [r7, #24]
 8008bce:	e018      	b.n	8008c02 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fd8e 	bl	80086f4 <get_fat>
 8008bd8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d801      	bhi.n	8008be4 <create_chain+0x46>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e070      	b.n	8008cc6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bea:	d101      	bne.n	8008bf0 <create_chain+0x52>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	e06a      	b.n	8008cc6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d201      	bcs.n	8008bfe <create_chain+0x60>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	e063      	b.n	8008cc6 <create_chain+0x128>
		scl = clst;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d307      	bcc.n	8008c26 <create_chain+0x88>
				ncl = 2;
 8008c16:	2302      	movs	r3, #2
 8008c18:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d901      	bls.n	8008c26 <create_chain+0x88>
 8008c22:	2300      	movs	r3, #0
 8008c24:	e04f      	b.n	8008cc6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c26:	69f9      	ldr	r1, [r7, #28]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fd63 	bl	80086f4 <get_fat>
 8008c2e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00e      	beq.n	8008c54 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d003      	beq.n	8008c44 <create_chain+0xa6>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d101      	bne.n	8008c48 <create_chain+0xaa>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	e03e      	b.n	8008cc6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d1da      	bne.n	8008c06 <create_chain+0x68>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e038      	b.n	8008cc6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c54:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	69f9      	ldr	r1, [r7, #28]
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f7ff fe1d 	bl	800889c <put_fat>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <create_chain+0xe2>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6938      	ldr	r0, [r7, #16]
 8008c78:	f7ff fe10 	bl	800889c <put_fat>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d116      	bne.n	8008cb4 <create_chain+0x116>
		fs->last_clst = ncl;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	3b02      	subs	r3, #2
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d804      	bhi.n	8008ca4 <create_chain+0x106>
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	1e5a      	subs	r2, r3, #1
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	711a      	strb	r2, [r3, #4]
 8008cb2:	e007      	b.n	8008cc4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d102      	bne.n	8008cc0 <create_chain+0x122>
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	e000      	b.n	8008cc2 <create_chain+0x124>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b087      	sub	sp, #28
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	899b      	ldrh	r3, [r3, #12]
 8008cea:	461a      	mov	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	8952      	ldrh	r2, [r2, #10]
 8008cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	1d1a      	adds	r2, r3, #4
 8008d00:	613a      	str	r2, [r7, #16]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <clmt_clust+0x42>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e010      	b.n	8008d32 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d307      	bcc.n	8008d28 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3304      	adds	r3, #4
 8008d24:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d26:	e7e9      	b.n	8008cfc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008d28:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	4413      	add	r3, r2
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b086      	sub	sp, #24
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d54:	d204      	bcs.n	8008d60 <dir_sdi+0x22>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	f003 031f 	and.w	r3, r3, #31
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d60:	2302      	movs	r3, #2
 8008d62:	e071      	b.n	8008e48 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <dir_sdi+0x46>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d902      	bls.n	8008d84 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10c      	bne.n	8008da4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	095b      	lsrs	r3, r3, #5
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	8912      	ldrh	r2, [r2, #8]
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d301      	bcc.n	8008d9a <dir_sdi+0x5c>
 8008d96:	2302      	movs	r3, #2
 8008d98:	e056      	b.n	8008e48 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	61da      	str	r2, [r3, #28]
 8008da2:	e02d      	b.n	8008e00 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	895b      	ldrh	r3, [r3, #10]
 8008da8:	461a      	mov	r2, r3
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	899b      	ldrh	r3, [r3, #12]
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
 8008db2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008db4:	e019      	b.n	8008dea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fc9a 	bl	80086f4 <get_fat>
 8008dc0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d101      	bne.n	8008dce <dir_sdi+0x90>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e03c      	b.n	8008e48 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d904      	bls.n	8008dde <dir_sdi+0xa0>
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d301      	bcc.n	8008de2 <dir_sdi+0xa4>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e032      	b.n	8008e48 <dir_sdi+0x10a>
			ofs -= csz;
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d2e1      	bcs.n	8008db6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008df2:	6979      	ldr	r1, [r7, #20]
 8008df4:	6938      	ldr	r0, [r7, #16]
 8008df6:	f7ff fc5e 	bl	80086b6 <clust2sect>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <dir_sdi+0xd4>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e01a      	b.n	8008e48 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69da      	ldr	r2, [r3, #28]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e22:	441a      	add	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	899b      	ldrh	r3, [r3, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e3a:	fb00 f202 	mul.w	r2, r0, r2
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	18ca      	adds	r2, r1, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	3320      	adds	r3, #32
 8008e66:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <dir_next+0x28>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e76:	d301      	bcc.n	8008e7c <dir_next+0x2c>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	e0bb      	b.n	8008ff4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	899b      	ldrh	r3, [r3, #12]
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e88:	fb01 f202 	mul.w	r2, r1, r2
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 809d 	bne.w	8008fce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	8912      	ldrh	r2, [r2, #8]
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	f0c0 808d 	bcc.w	8008fce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	61da      	str	r2, [r3, #28]
 8008eba:	2304      	movs	r3, #4
 8008ebc:	e09a      	b.n	8008ff4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	899b      	ldrh	r3, [r3, #12]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	8952      	ldrh	r2, [r2, #10]
 8008ece:	3a01      	subs	r2, #1
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d17b      	bne.n	8008fce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7ff fc08 	bl	80086f4 <get_fat>
 8008ee4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d801      	bhi.n	8008ef0 <dir_next+0xa0>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e081      	b.n	8008ff4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d101      	bne.n	8008efc <dir_next+0xac>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e07b      	b.n	8008ff4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d359      	bcc.n	8008fba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	61da      	str	r2, [r3, #28]
 8008f12:	2304      	movs	r3, #4
 8008f14:	e06e      	b.n	8008ff4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7ff fe3d 	bl	8008b9e <create_chain>
 8008f24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <dir_next+0xe0>
 8008f2c:	2307      	movs	r3, #7
 8008f2e:	e061      	b.n	8008ff4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <dir_next+0xea>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e05c      	b.n	8008ff4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d101      	bne.n	8008f46 <dir_next+0xf6>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e056      	b.n	8008ff4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fb44 	bl	80085d4 <sync_window>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <dir_next+0x106>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e04e      	b.n	8008ff4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	899b      	ldrh	r3, [r3, #12]
 8008f60:	461a      	mov	r2, r3
 8008f62:	2100      	movs	r1, #0
 8008f64:	f7ff f9a9 	bl	80082ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	6979      	ldr	r1, [r7, #20]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f7ff fba1 	bl	80086b6 <clust2sect>
 8008f74:	4602      	mov	r2, r0
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	635a      	str	r2, [r3, #52]	; 0x34
 8008f7a:	e012      	b.n	8008fa2 <dir_next+0x152>
						fs->wflag = 1;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff fb26 	bl	80085d4 <sync_window>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <dir_next+0x142>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e030      	b.n	8008ff4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	3301      	adds	r3, #1
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	895b      	ldrh	r3, [r3, #10]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d3e6      	bcc.n	8008f7c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fc0:	6979      	ldr	r1, [r7, #20]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fb77 	bl	80086b6 <clust2sect>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	899b      	ldrh	r3, [r3, #12]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fe6:	fb00 f202 	mul.w	r2, r0, r2
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	18ca      	adds	r2, r1, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fe95 	bl	8008d3e <dir_sdi>
 8009014:	4603      	mov	r3, r0
 8009016:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d12b      	bne.n	8009076 <dir_alloc+0x7a>
		n = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	4619      	mov	r1, r3
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff fb17 	bl	800865c <move_window>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11d      	bne.n	8009074 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a1b      	ldr	r3, [r3, #32]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2be5      	cmp	r3, #229	; 0xe5
 8009040:	d004      	beq.n	800904c <dir_alloc+0x50>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d107      	bne.n	800905c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	3301      	adds	r3, #1
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d102      	bne.n	8009060 <dir_alloc+0x64>
 800905a:	e00c      	b.n	8009076 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009060:	2101      	movs	r1, #1
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fef4 	bl	8008e50 <dir_next>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0d7      	beq.n	8009022 <dir_alloc+0x26>
 8009072:	e000      	b.n	8009076 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009074:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d101      	bne.n	8009080 <dir_alloc+0x84>
 800907c:	2307      	movs	r3, #7
 800907e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	331a      	adds	r3, #26
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff f86b 	bl	8008174 <ld_word>
 800909e:	4603      	mov	r3, r0
 80090a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d109      	bne.n	80090be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3314      	adds	r3, #20
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff f860 	bl	8008174 <ld_word>
 80090b4:	4603      	mov	r3, r0
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	331a      	adds	r3, #26
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	b292      	uxth	r2, r2
 80090dc:	4611      	mov	r1, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f883 	bl	80081ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d109      	bne.n	8009100 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f103 0214 	add.w	r2, r3, #20
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	0c1b      	lsrs	r3, r3, #16
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7ff f875 	bl	80081ea <st_word>
	}
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	331a      	adds	r3, #26
 8009116:	4618      	mov	r0, r3
 8009118:	f7ff f82c 	bl	8008174 <ld_word>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <cmp_lfn+0x1e>
 8009122:	2300      	movs	r3, #0
 8009124:	e059      	b.n	80091da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800912e:	1e5a      	subs	r2, r3, #1
 8009130:	4613      	mov	r3, r2
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800913c:	2301      	movs	r3, #1
 800913e:	81fb      	strh	r3, [r7, #14]
 8009140:	2300      	movs	r3, #0
 8009142:	613b      	str	r3, [r7, #16]
 8009144:	e033      	b.n	80091ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009146:	4a27      	ldr	r2, [pc, #156]	; (80091e4 <cmp_lfn+0xdc>)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4413      	add	r3, r2
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	4413      	add	r3, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff f80d 	bl	8008174 <ld_word>
 800915a:	4603      	mov	r3, r0
 800915c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01a      	beq.n	800919a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2bfe      	cmp	r3, #254	; 0xfe
 8009168:	d812      	bhi.n	8009190 <cmp_lfn+0x88>
 800916a:	89bb      	ldrh	r3, [r7, #12]
 800916c:	4618      	mov	r0, r3
 800916e:	f001 ff6d 	bl	800b04c <ff_wtoupper>
 8009172:	4603      	mov	r3, r0
 8009174:	461c      	mov	r4, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	617a      	str	r2, [r7, #20]
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f001 ff61 	bl	800b04c <ff_wtoupper>
 800918a:	4603      	mov	r3, r0
 800918c:	429c      	cmp	r4, r3
 800918e:	d001      	beq.n	8009194 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009190:	2300      	movs	r3, #0
 8009192:	e022      	b.n	80091da <cmp_lfn+0xd2>
			}
			wc = uc;
 8009194:	89bb      	ldrh	r3, [r7, #12]
 8009196:	81fb      	strh	r3, [r7, #14]
 8009198:	e006      	b.n	80091a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800919a:	89bb      	ldrh	r3, [r7, #12]
 800919c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d001      	beq.n	80091a8 <cmp_lfn+0xa0>
 80091a4:	2300      	movs	r3, #0
 80091a6:	e018      	b.n	80091da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	3301      	adds	r3, #1
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b0c      	cmp	r3, #12
 80091b2:	d9c8      	bls.n	8009146 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <cmp_lfn+0xd0>
 80091c0:	89fb      	ldrh	r3, [r7, #14]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d008      	beq.n	80091d8 <cmp_lfn+0xd0>
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <cmp_lfn+0xd0>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e000      	b.n	80091da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80091d8:	2301      	movs	r3, #1
}
 80091da:	4618      	mov	r0, r3
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd90      	pop	{r4, r7, pc}
 80091e2:	bf00      	nop
 80091e4:	0800cab4 	.word	0x0800cab4

080091e8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	331a      	adds	r3, #26
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe ffbc 	bl	8008174 <ld_word>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <pick_lfn+0x1e>
 8009202:	2300      	movs	r3, #0
 8009204:	e04d      	b.n	80092a2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920e:	1e5a      	subs	r2, r3, #1
 8009210:	4613      	mov	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800921c:	2301      	movs	r3, #1
 800921e:	81fb      	strh	r3, [r7, #14]
 8009220:	2300      	movs	r3, #0
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	e028      	b.n	8009278 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009226:	4a21      	ldr	r2, [pc, #132]	; (80092ac <pick_lfn+0xc4>)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	4413      	add	r3, r2
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	4413      	add	r3, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe ff9d 	bl	8008174 <ld_word>
 800923a:	4603      	mov	r3, r0
 800923c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00f      	beq.n	8009264 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2bfe      	cmp	r3, #254	; 0xfe
 8009248:	d901      	bls.n	800924e <pick_lfn+0x66>
 800924a:	2300      	movs	r3, #0
 800924c:	e029      	b.n	80092a2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800924e:	89bb      	ldrh	r3, [r7, #12]
 8009250:	81fb      	strh	r3, [r7, #14]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	617a      	str	r2, [r7, #20]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	4413      	add	r3, r2
 800925e:	89fa      	ldrh	r2, [r7, #14]
 8009260:	801a      	strh	r2, [r3, #0]
 8009262:	e006      	b.n	8009272 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009264:	89bb      	ldrh	r3, [r7, #12]
 8009266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800926a:	4293      	cmp	r3, r2
 800926c:	d001      	beq.n	8009272 <pick_lfn+0x8a>
 800926e:	2300      	movs	r3, #0
 8009270:	e017      	b.n	80092a2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	3301      	adds	r3, #1
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2b0c      	cmp	r3, #12
 800927c:	d9d3      	bls.n	8009226 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2bfe      	cmp	r3, #254	; 0xfe
 800928e:	d901      	bls.n	8009294 <pick_lfn+0xac>
 8009290:	2300      	movs	r3, #0
 8009292:	e006      	b.n	80092a2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	2200      	movs	r2, #0
 800929e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80092a0:	2301      	movs	r3, #1
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	0800cab4 	.word	0x0800cab4

080092b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4611      	mov	r1, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	460b      	mov	r3, r1
 80092c0:	71fb      	strb	r3, [r7, #7]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	330d      	adds	r3, #13
 80092ca:	79ba      	ldrb	r2, [r7, #6]
 80092cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	330b      	adds	r3, #11
 80092d2:	220f      	movs	r2, #15
 80092d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	330c      	adds	r3, #12
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	331a      	adds	r3, #26
 80092e2:	2100      	movs	r1, #0
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fe ff80 	bl	80081ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	4613      	mov	r3, r2
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	82fb      	strh	r3, [r7, #22]
 80092fe:	2300      	movs	r3, #0
 8009300:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009302:	8afb      	ldrh	r3, [r7, #22]
 8009304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009308:	4293      	cmp	r3, r2
 800930a:	d007      	beq.n	800931c <put_lfn+0x6c>
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	61fa      	str	r2, [r7, #28]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <put_lfn+0xcc>)
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	4413      	add	r3, r2
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	4413      	add	r3, r2
 800932a:	8afa      	ldrh	r2, [r7, #22]
 800932c:	4611      	mov	r1, r2
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe ff5b 	bl	80081ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009334:	8afb      	ldrh	r3, [r7, #22]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <put_lfn+0x90>
 800933a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800933e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	3301      	adds	r3, #1
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b0c      	cmp	r3, #12
 800934a:	d9da      	bls.n	8009302 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800934c:	8afb      	ldrh	r3, [r7, #22]
 800934e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009352:	4293      	cmp	r3, r2
 8009354:	d006      	beq.n	8009364 <put_lfn+0xb4>
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <put_lfn+0xbc>
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	79fa      	ldrb	r2, [r7, #7]
 8009370:	701a      	strb	r2, [r3, #0]
}
 8009372:	bf00      	nop
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	0800cab4 	.word	0x0800cab4

08009380 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08c      	sub	sp, #48	; 0x30
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800938e:	220b      	movs	r2, #11
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7fe ff70 	bl	8008278 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b05      	cmp	r3, #5
 800939c:	d92b      	bls.n	80093f6 <gen_numname+0x76>
		sr = seq;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80093a2:	e022      	b.n	80093ea <gen_numname+0x6a>
			wc = *lfn++;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	1c9a      	adds	r2, r3, #2
 80093a8:	607a      	str	r2, [r7, #4]
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80093ae:	2300      	movs	r3, #0
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093b2:	e017      	b.n	80093e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	005a      	lsls	r2, r3, #1
 80093b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	4413      	add	r3, r2
 80093c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80093c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093c4:	085b      	lsrs	r3, r3, #1
 80093c6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <gen_numname+0x5e>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80093d8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80093dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	3301      	adds	r3, #1
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	2b0f      	cmp	r3, #15
 80093e8:	d9e4      	bls.n	80093b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1d8      	bne.n	80093a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80093f6:	2307      	movs	r3, #7
 80093f8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	b2db      	uxtb	r3, r3
 8009404:	3330      	adds	r3, #48	; 0x30
 8009406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800940a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800940e:	2b39      	cmp	r3, #57	; 0x39
 8009410:	d904      	bls.n	800941c <gen_numname+0x9c>
 8009412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009416:	3307      	adds	r3, #7
 8009418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	1e5a      	subs	r2, r3, #1
 8009420:	62ba      	str	r2, [r7, #40]	; 0x28
 8009422:	3330      	adds	r3, #48	; 0x30
 8009424:	443b      	add	r3, r7
 8009426:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800942a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	091b      	lsrs	r3, r3, #4
 8009432:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1df      	bne.n	80093fa <gen_numname+0x7a>
	ns[i] = '~';
 800943a:	f107 0214 	add.w	r2, r7, #20
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	4413      	add	r3, r2
 8009442:	227e      	movs	r2, #126	; 0x7e
 8009444:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009446:	2300      	movs	r3, #0
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
 800944a:	e002      	b.n	8009452 <gen_numname+0xd2>
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	3301      	adds	r3, #1
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
 8009452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	429a      	cmp	r2, r3
 8009458:	d205      	bcs.n	8009466 <gen_numname+0xe6>
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	4413      	add	r3, r2
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b20      	cmp	r3, #32
 8009464:	d1f2      	bne.n	800944c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	2b07      	cmp	r3, #7
 800946a:	d807      	bhi.n	800947c <gen_numname+0xfc>
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	62ba      	str	r2, [r7, #40]	; 0x28
 8009472:	3330      	adds	r3, #48	; 0x30
 8009474:	443b      	add	r3, r7
 8009476:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800947a:	e000      	b.n	800947e <gen_numname+0xfe>
 800947c:	2120      	movs	r1, #32
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	627a      	str	r2, [r7, #36]	; 0x24
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	460a      	mov	r2, r1
 800948a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	2b07      	cmp	r3, #7
 8009490:	d9e9      	bls.n	8009466 <gen_numname+0xe6>
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	3730      	adds	r7, #48	; 0x30
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80094a8:	230b      	movs	r3, #11
 80094aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	0852      	lsrs	r2, r2, #1
 80094b2:	01db      	lsls	r3, r3, #7
 80094b4:	4313      	orrs	r3, r2
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	1c59      	adds	r1, r3, #1
 80094bc:	6079      	str	r1, [r7, #4]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	4413      	add	r3, r2
 80094c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	60bb      	str	r3, [r7, #8]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1ed      	bne.n	80094ac <sum_sfn+0x10>
	return sum;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80094e8:	2304      	movs	r3, #4
 80094ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80094f2:	23ff      	movs	r3, #255	; 0xff
 80094f4:	757b      	strb	r3, [r7, #21]
 80094f6:	23ff      	movs	r3, #255	; 0xff
 80094f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80094fa:	e081      	b.n	8009600 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	4619      	mov	r1, r3
 8009502:	6938      	ldr	r0, [r7, #16]
 8009504:	f7ff f8aa 	bl	800865c <move_window>
 8009508:	4603      	mov	r3, r0
 800950a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d17c      	bne.n	800960c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800951a:	7dbb      	ldrb	r3, [r7, #22]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009520:	2304      	movs	r3, #4
 8009522:	75fb      	strb	r3, [r7, #23]
 8009524:	e077      	b.n	8009616 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	330b      	adds	r3, #11
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009532:	73fb      	strb	r3, [r7, #15]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7bfa      	ldrb	r2, [r7, #15]
 8009538:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800953a:	7dbb      	ldrb	r3, [r7, #22]
 800953c:	2be5      	cmp	r3, #229	; 0xe5
 800953e:	d00e      	beq.n	800955e <dir_read+0x80>
 8009540:	7dbb      	ldrb	r3, [r7, #22]
 8009542:	2b2e      	cmp	r3, #46	; 0x2e
 8009544:	d00b      	beq.n	800955e <dir_read+0x80>
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	f023 0320 	bic.w	r3, r3, #32
 800954c:	2b08      	cmp	r3, #8
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	4293      	cmp	r3, r2
 800955c:	d002      	beq.n	8009564 <dir_read+0x86>
				ord = 0xFF;
 800955e:	23ff      	movs	r3, #255	; 0xff
 8009560:	757b      	strb	r3, [r7, #21]
 8009562:	e044      	b.n	80095ee <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d12f      	bne.n	80095ca <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800956a:	7dbb      	ldrb	r3, [r7, #22]
 800956c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00d      	beq.n	8009590 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	7b5b      	ldrb	r3, [r3, #13]
 800957a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009582:	75bb      	strb	r3, [r7, #22]
 8009584:	7dbb      	ldrb	r3, [r7, #22]
 8009586:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009590:	7dba      	ldrb	r2, [r7, #22]
 8009592:	7d7b      	ldrb	r3, [r7, #21]
 8009594:	429a      	cmp	r2, r3
 8009596:	d115      	bne.n	80095c4 <dir_read+0xe6>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	330d      	adds	r3, #13
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	7d3a      	ldrb	r2, [r7, #20]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d10e      	bne.n	80095c4 <dir_read+0xe6>
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7ff fe19 	bl	80091e8 <pick_lfn>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <dir_read+0xe6>
 80095bc:	7d7b      	ldrb	r3, [r7, #21]
 80095be:	3b01      	subs	r3, #1
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	e000      	b.n	80095c6 <dir_read+0xe8>
 80095c4:	23ff      	movs	r3, #255	; 0xff
 80095c6:	757b      	strb	r3, [r7, #21]
 80095c8:	e011      	b.n	80095ee <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80095ca:	7d7b      	ldrb	r3, [r7, #21]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d109      	bne.n	80095e4 <dir_read+0x106>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff ff61 	bl	800949c <sum_sfn>
 80095da:	4603      	mov	r3, r0
 80095dc:	461a      	mov	r2, r3
 80095de:	7d3b      	ldrb	r3, [r7, #20]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d015      	beq.n	8009610 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80095ec:	e010      	b.n	8009610 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80095ee:	2100      	movs	r1, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fc2d 	bl	8008e50 <dir_next>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d109      	bne.n	8009614 <dir_read+0x136>
	while (dp->sect) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f47f af79 	bne.w	80094fc <dir_read+0x1e>
 800960a:	e004      	b.n	8009616 <dir_read+0x138>
		if (res != FR_OK) break;
 800960c:	bf00      	nop
 800960e:	e002      	b.n	8009616 <dir_read+0x138>
					break;
 8009610:	bf00      	nop
 8009612:	e000      	b.n	8009616 <dir_read+0x138>
		if (res != FR_OK) break;
 8009614:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <dir_read+0x144>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	61da      	str	r2, [r3, #28]
	return res;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff fb7e 	bl	8008d3e <dir_sdi>
 8009642:	4603      	mov	r3, r0
 8009644:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <dir_find+0x24>
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	e0a9      	b.n	80097a4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009650:	23ff      	movs	r3, #255	; 0xff
 8009652:	753b      	strb	r3, [r7, #20]
 8009654:	7d3b      	ldrb	r3, [r7, #20]
 8009656:	757b      	strb	r3, [r7, #21]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	4619      	mov	r1, r3
 8009666:	6938      	ldr	r0, [r7, #16]
 8009668:	f7fe fff8 	bl	800865c <move_window>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 8090 	bne.w	8009798 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d102      	bne.n	800968c <dir_find+0x60>
 8009686:	2304      	movs	r3, #4
 8009688:	75fb      	strb	r3, [r7, #23]
 800968a:	e08a      	b.n	80097a2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	330b      	adds	r3, #11
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009698:	73fb      	strb	r3, [r7, #15]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	7bfa      	ldrb	r2, [r7, #15]
 800969e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80096a0:	7dbb      	ldrb	r3, [r7, #22]
 80096a2:	2be5      	cmp	r3, #229	; 0xe5
 80096a4:	d007      	beq.n	80096b6 <dir_find+0x8a>
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <dir_find+0x98>
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	2b0f      	cmp	r3, #15
 80096b4:	d006      	beq.n	80096c4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096b6:	23ff      	movs	r3, #255	; 0xff
 80096b8:	757b      	strb	r3, [r7, #21]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295
 80096c0:	631a      	str	r2, [r3, #48]	; 0x30
 80096c2:	e05e      	b.n	8009782 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d136      	bne.n	8009738 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d154      	bne.n	8009782 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80096d8:	7dbb      	ldrb	r3, [r7, #22]
 80096da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00d      	beq.n	80096fe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	7b5b      	ldrb	r3, [r3, #13]
 80096e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80096ea:	7dbb      	ldrb	r3, [r7, #22]
 80096ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f0:	75bb      	strb	r3, [r7, #22]
 80096f2:	7dbb      	ldrb	r3, [r7, #22]
 80096f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80096fe:	7dba      	ldrb	r2, [r7, #22]
 8009700:	7d7b      	ldrb	r3, [r7, #21]
 8009702:	429a      	cmp	r2, r3
 8009704:	d115      	bne.n	8009732 <dir_find+0x106>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	330d      	adds	r3, #13
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	7d3a      	ldrb	r2, [r7, #20]
 8009710:	429a      	cmp	r2, r3
 8009712:	d10e      	bne.n	8009732 <dir_find+0x106>
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7ff fcf2 	bl	8009108 <cmp_lfn>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <dir_find+0x106>
 800972a:	7d7b      	ldrb	r3, [r7, #21]
 800972c:	3b01      	subs	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	e000      	b.n	8009734 <dir_find+0x108>
 8009732:	23ff      	movs	r3, #255	; 0xff
 8009734:	757b      	strb	r3, [r7, #21]
 8009736:	e024      	b.n	8009782 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009738:	7d7b      	ldrb	r3, [r7, #21]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <dir_find+0x126>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff feaa 	bl	800949c <sum_sfn>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	7d3b      	ldrb	r3, [r7, #20]
 800974e:	4293      	cmp	r3, r2
 8009750:	d024      	beq.n	800979c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <dir_find+0x14a>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a18      	ldr	r0, [r3, #32]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3324      	adds	r3, #36	; 0x24
 8009768:	220b      	movs	r2, #11
 800976a:	4619      	mov	r1, r3
 800976c:	f7fe fdc0 	bl	80082f0 <mem_cmp>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d014      	beq.n	80097a0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009776:	23ff      	movs	r3, #255	; 0xff
 8009778:	757b      	strb	r3, [r7, #21]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f04f 32ff 	mov.w	r2, #4294967295
 8009780:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009782:	2100      	movs	r1, #0
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fb63 	bl	8008e50 <dir_next>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f af65 	beq.w	8009660 <dir_find+0x34>
 8009796:	e004      	b.n	80097a2 <dir_find+0x176>
		if (res != FR_OK) break;
 8009798:	bf00      	nop
 800979a:	e002      	b.n	80097a2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80097a0:	bf00      	nop

	return res;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	; 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <dir_register+0x20>
 80097c8:	2306      	movs	r3, #6
 80097ca:	e0e0      	b.n	800998e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80097cc:	2300      	movs	r3, #0
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
 80097d0:	e002      	b.n	80097d8 <dir_register+0x2c>
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	3301      	adds	r3, #1
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f4      	bne.n	80097d2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80097ee:	f107 030c 	add.w	r3, r7, #12
 80097f2:	220c      	movs	r2, #12
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe fd3f 	bl	8008278 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d032      	beq.n	800986a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2240      	movs	r2, #64	; 0x40
 8009808:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800980c:	2301      	movs	r3, #1
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009810:	e016      	b.n	8009840 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	f107 010c 	add.w	r1, r7, #12
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	f7ff fdad 	bl	8009380 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ff00 	bl	800962c <dir_find>
 800982c:	4603      	mov	r3, r0
 800982e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	3301      	adds	r3, #1
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	2b63      	cmp	r3, #99	; 0x63
 8009844:	d9e5      	bls.n	8009812 <dir_register+0x66>
 8009846:	e000      	b.n	800984a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009848:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	2b64      	cmp	r3, #100	; 0x64
 800984e:	d101      	bne.n	8009854 <dir_register+0xa8>
 8009850:	2307      	movs	r3, #7
 8009852:	e09c      	b.n	800998e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009858:	2b04      	cmp	r3, #4
 800985a:	d002      	beq.n	8009862 <dir_register+0xb6>
 800985c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009860:	e095      	b.n	800998e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009862:	7dfa      	ldrb	r2, [r7, #23]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <dir_register+0xd8>
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	330c      	adds	r3, #12
 8009878:	4a47      	ldr	r2, [pc, #284]	; (8009998 <dir_register+0x1ec>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	089b      	lsrs	r3, r3, #2
 8009880:	3301      	adds	r3, #1
 8009882:	e000      	b.n	8009886 <dir_register+0xda>
 8009884:	2301      	movs	r3, #1
 8009886:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009888:	6a39      	ldr	r1, [r7, #32]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff fbb6 	bl	8008ffc <dir_alloc>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800989a:	2b00      	cmp	r3, #0
 800989c:	d148      	bne.n	8009930 <dir_register+0x184>
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	623b      	str	r3, [r7, #32]
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d042      	beq.n	8009930 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	695a      	ldr	r2, [r3, #20]
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	015b      	lsls	r3, r3, #5
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fa41 	bl	8008d3e <dir_sdi>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80098c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d132      	bne.n	8009930 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3324      	adds	r3, #36	; 0x24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fde4 	bl	800949c <sum_sfn>
 80098d4:	4603      	mov	r3, r0
 80098d6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	4619      	mov	r1, r3
 80098de:	69f8      	ldr	r0, [r7, #28]
 80098e0:	f7fe febc 	bl	800865c <move_window>
 80098e4:	4603      	mov	r3, r0
 80098e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80098ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d11d      	bne.n	800992e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	6918      	ldr	r0, [r3, #16]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a19      	ldr	r1, [r3, #32]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7efb      	ldrb	r3, [r7, #27]
 8009900:	f7ff fcd6 	bl	80092b0 <put_lfn>
				fs->wflag = 1;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2201      	movs	r2, #1
 8009908:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800990a:	2100      	movs	r1, #0
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff fa9f 	bl	8008e50 <dir_next>
 8009912:	4603      	mov	r3, r0
 8009914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009918:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800991c:	2b00      	cmp	r3, #0
 800991e:	d107      	bne.n	8009930 <dir_register+0x184>
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	3b01      	subs	r3, #1
 8009924:	623b      	str	r3, [r7, #32]
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1d5      	bne.n	80098d8 <dir_register+0x12c>
 800992c:	e000      	b.n	8009930 <dir_register+0x184>
				if (res != FR_OK) break;
 800992e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009934:	2b00      	cmp	r3, #0
 8009936:	d128      	bne.n	800998a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	4619      	mov	r1, r3
 800993e:	69f8      	ldr	r0, [r7, #28]
 8009940:	f7fe fe8c 	bl	800865c <move_window>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800994a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800994e:	2b00      	cmp	r3, #0
 8009950:	d11b      	bne.n	800998a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	2220      	movs	r2, #32
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fcad 	bl	80082ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a18      	ldr	r0, [r3, #32]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	220b      	movs	r2, #11
 800996a:	4619      	mov	r1, r3
 800996c:	f7fe fc84 	bl	8008278 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	330c      	adds	r3, #12
 800997c:	f002 0218 	and.w	r2, r2, #24
 8009980:	b2d2      	uxtb	r2, r2
 8009982:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2201      	movs	r2, #1
 8009988:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800998a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800998e:	4618      	mov	r0, r3
 8009990:	3730      	adds	r7, #48	; 0x30
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	4ec4ec4f 	.word	0x4ec4ec4f

0800999c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	f000 80c9 	beq.w	8009b4e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c4:	d032      	beq.n	8009a2c <get_fileinfo+0x90>
			i = j = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80099ce:	e01b      	b.n	8009a08 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80099d0:	89fb      	ldrh	r3, [r7, #14]
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fafd 	bl	800afd4 <ff_convert>
 80099da:	4603      	mov	r3, r0
 80099dc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80099de:	89fb      	ldrh	r3, [r7, #14]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <get_fileinfo+0x4e>
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e01a      	b.n	8009a20 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	2bfe      	cmp	r3, #254	; 0xfe
 80099ee:	d902      	bls.n	80099f6 <get_fileinfo+0x5a>
 80099f0:	2300      	movs	r3, #0
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e014      	b.n	8009a20 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	61fa      	str	r2, [r7, #28]
 80099fc:	89fa      	ldrh	r2, [r7, #14]
 80099fe:	b2d1      	uxtb	r1, r2
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	4413      	add	r3, r2
 8009a04:	460a      	mov	r2, r1
 8009a06:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	1c59      	adds	r1, r3, #1
 8009a10:	61b9      	str	r1, [r7, #24]
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	81fb      	strh	r3, [r7, #14]
 8009a1a:	89fb      	ldrh	r3, [r7, #14]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1d7      	bne.n	80099d0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	3316      	adds	r3, #22
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	4413      	add	r3, r2
 8009a3a:	3316      	adds	r3, #22
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009a40:	e04c      	b.n	8009adc <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1a      	ldr	r2, [r3, #32]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	1c59      	adds	r1, r3, #1
 8009a4a:	61f9      	str	r1, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	d100      	bne.n	8009a5a <get_fileinfo+0xbe>
 8009a58:	e040      	b.n	8009adc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b05      	cmp	r3, #5
 8009a5e:	d101      	bne.n	8009a64 <get_fileinfo+0xc8>
 8009a60:	23e5      	movs	r3, #229	; 0xe5
 8009a62:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d10f      	bne.n	8009a8a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009a6a:	89bb      	ldrh	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d105      	bne.n	8009a7c <get_fileinfo+0xe0>
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	4413      	add	r3, r2
 8009a76:	3316      	adds	r3, #22
 8009a78:	222e      	movs	r2, #46	; 0x2e
 8009a7a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	61ba      	str	r2, [r7, #24]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	222e      	movs	r2, #46	; 0x2e
 8009a88:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3309      	adds	r3, #9
 8009a92:	7dfa      	ldrb	r2, [r7, #23]
 8009a94:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009a96:	89bb      	ldrh	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11c      	bne.n	8009ad6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	2b40      	cmp	r3, #64	; 0x40
 8009aa0:	d913      	bls.n	8009aca <get_fileinfo+0x12e>
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	2b5a      	cmp	r3, #90	; 0x5a
 8009aa6:	d810      	bhi.n	8009aca <get_fileinfo+0x12e>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	330c      	adds	r3, #12
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d901      	bls.n	8009abc <get_fileinfo+0x120>
 8009ab8:	2310      	movs	r3, #16
 8009aba:	e000      	b.n	8009abe <get_fileinfo+0x122>
 8009abc:	2308      	movs	r3, #8
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	3320      	adds	r3, #32
 8009ac8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	4413      	add	r3, r2
 8009ad0:	3316      	adds	r3, #22
 8009ad2:	7dfa      	ldrb	r2, [r7, #23]
 8009ad4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	2b0a      	cmp	r3, #10
 8009ae0:	d9af      	bls.n	8009a42 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8009ae2:	89bb      	ldrh	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	4413      	add	r3, r2
 8009aee:	3316      	adds	r3, #22
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	330c      	adds	r3, #12
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <get_fileinfo+0x168>
 8009b00:	2300      	movs	r3, #0
 8009b02:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	4413      	add	r3, r2
 8009b0a:	3309      	adds	r3, #9
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	7ada      	ldrb	r2, [r3, #11]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	331c      	adds	r3, #28
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fb3f 	bl	80081a4 <ld_dword>
 8009b26:	4602      	mov	r2, r0
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	3316      	adds	r3, #22
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fb36 	bl	80081a4 <ld_dword>
 8009b38:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	80da      	strh	r2, [r3, #6]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	0c1b      	lsrs	r3, r3, #16
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	809a      	strh	r2, [r3, #4]
 8009b4c:	e000      	b.n	8009b50 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009b4e:	bf00      	nop
}
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
	...

08009b58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	61ba      	str	r2, [r7, #24]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4413      	add	r3, r2
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b88:	2b1f      	cmp	r3, #31
 8009b8a:	d940      	bls.n	8009c0e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8e:	2b2f      	cmp	r3, #47	; 0x2f
 8009b90:	d006      	beq.n	8009ba0 <create_name+0x48>
 8009b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b94:	2b5c      	cmp	r3, #92	; 0x5c
 8009b96:	d110      	bne.n	8009bba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b98:	e002      	b.n	8009ba0 <create_name+0x48>
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	61bb      	str	r3, [r7, #24]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b2f      	cmp	r3, #47	; 0x2f
 8009baa:	d0f6      	beq.n	8009b9a <create_name+0x42>
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b5c      	cmp	r3, #92	; 0x5c
 8009bb6:	d0f0      	beq.n	8009b9a <create_name+0x42>
			break;
 8009bb8:	e02a      	b.n	8009c10 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2bfe      	cmp	r3, #254	; 0xfe
 8009bbe:	d901      	bls.n	8009bc4 <create_name+0x6c>
 8009bc0:	2306      	movs	r3, #6
 8009bc2:	e17d      	b.n	8009ec0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fa00 	bl	800afd4 <ff_convert>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009bd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <create_name+0x8a>
 8009bde:	2306      	movs	r3, #6
 8009be0:	e16e      	b.n	8009ec0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009be4:	2b7f      	cmp	r3, #127	; 0x7f
 8009be6:	d809      	bhi.n	8009bfc <create_name+0xa4>
 8009be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bea:	4619      	mov	r1, r3
 8009bec:	488d      	ldr	r0, [pc, #564]	; (8009e24 <create_name+0x2cc>)
 8009bee:	f7fe fba6 	bl	800833e <chk_chr>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <create_name+0xa4>
 8009bf8:	2306      	movs	r3, #6
 8009bfa:	e161      	b.n	8009ec0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	617a      	str	r2, [r7, #20]
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c0a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c0c:	e7b4      	b.n	8009b78 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c0e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	441a      	add	r2, r3
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c1c:	2b1f      	cmp	r3, #31
 8009c1e:	d801      	bhi.n	8009c24 <create_name+0xcc>
 8009c20:	2304      	movs	r3, #4
 8009c22:	e000      	b.n	8009c26 <create_name+0xce>
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c2a:	e011      	b.n	8009c50 <create_name+0xf8>
		w = lfn[di - 1];
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c32:	3b01      	subs	r3, #1
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d002      	beq.n	8009c4a <create_name+0xf2>
 8009c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c46:	2b2e      	cmp	r3, #46	; 0x2e
 8009c48:	d106      	bne.n	8009c58 <create_name+0x100>
		di--;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1ea      	bne.n	8009c2c <create_name+0xd4>
 8009c56:	e000      	b.n	8009c5a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009c58:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	2200      	movs	r2, #0
 8009c64:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <create_name+0x118>
 8009c6c:	2306      	movs	r3, #6
 8009c6e:	e127      	b.n	8009ec0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3324      	adds	r3, #36	; 0x24
 8009c74:	220b      	movs	r2, #11
 8009c76:	2120      	movs	r1, #32
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fb1e 	bl	80082ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	e002      	b.n	8009c8a <create_name+0x132>
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	3301      	adds	r3, #1
 8009c88:	61bb      	str	r3, [r7, #24]
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d0f5      	beq.n	8009c84 <create_name+0x12c>
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ca4:	d0ee      	beq.n	8009c84 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d009      	beq.n	8009cc0 <create_name+0x168>
 8009cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb0:	f043 0303 	orr.w	r3, r3, #3
 8009cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009cb8:	e002      	b.n	8009cc0 <create_name+0x168>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <create_name+0x182>
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd8:	d1ef      	bne.n	8009cba <create_name+0x162>

	i = b = 0; ni = 8;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	623b      	str	r3, [r7, #32]
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	61ba      	str	r2, [r7, #24]
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8090 	beq.w	8009e20 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d006      	beq.n	8009d14 <create_name+0x1bc>
 8009d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d08:	2b2e      	cmp	r3, #46	; 0x2e
 8009d0a:	d10a      	bne.n	8009d22 <create_name+0x1ca>
 8009d0c:	69ba      	ldr	r2, [r7, #24]
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d006      	beq.n	8009d22 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d18:	f043 0303 	orr.w	r3, r3, #3
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d20:	e07d      	b.n	8009e1e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d203      	bcs.n	8009d32 <create_name+0x1da>
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d123      	bne.n	8009d7a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	2b0b      	cmp	r3, #11
 8009d36:	d106      	bne.n	8009d46 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d3c:	f043 0303 	orr.w	r3, r3, #3
 8009d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d44:	e075      	b.n	8009e32 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d005      	beq.n	8009d5a <create_name+0x202>
 8009d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d52:	f043 0303 	orr.w	r3, r3, #3
 8009d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d866      	bhi.n	8009e30 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	2308      	movs	r3, #8
 8009d68:	623b      	str	r3, [r7, #32]
 8009d6a:	230b      	movs	r3, #11
 8009d6c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009d6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d78:	e051      	b.n	8009e1e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7e:	d914      	bls.n	8009daa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d82:	2100      	movs	r1, #0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 f925 	bl	800afd4 <ff_convert>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d004      	beq.n	8009d9e <create_name+0x246>
 8009d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d96:	3b80      	subs	r3, #128	; 0x80
 8009d98:	4a23      	ldr	r2, [pc, #140]	; (8009e28 <create_name+0x2d0>)
 8009d9a:	5cd3      	ldrb	r3, [r2, r3]
 8009d9c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da2:	f043 0302 	orr.w	r3, r3, #2
 8009da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d007      	beq.n	8009dc0 <create_name+0x268>
 8009db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009db2:	4619      	mov	r1, r3
 8009db4:	481d      	ldr	r0, [pc, #116]	; (8009e2c <create_name+0x2d4>)
 8009db6:	f7fe fac2 	bl	800833e <chk_chr>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009dc0:	235f      	movs	r3, #95	; 0x5f
 8009dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc8:	f043 0303 	orr.w	r3, r3, #3
 8009dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dd0:	e01b      	b.n	8009e0a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	d909      	bls.n	8009dec <create_name+0x294>
 8009dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dda:	2b5a      	cmp	r3, #90	; 0x5a
 8009ddc:	d806      	bhi.n	8009dec <create_name+0x294>
					b |= 2;
 8009dde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009de2:	f043 0302 	orr.w	r3, r3, #2
 8009de6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009dea:	e00e      	b.n	8009e0a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dee:	2b60      	cmp	r3, #96	; 0x60
 8009df0:	d90b      	bls.n	8009e0a <create_name+0x2b2>
 8009df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df4:	2b7a      	cmp	r3, #122	; 0x7a
 8009df6:	d808      	bhi.n	8009e0a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dfc:	f043 0301 	orr.w	r3, r3, #1
 8009e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e06:	3b20      	subs	r3, #32
 8009e08:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	1c5a      	adds	r2, r3, #1
 8009e0e:	623a      	str	r2, [r7, #32]
 8009e10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e12:	b2d1      	uxtb	r1, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	4413      	add	r3, r2
 8009e18:	460a      	mov	r2, r1
 8009e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009e1e:	e763      	b.n	8009ce8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009e20:	bf00      	nop
 8009e22:	e006      	b.n	8009e32 <create_name+0x2da>
 8009e24:	0800c9d4 	.word	0x0800c9d4
 8009e28:	0800ca34 	.word	0x0800ca34
 8009e2c:	0800c9e0 	.word	0x0800c9e0
			if (si > di) break;			/* No extension */
 8009e30:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e38:	2be5      	cmp	r3, #229	; 0xe5
 8009e3a:	d103      	bne.n	8009e44 <create_name+0x2ec>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d104      	bne.n	8009e54 <create_name+0x2fc>
 8009e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e58:	f003 030c 	and.w	r3, r3, #12
 8009e5c:	2b0c      	cmp	r3, #12
 8009e5e:	d005      	beq.n	8009e6c <create_name+0x314>
 8009e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d105      	bne.n	8009e78 <create_name+0x320>
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	f043 0302 	orr.w	r3, r3, #2
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d117      	bne.n	8009eb4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d105      	bne.n	8009e9c <create_name+0x344>
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e94:	f043 0310 	orr.w	r3, r3, #16
 8009e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ea0:	f003 030c 	and.w	r3, r3, #12
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d105      	bne.n	8009eb4 <create_name+0x35c>
 8009ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eac:	f043 0308 	orr.w	r3, r3, #8
 8009eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009eba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009ebe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3728      	adds	r7, #40	; 0x28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009edc:	e002      	b.n	8009ee4 <follow_path+0x1c>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8009eea:	d0f8      	beq.n	8009ede <follow_path+0x16>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ef2:	d0f4      	beq.n	8009ede <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b1f      	cmp	r3, #31
 8009f00:	d80a      	bhi.n	8009f18 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2280      	movs	r2, #128	; 0x80
 8009f06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7fe ff16 	bl	8008d3e <dir_sdi>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]
 8009f16:	e048      	b.n	8009faa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f18:	463b      	mov	r3, r7
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fe1b 	bl	8009b58 <create_name>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d139      	bne.n	8009fa0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff fb7d 	bl	800962c <dir_find>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f3c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00a      	beq.n	8009f5a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d12c      	bne.n	8009fa4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d127      	bne.n	8009fa4 <follow_path+0xdc>
 8009f54:	2305      	movs	r3, #5
 8009f56:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f58:	e024      	b.n	8009fa4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f5a:	7afb      	ldrb	r3, [r7, #11]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d121      	bne.n	8009fa8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	799b      	ldrb	r3, [r3, #6]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009f70:	2305      	movs	r3, #5
 8009f72:	75fb      	strb	r3, [r7, #23]
 8009f74:	e019      	b.n	8009faa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	8992      	ldrh	r2, [r2, #12]
 8009f84:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f88:	fb00 f202 	mul.w	r2, r0, r2
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	440b      	add	r3, r1
 8009f90:	4619      	mov	r1, r3
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f7ff f879 	bl	800908a <ld_clust>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f9e:	e7bb      	b.n	8009f18 <follow_path+0x50>
			if (res != FR_OK) break;
 8009fa0:	bf00      	nop
 8009fa2:	e002      	b.n	8009faa <follow_path+0xe2>
				break;
 8009fa4:	bf00      	nop
 8009fa6:	e000      	b.n	8009faa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fa8:	bf00      	nop
			}
		}
	}

	return res;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d031      	beq.n	800a02e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	e002      	b.n	8009fd8 <get_ldnumber+0x24>
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b1f      	cmp	r3, #31
 8009fde:	d903      	bls.n	8009fe8 <get_ldnumber+0x34>
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8009fe6:	d1f4      	bne.n	8009fd2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b3a      	cmp	r3, #58	; 0x3a
 8009fee:	d11c      	bne.n	800a02a <get_ldnumber+0x76>
			tp = *path;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	60fa      	str	r2, [r7, #12]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	3b30      	subs	r3, #48	; 0x30
 800a000:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b09      	cmp	r3, #9
 800a006:	d80e      	bhi.n	800a026 <get_ldnumber+0x72>
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d10a      	bne.n	800a026 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <get_ldnumber+0x72>
					vol = (int)i;
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	3301      	adds	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	e002      	b.n	800a030 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a02a:	2300      	movs	r3, #0
 800a02c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a02e:	693b      	ldr	r3, [r7, #16]
}
 800a030:	4618      	mov	r0, r3
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	70da      	strb	r2, [r3, #3]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295
 800a052:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7fe fb00 	bl	800865c <move_window>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <check_fs+0x2a>
 800a062:	2304      	movs	r3, #4
 800a064:	e038      	b.n	800a0d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3338      	adds	r3, #56	; 0x38
 800a06a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe f880 	bl	8008174 <ld_word>
 800a074:	4603      	mov	r3, r0
 800a076:	461a      	mov	r2, r3
 800a078:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d001      	beq.n	800a084 <check_fs+0x48>
 800a080:	2303      	movs	r3, #3
 800a082:	e029      	b.n	800a0d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a08a:	2be9      	cmp	r3, #233	; 0xe9
 800a08c:	d009      	beq.n	800a0a2 <check_fs+0x66>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a094:	2beb      	cmp	r3, #235	; 0xeb
 800a096:	d11e      	bne.n	800a0d6 <check_fs+0x9a>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a09e:	2b90      	cmp	r3, #144	; 0x90
 800a0a0:	d119      	bne.n	800a0d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3338      	adds	r3, #56	; 0x38
 800a0a6:	3336      	adds	r3, #54	; 0x36
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe f87b 	bl	80081a4 <ld_dword>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0b4:	4a0a      	ldr	r2, [pc, #40]	; (800a0e0 <check_fs+0xa4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d101      	bne.n	800a0be <check_fs+0x82>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e00c      	b.n	800a0d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3338      	adds	r3, #56	; 0x38
 800a0c2:	3352      	adds	r3, #82	; 0x52
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe f86d 	bl	80081a4 <ld_dword>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4a05      	ldr	r2, [pc, #20]	; (800a0e4 <check_fs+0xa8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d101      	bne.n	800a0d6 <check_fs+0x9a>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e000      	b.n	800a0d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a0d6:	2302      	movs	r3, #2
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	00544146 	.word	0x00544146
 800a0e4:	33544146 	.word	0x33544146

0800a0e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b096      	sub	sp, #88	; 0x58
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff ff59 	bl	8009fb4 <get_ldnumber>
 800a102:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a106:	2b00      	cmp	r3, #0
 800a108:	da01      	bge.n	800a10e <find_volume+0x26>
 800a10a:	230b      	movs	r3, #11
 800a10c:	e265      	b.n	800a5da <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a10e:	4a9f      	ldr	r2, [pc, #636]	; (800a38c <find_volume+0x2a4>)
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a116:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <find_volume+0x3a>
 800a11e:	230c      	movs	r3, #12
 800a120:	e25b      	b.n	800a5da <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a126:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	f023 0301 	bic.w	r3, r3, #1
 800a12e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01a      	beq.n	800a16e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd ff7b 	bl	8008038 <disk_status>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10c      	bne.n	800a16e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <find_volume+0x82>
 800a15a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a15e:	f003 0304 	and.w	r3, r3, #4
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a166:	230a      	movs	r3, #10
 800a168:	e237      	b.n	800a5da <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a16a:	2300      	movs	r3, #0
 800a16c:	e235      	b.n	800a5da <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	2200      	movs	r2, #0
 800a172:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a176:	b2da      	uxtb	r2, r3
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd ff73 	bl	800806c <disk_initialize>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a18c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a198:	2303      	movs	r3, #3
 800a19a:	e21e      	b.n	800a5da <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d007      	beq.n	800a1b2 <find_volume+0xca>
 800a1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	e213      	b.n	800a5da <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	7858      	ldrb	r0, [r3, #1]
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	2102      	movs	r1, #2
 800a1be:	f7fd ffbb 	bl	8008138 <disk_ioctl>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <find_volume+0xe4>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e206      	b.n	800a5da <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	899b      	ldrh	r3, [r3, #12]
 800a1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d4:	d80d      	bhi.n	800a1f2 <find_volume+0x10a>
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	899b      	ldrh	r3, [r3, #12]
 800a1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1de:	d308      	bcc.n	800a1f2 <find_volume+0x10a>
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	899b      	ldrh	r3, [r3, #12]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	899b      	ldrh	r3, [r3, #12]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <find_volume+0x10e>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e1f1      	b.n	800a5da <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a1fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1fe:	f7ff ff1d 	bl	800a03c <check_fs>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d149      	bne.n	800a2a4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a210:	2300      	movs	r3, #0
 800a212:	643b      	str	r3, [r7, #64]	; 0x40
 800a214:	e01e      	b.n	800a254 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a224:	4413      	add	r3, r2
 800a226:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	3304      	adds	r3, #4
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d006      	beq.n	800a240 <find_volume+0x158>
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	3308      	adds	r3, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f7fd ffb4 	bl	80081a4 <ld_dword>
 800a23c:	4602      	mov	r2, r0
 800a23e:	e000      	b.n	800a242 <find_volume+0x15a>
 800a240:	2200      	movs	r2, #0
 800a242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	3358      	adds	r3, #88	; 0x58
 800a248:	443b      	add	r3, r7
 800a24a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a250:	3301      	adds	r3, #1
 800a252:	643b      	str	r3, [r7, #64]	; 0x40
 800a254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a256:	2b03      	cmp	r3, #3
 800a258:	d9dd      	bls.n	800a216 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a25a:	2300      	movs	r3, #0
 800a25c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <find_volume+0x182>
 800a264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a266:	3b01      	subs	r3, #1
 800a268:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a26a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	3358      	adds	r3, #88	; 0x58
 800a270:	443b      	add	r3, r7
 800a272:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a276:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <find_volume+0x1a2>
 800a27e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a282:	f7ff fedb 	bl	800a03c <check_fs>
 800a286:	4603      	mov	r3, r0
 800a288:	e000      	b.n	800a28c <find_volume+0x1a4>
 800a28a:	2303      	movs	r3, #3
 800a28c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a294:	2b01      	cmp	r3, #1
 800a296:	d905      	bls.n	800a2a4 <find_volume+0x1bc>
 800a298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a29a:	3301      	adds	r3, #1
 800a29c:	643b      	str	r3, [r7, #64]	; 0x40
 800a29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d9e2      	bls.n	800a26a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d101      	bne.n	800a2b0 <find_volume+0x1c8>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e194      	b.n	800a5da <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d901      	bls.n	800a2bc <find_volume+0x1d4>
 800a2b8:	230d      	movs	r3, #13
 800a2ba:	e18e      	b.n	800a5da <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	3338      	adds	r3, #56	; 0x38
 800a2c0:	330b      	adds	r3, #11
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fd ff56 	bl	8008174 <ld_word>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	899b      	ldrh	r3, [r3, #12]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d001      	beq.n	800a2d8 <find_volume+0x1f0>
 800a2d4:	230d      	movs	r3, #13
 800a2d6:	e180      	b.n	800a5da <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	3338      	adds	r3, #56	; 0x38
 800a2dc:	3316      	adds	r3, #22
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fd ff48 	bl	8008174 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <find_volume+0x214>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f0:	3338      	adds	r3, #56	; 0x38
 800a2f2:	3324      	adds	r3, #36	; 0x24
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fd ff55 	bl	80081a4 <ld_dword>
 800a2fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a300:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	789b      	ldrb	r3, [r3, #2]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d005      	beq.n	800a320 <find_volume+0x238>
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	789b      	ldrb	r3, [r3, #2]
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d001      	beq.n	800a320 <find_volume+0x238>
 800a31c:	230d      	movs	r3, #13
 800a31e:	e15c      	b.n	800a5da <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	461a      	mov	r2, r3
 800a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a328:	fb02 f303 	mul.w	r3, r2, r3
 800a32c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a334:	b29a      	uxth	r2, r3
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d008      	beq.n	800a354 <find_volume+0x26c>
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	895b      	ldrh	r3, [r3, #10]
 800a346:	461a      	mov	r2, r3
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	895b      	ldrh	r3, [r3, #10]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	4013      	ands	r3, r2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <find_volume+0x270>
 800a354:	230d      	movs	r3, #13
 800a356:	e140      	b.n	800a5da <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	3338      	adds	r3, #56	; 0x38
 800a35c:	3311      	adds	r3, #17
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fd ff08 	bl	8008174 <ld_word>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	891b      	ldrh	r3, [r3, #8]
 800a370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a372:	8992      	ldrh	r2, [r2, #12]
 800a374:	0952      	lsrs	r2, r2, #5
 800a376:	b292      	uxth	r2, r2
 800a378:	fbb3 f1f2 	udiv	r1, r3, r2
 800a37c:	fb01 f202 	mul.w	r2, r1, r2
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d003      	beq.n	800a390 <find_volume+0x2a8>
 800a388:	230d      	movs	r3, #13
 800a38a:	e126      	b.n	800a5da <find_volume+0x4f2>
 800a38c:	20000178 	.word	0x20000178

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	3338      	adds	r3, #56	; 0x38
 800a394:	3313      	adds	r3, #19
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd feec 	bl	8008174 <ld_word>
 800a39c:	4603      	mov	r3, r0
 800a39e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <find_volume+0x2cc>
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	3338      	adds	r3, #56	; 0x38
 800a3aa:	3320      	adds	r3, #32
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fef9 	bl	80081a4 <ld_dword>
 800a3b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	3338      	adds	r3, #56	; 0x38
 800a3b8:	330e      	adds	r3, #14
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fd feda 	bl	8008174 <ld_word>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a3c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <find_volume+0x2e6>
 800a3ca:	230d      	movs	r3, #13
 800a3cc:	e105      	b.n	800a5da <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a3ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d2:	4413      	add	r3, r2
 800a3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3d6:	8911      	ldrh	r1, [r2, #8]
 800a3d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3da:	8992      	ldrh	r2, [r2, #12]
 800a3dc:	0952      	lsrs	r2, r2, #5
 800a3de:	b292      	uxth	r2, r2
 800a3e0:	fbb1 f2f2 	udiv	r2, r1, r2
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a3ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d201      	bcs.n	800a3f6 <find_volume+0x30e>
 800a3f2:	230d      	movs	r3, #13
 800a3f4:	e0f1      	b.n	800a5da <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a3f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3fe:	8952      	ldrh	r2, [r2, #10]
 800a400:	fbb3 f3f2 	udiv	r3, r3, r2
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <find_volume+0x328>
 800a40c:	230d      	movs	r3, #13
 800a40e:	e0e4      	b.n	800a5da <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a410:	2303      	movs	r3, #3
 800a412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d802      	bhi.n	800a426 <find_volume+0x33e>
 800a420:	2302      	movs	r3, #2
 800a422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d802      	bhi.n	800a436 <find_volume+0x34e>
 800a430:	2301      	movs	r3, #1
 800a432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	1c9a      	adds	r2, r3, #2
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a442:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a448:	441a      	add	r2, r3
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a44e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	441a      	add	r2, r3
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d11e      	bne.n	800a49e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	3338      	adds	r3, #56	; 0x38
 800a464:	332a      	adds	r3, #42	; 0x2a
 800a466:	4618      	mov	r0, r3
 800a468:	f7fd fe84 	bl	8008174 <ld_word>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <find_volume+0x38e>
 800a472:	230d      	movs	r3, #13
 800a474:	e0b1      	b.n	800a5da <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	891b      	ldrh	r3, [r3, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <find_volume+0x39a>
 800a47e:	230d      	movs	r3, #13
 800a480:	e0ab      	b.n	800a5da <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	3338      	adds	r3, #56	; 0x38
 800a486:	332c      	adds	r3, #44	; 0x2c
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fd fe8b 	bl	80081a4 <ld_dword>
 800a48e:	4602      	mov	r2, r0
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	647b      	str	r3, [r7, #68]	; 0x44
 800a49c:	e01f      	b.n	800a4de <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	891b      	ldrh	r3, [r3, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <find_volume+0x3c2>
 800a4a6:	230d      	movs	r3, #13
 800a4a8:	e097      	b.n	800a5da <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	441a      	add	r2, r3
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d103      	bne.n	800a4c6 <find_volume+0x3de>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	e00a      	b.n	800a4dc <find_volume+0x3f4>
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	69da      	ldr	r2, [r3, #28]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	085a      	lsrs	r2, r3, #1
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a4dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	6a1a      	ldr	r2, [r3, #32]
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e4:	899b      	ldrh	r3, [r3, #12]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ea:	440b      	add	r3, r1
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4f0:	8989      	ldrh	r1, [r1, #12]
 800a4f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d201      	bcs.n	800a4fe <find_volume+0x416>
 800a4fa:	230d      	movs	r3, #13
 800a4fc:	e06d      	b.n	800a5da <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	f04f 32ff 	mov.w	r2, #4294967295
 800a504:	619a      	str	r2, [r3, #24]
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	2280      	movs	r2, #128	; 0x80
 800a512:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a514:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d149      	bne.n	800a5b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	3338      	adds	r3, #56	; 0x38
 800a520:	3330      	adds	r3, #48	; 0x30
 800a522:	4618      	mov	r0, r3
 800a524:	f7fd fe26 	bl	8008174 <ld_word>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d140      	bne.n	800a5b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a530:	3301      	adds	r3, #1
 800a532:	4619      	mov	r1, r3
 800a534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a536:	f7fe f891 	bl	800865c <move_window>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d137      	bne.n	800a5b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	2200      	movs	r2, #0
 800a544:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	3338      	adds	r3, #56	; 0x38
 800a54a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fd fe10 	bl	8008174 <ld_word>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d127      	bne.n	800a5b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	3338      	adds	r3, #56	; 0x38
 800a564:	4618      	mov	r0, r3
 800a566:	f7fd fe1d 	bl	80081a4 <ld_dword>
 800a56a:	4603      	mov	r3, r0
 800a56c:	4a1d      	ldr	r2, [pc, #116]	; (800a5e4 <find_volume+0x4fc>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d11e      	bne.n	800a5b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	3338      	adds	r3, #56	; 0x38
 800a576:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fd fe12 	bl	80081a4 <ld_dword>
 800a580:	4603      	mov	r3, r0
 800a582:	4a19      	ldr	r2, [pc, #100]	; (800a5e8 <find_volume+0x500>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d113      	bne.n	800a5b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58a:	3338      	adds	r3, #56	; 0x38
 800a58c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a590:	4618      	mov	r0, r3
 800a592:	f7fd fe07 	bl	80081a4 <ld_dword>
 800a596:	4602      	mov	r2, r0
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	3338      	adds	r3, #56	; 0x38
 800a5a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd fdfd 	bl	80081a4 <ld_dword>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a5b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <find_volume+0x504>)
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <find_volume+0x504>)
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <find_volume+0x504>)
 800a5c6:	881a      	ldrh	r2, [r3, #0]
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	4a08      	ldr	r2, [pc, #32]	; (800a5f0 <find_volume+0x508>)
 800a5d0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a5d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5d4:	f7fd ffda 	bl	800858c <clear_lock>
#endif
	return FR_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3758      	adds	r7, #88	; 0x58
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	41615252 	.word	0x41615252
 800a5e8:	61417272 	.word	0x61417272
 800a5ec:	2000017c 	.word	0x2000017c
 800a5f0:	200001a0 	.word	0x200001a0

0800a5f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a5fe:	2309      	movs	r3, #9
 800a600:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01c      	beq.n	800a642 <validate+0x4e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d018      	beq.n	800a642 <validate+0x4e>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d013      	beq.n	800a642 <validate+0x4e>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	889a      	ldrh	r2, [r3, #4]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	88db      	ldrh	r3, [r3, #6]
 800a624:	429a      	cmp	r2, r3
 800a626:	d10c      	bne.n	800a642 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fd02 	bl	8008038 <disk_status>
 800a634:	4603      	mov	r3, r0
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <validate+0x4e>
			res = FR_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <validate+0x5a>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	e000      	b.n	800a650 <validate+0x5c>
 800a64e:	2300      	movs	r3, #0
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	6013      	str	r3, [r2, #0]
	return res;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a672:	f107 0310 	add.w	r3, r7, #16
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fc9c 	bl	8009fb4 <get_ldnumber>
 800a67c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da01      	bge.n	800a688 <f_mount+0x28>
 800a684:	230b      	movs	r3, #11
 800a686:	e02b      	b.n	800a6e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a688:	4a17      	ldr	r2, [pc, #92]	; (800a6e8 <f_mount+0x88>)
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a690:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d005      	beq.n	800a6a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a698:	69b8      	ldr	r0, [r7, #24]
 800a69a:	f7fd ff77 	bl	800858c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	490d      	ldr	r1, [pc, #52]	; (800a6e8 <f_mount+0x88>)
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <f_mount+0x66>
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d001      	beq.n	800a6ca <f_mount+0x6a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e00a      	b.n	800a6e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a6ca:	f107 010c 	add.w	r1, r7, #12
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff fd07 	bl	800a0e8 <find_volume>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3720      	adds	r7, #32
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20000178 	.word	0x20000178

0800a6ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b09a      	sub	sp, #104	; 0x68
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <f_open+0x18>
 800a700:	2309      	movs	r3, #9
 800a702:	e1bb      	b.n	800aa7c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a70a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a70c:	79fa      	ldrb	r2, [r7, #7]
 800a70e:	f107 0114 	add.w	r1, r7, #20
 800a712:	f107 0308 	add.w	r3, r7, #8
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fce6 	bl	800a0e8 <find_volume>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a726:	2b00      	cmp	r3, #0
 800a728:	f040 819f 	bne.w	800aa6a <f_open+0x37e>
		dj.obj.fs = fs;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	f107 0318 	add.w	r3, r7, #24
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fbc5 	bl	8009ec8 <follow_path>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11a      	bne.n	800a782 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a74c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a750:	b25b      	sxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	da03      	bge.n	800a75e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a756:	2306      	movs	r3, #6
 800a758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a75c:	e011      	b.n	800a782 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	f023 0301 	bic.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	bf14      	ite	ne
 800a768:	2301      	movne	r3, #1
 800a76a:	2300      	moveq	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	f107 0318 	add.w	r3, r7, #24
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7fd fdfc 	bl	8008374 <chk_lock>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	f003 031c 	and.w	r3, r3, #28
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d07f      	beq.n	800a88c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a78c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d10e      	bne.n	800a7ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a79c:	f7fd fe46 	bl	800842c <enq_lock>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <f_open+0xc8>
 800a7a6:	f107 0318 	add.w	r3, r7, #24
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fffe 	bl	80097ac <dir_register>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	e000      	b.n	800a7b6 <f_open+0xca>
 800a7b4:	2312      	movs	r3, #18
 800a7b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	f043 0308 	orr.w	r3, r3, #8
 800a7c0:	71fb      	strb	r3, [r7, #7]
 800a7c2:	e010      	b.n	800a7e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7c4:	7fbb      	ldrb	r3, [r7, #30]
 800a7c6:	f003 0311 	and.w	r3, r3, #17
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <f_open+0xea>
					res = FR_DENIED;
 800a7ce:	2307      	movs	r3, #7
 800a7d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a7d4:	e007      	b.n	800a7e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <f_open+0xfa>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d168      	bne.n	800a8c0 <f_open+0x1d4>
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d063      	beq.n	800a8c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a7f8:	f7fb fbd2 	bl	8005fa0 <get_fattime>
 800a7fc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	330e      	adds	r3, #14
 800a802:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a804:	4618      	mov	r0, r3
 800a806:	f7fd fd0b 	bl	8008220 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	3316      	adds	r3, #22
 800a80e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fd05 	bl	8008220 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	330b      	adds	r3, #11
 800a81a:	2220      	movs	r2, #32
 800a81c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fc30 	bl	800908a <ld_clust>
 800a82a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a830:	2200      	movs	r2, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fc48 	bl	80090c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	331c      	adds	r3, #28
 800a83c:	2100      	movs	r1, #0
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd fcee 	bl	8008220 <st_dword>
					fs->wflag = 1;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	2201      	movs	r2, #1
 800a848:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d037      	beq.n	800a8c0 <f_open+0x1d4>
						dw = fs->winsect;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a854:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a856:	f107 0318 	add.w	r3, r7, #24
 800a85a:	2200      	movs	r2, #0
 800a85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe f938 	bl	8008ad4 <remove_chain>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a86a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d126      	bne.n	800a8c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fef0 	bl	800865c <move_window>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a886:	3a01      	subs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
 800a88a:	e019      	b.n	800a8c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a88c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a890:	2b00      	cmp	r3, #0
 800a892:	d115      	bne.n	800a8c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a894:	7fbb      	ldrb	r3, [r7, #30]
 800a896:	f003 0310 	and.w	r3, r3, #16
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a89e:	2304      	movs	r3, #4
 800a8a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8a4:	e00c      	b.n	800a8c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d007      	beq.n	800a8c0 <f_open+0x1d4>
 800a8b0:	7fbb      	ldrb	r3, [r7, #30]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <f_open+0x1d4>
						res = FR_DENIED;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d128      	bne.n	800a91a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	f023 0301 	bic.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bf14      	ite	ne
 800a8f2:	2301      	movne	r3, #1
 800a8f4:	2300      	moveq	r3, #0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f7fd fdb5 	bl	8008470 <inc_lock>
 800a906:	4602      	mov	r2, r0
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <f_open+0x22e>
 800a914:	2302      	movs	r3, #2
 800a916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a91a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f040 80a3 	bne.w	800aa6a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a928:	4611      	mov	r1, r2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fbad 	bl	800908a <ld_clust>
 800a930:	4602      	mov	r2, r0
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	331c      	adds	r3, #28
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd fc32 	bl	80081a4 <ld_dword>
 800a940:	4602      	mov	r2, r0
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	88da      	ldrh	r2, [r3, #6]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	79fa      	ldrb	r2, [r7, #7]
 800a95e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3330      	adds	r3, #48	; 0x30
 800a976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd fc9c 	bl	80082ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d06e      	beq.n	800aa6a <f_open+0x37e>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d06a      	beq.n	800aa6a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	895b      	ldrh	r3, [r3, #10]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	899b      	ldrh	r3, [r3, #12]
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
 800a9aa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9b8:	e016      	b.n	800a9e8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fe98 	bl	80086f4 <get_fat>
 800a9c4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a9c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d802      	bhi.n	800a9d2 <f_open+0x2e6>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d102      	bne.n	800a9e0 <f_open+0x2f4>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <f_open+0x30c>
 800a9f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d8e0      	bhi.n	800a9ba <f_open+0x2ce>
				}
				fp->clust = clst;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a9fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d131      	bne.n	800aa6a <f_open+0x37e>
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	899b      	ldrh	r3, [r3, #12]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa12:	fb01 f202 	mul.w	r2, r1, r2
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d026      	beq.n	800aa6a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fd fe48 	bl	80086b6 <clust2sect>
 800aa26:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aa28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <f_open+0x34a>
						res = FR_INT_ERR;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa34:	e019      	b.n	800aa6a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	899b      	ldrh	r3, [r3, #12]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa44:	441a      	add	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	7858      	ldrb	r0, [r3, #1]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a1a      	ldr	r2, [r3, #32]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f7fd fb2d 	bl	80080b8 <disk_read>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <f_open+0x37e>
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aa6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <f_open+0x38c>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aa78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3768      	adds	r7, #104	; 0x68
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08e      	sub	sp, #56	; 0x38
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f107 0214 	add.w	r2, r7, #20
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff fda5 	bl	800a5f4 <validate>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d107      	bne.n	800aac8 <f_read+0x44>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	7d5b      	ldrb	r3, [r3, #21]
 800aabc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <f_read+0x4a>
 800aac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aacc:	e135      	b.n	800ad3a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	7d1b      	ldrb	r3, [r3, #20]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <f_read+0x5a>
 800aada:	2307      	movs	r3, #7
 800aadc:	e12d      	b.n	800ad3a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	f240 811e 	bls.w	800ad30 <f_read+0x2ac>
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aaf8:	e11a      	b.n	800ad30 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	8992      	ldrh	r2, [r2, #12]
 800ab02:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab06:	fb01 f202 	mul.w	r2, r1, r2
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 80d5 	bne.w	800acbc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	8992      	ldrh	r2, [r2, #12]
 800ab1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	8952      	ldrh	r2, [r2, #10]
 800ab22:	3a01      	subs	r2, #1
 800ab24:	4013      	ands	r3, r2
 800ab26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d12f      	bne.n	800ab8e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d103      	bne.n	800ab3e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab3c:	e013      	b.n	800ab66 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fe f8be 	bl	8008cce <clmt_clust>
 800ab52:	6338      	str	r0, [r7, #48]	; 0x30
 800ab54:	e007      	b.n	800ab66 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	69db      	ldr	r3, [r3, #28]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	f7fd fdc8 	bl	80086f4 <get_fat>
 800ab64:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d804      	bhi.n	800ab76 <f_read+0xf2>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2202      	movs	r2, #2
 800ab70:	755a      	strb	r2, [r3, #21]
 800ab72:	2302      	movs	r3, #2
 800ab74:	e0e1      	b.n	800ad3a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7c:	d104      	bne.n	800ab88 <f_read+0x104>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2201      	movs	r2, #1
 800ab82:	755a      	strb	r2, [r3, #21]
 800ab84:	2301      	movs	r3, #1
 800ab86:	e0d8      	b.n	800ad3a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	69db      	ldr	r3, [r3, #28]
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	f7fd fd8d 	bl	80086b6 <clust2sect>
 800ab9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d104      	bne.n	800abae <f_read+0x12a>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2202      	movs	r2, #2
 800aba8:	755a      	strb	r2, [r3, #21]
 800abaa:	2302      	movs	r3, #2
 800abac:	e0c5      	b.n	800ad3a <f_read+0x2b6>
			sect += csect;
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	4413      	add	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	899b      	ldrh	r3, [r3, #12]
 800abba:	461a      	mov	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800abc2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d041      	beq.n	800ac4e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	4413      	add	r3, r2
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	8952      	ldrh	r2, [r2, #10]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d905      	bls.n	800abe4 <f_read+0x160>
					cc = fs->csize - csect;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	895b      	ldrh	r3, [r3, #10]
 800abdc:	461a      	mov	r2, r3
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	7858      	ldrb	r0, [r3, #1]
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abee:	f7fd fa63 	bl	80080b8 <disk_read>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <f_read+0x17e>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2201      	movs	r2, #1
 800abfc:	755a      	strb	r2, [r3, #21]
 800abfe:	2301      	movs	r3, #1
 800ac00:	e09b      	b.n	800ad3a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	7d1b      	ldrb	r3, [r3, #20]
 800ac06:	b25b      	sxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da18      	bge.n	800ac3e <f_read+0x1ba>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1a      	ldr	r2, [r3, #32]
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d911      	bls.n	800ac3e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6a1a      	ldr	r2, [r3, #32]
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	8992      	ldrh	r2, [r2, #12]
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2c:	18d0      	adds	r0, r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	899b      	ldrh	r3, [r3, #12]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	f7fd fb1d 	bl	8008278 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	899b      	ldrh	r3, [r3, #12]
 800ac42:	461a      	mov	r2, r3
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	fb02 f303 	mul.w	r3, r2, r3
 800ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ac4c:	e05c      	b.n	800ad08 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d02e      	beq.n	800acb6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	7d1b      	ldrb	r3, [r3, #20]
 800ac5c:	b25b      	sxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da18      	bge.n	800ac94 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	7858      	ldrb	r0, [r3, #1]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6a1a      	ldr	r2, [r3, #32]
 800ac70:	2301      	movs	r3, #1
 800ac72:	f7fd fa41 	bl	80080f8 <disk_write>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <f_read+0x202>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	755a      	strb	r2, [r3, #21]
 800ac82:	2301      	movs	r3, #1
 800ac84:	e059      	b.n	800ad3a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	7d1b      	ldrb	r3, [r3, #20]
 800ac8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	7858      	ldrb	r0, [r3, #1]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac9e:	2301      	movs	r3, #1
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	f7fd fa09 	bl	80080b8 <disk_read>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <f_read+0x232>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	755a      	strb	r2, [r3, #21]
 800acb2:	2301      	movs	r3, #1
 800acb4:	e041      	b.n	800ad3a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	899b      	ldrh	r3, [r3, #12]
 800acc0:	4618      	mov	r0, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	8992      	ldrh	r2, [r2, #12]
 800acca:	fbb3 f1f2 	udiv	r1, r3, r2
 800acce:	fb01 f202 	mul.w	r2, r1, r2
 800acd2:	1a9b      	subs	r3, r3, r2
 800acd4:	1ac3      	subs	r3, r0, r3
 800acd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800acd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d901      	bls.n	800ace4 <f_read+0x260>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	8992      	ldrh	r2, [r2, #12]
 800acf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800acf6:	fb00 f202 	mul.w	r2, r0, r2
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	440b      	add	r3, r1
 800acfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad00:	4619      	mov	r1, r3
 800ad02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad04:	f7fd fab8 	bl	8008278 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ad08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	4413      	add	r3, r2
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	441a      	add	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	619a      	str	r2, [r3, #24]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad22:	441a      	add	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f47f aee1 	bne.w	800aafa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3738      	adds	r7, #56	; 0x38
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b086      	sub	sp, #24
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <f_opendir+0x14>
 800ad52:	2309      	movs	r3, #9
 800ad54:	e064      	b.n	800ae20 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ad5a:	f107 010c 	add.w	r1, r7, #12
 800ad5e:	463b      	mov	r3, r7
 800ad60:	2200      	movs	r2, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff f9c0 	bl	800a0e8 <find_volume>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d14f      	bne.n	800ae12 <f_opendir+0xd0>
		obj->fs = fs;
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff f8a3 	bl	8009ec8 <follow_path>
 800ad82:	4603      	mov	r3, r0
 800ad84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d13d      	bne.n	800ae08 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad92:	b25b      	sxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	db12      	blt.n	800adbe <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	799b      	ldrb	r3, [r3, #6]
 800ad9c:	f003 0310 	and.w	r3, r3, #16
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	4619      	mov	r1, r3
 800adac:	4610      	mov	r0, r2
 800adae:	f7fe f96c 	bl	800908a <ld_clust>
 800adb2:	4602      	mov	r2, r0
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	609a      	str	r2, [r3, #8]
 800adb8:	e001      	b.n	800adbe <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800adba:	2305      	movs	r3, #5
 800adbc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d121      	bne.n	800ae08 <f_opendir+0xc6>
				obj->id = fs->id;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	88da      	ldrh	r2, [r3, #6]
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7fd ffb5 	bl	8008d3e <dir_sdi>
 800add4:	4603      	mov	r3, r0
 800add6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d114      	bne.n	800ae08 <f_opendir+0xc6>
					if (obj->sclust) {
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00d      	beq.n	800ae02 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ade6:	2100      	movs	r1, #0
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7fd fb41 	bl	8008470 <inc_lock>
 800adee:	4602      	mov	r2, r0
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d105      	bne.n	800ae08 <f_opendir+0xc6>
 800adfc:	2312      	movs	r3, #18
 800adfe:	75fb      	strb	r3, [r7, #23]
 800ae00:	e002      	b.n	800ae08 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2200      	movs	r2, #0
 800ae06:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	d101      	bne.n	800ae12 <f_opendir+0xd0>
 800ae0e:	2305      	movs	r3, #5
 800ae10:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <f_opendir+0xdc>
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f107 0208 	add.w	r2, r7, #8
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff fbda 	bl	800a5f4 <validate>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d126      	bne.n	800ae98 <f_readdir+0x70>
		if (!fno) {
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ae50:	2100      	movs	r1, #0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7fd ff73 	bl	8008d3e <dir_sdi>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]
 800ae5c:	e01c      	b.n	800ae98 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800ae5e:	2100      	movs	r1, #0
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7fe fb3c 	bl	80094de <dir_read>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d101      	bne.n	800ae74 <f_readdir+0x4c>
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10e      	bne.n	800ae98 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7fe fd8d 	bl	800999c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ae82:	2100      	movs	r1, #0
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7fd ffe3 	bl	8008e50 <dir_next>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d101      	bne.n	800ae98 <f_readdir+0x70>
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b088      	sub	sp, #32
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
	int n = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800aeb6:	e01b      	b.n	800aef0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800aeb8:	f107 0310 	add.w	r3, r7, #16
 800aebc:	f107 0114 	add.w	r1, r7, #20
 800aec0:	2201      	movs	r2, #1
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fdde 	bl	800aa84 <f_read>
		if (rc != 1) break;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d116      	bne.n	800aefc <f_gets+0x5a>
		c = s[0];
 800aece:	7d3b      	ldrb	r3, [r7, #20]
 800aed0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	2b0d      	cmp	r3, #13
 800aed6:	d100      	bne.n	800aeda <f_gets+0x38>
 800aed8:	e00a      	b.n	800aef0 <f_gets+0x4e>
		*p++ = c;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	61ba      	str	r2, [r7, #24]
 800aee0:	7dfa      	ldrb	r2, [r7, #23]
 800aee2:	701a      	strb	r2, [r3, #0]
		n++;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	3301      	adds	r3, #1
 800aee8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	2b0a      	cmp	r3, #10
 800aeee:	d007      	beq.n	800af00 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	69fa      	ldr	r2, [r7, #28]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	dbde      	blt.n	800aeb8 <f_gets+0x16>
 800aefa:	e002      	b.n	800af02 <f_gets+0x60>
		if (rc != 1) break;
 800aefc:	bf00      	nop
 800aefe:	e000      	b.n	800af02 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800af00:	bf00      	nop
	}
	*p = 0;
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	2200      	movs	r2, #0
 800af06:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <f_gets+0x70>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	e000      	b.n	800af14 <f_gets+0x72>
 800af12:	2300      	movs	r3, #0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3720      	adds	r7, #32
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	4613      	mov	r3, r2
 800af28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af2a:	2301      	movs	r3, #1
 800af2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af32:	4b1f      	ldr	r3, [pc, #124]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af34:	7a5b      	ldrb	r3, [r3, #9]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d131      	bne.n	800afa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af3c:	4b1c      	ldr	r3, [pc, #112]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af3e:	7a5b      	ldrb	r3, [r3, #9]
 800af40:	b2db      	uxtb	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af46:	2100      	movs	r1, #0
 800af48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af4a:	4b19      	ldr	r3, [pc, #100]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af4c:	7a5b      	ldrb	r3, [r3, #9]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	4a17      	ldr	r2, [pc, #92]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af5a:	4b15      	ldr	r3, [pc, #84]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af5c:	7a5b      	ldrb	r3, [r3, #9]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af64:	4413      	add	r3, r2
 800af66:	79fa      	ldrb	r2, [r7, #7]
 800af68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af6a:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af6c:	7a5b      	ldrb	r3, [r3, #9]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	b2d1      	uxtb	r1, r2
 800af74:	4a0e      	ldr	r2, [pc, #56]	; (800afb0 <FATFS_LinkDriverEx+0x94>)
 800af76:	7251      	strb	r1, [r2, #9]
 800af78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af7a:	7dbb      	ldrb	r3, [r7, #22]
 800af7c:	3330      	adds	r3, #48	; 0x30
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	3301      	adds	r3, #1
 800af88:	223a      	movs	r2, #58	; 0x3a
 800af8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	3302      	adds	r3, #2
 800af90:	222f      	movs	r2, #47	; 0x2f
 800af92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	3303      	adds	r3, #3
 800af98:	2200      	movs	r2, #0
 800af9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	371c      	adds	r7, #28
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	200003a0 	.word	0x200003a0

0800afb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afbe:	2200      	movs	r2, #0
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff ffaa 	bl	800af1c <FATFS_LinkDriverEx>
 800afc8:	4603      	mov	r3, r0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
	...

0800afd4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	2b7f      	cmp	r3, #127	; 0x7f
 800afe4:	d802      	bhi.n	800afec <ff_convert+0x18>
		c = chr;
 800afe6:	88fb      	ldrh	r3, [r7, #6]
 800afe8:	81fb      	strh	r3, [r7, #14]
 800afea:	e025      	b.n	800b038 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00b      	beq.n	800b00a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	2bff      	cmp	r3, #255	; 0xff
 800aff6:	d805      	bhi.n	800b004 <ff_convert+0x30>
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	3b80      	subs	r3, #128	; 0x80
 800affc:	4a12      	ldr	r2, [pc, #72]	; (800b048 <ff_convert+0x74>)
 800affe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b002:	e000      	b.n	800b006 <ff_convert+0x32>
 800b004:	2300      	movs	r3, #0
 800b006:	81fb      	strh	r3, [r7, #14]
 800b008:	e016      	b.n	800b038 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b00a:	2300      	movs	r3, #0
 800b00c:	81fb      	strh	r3, [r7, #14]
 800b00e:	e009      	b.n	800b024 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b010:	89fb      	ldrh	r3, [r7, #14]
 800b012:	4a0d      	ldr	r2, [pc, #52]	; (800b048 <ff_convert+0x74>)
 800b014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b018:	88fa      	ldrh	r2, [r7, #6]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d006      	beq.n	800b02c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b01e:	89fb      	ldrh	r3, [r7, #14]
 800b020:	3301      	adds	r3, #1
 800b022:	81fb      	strh	r3, [r7, #14]
 800b024:	89fb      	ldrh	r3, [r7, #14]
 800b026:	2b7f      	cmp	r3, #127	; 0x7f
 800b028:	d9f2      	bls.n	800b010 <ff_convert+0x3c>
 800b02a:	e000      	b.n	800b02e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b02c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b02e:	89fb      	ldrh	r3, [r7, #14]
 800b030:	3380      	adds	r3, #128	; 0x80
 800b032:	b29b      	uxth	r3, r3
 800b034:	b2db      	uxtb	r3, r3
 800b036:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b038:	89fb      	ldrh	r3, [r7, #14]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	0800cac4 	.word	0x0800cac4

0800b04c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b056:	88fb      	ldrh	r3, [r7, #6]
 800b058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b05c:	d201      	bcs.n	800b062 <ff_wtoupper+0x16>
 800b05e:	4b3e      	ldr	r3, [pc, #248]	; (800b158 <ff_wtoupper+0x10c>)
 800b060:	e000      	b.n	800b064 <ff_wtoupper+0x18>
 800b062:	4b3e      	ldr	r3, [pc, #248]	; (800b15c <ff_wtoupper+0x110>)
 800b064:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	1c9a      	adds	r2, r3, #2
 800b06a:	617a      	str	r2, [r7, #20]
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b070:	8a7b      	ldrh	r3, [r7, #18]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d068      	beq.n	800b148 <ff_wtoupper+0xfc>
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	8a7b      	ldrh	r3, [r7, #18]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d364      	bcc.n	800b148 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	1c9a      	adds	r2, r3, #2
 800b082:	617a      	str	r2, [r7, #20]
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	823b      	strh	r3, [r7, #16]
 800b088:	8a3b      	ldrh	r3, [r7, #16]
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	81fb      	strh	r3, [r7, #14]
 800b08e:	8a3b      	ldrh	r3, [r7, #16]
 800b090:	b2db      	uxtb	r3, r3
 800b092:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b094:	88fa      	ldrh	r2, [r7, #6]
 800b096:	8a79      	ldrh	r1, [r7, #18]
 800b098:	8a3b      	ldrh	r3, [r7, #16]
 800b09a:	440b      	add	r3, r1
 800b09c:	429a      	cmp	r2, r3
 800b09e:	da49      	bge.n	800b134 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b0a0:	89fb      	ldrh	r3, [r7, #14]
 800b0a2:	2b08      	cmp	r3, #8
 800b0a4:	d84f      	bhi.n	800b146 <ff_wtoupper+0xfa>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <ff_wtoupper+0x60>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0e3 	.word	0x0800b0e3
 800b0b4:	0800b0f9 	.word	0x0800b0f9
 800b0b8:	0800b101 	.word	0x0800b101
 800b0bc:	0800b109 	.word	0x0800b109
 800b0c0:	0800b111 	.word	0x0800b111
 800b0c4:	0800b119 	.word	0x0800b119
 800b0c8:	0800b121 	.word	0x0800b121
 800b0cc:	0800b129 	.word	0x0800b129
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b0d0:	88fa      	ldrh	r2, [r7, #6]
 800b0d2:	8a7b      	ldrh	r3, [r7, #18]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4413      	add	r3, r2
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	80fb      	strh	r3, [r7, #6]
 800b0e0:	e027      	b.n	800b132 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b0e2:	88fa      	ldrh	r2, [r7, #6]
 800b0e4:	8a7b      	ldrh	r3, [r7, #18]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	88fa      	ldrh	r2, [r7, #6]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	80fb      	strh	r3, [r7, #6]
 800b0f6:	e01c      	b.n	800b132 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	3b10      	subs	r3, #16
 800b0fc:	80fb      	strh	r3, [r7, #6]
 800b0fe:	e018      	b.n	800b132 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	3b20      	subs	r3, #32
 800b104:	80fb      	strh	r3, [r7, #6]
 800b106:	e014      	b.n	800b132 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b108:	88fb      	ldrh	r3, [r7, #6]
 800b10a:	3b30      	subs	r3, #48	; 0x30
 800b10c:	80fb      	strh	r3, [r7, #6]
 800b10e:	e010      	b.n	800b132 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	3b1a      	subs	r3, #26
 800b114:	80fb      	strh	r3, [r7, #6]
 800b116:	e00c      	b.n	800b132 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	3308      	adds	r3, #8
 800b11c:	80fb      	strh	r3, [r7, #6]
 800b11e:	e008      	b.n	800b132 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	3b50      	subs	r3, #80	; 0x50
 800b124:	80fb      	strh	r3, [r7, #6]
 800b126:	e004      	b.n	800b132 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b128:	88fb      	ldrh	r3, [r7, #6]
 800b12a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b12e:	80fb      	strh	r3, [r7, #6]
 800b130:	bf00      	nop
			}
			break;
 800b132:	e008      	b.n	800b146 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b134:	89fb      	ldrh	r3, [r7, #14]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d195      	bne.n	800b066 <ff_wtoupper+0x1a>
 800b13a:	8a3b      	ldrh	r3, [r7, #16]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	4413      	add	r3, r2
 800b142:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b144:	e78f      	b.n	800b066 <ff_wtoupper+0x1a>
			break;
 800b146:	bf00      	nop
	}

	return chr;
 800b148:	88fb      	ldrh	r3, [r7, #6]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	0800cbc4 	.word	0x0800cbc4
 800b15c:	0800cdb8 	.word	0x0800cdb8

0800b160 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b164:	2201      	movs	r2, #1
 800b166:	490e      	ldr	r1, [pc, #56]	; (800b1a0 <MX_USB_HOST_Init+0x40>)
 800b168:	480e      	ldr	r0, [pc, #56]	; (800b1a4 <MX_USB_HOST_Init+0x44>)
 800b16a:	f7fb fb13 	bl	8006794 <USBH_Init>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b174:	f7f6 f936 	bl	80013e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b178:	490b      	ldr	r1, [pc, #44]	; (800b1a8 <MX_USB_HOST_Init+0x48>)
 800b17a:	480a      	ldr	r0, [pc, #40]	; (800b1a4 <MX_USB_HOST_Init+0x44>)
 800b17c:	f7fb fb98 	bl	80068b0 <USBH_RegisterClass>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b186:	f7f6 f92d 	bl	80013e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b18a:	4806      	ldr	r0, [pc, #24]	; (800b1a4 <MX_USB_HOST_Init+0x44>)
 800b18c:	f7fb fc1c 	bl	80069c8 <USBH_Start>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b196:	f7f6 f925 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b19a:	bf00      	nop
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	0800b1c1 	.word	0x0800b1c1
 800b1a4:	200003ac 	.word	0x200003ac
 800b1a8:	20000024 	.word	0x20000024

0800b1ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b1b0:	4802      	ldr	r0, [pc, #8]	; (800b1bc <MX_USB_HOST_Process+0x10>)
 800b1b2:	f7fb fc19 	bl	80069e8 <USBH_Process>
}
 800b1b6:	bf00      	nop
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200003ac 	.word	0x200003ac

0800b1c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	2b04      	cmp	r3, #4
 800b1d2:	d819      	bhi.n	800b208 <USBH_UserProcess+0x48>
 800b1d4:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <USBH_UserProcess+0x1c>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b209 	.word	0x0800b209
 800b1e0:	0800b1f9 	.word	0x0800b1f9
 800b1e4:	0800b209 	.word	0x0800b209
 800b1e8:	0800b201 	.word	0x0800b201
 800b1ec:	0800b1f1 	.word	0x0800b1f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b1f0:	4b09      	ldr	r3, [pc, #36]	; (800b218 <USBH_UserProcess+0x58>)
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	701a      	strb	r2, [r3, #0]
  break;
 800b1f6:	e008      	b.n	800b20a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b1f8:	4b07      	ldr	r3, [pc, #28]	; (800b218 <USBH_UserProcess+0x58>)
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	701a      	strb	r2, [r3, #0]
  break;
 800b1fe:	e004      	b.n	800b20a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <USBH_UserProcess+0x58>)
 800b202:	2201      	movs	r2, #1
 800b204:	701a      	strb	r2, [r3, #0]
  break;
 800b206:	e000      	b.n	800b20a <USBH_UserProcess+0x4a>

  default:
  break;
 800b208:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b20a:	bf00      	nop
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	20000784 	.word	0x20000784

0800b21c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	605a      	str	r2, [r3, #4]
 800b22e:	609a      	str	r2, [r3, #8]
 800b230:	60da      	str	r2, [r3, #12]
 800b232:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b23c:	d147      	bne.n	800b2ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	4a24      	ldr	r2, [pc, #144]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b248:	f043 0301 	orr.w	r3, r3, #1
 800b24c:	6313      	str	r3, [r2, #48]	; 0x30
 800b24e:	4b22      	ldr	r3, [pc, #136]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b25a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b25e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b268:	f107 0314 	add.w	r3, r7, #20
 800b26c:	4619      	mov	r1, r3
 800b26e:	481b      	ldr	r0, [pc, #108]	; (800b2dc <HAL_HCD_MspInit+0xc0>)
 800b270:	f7f6 fc6a 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b274:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b27a:	2302      	movs	r3, #2
 800b27c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b282:	2303      	movs	r3, #3
 800b284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b286:	230a      	movs	r3, #10
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b28a:	f107 0314 	add.w	r3, r7, #20
 800b28e:	4619      	mov	r1, r3
 800b290:	4812      	ldr	r0, [pc, #72]	; (800b2dc <HAL_HCD_MspInit+0xc0>)
 800b292:	f7f6 fc59 	bl	8001b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b296:	4b10      	ldr	r3, [pc, #64]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	4a0f      	ldr	r2, [pc, #60]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a0:	6353      	str	r3, [r2, #52]	; 0x34
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	4b0c      	ldr	r3, [pc, #48]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2aa:	4a0b      	ldr	r2, [pc, #44]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b2ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2b0:	6453      	str	r3, [r2, #68]	; 0x44
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <HAL_HCD_MspInit+0xbc>)
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	2043      	movs	r0, #67	; 0x43
 800b2c4:	f7f6 fc09 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b2c8:	2043      	movs	r0, #67	; 0x43
 800b2ca:	f7f6 fc22 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2ce:	bf00      	nop
 800b2d0:	3728      	adds	r7, #40	; 0x28
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	40023800 	.word	0x40023800
 800b2dc:	40020000 	.word	0x40020000

0800b2e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fb ff59 	bl	80071a6 <USBH_LL_IncTimer>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fb ff91 	bl	8007232 <USBH_LL_Connect>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b326:	4618      	mov	r0, r3
 800b328:	f7fb ff9a 	bl	8007260 <USBH_LL_Disconnect>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
 800b340:	4613      	mov	r3, r2
 800b342:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fb ff4b 	bl	80071fa <USBH_LL_PortEnabled>
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fb ff4b 	bl	8007216 <USBH_LL_PortDisabled>
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b396:	2b01      	cmp	r3, #1
 800b398:	d12a      	bne.n	800b3f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b39a:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <USBH_LL_Init+0x74>)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a15      	ldr	r2, [pc, #84]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3aa:	4b14      	ldr	r3, [pc, #80]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b3b2:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b3b8:	4b10      	ldr	r3, [pc, #64]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b3d0:	480a      	ldr	r0, [pc, #40]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3d2:	f7f6 fd56 	bl	8001e82 <HAL_HCD_Init>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b3dc:	f7f6 f802 	bl	80013e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b3e0:	4806      	ldr	r0, [pc, #24]	; (800b3fc <USBH_LL_Init+0x74>)
 800b3e2:	f7f7 f93a 	bl	800265a <HAL_HCD_GetCurrentFrame>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7fb fecc 	bl	8007188 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	20000788 	.word	0x20000788

0800b400 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b416:	4618      	mov	r0, r3
 800b418:	f7f7 f8a9 	bl	800256e <HAL_HCD_Start>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f95c 	bl	800b6e0 <USBH_Get_USB_Status>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b084      	sub	sp, #16
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f7 f8b1 	bl	80025b4 <HAL_HCD_Stop>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 f941 	bl	800b6e0 <USBH_Get_USB_Status>
 800b45e:	4603      	mov	r3, r0
 800b460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b462:	7bbb      	ldrb	r3, [r7, #14]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b474:	2301      	movs	r3, #1
 800b476:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f7 f8f9 	bl	8002676 <HAL_HCD_GetCurrentSpeed>
 800b484:	4603      	mov	r3, r0
 800b486:	2b02      	cmp	r3, #2
 800b488:	d00c      	beq.n	800b4a4 <USBH_LL_GetSpeed+0x38>
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d80d      	bhi.n	800b4aa <USBH_LL_GetSpeed+0x3e>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <USBH_LL_GetSpeed+0x2c>
 800b492:	2b01      	cmp	r3, #1
 800b494:	d003      	beq.n	800b49e <USBH_LL_GetSpeed+0x32>
 800b496:	e008      	b.n	800b4aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
    break;
 800b49c:	e008      	b.n	800b4b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4a2:	e005      	b.n	800b4b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4a8:	e002      	b.n	800b4b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ae:	bf00      	nop
  }
  return  speed;
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f7 f88c 	bl	80025ee <HAL_HCD_ResetPort>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 f8ff 	bl	800b6e0 <USBH_Get_USB_Status>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b502:	78fa      	ldrb	r2, [r7, #3]
 800b504:	4611      	mov	r1, r2
 800b506:	4618      	mov	r0, r3
 800b508:	f7f7 f893 	bl	8002632 <HAL_HCD_HC_GetXferCount>
 800b50c:	4603      	mov	r3, r0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b516:	b590      	push	{r4, r7, lr}
 800b518:	b089      	sub	sp, #36	; 0x24
 800b51a:	af04      	add	r7, sp, #16
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	4608      	mov	r0, r1
 800b520:	4611      	mov	r1, r2
 800b522:	461a      	mov	r2, r3
 800b524:	4603      	mov	r3, r0
 800b526:	70fb      	strb	r3, [r7, #3]
 800b528:	460b      	mov	r3, r1
 800b52a:	70bb      	strb	r3, [r7, #2]
 800b52c:	4613      	mov	r3, r2
 800b52e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b53e:	787c      	ldrb	r4, [r7, #1]
 800b540:	78ba      	ldrb	r2, [r7, #2]
 800b542:	78f9      	ldrb	r1, [r7, #3]
 800b544:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b546:	9302      	str	r3, [sp, #8]
 800b548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	4623      	mov	r3, r4
 800b556:	f7f6 fcf6 	bl	8001f46 <HAL_HCD_HC_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f8bd 	bl	800b6e0 <USBH_Get_USB_Status>
 800b566:	4603      	mov	r3, r0
 800b568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	bd90      	pop	{r4, r7, pc}

0800b574 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b58e:	78fa      	ldrb	r2, [r7, #3]
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7f6 fd66 	bl	8002064 <HAL_HCD_HC_Halt>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f89e 	bl	800b6e0 <USBH_Get_USB_Status>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5b2:	b590      	push	{r4, r7, lr}
 800b5b4:	b089      	sub	sp, #36	; 0x24
 800b5b6:	af04      	add	r7, sp, #16
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	4608      	mov	r0, r1
 800b5bc:	4611      	mov	r1, r2
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	70fb      	strb	r3, [r7, #3]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70bb      	strb	r3, [r7, #2]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5da:	787c      	ldrb	r4, [r7, #1]
 800b5dc:	78ba      	ldrb	r2, [r7, #2]
 800b5de:	78f9      	ldrb	r1, [r7, #3]
 800b5e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b5e4:	9303      	str	r3, [sp, #12]
 800b5e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5e8:	9302      	str	r3, [sp, #8]
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	4623      	mov	r3, r4
 800b5f6:	f7f6 fd59 	bl	80020ac <HAL_HCD_HC_SubmitRequest>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	4618      	mov	r0, r3
 800b602:	f000 f86d 	bl	800b6e0 <USBH_Get_USB_Status>
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3714      	adds	r7, #20
 800b610:	46bd      	mov	sp, r7
 800b612:	bd90      	pop	{r4, r7, pc}

0800b614 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b626:	78fa      	ldrb	r2, [r7, #3]
 800b628:	4611      	mov	r1, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f6 ffed 	bl	800260a <HAL_HCD_HC_GetURBState>
 800b630:	4603      	mov	r3, r0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d103      	bne.n	800b658 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f870 	bl	800b738 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b658:	20c8      	movs	r0, #200	; 0xc8
 800b65a:	f7f6 f93f 	bl	80018dc <HAL_Delay>
  return USBH_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
 800b674:	4613      	mov	r3, r2
 800b676:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b67e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	212c      	movs	r1, #44	; 0x2c
 800b686:	fb01 f303 	mul.w	r3, r1, r3
 800b68a:	4413      	add	r3, r2
 800b68c:	333b      	adds	r3, #59	; 0x3b
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d009      	beq.n	800b6a8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	212c      	movs	r1, #44	; 0x2c
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	4413      	add	r3, r2
 800b6a0:	3354      	adds	r3, #84	; 0x54
 800b6a2:	78ba      	ldrb	r2, [r7, #2]
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e008      	b.n	800b6ba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	212c      	movs	r1, #44	; 0x2c
 800b6ae:	fb01 f303 	mul.w	r3, r1, r3
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3355      	adds	r3, #85	; 0x55
 800b6b6:	78ba      	ldrb	r2, [r7, #2]
 800b6b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7f6 f903 	bl	80018dc <HAL_Delay>
}
 800b6d6:	bf00      	nop
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d817      	bhi.n	800b724 <USBH_Get_USB_Status+0x44>
 800b6f4:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <USBH_Get_USB_Status+0x1c>)
 800b6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fa:	bf00      	nop
 800b6fc:	0800b70d 	.word	0x0800b70d
 800b700:	0800b713 	.word	0x0800b713
 800b704:	0800b719 	.word	0x0800b719
 800b708:	0800b71f 	.word	0x0800b71f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
    break;
 800b710:	e00b      	b.n	800b72a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b712:	2302      	movs	r3, #2
 800b714:	73fb      	strb	r3, [r7, #15]
    break;
 800b716:	e008      	b.n	800b72a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b718:	2301      	movs	r3, #1
 800b71a:	73fb      	strb	r3, [r7, #15]
    break;
 800b71c:	e005      	b.n	800b72a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b71e:	2302      	movs	r3, #2
 800b720:	73fb      	strb	r3, [r7, #15]
    break;
 800b722:	e002      	b.n	800b72a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b724:	2302      	movs	r3, #2
 800b726:	73fb      	strb	r3, [r7, #15]
    break;
 800b728:	bf00      	nop
  }
  return usb_status;
 800b72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b746:	79fb      	ldrb	r3, [r7, #7]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b74c:	2300      	movs	r3, #0
 800b74e:	73fb      	strb	r3, [r7, #15]
 800b750:	e001      	b.n	800b756 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b752:	2301      	movs	r3, #1
 800b754:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	461a      	mov	r2, r3
 800b75a:	2101      	movs	r1, #1
 800b75c:	4803      	ldr	r0, [pc, #12]	; (800b76c <MX_DriverVbusFS+0x34>)
 800b75e:	f7f6 fb77 	bl	8001e50 <HAL_GPIO_WritePin>
}
 800b762:	bf00      	nop
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	40020800 	.word	0x40020800

0800b770 <__errno>:
 800b770:	4b01      	ldr	r3, [pc, #4]	; (800b778 <__errno+0x8>)
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000044 	.word	0x20000044

0800b77c <__libc_init_array>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4d0d      	ldr	r5, [pc, #52]	; (800b7b4 <__libc_init_array+0x38>)
 800b780:	4c0d      	ldr	r4, [pc, #52]	; (800b7b8 <__libc_init_array+0x3c>)
 800b782:	1b64      	subs	r4, r4, r5
 800b784:	10a4      	asrs	r4, r4, #2
 800b786:	2600      	movs	r6, #0
 800b788:	42a6      	cmp	r6, r4
 800b78a:	d109      	bne.n	800b7a0 <__libc_init_array+0x24>
 800b78c:	4d0b      	ldr	r5, [pc, #44]	; (800b7bc <__libc_init_array+0x40>)
 800b78e:	4c0c      	ldr	r4, [pc, #48]	; (800b7c0 <__libc_init_array+0x44>)
 800b790:	f001 f834 	bl	800c7fc <_init>
 800b794:	1b64      	subs	r4, r4, r5
 800b796:	10a4      	asrs	r4, r4, #2
 800b798:	2600      	movs	r6, #0
 800b79a:	42a6      	cmp	r6, r4
 800b79c:	d105      	bne.n	800b7aa <__libc_init_array+0x2e>
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a4:	4798      	blx	r3
 800b7a6:	3601      	adds	r6, #1
 800b7a8:	e7ee      	b.n	800b788 <__libc_init_array+0xc>
 800b7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ae:	4798      	blx	r3
 800b7b0:	3601      	adds	r6, #1
 800b7b2:	e7f2      	b.n	800b79a <__libc_init_array+0x1e>
 800b7b4:	0800cf14 	.word	0x0800cf14
 800b7b8:	0800cf14 	.word	0x0800cf14
 800b7bc:	0800cf14 	.word	0x0800cf14
 800b7c0:	0800cf18 	.word	0x0800cf18

0800b7c4 <malloc>:
 800b7c4:	4b02      	ldr	r3, [pc, #8]	; (800b7d0 <malloc+0xc>)
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	f000 b87f 	b.w	800b8cc <_malloc_r>
 800b7ce:	bf00      	nop
 800b7d0:	20000044 	.word	0x20000044

0800b7d4 <free>:
 800b7d4:	4b02      	ldr	r3, [pc, #8]	; (800b7e0 <free+0xc>)
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	f000 b80b 	b.w	800b7f4 <_free_r>
 800b7de:	bf00      	nop
 800b7e0:	20000044 	.word	0x20000044

0800b7e4 <memset>:
 800b7e4:	4402      	add	r2, r0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d100      	bne.n	800b7ee <memset+0xa>
 800b7ec:	4770      	bx	lr
 800b7ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b7f2:	e7f9      	b.n	800b7e8 <memset+0x4>

0800b7f4 <_free_r>:
 800b7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	d044      	beq.n	800b884 <_free_r+0x90>
 800b7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7fe:	9001      	str	r0, [sp, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	f1a1 0404 	sub.w	r4, r1, #4
 800b806:	bfb8      	it	lt
 800b808:	18e4      	addlt	r4, r4, r3
 800b80a:	f000 fc51 	bl	800c0b0 <__malloc_lock>
 800b80e:	4a1e      	ldr	r2, [pc, #120]	; (800b888 <_free_r+0x94>)
 800b810:	9801      	ldr	r0, [sp, #4]
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	b933      	cbnz	r3, 800b824 <_free_r+0x30>
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	b003      	add	sp, #12
 800b81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b820:	f000 bc4c 	b.w	800c0bc <__malloc_unlock>
 800b824:	42a3      	cmp	r3, r4
 800b826:	d908      	bls.n	800b83a <_free_r+0x46>
 800b828:	6825      	ldr	r5, [r4, #0]
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf01      	itttt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	1949      	addeq	r1, r1, r5
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	e7ed      	b.n	800b816 <_free_r+0x22>
 800b83a:	461a      	mov	r2, r3
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	b10b      	cbz	r3, 800b844 <_free_r+0x50>
 800b840:	42a3      	cmp	r3, r4
 800b842:	d9fa      	bls.n	800b83a <_free_r+0x46>
 800b844:	6811      	ldr	r1, [r2, #0]
 800b846:	1855      	adds	r5, r2, r1
 800b848:	42a5      	cmp	r5, r4
 800b84a:	d10b      	bne.n	800b864 <_free_r+0x70>
 800b84c:	6824      	ldr	r4, [r4, #0]
 800b84e:	4421      	add	r1, r4
 800b850:	1854      	adds	r4, r2, r1
 800b852:	42a3      	cmp	r3, r4
 800b854:	6011      	str	r1, [r2, #0]
 800b856:	d1e0      	bne.n	800b81a <_free_r+0x26>
 800b858:	681c      	ldr	r4, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	6053      	str	r3, [r2, #4]
 800b85e:	4421      	add	r1, r4
 800b860:	6011      	str	r1, [r2, #0]
 800b862:	e7da      	b.n	800b81a <_free_r+0x26>
 800b864:	d902      	bls.n	800b86c <_free_r+0x78>
 800b866:	230c      	movs	r3, #12
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	e7d6      	b.n	800b81a <_free_r+0x26>
 800b86c:	6825      	ldr	r5, [r4, #0]
 800b86e:	1961      	adds	r1, r4, r5
 800b870:	428b      	cmp	r3, r1
 800b872:	bf04      	itt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	bf04      	itt	eq
 800b87c:	1949      	addeq	r1, r1, r5
 800b87e:	6021      	streq	r1, [r4, #0]
 800b880:	6054      	str	r4, [r2, #4]
 800b882:	e7ca      	b.n	800b81a <_free_r+0x26>
 800b884:	b003      	add	sp, #12
 800b886:	bd30      	pop	{r4, r5, pc}
 800b888:	20000a8c 	.word	0x20000a8c

0800b88c <sbrk_aligned>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4e0e      	ldr	r6, [pc, #56]	; (800b8c8 <sbrk_aligned+0x3c>)
 800b890:	460c      	mov	r4, r1
 800b892:	6831      	ldr	r1, [r6, #0]
 800b894:	4605      	mov	r5, r0
 800b896:	b911      	cbnz	r1, 800b89e <sbrk_aligned+0x12>
 800b898:	f000 f91a 	bl	800bad0 <_sbrk_r>
 800b89c:	6030      	str	r0, [r6, #0]
 800b89e:	4621      	mov	r1, r4
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 f915 	bl	800bad0 <_sbrk_r>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d00a      	beq.n	800b8c0 <sbrk_aligned+0x34>
 800b8aa:	1cc4      	adds	r4, r0, #3
 800b8ac:	f024 0403 	bic.w	r4, r4, #3
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	d007      	beq.n	800b8c4 <sbrk_aligned+0x38>
 800b8b4:	1a21      	subs	r1, r4, r0
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 f90a 	bl	800bad0 <_sbrk_r>
 800b8bc:	3001      	adds	r0, #1
 800b8be:	d101      	bne.n	800b8c4 <sbrk_aligned+0x38>
 800b8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	20000a90 	.word	0x20000a90

0800b8cc <_malloc_r>:
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	1ccd      	adds	r5, r1, #3
 800b8d2:	f025 0503 	bic.w	r5, r5, #3
 800b8d6:	3508      	adds	r5, #8
 800b8d8:	2d0c      	cmp	r5, #12
 800b8da:	bf38      	it	cc
 800b8dc:	250c      	movcc	r5, #12
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	db01      	blt.n	800b8e8 <_malloc_r+0x1c>
 800b8e4:	42a9      	cmp	r1, r5
 800b8e6:	d905      	bls.n	800b8f4 <_malloc_r+0x28>
 800b8e8:	230c      	movs	r3, #12
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	2600      	movs	r6, #0
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f4:	4e2e      	ldr	r6, [pc, #184]	; (800b9b0 <_malloc_r+0xe4>)
 800b8f6:	f000 fbdb 	bl	800c0b0 <__malloc_lock>
 800b8fa:	6833      	ldr	r3, [r6, #0]
 800b8fc:	461c      	mov	r4, r3
 800b8fe:	bb34      	cbnz	r4, 800b94e <_malloc_r+0x82>
 800b900:	4629      	mov	r1, r5
 800b902:	4638      	mov	r0, r7
 800b904:	f7ff ffc2 	bl	800b88c <sbrk_aligned>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	4604      	mov	r4, r0
 800b90c:	d14d      	bne.n	800b9aa <_malloc_r+0xde>
 800b90e:	6834      	ldr	r4, [r6, #0]
 800b910:	4626      	mov	r6, r4
 800b912:	2e00      	cmp	r6, #0
 800b914:	d140      	bne.n	800b998 <_malloc_r+0xcc>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	4631      	mov	r1, r6
 800b91a:	4638      	mov	r0, r7
 800b91c:	eb04 0803 	add.w	r8, r4, r3
 800b920:	f000 f8d6 	bl	800bad0 <_sbrk_r>
 800b924:	4580      	cmp	r8, r0
 800b926:	d13a      	bne.n	800b99e <_malloc_r+0xd2>
 800b928:	6821      	ldr	r1, [r4, #0]
 800b92a:	3503      	adds	r5, #3
 800b92c:	1a6d      	subs	r5, r5, r1
 800b92e:	f025 0503 	bic.w	r5, r5, #3
 800b932:	3508      	adds	r5, #8
 800b934:	2d0c      	cmp	r5, #12
 800b936:	bf38      	it	cc
 800b938:	250c      	movcc	r5, #12
 800b93a:	4629      	mov	r1, r5
 800b93c:	4638      	mov	r0, r7
 800b93e:	f7ff ffa5 	bl	800b88c <sbrk_aligned>
 800b942:	3001      	adds	r0, #1
 800b944:	d02b      	beq.n	800b99e <_malloc_r+0xd2>
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	442b      	add	r3, r5
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	e00e      	b.n	800b96c <_malloc_r+0xa0>
 800b94e:	6822      	ldr	r2, [r4, #0]
 800b950:	1b52      	subs	r2, r2, r5
 800b952:	d41e      	bmi.n	800b992 <_malloc_r+0xc6>
 800b954:	2a0b      	cmp	r2, #11
 800b956:	d916      	bls.n	800b986 <_malloc_r+0xba>
 800b958:	1961      	adds	r1, r4, r5
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	6025      	str	r5, [r4, #0]
 800b95e:	bf18      	it	ne
 800b960:	6059      	strne	r1, [r3, #4]
 800b962:	6863      	ldr	r3, [r4, #4]
 800b964:	bf08      	it	eq
 800b966:	6031      	streq	r1, [r6, #0]
 800b968:	5162      	str	r2, [r4, r5]
 800b96a:	604b      	str	r3, [r1, #4]
 800b96c:	4638      	mov	r0, r7
 800b96e:	f104 060b 	add.w	r6, r4, #11
 800b972:	f000 fba3 	bl	800c0bc <__malloc_unlock>
 800b976:	f026 0607 	bic.w	r6, r6, #7
 800b97a:	1d23      	adds	r3, r4, #4
 800b97c:	1af2      	subs	r2, r6, r3
 800b97e:	d0b6      	beq.n	800b8ee <_malloc_r+0x22>
 800b980:	1b9b      	subs	r3, r3, r6
 800b982:	50a3      	str	r3, [r4, r2]
 800b984:	e7b3      	b.n	800b8ee <_malloc_r+0x22>
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	42a3      	cmp	r3, r4
 800b98a:	bf0c      	ite	eq
 800b98c:	6032      	streq	r2, [r6, #0]
 800b98e:	605a      	strne	r2, [r3, #4]
 800b990:	e7ec      	b.n	800b96c <_malloc_r+0xa0>
 800b992:	4623      	mov	r3, r4
 800b994:	6864      	ldr	r4, [r4, #4]
 800b996:	e7b2      	b.n	800b8fe <_malloc_r+0x32>
 800b998:	4634      	mov	r4, r6
 800b99a:	6876      	ldr	r6, [r6, #4]
 800b99c:	e7b9      	b.n	800b912 <_malloc_r+0x46>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	603b      	str	r3, [r7, #0]
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	f000 fb8a 	bl	800c0bc <__malloc_unlock>
 800b9a8:	e7a1      	b.n	800b8ee <_malloc_r+0x22>
 800b9aa:	6025      	str	r5, [r4, #0]
 800b9ac:	e7de      	b.n	800b96c <_malloc_r+0xa0>
 800b9ae:	bf00      	nop
 800b9b0:	20000a8c 	.word	0x20000a8c

0800b9b4 <iprintf>:
 800b9b4:	b40f      	push	{r0, r1, r2, r3}
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <iprintf+0x2c>)
 800b9b8:	b513      	push	{r0, r1, r4, lr}
 800b9ba:	681c      	ldr	r4, [r3, #0]
 800b9bc:	b124      	cbz	r4, 800b9c8 <iprintf+0x14>
 800b9be:	69a3      	ldr	r3, [r4, #24]
 800b9c0:	b913      	cbnz	r3, 800b9c8 <iprintf+0x14>
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f000 fa6e 	bl	800bea4 <__sinit>
 800b9c8:	ab05      	add	r3, sp, #20
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	68a1      	ldr	r1, [r4, #8]
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fba3 	bl	800c11c <_vfiprintf_r>
 800b9d6:	b002      	add	sp, #8
 800b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9dc:	b004      	add	sp, #16
 800b9de:	4770      	bx	lr
 800b9e0:	20000044 	.word	0x20000044

0800b9e4 <_puts_r>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	460e      	mov	r6, r1
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	b118      	cbz	r0, 800b9f4 <_puts_r+0x10>
 800b9ec:	6983      	ldr	r3, [r0, #24]
 800b9ee:	b90b      	cbnz	r3, 800b9f4 <_puts_r+0x10>
 800b9f0:	f000 fa58 	bl	800bea4 <__sinit>
 800b9f4:	69ab      	ldr	r3, [r5, #24]
 800b9f6:	68ac      	ldr	r4, [r5, #8]
 800b9f8:	b913      	cbnz	r3, 800ba00 <_puts_r+0x1c>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 fa52 	bl	800bea4 <__sinit>
 800ba00:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <_puts_r+0xd0>)
 800ba02:	429c      	cmp	r4, r3
 800ba04:	d120      	bne.n	800ba48 <_puts_r+0x64>
 800ba06:	686c      	ldr	r4, [r5, #4]
 800ba08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba0a:	07db      	lsls	r3, r3, #31
 800ba0c:	d405      	bmi.n	800ba1a <_puts_r+0x36>
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	0598      	lsls	r0, r3, #22
 800ba12:	d402      	bmi.n	800ba1a <_puts_r+0x36>
 800ba14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba16:	f000 fae3 	bl	800bfe0 <__retarget_lock_acquire_recursive>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	0719      	lsls	r1, r3, #28
 800ba1e:	d51d      	bpl.n	800ba5c <_puts_r+0x78>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	b1db      	cbz	r3, 800ba5c <_puts_r+0x78>
 800ba24:	3e01      	subs	r6, #1
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	60a3      	str	r3, [r4, #8]
 800ba30:	bb39      	cbnz	r1, 800ba82 <_puts_r+0x9e>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da38      	bge.n	800baa8 <_puts_r+0xc4>
 800ba36:	4622      	mov	r2, r4
 800ba38:	210a      	movs	r1, #10
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f000 f858 	bl	800baf0 <__swbuf_r>
 800ba40:	3001      	adds	r0, #1
 800ba42:	d011      	beq.n	800ba68 <_puts_r+0x84>
 800ba44:	250a      	movs	r5, #10
 800ba46:	e011      	b.n	800ba6c <_puts_r+0x88>
 800ba48:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <_puts_r+0xd4>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d101      	bne.n	800ba52 <_puts_r+0x6e>
 800ba4e:	68ac      	ldr	r4, [r5, #8]
 800ba50:	e7da      	b.n	800ba08 <_puts_r+0x24>
 800ba52:	4b1a      	ldr	r3, [pc, #104]	; (800babc <_puts_r+0xd8>)
 800ba54:	429c      	cmp	r4, r3
 800ba56:	bf08      	it	eq
 800ba58:	68ec      	ldreq	r4, [r5, #12]
 800ba5a:	e7d5      	b.n	800ba08 <_puts_r+0x24>
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	4628      	mov	r0, r5
 800ba60:	f000 f898 	bl	800bb94 <__swsetup_r>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d0dd      	beq.n	800ba24 <_puts_r+0x40>
 800ba68:	f04f 35ff 	mov.w	r5, #4294967295
 800ba6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba6e:	07da      	lsls	r2, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_puts_r+0x9a>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	059b      	lsls	r3, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_puts_r+0x9a>
 800ba78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba7a:	f000 fab2 	bl	800bfe2 <__retarget_lock_release_recursive>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	bd70      	pop	{r4, r5, r6, pc}
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	da04      	bge.n	800ba90 <_puts_r+0xac>
 800ba86:	69a2      	ldr	r2, [r4, #24]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	dc06      	bgt.n	800ba9a <_puts_r+0xb6>
 800ba8c:	290a      	cmp	r1, #10
 800ba8e:	d004      	beq.n	800ba9a <_puts_r+0xb6>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	7019      	strb	r1, [r3, #0]
 800ba98:	e7c5      	b.n	800ba26 <_puts_r+0x42>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 f827 	bl	800baf0 <__swbuf_r>
 800baa2:	3001      	adds	r0, #1
 800baa4:	d1bf      	bne.n	800ba26 <_puts_r+0x42>
 800baa6:	e7df      	b.n	800ba68 <_puts_r+0x84>
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	250a      	movs	r5, #10
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	6022      	str	r2, [r4, #0]
 800bab0:	701d      	strb	r5, [r3, #0]
 800bab2:	e7db      	b.n	800ba6c <_puts_r+0x88>
 800bab4:	0800ce98 	.word	0x0800ce98
 800bab8:	0800ceb8 	.word	0x0800ceb8
 800babc:	0800ce78 	.word	0x0800ce78

0800bac0 <puts>:
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <puts+0xc>)
 800bac2:	4601      	mov	r1, r0
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	f7ff bf8d 	b.w	800b9e4 <_puts_r>
 800baca:	bf00      	nop
 800bacc:	20000044 	.word	0x20000044

0800bad0 <_sbrk_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	; (800baec <_sbrk_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f5 fe1a 	bl	8001714 <_sbrk>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_sbrk_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_sbrk_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20000a98 	.word	0x20000a98

0800baf0 <__swbuf_r>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	460e      	mov	r6, r1
 800baf4:	4614      	mov	r4, r2
 800baf6:	4605      	mov	r5, r0
 800baf8:	b118      	cbz	r0, 800bb02 <__swbuf_r+0x12>
 800bafa:	6983      	ldr	r3, [r0, #24]
 800bafc:	b90b      	cbnz	r3, 800bb02 <__swbuf_r+0x12>
 800bafe:	f000 f9d1 	bl	800bea4 <__sinit>
 800bb02:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <__swbuf_r+0x98>)
 800bb04:	429c      	cmp	r4, r3
 800bb06:	d12b      	bne.n	800bb60 <__swbuf_r+0x70>
 800bb08:	686c      	ldr	r4, [r5, #4]
 800bb0a:	69a3      	ldr	r3, [r4, #24]
 800bb0c:	60a3      	str	r3, [r4, #8]
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	071a      	lsls	r2, r3, #28
 800bb12:	d52f      	bpl.n	800bb74 <__swbuf_r+0x84>
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	b36b      	cbz	r3, 800bb74 <__swbuf_r+0x84>
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	6820      	ldr	r0, [r4, #0]
 800bb1c:	1ac0      	subs	r0, r0, r3
 800bb1e:	6963      	ldr	r3, [r4, #20]
 800bb20:	b2f6      	uxtb	r6, r6
 800bb22:	4283      	cmp	r3, r0
 800bb24:	4637      	mov	r7, r6
 800bb26:	dc04      	bgt.n	800bb32 <__swbuf_r+0x42>
 800bb28:	4621      	mov	r1, r4
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f000 f926 	bl	800bd7c <_fflush_r>
 800bb30:	bb30      	cbnz	r0, 800bb80 <__swbuf_r+0x90>
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	60a3      	str	r3, [r4, #8]
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	6022      	str	r2, [r4, #0]
 800bb3e:	701e      	strb	r6, [r3, #0]
 800bb40:	6963      	ldr	r3, [r4, #20]
 800bb42:	3001      	adds	r0, #1
 800bb44:	4283      	cmp	r3, r0
 800bb46:	d004      	beq.n	800bb52 <__swbuf_r+0x62>
 800bb48:	89a3      	ldrh	r3, [r4, #12]
 800bb4a:	07db      	lsls	r3, r3, #31
 800bb4c:	d506      	bpl.n	800bb5c <__swbuf_r+0x6c>
 800bb4e:	2e0a      	cmp	r6, #10
 800bb50:	d104      	bne.n	800bb5c <__swbuf_r+0x6c>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4628      	mov	r0, r5
 800bb56:	f000 f911 	bl	800bd7c <_fflush_r>
 800bb5a:	b988      	cbnz	r0, 800bb80 <__swbuf_r+0x90>
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <__swbuf_r+0x9c>)
 800bb62:	429c      	cmp	r4, r3
 800bb64:	d101      	bne.n	800bb6a <__swbuf_r+0x7a>
 800bb66:	68ac      	ldr	r4, [r5, #8]
 800bb68:	e7cf      	b.n	800bb0a <__swbuf_r+0x1a>
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <__swbuf_r+0xa0>)
 800bb6c:	429c      	cmp	r4, r3
 800bb6e:	bf08      	it	eq
 800bb70:	68ec      	ldreq	r4, [r5, #12]
 800bb72:	e7ca      	b.n	800bb0a <__swbuf_r+0x1a>
 800bb74:	4621      	mov	r1, r4
 800bb76:	4628      	mov	r0, r5
 800bb78:	f000 f80c 	bl	800bb94 <__swsetup_r>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d0cb      	beq.n	800bb18 <__swbuf_r+0x28>
 800bb80:	f04f 37ff 	mov.w	r7, #4294967295
 800bb84:	e7ea      	b.n	800bb5c <__swbuf_r+0x6c>
 800bb86:	bf00      	nop
 800bb88:	0800ce98 	.word	0x0800ce98
 800bb8c:	0800ceb8 	.word	0x0800ceb8
 800bb90:	0800ce78 	.word	0x0800ce78

0800bb94 <__swsetup_r>:
 800bb94:	4b32      	ldr	r3, [pc, #200]	; (800bc60 <__swsetup_r+0xcc>)
 800bb96:	b570      	push	{r4, r5, r6, lr}
 800bb98:	681d      	ldr	r5, [r3, #0]
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	b125      	cbz	r5, 800bbaa <__swsetup_r+0x16>
 800bba0:	69ab      	ldr	r3, [r5, #24]
 800bba2:	b913      	cbnz	r3, 800bbaa <__swsetup_r+0x16>
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 f97d 	bl	800bea4 <__sinit>
 800bbaa:	4b2e      	ldr	r3, [pc, #184]	; (800bc64 <__swsetup_r+0xd0>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	d10f      	bne.n	800bbd0 <__swsetup_r+0x3c>
 800bbb0:	686c      	ldr	r4, [r5, #4]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb8:	0719      	lsls	r1, r3, #28
 800bbba:	d42c      	bmi.n	800bc16 <__swsetup_r+0x82>
 800bbbc:	06dd      	lsls	r5, r3, #27
 800bbbe:	d411      	bmi.n	800bbe4 <__swsetup_r+0x50>
 800bbc0:	2309      	movs	r3, #9
 800bbc2:	6033      	str	r3, [r6, #0]
 800bbc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	f04f 30ff 	mov.w	r0, #4294967295
 800bbce:	e03e      	b.n	800bc4e <__swsetup_r+0xba>
 800bbd0:	4b25      	ldr	r3, [pc, #148]	; (800bc68 <__swsetup_r+0xd4>)
 800bbd2:	429c      	cmp	r4, r3
 800bbd4:	d101      	bne.n	800bbda <__swsetup_r+0x46>
 800bbd6:	68ac      	ldr	r4, [r5, #8]
 800bbd8:	e7eb      	b.n	800bbb2 <__swsetup_r+0x1e>
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <__swsetup_r+0xd8>)
 800bbdc:	429c      	cmp	r4, r3
 800bbde:	bf08      	it	eq
 800bbe0:	68ec      	ldreq	r4, [r5, #12]
 800bbe2:	e7e6      	b.n	800bbb2 <__swsetup_r+0x1e>
 800bbe4:	0758      	lsls	r0, r3, #29
 800bbe6:	d512      	bpl.n	800bc0e <__swsetup_r+0x7a>
 800bbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbea:	b141      	cbz	r1, 800bbfe <__swsetup_r+0x6a>
 800bbec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	d002      	beq.n	800bbfa <__swsetup_r+0x66>
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff fdfd 	bl	800b7f4 <_free_r>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	6363      	str	r3, [r4, #52]	; 0x34
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc04:	81a3      	strh	r3, [r4, #12]
 800bc06:	2300      	movs	r3, #0
 800bc08:	6063      	str	r3, [r4, #4]
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f043 0308 	orr.w	r3, r3, #8
 800bc14:	81a3      	strh	r3, [r4, #12]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	b94b      	cbnz	r3, 800bc2e <__swsetup_r+0x9a>
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc24:	d003      	beq.n	800bc2e <__swsetup_r+0x9a>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 fa01 	bl	800c030 <__smakebuf_r>
 800bc2e:	89a0      	ldrh	r0, [r4, #12]
 800bc30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc34:	f010 0301 	ands.w	r3, r0, #1
 800bc38:	d00a      	beq.n	800bc50 <__swsetup_r+0xbc>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60a3      	str	r3, [r4, #8]
 800bc3e:	6963      	ldr	r3, [r4, #20]
 800bc40:	425b      	negs	r3, r3
 800bc42:	61a3      	str	r3, [r4, #24]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	b943      	cbnz	r3, 800bc5a <__swsetup_r+0xc6>
 800bc48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc4c:	d1ba      	bne.n	800bbc4 <__swsetup_r+0x30>
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}
 800bc50:	0781      	lsls	r1, r0, #30
 800bc52:	bf58      	it	pl
 800bc54:	6963      	ldrpl	r3, [r4, #20]
 800bc56:	60a3      	str	r3, [r4, #8]
 800bc58:	e7f4      	b.n	800bc44 <__swsetup_r+0xb0>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e7f7      	b.n	800bc4e <__swsetup_r+0xba>
 800bc5e:	bf00      	nop
 800bc60:	20000044 	.word	0x20000044
 800bc64:	0800ce98 	.word	0x0800ce98
 800bc68:	0800ceb8 	.word	0x0800ceb8
 800bc6c:	0800ce78 	.word	0x0800ce78

0800bc70 <__sflush_r>:
 800bc70:	898a      	ldrh	r2, [r1, #12]
 800bc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	4605      	mov	r5, r0
 800bc78:	0710      	lsls	r0, r2, #28
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	d458      	bmi.n	800bd30 <__sflush_r+0xc0>
 800bc7e:	684b      	ldr	r3, [r1, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dc05      	bgt.n	800bc90 <__sflush_r+0x20>
 800bc84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	dc02      	bgt.n	800bc90 <__sflush_r+0x20>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc92:	2e00      	cmp	r6, #0
 800bc94:	d0f9      	beq.n	800bc8a <__sflush_r+0x1a>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc9c:	682f      	ldr	r7, [r5, #0]
 800bc9e:	602b      	str	r3, [r5, #0]
 800bca0:	d032      	beq.n	800bd08 <__sflush_r+0x98>
 800bca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	075a      	lsls	r2, r3, #29
 800bca8:	d505      	bpl.n	800bcb6 <__sflush_r+0x46>
 800bcaa:	6863      	ldr	r3, [r4, #4]
 800bcac:	1ac0      	subs	r0, r0, r3
 800bcae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcb0:	b10b      	cbz	r3, 800bcb6 <__sflush_r+0x46>
 800bcb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcb4:	1ac0      	subs	r0, r0, r3
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcbc:	6a21      	ldr	r1, [r4, #32]
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b0      	blx	r6
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	d106      	bne.n	800bcd6 <__sflush_r+0x66>
 800bcc8:	6829      	ldr	r1, [r5, #0]
 800bcca:	291d      	cmp	r1, #29
 800bccc:	d82c      	bhi.n	800bd28 <__sflush_r+0xb8>
 800bcce:	4a2a      	ldr	r2, [pc, #168]	; (800bd78 <__sflush_r+0x108>)
 800bcd0:	40ca      	lsrs	r2, r1
 800bcd2:	07d6      	lsls	r6, r2, #31
 800bcd4:	d528      	bpl.n	800bd28 <__sflush_r+0xb8>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	6062      	str	r2, [r4, #4]
 800bcda:	04d9      	lsls	r1, r3, #19
 800bcdc:	6922      	ldr	r2, [r4, #16]
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	d504      	bpl.n	800bcec <__sflush_r+0x7c>
 800bce2:	1c42      	adds	r2, r0, #1
 800bce4:	d101      	bne.n	800bcea <__sflush_r+0x7a>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	b903      	cbnz	r3, 800bcec <__sflush_r+0x7c>
 800bcea:	6560      	str	r0, [r4, #84]	; 0x54
 800bcec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcee:	602f      	str	r7, [r5, #0]
 800bcf0:	2900      	cmp	r1, #0
 800bcf2:	d0ca      	beq.n	800bc8a <__sflush_r+0x1a>
 800bcf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcf8:	4299      	cmp	r1, r3
 800bcfa:	d002      	beq.n	800bd02 <__sflush_r+0x92>
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7ff fd79 	bl	800b7f4 <_free_r>
 800bd02:	2000      	movs	r0, #0
 800bd04:	6360      	str	r0, [r4, #52]	; 0x34
 800bd06:	e7c1      	b.n	800bc8c <__sflush_r+0x1c>
 800bd08:	6a21      	ldr	r1, [r4, #32]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	47b0      	blx	r6
 800bd10:	1c41      	adds	r1, r0, #1
 800bd12:	d1c7      	bne.n	800bca4 <__sflush_r+0x34>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d0c4      	beq.n	800bca4 <__sflush_r+0x34>
 800bd1a:	2b1d      	cmp	r3, #29
 800bd1c:	d001      	beq.n	800bd22 <__sflush_r+0xb2>
 800bd1e:	2b16      	cmp	r3, #22
 800bd20:	d101      	bne.n	800bd26 <__sflush_r+0xb6>
 800bd22:	602f      	str	r7, [r5, #0]
 800bd24:	e7b1      	b.n	800bc8a <__sflush_r+0x1a>
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2c:	81a3      	strh	r3, [r4, #12]
 800bd2e:	e7ad      	b.n	800bc8c <__sflush_r+0x1c>
 800bd30:	690f      	ldr	r7, [r1, #16]
 800bd32:	2f00      	cmp	r7, #0
 800bd34:	d0a9      	beq.n	800bc8a <__sflush_r+0x1a>
 800bd36:	0793      	lsls	r3, r2, #30
 800bd38:	680e      	ldr	r6, [r1, #0]
 800bd3a:	bf08      	it	eq
 800bd3c:	694b      	ldreq	r3, [r1, #20]
 800bd3e:	600f      	str	r7, [r1, #0]
 800bd40:	bf18      	it	ne
 800bd42:	2300      	movne	r3, #0
 800bd44:	eba6 0807 	sub.w	r8, r6, r7
 800bd48:	608b      	str	r3, [r1, #8]
 800bd4a:	f1b8 0f00 	cmp.w	r8, #0
 800bd4e:	dd9c      	ble.n	800bc8a <__sflush_r+0x1a>
 800bd50:	6a21      	ldr	r1, [r4, #32]
 800bd52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd54:	4643      	mov	r3, r8
 800bd56:	463a      	mov	r2, r7
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b0      	blx	r6
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	dc06      	bgt.n	800bd6e <__sflush_r+0xfe>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6c:	e78e      	b.n	800bc8c <__sflush_r+0x1c>
 800bd6e:	4407      	add	r7, r0
 800bd70:	eba8 0800 	sub.w	r8, r8, r0
 800bd74:	e7e9      	b.n	800bd4a <__sflush_r+0xda>
 800bd76:	bf00      	nop
 800bd78:	20400001 	.word	0x20400001

0800bd7c <_fflush_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	690b      	ldr	r3, [r1, #16]
 800bd80:	4605      	mov	r5, r0
 800bd82:	460c      	mov	r4, r1
 800bd84:	b913      	cbnz	r3, 800bd8c <_fflush_r+0x10>
 800bd86:	2500      	movs	r5, #0
 800bd88:	4628      	mov	r0, r5
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	b118      	cbz	r0, 800bd96 <_fflush_r+0x1a>
 800bd8e:	6983      	ldr	r3, [r0, #24]
 800bd90:	b90b      	cbnz	r3, 800bd96 <_fflush_r+0x1a>
 800bd92:	f000 f887 	bl	800bea4 <__sinit>
 800bd96:	4b14      	ldr	r3, [pc, #80]	; (800bde8 <_fflush_r+0x6c>)
 800bd98:	429c      	cmp	r4, r3
 800bd9a:	d11b      	bne.n	800bdd4 <_fflush_r+0x58>
 800bd9c:	686c      	ldr	r4, [r5, #4]
 800bd9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0ef      	beq.n	800bd86 <_fflush_r+0xa>
 800bda6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bda8:	07d0      	lsls	r0, r2, #31
 800bdaa:	d404      	bmi.n	800bdb6 <_fflush_r+0x3a>
 800bdac:	0599      	lsls	r1, r3, #22
 800bdae:	d402      	bmi.n	800bdb6 <_fflush_r+0x3a>
 800bdb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdb2:	f000 f915 	bl	800bfe0 <__retarget_lock_acquire_recursive>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	4621      	mov	r1, r4
 800bdba:	f7ff ff59 	bl	800bc70 <__sflush_r>
 800bdbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdc0:	07da      	lsls	r2, r3, #31
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	d4e0      	bmi.n	800bd88 <_fflush_r+0xc>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	059b      	lsls	r3, r3, #22
 800bdca:	d4dd      	bmi.n	800bd88 <_fflush_r+0xc>
 800bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdce:	f000 f908 	bl	800bfe2 <__retarget_lock_release_recursive>
 800bdd2:	e7d9      	b.n	800bd88 <_fflush_r+0xc>
 800bdd4:	4b05      	ldr	r3, [pc, #20]	; (800bdec <_fflush_r+0x70>)
 800bdd6:	429c      	cmp	r4, r3
 800bdd8:	d101      	bne.n	800bdde <_fflush_r+0x62>
 800bdda:	68ac      	ldr	r4, [r5, #8]
 800bddc:	e7df      	b.n	800bd9e <_fflush_r+0x22>
 800bdde:	4b04      	ldr	r3, [pc, #16]	; (800bdf0 <_fflush_r+0x74>)
 800bde0:	429c      	cmp	r4, r3
 800bde2:	bf08      	it	eq
 800bde4:	68ec      	ldreq	r4, [r5, #12]
 800bde6:	e7da      	b.n	800bd9e <_fflush_r+0x22>
 800bde8:	0800ce98 	.word	0x0800ce98
 800bdec:	0800ceb8 	.word	0x0800ceb8
 800bdf0:	0800ce78 	.word	0x0800ce78

0800bdf4 <std>:
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	b510      	push	{r4, lr}
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	e9c0 3300 	strd	r3, r3, [r0]
 800bdfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be02:	6083      	str	r3, [r0, #8]
 800be04:	8181      	strh	r1, [r0, #12]
 800be06:	6643      	str	r3, [r0, #100]	; 0x64
 800be08:	81c2      	strh	r2, [r0, #14]
 800be0a:	6183      	str	r3, [r0, #24]
 800be0c:	4619      	mov	r1, r3
 800be0e:	2208      	movs	r2, #8
 800be10:	305c      	adds	r0, #92	; 0x5c
 800be12:	f7ff fce7 	bl	800b7e4 <memset>
 800be16:	4b05      	ldr	r3, [pc, #20]	; (800be2c <std+0x38>)
 800be18:	6263      	str	r3, [r4, #36]	; 0x24
 800be1a:	4b05      	ldr	r3, [pc, #20]	; (800be30 <std+0x3c>)
 800be1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be1e:	4b05      	ldr	r3, [pc, #20]	; (800be34 <std+0x40>)
 800be20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <std+0x44>)
 800be24:	6224      	str	r4, [r4, #32]
 800be26:	6323      	str	r3, [r4, #48]	; 0x30
 800be28:	bd10      	pop	{r4, pc}
 800be2a:	bf00      	nop
 800be2c:	0800c6a5 	.word	0x0800c6a5
 800be30:	0800c6c7 	.word	0x0800c6c7
 800be34:	0800c6ff 	.word	0x0800c6ff
 800be38:	0800c723 	.word	0x0800c723

0800be3c <_cleanup_r>:
 800be3c:	4901      	ldr	r1, [pc, #4]	; (800be44 <_cleanup_r+0x8>)
 800be3e:	f000 b8af 	b.w	800bfa0 <_fwalk_reent>
 800be42:	bf00      	nop
 800be44:	0800bd7d 	.word	0x0800bd7d

0800be48 <__sfmoreglue>:
 800be48:	b570      	push	{r4, r5, r6, lr}
 800be4a:	2268      	movs	r2, #104	; 0x68
 800be4c:	1e4d      	subs	r5, r1, #1
 800be4e:	4355      	muls	r5, r2
 800be50:	460e      	mov	r6, r1
 800be52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be56:	f7ff fd39 	bl	800b8cc <_malloc_r>
 800be5a:	4604      	mov	r4, r0
 800be5c:	b140      	cbz	r0, 800be70 <__sfmoreglue+0x28>
 800be5e:	2100      	movs	r1, #0
 800be60:	e9c0 1600 	strd	r1, r6, [r0]
 800be64:	300c      	adds	r0, #12
 800be66:	60a0      	str	r0, [r4, #8]
 800be68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be6c:	f7ff fcba 	bl	800b7e4 <memset>
 800be70:	4620      	mov	r0, r4
 800be72:	bd70      	pop	{r4, r5, r6, pc}

0800be74 <__sfp_lock_acquire>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__sfp_lock_acquire+0x8>)
 800be76:	f000 b8b3 	b.w	800bfe0 <__retarget_lock_acquire_recursive>
 800be7a:	bf00      	nop
 800be7c:	20000a95 	.word	0x20000a95

0800be80 <__sfp_lock_release>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__sfp_lock_release+0x8>)
 800be82:	f000 b8ae 	b.w	800bfe2 <__retarget_lock_release_recursive>
 800be86:	bf00      	nop
 800be88:	20000a95 	.word	0x20000a95

0800be8c <__sinit_lock_acquire>:
 800be8c:	4801      	ldr	r0, [pc, #4]	; (800be94 <__sinit_lock_acquire+0x8>)
 800be8e:	f000 b8a7 	b.w	800bfe0 <__retarget_lock_acquire_recursive>
 800be92:	bf00      	nop
 800be94:	20000a96 	.word	0x20000a96

0800be98 <__sinit_lock_release>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sinit_lock_release+0x8>)
 800be9a:	f000 b8a2 	b.w	800bfe2 <__retarget_lock_release_recursive>
 800be9e:	bf00      	nop
 800bea0:	20000a96 	.word	0x20000a96

0800bea4 <__sinit>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	4604      	mov	r4, r0
 800bea8:	f7ff fff0 	bl	800be8c <__sinit_lock_acquire>
 800beac:	69a3      	ldr	r3, [r4, #24]
 800beae:	b11b      	cbz	r3, 800beb8 <__sinit+0x14>
 800beb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb4:	f7ff bff0 	b.w	800be98 <__sinit_lock_release>
 800beb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bebc:	6523      	str	r3, [r4, #80]	; 0x50
 800bebe:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <__sinit+0x68>)
 800bec0:	4a13      	ldr	r2, [pc, #76]	; (800bf10 <__sinit+0x6c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	bf04      	itt	eq
 800beca:	2301      	moveq	r3, #1
 800becc:	61a3      	streq	r3, [r4, #24]
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 f820 	bl	800bf14 <__sfp>
 800bed4:	6060      	str	r0, [r4, #4]
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 f81c 	bl	800bf14 <__sfp>
 800bedc:	60a0      	str	r0, [r4, #8]
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 f818 	bl	800bf14 <__sfp>
 800bee4:	2200      	movs	r2, #0
 800bee6:	60e0      	str	r0, [r4, #12]
 800bee8:	2104      	movs	r1, #4
 800beea:	6860      	ldr	r0, [r4, #4]
 800beec:	f7ff ff82 	bl	800bdf4 <std>
 800bef0:	68a0      	ldr	r0, [r4, #8]
 800bef2:	2201      	movs	r2, #1
 800bef4:	2109      	movs	r1, #9
 800bef6:	f7ff ff7d 	bl	800bdf4 <std>
 800befa:	68e0      	ldr	r0, [r4, #12]
 800befc:	2202      	movs	r2, #2
 800befe:	2112      	movs	r1, #18
 800bf00:	f7ff ff78 	bl	800bdf4 <std>
 800bf04:	2301      	movs	r3, #1
 800bf06:	61a3      	str	r3, [r4, #24]
 800bf08:	e7d2      	b.n	800beb0 <__sinit+0xc>
 800bf0a:	bf00      	nop
 800bf0c:	0800ce74 	.word	0x0800ce74
 800bf10:	0800be3d 	.word	0x0800be3d

0800bf14 <__sfp>:
 800bf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf16:	4607      	mov	r7, r0
 800bf18:	f7ff ffac 	bl	800be74 <__sfp_lock_acquire>
 800bf1c:	4b1e      	ldr	r3, [pc, #120]	; (800bf98 <__sfp+0x84>)
 800bf1e:	681e      	ldr	r6, [r3, #0]
 800bf20:	69b3      	ldr	r3, [r6, #24]
 800bf22:	b913      	cbnz	r3, 800bf2a <__sfp+0x16>
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7ff ffbd 	bl	800bea4 <__sinit>
 800bf2a:	3648      	adds	r6, #72	; 0x48
 800bf2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	d503      	bpl.n	800bf3c <__sfp+0x28>
 800bf34:	6833      	ldr	r3, [r6, #0]
 800bf36:	b30b      	cbz	r3, 800bf7c <__sfp+0x68>
 800bf38:	6836      	ldr	r6, [r6, #0]
 800bf3a:	e7f7      	b.n	800bf2c <__sfp+0x18>
 800bf3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf40:	b9d5      	cbnz	r5, 800bf78 <__sfp+0x64>
 800bf42:	4b16      	ldr	r3, [pc, #88]	; (800bf9c <__sfp+0x88>)
 800bf44:	60e3      	str	r3, [r4, #12]
 800bf46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf4a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf4c:	f000 f847 	bl	800bfde <__retarget_lock_init_recursive>
 800bf50:	f7ff ff96 	bl	800be80 <__sfp_lock_release>
 800bf54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf5c:	6025      	str	r5, [r4, #0]
 800bf5e:	61a5      	str	r5, [r4, #24]
 800bf60:	2208      	movs	r2, #8
 800bf62:	4629      	mov	r1, r5
 800bf64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf68:	f7ff fc3c 	bl	800b7e4 <memset>
 800bf6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf74:	4620      	mov	r0, r4
 800bf76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf78:	3468      	adds	r4, #104	; 0x68
 800bf7a:	e7d9      	b.n	800bf30 <__sfp+0x1c>
 800bf7c:	2104      	movs	r1, #4
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f7ff ff62 	bl	800be48 <__sfmoreglue>
 800bf84:	4604      	mov	r4, r0
 800bf86:	6030      	str	r0, [r6, #0]
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d1d5      	bne.n	800bf38 <__sfp+0x24>
 800bf8c:	f7ff ff78 	bl	800be80 <__sfp_lock_release>
 800bf90:	230c      	movs	r3, #12
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	e7ee      	b.n	800bf74 <__sfp+0x60>
 800bf96:	bf00      	nop
 800bf98:	0800ce74 	.word	0x0800ce74
 800bf9c:	ffff0001 	.word	0xffff0001

0800bfa0 <_fwalk_reent>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	4688      	mov	r8, r1
 800bfa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfac:	2700      	movs	r7, #0
 800bfae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfb2:	f1b9 0901 	subs.w	r9, r9, #1
 800bfb6:	d505      	bpl.n	800bfc4 <_fwalk_reent+0x24>
 800bfb8:	6824      	ldr	r4, [r4, #0]
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d1f7      	bne.n	800bfae <_fwalk_reent+0xe>
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc4:	89ab      	ldrh	r3, [r5, #12]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d907      	bls.n	800bfda <_fwalk_reent+0x3a>
 800bfca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	d003      	beq.n	800bfda <_fwalk_reent+0x3a>
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	47c0      	blx	r8
 800bfd8:	4307      	orrs	r7, r0
 800bfda:	3568      	adds	r5, #104	; 0x68
 800bfdc:	e7e9      	b.n	800bfb2 <_fwalk_reent+0x12>

0800bfde <__retarget_lock_init_recursive>:
 800bfde:	4770      	bx	lr

0800bfe0 <__retarget_lock_acquire_recursive>:
 800bfe0:	4770      	bx	lr

0800bfe2 <__retarget_lock_release_recursive>:
 800bfe2:	4770      	bx	lr

0800bfe4 <__swhatbuf_r>:
 800bfe4:	b570      	push	{r4, r5, r6, lr}
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfec:	2900      	cmp	r1, #0
 800bfee:	b096      	sub	sp, #88	; 0x58
 800bff0:	4614      	mov	r4, r2
 800bff2:	461d      	mov	r5, r3
 800bff4:	da08      	bge.n	800c008 <__swhatbuf_r+0x24>
 800bff6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	602a      	str	r2, [r5, #0]
 800bffe:	061a      	lsls	r2, r3, #24
 800c000:	d410      	bmi.n	800c024 <__swhatbuf_r+0x40>
 800c002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c006:	e00e      	b.n	800c026 <__swhatbuf_r+0x42>
 800c008:	466a      	mov	r2, sp
 800c00a:	f000 fbb1 	bl	800c770 <_fstat_r>
 800c00e:	2800      	cmp	r0, #0
 800c010:	dbf1      	blt.n	800bff6 <__swhatbuf_r+0x12>
 800c012:	9a01      	ldr	r2, [sp, #4]
 800c014:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c018:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c01c:	425a      	negs	r2, r3
 800c01e:	415a      	adcs	r2, r3
 800c020:	602a      	str	r2, [r5, #0]
 800c022:	e7ee      	b.n	800c002 <__swhatbuf_r+0x1e>
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	2000      	movs	r0, #0
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	b016      	add	sp, #88	; 0x58
 800c02c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c030 <__smakebuf_r>:
 800c030:	898b      	ldrh	r3, [r1, #12]
 800c032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c034:	079d      	lsls	r5, r3, #30
 800c036:	4606      	mov	r6, r0
 800c038:	460c      	mov	r4, r1
 800c03a:	d507      	bpl.n	800c04c <__smakebuf_r+0x1c>
 800c03c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	6123      	str	r3, [r4, #16]
 800c044:	2301      	movs	r3, #1
 800c046:	6163      	str	r3, [r4, #20]
 800c048:	b002      	add	sp, #8
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	ab01      	add	r3, sp, #4
 800c04e:	466a      	mov	r2, sp
 800c050:	f7ff ffc8 	bl	800bfe4 <__swhatbuf_r>
 800c054:	9900      	ldr	r1, [sp, #0]
 800c056:	4605      	mov	r5, r0
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff fc37 	bl	800b8cc <_malloc_r>
 800c05e:	b948      	cbnz	r0, 800c074 <__smakebuf_r+0x44>
 800c060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c064:	059a      	lsls	r2, r3, #22
 800c066:	d4ef      	bmi.n	800c048 <__smakebuf_r+0x18>
 800c068:	f023 0303 	bic.w	r3, r3, #3
 800c06c:	f043 0302 	orr.w	r3, r3, #2
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	e7e3      	b.n	800c03c <__smakebuf_r+0xc>
 800c074:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <__smakebuf_r+0x7c>)
 800c076:	62b3      	str	r3, [r6, #40]	; 0x28
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	6020      	str	r0, [r4, #0]
 800c07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	9b00      	ldr	r3, [sp, #0]
 800c084:	6163      	str	r3, [r4, #20]
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	6120      	str	r0, [r4, #16]
 800c08a:	b15b      	cbz	r3, 800c0a4 <__smakebuf_r+0x74>
 800c08c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c090:	4630      	mov	r0, r6
 800c092:	f000 fb7f 	bl	800c794 <_isatty_r>
 800c096:	b128      	cbz	r0, 800c0a4 <__smakebuf_r+0x74>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	f023 0303 	bic.w	r3, r3, #3
 800c09e:	f043 0301 	orr.w	r3, r3, #1
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	89a0      	ldrh	r0, [r4, #12]
 800c0a6:	4305      	orrs	r5, r0
 800c0a8:	81a5      	strh	r5, [r4, #12]
 800c0aa:	e7cd      	b.n	800c048 <__smakebuf_r+0x18>
 800c0ac:	0800be3d 	.word	0x0800be3d

0800c0b0 <__malloc_lock>:
 800c0b0:	4801      	ldr	r0, [pc, #4]	; (800c0b8 <__malloc_lock+0x8>)
 800c0b2:	f7ff bf95 	b.w	800bfe0 <__retarget_lock_acquire_recursive>
 800c0b6:	bf00      	nop
 800c0b8:	20000a94 	.word	0x20000a94

0800c0bc <__malloc_unlock>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__malloc_unlock+0x8>)
 800c0be:	f7ff bf90 	b.w	800bfe2 <__retarget_lock_release_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	20000a94 	.word	0x20000a94

0800c0c8 <__sfputc_r>:
 800c0c8:	6893      	ldr	r3, [r2, #8]
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	b410      	push	{r4}
 800c0d0:	6093      	str	r3, [r2, #8]
 800c0d2:	da08      	bge.n	800c0e6 <__sfputc_r+0x1e>
 800c0d4:	6994      	ldr	r4, [r2, #24]
 800c0d6:	42a3      	cmp	r3, r4
 800c0d8:	db01      	blt.n	800c0de <__sfputc_r+0x16>
 800c0da:	290a      	cmp	r1, #10
 800c0dc:	d103      	bne.n	800c0e6 <__sfputc_r+0x1e>
 800c0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e2:	f7ff bd05 	b.w	800baf0 <__swbuf_r>
 800c0e6:	6813      	ldr	r3, [r2, #0]
 800c0e8:	1c58      	adds	r0, r3, #1
 800c0ea:	6010      	str	r0, [r2, #0]
 800c0ec:	7019      	strb	r1, [r3, #0]
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <__sfputs_r>:
 800c0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	18d5      	adds	r5, r2, r3
 800c100:	42ac      	cmp	r4, r5
 800c102:	d101      	bne.n	800c108 <__sfputs_r+0x12>
 800c104:	2000      	movs	r0, #0
 800c106:	e007      	b.n	800c118 <__sfputs_r+0x22>
 800c108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10c:	463a      	mov	r2, r7
 800c10e:	4630      	mov	r0, r6
 800c110:	f7ff ffda 	bl	800c0c8 <__sfputc_r>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d1f3      	bne.n	800c100 <__sfputs_r+0xa>
 800c118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c11c <_vfiprintf_r>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	460d      	mov	r5, r1
 800c122:	b09d      	sub	sp, #116	; 0x74
 800c124:	4614      	mov	r4, r2
 800c126:	4698      	mov	r8, r3
 800c128:	4606      	mov	r6, r0
 800c12a:	b118      	cbz	r0, 800c134 <_vfiprintf_r+0x18>
 800c12c:	6983      	ldr	r3, [r0, #24]
 800c12e:	b90b      	cbnz	r3, 800c134 <_vfiprintf_r+0x18>
 800c130:	f7ff feb8 	bl	800bea4 <__sinit>
 800c134:	4b89      	ldr	r3, [pc, #548]	; (800c35c <_vfiprintf_r+0x240>)
 800c136:	429d      	cmp	r5, r3
 800c138:	d11b      	bne.n	800c172 <_vfiprintf_r+0x56>
 800c13a:	6875      	ldr	r5, [r6, #4]
 800c13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c13e:	07d9      	lsls	r1, r3, #31
 800c140:	d405      	bmi.n	800c14e <_vfiprintf_r+0x32>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	059a      	lsls	r2, r3, #22
 800c146:	d402      	bmi.n	800c14e <_vfiprintf_r+0x32>
 800c148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c14a:	f7ff ff49 	bl	800bfe0 <__retarget_lock_acquire_recursive>
 800c14e:	89ab      	ldrh	r3, [r5, #12]
 800c150:	071b      	lsls	r3, r3, #28
 800c152:	d501      	bpl.n	800c158 <_vfiprintf_r+0x3c>
 800c154:	692b      	ldr	r3, [r5, #16]
 800c156:	b9eb      	cbnz	r3, 800c194 <_vfiprintf_r+0x78>
 800c158:	4629      	mov	r1, r5
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff fd1a 	bl	800bb94 <__swsetup_r>
 800c160:	b1c0      	cbz	r0, 800c194 <_vfiprintf_r+0x78>
 800c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c164:	07dc      	lsls	r4, r3, #31
 800c166:	d50e      	bpl.n	800c186 <_vfiprintf_r+0x6a>
 800c168:	f04f 30ff 	mov.w	r0, #4294967295
 800c16c:	b01d      	add	sp, #116	; 0x74
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c172:	4b7b      	ldr	r3, [pc, #492]	; (800c360 <_vfiprintf_r+0x244>)
 800c174:	429d      	cmp	r5, r3
 800c176:	d101      	bne.n	800c17c <_vfiprintf_r+0x60>
 800c178:	68b5      	ldr	r5, [r6, #8]
 800c17a:	e7df      	b.n	800c13c <_vfiprintf_r+0x20>
 800c17c:	4b79      	ldr	r3, [pc, #484]	; (800c364 <_vfiprintf_r+0x248>)
 800c17e:	429d      	cmp	r5, r3
 800c180:	bf08      	it	eq
 800c182:	68f5      	ldreq	r5, [r6, #12]
 800c184:	e7da      	b.n	800c13c <_vfiprintf_r+0x20>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	0598      	lsls	r0, r3, #22
 800c18a:	d4ed      	bmi.n	800c168 <_vfiprintf_r+0x4c>
 800c18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c18e:	f7ff ff28 	bl	800bfe2 <__retarget_lock_release_recursive>
 800c192:	e7e9      	b.n	800c168 <_vfiprintf_r+0x4c>
 800c194:	2300      	movs	r3, #0
 800c196:	9309      	str	r3, [sp, #36]	; 0x24
 800c198:	2320      	movs	r3, #32
 800c19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a2:	2330      	movs	r3, #48	; 0x30
 800c1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c368 <_vfiprintf_r+0x24c>
 800c1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ac:	f04f 0901 	mov.w	r9, #1
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	469a      	mov	sl, r3
 800c1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b8:	b10a      	cbz	r2, 800c1be <_vfiprintf_r+0xa2>
 800c1ba:	2a25      	cmp	r2, #37	; 0x25
 800c1bc:	d1f9      	bne.n	800c1b2 <_vfiprintf_r+0x96>
 800c1be:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c2:	d00b      	beq.n	800c1dc <_vfiprintf_r+0xc0>
 800c1c4:	465b      	mov	r3, fp
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f7ff ff93 	bl	800c0f6 <__sfputs_r>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f000 80aa 	beq.w	800c32a <_vfiprintf_r+0x20e>
 800c1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1d8:	445a      	add	r2, fp
 800c1da:	9209      	str	r2, [sp, #36]	; 0x24
 800c1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80a2 	beq.w	800c32a <_vfiprintf_r+0x20e>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f0:	f10a 0a01 	add.w	sl, sl, #1
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	9307      	str	r3, [sp, #28]
 800c1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c1fe:	4654      	mov	r4, sl
 800c200:	2205      	movs	r2, #5
 800c202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c206:	4858      	ldr	r0, [pc, #352]	; (800c368 <_vfiprintf_r+0x24c>)
 800c208:	f7f3 ffea 	bl	80001e0 <memchr>
 800c20c:	9a04      	ldr	r2, [sp, #16]
 800c20e:	b9d8      	cbnz	r0, 800c248 <_vfiprintf_r+0x12c>
 800c210:	06d1      	lsls	r1, r2, #27
 800c212:	bf44      	itt	mi
 800c214:	2320      	movmi	r3, #32
 800c216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c21a:	0713      	lsls	r3, r2, #28
 800c21c:	bf44      	itt	mi
 800c21e:	232b      	movmi	r3, #43	; 0x2b
 800c220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c224:	f89a 3000 	ldrb.w	r3, [sl]
 800c228:	2b2a      	cmp	r3, #42	; 0x2a
 800c22a:	d015      	beq.n	800c258 <_vfiprintf_r+0x13c>
 800c22c:	9a07      	ldr	r2, [sp, #28]
 800c22e:	4654      	mov	r4, sl
 800c230:	2000      	movs	r0, #0
 800c232:	f04f 0c0a 	mov.w	ip, #10
 800c236:	4621      	mov	r1, r4
 800c238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c23c:	3b30      	subs	r3, #48	; 0x30
 800c23e:	2b09      	cmp	r3, #9
 800c240:	d94e      	bls.n	800c2e0 <_vfiprintf_r+0x1c4>
 800c242:	b1b0      	cbz	r0, 800c272 <_vfiprintf_r+0x156>
 800c244:	9207      	str	r2, [sp, #28]
 800c246:	e014      	b.n	800c272 <_vfiprintf_r+0x156>
 800c248:	eba0 0308 	sub.w	r3, r0, r8
 800c24c:	fa09 f303 	lsl.w	r3, r9, r3
 800c250:	4313      	orrs	r3, r2
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	46a2      	mov	sl, r4
 800c256:	e7d2      	b.n	800c1fe <_vfiprintf_r+0xe2>
 800c258:	9b03      	ldr	r3, [sp, #12]
 800c25a:	1d19      	adds	r1, r3, #4
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	9103      	str	r1, [sp, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	bfbb      	ittet	lt
 800c264:	425b      	neglt	r3, r3
 800c266:	f042 0202 	orrlt.w	r2, r2, #2
 800c26a:	9307      	strge	r3, [sp, #28]
 800c26c:	9307      	strlt	r3, [sp, #28]
 800c26e:	bfb8      	it	lt
 800c270:	9204      	strlt	r2, [sp, #16]
 800c272:	7823      	ldrb	r3, [r4, #0]
 800c274:	2b2e      	cmp	r3, #46	; 0x2e
 800c276:	d10c      	bne.n	800c292 <_vfiprintf_r+0x176>
 800c278:	7863      	ldrb	r3, [r4, #1]
 800c27a:	2b2a      	cmp	r3, #42	; 0x2a
 800c27c:	d135      	bne.n	800c2ea <_vfiprintf_r+0x1ce>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	1d1a      	adds	r2, r3, #4
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	9203      	str	r2, [sp, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	bfb8      	it	lt
 800c28a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c28e:	3402      	adds	r4, #2
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c378 <_vfiprintf_r+0x25c>
 800c296:	7821      	ldrb	r1, [r4, #0]
 800c298:	2203      	movs	r2, #3
 800c29a:	4650      	mov	r0, sl
 800c29c:	f7f3 ffa0 	bl	80001e0 <memchr>
 800c2a0:	b140      	cbz	r0, 800c2b4 <_vfiprintf_r+0x198>
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	eba0 000a 	sub.w	r0, r0, sl
 800c2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ac:	9b04      	ldr	r3, [sp, #16]
 800c2ae:	4303      	orrs	r3, r0
 800c2b0:	3401      	adds	r4, #1
 800c2b2:	9304      	str	r3, [sp, #16]
 800c2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b8:	482c      	ldr	r0, [pc, #176]	; (800c36c <_vfiprintf_r+0x250>)
 800c2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2be:	2206      	movs	r2, #6
 800c2c0:	f7f3 ff8e 	bl	80001e0 <memchr>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d03f      	beq.n	800c348 <_vfiprintf_r+0x22c>
 800c2c8:	4b29      	ldr	r3, [pc, #164]	; (800c370 <_vfiprintf_r+0x254>)
 800c2ca:	bb1b      	cbnz	r3, 800c314 <_vfiprintf_r+0x1f8>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2da:	443b      	add	r3, r7
 800c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2de:	e767      	b.n	800c1b0 <_vfiprintf_r+0x94>
 800c2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	2001      	movs	r0, #1
 800c2e8:	e7a5      	b.n	800c236 <_vfiprintf_r+0x11a>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	3401      	adds	r4, #1
 800c2ee:	9305      	str	r3, [sp, #20]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f04f 0c0a 	mov.w	ip, #10
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fc:	3a30      	subs	r2, #48	; 0x30
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d903      	bls.n	800c30a <_vfiprintf_r+0x1ee>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0c5      	beq.n	800c292 <_vfiprintf_r+0x176>
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	e7c3      	b.n	800c292 <_vfiprintf_r+0x176>
 800c30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c30e:	4604      	mov	r4, r0
 800c310:	2301      	movs	r3, #1
 800c312:	e7f0      	b.n	800c2f6 <_vfiprintf_r+0x1da>
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	462a      	mov	r2, r5
 800c31a:	4b16      	ldr	r3, [pc, #88]	; (800c374 <_vfiprintf_r+0x258>)
 800c31c:	a904      	add	r1, sp, #16
 800c31e:	4630      	mov	r0, r6
 800c320:	f3af 8000 	nop.w
 800c324:	4607      	mov	r7, r0
 800c326:	1c78      	adds	r0, r7, #1
 800c328:	d1d6      	bne.n	800c2d8 <_vfiprintf_r+0x1bc>
 800c32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c32c:	07d9      	lsls	r1, r3, #31
 800c32e:	d405      	bmi.n	800c33c <_vfiprintf_r+0x220>
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	059a      	lsls	r2, r3, #22
 800c334:	d402      	bmi.n	800c33c <_vfiprintf_r+0x220>
 800c336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c338:	f7ff fe53 	bl	800bfe2 <__retarget_lock_release_recursive>
 800c33c:	89ab      	ldrh	r3, [r5, #12]
 800c33e:	065b      	lsls	r3, r3, #25
 800c340:	f53f af12 	bmi.w	800c168 <_vfiprintf_r+0x4c>
 800c344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c346:	e711      	b.n	800c16c <_vfiprintf_r+0x50>
 800c348:	ab03      	add	r3, sp, #12
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	462a      	mov	r2, r5
 800c34e:	4b09      	ldr	r3, [pc, #36]	; (800c374 <_vfiprintf_r+0x258>)
 800c350:	a904      	add	r1, sp, #16
 800c352:	4630      	mov	r0, r6
 800c354:	f000 f880 	bl	800c458 <_printf_i>
 800c358:	e7e4      	b.n	800c324 <_vfiprintf_r+0x208>
 800c35a:	bf00      	nop
 800c35c:	0800ce98 	.word	0x0800ce98
 800c360:	0800ceb8 	.word	0x0800ceb8
 800c364:	0800ce78 	.word	0x0800ce78
 800c368:	0800ced8 	.word	0x0800ced8
 800c36c:	0800cee2 	.word	0x0800cee2
 800c370:	00000000 	.word	0x00000000
 800c374:	0800c0f7 	.word	0x0800c0f7
 800c378:	0800cede 	.word	0x0800cede

0800c37c <_printf_common>:
 800c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	4616      	mov	r6, r2
 800c382:	4699      	mov	r9, r3
 800c384:	688a      	ldr	r2, [r1, #8]
 800c386:	690b      	ldr	r3, [r1, #16]
 800c388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	bfb8      	it	lt
 800c390:	4613      	movlt	r3, r2
 800c392:	6033      	str	r3, [r6, #0]
 800c394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c398:	4607      	mov	r7, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	b10a      	cbz	r2, 800c3a2 <_printf_common+0x26>
 800c39e:	3301      	adds	r3, #1
 800c3a0:	6033      	str	r3, [r6, #0]
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	0699      	lsls	r1, r3, #26
 800c3a6:	bf42      	ittt	mi
 800c3a8:	6833      	ldrmi	r3, [r6, #0]
 800c3aa:	3302      	addmi	r3, #2
 800c3ac:	6033      	strmi	r3, [r6, #0]
 800c3ae:	6825      	ldr	r5, [r4, #0]
 800c3b0:	f015 0506 	ands.w	r5, r5, #6
 800c3b4:	d106      	bne.n	800c3c4 <_printf_common+0x48>
 800c3b6:	f104 0a19 	add.w	sl, r4, #25
 800c3ba:	68e3      	ldr	r3, [r4, #12]
 800c3bc:	6832      	ldr	r2, [r6, #0]
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	dc26      	bgt.n	800c412 <_printf_common+0x96>
 800c3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3c8:	1e13      	subs	r3, r2, #0
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	bf18      	it	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	0692      	lsls	r2, r2, #26
 800c3d2:	d42b      	bmi.n	800c42c <_printf_common+0xb0>
 800c3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3d8:	4649      	mov	r1, r9
 800c3da:	4638      	mov	r0, r7
 800c3dc:	47c0      	blx	r8
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d01e      	beq.n	800c420 <_printf_common+0xa4>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	68e5      	ldr	r5, [r4, #12]
 800c3e6:	6832      	ldr	r2, [r6, #0]
 800c3e8:	f003 0306 	and.w	r3, r3, #6
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	bf08      	it	eq
 800c3f0:	1aad      	subeq	r5, r5, r2
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	6922      	ldr	r2, [r4, #16]
 800c3f6:	bf0c      	ite	eq
 800c3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3fc:	2500      	movne	r5, #0
 800c3fe:	4293      	cmp	r3, r2
 800c400:	bfc4      	itt	gt
 800c402:	1a9b      	subgt	r3, r3, r2
 800c404:	18ed      	addgt	r5, r5, r3
 800c406:	2600      	movs	r6, #0
 800c408:	341a      	adds	r4, #26
 800c40a:	42b5      	cmp	r5, r6
 800c40c:	d11a      	bne.n	800c444 <_printf_common+0xc8>
 800c40e:	2000      	movs	r0, #0
 800c410:	e008      	b.n	800c424 <_printf_common+0xa8>
 800c412:	2301      	movs	r3, #1
 800c414:	4652      	mov	r2, sl
 800c416:	4649      	mov	r1, r9
 800c418:	4638      	mov	r0, r7
 800c41a:	47c0      	blx	r8
 800c41c:	3001      	adds	r0, #1
 800c41e:	d103      	bne.n	800c428 <_printf_common+0xac>
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c428:	3501      	adds	r5, #1
 800c42a:	e7c6      	b.n	800c3ba <_printf_common+0x3e>
 800c42c:	18e1      	adds	r1, r4, r3
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	2030      	movs	r0, #48	; 0x30
 800c432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c436:	4422      	add	r2, r4
 800c438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c440:	3302      	adds	r3, #2
 800c442:	e7c7      	b.n	800c3d4 <_printf_common+0x58>
 800c444:	2301      	movs	r3, #1
 800c446:	4622      	mov	r2, r4
 800c448:	4649      	mov	r1, r9
 800c44a:	4638      	mov	r0, r7
 800c44c:	47c0      	blx	r8
 800c44e:	3001      	adds	r0, #1
 800c450:	d0e6      	beq.n	800c420 <_printf_common+0xa4>
 800c452:	3601      	adds	r6, #1
 800c454:	e7d9      	b.n	800c40a <_printf_common+0x8e>
	...

0800c458 <_printf_i>:
 800c458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	7e0f      	ldrb	r7, [r1, #24]
 800c45e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c460:	2f78      	cmp	r7, #120	; 0x78
 800c462:	4691      	mov	r9, r2
 800c464:	4680      	mov	r8, r0
 800c466:	460c      	mov	r4, r1
 800c468:	469a      	mov	sl, r3
 800c46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c46e:	d807      	bhi.n	800c480 <_printf_i+0x28>
 800c470:	2f62      	cmp	r7, #98	; 0x62
 800c472:	d80a      	bhi.n	800c48a <_printf_i+0x32>
 800c474:	2f00      	cmp	r7, #0
 800c476:	f000 80d8 	beq.w	800c62a <_printf_i+0x1d2>
 800c47a:	2f58      	cmp	r7, #88	; 0x58
 800c47c:	f000 80a3 	beq.w	800c5c6 <_printf_i+0x16e>
 800c480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c488:	e03a      	b.n	800c500 <_printf_i+0xa8>
 800c48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c48e:	2b15      	cmp	r3, #21
 800c490:	d8f6      	bhi.n	800c480 <_printf_i+0x28>
 800c492:	a101      	add	r1, pc, #4	; (adr r1, 800c498 <_printf_i+0x40>)
 800c494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c498:	0800c4f1 	.word	0x0800c4f1
 800c49c:	0800c505 	.word	0x0800c505
 800c4a0:	0800c481 	.word	0x0800c481
 800c4a4:	0800c481 	.word	0x0800c481
 800c4a8:	0800c481 	.word	0x0800c481
 800c4ac:	0800c481 	.word	0x0800c481
 800c4b0:	0800c505 	.word	0x0800c505
 800c4b4:	0800c481 	.word	0x0800c481
 800c4b8:	0800c481 	.word	0x0800c481
 800c4bc:	0800c481 	.word	0x0800c481
 800c4c0:	0800c481 	.word	0x0800c481
 800c4c4:	0800c611 	.word	0x0800c611
 800c4c8:	0800c535 	.word	0x0800c535
 800c4cc:	0800c5f3 	.word	0x0800c5f3
 800c4d0:	0800c481 	.word	0x0800c481
 800c4d4:	0800c481 	.word	0x0800c481
 800c4d8:	0800c633 	.word	0x0800c633
 800c4dc:	0800c481 	.word	0x0800c481
 800c4e0:	0800c535 	.word	0x0800c535
 800c4e4:	0800c481 	.word	0x0800c481
 800c4e8:	0800c481 	.word	0x0800c481
 800c4ec:	0800c5fb 	.word	0x0800c5fb
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	1d1a      	adds	r2, r3, #4
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	602a      	str	r2, [r5, #0]
 800c4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c500:	2301      	movs	r3, #1
 800c502:	e0a3      	b.n	800c64c <_printf_i+0x1f4>
 800c504:	6820      	ldr	r0, [r4, #0]
 800c506:	6829      	ldr	r1, [r5, #0]
 800c508:	0606      	lsls	r6, r0, #24
 800c50a:	f101 0304 	add.w	r3, r1, #4
 800c50e:	d50a      	bpl.n	800c526 <_printf_i+0xce>
 800c510:	680e      	ldr	r6, [r1, #0]
 800c512:	602b      	str	r3, [r5, #0]
 800c514:	2e00      	cmp	r6, #0
 800c516:	da03      	bge.n	800c520 <_printf_i+0xc8>
 800c518:	232d      	movs	r3, #45	; 0x2d
 800c51a:	4276      	negs	r6, r6
 800c51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c520:	485e      	ldr	r0, [pc, #376]	; (800c69c <_printf_i+0x244>)
 800c522:	230a      	movs	r3, #10
 800c524:	e019      	b.n	800c55a <_printf_i+0x102>
 800c526:	680e      	ldr	r6, [r1, #0]
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c52e:	bf18      	it	ne
 800c530:	b236      	sxthne	r6, r6
 800c532:	e7ef      	b.n	800c514 <_printf_i+0xbc>
 800c534:	682b      	ldr	r3, [r5, #0]
 800c536:	6820      	ldr	r0, [r4, #0]
 800c538:	1d19      	adds	r1, r3, #4
 800c53a:	6029      	str	r1, [r5, #0]
 800c53c:	0601      	lsls	r1, r0, #24
 800c53e:	d501      	bpl.n	800c544 <_printf_i+0xec>
 800c540:	681e      	ldr	r6, [r3, #0]
 800c542:	e002      	b.n	800c54a <_printf_i+0xf2>
 800c544:	0646      	lsls	r6, r0, #25
 800c546:	d5fb      	bpl.n	800c540 <_printf_i+0xe8>
 800c548:	881e      	ldrh	r6, [r3, #0]
 800c54a:	4854      	ldr	r0, [pc, #336]	; (800c69c <_printf_i+0x244>)
 800c54c:	2f6f      	cmp	r7, #111	; 0x6f
 800c54e:	bf0c      	ite	eq
 800c550:	2308      	moveq	r3, #8
 800c552:	230a      	movne	r3, #10
 800c554:	2100      	movs	r1, #0
 800c556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c55a:	6865      	ldr	r5, [r4, #4]
 800c55c:	60a5      	str	r5, [r4, #8]
 800c55e:	2d00      	cmp	r5, #0
 800c560:	bfa2      	ittt	ge
 800c562:	6821      	ldrge	r1, [r4, #0]
 800c564:	f021 0104 	bicge.w	r1, r1, #4
 800c568:	6021      	strge	r1, [r4, #0]
 800c56a:	b90e      	cbnz	r6, 800c570 <_printf_i+0x118>
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	d04d      	beq.n	800c60c <_printf_i+0x1b4>
 800c570:	4615      	mov	r5, r2
 800c572:	fbb6 f1f3 	udiv	r1, r6, r3
 800c576:	fb03 6711 	mls	r7, r3, r1, r6
 800c57a:	5dc7      	ldrb	r7, [r0, r7]
 800c57c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c580:	4637      	mov	r7, r6
 800c582:	42bb      	cmp	r3, r7
 800c584:	460e      	mov	r6, r1
 800c586:	d9f4      	bls.n	800c572 <_printf_i+0x11a>
 800c588:	2b08      	cmp	r3, #8
 800c58a:	d10b      	bne.n	800c5a4 <_printf_i+0x14c>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	07de      	lsls	r6, r3, #31
 800c590:	d508      	bpl.n	800c5a4 <_printf_i+0x14c>
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	6861      	ldr	r1, [r4, #4]
 800c596:	4299      	cmp	r1, r3
 800c598:	bfde      	ittt	le
 800c59a:	2330      	movle	r3, #48	; 0x30
 800c59c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5a4:	1b52      	subs	r2, r2, r5
 800c5a6:	6122      	str	r2, [r4, #16]
 800c5a8:	f8cd a000 	str.w	sl, [sp]
 800c5ac:	464b      	mov	r3, r9
 800c5ae:	aa03      	add	r2, sp, #12
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	f7ff fee2 	bl	800c37c <_printf_common>
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d14c      	bne.n	800c656 <_printf_i+0x1fe>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	b004      	add	sp, #16
 800c5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c6:	4835      	ldr	r0, [pc, #212]	; (800c69c <_printf_i+0x244>)
 800c5c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5cc:	6829      	ldr	r1, [r5, #0]
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5d4:	6029      	str	r1, [r5, #0]
 800c5d6:	061d      	lsls	r5, r3, #24
 800c5d8:	d514      	bpl.n	800c604 <_printf_i+0x1ac>
 800c5da:	07df      	lsls	r7, r3, #31
 800c5dc:	bf44      	itt	mi
 800c5de:	f043 0320 	orrmi.w	r3, r3, #32
 800c5e2:	6023      	strmi	r3, [r4, #0]
 800c5e4:	b91e      	cbnz	r6, 800c5ee <_printf_i+0x196>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f023 0320 	bic.w	r3, r3, #32
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	2310      	movs	r3, #16
 800c5f0:	e7b0      	b.n	800c554 <_printf_i+0xfc>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	f043 0320 	orr.w	r3, r3, #32
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	2378      	movs	r3, #120	; 0x78
 800c5fc:	4828      	ldr	r0, [pc, #160]	; (800c6a0 <_printf_i+0x248>)
 800c5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c602:	e7e3      	b.n	800c5cc <_printf_i+0x174>
 800c604:	0659      	lsls	r1, r3, #25
 800c606:	bf48      	it	mi
 800c608:	b2b6      	uxthmi	r6, r6
 800c60a:	e7e6      	b.n	800c5da <_printf_i+0x182>
 800c60c:	4615      	mov	r5, r2
 800c60e:	e7bb      	b.n	800c588 <_printf_i+0x130>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	6826      	ldr	r6, [r4, #0]
 800c614:	6961      	ldr	r1, [r4, #20]
 800c616:	1d18      	adds	r0, r3, #4
 800c618:	6028      	str	r0, [r5, #0]
 800c61a:	0635      	lsls	r5, r6, #24
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	d501      	bpl.n	800c624 <_printf_i+0x1cc>
 800c620:	6019      	str	r1, [r3, #0]
 800c622:	e002      	b.n	800c62a <_printf_i+0x1d2>
 800c624:	0670      	lsls	r0, r6, #25
 800c626:	d5fb      	bpl.n	800c620 <_printf_i+0x1c8>
 800c628:	8019      	strh	r1, [r3, #0]
 800c62a:	2300      	movs	r3, #0
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	4615      	mov	r5, r2
 800c630:	e7ba      	b.n	800c5a8 <_printf_i+0x150>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	1d1a      	adds	r2, r3, #4
 800c636:	602a      	str	r2, [r5, #0]
 800c638:	681d      	ldr	r5, [r3, #0]
 800c63a:	6862      	ldr	r2, [r4, #4]
 800c63c:	2100      	movs	r1, #0
 800c63e:	4628      	mov	r0, r5
 800c640:	f7f3 fdce 	bl	80001e0 <memchr>
 800c644:	b108      	cbz	r0, 800c64a <_printf_i+0x1f2>
 800c646:	1b40      	subs	r0, r0, r5
 800c648:	6060      	str	r0, [r4, #4]
 800c64a:	6863      	ldr	r3, [r4, #4]
 800c64c:	6123      	str	r3, [r4, #16]
 800c64e:	2300      	movs	r3, #0
 800c650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c654:	e7a8      	b.n	800c5a8 <_printf_i+0x150>
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	462a      	mov	r2, r5
 800c65a:	4649      	mov	r1, r9
 800c65c:	4640      	mov	r0, r8
 800c65e:	47d0      	blx	sl
 800c660:	3001      	adds	r0, #1
 800c662:	d0ab      	beq.n	800c5bc <_printf_i+0x164>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	079b      	lsls	r3, r3, #30
 800c668:	d413      	bmi.n	800c692 <_printf_i+0x23a>
 800c66a:	68e0      	ldr	r0, [r4, #12]
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	4298      	cmp	r0, r3
 800c670:	bfb8      	it	lt
 800c672:	4618      	movlt	r0, r3
 800c674:	e7a4      	b.n	800c5c0 <_printf_i+0x168>
 800c676:	2301      	movs	r3, #1
 800c678:	4632      	mov	r2, r6
 800c67a:	4649      	mov	r1, r9
 800c67c:	4640      	mov	r0, r8
 800c67e:	47d0      	blx	sl
 800c680:	3001      	adds	r0, #1
 800c682:	d09b      	beq.n	800c5bc <_printf_i+0x164>
 800c684:	3501      	adds	r5, #1
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	9903      	ldr	r1, [sp, #12]
 800c68a:	1a5b      	subs	r3, r3, r1
 800c68c:	42ab      	cmp	r3, r5
 800c68e:	dcf2      	bgt.n	800c676 <_printf_i+0x21e>
 800c690:	e7eb      	b.n	800c66a <_printf_i+0x212>
 800c692:	2500      	movs	r5, #0
 800c694:	f104 0619 	add.w	r6, r4, #25
 800c698:	e7f5      	b.n	800c686 <_printf_i+0x22e>
 800c69a:	bf00      	nop
 800c69c:	0800cee9 	.word	0x0800cee9
 800c6a0:	0800cefa 	.word	0x0800cefa

0800c6a4 <__sread>:
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ac:	f000 f894 	bl	800c7d8 <_read_r>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	bfab      	itete	ge
 800c6b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b8:	181b      	addge	r3, r3, r0
 800c6ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6be:	bfac      	ite	ge
 800c6c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6c2:	81a3      	strhlt	r3, [r4, #12]
 800c6c4:	bd10      	pop	{r4, pc}

0800c6c6 <__swrite>:
 800c6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	898b      	ldrh	r3, [r1, #12]
 800c6ce:	05db      	lsls	r3, r3, #23
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	d505      	bpl.n	800c6e4 <__swrite+0x1e>
 800c6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6dc:	2302      	movs	r3, #2
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f000 f868 	bl	800c7b4 <_lseek_r>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	463b      	mov	r3, r7
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	f000 b817 	b.w	800c72c <_write_r>

0800c6fe <__sseek>:
 800c6fe:	b510      	push	{r4, lr}
 800c700:	460c      	mov	r4, r1
 800c702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c706:	f000 f855 	bl	800c7b4 <_lseek_r>
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	bf15      	itete	ne
 800c710:	6560      	strne	r0, [r4, #84]	; 0x54
 800c712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c71a:	81a3      	strheq	r3, [r4, #12]
 800c71c:	bf18      	it	ne
 800c71e:	81a3      	strhne	r3, [r4, #12]
 800c720:	bd10      	pop	{r4, pc}

0800c722 <__sclose>:
 800c722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c726:	f000 b813 	b.w	800c750 <_close_r>
	...

0800c72c <_write_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4d07      	ldr	r5, [pc, #28]	; (800c74c <_write_r+0x20>)
 800c730:	4604      	mov	r4, r0
 800c732:	4608      	mov	r0, r1
 800c734:	4611      	mov	r1, r2
 800c736:	2200      	movs	r2, #0
 800c738:	602a      	str	r2, [r5, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	f7f4 ff99 	bl	8001672 <_write>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_write_r+0x1e>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_write_r+0x1e>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	20000a98 	.word	0x20000a98

0800c750 <_close_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4d06      	ldr	r5, [pc, #24]	; (800c76c <_close_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f4 ffa5 	bl	80016aa <_close>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_close_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_close_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20000a98 	.word	0x20000a98

0800c770 <_fstat_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d07      	ldr	r5, [pc, #28]	; (800c790 <_fstat_r+0x20>)
 800c774:	2300      	movs	r3, #0
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	f7f4 ffa0 	bl	80016c2 <_fstat>
 800c782:	1c43      	adds	r3, r0, #1
 800c784:	d102      	bne.n	800c78c <_fstat_r+0x1c>
 800c786:	682b      	ldr	r3, [r5, #0]
 800c788:	b103      	cbz	r3, 800c78c <_fstat_r+0x1c>
 800c78a:	6023      	str	r3, [r4, #0]
 800c78c:	bd38      	pop	{r3, r4, r5, pc}
 800c78e:	bf00      	nop
 800c790:	20000a98 	.word	0x20000a98

0800c794 <_isatty_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4d06      	ldr	r5, [pc, #24]	; (800c7b0 <_isatty_r+0x1c>)
 800c798:	2300      	movs	r3, #0
 800c79a:	4604      	mov	r4, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	602b      	str	r3, [r5, #0]
 800c7a0:	f7f4 ff9f 	bl	80016e2 <_isatty>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_isatty_r+0x1a>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_isatty_r+0x1a>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	20000a98 	.word	0x20000a98

0800c7b4 <_lseek_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4d07      	ldr	r5, [pc, #28]	; (800c7d4 <_lseek_r+0x20>)
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	4608      	mov	r0, r1
 800c7bc:	4611      	mov	r1, r2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	602a      	str	r2, [r5, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	f7f4 ff98 	bl	80016f8 <_lseek>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d102      	bne.n	800c7d2 <_lseek_r+0x1e>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	b103      	cbz	r3, 800c7d2 <_lseek_r+0x1e>
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20000a98 	.word	0x20000a98

0800c7d8 <_read_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4d07      	ldr	r5, [pc, #28]	; (800c7f8 <_read_r+0x20>)
 800c7dc:	4604      	mov	r4, r0
 800c7de:	4608      	mov	r0, r1
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	602a      	str	r2, [r5, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	f7f4 ff26 	bl	8001638 <_read>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_read_r+0x1e>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_read_r+0x1e>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	20000a98 	.word	0x20000a98

0800c7fc <_init>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	bf00      	nop
 800c800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c802:	bc08      	pop	{r3}
 800c804:	469e      	mov	lr, r3
 800c806:	4770      	bx	lr

0800c808 <_fini>:
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	bf00      	nop
 800c80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80e:	bc08      	pop	{r3}
 800c810:	469e      	mov	lr, r3
 800c812:	4770      	bx	lr
