                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module i2c
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _write_io_port
                                     12 	.globl _printf
                                     13 	.globl _printf_small
                                     14 	.globl _P5_7
                                     15 	.globl _P5_6
                                     16 	.globl _P5_5
                                     17 	.globl _P5_4
                                     18 	.globl _P5_3
                                     19 	.globl _P5_2
                                     20 	.globl _P5_1
                                     21 	.globl _P5_0
                                     22 	.globl _P4_7
                                     23 	.globl _P4_6
                                     24 	.globl _P4_5
                                     25 	.globl _P4_4
                                     26 	.globl _P4_3
                                     27 	.globl _P4_2
                                     28 	.globl _P4_1
                                     29 	.globl _P4_0
                                     30 	.globl _PX0L
                                     31 	.globl _PT0L
                                     32 	.globl _PX1L
                                     33 	.globl _PT1L
                                     34 	.globl _PSL
                                     35 	.globl _PT2L
                                     36 	.globl _PPCL
                                     37 	.globl _EC
                                     38 	.globl _CCF0
                                     39 	.globl _CCF1
                                     40 	.globl _CCF2
                                     41 	.globl _CCF3
                                     42 	.globl _CCF4
                                     43 	.globl _CR
                                     44 	.globl _CF
                                     45 	.globl _TF2
                                     46 	.globl _EXF2
                                     47 	.globl _RCLK
                                     48 	.globl _TCLK
                                     49 	.globl _EXEN2
                                     50 	.globl _TR2
                                     51 	.globl _C_T2
                                     52 	.globl _CP_RL2
                                     53 	.globl _T2CON_7
                                     54 	.globl _T2CON_6
                                     55 	.globl _T2CON_5
                                     56 	.globl _T2CON_4
                                     57 	.globl _T2CON_3
                                     58 	.globl _T2CON_2
                                     59 	.globl _T2CON_1
                                     60 	.globl _T2CON_0
                                     61 	.globl _PT2
                                     62 	.globl _ET2
                                     63 	.globl _TF1
                                     64 	.globl _TR1
                                     65 	.globl _TF0
                                     66 	.globl _TR0
                                     67 	.globl _IE1
                                     68 	.globl _IT1
                                     69 	.globl _IE0
                                     70 	.globl _IT0
                                     71 	.globl _SM0
                                     72 	.globl _SM1
                                     73 	.globl _SM2
                                     74 	.globl _REN
                                     75 	.globl _TB8
                                     76 	.globl _RB8
                                     77 	.globl _TI
                                     78 	.globl _RI
                                     79 	.globl _CY
                                     80 	.globl _AC
                                     81 	.globl _F0
                                     82 	.globl _RS1
                                     83 	.globl _RS0
                                     84 	.globl _OV
                                     85 	.globl _F1
                                     86 	.globl _P
                                     87 	.globl _RD
                                     88 	.globl _WR
                                     89 	.globl _T1
                                     90 	.globl _T0
                                     91 	.globl _INT1
                                     92 	.globl _INT0
                                     93 	.globl _TXD0
                                     94 	.globl _TXD
                                     95 	.globl _RXD0
                                     96 	.globl _RXD
                                     97 	.globl _P3_7
                                     98 	.globl _P3_6
                                     99 	.globl _P3_5
                                    100 	.globl _P3_4
                                    101 	.globl _P3_3
                                    102 	.globl _P3_2
                                    103 	.globl _P3_1
                                    104 	.globl _P3_0
                                    105 	.globl _P2_7
                                    106 	.globl _P2_6
                                    107 	.globl _P2_5
                                    108 	.globl _P2_4
                                    109 	.globl _P2_3
                                    110 	.globl _P2_2
                                    111 	.globl _P2_1
                                    112 	.globl _P2_0
                                    113 	.globl _P1_7
                                    114 	.globl _P1_6
                                    115 	.globl _P1_5
                                    116 	.globl _P1_4
                                    117 	.globl _P1_3
                                    118 	.globl _P1_2
                                    119 	.globl _P1_1
                                    120 	.globl _P1_0
                                    121 	.globl _P0_7
                                    122 	.globl _P0_6
                                    123 	.globl _P0_5
                                    124 	.globl _P0_4
                                    125 	.globl _P0_3
                                    126 	.globl _P0_2
                                    127 	.globl _P0_1
                                    128 	.globl _P0_0
                                    129 	.globl _PS
                                    130 	.globl _PT1
                                    131 	.globl _PX1
                                    132 	.globl _PT0
                                    133 	.globl _PX0
                                    134 	.globl _EA
                                    135 	.globl _ES
                                    136 	.globl _ET1
                                    137 	.globl _EX1
                                    138 	.globl _ET0
                                    139 	.globl _EX0
                                    140 	.globl _BREG_F7
                                    141 	.globl _BREG_F6
                                    142 	.globl _BREG_F5
                                    143 	.globl _BREG_F4
                                    144 	.globl _BREG_F3
                                    145 	.globl _BREG_F2
                                    146 	.globl _BREG_F1
                                    147 	.globl _BREG_F0
                                    148 	.globl _EECON
                                    149 	.globl _KBF
                                    150 	.globl _KBE
                                    151 	.globl _KBLS
                                    152 	.globl _BRL
                                    153 	.globl _BDRCON
                                    154 	.globl _T2MOD
                                    155 	.globl _SPDAT
                                    156 	.globl _SPSTA
                                    157 	.globl _SPCON
                                    158 	.globl _SADEN
                                    159 	.globl _SADDR
                                    160 	.globl _WDTPRG
                                    161 	.globl _WDTRST
                                    162 	.globl _P5
                                    163 	.globl _P4
                                    164 	.globl _IPH1
                                    165 	.globl _IPL1
                                    166 	.globl _IPH0
                                    167 	.globl _IPL0
                                    168 	.globl _IEN1
                                    169 	.globl _IEN0
                                    170 	.globl _CMOD
                                    171 	.globl _CL
                                    172 	.globl _CH
                                    173 	.globl _CCON
                                    174 	.globl _CCAPM4
                                    175 	.globl _CCAPM3
                                    176 	.globl _CCAPM2
                                    177 	.globl _CCAPM1
                                    178 	.globl _CCAPM0
                                    179 	.globl _CCAP4L
                                    180 	.globl _CCAP3L
                                    181 	.globl _CCAP2L
                                    182 	.globl _CCAP1L
                                    183 	.globl _CCAP0L
                                    184 	.globl _CCAP4H
                                    185 	.globl _CCAP3H
                                    186 	.globl _CCAP2H
                                    187 	.globl _CCAP1H
                                    188 	.globl _CCAP0H
                                    189 	.globl _CKCON1
                                    190 	.globl _CKCON0
                                    191 	.globl _CKRL
                                    192 	.globl _AUXR1
                                    193 	.globl _AUXR
                                    194 	.globl _TH2
                                    195 	.globl _TL2
                                    196 	.globl _RCAP2H
                                    197 	.globl _RCAP2L
                                    198 	.globl _T2CON
                                    199 	.globl _TMOD
                                    200 	.globl _TL1
                                    201 	.globl _TL0
                                    202 	.globl _TH1
                                    203 	.globl _TH0
                                    204 	.globl _TCON
                                    205 	.globl _SP
                                    206 	.globl _SCON
                                    207 	.globl _SBUF0
                                    208 	.globl _SBUF
                                    209 	.globl _PSW
                                    210 	.globl _PCON
                                    211 	.globl _P3
                                    212 	.globl _P2
                                    213 	.globl _P1
                                    214 	.globl _P0
                                    215 	.globl _IP
                                    216 	.globl _IE
                                    217 	.globl _DP0L
                                    218 	.globl _DPL
                                    219 	.globl _DP0H
                                    220 	.globl _DPH
                                    221 	.globl _B
                                    222 	.globl _ACC
                                    223 	.globl _i2c_hex_dump_PARM_2
                                    224 	.globl _i2c_write_byte_PARM_2
                                    225 	.globl _i2c_init
                                    226 	.globl _i2c_start
                                    227 	.globl _send_byte
                                    228 	.globl _read_byte
                                    229 	.globl _i2c_write_byte
                                    230 	.globl _i2c_read_byte
                                    231 	.globl _i2c_stop
                                    232 	.globl _i2c_hex_dump
                                    233 	.globl _reset_eeprom
                                    234 	.globl _delay_us
                                    235 	.globl _i2c_send_nack
                                    236 	.globl _EXT0_IRQHandler
                                    237 ;--------------------------------------------------------
                                    238 ; special function registers
                                    239 ;--------------------------------------------------------
                                    240 	.area RSEG    (ABS,DATA)
      000000                        241 	.org 0x0000
                           0000E0   242 _ACC	=	0x00e0
                           0000F0   243 _B	=	0x00f0
                           000083   244 _DPH	=	0x0083
                           000083   245 _DP0H	=	0x0083
                           000082   246 _DPL	=	0x0082
                           000082   247 _DP0L	=	0x0082
                           0000A8   248 _IE	=	0x00a8
                           0000B8   249 _IP	=	0x00b8
                           000080   250 _P0	=	0x0080
                           000090   251 _P1	=	0x0090
                           0000A0   252 _P2	=	0x00a0
                           0000B0   253 _P3	=	0x00b0
                           000087   254 _PCON	=	0x0087
                           0000D0   255 _PSW	=	0x00d0
                           000099   256 _SBUF	=	0x0099
                           000099   257 _SBUF0	=	0x0099
                           000098   258 _SCON	=	0x0098
                           000081   259 _SP	=	0x0081
                           000088   260 _TCON	=	0x0088
                           00008C   261 _TH0	=	0x008c
                           00008D   262 _TH1	=	0x008d
                           00008A   263 _TL0	=	0x008a
                           00008B   264 _TL1	=	0x008b
                           000089   265 _TMOD	=	0x0089
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           0000F0   322 _BREG_F0	=	0x00f0
                           0000F1   323 _BREG_F1	=	0x00f1
                           0000F2   324 _BREG_F2	=	0x00f2
                           0000F3   325 _BREG_F3	=	0x00f3
                           0000F4   326 _BREG_F4	=	0x00f4
                           0000F5   327 _BREG_F5	=	0x00f5
                           0000F6   328 _BREG_F6	=	0x00f6
                           0000F7   329 _BREG_F7	=	0x00f7
                           0000A8   330 _EX0	=	0x00a8
                           0000A9   331 _ET0	=	0x00a9
                           0000AA   332 _EX1	=	0x00aa
                           0000AB   333 _ET1	=	0x00ab
                           0000AC   334 _ES	=	0x00ac
                           0000AF   335 _EA	=	0x00af
                           0000B8   336 _PX0	=	0x00b8
                           0000B9   337 _PT0	=	0x00b9
                           0000BA   338 _PX1	=	0x00ba
                           0000BB   339 _PT1	=	0x00bb
                           0000BC   340 _PS	=	0x00bc
                           000080   341 _P0_0	=	0x0080
                           000081   342 _P0_1	=	0x0081
                           000082   343 _P0_2	=	0x0082
                           000083   344 _P0_3	=	0x0083
                           000084   345 _P0_4	=	0x0084
                           000085   346 _P0_5	=	0x0085
                           000086   347 _P0_6	=	0x0086
                           000087   348 _P0_7	=	0x0087
                           000090   349 _P1_0	=	0x0090
                           000091   350 _P1_1	=	0x0091
                           000092   351 _P1_2	=	0x0092
                           000093   352 _P1_3	=	0x0093
                           000094   353 _P1_4	=	0x0094
                           000095   354 _P1_5	=	0x0095
                           000096   355 _P1_6	=	0x0096
                           000097   356 _P1_7	=	0x0097
                           0000A0   357 _P2_0	=	0x00a0
                           0000A1   358 _P2_1	=	0x00a1
                           0000A2   359 _P2_2	=	0x00a2
                           0000A3   360 _P2_3	=	0x00a3
                           0000A4   361 _P2_4	=	0x00a4
                           0000A5   362 _P2_5	=	0x00a5
                           0000A6   363 _P2_6	=	0x00a6
                           0000A7   364 _P2_7	=	0x00a7
                           0000B0   365 _P3_0	=	0x00b0
                           0000B1   366 _P3_1	=	0x00b1
                           0000B2   367 _P3_2	=	0x00b2
                           0000B3   368 _P3_3	=	0x00b3
                           0000B4   369 _P3_4	=	0x00b4
                           0000B5   370 _P3_5	=	0x00b5
                           0000B6   371 _P3_6	=	0x00b6
                           0000B7   372 _P3_7	=	0x00b7
                           0000B0   373 _RXD	=	0x00b0
                           0000B0   374 _RXD0	=	0x00b0
                           0000B1   375 _TXD	=	0x00b1
                           0000B1   376 _TXD0	=	0x00b1
                           0000B2   377 _INT0	=	0x00b2
                           0000B3   378 _INT1	=	0x00b3
                           0000B4   379 _T0	=	0x00b4
                           0000B5   380 _T1	=	0x00b5
                           0000B6   381 _WR	=	0x00b6
                           0000B7   382 _RD	=	0x00b7
                           0000D0   383 _P	=	0x00d0
                           0000D1   384 _F1	=	0x00d1
                           0000D2   385 _OV	=	0x00d2
                           0000D3   386 _RS0	=	0x00d3
                           0000D4   387 _RS1	=	0x00d4
                           0000D5   388 _F0	=	0x00d5
                           0000D6   389 _AC	=	0x00d6
                           0000D7   390 _CY	=	0x00d7
                           000098   391 _RI	=	0x0098
                           000099   392 _TI	=	0x0099
                           00009A   393 _RB8	=	0x009a
                           00009B   394 _TB8	=	0x009b
                           00009C   395 _REN	=	0x009c
                           00009D   396 _SM2	=	0x009d
                           00009E   397 _SM1	=	0x009e
                           00009F   398 _SM0	=	0x009f
                           000088   399 _IT0	=	0x0088
                           000089   400 _IE0	=	0x0089
                           00008A   401 _IT1	=	0x008a
                           00008B   402 _IE1	=	0x008b
                           00008C   403 _TR0	=	0x008c
                           00008D   404 _TF0	=	0x008d
                           00008E   405 _TR1	=	0x008e
                           00008F   406 _TF1	=	0x008f
                           0000AD   407 _ET2	=	0x00ad
                           0000BD   408 _PT2	=	0x00bd
                           0000C8   409 _T2CON_0	=	0x00c8
                           0000C9   410 _T2CON_1	=	0x00c9
                           0000CA   411 _T2CON_2	=	0x00ca
                           0000CB   412 _T2CON_3	=	0x00cb
                           0000CC   413 _T2CON_4	=	0x00cc
                           0000CD   414 _T2CON_5	=	0x00cd
                           0000CE   415 _T2CON_6	=	0x00ce
                           0000CF   416 _T2CON_7	=	0x00cf
                           0000C8   417 _CP_RL2	=	0x00c8
                           0000C9   418 _C_T2	=	0x00c9
                           0000CA   419 _TR2	=	0x00ca
                           0000CB   420 _EXEN2	=	0x00cb
                           0000CC   421 _TCLK	=	0x00cc
                           0000CD   422 _RCLK	=	0x00cd
                           0000CE   423 _EXF2	=	0x00ce
                           0000CF   424 _TF2	=	0x00cf
                           0000DF   425 _CF	=	0x00df
                           0000DE   426 _CR	=	0x00de
                           0000DC   427 _CCF4	=	0x00dc
                           0000DB   428 _CCF3	=	0x00db
                           0000DA   429 _CCF2	=	0x00da
                           0000D9   430 _CCF1	=	0x00d9
                           0000D8   431 _CCF0	=	0x00d8
                           0000AE   432 _EC	=	0x00ae
                           0000BE   433 _PPCL	=	0x00be
                           0000BD   434 _PT2L	=	0x00bd
                           0000BC   435 _PSL	=	0x00bc
                           0000BB   436 _PT1L	=	0x00bb
                           0000BA   437 _PX1L	=	0x00ba
                           0000B9   438 _PT0L	=	0x00b9
                           0000B8   439 _PX0L	=	0x00b8
                           0000C0   440 _P4_0	=	0x00c0
                           0000C1   441 _P4_1	=	0x00c1
                           0000C2   442 _P4_2	=	0x00c2
                           0000C3   443 _P4_3	=	0x00c3
                           0000C4   444 _P4_4	=	0x00c4
                           0000C5   445 _P4_5	=	0x00c5
                           0000C6   446 _P4_6	=	0x00c6
                           0000C7   447 _P4_7	=	0x00c7
                           0000E8   448 _P5_0	=	0x00e8
                           0000E9   449 _P5_1	=	0x00e9
                           0000EA   450 _P5_2	=	0x00ea
                           0000EB   451 _P5_3	=	0x00eb
                           0000EC   452 _P5_4	=	0x00ec
                           0000ED   453 _P5_5	=	0x00ed
                           0000EE   454 _P5_6	=	0x00ee
                           0000EF   455 _P5_7	=	0x00ef
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable register banks
                                    458 ;--------------------------------------------------------
                                    459 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        460 	.ds 8
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable bit register bank
                                    463 ;--------------------------------------------------------
                                    464 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        465 bits:
      000000                        466 	.ds 1
                           008000   467 	b0 = bits[0]
                           008100   468 	b1 = bits[1]
                           008200   469 	b2 = bits[2]
                           008300   470 	b3 = bits[3]
                           008400   471 	b4 = bits[4]
                           008500   472 	b5 = bits[5]
                           008600   473 	b6 = bits[6]
                           008700   474 	b7 = bits[7]
                                    475 ;--------------------------------------------------------
                                    476 ; internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area DSEG    (DATA)
      000000                        479 _i2c_hex_dump_start_address_65536_72:
      000000                        480 	.ds 2
      000002                        481 _i2c_hex_dump_sloc0_1_0:
      000002                        482 	.ds 2
                                    483 ;--------------------------------------------------------
                                    484 ; overlayable items in internal ram 
                                    485 ;--------------------------------------------------------
                                    486 	.area	OSEG    (OVR,DATA)
      000000                        487 _delay_us_sloc0_1_0:
      000000                        488 	.ds 4
                                    489 ;--------------------------------------------------------
                                    490 ; indirectly addressable internal ram data
                                    491 ;--------------------------------------------------------
                                    492 	.area ISEG    (DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; absolute internal ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area IABS    (ABS,DATA)
                                    497 	.area IABS    (ABS,DATA)
                                    498 ;--------------------------------------------------------
                                    499 ; bit data
                                    500 ;--------------------------------------------------------
                                    501 	.area BSEG    (BIT)
                                    502 ;--------------------------------------------------------
                                    503 ; paged external ram data
                                    504 ;--------------------------------------------------------
                                    505 	.area PSEG    (PAG,XDATA)
                                    506 ;--------------------------------------------------------
                                    507 ; external ram data
                                    508 ;--------------------------------------------------------
                                    509 	.area XSEG    (XDATA)
      000000                        510 _send_byte_send_byte_65536_57:
      000000                        511 	.ds 1
      000001                        512 _read_byte_rx_data_65536_63:
      000001                        513 	.ds 1
      000002                        514 _i2c_write_byte_PARM_2:
      000002                        515 	.ds 1
      000003                        516 _i2c_write_byte_addr_65536_66:
      000003                        517 	.ds 2
      000005                        518 _i2c_read_byte_addr_65536_68:
      000005                        519 	.ds 2
      000007                        520 _i2c_hex_dump_PARM_2:
      000007                        521 	.ds 2
      000009                        522 _delay_us_delay_65536_88:
      000009                        523 	.ds 4
                                    524 ;--------------------------------------------------------
                                    525 ; absolute external ram data
                                    526 ;--------------------------------------------------------
                                    527 	.area XABS    (ABS,XDATA)
                                    528 ;--------------------------------------------------------
                                    529 ; external initialized ram data
                                    530 ;--------------------------------------------------------
                                    531 	.area XISEG   (XDATA)
                                    532 	.area HOME    (CODE)
                                    533 	.area GSINIT0 (CODE)
                                    534 	.area GSINIT1 (CODE)
                                    535 	.area GSINIT2 (CODE)
                                    536 	.area GSINIT3 (CODE)
                                    537 	.area GSINIT4 (CODE)
                                    538 	.area GSINIT5 (CODE)
                                    539 	.area GSINIT  (CODE)
                                    540 	.area GSFINAL (CODE)
                                    541 	.area CSEG    (CODE)
                                    542 ;--------------------------------------------------------
                                    543 ; global & static initialisations
                                    544 ;--------------------------------------------------------
                                    545 	.area HOME    (CODE)
                                    546 	.area GSINIT  (CODE)
                                    547 	.area GSFINAL (CODE)
                                    548 	.area GSINIT  (CODE)
                                    549 ;--------------------------------------------------------
                                    550 ; Home
                                    551 ;--------------------------------------------------------
                                    552 	.area HOME    (CODE)
                                    553 	.area HOME    (CODE)
                                    554 ;--------------------------------------------------------
                                    555 ; code
                                    556 ;--------------------------------------------------------
                                    557 	.area CSEG    (CODE)
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'i2c_init'
                                    560 ;------------------------------------------------------------
                                    561 ;	i2c.c:19: void i2c_init(void)
                                    562 ;	-----------------------------------------
                                    563 ;	 function i2c_init
                                    564 ;	-----------------------------------------
      000000                        565 _i2c_init:
                           000007   566 	ar7 = 0x07
                           000006   567 	ar6 = 0x06
                           000005   568 	ar5 = 0x05
                           000004   569 	ar4 = 0x04
                           000003   570 	ar3 = 0x03
                           000002   571 	ar2 = 0x02
                           000001   572 	ar1 = 0x01
                           000000   573 	ar0 = 0x00
                                    574 ;	i2c.c:21: SDA_High;
                                    575 ;	assignBit
      000000 D2 96            [12]  576 	setb	_P1_6
                                    577 ;	i2c.c:22: SCL_High;
                                    578 ;	assignBit
      000002 D2 95            [12]  579 	setb	_P1_5
                                    580 ;	i2c.c:23: }
      000004 22               [24]  581 	ret
                                    582 ;------------------------------------------------------------
                                    583 ;Allocation info for local variables in function 'i2c_start'
                                    584 ;------------------------------------------------------------
                                    585 ;	i2c.c:28: void i2c_start(void)
                                    586 ;	-----------------------------------------
                                    587 ;	 function i2c_start
                                    588 ;	-----------------------------------------
      000005                        589 _i2c_start:
                                    590 ;	i2c.c:30: SDA_High;
                                    591 ;	assignBit
      000005 D2 96            [12]  592 	setb	_P1_6
                                    593 ;	i2c.c:31: SCL_High;
                                    594 ;	assignBit
      000007 D2 95            [12]  595 	setb	_P1_5
                                    596 ;	i2c.c:32: delay_us(bitDelay/4);
      000009 90 00 00         [24]  597 	mov	dptr,#(0x00&0x00ff)
      00000C E4               [12]  598 	clr	a
      00000D F5 F0            [12]  599 	mov	b,a
      00000F 12r03rEF         [24]  600 	lcall	_delay_us
                                    601 ;	i2c.c:33: SDA_Low;
                                    602 ;	assignBit
      000012 C2 96            [12]  603 	clr	_P1_6
                                    604 ;	i2c.c:34: delay_us(bitDelay/4);
      000014 90 00 00         [24]  605 	mov	dptr,#(0x00&0x00ff)
      000017 E4               [12]  606 	clr	a
      000018 F5 F0            [12]  607 	mov	b,a
                                    608 ;	i2c.c:35: }
      00001A 02r03rEF         [24]  609 	ljmp	_delay_us
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'send_byte'
                                    612 ;------------------------------------------------------------
                                    613 ;send_byte                 Allocated with name '_send_byte_send_byte_65536_57'
                                    614 ;i                         Allocated with name '_send_byte_i_131072_59'
                                    615 ;------------------------------------------------------------
                                    616 ;	i2c.c:48: __sbit send_byte(uint8_t send_byte)
                                    617 ;	-----------------------------------------
                                    618 ;	 function send_byte
                                    619 ;	-----------------------------------------
      00001D                        620 _send_byte:
      00001D E5 82            [12]  621 	mov	a,dpl
      00001F 90r00r00         [24]  622 	mov	dptr,#_send_byte_send_byte_65536_57
      000022 F0               [24]  623 	movx	@dptr,a
                                    624 ;	i2c.c:50: for(uint8_t i = 0; i < BYTE_SIZE; i++)
      000023 E0               [24]  625 	movx	a,@dptr
      000024 FF               [12]  626 	mov	r7,a
      000025 7E 00            [12]  627 	mov	r6,#0x00
      000027                        628 00109$:
      000027 BE 08 00         [24]  629 	cjne	r6,#0x08,00134$
      00002A                        630 00134$:
      00002A 50 4F            [24]  631 	jnc	00104$
                                    632 ;	i2c.c:52: SCL_Low;
                                    633 ;	assignBit
      00002C C2 95            [12]  634 	clr	_P1_5
                                    635 ;	i2c.c:53: delay_us(bitDelay/4);
      00002E 90 00 00         [24]  636 	mov	dptr,#(0x00&0x00ff)
      000031 E4               [12]  637 	clr	a
      000032 F5 F0            [12]  638 	mov	b,a
      000034 C0 07            [24]  639 	push	ar7
      000036 C0 06            [24]  640 	push	ar6
      000038 12r03rEF         [24]  641 	lcall	_delay_us
      00003B D0 06            [24]  642 	pop	ar6
      00003D D0 07            [24]  643 	pop	ar7
                                    644 ;	i2c.c:55: if((send_byte << i) & MSB)
      00003F 8F 04            [24]  645 	mov	ar4,r7
      000041 7D 00            [12]  646 	mov	r5,#0x00
      000043 8E F0            [24]  647 	mov	b,r6
      000045 05 F0            [12]  648 	inc	b
      000047 80 06            [24]  649 	sjmp	00137$
      000049                        650 00136$:
      000049 EC               [12]  651 	mov	a,r4
      00004A 2C               [12]  652 	add	a,r4
      00004B FC               [12]  653 	mov	r4,a
      00004C ED               [12]  654 	mov	a,r5
      00004D 33               [12]  655 	rlc	a
      00004E FD               [12]  656 	mov	r5,a
      00004F                        657 00137$:
      00004F D5 F0 F7         [24]  658 	djnz	b,00136$
      000052 EC               [12]  659 	mov	a,r4
      000053 30 E7 04         [24]  660 	jnb	acc.7,00102$
                                    661 ;	i2c.c:57: SDA_High;
                                    662 ;	assignBit
      000056 D2 96            [12]  663 	setb	_P1_6
      000058 80 02            [24]  664 	sjmp	00103$
      00005A                        665 00102$:
                                    666 ;	i2c.c:61: SDA_Low;
                                    667 ;	assignBit
      00005A C2 96            [12]  668 	clr	_P1_6
      00005C                        669 00103$:
                                    670 ;	i2c.c:65: delay_us(bitDelay/4);
      00005C 90 00 00         [24]  671 	mov	dptr,#(0x00&0x00ff)
      00005F E4               [12]  672 	clr	a
      000060 F5 F0            [12]  673 	mov	b,a
      000062 C0 07            [24]  674 	push	ar7
      000064 C0 06            [24]  675 	push	ar6
      000066 12r03rEF         [24]  676 	lcall	_delay_us
                                    677 ;	i2c.c:66: SCL_High;
                                    678 ;	assignBit
      000069 D2 95            [12]  679 	setb	_P1_5
                                    680 ;	i2c.c:67: delay_us(bitDelay);
      00006B 90 00 00         [24]  681 	mov	dptr,#(0x00&0x00ff)
      00006E E4               [12]  682 	clr	a
      00006F F5 F0            [12]  683 	mov	b,a
      000071 12r03rEF         [24]  684 	lcall	_delay_us
      000074 D0 06            [24]  685 	pop	ar6
      000076 D0 07            [24]  686 	pop	ar7
                                    687 ;	i2c.c:50: for(uint8_t i = 0; i < BYTE_SIZE; i++)
      000078 0E               [12]  688 	inc	r6
      000079 80 AC            [24]  689 	sjmp	00109$
      00007B                        690 00104$:
                                    691 ;	i2c.c:71: SCL_Low;
                                    692 ;	assignBit
      00007B C2 95            [12]  693 	clr	_P1_5
                                    694 ;	i2c.c:72: SDA_High; /* To accept input */
                                    695 ;	assignBit
      00007D D2 96            [12]  696 	setb	_P1_6
                                    697 ;	i2c.c:73: delay_us(bitDelay);
      00007F 90 00 00         [24]  698 	mov	dptr,#(0x00&0x00ff)
      000082 E4               [12]  699 	clr	a
      000083 F5 F0            [12]  700 	mov	b,a
      000085 12r03rEF         [24]  701 	lcall	_delay_us
                                    702 ;	i2c.c:76: while(SDA);
      000088                        703 00105$:
      000088 20 96 FD         [24]  704 	jb	_P1_6,00105$
                                    705 ;	i2c.c:77: SCL_High;
                                    706 ;	assignBit
      00008B D2 95            [12]  707 	setb	_P1_5
                                    708 ;	i2c.c:80: delay_us(bitDelay/2);
      00008D 90 00 00         [24]  709 	mov	dptr,#(0x00&0x00ff)
      000090 E4               [12]  710 	clr	a
      000091 F5 F0            [12]  711 	mov	b,a
      000093 12r03rEF         [24]  712 	lcall	_delay_us
                                    713 ;	i2c.c:81: SCL_Low;
                                    714 ;	assignBit
      000096 C2 95            [12]  715 	clr	_P1_5
                                    716 ;	i2c.c:82: delay_us(bitDelay/2);
      000098 90 00 00         [24]  717 	mov	dptr,#(0x00&0x00ff)
      00009B E4               [12]  718 	clr	a
      00009C F5 F0            [12]  719 	mov	b,a
      00009E 12r03rEF         [24]  720 	lcall	_delay_us
                                    721 ;	i2c.c:84: return SDA;
      0000A1 A2 96            [12]  722 	mov	c,_P1_6
                                    723 ;	i2c.c:85: }
      0000A3 22               [24]  724 	ret
                                    725 ;------------------------------------------------------------
                                    726 ;Allocation info for local variables in function 'read_byte'
                                    727 ;------------------------------------------------------------
                                    728 ;rx_bit                    Allocated with name '_read_byte_rx_bit_65536_63'
                                    729 ;rx_data                   Allocated with name '_read_byte_rx_data_65536_63'
                                    730 ;i                         Allocated with name '_read_byte_i_131072_64'
                                    731 ;------------------------------------------------------------
                                    732 ;	i2c.c:88: uint8_t read_byte()
                                    733 ;	-----------------------------------------
                                    734 ;	 function read_byte
                                    735 ;	-----------------------------------------
      0000A4                        736 _read_byte:
                                    737 ;	i2c.c:90: uint8_t rx_bit, rx_data = 0;
      0000A4 90r00r01         [24]  738 	mov	dptr,#_read_byte_rx_data_65536_63
      0000A7 E4               [12]  739 	clr	a
      0000A8 F0               [24]  740 	movx	@dptr,a
                                    741 ;	i2c.c:91: for(uint8_t i = 0; i < BYTE_SIZE; i++)
      0000A9 7F 00            [12]  742 	mov	r7,#0x00
      0000AB                        743 00103$:
      0000AB BF 08 00         [24]  744 	cjne	r7,#0x08,00116$
      0000AE                        745 00116$:
      0000AE 50 4D            [24]  746 	jnc	00101$
                                    747 ;	i2c.c:93: SDA_High; /* To accept input */
                                    748 ;	assignBit
      0000B0 D2 96            [12]  749 	setb	_P1_6
                                    750 ;	i2c.c:96: SCL_Low;
                                    751 ;	assignBit
      0000B2 C2 95            [12]  752 	clr	_P1_5
                                    753 ;	i2c.c:97: delay_us(bitDelay/2);
      0000B4 90 00 00         [24]  754 	mov	dptr,#(0x00&0x00ff)
      0000B7 E4               [12]  755 	clr	a
      0000B8 F5 F0            [12]  756 	mov	b,a
      0000BA C0 07            [24]  757 	push	ar7
      0000BC 12r03rEF         [24]  758 	lcall	_delay_us
      0000BF D0 07            [24]  759 	pop	ar7
                                    760 ;	i2c.c:98: SCL_High;
                                    761 ;	assignBit
      0000C1 D2 95            [12]  762 	setb	_P1_5
                                    763 ;	i2c.c:100: rx_bit = SDA;
      0000C3 A2 96            [12]  764 	mov	c,_P1_6
      0000C5 E4               [12]  765 	clr	a
      0000C6 33               [12]  766 	rlc	a
      0000C7 FE               [12]  767 	mov	r6,a
                                    768 ;	i2c.c:101: rx_data |= (rx_bit << (7 - i)); /* MSB is received first */
      0000C8 8F 05            [24]  769 	mov	ar5,r7
      0000CA 74 07            [12]  770 	mov	a,#0x07
      0000CC C3               [12]  771 	clr	c
      0000CD 9D               [12]  772 	subb	a,r5
      0000CE FD               [12]  773 	mov	r5,a
      0000CF 8D F0            [24]  774 	mov	b,r5
      0000D1 05 F0            [12]  775 	inc	b
      0000D3 EE               [12]  776 	mov	a,r6
      0000D4 80 02            [24]  777 	sjmp	00120$
      0000D6                        778 00118$:
      0000D6 25 E0            [12]  779 	add	a,acc
      0000D8                        780 00120$:
      0000D8 D5 F0 FB         [24]  781 	djnz	b,00118$
      0000DB FD               [12]  782 	mov	r5,a
      0000DC 90r00r01         [24]  783 	mov	dptr,#_read_byte_rx_data_65536_63
      0000DF E0               [24]  784 	movx	a,@dptr
      0000E0 4D               [12]  785 	orl	a,r5
      0000E1 F0               [24]  786 	movx	@dptr,a
                                    787 ;	i2c.c:102: delay_us(bitDelay/4);
      0000E2 90 00 00         [24]  788 	mov	dptr,#(0x00&0x00ff)
      0000E5 E4               [12]  789 	clr	a
      0000E6 F5 F0            [12]  790 	mov	b,a
      0000E8 C0 07            [24]  791 	push	ar7
      0000EA 12r03rEF         [24]  792 	lcall	_delay_us
                                    793 ;	i2c.c:103: SCL_Low;
                                    794 ;	assignBit
      0000ED C2 95            [12]  795 	clr	_P1_5
                                    796 ;	i2c.c:104: delay_us(bitDelay/4);
      0000EF 90 00 00         [24]  797 	mov	dptr,#(0x00&0x00ff)
      0000F2 E4               [12]  798 	clr	a
      0000F3 F5 F0            [12]  799 	mov	b,a
      0000F5 12r03rEF         [24]  800 	lcall	_delay_us
      0000F8 D0 07            [24]  801 	pop	ar7
                                    802 ;	i2c.c:91: for(uint8_t i = 0; i < BYTE_SIZE; i++)
      0000FA 0F               [12]  803 	inc	r7
      0000FB 80 AE            [24]  804 	sjmp	00103$
      0000FD                        805 00101$:
                                    806 ;	i2c.c:107: return rx_data;
      0000FD 90r00r01         [24]  807 	mov	dptr,#_read_byte_rx_data_65536_63
      000100 E0               [24]  808 	movx	a,@dptr
                                    809 ;	i2c.c:109: }
      000101 F5 82            [12]  810 	mov	dpl,a
      000103 22               [24]  811 	ret
                                    812 ;------------------------------------------------------------
                                    813 ;Allocation info for local variables in function 'i2c_write_byte'
                                    814 ;------------------------------------------------------------
                                    815 ;data_byte                 Allocated with name '_i2c_write_byte_PARM_2'
                                    816 ;addr                      Allocated with name '_i2c_write_byte_addr_65536_66'
                                    817 ;------------------------------------------------------------
                                    818 ;	i2c.c:113: void i2c_write_byte(uint16_t addr, uint8_t data_byte)
                                    819 ;	-----------------------------------------
                                    820 ;	 function i2c_write_byte
                                    821 ;	-----------------------------------------
      000104                        822 _i2c_write_byte:
      000104 AF 83            [24]  823 	mov	r7,dph
      000106 E5 82            [12]  824 	mov	a,dpl
      000108 90r00r03         [24]  825 	mov	dptr,#_i2c_write_byte_addr_65536_66
      00010B F0               [24]  826 	movx	@dptr,a
      00010C EF               [12]  827 	mov	a,r7
      00010D A3               [24]  828 	inc	dptr
      00010E F0               [24]  829 	movx	@dptr,a
                                    830 ;	i2c.c:115: i2c_start(); /* Sending start bit */
      00010F 12r00r05         [24]  831 	lcall	_i2c_start
                                    832 ;	i2c.c:116: send_byte(WR_CMD | (((addr >> 8) & 0x7) << 1)); /* Sending control byte with page block */
      000112 90r00r03         [24]  833 	mov	dptr,#_i2c_write_byte_addr_65536_66
      000115 E0               [24]  834 	movx	a,@dptr
      000116 FE               [12]  835 	mov	r6,a
      000117 A3               [24]  836 	inc	dptr
      000118 E0               [24]  837 	movx	a,@dptr
      000119 FF               [12]  838 	mov	r7,a
      00011A 54 07            [12]  839 	anl	a,#0x07
      00011C 25 E0            [12]  840 	add	a,acc
      00011E FD               [12]  841 	mov	r5,a
      00011F 43 05 A0         [24]  842 	orl	ar5,#0xa0
      000122 8D 82            [24]  843 	mov	dpl,r5
      000124 C0 07            [24]  844 	push	ar7
      000126 C0 06            [24]  845 	push	ar6
      000128 12r00r1D         [24]  846 	lcall	_send_byte
      00012B D0 06            [24]  847 	pop	ar6
      00012D D0 07            [24]  848 	pop	ar7
                                    849 ;	i2c.c:117: send_byte(addr & 0xFF); /* Sending device address */
      00012F 8E 82            [24]  850 	mov	dpl,r6
      000131 12r00r1D         [24]  851 	lcall	_send_byte
                                    852 ;	i2c.c:118: send_byte(data_byte); /* Sending actual data byte */
      000134 90r00r02         [24]  853 	mov	dptr,#_i2c_write_byte_PARM_2
      000137 E0               [24]  854 	movx	a,@dptr
      000138 F5 82            [12]  855 	mov	dpl,a
      00013A 12r00r1D         [24]  856 	lcall	_send_byte
                                    857 ;	i2c.c:119: i2c_stop(); /* Sending stop bit */
                                    858 ;	i2c.c:120: }
      00013D 02r01r95         [24]  859 	ljmp	_i2c_stop
                                    860 ;------------------------------------------------------------
                                    861 ;Allocation info for local variables in function 'i2c_read_byte'
                                    862 ;------------------------------------------------------------
                                    863 ;addr                      Allocated with name '_i2c_read_byte_addr_65536_68'
                                    864 ;rx_data                   Allocated with name '_i2c_read_byte_rx_data_65536_69'
                                    865 ;------------------------------------------------------------
                                    866 ;	i2c.c:123: unsigned char i2c_read_byte(uint16_t addr)
                                    867 ;	-----------------------------------------
                                    868 ;	 function i2c_read_byte
                                    869 ;	-----------------------------------------
      000140                        870 _i2c_read_byte:
      000140 AF 83            [24]  871 	mov	r7,dph
      000142 E5 82            [12]  872 	mov	a,dpl
      000144 90r00r05         [24]  873 	mov	dptr,#_i2c_read_byte_addr_65536_68
      000147 F0               [24]  874 	movx	@dptr,a
      000148 EF               [12]  875 	mov	a,r7
      000149 A3               [24]  876 	inc	dptr
      00014A F0               [24]  877 	movx	@dptr,a
                                    878 ;	i2c.c:126: i2c_start();
      00014B 12r00r05         [24]  879 	lcall	_i2c_start
                                    880 ;	i2c.c:130: send_byte(WR_CMD | (((addr >> 8) & PAGE_BLOCK)<< 1));
      00014E 90r00r05         [24]  881 	mov	dptr,#_i2c_read_byte_addr_65536_68
      000151 E0               [24]  882 	movx	a,@dptr
      000152 FE               [12]  883 	mov	r6,a
      000153 A3               [24]  884 	inc	dptr
      000154 E0               [24]  885 	movx	a,@dptr
      000155 FF               [12]  886 	mov	r7,a
      000156 54 07            [12]  887 	anl	a,#0x07
      000158 25 E0            [12]  888 	add	a,acc
      00015A FD               [12]  889 	mov	r5,a
      00015B 74 A0            [12]  890 	mov	a,#0xa0
      00015D 4D               [12]  891 	orl	a,r5
      00015E F5 82            [12]  892 	mov	dpl,a
      000160 C0 07            [24]  893 	push	ar7
      000162 C0 06            [24]  894 	push	ar6
      000164 C0 05            [24]  895 	push	ar5
      000166 12r00r1D         [24]  896 	lcall	_send_byte
      000169 D0 05            [24]  897 	pop	ar5
      00016B D0 06            [24]  898 	pop	ar6
      00016D D0 07            [24]  899 	pop	ar7
                                    900 ;	i2c.c:131: send_byte(addr & 0xFF);
      00016F 8E 82            [24]  901 	mov	dpl,r6
      000171 C0 05            [24]  902 	push	ar5
      000173 12r00r1D         [24]  903 	lcall	_send_byte
                                    904 ;	i2c.c:133: i2c_start();
      000176 12r00r05         [24]  905 	lcall	_i2c_start
      000179 D0 05            [24]  906 	pop	ar5
                                    907 ;	i2c.c:136: send_byte(RD_CMD | (((addr >> 8) & PAGE_BLOCK) << 1));
      00017B 43 05 A1         [24]  908 	orl	ar5,#0xa1
      00017E 8D 82            [24]  909 	mov	dpl,r5
      000180 12r00r1D         [24]  910 	lcall	_send_byte
                                    911 ;	i2c.c:138: rx_data = read_byte();
      000183 12r00rA4         [24]  912 	lcall	_read_byte
      000186 AF 82            [24]  913 	mov	r7,dpl
                                    914 ;	i2c.c:140: i2c_send_nack(); /* Sending NACK after read */
      000188 C0 07            [24]  915 	push	ar7
      00018A 12r04r33         [24]  916 	lcall	_i2c_send_nack
                                    917 ;	i2c.c:141: i2c_stop();
      00018D 12r01r95         [24]  918 	lcall	_i2c_stop
      000190 D0 07            [24]  919 	pop	ar7
                                    920 ;	i2c.c:142: return rx_data;
      000192 8F 82            [24]  921 	mov	dpl,r7
                                    922 ;	i2c.c:143: }
      000194 22               [24]  923 	ret
                                    924 ;------------------------------------------------------------
                                    925 ;Allocation info for local variables in function 'i2c_stop'
                                    926 ;------------------------------------------------------------
                                    927 ;	i2c.c:147: void i2c_stop(void)
                                    928 ;	-----------------------------------------
                                    929 ;	 function i2c_stop
                                    930 ;	-----------------------------------------
      000195                        931 _i2c_stop:
                                    932 ;	i2c.c:149: SCL_Low;
                                    933 ;	assignBit
      000195 C2 95            [12]  934 	clr	_P1_5
                                    935 ;	i2c.c:150: delay_us(bitDelay/4);
      000197 90 00 00         [24]  936 	mov	dptr,#(0x00&0x00ff)
      00019A E4               [12]  937 	clr	a
      00019B F5 F0            [12]  938 	mov	b,a
      00019D 12r03rEF         [24]  939 	lcall	_delay_us
                                    940 ;	i2c.c:151: SDA_Low;
                                    941 ;	assignBit
      0001A0 C2 96            [12]  942 	clr	_P1_6
                                    943 ;	i2c.c:152: delay_us(bitDelay/4);
      0001A2 90 00 00         [24]  944 	mov	dptr,#(0x00&0x00ff)
      0001A5 E4               [12]  945 	clr	a
      0001A6 F5 F0            [12]  946 	mov	b,a
      0001A8 12r03rEF         [24]  947 	lcall	_delay_us
                                    948 ;	i2c.c:153: SCL_High;
                                    949 ;	assignBit
      0001AB D2 95            [12]  950 	setb	_P1_5
                                    951 ;	i2c.c:154: delay_us(bitDelay/4);
      0001AD 90 00 00         [24]  952 	mov	dptr,#(0x00&0x00ff)
      0001B0 E4               [12]  953 	clr	a
      0001B1 F5 F0            [12]  954 	mov	b,a
      0001B3 12r03rEF         [24]  955 	lcall	_delay_us
                                    956 ;	i2c.c:155: SDA_High;
                                    957 ;	assignBit
      0001B6 D2 96            [12]  958 	setb	_P1_6
                                    959 ;	i2c.c:156: delay_us(bitDelay/4);
      0001B8 90 00 00         [24]  960 	mov	dptr,#(0x00&0x00ff)
      0001BB E4               [12]  961 	clr	a
      0001BC F5 F0            [12]  962 	mov	b,a
                                    963 ;	i2c.c:157: }
      0001BE 02r03rEF         [24]  964 	ljmp	_delay_us
                                    965 ;------------------------------------------------------------
                                    966 ;Allocation info for local variables in function 'i2c_hex_dump'
                                    967 ;------------------------------------------------------------
                                    968 ;start_address             Allocated with name '_i2c_hex_dump_start_address_65536_72'
                                    969 ;i                         Allocated to registers r5 
                                    970 ;sloc0                     Allocated with name '_i2c_hex_dump_sloc0_1_0'
                                    971 ;end_address               Allocated with name '_i2c_hex_dump_PARM_2'
                                    972 ;num_elements              Allocated with name '_i2c_hex_dump_num_elements_65537_74'
                                    973 ;loop_count                Allocated with name '_i2c_hex_dump_loop_count_65537_74'
                                    974 ;last_line_num             Allocated with name '_i2c_hex_dump_last_line_num_65537_74'
                                    975 ;data_byte                 Allocated with name '_i2c_hex_dump_data_byte_65537_74'
                                    976 ;j                         Allocated with name '_i2c_hex_dump_j_262145_77'
                                    977 ;i                         Allocated with name '_i2c_hex_dump_i_131073_80'
                                    978 ;------------------------------------------------------------
                                    979 ;	i2c.c:161: void i2c_hex_dump(__data uint16_t start_address, uint16_t end_address)
                                    980 ;	-----------------------------------------
                                    981 ;	 function i2c_hex_dump
                                    982 ;	-----------------------------------------
      0001C1                        983 _i2c_hex_dump:
      0001C1 85 82*00         [24]  984 	mov	_i2c_hex_dump_start_address_65536_72,dpl
      0001C4 85 83*01         [24]  985 	mov	(_i2c_hex_dump_start_address_65536_72 + 1),dph
                                    986 ;	i2c.c:163: printf("Printing hexdump from start address [%x] to end address [%x]\r\n", start_address, end_address);
      0001C7 90r00r07         [24]  987 	mov	dptr,#_i2c_hex_dump_PARM_2
      0001CA E0               [24]  988 	movx	a,@dptr
      0001CB FC               [12]  989 	mov	r4,a
      0001CC A3               [24]  990 	inc	dptr
      0001CD E0               [24]  991 	movx	a,@dptr
      0001CE FD               [12]  992 	mov	r5,a
      0001CF C0 05            [24]  993 	push	ar5
      0001D1 C0 04            [24]  994 	push	ar4
      0001D3 C0 04            [24]  995 	push	ar4
      0001D5 C0 05            [24]  996 	push	ar5
      0001D7 C0*00            [24]  997 	push	_i2c_hex_dump_start_address_65536_72
      0001D9 C0*01            [24]  998 	push	(_i2c_hex_dump_start_address_65536_72 + 1)
      0001DB 74r00            [12]  999 	mov	a,#___str_0
      0001DD C0 E0            [24] 1000 	push	acc
      0001DF 74s00            [12] 1001 	mov	a,#(___str_0 >> 8)
      0001E1 C0 E0            [24] 1002 	push	acc
      0001E3 74 80            [12] 1003 	mov	a,#0x80
      0001E5 C0 E0            [24] 1004 	push	acc
      0001E7 12r00r00         [24] 1005 	lcall	_printf
      0001EA E5 81            [12] 1006 	mov	a,sp
      0001EC 24 F9            [12] 1007 	add	a,#0xf9
      0001EE F5 81            [12] 1008 	mov	sp,a
      0001F0 D0 04            [24] 1009 	pop	ar4
      0001F2 D0 05            [24] 1010 	pop	ar5
                                   1011 ;	i2c.c:165: uint16_t num_elements = end_address - start_address + 1; /* Number of elements */
      0001F4 EC               [12] 1012 	mov	a,r4
      0001F5 C3               [12] 1013 	clr	c
      0001F6 95*00            [12] 1014 	subb	a,_i2c_hex_dump_start_address_65536_72
      0001F8 FC               [12] 1015 	mov	r4,a
      0001F9 ED               [12] 1016 	mov	a,r5
      0001FA 95*01            [12] 1017 	subb	a,(_i2c_hex_dump_start_address_65536_72 + 1)
      0001FC FD               [12] 1018 	mov	r5,a
      0001FD 0C               [12] 1019 	inc	r4
      0001FE BC 00 01         [24] 1020 	cjne	r4,#0x00,00148$
      000201 0D               [12] 1021 	inc	r5
      000202                       1022 00148$:
                                   1023 ;	i2c.c:166: uint8_t loop_count = num_elements / 16; /* Number of lines with 16 elements */
      000202 8C 02            [24] 1024 	mov	ar2,r4
      000204 ED               [12] 1025 	mov	a,r5
      000205 C4               [12] 1026 	swap	a
      000206 CA               [12] 1027 	xch	a,r2
      000207 C4               [12] 1028 	swap	a
      000208 54 0F            [12] 1029 	anl	a,#0x0f
      00020A 6A               [12] 1030 	xrl	a,r2
      00020B CA               [12] 1031 	xch	a,r2
      00020C 54 0F            [12] 1032 	anl	a,#0x0f
      00020E CA               [12] 1033 	xch	a,r2
      00020F 6A               [12] 1034 	xrl	a,r2
      000210 CA               [12] 1035 	xch	a,r2
      000211 FB               [12] 1036 	mov	r3,a
                                   1037 ;	i2c.c:167: uint8_t last_line_num = num_elements % 16; /* Number of elements on the last line */
      000212 53 04 0F         [24] 1038 	anl	ar4,#0x0f
                                   1039 ;	i2c.c:171: for(__data uint8_t i = 0; i < loop_count; i++)
      000215 7D 00            [12] 1040 	mov	r5,#0x00
      000217                       1041 00110$:
      000217 C3               [12] 1042 	clr	c
      000218 ED               [12] 1043 	mov	a,r5
      000219 9A               [12] 1044 	subb	a,r2
      00021A 40 03            [24] 1045 	jc	00149$
      00021C 02r02rE1         [24] 1046 	ljmp	00102$
      00021F                       1047 00149$:
                                   1048 ;	i2c.c:173: printf("0x%03X\t", start_address + (i << 4));
      00021F 8D 01            [24] 1049 	mov	ar1,r5
      000221 E4               [12] 1050 	clr	a
      000222 C9               [12] 1051 	xch	a,r1
      000223 C4               [12] 1052 	swap	a
      000224 C9               [12] 1053 	xch	a,r1
      000225 69               [12] 1054 	xrl	a,r1
      000226 C9               [12] 1055 	xch	a,r1
      000227 54 F0            [12] 1056 	anl	a,#0xf0
      000229 C9               [12] 1057 	xch	a,r1
      00022A 69               [12] 1058 	xrl	a,r1
      00022B FB               [12] 1059 	mov	r3,a
      00022C 85*00*02         [24] 1060 	mov	_i2c_hex_dump_sloc0_1_0,_i2c_hex_dump_start_address_65536_72
      00022F 85*01*03         [24] 1061 	mov	(_i2c_hex_dump_sloc0_1_0 + 1),(_i2c_hex_dump_start_address_65536_72 + 1)
      000232 E9               [12] 1062 	mov	a,r1
      000233 25*02            [12] 1063 	add	a,_i2c_hex_dump_sloc0_1_0
      000235 F9               [12] 1064 	mov	r1,a
      000236 EB               [12] 1065 	mov	a,r3
      000237 35*03            [12] 1066 	addc	a,(_i2c_hex_dump_sloc0_1_0 + 1)
      000239 FB               [12] 1067 	mov	r3,a
      00023A C0 05            [24] 1068 	push	ar5
      00023C C0 04            [24] 1069 	push	ar4
      00023E C0 02            [24] 1070 	push	ar2
      000240 C0 01            [24] 1071 	push	ar1
      000242 C0 03            [24] 1072 	push	ar3
      000244 74r3F            [12] 1073 	mov	a,#___str_1
      000246 C0 E0            [24] 1074 	push	acc
      000248 74s00            [12] 1075 	mov	a,#(___str_1 >> 8)
      00024A C0 E0            [24] 1076 	push	acc
      00024C 74 80            [12] 1077 	mov	a,#0x80
      00024E C0 E0            [24] 1078 	push	acc
      000250 12r00r00         [24] 1079 	lcall	_printf
      000253 E5 81            [12] 1080 	mov	a,sp
      000255 24 FB            [12] 1081 	add	a,#0xfb
      000257 F5 81            [12] 1082 	mov	sp,a
      000259 D0 02            [24] 1083 	pop	ar2
      00025B D0 04            [24] 1084 	pop	ar4
      00025D D0 05            [24] 1085 	pop	ar5
                                   1086 ;	i2c.c:174: for(uint8_t j = 0; j < 16; j++)
      00025F 7B 00            [12] 1087 	mov	r3,#0x00
      000261                       1088 00107$:
      000261 BB 10 00         [24] 1089 	cjne	r3,#0x10,00150$
      000264                       1090 00150$:
      000264 50 56            [24] 1091 	jnc	00101$
                                   1092 ;	i2c.c:176: data_byte = i2c_read_byte(start_address + (i << 4) + j); /* Address of data to be read */
      000266 8D 00            [24] 1093 	mov	ar0,r5
      000268 E4               [12] 1094 	clr	a
      000269 C8               [12] 1095 	xch	a,r0
      00026A C4               [12] 1096 	swap	a
      00026B C8               [12] 1097 	xch	a,r0
      00026C 68               [12] 1098 	xrl	a,r0
      00026D C8               [12] 1099 	xch	a,r0
      00026E 54 F0            [12] 1100 	anl	a,#0xf0
      000270 C8               [12] 1101 	xch	a,r0
      000271 68               [12] 1102 	xrl	a,r0
      000272 F9               [12] 1103 	mov	r1,a
      000273 E8               [12] 1104 	mov	a,r0
      000274 25*02            [12] 1105 	add	a,_i2c_hex_dump_sloc0_1_0
      000276 F8               [12] 1106 	mov	r0,a
      000277 E9               [12] 1107 	mov	a,r1
      000278 35*03            [12] 1108 	addc	a,(_i2c_hex_dump_sloc0_1_0 + 1)
      00027A F9               [12] 1109 	mov	r1,a
      00027B 8B 06            [24] 1110 	mov	ar6,r3
      00027D 7F 00            [12] 1111 	mov	r7,#0x00
      00027F EE               [12] 1112 	mov	a,r6
      000280 28               [12] 1113 	add	a,r0
      000281 F8               [12] 1114 	mov	r0,a
      000282 EF               [12] 1115 	mov	a,r7
      000283 39               [12] 1116 	addc	a,r1
      000284 F9               [12] 1117 	mov	r1,a
      000285 88 82            [24] 1118 	mov	dpl,r0
      000287 89 83            [24] 1119 	mov	dph,r1
      000289 C0 05            [24] 1120 	push	ar5
      00028B C0 04            [24] 1121 	push	ar4
      00028D C0 03            [24] 1122 	push	ar3
      00028F C0 02            [24] 1123 	push	ar2
      000291 12r01r40         [24] 1124 	lcall	_i2c_read_byte
      000294 AF 82            [24] 1125 	mov	r7,dpl
                                   1126 ;	i2c.c:177: printf("%02X ", data_byte);
      000296 7E 00            [12] 1127 	mov	r6,#0x00
      000298 C0 07            [24] 1128 	push	ar7
      00029A C0 06            [24] 1129 	push	ar6
      00029C 74r47            [12] 1130 	mov	a,#___str_2
      00029E C0 E0            [24] 1131 	push	acc
      0002A0 74s00            [12] 1132 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1133 	push	acc
      0002A4 74 80            [12] 1134 	mov	a,#0x80
      0002A6 C0 E0            [24] 1135 	push	acc
      0002A8 12r00r00         [24] 1136 	lcall	_printf
      0002AB E5 81            [12] 1137 	mov	a,sp
      0002AD 24 FB            [12] 1138 	add	a,#0xfb
      0002AF F5 81            [12] 1139 	mov	sp,a
      0002B1 D0 02            [24] 1140 	pop	ar2
      0002B3 D0 03            [24] 1141 	pop	ar3
      0002B5 D0 04            [24] 1142 	pop	ar4
      0002B7 D0 05            [24] 1143 	pop	ar5
                                   1144 ;	i2c.c:174: for(uint8_t j = 0; j < 16; j++)
      0002B9 0B               [12] 1145 	inc	r3
      0002BA 80 A5            [24] 1146 	sjmp	00107$
      0002BC                       1147 00101$:
                                   1148 ;	i2c.c:179: printf_small("\r\n");
      0002BC C0 05            [24] 1149 	push	ar5
      0002BE C0 04            [24] 1150 	push	ar4
      0002C0 C0 02            [24] 1151 	push	ar2
      0002C2 74r4D            [12] 1152 	mov	a,#___str_3
      0002C4 C0 E0            [24] 1153 	push	acc
      0002C6 74s00            [12] 1154 	mov	a,#(___str_3 >> 8)
      0002C8 C0 E0            [24] 1155 	push	acc
      0002CA 74 80            [12] 1156 	mov	a,#0x80
      0002CC C0 E0            [24] 1157 	push	acc
      0002CE 12r00r00         [24] 1158 	lcall	_printf_small
      0002D1 15 81            [12] 1159 	dec	sp
      0002D3 15 81            [12] 1160 	dec	sp
      0002D5 15 81            [12] 1161 	dec	sp
      0002D7 D0 02            [24] 1162 	pop	ar2
      0002D9 D0 04            [24] 1163 	pop	ar4
      0002DB D0 05            [24] 1164 	pop	ar5
                                   1165 ;	i2c.c:171: for(__data uint8_t i = 0; i < loop_count; i++)
      0002DD 0D               [12] 1166 	inc	r5
      0002DE 02r02r17         [24] 1167 	ljmp	00110$
      0002E1                       1168 00102$:
                                   1169 ;	i2c.c:181: if(last_line_num)
      0002E1 EC               [12] 1170 	mov	a,r4
      0002E2 60 38            [24] 1171 	jz	00123$
                                   1172 ;	i2c.c:183: printf("0x%03X\t", start_address + (loop_count << 4));
      0002E4 8A 06            [24] 1173 	mov	ar6,r2
      0002E6 E4               [12] 1174 	clr	a
      0002E7 CE               [12] 1175 	xch	a,r6
      0002E8 C4               [12] 1176 	swap	a
      0002E9 CE               [12] 1177 	xch	a,r6
      0002EA 6E               [12] 1178 	xrl	a,r6
      0002EB CE               [12] 1179 	xch	a,r6
      0002EC 54 F0            [12] 1180 	anl	a,#0xf0
      0002EE CE               [12] 1181 	xch	a,r6
      0002EF 6E               [12] 1182 	xrl	a,r6
      0002F0 FF               [12] 1183 	mov	r7,a
      0002F1 AB*00            [24] 1184 	mov	r3,_i2c_hex_dump_start_address_65536_72
      0002F3 AD*01            [24] 1185 	mov	r5,(_i2c_hex_dump_start_address_65536_72 + 1)
      0002F5 EE               [12] 1186 	mov	a,r6
      0002F6 2B               [12] 1187 	add	a,r3
      0002F7 FB               [12] 1188 	mov	r3,a
      0002F8 EF               [12] 1189 	mov	a,r7
      0002F9 3D               [12] 1190 	addc	a,r5
      0002FA FD               [12] 1191 	mov	r5,a
      0002FB C0 04            [24] 1192 	push	ar4
      0002FD C0 02            [24] 1193 	push	ar2
      0002FF C0 03            [24] 1194 	push	ar3
      000301 C0 05            [24] 1195 	push	ar5
      000303 74r3F            [12] 1196 	mov	a,#___str_1
      000305 C0 E0            [24] 1197 	push	acc
      000307 74s00            [12] 1198 	mov	a,#(___str_1 >> 8)
      000309 C0 E0            [24] 1199 	push	acc
      00030B 74 80            [12] 1200 	mov	a,#0x80
      00030D C0 E0            [24] 1201 	push	acc
      00030F 12r00r00         [24] 1202 	lcall	_printf
      000312 E5 81            [12] 1203 	mov	a,sp
      000314 24 FB            [12] 1204 	add	a,#0xfb
      000316 F5 81            [12] 1205 	mov	sp,a
      000318 D0 02            [24] 1206 	pop	ar2
      00031A D0 04            [24] 1207 	pop	ar4
                                   1208 ;	i2c.c:185: for(uint8_t i = 0; i < last_line_num; i++)
      00031C                       1209 00123$:
      00031C 7F 00            [12] 1210 	mov	r7,#0x00
      00031E                       1211 00113$:
      00031E C3               [12] 1212 	clr	c
      00031F EF               [12] 1213 	mov	a,r7
      000320 9C               [12] 1214 	subb	a,r4
      000321 50 54            [24] 1215 	jnc	00105$
                                   1216 ;	i2c.c:187: data_byte = i2c_read_byte(start_address + (loop_count << 4) + i);
      000323 8A 05            [24] 1217 	mov	ar5,r2
      000325 E4               [12] 1218 	clr	a
      000326 CD               [12] 1219 	xch	a,r5
      000327 C4               [12] 1220 	swap	a
      000328 CD               [12] 1221 	xch	a,r5
      000329 6D               [12] 1222 	xrl	a,r5
      00032A CD               [12] 1223 	xch	a,r5
      00032B 54 F0            [12] 1224 	anl	a,#0xf0
      00032D CD               [12] 1225 	xch	a,r5
      00032E 6D               [12] 1226 	xrl	a,r5
      00032F FE               [12] 1227 	mov	r6,a
      000330 A9*00            [24] 1228 	mov	r1,_i2c_hex_dump_start_address_65536_72
      000332 AB*01            [24] 1229 	mov	r3,(_i2c_hex_dump_start_address_65536_72 + 1)
      000334 ED               [12] 1230 	mov	a,r5
      000335 29               [12] 1231 	add	a,r1
      000336 F9               [12] 1232 	mov	r1,a
      000337 EE               [12] 1233 	mov	a,r6
      000338 3B               [12] 1234 	addc	a,r3
      000339 FB               [12] 1235 	mov	r3,a
      00033A 8F 05            [24] 1236 	mov	ar5,r7
      00033C 7E 00            [12] 1237 	mov	r6,#0x00
      00033E ED               [12] 1238 	mov	a,r5
      00033F 29               [12] 1239 	add	a,r1
      000340 F9               [12] 1240 	mov	r1,a
      000341 EE               [12] 1241 	mov	a,r6
      000342 3B               [12] 1242 	addc	a,r3
      000343 FB               [12] 1243 	mov	r3,a
      000344 89 82            [24] 1244 	mov	dpl,r1
      000346 8B 83            [24] 1245 	mov	dph,r3
      000348 C0 07            [24] 1246 	push	ar7
      00034A C0 04            [24] 1247 	push	ar4
      00034C C0 02            [24] 1248 	push	ar2
      00034E 12r01r40         [24] 1249 	lcall	_i2c_read_byte
      000351 AE 82            [24] 1250 	mov	r6,dpl
                                   1251 ;	i2c.c:188: printf("%02X ", data_byte);
      000353 7D 00            [12] 1252 	mov	r5,#0x00
      000355 C0 06            [24] 1253 	push	ar6
      000357 C0 05            [24] 1254 	push	ar5
      000359 74r47            [12] 1255 	mov	a,#___str_2
      00035B C0 E0            [24] 1256 	push	acc
      00035D 74s00            [12] 1257 	mov	a,#(___str_2 >> 8)
      00035F C0 E0            [24] 1258 	push	acc
      000361 74 80            [12] 1259 	mov	a,#0x80
      000363 C0 E0            [24] 1260 	push	acc
      000365 12r00r00         [24] 1261 	lcall	_printf
      000368 E5 81            [12] 1262 	mov	a,sp
      00036A 24 FB            [12] 1263 	add	a,#0xfb
      00036C F5 81            [12] 1264 	mov	sp,a
      00036E D0 02            [24] 1265 	pop	ar2
      000370 D0 04            [24] 1266 	pop	ar4
      000372 D0 07            [24] 1267 	pop	ar7
                                   1268 ;	i2c.c:185: for(uint8_t i = 0; i < last_line_num; i++)
      000374 0F               [12] 1269 	inc	r7
      000375 80 A7            [24] 1270 	sjmp	00113$
      000377                       1271 00105$:
                                   1272 ;	i2c.c:190: printf_small("\r\n");
      000377 74r4D            [12] 1273 	mov	a,#___str_3
      000379 C0 E0            [24] 1274 	push	acc
      00037B 74s00            [12] 1275 	mov	a,#(___str_3 >> 8)
      00037D C0 E0            [24] 1276 	push	acc
      00037F 74 80            [12] 1277 	mov	a,#0x80
      000381 C0 E0            [24] 1278 	push	acc
      000383 12r00r00         [24] 1279 	lcall	_printf_small
      000386 15 81            [12] 1280 	dec	sp
      000388 15 81            [12] 1281 	dec	sp
      00038A 15 81            [12] 1282 	dec	sp
                                   1283 ;	i2c.c:191: }
      00038C 22               [24] 1284 	ret
                                   1285 ;------------------------------------------------------------
                                   1286 ;Allocation info for local variables in function 'reset_eeprom'
                                   1287 ;------------------------------------------------------------
                                   1288 ;send_byte                 Allocated with name '_reset_eeprom_send_byte_65537_83'
                                   1289 ;i                         Allocated with name '_reset_eeprom_i_131073_84'
                                   1290 ;------------------------------------------------------------
                                   1291 ;	i2c.c:194: void reset_eeprom()
                                   1292 ;	-----------------------------------------
                                   1293 ;	 function reset_eeprom
                                   1294 ;	-----------------------------------------
      00038D                       1295 _reset_eeprom:
                                   1296 ;	i2c.c:196: i2c_start();
      00038D 12r00r05         [24] 1297 	lcall	_i2c_start
                                   1298 ;	i2c.c:201: for(uint8_t i = 0; i < BYTE_SIZE + 1; i++)
      000390 7F 00            [12] 1299 	mov	r7,#0x00
      000392                       1300 00106$:
      000392 BF 09 00         [24] 1301 	cjne	r7,#0x09,00123$
      000395                       1302 00123$:
      000395 50 47            [24] 1303 	jnc	00104$
                                   1304 ;	i2c.c:203: SCL_Low;
                                   1305 ;	assignBit
      000397 C2 95            [12] 1306 	clr	_P1_5
                                   1307 ;	i2c.c:204: delay_us(bitDelay/4);
      000399 90 00 00         [24] 1308 	mov	dptr,#(0x00&0x00ff)
      00039C E4               [12] 1309 	clr	a
      00039D F5 F0            [12] 1310 	mov	b,a
      00039F C0 07            [24] 1311 	push	ar7
      0003A1 12r03rEF         [24] 1312 	lcall	_delay_us
      0003A4 D0 07            [24] 1313 	pop	ar7
                                   1314 ;	i2c.c:206: if((send_byte << i) & 0x100)
      0003A6 8F F0            [24] 1315 	mov	b,r7
      0003A8 05 F0            [12] 1316 	inc	b
      0003AA 7D FF            [12] 1317 	mov	r5,#0xff
      0003AC 7E 01            [12] 1318 	mov	r6,#0x01
      0003AE 80 06            [24] 1319 	sjmp	00126$
      0003B0                       1320 00125$:
      0003B0 ED               [12] 1321 	mov	a,r5
      0003B1 2D               [12] 1322 	add	a,r5
      0003B2 FD               [12] 1323 	mov	r5,a
      0003B3 EE               [12] 1324 	mov	a,r6
      0003B4 33               [12] 1325 	rlc	a
      0003B5 FE               [12] 1326 	mov	r6,a
      0003B6                       1327 00126$:
      0003B6 D5 F0 F7         [24] 1328 	djnz	b,00125$
      0003B9 EE               [12] 1329 	mov	a,r6
      0003BA 30 E0 04         [24] 1330 	jnb	acc.0,00102$
                                   1331 ;	i2c.c:208: SDA_High;
                                   1332 ;	assignBit
      0003BD D2 96            [12] 1333 	setb	_P1_6
      0003BF 80 02            [24] 1334 	sjmp	00103$
      0003C1                       1335 00102$:
                                   1336 ;	i2c.c:212: SDA_Low;
                                   1337 ;	assignBit
      0003C1 C2 96            [12] 1338 	clr	_P1_6
      0003C3                       1339 00103$:
                                   1340 ;	i2c.c:216: delay_us(bitDelay/4);
      0003C3 90 00 00         [24] 1341 	mov	dptr,#(0x00&0x00ff)
      0003C6 E4               [12] 1342 	clr	a
      0003C7 F5 F0            [12] 1343 	mov	b,a
      0003C9 C0 07            [24] 1344 	push	ar7
      0003CB 12r03rEF         [24] 1345 	lcall	_delay_us
                                   1346 ;	i2c.c:217: SCL_High;
                                   1347 ;	assignBit
      0003CE D2 95            [12] 1348 	setb	_P1_5
                                   1349 ;	i2c.c:218: delay_us(bitDelay);
      0003D0 90 00 00         [24] 1350 	mov	dptr,#(0x00&0x00ff)
      0003D3 E4               [12] 1351 	clr	a
      0003D4 F5 F0            [12] 1352 	mov	b,a
      0003D6 12r03rEF         [24] 1353 	lcall	_delay_us
      0003D9 D0 07            [24] 1354 	pop	ar7
                                   1355 ;	i2c.c:201: for(uint8_t i = 0; i < BYTE_SIZE + 1; i++)
      0003DB 0F               [12] 1356 	inc	r7
      0003DC 80 B4            [24] 1357 	sjmp	00106$
      0003DE                       1358 00104$:
                                   1359 ;	i2c.c:222: SCL_Low;
                                   1360 ;	assignBit
      0003DE C2 95            [12] 1361 	clr	_P1_5
                                   1362 ;	i2c.c:223: delay_us(bitDelay/4);
      0003E0 90 00 00         [24] 1363 	mov	dptr,#(0x00&0x00ff)
      0003E3 E4               [12] 1364 	clr	a
      0003E4 F5 F0            [12] 1365 	mov	b,a
      0003E6 12r03rEF         [24] 1366 	lcall	_delay_us
                                   1367 ;	i2c.c:225: i2c_start();
      0003E9 12r00r05         [24] 1368 	lcall	_i2c_start
                                   1369 ;	i2c.c:226: i2c_stop();
                                   1370 ;	i2c.c:229: }
      0003EC 02r01r95         [24] 1371 	ljmp	_i2c_stop
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'delay_us'
                                   1374 ;------------------------------------------------------------
                                   1375 ;delay                     Allocated with name '_delay_us_delay_65536_88'
                                   1376 ;i                         Allocated with name '_delay_us_i_131072_90'
                                   1377 ;sloc0                     Allocated with name '_delay_us_sloc0_1_0'
                                   1378 ;------------------------------------------------------------
                                   1379 ;	i2c.c:232: void delay_us(uint32_t delay)
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function delay_us
                                   1382 ;	-----------------------------------------
      0003EF                       1383 _delay_us:
      0003EF AF 82            [24] 1384 	mov	r7,dpl
      0003F1 AE 83            [24] 1385 	mov	r6,dph
      0003F3 AD F0            [24] 1386 	mov	r5,b
      0003F5 FC               [12] 1387 	mov	r4,a
      0003F6 90r00r09         [24] 1388 	mov	dptr,#_delay_us_delay_65536_88
      0003F9 EF               [12] 1389 	mov	a,r7
      0003FA F0               [24] 1390 	movx	@dptr,a
      0003FB EE               [12] 1391 	mov	a,r6
      0003FC A3               [24] 1392 	inc	dptr
      0003FD F0               [24] 1393 	movx	@dptr,a
      0003FE ED               [12] 1394 	mov	a,r5
      0003FF A3               [24] 1395 	inc	dptr
      000400 F0               [24] 1396 	movx	@dptr,a
      000401 EC               [12] 1397 	mov	a,r4
      000402 A3               [24] 1398 	inc	dptr
      000403 F0               [24] 1399 	movx	@dptr,a
                                   1400 ;	i2c.c:235: for(uint8_t i = 0; i< delay; i++);
      000404 90r00r09         [24] 1401 	mov	dptr,#_delay_us_delay_65536_88
      000407 E0               [24] 1402 	movx	a,@dptr
      000408 F5*00            [12] 1403 	mov	_delay_us_sloc0_1_0,a
      00040A A3               [24] 1404 	inc	dptr
      00040B E0               [24] 1405 	movx	a,@dptr
      00040C F5*01            [12] 1406 	mov	(_delay_us_sloc0_1_0 + 1),a
      00040E A3               [24] 1407 	inc	dptr
      00040F E0               [24] 1408 	movx	a,@dptr
      000410 F5*02            [12] 1409 	mov	(_delay_us_sloc0_1_0 + 2),a
      000412 A3               [24] 1410 	inc	dptr
      000413 E0               [24] 1411 	movx	a,@dptr
      000414 F5*03            [12] 1412 	mov	(_delay_us_sloc0_1_0 + 3),a
      000416 7B 00            [12] 1413 	mov	r3,#0x00
      000418                       1414 00103$:
      000418 8B 00            [24] 1415 	mov	ar0,r3
      00041A 79 00            [12] 1416 	mov	r1,#0x00
      00041C 7A 00            [12] 1417 	mov	r2,#0x00
      00041E 7F 00            [12] 1418 	mov	r7,#0x00
      000420 C3               [12] 1419 	clr	c
      000421 E8               [12] 1420 	mov	a,r0
      000422 95*00            [12] 1421 	subb	a,_delay_us_sloc0_1_0
      000424 E9               [12] 1422 	mov	a,r1
      000425 95*01            [12] 1423 	subb	a,(_delay_us_sloc0_1_0 + 1)
      000427 EA               [12] 1424 	mov	a,r2
      000428 95*02            [12] 1425 	subb	a,(_delay_us_sloc0_1_0 + 2)
      00042A EF               [12] 1426 	mov	a,r7
      00042B 95*03            [12] 1427 	subb	a,(_delay_us_sloc0_1_0 + 3)
      00042D 50 03            [24] 1428 	jnc	00105$
      00042F 0B               [12] 1429 	inc	r3
      000430 80 E6            [24] 1430 	sjmp	00103$
      000432                       1431 00105$:
                                   1432 ;	i2c.c:236: }
      000432 22               [24] 1433 	ret
                                   1434 ;------------------------------------------------------------
                                   1435 ;Allocation info for local variables in function 'i2c_send_nack'
                                   1436 ;------------------------------------------------------------
                                   1437 ;	i2c.c:240: void i2c_send_nack(void)
                                   1438 ;	-----------------------------------------
                                   1439 ;	 function i2c_send_nack
                                   1440 ;	-----------------------------------------
      000433                       1441 _i2c_send_nack:
                                   1442 ;	i2c.c:243: SCL_Low;
                                   1443 ;	assignBit
      000433 C2 95            [12] 1444 	clr	_P1_5
                                   1445 ;	i2c.c:244: delay_us(bitDelay/4);
      000435 90 00 00         [24] 1446 	mov	dptr,#(0x00&0x00ff)
      000438 E4               [12] 1447 	clr	a
      000439 F5 F0            [12] 1448 	mov	b,a
      00043B 12r03rEF         [24] 1449 	lcall	_delay_us
                                   1450 ;	i2c.c:247: SDA_High;
                                   1451 ;	assignBit
      00043E D2 96            [12] 1452 	setb	_P1_6
                                   1453 ;	i2c.c:248: delay_us(bitDelay/4);
      000440 90 00 00         [24] 1454 	mov	dptr,#(0x00&0x00ff)
      000443 E4               [12] 1455 	clr	a
      000444 F5 F0            [12] 1456 	mov	b,a
      000446 12r03rEF         [24] 1457 	lcall	_delay_us
                                   1458 ;	i2c.c:250: SCL_High;
                                   1459 ;	assignBit
      000449 D2 95            [12] 1460 	setb	_P1_5
                                   1461 ;	i2c.c:251: delay_us(bitDelay/2);
      00044B 90 00 00         [24] 1462 	mov	dptr,#(0x00&0x00ff)
      00044E E4               [12] 1463 	clr	a
      00044F F5 F0            [12] 1464 	mov	b,a
                                   1465 ;	i2c.c:252: }
      000451 02r03rEF         [24] 1466 	ljmp	_delay_us
                                   1467 ;------------------------------------------------------------
                                   1468 ;Allocation info for local variables in function 'write_io_port'
                                   1469 ;------------------------------------------------------------
                                   1470 ;rx_data                   Allocated with name '_write_io_port_rx_data_65536_93'
                                   1471 ;------------------------------------------------------------
                                   1472 ;	i2c.c:255: void write_io_port()
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function write_io_port
                                   1475 ;	-----------------------------------------
      000454                       1476 _write_io_port:
                                   1477 ;	i2c.c:260: i2c_start();
      000454 12r00r05         [24] 1478 	lcall	_i2c_start
                                   1479 ;	i2c.c:261: send_byte(RD_IO_EXP);
      000457 75 82 71         [24] 1480 	mov	dpl,#0x71
      00045A 12r00r1D         [24] 1481 	lcall	_send_byte
                                   1482 ;	i2c.c:262: rx_data = read_byte();
      00045D 12r00rA4         [24] 1483 	lcall	_read_byte
      000460 AF 82            [24] 1484 	mov	r7,dpl
                                   1485 ;	i2c.c:263: i2c_send_nack();
      000462 C0 07            [24] 1486 	push	ar7
      000464 12r04r33         [24] 1487 	lcall	_i2c_send_nack
                                   1488 ;	i2c.c:264: i2c_stop();
      000467 12r01r95         [24] 1489 	lcall	_i2c_stop
                                   1490 ;	i2c.c:267: i2c_start();
      00046A 12r00r05         [24] 1491 	lcall	_i2c_start
                                   1492 ;	i2c.c:268: send_byte(WR_IO_EXP);
      00046D 75 82 70         [24] 1493 	mov	dpl,#0x70
      000470 12r00r1D         [24] 1494 	lcall	_send_byte
      000473 D0 07            [24] 1495 	pop	ar7
                                   1496 ;	i2c.c:269: send_byte(~rx_data);
      000475 EF               [12] 1497 	mov	a,r7
      000476 F4               [12] 1498 	cpl	a
      000477 F5 82            [12] 1499 	mov	dpl,a
      000479 12r00r1D         [24] 1500 	lcall	_send_byte
                                   1501 ;	i2c.c:270: i2c_stop();
      00047C 12r01r95         [24] 1502 	lcall	_i2c_stop
                                   1503 ;	i2c.c:272: EX0 = 1;
                                   1504 ;	assignBit
      00047F D2 A8            [12] 1505 	setb	_EX0
                                   1506 ;	i2c.c:273: }
      000481 22               [24] 1507 	ret
                                   1508 ;------------------------------------------------------------
                                   1509 ;Allocation info for local variables in function 'EXT0_IRQHandler'
                                   1510 ;------------------------------------------------------------
                                   1511 ;	i2c.c:277: void EXT0_IRQHandler(void) __interrupt(IE0_VECTOR)
                                   1512 ;	-----------------------------------------
                                   1513 ;	 function EXT0_IRQHandler
                                   1514 ;	-----------------------------------------
      000482                       1515 _EXT0_IRQHandler:
      000482 C0*00            [24] 1516 	push	bits
      000484 C0 E0            [24] 1517 	push	acc
      000486 C0 F0            [24] 1518 	push	b
      000488 C0 82            [24] 1519 	push	dpl
      00048A C0 83            [24] 1520 	push	dph
      00048C C0 07            [24] 1521 	push	(0+7)
      00048E C0 06            [24] 1522 	push	(0+6)
      000490 C0 05            [24] 1523 	push	(0+5)
      000492 C0 04            [24] 1524 	push	(0+4)
      000494 C0 03            [24] 1525 	push	(0+3)
      000496 C0 02            [24] 1526 	push	(0+2)
      000498 C0 01            [24] 1527 	push	(0+1)
      00049A C0 00            [24] 1528 	push	(0+0)
      00049C C0 D0            [24] 1529 	push	psw
      00049E 75 D0 00         [24] 1530 	mov	psw,#0x00
                                   1531 ;	i2c.c:281: EX0 = 0;
                                   1532 ;	assignBit
      0004A1 C2 A8            [12] 1533 	clr	_EX0
                                   1534 ;	i2c.c:282: P1_0 = !P1_0;
      0004A3 B2 90            [12] 1535 	cpl	_P1_0
                                   1536 ;	i2c.c:283: write_io_port();
      0004A5 12r04r54         [24] 1537 	lcall	_write_io_port
                                   1538 ;	i2c.c:284: }
      0004A8 D0 D0            [24] 1539 	pop	psw
      0004AA D0 00            [24] 1540 	pop	(0+0)
      0004AC D0 01            [24] 1541 	pop	(0+1)
      0004AE D0 02            [24] 1542 	pop	(0+2)
      0004B0 D0 03            [24] 1543 	pop	(0+3)
      0004B2 D0 04            [24] 1544 	pop	(0+4)
      0004B4 D0 05            [24] 1545 	pop	(0+5)
      0004B6 D0 06            [24] 1546 	pop	(0+6)
      0004B8 D0 07            [24] 1547 	pop	(0+7)
      0004BA D0 83            [24] 1548 	pop	dph
      0004BC D0 82            [24] 1549 	pop	dpl
      0004BE D0 F0            [24] 1550 	pop	b
      0004C0 D0 E0            [24] 1551 	pop	acc
      0004C2 D0*00            [24] 1552 	pop	bits
      0004C4 32               [24] 1553 	reti
                                   1554 	.area CSEG    (CODE)
                                   1555 	.area CONST   (CODE)
                                   1556 	.area CONST   (CODE)
      000000                       1557 ___str_0:
      000000 50 72 69 6E 74 69 6E  1558 	.ascii "Printing hexdump from start address [%x] to end address [%x]"
             67 20 68 65 78 64 75
             6D 70 20 66 72 6F 6D
             20 73 74 61 72 74 20
             61 64 64 72 65 73 73
             20 5B 25 78 5D 20 74
             6F 20 65 6E 64 20 61
             64 64 72 65 73 73 20
             5B 25 78 5D
      00003C 0D                    1559 	.db 0x0d
      00003D 0A                    1560 	.db 0x0a
      00003E 00                    1561 	.db 0x00
                                   1562 	.area CSEG    (CODE)
                                   1563 	.area CONST   (CODE)
      00003F                       1564 ___str_1:
      00003F 30 78 25 30 33 58     1565 	.ascii "0x%03X"
      000045 09                    1566 	.db 0x09
      000046 00                    1567 	.db 0x00
                                   1568 	.area CSEG    (CODE)
                                   1569 	.area CONST   (CODE)
      000047                       1570 ___str_2:
      000047 25 30 32 58 20        1571 	.ascii "%02X "
      00004C 00                    1572 	.db 0x00
                                   1573 	.area CSEG    (CODE)
                                   1574 	.area CONST   (CODE)
      00004D                       1575 ___str_3:
      00004D 0D                    1576 	.db 0x0d
      00004E 0A                    1577 	.db 0x0a
      00004F 00                    1578 	.db 0x00
                                   1579 	.area CSEG    (CODE)
                                   1580 	.area XINIT   (CODE)
                                   1581 	.area CABS    (ABS,CODE)
