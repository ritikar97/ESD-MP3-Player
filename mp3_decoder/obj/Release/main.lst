                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _i2c_loop
                                     13 	.globl __sdcc_external_startup
                                     14 	.globl _print_prompt
                                     15 	.globl _getchar
                                     16 	.globl _putstr
                                     17 	.globl _putchar
                                     18 	.globl _serial_init
                                     19 	.globl _reset_eeprom
                                     20 	.globl _i2c_hex_dump
                                     21 	.globl _i2c_read_byte
                                     22 	.globl _i2c_write_byte
                                     23 	.globl _i2c_init
                                     24 	.globl _printf
                                     25 	.globl _printf_small
                                     26 	.globl _P5_7
                                     27 	.globl _P5_6
                                     28 	.globl _P5_5
                                     29 	.globl _P5_4
                                     30 	.globl _P5_3
                                     31 	.globl _P5_2
                                     32 	.globl _P5_1
                                     33 	.globl _P5_0
                                     34 	.globl _P4_7
                                     35 	.globl _P4_6
                                     36 	.globl _P4_5
                                     37 	.globl _P4_4
                                     38 	.globl _P4_3
                                     39 	.globl _P4_2
                                     40 	.globl _P4_1
                                     41 	.globl _P4_0
                                     42 	.globl _PX0L
                                     43 	.globl _PT0L
                                     44 	.globl _PX1L
                                     45 	.globl _PT1L
                                     46 	.globl _PSL
                                     47 	.globl _PT2L
                                     48 	.globl _PPCL
                                     49 	.globl _EC
                                     50 	.globl _CCF0
                                     51 	.globl _CCF1
                                     52 	.globl _CCF2
                                     53 	.globl _CCF3
                                     54 	.globl _CCF4
                                     55 	.globl _CR
                                     56 	.globl _CF
                                     57 	.globl _TF2
                                     58 	.globl _EXF2
                                     59 	.globl _RCLK
                                     60 	.globl _TCLK
                                     61 	.globl _EXEN2
                                     62 	.globl _TR2
                                     63 	.globl _C_T2
                                     64 	.globl _CP_RL2
                                     65 	.globl _T2CON_7
                                     66 	.globl _T2CON_6
                                     67 	.globl _T2CON_5
                                     68 	.globl _T2CON_4
                                     69 	.globl _T2CON_3
                                     70 	.globl _T2CON_2
                                     71 	.globl _T2CON_1
                                     72 	.globl _T2CON_0
                                     73 	.globl _PT2
                                     74 	.globl _ET2
                                     75 	.globl _TF1
                                     76 	.globl _TR1
                                     77 	.globl _TF0
                                     78 	.globl _TR0
                                     79 	.globl _IE1
                                     80 	.globl _IT1
                                     81 	.globl _IE0
                                     82 	.globl _IT0
                                     83 	.globl _SM0
                                     84 	.globl _SM1
                                     85 	.globl _SM2
                                     86 	.globl _REN
                                     87 	.globl _TB8
                                     88 	.globl _RB8
                                     89 	.globl _TI
                                     90 	.globl _RI
                                     91 	.globl _CY
                                     92 	.globl _AC
                                     93 	.globl _F0
                                     94 	.globl _RS1
                                     95 	.globl _RS0
                                     96 	.globl _OV
                                     97 	.globl _F1
                                     98 	.globl _P
                                     99 	.globl _RD
                                    100 	.globl _WR
                                    101 	.globl _T1
                                    102 	.globl _T0
                                    103 	.globl _INT1
                                    104 	.globl _INT0
                                    105 	.globl _TXD0
                                    106 	.globl _TXD
                                    107 	.globl _RXD0
                                    108 	.globl _RXD
                                    109 	.globl _P3_7
                                    110 	.globl _P3_6
                                    111 	.globl _P3_5
                                    112 	.globl _P3_4
                                    113 	.globl _P3_3
                                    114 	.globl _P3_2
                                    115 	.globl _P3_1
                                    116 	.globl _P3_0
                                    117 	.globl _P2_7
                                    118 	.globl _P2_6
                                    119 	.globl _P2_5
                                    120 	.globl _P2_4
                                    121 	.globl _P2_3
                                    122 	.globl _P2_2
                                    123 	.globl _P2_1
                                    124 	.globl _P2_0
                                    125 	.globl _P1_7
                                    126 	.globl _P1_6
                                    127 	.globl _P1_5
                                    128 	.globl _P1_4
                                    129 	.globl _P1_3
                                    130 	.globl _P1_2
                                    131 	.globl _P1_1
                                    132 	.globl _P1_0
                                    133 	.globl _P0_7
                                    134 	.globl _P0_6
                                    135 	.globl _P0_5
                                    136 	.globl _P0_4
                                    137 	.globl _P0_3
                                    138 	.globl _P0_2
                                    139 	.globl _P0_1
                                    140 	.globl _P0_0
                                    141 	.globl _PS
                                    142 	.globl _PT1
                                    143 	.globl _PX1
                                    144 	.globl _PT0
                                    145 	.globl _PX0
                                    146 	.globl _EA
                                    147 	.globl _ES
                                    148 	.globl _ET1
                                    149 	.globl _EX1
                                    150 	.globl _ET0
                                    151 	.globl _EX0
                                    152 	.globl _BREG_F7
                                    153 	.globl _BREG_F6
                                    154 	.globl _BREG_F5
                                    155 	.globl _BREG_F4
                                    156 	.globl _BREG_F3
                                    157 	.globl _BREG_F2
                                    158 	.globl _BREG_F1
                                    159 	.globl _BREG_F0
                                    160 	.globl _EECON
                                    161 	.globl _KBF
                                    162 	.globl _KBE
                                    163 	.globl _KBLS
                                    164 	.globl _BRL
                                    165 	.globl _BDRCON
                                    166 	.globl _T2MOD
                                    167 	.globl _SPDAT
                                    168 	.globl _SPSTA
                                    169 	.globl _SPCON
                                    170 	.globl _SADEN
                                    171 	.globl _SADDR
                                    172 	.globl _WDTPRG
                                    173 	.globl _WDTRST
                                    174 	.globl _P5
                                    175 	.globl _P4
                                    176 	.globl _IPH1
                                    177 	.globl _IPL1
                                    178 	.globl _IPH0
                                    179 	.globl _IPL0
                                    180 	.globl _IEN1
                                    181 	.globl _IEN0
                                    182 	.globl _CMOD
                                    183 	.globl _CL
                                    184 	.globl _CH
                                    185 	.globl _CCON
                                    186 	.globl _CCAPM4
                                    187 	.globl _CCAPM3
                                    188 	.globl _CCAPM2
                                    189 	.globl _CCAPM1
                                    190 	.globl _CCAPM0
                                    191 	.globl _CCAP4L
                                    192 	.globl _CCAP3L
                                    193 	.globl _CCAP2L
                                    194 	.globl _CCAP1L
                                    195 	.globl _CCAP0L
                                    196 	.globl _CCAP4H
                                    197 	.globl _CCAP3H
                                    198 	.globl _CCAP2H
                                    199 	.globl _CCAP1H
                                    200 	.globl _CCAP0H
                                    201 	.globl _CKCON1
                                    202 	.globl _CKCON0
                                    203 	.globl _CKRL
                                    204 	.globl _AUXR1
                                    205 	.globl _AUXR
                                    206 	.globl _TH2
                                    207 	.globl _TL2
                                    208 	.globl _RCAP2H
                                    209 	.globl _RCAP2L
                                    210 	.globl _T2CON
                                    211 	.globl _TMOD
                                    212 	.globl _TL1
                                    213 	.globl _TL0
                                    214 	.globl _TH1
                                    215 	.globl _TH0
                                    216 	.globl _TCON
                                    217 	.globl _SP
                                    218 	.globl _SCON
                                    219 	.globl _SBUF0
                                    220 	.globl _SBUF
                                    221 	.globl _PSW
                                    222 	.globl _PCON
                                    223 	.globl _P3
                                    224 	.globl _P2
                                    225 	.globl _P1
                                    226 	.globl _P0
                                    227 	.globl _IP
                                    228 	.globl _IE
                                    229 	.globl _DP0L
                                    230 	.globl _DPL
                                    231 	.globl _DP0H
                                    232 	.globl _DPH
                                    233 	.globl _B
                                    234 	.globl _ACC
                                    235 	.globl _err
                                    236 	.globl _input_char
                                    237 ;--------------------------------------------------------
                                    238 ; special function registers
                                    239 ;--------------------------------------------------------
                                    240 	.area RSEG    (ABS,DATA)
      000000                        241 	.org 0x0000
                           0000E0   242 _ACC	=	0x00e0
                           0000F0   243 _B	=	0x00f0
                           000083   244 _DPH	=	0x0083
                           000083   245 _DP0H	=	0x0083
                           000082   246 _DPL	=	0x0082
                           000082   247 _DP0L	=	0x0082
                           0000A8   248 _IE	=	0x00a8
                           0000B8   249 _IP	=	0x00b8
                           000080   250 _P0	=	0x0080
                           000090   251 _P1	=	0x0090
                           0000A0   252 _P2	=	0x00a0
                           0000B0   253 _P3	=	0x00b0
                           000087   254 _PCON	=	0x0087
                           0000D0   255 _PSW	=	0x00d0
                           000099   256 _SBUF	=	0x0099
                           000099   257 _SBUF0	=	0x0099
                           000098   258 _SCON	=	0x0098
                           000081   259 _SP	=	0x0081
                           000088   260 _TCON	=	0x0088
                           00008C   261 _TH0	=	0x008c
                           00008D   262 _TH1	=	0x008d
                           00008A   263 _TL0	=	0x008a
                           00008B   264 _TL1	=	0x008b
                           000089   265 _TMOD	=	0x0089
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                                    317 ;--------------------------------------------------------
                                    318 ; special function bits
                                    319 ;--------------------------------------------------------
                                    320 	.area RSEG    (ABS,DATA)
      000000                        321 	.org 0x0000
                           0000F0   322 _BREG_F0	=	0x00f0
                           0000F1   323 _BREG_F1	=	0x00f1
                           0000F2   324 _BREG_F2	=	0x00f2
                           0000F3   325 _BREG_F3	=	0x00f3
                           0000F4   326 _BREG_F4	=	0x00f4
                           0000F5   327 _BREG_F5	=	0x00f5
                           0000F6   328 _BREG_F6	=	0x00f6
                           0000F7   329 _BREG_F7	=	0x00f7
                           0000A8   330 _EX0	=	0x00a8
                           0000A9   331 _ET0	=	0x00a9
                           0000AA   332 _EX1	=	0x00aa
                           0000AB   333 _ET1	=	0x00ab
                           0000AC   334 _ES	=	0x00ac
                           0000AF   335 _EA	=	0x00af
                           0000B8   336 _PX0	=	0x00b8
                           0000B9   337 _PT0	=	0x00b9
                           0000BA   338 _PX1	=	0x00ba
                           0000BB   339 _PT1	=	0x00bb
                           0000BC   340 _PS	=	0x00bc
                           000080   341 _P0_0	=	0x0080
                           000081   342 _P0_1	=	0x0081
                           000082   343 _P0_2	=	0x0082
                           000083   344 _P0_3	=	0x0083
                           000084   345 _P0_4	=	0x0084
                           000085   346 _P0_5	=	0x0085
                           000086   347 _P0_6	=	0x0086
                           000087   348 _P0_7	=	0x0087
                           000090   349 _P1_0	=	0x0090
                           000091   350 _P1_1	=	0x0091
                           000092   351 _P1_2	=	0x0092
                           000093   352 _P1_3	=	0x0093
                           000094   353 _P1_4	=	0x0094
                           000095   354 _P1_5	=	0x0095
                           000096   355 _P1_6	=	0x0096
                           000097   356 _P1_7	=	0x0097
                           0000A0   357 _P2_0	=	0x00a0
                           0000A1   358 _P2_1	=	0x00a1
                           0000A2   359 _P2_2	=	0x00a2
                           0000A3   360 _P2_3	=	0x00a3
                           0000A4   361 _P2_4	=	0x00a4
                           0000A5   362 _P2_5	=	0x00a5
                           0000A6   363 _P2_6	=	0x00a6
                           0000A7   364 _P2_7	=	0x00a7
                           0000B0   365 _P3_0	=	0x00b0
                           0000B1   366 _P3_1	=	0x00b1
                           0000B2   367 _P3_2	=	0x00b2
                           0000B3   368 _P3_3	=	0x00b3
                           0000B4   369 _P3_4	=	0x00b4
                           0000B5   370 _P3_5	=	0x00b5
                           0000B6   371 _P3_6	=	0x00b6
                           0000B7   372 _P3_7	=	0x00b7
                           0000B0   373 _RXD	=	0x00b0
                           0000B0   374 _RXD0	=	0x00b0
                           0000B1   375 _TXD	=	0x00b1
                           0000B1   376 _TXD0	=	0x00b1
                           0000B2   377 _INT0	=	0x00b2
                           0000B3   378 _INT1	=	0x00b3
                           0000B4   379 _T0	=	0x00b4
                           0000B5   380 _T1	=	0x00b5
                           0000B6   381 _WR	=	0x00b6
                           0000B7   382 _RD	=	0x00b7
                           0000D0   383 _P	=	0x00d0
                           0000D1   384 _F1	=	0x00d1
                           0000D2   385 _OV	=	0x00d2
                           0000D3   386 _RS0	=	0x00d3
                           0000D4   387 _RS1	=	0x00d4
                           0000D5   388 _F0	=	0x00d5
                           0000D6   389 _AC	=	0x00d6
                           0000D7   390 _CY	=	0x00d7
                           000098   391 _RI	=	0x0098
                           000099   392 _TI	=	0x0099
                           00009A   393 _RB8	=	0x009a
                           00009B   394 _TB8	=	0x009b
                           00009C   395 _REN	=	0x009c
                           00009D   396 _SM2	=	0x009d
                           00009E   397 _SM1	=	0x009e
                           00009F   398 _SM0	=	0x009f
                           000088   399 _IT0	=	0x0088
                           000089   400 _IE0	=	0x0089
                           00008A   401 _IT1	=	0x008a
                           00008B   402 _IE1	=	0x008b
                           00008C   403 _TR0	=	0x008c
                           00008D   404 _TF0	=	0x008d
                           00008E   405 _TR1	=	0x008e
                           00008F   406 _TF1	=	0x008f
                           0000AD   407 _ET2	=	0x00ad
                           0000BD   408 _PT2	=	0x00bd
                           0000C8   409 _T2CON_0	=	0x00c8
                           0000C9   410 _T2CON_1	=	0x00c9
                           0000CA   411 _T2CON_2	=	0x00ca
                           0000CB   412 _T2CON_3	=	0x00cb
                           0000CC   413 _T2CON_4	=	0x00cc
                           0000CD   414 _T2CON_5	=	0x00cd
                           0000CE   415 _T2CON_6	=	0x00ce
                           0000CF   416 _T2CON_7	=	0x00cf
                           0000C8   417 _CP_RL2	=	0x00c8
                           0000C9   418 _C_T2	=	0x00c9
                           0000CA   419 _TR2	=	0x00ca
                           0000CB   420 _EXEN2	=	0x00cb
                           0000CC   421 _TCLK	=	0x00cc
                           0000CD   422 _RCLK	=	0x00cd
                           0000CE   423 _EXF2	=	0x00ce
                           0000CF   424 _TF2	=	0x00cf
                           0000DF   425 _CF	=	0x00df
                           0000DE   426 _CR	=	0x00de
                           0000DC   427 _CCF4	=	0x00dc
                           0000DB   428 _CCF3	=	0x00db
                           0000DA   429 _CCF2	=	0x00da
                           0000D9   430 _CCF1	=	0x00d9
                           0000D8   431 _CCF0	=	0x00d8
                           0000AE   432 _EC	=	0x00ae
                           0000BE   433 _PPCL	=	0x00be
                           0000BD   434 _PT2L	=	0x00bd
                           0000BC   435 _PSL	=	0x00bc
                           0000BB   436 _PT1L	=	0x00bb
                           0000BA   437 _PX1L	=	0x00ba
                           0000B9   438 _PT0L	=	0x00b9
                           0000B8   439 _PX0L	=	0x00b8
                           0000C0   440 _P4_0	=	0x00c0
                           0000C1   441 _P4_1	=	0x00c1
                           0000C2   442 _P4_2	=	0x00c2
                           0000C3   443 _P4_3	=	0x00c3
                           0000C4   444 _P4_4	=	0x00c4
                           0000C5   445 _P4_5	=	0x00c5
                           0000C6   446 _P4_6	=	0x00c6
                           0000C7   447 _P4_7	=	0x00c7
                           0000E8   448 _P5_0	=	0x00e8
                           0000E9   449 _P5_1	=	0x00e9
                           0000EA   450 _P5_2	=	0x00ea
                           0000EB   451 _P5_3	=	0x00eb
                           0000EC   452 _P5_4	=	0x00ec
                           0000ED   453 _P5_5	=	0x00ed
                           0000EE   454 _P5_6	=	0x00ee
                           0000EF   455 _P5_7	=	0x00ef
                                    456 ;--------------------------------------------------------
                                    457 ; overlayable register banks
                                    458 ;--------------------------------------------------------
                                    459 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        460 	.ds 8
                                    461 ;--------------------------------------------------------
                                    462 ; internal ram data
                                    463 ;--------------------------------------------------------
                                    464 	.area DSEG    (DATA)
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable items in internal ram 
                                    467 ;--------------------------------------------------------
                                    468 ;--------------------------------------------------------
                                    469 ; Stack segment in internal ram 
                                    470 ;--------------------------------------------------------
                                    471 	.area	SSEG
      000000                        472 __start__stack:
      000000                        473 	.ds	1
                                    474 
                                    475 ;--------------------------------------------------------
                                    476 ; indirectly addressable internal ram data
                                    477 ;--------------------------------------------------------
                                    478 	.area ISEG    (DATA)
                                    479 ;--------------------------------------------------------
                                    480 ; absolute internal ram data
                                    481 ;--------------------------------------------------------
                                    482 	.area IABS    (ABS,DATA)
                                    483 	.area IABS    (ABS,DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; bit data
                                    486 ;--------------------------------------------------------
                                    487 	.area BSEG    (BIT)
                                    488 ;--------------------------------------------------------
                                    489 ; paged external ram data
                                    490 ;--------------------------------------------------------
                                    491 	.area PSEG    (PAG,XDATA)
                                    492 ;--------------------------------------------------------
                                    493 ; external ram data
                                    494 ;--------------------------------------------------------
                                    495 	.area XSEG    (XDATA)
      000000                        496 _input_char::
      000000                        497 	.ds 1
      000001                        498 _err::
      000001                        499 	.ds 1
      000002                        500 _get_data_byte_data_byte_65536_59:
      000002                        501 	.ds 1
      000003                        502 _get_addr_address_65536_66:
      000003                        503 	.ds 2
                                    504 ;--------------------------------------------------------
                                    505 ; absolute external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area XABS    (ABS,XDATA)
                                    508 ;--------------------------------------------------------
                                    509 ; external initialized ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area XISEG   (XDATA)
                                    512 	.area HOME    (CODE)
                                    513 	.area GSINIT0 (CODE)
                                    514 	.area GSINIT1 (CODE)
                                    515 	.area GSINIT2 (CODE)
                                    516 	.area GSINIT3 (CODE)
                                    517 	.area GSINIT4 (CODE)
                                    518 	.area GSINIT5 (CODE)
                                    519 	.area GSINIT  (CODE)
                                    520 	.area GSFINAL (CODE)
                                    521 	.area CSEG    (CODE)
                                    522 ;--------------------------------------------------------
                                    523 ; interrupt vector 
                                    524 ;--------------------------------------------------------
                                    525 	.area HOME    (CODE)
      000000                        526 __interrupt_vect:
      000000 02r00r00         [24]  527 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24]  528 	ljmp	_EXT0_IRQHandler
                                    529 ;--------------------------------------------------------
                                    530 ; global & static initialisations
                                    531 ;--------------------------------------------------------
                                    532 	.area HOME    (CODE)
                                    533 	.area GSINIT  (CODE)
                                    534 	.area GSFINAL (CODE)
                                    535 	.area GSINIT  (CODE)
                                    536 	.globl __sdcc_gsinit_startup
                                    537 	.globl __sdcc_program_startup
                                    538 	.globl __start__stack
                                    539 	.globl __mcs51_genXINIT
                                    540 	.globl __mcs51_genXRAMCLEAR
                                    541 	.globl __mcs51_genRAMCLEAR
                                    542 	.area GSFINAL (CODE)
      000000 02r00r06         [24]  543 	ljmp	__sdcc_program_startup
                                    544 ;--------------------------------------------------------
                                    545 ; Home
                                    546 ;--------------------------------------------------------
                                    547 	.area HOME    (CODE)
                                    548 	.area HOME    (CODE)
      000006                        549 __sdcc_program_startup:
      000006 02r03r6F         [24]  550 	ljmp	_main
                                    551 ;	return from main will return to caller
                                    552 ;--------------------------------------------------------
                                    553 ; code
                                    554 ;--------------------------------------------------------
                                    555 	.area CSEG    (CODE)
                                    556 ;------------------------------------------------------------
                                    557 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    558 ;------------------------------------------------------------
                                    559 ;	main.c:21: _sdcc_external_startup()
                                    560 ;	-----------------------------------------
                                    561 ;	 function _sdcc_external_startup
                                    562 ;	-----------------------------------------
      000000                        563 __sdcc_external_startup:
                           000007   564 	ar7 = 0x07
                           000006   565 	ar6 = 0x06
                           000005   566 	ar5 = 0x05
                           000004   567 	ar4 = 0x04
                           000003   568 	ar3 = 0x03
                           000002   569 	ar2 = 0x02
                           000001   570 	ar1 = 0x01
                           000000   571 	ar0 = 0x00
                                    572 ;	main.c:24: AUXR |= XRAM_EN;
      000000 43 8E 0C         [24]  573 	orl	_AUXR,#0x0c
                                    574 ;	main.c:25: return 0;
      000003 90 00 00         [24]  575 	mov	dptr,#0x0000
                                    576 ;	main.c:26: }
      000006 22               [24]  577 	ret
                                    578 ;------------------------------------------------------------
                                    579 ;Allocation info for local variables in function 'enable_8051_irq'
                                    580 ;------------------------------------------------------------
                                    581 ;	main.c:28: static void enable_8051_irq()
                                    582 ;	-----------------------------------------
                                    583 ;	 function enable_8051_irq
                                    584 ;	-----------------------------------------
      000007                        585 _enable_8051_irq:
                                    586 ;	main.c:30: EA = 1;
                                    587 ;	assignBit
      000007 D2 AF            [12]  588 	setb	_EA
                                    589 ;	main.c:32: EX0 = 1;
                                    590 ;	assignBit
      000009 D2 A8            [12]  591 	setb	_EX0
                                    592 ;	main.c:33: }
      00000B 22               [24]  593 	ret
                                    594 ;------------------------------------------------------------
                                    595 ;Allocation info for local variables in function 'get_data_byte'
                                    596 ;------------------------------------------------------------
                                    597 ;data_byte                 Allocated with name '_get_data_byte_data_byte_65536_59'
                                    598 ;digit                     Allocated with name '_get_data_byte_digit_65536_59'
                                    599 ;------------------------------------------------------------
                                    600 ;	main.c:36: static uint8_t get_data_byte(void)
                                    601 ;	-----------------------------------------
                                    602 ;	 function get_data_byte
                                    603 ;	-----------------------------------------
      00000C                        604 _get_data_byte:
                                    605 ;	main.c:38: uint8_t data_byte = 0;
      00000C 90r00r02         [24]  606 	mov	dptr,#_get_data_byte_data_byte_65536_59
      00000F E4               [12]  607 	clr	a
      000010 F0               [24]  608 	movx	@dptr,a
                                    609 ;	main.c:40: printf_small("Please enter the byte to be written\r\n");
      000011 74r00            [12]  610 	mov	a,#___str_0
      000013 C0 E0            [24]  611 	push	acc
      000015 74s00            [12]  612 	mov	a,#(___str_0 >> 8)
      000017 C0 E0            [24]  613 	push	acc
      000019 74 80            [12]  614 	mov	a,#0x80
      00001B C0 E0            [24]  615 	push	acc
      00001D 12r00r00         [24]  616 	lcall	_printf_small
      000020 15 81            [12]  617 	dec	sp
      000022 15 81            [12]  618 	dec	sp
      000024 15 81            [12]  619 	dec	sp
                                    620 ;	main.c:42: while(1)
      000026                        621 00116$:
                                    622 ;	main.c:44: digit = getchar();
      000026 12r00r00         [24]  623 	lcall	_getchar
      000029 AE 82            [24]  624 	mov	r6,dpl
                                    625 ;	main.c:45: putchar(digit);
      00002B 8E 05            [24]  626 	mov	ar5,r6
      00002D 7F 00            [12]  627 	mov	r7,#0x00
      00002F 8D 82            [24]  628 	mov	dpl,r5
      000031 8F 83            [24]  629 	mov	dph,r7
      000033 C0 06            [24]  630 	push	ar6
      000035 12r00r00         [24]  631 	lcall	_putchar
      000038 D0 06            [24]  632 	pop	ar6
                                    633 ;	main.c:48: if(digit == ENTER)
      00003A BE 0D 02         [24]  634 	cjne	r6,#0x0d,00152$
      00003D 80 59            [24]  635 	sjmp	00117$
      00003F                        636 00152$:
                                    637 ;	main.c:52: else if(digit >= '0' && digit <= '9')
      00003F BE 30 00         [24]  638 	cjne	r6,#0x30,00153$
      000042                        639 00153$:
      000042 40 19            [24]  640 	jc	00109$
      000044 EE               [12]  641 	mov	a,r6
      000045 24 C6            [12]  642 	add	a,#0xff - 0x39
      000047 40 14            [24]  643 	jc	00109$
                                    644 ;	main.c:54: data_byte *= 16; /* Values are entered in hex */
      000049 90r00r02         [24]  645 	mov	dptr,#_get_data_byte_data_byte_65536_59
      00004C E0               [24]  646 	movx	a,@dptr
      00004D C4               [12]  647 	swap	a
      00004E 54 F0            [12]  648 	anl	a,#0xf0
      000050 F0               [24]  649 	movx	@dptr,a
                                    650 ;	main.c:55: data_byte += digit - '0';
      000051 8E 07            [24]  651 	mov	ar7,r6
      000053 EF               [12]  652 	mov	a,r7
      000054 24 D0            [12]  653 	add	a,#0xd0
      000056 FF               [12]  654 	mov	r7,a
      000057 E0               [24]  655 	movx	a,@dptr
      000058 FD               [12]  656 	mov	r5,a
      000059 2F               [12]  657 	add	a,r7
      00005A F0               [24]  658 	movx	@dptr,a
      00005B 80 C9            [24]  659 	sjmp	00116$
      00005D                        660 00109$:
                                    661 ;	main.c:57: else if(digit >= 'A' && digit <= 'F')
      00005D BE 41 00         [24]  662 	cjne	r6,#0x41,00156$
      000060                        663 00156$:
      000060 40 19            [24]  664 	jc	00105$
      000062 EE               [12]  665 	mov	a,r6
      000063 24 B9            [12]  666 	add	a,#0xff - 0x46
      000065 40 14            [24]  667 	jc	00105$
                                    668 ;	main.c:59: data_byte *= 16; /* Values are entered in hex */
      000067 90r00r02         [24]  669 	mov	dptr,#_get_data_byte_data_byte_65536_59
      00006A E0               [24]  670 	movx	a,@dptr
      00006B C4               [12]  671 	swap	a
      00006C 54 F0            [12]  672 	anl	a,#0xf0
      00006E F0               [24]  673 	movx	@dptr,a
                                    674 ;	main.c:60: data_byte += digit - 'A' + 10;
      00006F 8E 07            [24]  675 	mov	ar7,r6
      000071 74 C9            [12]  676 	mov	a,#0xc9
      000073 2F               [12]  677 	add	a,r7
      000074 FF               [12]  678 	mov	r7,a
      000075 E0               [24]  679 	movx	a,@dptr
      000076 FD               [12]  680 	mov	r5,a
      000077 2F               [12]  681 	add	a,r7
      000078 F0               [24]  682 	movx	@dptr,a
      000079 80 AB            [24]  683 	sjmp	00116$
      00007B                        684 00105$:
                                    685 ;	main.c:62: else if(digit >= 'a' && digit <= 'f')
      00007B BE 61 00         [24]  686 	cjne	r6,#0x61,00159$
      00007E                        687 00159$:
      00007E 40 A6            [24]  688 	jc	00116$
      000080 EE               [12]  689 	mov	a,r6
      000081 24 99            [12]  690 	add	a,#0xff - 0x66
      000083 40 A1            [24]  691 	jc	00116$
                                    692 ;	main.c:64: data_byte *= 16; /* Values are entered in hex */
      000085 90r00r02         [24]  693 	mov	dptr,#_get_data_byte_data_byte_65536_59
      000088 E0               [24]  694 	movx	a,@dptr
      000089 C4               [12]  695 	swap	a
      00008A 54 F0            [12]  696 	anl	a,#0xf0
      00008C F0               [24]  697 	movx	@dptr,a
                                    698 ;	main.c:65: data_byte += digit - 'a' + 10;
      00008D 74 A9            [12]  699 	mov	a,#0xa9
      00008F 2E               [12]  700 	add	a,r6
      000090 FE               [12]  701 	mov	r6,a
      000091 E0               [24]  702 	movx	a,@dptr
      000092 FF               [12]  703 	mov	r7,a
      000093 2E               [12]  704 	add	a,r6
      000094 F0               [24]  705 	movx	@dptr,a
      000095 02r00r26         [24]  706 	ljmp	00116$
      000098                        707 00117$:
                                    708 ;	main.c:68: printf("Entered data byte is 0x%2X\r\n", data_byte);
      000098 90r00r02         [24]  709 	mov	dptr,#_get_data_byte_data_byte_65536_59
      00009B E0               [24]  710 	movx	a,@dptr
      00009C FF               [12]  711 	mov	r7,a
      00009D FD               [12]  712 	mov	r5,a
      00009E 7E 00            [12]  713 	mov	r6,#0x00
      0000A0 C0 07            [24]  714 	push	ar7
      0000A2 C0 05            [24]  715 	push	ar5
      0000A4 C0 06            [24]  716 	push	ar6
      0000A6 74r26            [12]  717 	mov	a,#___str_1
      0000A8 C0 E0            [24]  718 	push	acc
      0000AA 74s00            [12]  719 	mov	a,#(___str_1 >> 8)
      0000AC C0 E0            [24]  720 	push	acc
      0000AE 74 80            [12]  721 	mov	a,#0x80
      0000B0 C0 E0            [24]  722 	push	acc
      0000B2 12r00r00         [24]  723 	lcall	_printf
      0000B5 E5 81            [12]  724 	mov	a,sp
      0000B7 24 FB            [12]  725 	add	a,#0xfb
      0000B9 F5 81            [12]  726 	mov	sp,a
      0000BB D0 07            [24]  727 	pop	ar7
                                    728 ;	main.c:69: return data_byte;
      0000BD 8F 82            [24]  729 	mov	dpl,r7
                                    730 ;	main.c:70: }
      0000BF 22               [24]  731 	ret
                                    732 ;------------------------------------------------------------
                                    733 ;Allocation info for local variables in function 'get_addr'
                                    734 ;------------------------------------------------------------
                                    735 ;address                   Allocated with name '_get_addr_address_65536_66'
                                    736 ;digit                     Allocated with name '_get_addr_digit_65536_66'
                                    737 ;------------------------------------------------------------
                                    738 ;	main.c:73: static uint16_t get_addr(void)
                                    739 ;	-----------------------------------------
                                    740 ;	 function get_addr
                                    741 ;	-----------------------------------------
      0000C0                        742 _get_addr:
                                    743 ;	main.c:75: uint16_t address = 0;
      0000C0 90r00r03         [24]  744 	mov	dptr,#_get_addr_address_65536_66
      0000C3 E4               [12]  745 	clr	a
      0000C4 F0               [24]  746 	movx	@dptr,a
      0000C5 A3               [24]  747 	inc	dptr
      0000C6 F0               [24]  748 	movx	@dptr,a
                                    749 ;	main.c:78: printf_small("Please enter an EEPROM address between 0x000 and 0x7FF:\r\n");
      0000C7 74r43            [12]  750 	mov	a,#___str_2
      0000C9 C0 E0            [24]  751 	push	acc
      0000CB 74s00            [12]  752 	mov	a,#(___str_2 >> 8)
      0000CD C0 E0            [24]  753 	push	acc
      0000CF 74 80            [12]  754 	mov	a,#0x80
      0000D1 C0 E0            [24]  755 	push	acc
      0000D3 12r00r00         [24]  756 	lcall	_printf_small
      0000D6 15 81            [12]  757 	dec	sp
      0000D8 15 81            [12]  758 	dec	sp
      0000DA 15 81            [12]  759 	dec	sp
                                    760 ;	main.c:79: while(1)
      0000DC                        761 00116$:
                                    762 ;	main.c:81: digit = getchar();
      0000DC 12r00r00         [24]  763 	lcall	_getchar
      0000DF AE 82            [24]  764 	mov	r6,dpl
                                    765 ;	main.c:82: putchar(digit);
      0000E1 8E 05            [24]  766 	mov	ar5,r6
      0000E3 7F 00            [12]  767 	mov	r7,#0x00
      0000E5 8D 82            [24]  768 	mov	dpl,r5
      0000E7 8F 83            [24]  769 	mov	dph,r7
      0000E9 C0 07            [24]  770 	push	ar7
      0000EB C0 06            [24]  771 	push	ar6
      0000ED C0 05            [24]  772 	push	ar5
      0000EF 12r00r00         [24]  773 	lcall	_putchar
      0000F2 D0 05            [24]  774 	pop	ar5
      0000F4 D0 06            [24]  775 	pop	ar6
      0000F6 D0 07            [24]  776 	pop	ar7
                                    777 ;	main.c:83: if(digit == ENTER)
      0000F8 BE 0D 0C         [24]  778 	cjne	r6,#0x0d,00113$
                                    779 ;	main.c:85: putstr("\r\n");
      0000FB 90r00r7D         [24]  780 	mov	dptr,#___str_3
      0000FE 75 F0 80         [24]  781 	mov	b,#0x80
      000101 12r00r00         [24]  782 	lcall	_putstr
                                    783 ;	main.c:86: break;
      000104 02r01rE2         [24]  784 	ljmp	00117$
      000107                        785 00113$:
                                    786 ;	main.c:88: else if(digit >= '0' && digit <= '9')
      000107 BE 30 00         [24]  787 	cjne	r6,#0x30,00161$
      00010A                        788 00161$:
      00010A 40 42            [24]  789 	jc	00109$
      00010C EE               [12]  790 	mov	a,r6
      00010D 24 C6            [12]  791 	add	a,#0xff - 0x39
      00010F 40 3D            [24]  792 	jc	00109$
                                    793 ;	main.c:90: address *= 16; /* Values are entered in hex */
      000111 90r00r03         [24]  794 	mov	dptr,#_get_addr_address_65536_66
      000114 E0               [24]  795 	movx	a,@dptr
      000115 FB               [12]  796 	mov	r3,a
      000116 A3               [24]  797 	inc	dptr
      000117 E0               [24]  798 	movx	a,@dptr
      000118 C4               [12]  799 	swap	a
      000119 54 F0            [12]  800 	anl	a,#0xf0
      00011B CB               [12]  801 	xch	a,r3
      00011C C4               [12]  802 	swap	a
      00011D CB               [12]  803 	xch	a,r3
      00011E 6B               [12]  804 	xrl	a,r3
      00011F CB               [12]  805 	xch	a,r3
      000120 54 F0            [12]  806 	anl	a,#0xf0
      000122 CB               [12]  807 	xch	a,r3
      000123 6B               [12]  808 	xrl	a,r3
      000124 FC               [12]  809 	mov	r4,a
      000125 90r00r03         [24]  810 	mov	dptr,#_get_addr_address_65536_66
      000128 EB               [12]  811 	mov	a,r3
      000129 F0               [24]  812 	movx	@dptr,a
      00012A EC               [12]  813 	mov	a,r4
      00012B A3               [24]  814 	inc	dptr
      00012C F0               [24]  815 	movx	@dptr,a
                                    816 ;	main.c:91: address += digit - '0';
      00012D ED               [12]  817 	mov	a,r5
      00012E 24 D0            [12]  818 	add	a,#0xd0
      000130 FB               [12]  819 	mov	r3,a
      000131 EF               [12]  820 	mov	a,r7
      000132 34 FF            [12]  821 	addc	a,#0xff
      000134 FC               [12]  822 	mov	r4,a
      000135 90r00r03         [24]  823 	mov	dptr,#_get_addr_address_65536_66
      000138 E0               [24]  824 	movx	a,@dptr
      000139 F9               [12]  825 	mov	r1,a
      00013A A3               [24]  826 	inc	dptr
      00013B E0               [24]  827 	movx	a,@dptr
      00013C FA               [12]  828 	mov	r2,a
      00013D EB               [12]  829 	mov	a,r3
      00013E 29               [12]  830 	add	a,r1
      00013F F9               [12]  831 	mov	r1,a
      000140 EC               [12]  832 	mov	a,r4
      000141 3A               [12]  833 	addc	a,r2
      000142 FA               [12]  834 	mov	r2,a
      000143 90r00r03         [24]  835 	mov	dptr,#_get_addr_address_65536_66
      000146 E9               [12]  836 	mov	a,r1
      000147 F0               [24]  837 	movx	@dptr,a
      000148 EA               [12]  838 	mov	a,r2
      000149 A3               [24]  839 	inc	dptr
      00014A F0               [24]  840 	movx	@dptr,a
      00014B 02r00rDC         [24]  841 	ljmp	00116$
      00014E                        842 00109$:
                                    843 ;	main.c:93: else if(digit >= 'A' && digit <= 'F')
      00014E BE 41 00         [24]  844 	cjne	r6,#0x41,00164$
      000151                        845 00164$:
      000151 40 42            [24]  846 	jc	00105$
      000153 EE               [12]  847 	mov	a,r6
      000154 24 B9            [12]  848 	add	a,#0xff - 0x46
      000156 40 3D            [24]  849 	jc	00105$
                                    850 ;	main.c:95: address *= 16; /* Values are entered in hex */
      000158 90r00r03         [24]  851 	mov	dptr,#_get_addr_address_65536_66
      00015B E0               [24]  852 	movx	a,@dptr
      00015C FB               [12]  853 	mov	r3,a
      00015D A3               [24]  854 	inc	dptr
      00015E E0               [24]  855 	movx	a,@dptr
      00015F C4               [12]  856 	swap	a
      000160 54 F0            [12]  857 	anl	a,#0xf0
      000162 CB               [12]  858 	xch	a,r3
      000163 C4               [12]  859 	swap	a
      000164 CB               [12]  860 	xch	a,r3
      000165 6B               [12]  861 	xrl	a,r3
      000166 CB               [12]  862 	xch	a,r3
      000167 54 F0            [12]  863 	anl	a,#0xf0
      000169 CB               [12]  864 	xch	a,r3
      00016A 6B               [12]  865 	xrl	a,r3
      00016B FC               [12]  866 	mov	r4,a
      00016C 90r00r03         [24]  867 	mov	dptr,#_get_addr_address_65536_66
      00016F EB               [12]  868 	mov	a,r3
      000170 F0               [24]  869 	movx	@dptr,a
      000171 EC               [12]  870 	mov	a,r4
      000172 A3               [24]  871 	inc	dptr
      000173 F0               [24]  872 	movx	@dptr,a
                                    873 ;	main.c:96: address += digit - 'A' + 10;
      000174 74 C9            [12]  874 	mov	a,#0xc9
      000176 2D               [12]  875 	add	a,r5
      000177 FB               [12]  876 	mov	r3,a
      000178 74 FF            [12]  877 	mov	a,#0xff
      00017A 3F               [12]  878 	addc	a,r7
      00017B FC               [12]  879 	mov	r4,a
      00017C 90r00r03         [24]  880 	mov	dptr,#_get_addr_address_65536_66
      00017F E0               [24]  881 	movx	a,@dptr
      000180 F9               [12]  882 	mov	r1,a
      000181 A3               [24]  883 	inc	dptr
      000182 E0               [24]  884 	movx	a,@dptr
      000183 FA               [12]  885 	mov	r2,a
      000184 EB               [12]  886 	mov	a,r3
      000185 29               [12]  887 	add	a,r1
      000186 F9               [12]  888 	mov	r1,a
      000187 EC               [12]  889 	mov	a,r4
      000188 3A               [12]  890 	addc	a,r2
      000189 FA               [12]  891 	mov	r2,a
      00018A 90r00r03         [24]  892 	mov	dptr,#_get_addr_address_65536_66
      00018D E9               [12]  893 	mov	a,r1
      00018E F0               [24]  894 	movx	@dptr,a
      00018F EA               [12]  895 	mov	a,r2
      000190 A3               [24]  896 	inc	dptr
      000191 F0               [24]  897 	movx	@dptr,a
      000192 02r00rDC         [24]  898 	ljmp	00116$
      000195                        899 00105$:
                                    900 ;	main.c:98: else if(digit >= 'a' && digit <= 'f')
      000195 BE 61 00         [24]  901 	cjne	r6,#0x61,00167$
      000198                        902 00167$:
      000198 50 03            [24]  903 	jnc	00168$
      00019A 02r00rDC         [24]  904 	ljmp	00116$
      00019D                        905 00168$:
      00019D EE               [12]  906 	mov	a,r6
      00019E 24 99            [12]  907 	add	a,#0xff - 0x66
      0001A0 50 03            [24]  908 	jnc	00169$
      0001A2 02r00rDC         [24]  909 	ljmp	00116$
      0001A5                        910 00169$:
                                    911 ;	main.c:100: address *= 16; /* Values are entered in hex */
      0001A5 90r00r03         [24]  912 	mov	dptr,#_get_addr_address_65536_66
      0001A8 E0               [24]  913 	movx	a,@dptr
      0001A9 FC               [12]  914 	mov	r4,a
      0001AA A3               [24]  915 	inc	dptr
      0001AB E0               [24]  916 	movx	a,@dptr
      0001AC C4               [12]  917 	swap	a
      0001AD 54 F0            [12]  918 	anl	a,#0xf0
      0001AF CC               [12]  919 	xch	a,r4
      0001B0 C4               [12]  920 	swap	a
      0001B1 CC               [12]  921 	xch	a,r4
      0001B2 6C               [12]  922 	xrl	a,r4
      0001B3 CC               [12]  923 	xch	a,r4
      0001B4 54 F0            [12]  924 	anl	a,#0xf0
      0001B6 CC               [12]  925 	xch	a,r4
      0001B7 6C               [12]  926 	xrl	a,r4
      0001B8 FE               [12]  927 	mov	r6,a
      0001B9 90r00r03         [24]  928 	mov	dptr,#_get_addr_address_65536_66
      0001BC EC               [12]  929 	mov	a,r4
      0001BD F0               [24]  930 	movx	@dptr,a
      0001BE EE               [12]  931 	mov	a,r6
      0001BF A3               [24]  932 	inc	dptr
      0001C0 F0               [24]  933 	movx	@dptr,a
                                    934 ;	main.c:101: address += digit - 'a' + 10;
      0001C1 74 A9            [12]  935 	mov	a,#0xa9
      0001C3 2D               [12]  936 	add	a,r5
      0001C4 FD               [12]  937 	mov	r5,a
      0001C5 74 FF            [12]  938 	mov	a,#0xff
      0001C7 3F               [12]  939 	addc	a,r7
      0001C8 FF               [12]  940 	mov	r7,a
      0001C9 90r00r03         [24]  941 	mov	dptr,#_get_addr_address_65536_66
      0001CC E0               [24]  942 	movx	a,@dptr
      0001CD FC               [12]  943 	mov	r4,a
      0001CE A3               [24]  944 	inc	dptr
      0001CF E0               [24]  945 	movx	a,@dptr
      0001D0 FE               [12]  946 	mov	r6,a
      0001D1 ED               [12]  947 	mov	a,r5
      0001D2 2C               [12]  948 	add	a,r4
      0001D3 FC               [12]  949 	mov	r4,a
      0001D4 EF               [12]  950 	mov	a,r7
      0001D5 3E               [12]  951 	addc	a,r6
      0001D6 FE               [12]  952 	mov	r6,a
      0001D7 90r00r03         [24]  953 	mov	dptr,#_get_addr_address_65536_66
      0001DA EC               [12]  954 	mov	a,r4
      0001DB F0               [24]  955 	movx	@dptr,a
      0001DC EE               [12]  956 	mov	a,r6
      0001DD A3               [24]  957 	inc	dptr
      0001DE F0               [24]  958 	movx	@dptr,a
      0001DF 02r00rDC         [24]  959 	ljmp	00116$
      0001E2                        960 00117$:
                                    961 ;	main.c:104: if(address >= 0x800) /* Invalid address check */
      0001E2 90r00r03         [24]  962 	mov	dptr,#_get_addr_address_65536_66
      0001E5 E0               [24]  963 	movx	a,@dptr
      0001E6 FE               [12]  964 	mov	r6,a
      0001E7 A3               [24]  965 	inc	dptr
      0001E8 E0               [24]  966 	movx	a,@dptr
      0001E9 FF               [12]  967 	mov	r7,a
      0001EA 8F 05            [24]  968 	mov	ar5,r7
      0001EC 74 F8            [12]  969 	mov	a,#0x100 - 0x08
      0001EE 2D               [12]  970 	add	a,r5
      0001EF 50 28            [24]  971 	jnc	00119$
                                    972 ;	main.c:106: printf("Invalid address, please retry\r\n");
      0001F1 C0 07            [24]  973 	push	ar7
      0001F3 C0 06            [24]  974 	push	ar6
      0001F5 74r80            [12]  975 	mov	a,#___str_4
      0001F7 C0 E0            [24]  976 	push	acc
      0001F9 74s00            [12]  977 	mov	a,#(___str_4 >> 8)
      0001FB C0 E0            [24]  978 	push	acc
      0001FD 74 80            [12]  979 	mov	a,#0x80
      0001FF C0 E0            [24]  980 	push	acc
      000201 12r00r00         [24]  981 	lcall	_printf
      000204 15 81            [12]  982 	dec	sp
      000206 15 81            [12]  983 	dec	sp
      000208 15 81            [12]  984 	dec	sp
      00020A D0 06            [24]  985 	pop	ar6
      00020C D0 07            [24]  986 	pop	ar7
                                    987 ;	main.c:107: err = 1;
      00020E 90r00r01         [24]  988 	mov	dptr,#_err
      000211 74 01            [12]  989 	mov	a,#0x01
      000213 F0               [24]  990 	movx	@dptr,a
                                    991 ;	main.c:108: return address;
      000214 8E 82            [24]  992 	mov	dpl,r6
      000216 8F 83            [24]  993 	mov	dph,r7
      000218 22               [24]  994 	ret
      000219                        995 00119$:
                                    996 ;	main.c:112: printf("Entered address is 0x%3X\r\n", address);
      000219 C0 07            [24]  997 	push	ar7
      00021B C0 06            [24]  998 	push	ar6
      00021D C0 06            [24]  999 	push	ar6
      00021F C0 07            [24] 1000 	push	ar7
      000221 74rA0            [12] 1001 	mov	a,#___str_5
      000223 C0 E0            [24] 1002 	push	acc
      000225 74s00            [12] 1003 	mov	a,#(___str_5 >> 8)
      000227 C0 E0            [24] 1004 	push	acc
      000229 74 80            [12] 1005 	mov	a,#0x80
      00022B C0 E0            [24] 1006 	push	acc
      00022D 12r00r00         [24] 1007 	lcall	_printf
      000230 E5 81            [12] 1008 	mov	a,sp
      000232 24 FB            [12] 1009 	add	a,#0xfb
      000234 F5 81            [12] 1010 	mov	sp,a
      000236 D0 06            [24] 1011 	pop	ar6
      000238 D0 07            [24] 1012 	pop	ar7
                                   1013 ;	main.c:116: return address;
      00023A 8E 82            [24] 1014 	mov	dpl,r6
      00023C 8F 83            [24] 1015 	mov	dph,r7
                                   1016 ;	main.c:117: }
      00023E 22               [24] 1017 	ret
                                   1018 ;------------------------------------------------------------
                                   1019 ;Allocation info for local variables in function 'i2c_loop'
                                   1020 ;------------------------------------------------------------
                                   1021 ;data_byte                 Allocated with name '_i2c_loop_data_byte_65536_74'
                                   1022 ;address                   Allocated with name '_i2c_loop_address_65536_74'
                                   1023 ;end_address               Allocated with name '_i2c_loop_end_address_65536_74'
                                   1024 ;------------------------------------------------------------
                                   1025 ;	main.c:128: void i2c_loop()
                                   1026 ;	-----------------------------------------
                                   1027 ;	 function i2c_loop
                                   1028 ;	-----------------------------------------
      00023F                       1029 _i2c_loop:
                                   1030 ;	main.c:133: while(1)
      00023F                       1031 00128$:
                                   1032 ;	main.c:135: err = 0;
      00023F 90r00r01         [24] 1033 	mov	dptr,#_err
      000242 E4               [12] 1034 	clr	a
      000243 F0               [24] 1035 	movx	@dptr,a
                                   1036 ;	main.c:136: print_prompt();
      000244 12r00r00         [24] 1037 	lcall	_print_prompt
                                   1038 ;	main.c:137: input_char = getchar();
      000247 12r00r00         [24] 1039 	lcall	_getchar
      00024A AE 82            [24] 1040 	mov	r6,dpl
      00024C 90r00r00         [24] 1041 	mov	dptr,#_input_char
      00024F EE               [12] 1042 	mov	a,r6
      000250 F0               [24] 1043 	movx	@dptr,a
                                   1044 ;	main.c:138: putchar(input_char);
      000251 EE               [12] 1045 	mov	a,r6
      000252 33               [12] 1046 	rlc	a
      000253 95 E0            [12] 1047 	subb	a,acc
      000255 FF               [12] 1048 	mov	r7,a
      000256 8E 82            [24] 1049 	mov	dpl,r6
      000258 8F 83            [24] 1050 	mov	dph,r7
      00025A 12r00r00         [24] 1051 	lcall	_putchar
                                   1052 ;	main.c:139: putstr("\r\n");
      00025D 90r00r7D         [24] 1053 	mov	dptr,#___str_3
      000260 75 F0 80         [24] 1054 	mov	b,#0x80
      000263 12r00r00         [24] 1055 	lcall	_putstr
                                   1056 ;	main.c:142: if(input_char == 'W')
      000266 90r00r00         [24] 1057 	mov	dptr,#_input_char
      000269 E0               [24] 1058 	movx	a,@dptr
      00026A FF               [12] 1059 	mov	r7,a
      00026B BF 57 29         [24] 1060 	cjne	r7,#0x57,00125$
                                   1061 ;	main.c:144: address = get_addr();
      00026E 12r00rC0         [24] 1062 	lcall	_get_addr
      000271 AD 82            [24] 1063 	mov	r5,dpl
      000273 AE 83            [24] 1064 	mov	r6,dph
                                   1065 ;	main.c:145: if(err)
      000275 90r00r01         [24] 1066 	mov	dptr,#_err
      000278 E0               [24] 1067 	movx	a,@dptr
      000279 60 01            [24] 1068 	jz	00178$
      00027B 22               [24] 1069 	ret
      00027C                       1070 00178$:
                                   1071 ;	main.c:149: data_byte = get_data_byte();
      00027C C0 06            [24] 1072 	push	ar6
      00027E C0 05            [24] 1073 	push	ar5
      000280 12r00r0C         [24] 1074 	lcall	_get_data_byte
      000283 AC 82            [24] 1075 	mov	r4,dpl
      000285 D0 05            [24] 1076 	pop	ar5
      000287 D0 06            [24] 1077 	pop	ar6
                                   1078 ;	main.c:150: i2c_write_byte(address, data_byte);
      000289 90r00r00         [24] 1079 	mov	dptr,#_i2c_write_byte_PARM_2
      00028C EC               [12] 1080 	mov	a,r4
      00028D F0               [24] 1081 	movx	@dptr,a
      00028E 8D 82            [24] 1082 	mov	dpl,r5
      000290 8E 83            [24] 1083 	mov	dph,r6
      000292 12r00r00         [24] 1084 	lcall	_i2c_write_byte
      000295 80 A8            [24] 1085 	sjmp	00128$
      000297                       1086 00125$:
                                   1087 ;	main.c:153: else if(input_char == 'R')
      000297 BF 52 41         [24] 1088 	cjne	r7,#0x52,00122$
                                   1089 ;	main.c:155: address = get_addr();
      00029A 12r00rC0         [24] 1090 	lcall	_get_addr
      00029D AD 82            [24] 1091 	mov	r5,dpl
      00029F AE 83            [24] 1092 	mov	r6,dph
                                   1093 ;	main.c:157: if(err)
      0002A1 90r00r01         [24] 1094 	mov	dptr,#_err
      0002A4 E0               [24] 1095 	movx	a,@dptr
      0002A5 60 01            [24] 1096 	jz	00181$
      0002A7 22               [24] 1097 	ret
      0002A8                       1098 00181$:
                                   1099 ;	main.c:161: data_byte = i2c_read_byte(address);
      0002A8 8D 82            [24] 1100 	mov	dpl,r5
      0002AA 8E 83            [24] 1101 	mov	dph,r6
      0002AC C0 06            [24] 1102 	push	ar6
      0002AE C0 05            [24] 1103 	push	ar5
      0002B0 12r00r00         [24] 1104 	lcall	_i2c_read_byte
      0002B3 AC 82            [24] 1105 	mov	r4,dpl
      0002B5 D0 05            [24] 1106 	pop	ar5
      0002B7 D0 06            [24] 1107 	pop	ar6
                                   1108 ;	main.c:162: printf("Byte read from EEPROM address 0x%3X is 0x%2X\r\n",address, data_byte);
      0002B9 7B 00            [12] 1109 	mov	r3,#0x00
      0002BB C0 04            [24] 1110 	push	ar4
      0002BD C0 03            [24] 1111 	push	ar3
      0002BF C0 05            [24] 1112 	push	ar5
      0002C1 C0 06            [24] 1113 	push	ar6
      0002C3 74rBB            [12] 1114 	mov	a,#___str_6
      0002C5 C0 E0            [24] 1115 	push	acc
      0002C7 74s00            [12] 1116 	mov	a,#(___str_6 >> 8)
      0002C9 C0 E0            [24] 1117 	push	acc
      0002CB 74 80            [12] 1118 	mov	a,#0x80
      0002CD C0 E0            [24] 1119 	push	acc
      0002CF 12r00r00         [24] 1120 	lcall	_printf
      0002D2 E5 81            [12] 1121 	mov	a,sp
      0002D4 24 F9            [12] 1122 	add	a,#0xf9
      0002D6 F5 81            [12] 1123 	mov	sp,a
      0002D8 02r02r3F         [24] 1124 	ljmp	00128$
      0002DB                       1125 00122$:
                                   1126 ;	main.c:165: else if (input_char == 'H')
      0002DB BF 48 54         [24] 1127 	cjne	r7,#0x48,00119$
                                   1128 ;	main.c:167: address = get_addr();
      0002DE 12r00rC0         [24] 1129 	lcall	_get_addr
      0002E1 AD 82            [24] 1130 	mov	r5,dpl
      0002E3 AE 83            [24] 1131 	mov	r6,dph
                                   1132 ;	main.c:168: if(err)
      0002E5 90r00r01         [24] 1133 	mov	dptr,#_err
      0002E8 E0               [24] 1134 	movx	a,@dptr
      0002E9 60 01            [24] 1135 	jz	00184$
      0002EB 22               [24] 1136 	ret
      0002EC                       1137 00184$:
                                   1138 ;	main.c:172: end_address = get_addr();
      0002EC C0 06            [24] 1139 	push	ar6
      0002EE C0 05            [24] 1140 	push	ar5
      0002F0 12r00rC0         [24] 1141 	lcall	_get_addr
      0002F3 AB 82            [24] 1142 	mov	r3,dpl
      0002F5 AC 83            [24] 1143 	mov	r4,dph
      0002F7 D0 05            [24] 1144 	pop	ar5
      0002F9 D0 06            [24] 1145 	pop	ar6
                                   1146 ;	main.c:173: if(err)
      0002FB 90r00r01         [24] 1147 	mov	dptr,#_err
      0002FE E0               [24] 1148 	movx	a,@dptr
      0002FF 70 6D            [24] 1149 	jnz	00130$
                                   1150 ;	main.c:178: if(end_address < address)
      000301 C3               [12] 1151 	clr	c
      000302 EB               [12] 1152 	mov	a,r3
      000303 9D               [12] 1153 	subb	a,r5
      000304 EC               [12] 1154 	mov	a,r4
      000305 9E               [12] 1155 	subb	a,r6
      000306 50 18            [24] 1156 	jnc	00110$
                                   1157 ;	main.c:180: printf("ERROR: Please enter a valid address range\r\n");
      000308 74rEA            [12] 1158 	mov	a,#___str_7
      00030A C0 E0            [24] 1159 	push	acc
      00030C 74s00            [12] 1160 	mov	a,#(___str_7 >> 8)
      00030E C0 E0            [24] 1161 	push	acc
      000310 74 80            [12] 1162 	mov	a,#0x80
      000312 C0 E0            [24] 1163 	push	acc
      000314 12r00r00         [24] 1164 	lcall	_printf
      000317 15 81            [12] 1165 	dec	sp
      000319 15 81            [12] 1166 	dec	sp
      00031B 15 81            [12] 1167 	dec	sp
      00031D 02r02r3F         [24] 1168 	ljmp	00128$
      000320                       1169 00110$:
                                   1170 ;	main.c:184: i2c_hex_dump(address, end_address);
      000320 90r00r00         [24] 1171 	mov	dptr,#_i2c_hex_dump_PARM_2
      000323 EB               [12] 1172 	mov	a,r3
      000324 F0               [24] 1173 	movx	@dptr,a
      000325 EC               [12] 1174 	mov	a,r4
      000326 A3               [24] 1175 	inc	dptr
      000327 F0               [24] 1176 	movx	@dptr,a
      000328 8D 82            [24] 1177 	mov	dpl,r5
      00032A 8E 83            [24] 1178 	mov	dph,r6
      00032C 12r00r00         [24] 1179 	lcall	_i2c_hex_dump
      00032F 02r02r3F         [24] 1180 	ljmp	00128$
      000332                       1181 00119$:
                                   1182 ;	main.c:187: else if(input_char == 'E')
      000332 BF 45 06         [24] 1183 	cjne	r7,#0x45,00116$
                                   1184 ;	main.c:189: reset_eeprom();
      000335 12r00r00         [24] 1185 	lcall	_reset_eeprom
      000338 02r02r3F         [24] 1186 	ljmp	00128$
      00033B                       1187 00116$:
                                   1188 ;	main.c:191: else if(input_char == 'O')
      00033B BF 4F 18         [24] 1189 	cjne	r7,#0x4f,00113$
                                   1190 ;	main.c:193: printf("Printing Options:\r\n");
      00033E 74r16            [12] 1191 	mov	a,#___str_8
      000340 C0 E0            [24] 1192 	push	acc
      000342 74s01            [12] 1193 	mov	a,#(___str_8 >> 8)
      000344 C0 E0            [24] 1194 	push	acc
      000346 74 80            [12] 1195 	mov	a,#0x80
      000348 C0 E0            [24] 1196 	push	acc
      00034A 12r00r00         [24] 1197 	lcall	_printf
      00034D 15 81            [12] 1198 	dec	sp
      00034F 15 81            [12] 1199 	dec	sp
      000351 15 81            [12] 1200 	dec	sp
      000353 02r02r3F         [24] 1201 	ljmp	00128$
      000356                       1202 00113$:
                                   1203 ;	main.c:197: printf("Invalid character. Please retry\r\n");
      000356 74r2A            [12] 1204 	mov	a,#___str_9
      000358 C0 E0            [24] 1205 	push	acc
      00035A 74s01            [12] 1206 	mov	a,#(___str_9 >> 8)
      00035C C0 E0            [24] 1207 	push	acc
      00035E 74 80            [12] 1208 	mov	a,#0x80
      000360 C0 E0            [24] 1209 	push	acc
      000362 12r00r00         [24] 1210 	lcall	_printf
      000365 15 81            [12] 1211 	dec	sp
      000367 15 81            [12] 1212 	dec	sp
      000369 15 81            [12] 1213 	dec	sp
      00036B 02r02r3F         [24] 1214 	ljmp	00128$
      00036E                       1215 00130$:
                                   1216 ;	main.c:201: }
      00036E 22               [24] 1217 	ret
                                   1218 ;------------------------------------------------------------
                                   1219 ;Allocation info for local variables in function 'main'
                                   1220 ;------------------------------------------------------------
                                   1221 ;	main.c:203: int main(void)
                                   1222 ;	-----------------------------------------
                                   1223 ;	 function main
                                   1224 ;	-----------------------------------------
      00036F                       1225 _main:
                                   1226 ;	main.c:206: serial_init();
      00036F 12r00r00         [24] 1227 	lcall	_serial_init
                                   1228 ;	main.c:209: i2c_init();
      000372 12r00r00         [24] 1229 	lcall	_i2c_init
                                   1230 ;	main.c:212: enable_8051_irq();
      000375 12r00r07         [24] 1231 	lcall	_enable_8051_irq
                                   1232 ;	main.c:216: i2c_loop();
      000378 12r02r3F         [24] 1233 	lcall	_i2c_loop
                                   1234 ;	main.c:218: return 0;
      00037B 90 00 00         [24] 1235 	mov	dptr,#0x0000
                                   1236 ;	main.c:219: }
      00037E 22               [24] 1237 	ret
                                   1238 	.area CSEG    (CODE)
                                   1239 	.area CONST   (CODE)
                                   1240 	.area CONST   (CODE)
      000000                       1241 ___str_0:
      000000 50 6C 65 61 73 65 20  1242 	.ascii "Please enter the byte to be written"
             65 6E 74 65 72 20 74
             68 65 20 62 79 74 65
             20 74 6F 20 62 65 20
             77 72 69 74 74 65 6E
      000023 0D                    1243 	.db 0x0d
      000024 0A                    1244 	.db 0x0a
      000025 00                    1245 	.db 0x00
                                   1246 	.area CSEG    (CODE)
                                   1247 	.area CONST   (CODE)
      000026                       1248 ___str_1:
      000026 45 6E 74 65 72 65 64  1249 	.ascii "Entered data byte is 0x%2X"
             20 64 61 74 61 20 62
             79 74 65 20 69 73 20
             30 78 25 32 58
      000040 0D                    1250 	.db 0x0d
      000041 0A                    1251 	.db 0x0a
      000042 00                    1252 	.db 0x00
                                   1253 	.area CSEG    (CODE)
                                   1254 	.area CONST   (CODE)
      000043                       1255 ___str_2:
      000043 50 6C 65 61 73 65 20  1256 	.ascii "Please enter an EEPROM address between 0x000 and 0x7FF:"
             65 6E 74 65 72 20 61
             6E 20 45 45 50 52 4F
             4D 20 61 64 64 72 65
             73 73 20 62 65 74 77
             65 65 6E 20 30 78 30
             30 30 20 61 6E 64 20
             30 78 37 46 46 3A
      00007A 0D                    1257 	.db 0x0d
      00007B 0A                    1258 	.db 0x0a
      00007C 00                    1259 	.db 0x00
                                   1260 	.area CSEG    (CODE)
                                   1261 	.area CONST   (CODE)
      00007D                       1262 ___str_3:
      00007D 0D                    1263 	.db 0x0d
      00007E 0A                    1264 	.db 0x0a
      00007F 00                    1265 	.db 0x00
                                   1266 	.area CSEG    (CODE)
                                   1267 	.area CONST   (CODE)
      000080                       1268 ___str_4:
      000080 49 6E 76 61 6C 69 64  1269 	.ascii "Invalid address, please retry"
             20 61 64 64 72 65 73
             73 2C 20 70 6C 65 61
             73 65 20 72 65 74 72
             79
      00009D 0D                    1270 	.db 0x0d
      00009E 0A                    1271 	.db 0x0a
      00009F 00                    1272 	.db 0x00
                                   1273 	.area CSEG    (CODE)
                                   1274 	.area CONST   (CODE)
      0000A0                       1275 ___str_5:
      0000A0 45 6E 74 65 72 65 64  1276 	.ascii "Entered address is 0x%3X"
             20 61 64 64 72 65 73
             73 20 69 73 20 30 78
             25 33 58
      0000B8 0D                    1277 	.db 0x0d
      0000B9 0A                    1278 	.db 0x0a
      0000BA 00                    1279 	.db 0x00
                                   1280 	.area CSEG    (CODE)
                                   1281 	.area CONST   (CODE)
      0000BB                       1282 ___str_6:
      0000BB 42 79 74 65 20 72 65  1283 	.ascii "Byte read from EEPROM address 0x%3X is 0x%2X"
             61 64 20 66 72 6F 6D
             20 45 45 50 52 4F 4D
             20 61 64 64 72 65 73
             73 20 30 78 25 33 58
             20 69 73 20 30 78 25
             32 58
      0000E7 0D                    1284 	.db 0x0d
      0000E8 0A                    1285 	.db 0x0a
      0000E9 00                    1286 	.db 0x00
                                   1287 	.area CSEG    (CODE)
                                   1288 	.area CONST   (CODE)
      0000EA                       1289 ___str_7:
      0000EA 45 52 52 4F 52 3A 20  1290 	.ascii "ERROR: Please enter a valid address range"
             50 6C 65 61 73 65 20
             65 6E 74 65 72 20 61
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 72 61 6E 67 65
      000113 0D                    1291 	.db 0x0d
      000114 0A                    1292 	.db 0x0a
      000115 00                    1293 	.db 0x00
                                   1294 	.area CSEG    (CODE)
                                   1295 	.area CONST   (CODE)
      000116                       1296 ___str_8:
      000116 50 72 69 6E 74 69 6E  1297 	.ascii "Printing Options:"
             67 20 4F 70 74 69 6F
             6E 73 3A
      000127 0D                    1298 	.db 0x0d
      000128 0A                    1299 	.db 0x0a
      000129 00                    1300 	.db 0x00
                                   1301 	.area CSEG    (CODE)
                                   1302 	.area CONST   (CODE)
      00012A                       1303 ___str_9:
      00012A 49 6E 76 61 6C 69 64  1304 	.ascii "Invalid character. Please retry"
             20 63 68 61 72 61 63
             74 65 72 2E 20 50 6C
             65 61 73 65 20 72 65
             74 72 79
      000149 0D                    1305 	.db 0x0d
      00014A 0A                    1306 	.db 0x0a
      00014B 00                    1307 	.db 0x00
                                   1308 	.area CSEG    (CODE)
                                   1309 	.area XINIT   (CODE)
                                   1310 	.area CABS    (ABS,CODE)
