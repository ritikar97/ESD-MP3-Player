
mp3_t1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008370  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  080086a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f4c  20000090  08008738  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00004004  20001fdc  08008738  00021fdc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002463a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005297  00000000  00000000  000446fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00015f15  00000000  00000000  00049991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001468  00000000  00000000  0005f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001328  00000000  00000000  00060d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c6b3  00000000  00000000  00062038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026533  00000000  00000000  0007e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008fb83  00000000  00000000  000a4c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001347a1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003bd4  00000000  00000000  001347f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080084f0 	.word	0x080084f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	080084f0 	.word	0x080084f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	2400      	movs	r4, #0
 80004e2:	9405      	str	r4, [sp, #20]
 80004e4:	9406      	str	r4, [sp, #24]
 80004e6:	9407      	str	r4, [sp, #28]
 80004e8:	9408      	str	r4, [sp, #32]
 80004ea:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ec:	9400      	str	r4, [sp, #0]
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <MX_GPIO_Init+0xc8>)
 80004f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004f6:	631a      	str	r2, [r3, #48]	; 0x30
 80004f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	9401      	str	r4, [sp, #4]
 8000504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000506:	f042 0204 	orr.w	r2, r2, #4
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
 800050c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050e:	f002 0204 	and.w	r2, r2, #4
 8000512:	9201      	str	r2, [sp, #4]
 8000514:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	9402      	str	r4, [sp, #8]
 8000518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	631a      	str	r2, [r3, #48]	; 0x30
 8000520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000522:	f002 0201 	and.w	r2, r2, #1
 8000526:	9202      	str	r2, [sp, #8]
 8000528:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	9403      	str	r4, [sp, #12]
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f042 0202 	orr.w	r2, r2, #2
 8000532:	631a      	str	r2, [r3, #48]	; 0x30
 8000534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000536:	f002 0202 	and.w	r2, r2, #2
 800053a:	9203      	str	r2, [sp, #12]
 800053c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	9404      	str	r4, [sp, #16]
 8000540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000542:	f042 0208 	orr.w	r2, r2, #8
 8000546:	631a      	str	r2, [r3, #48]	; 0x30
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0308 	and.w	r3, r3, #8
 800054e:	9304      	str	r3, [sp, #16]
 8000550:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000552:	4f15      	ldr	r7, [pc, #84]	; (80005a8 <MX_GPIO_Init+0xcc>)
 8000554:	4622      	mov	r2, r4
 8000556:	2101      	movs	r1, #1
 8000558:	4638      	mov	r0, r7
 800055a:	f000 fed2 	bl	8001302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800055e:	4e13      	ldr	r6, [pc, #76]	; (80005ac <MX_GPIO_Init+0xd0>)
 8000560:	4622      	mov	r2, r4
 8000562:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000566:	4630      	mov	r0, r6
 8000568:	f000 fecb 	bl	8001302 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056c:	2501      	movs	r5, #1
 800056e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000576:	a905      	add	r1, sp, #20
 8000578:	4638      	mov	r0, r7
 800057a:	f000 fddb 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800057e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	a905      	add	r1, sp, #20
 8000586:	480a      	ldr	r0, [pc, #40]	; (80005b0 <MX_GPIO_Init+0xd4>)
 8000588:	f000 fdd4 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800058c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000590:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000598:	a905      	add	r1, sp, #20
 800059a:	4630      	mov	r0, r6
 800059c:	f000 fdca 	bl	8001134 <HAL_GPIO_Init>

}
 80005a0:	b00b      	add	sp, #44	; 0x2c
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020800 	.word	0x40020800
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	40020000 	.word	0x40020000

080005b4 <MX_DMA_Init>:
{
 80005b4:	b500      	push	{lr}
 80005b6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b8:	2100      	movs	r1, #0
 80005ba:	9101      	str	r1, [sp, #4]
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_DMA_Init+0x30>)
 80005be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80005c4:	631a      	str	r2, [r3, #48]	; 0x30
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005d0:	460a      	mov	r2, r1
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 fb00 	bl	8000bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 fb35 	bl	8000c48 <HAL_NVIC_EnableIRQ>
}
 80005de:	b003      	add	sp, #12
 80005e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e4:	40023800 	.word	0x40023800

080005e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ea:	e7fe      	b.n	80005ea <Error_Handler+0x2>

080005ec <MX_I2C1_Init>:
{
 80005ec:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80005ee:	480a      	ldr	r0, [pc, #40]	; (8000618 <MX_I2C1_Init+0x2c>)
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MX_I2C1_Init+0x30>)
 80005f2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x34>)
 80005f6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f8:	2300      	movs	r3, #0
 80005fa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	f001 fea6 	bl	800235c <HAL_I2C_Init>
 8000610:	b900      	cbnz	r0, 8000614 <MX_I2C1_Init+0x28>
}
 8000612:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000614:	f7ff ffe8 	bl	80005e8 <Error_Handler>
 8000618:	200000ac 	.word	0x200000ac
 800061c:	40005400 	.word	0x40005400
 8000620:	000186a0 	.word	0x000186a0

08000624 <MX_I2S3_Init>:
{
 8000624:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <MX_I2S3_Init+0x30>)
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_I2S3_Init+0x34>)
 800062a:	6543      	str	r3, [r0, #84]	; 0x54
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800062c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000630:	6582      	str	r2, [r0, #88]	; 0x58
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000632:	2300      	movs	r3, #0
 8000634:	65c3      	str	r3, [r0, #92]	; 0x5c
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000636:	6603      	str	r3, [r0, #96]	; 0x60
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000638:	6642      	str	r2, [r0, #100]	; 0x64
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800063a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800063e:	6682      	str	r2, [r0, #104]	; 0x68
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000640:	66c3      	str	r3, [r0, #108]	; 0x6c
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000642:	6703      	str	r3, [r0, #112]	; 0x70
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000644:	6743      	str	r3, [r0, #116]	; 0x74
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000646:	3054      	adds	r0, #84	; 0x54
 8000648:	f002 f9c0 	bl	80029cc <HAL_I2S_Init>
 800064c:	b900      	cbnz	r0, 8000650 <MX_I2S3_Init+0x2c>
}
 800064e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000650:	f7ff ffca 	bl	80005e8 <Error_Handler>
 8000654:	200000ac 	.word	0x200000ac
 8000658:	40003c00 	.word	0x40003c00

0800065c <SystemClock_Config>:
{
 800065c:	b500      	push	{lr}
 800065e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000660:	2230      	movs	r2, #48	; 0x30
 8000662:	2100      	movs	r1, #0
 8000664:	a808      	add	r0, sp, #32
 8000666:	f007 fe3d 	bl	80082e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	2300      	movs	r3, #0
 800066c:	9303      	str	r3, [sp, #12]
 800066e:	9304      	str	r3, [sp, #16]
 8000670:	9305      	str	r3, [sp, #20]
 8000672:	9306      	str	r3, [sp, #24]
 8000674:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemClock_Config+0x9c>)
 800067a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800067c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000680:	6411      	str	r1, [r2, #64]	; 0x40
 8000682:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000684:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <SystemClock_Config+0xa0>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2202      	movs	r2, #2
 80006ae:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ba:	2160      	movs	r1, #96	; 0x60
 80006bc:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006be:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	a808      	add	r0, sp, #32
 80006c4:	f002 fed4 	bl	8003470 <HAL_RCC_OscConfig>
 80006c8:	b988      	cbnz	r0, 80006ee <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006da:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	2103      	movs	r1, #3
 80006e0:	a803      	add	r0, sp, #12
 80006e2:	f003 f92b 	bl	800393c <HAL_RCC_ClockConfig>
 80006e6:	b920      	cbnz	r0, 80006f2 <SystemClock_Config+0x96>
}
 80006e8:	b015      	add	sp, #84	; 0x54
 80006ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80006ee:	f7ff ff7b 	bl	80005e8 <Error_Handler>
    Error_Handler();
 80006f2:	f7ff ff79 	bl	80005e8 <Error_Handler>
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <main>:
{
 8000700:	b530      	push	{r4, r5, lr}
 8000702:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000704:	f000 fa16 	bl	8000b34 <HAL_Init>
  SystemClock_Config();
 8000708:	f7ff ffa8 	bl	800065c <SystemClock_Config>
  MX_GPIO_Init();
 800070c:	f7ff fee6 	bl	80004dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000710:	f7ff ff50 	bl	80005b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000714:	f7ff ff6a 	bl	80005ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000718:	f7ff ff84 	bl	8000624 <MX_I2S3_Init>
  MX_FATFS_Init();
 800071c:	f003 ff04 	bl	8004528 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000720:	f007 f8ba 	bl	8007898 <MX_USB_HOST_Init>
  CS43_Init(hi2c1, MODE_I2S);
 8000724:	4d44      	ldr	r5, [pc, #272]	; (8000838 <main+0x138>)
 8000726:	2400      	movs	r4, #0
 8000728:	9411      	str	r4, [sp, #68]	; 0x44
 800072a:	2244      	movs	r2, #68	; 0x44
 800072c:	f105 0110 	add.w	r1, r5, #16
 8000730:	4668      	mov	r0, sp
 8000732:	f007 fdc9 	bl	80082c8 <memcpy>
 8000736:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800073a:	f007 fa3b 	bl	8007bb4 <CS43_Init>
  CS43_SetVolume(150); /* 0 - 255 */
 800073e:	2096      	movs	r0, #150	; 0x96
 8000740:	f007 fb3b 	bl	8007dba <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000744:	2003      	movs	r0, #3
 8000746:	f007 fb03 	bl	8007d50 <CS43_Enable_RightLeft>
  audioI2S_setHandle(&hi2s3);
 800074a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 800074e:	f007 fc29 	bl	8007fa4 <audioI2S_setHandle>
  bool pauseResumeToggle = 0;
 8000752:	4625      	mov	r5, r4
 8000754:	e009      	b.n	800076a <main+0x6a>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	4837      	ldr	r0, [pc, #220]	; (800083c <main+0x13c>)
 800075e:	f000 fdd0 	bl	8001302 <HAL_GPIO_WritePin>
    if(Appli_state == APPLICATION_READY)
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <main+0x140>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d00e      	beq.n	8000788 <main+0x88>
    MX_USB_HOST_Process();
 800076a:	f007 f8b5 	bl	80078d8 <MX_USB_HOST_Process>
    if(Appli_state == APPLICATION_START)
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <main+0x140>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d0ef      	beq.n	8000756 <main+0x56>
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000776:	2b03      	cmp	r3, #3
 8000778:	d1f3      	bne.n	8000762 <main+0x62>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	482e      	ldr	r0, [pc, #184]	; (800083c <main+0x13c>)
 8000782:	f000 fdbe 	bl	8001302 <HAL_GPIO_WritePin>
 8000786:	e7ec      	b.n	8000762 <main+0x62>
    	if(!isSdCardMounted)
 8000788:	b314      	cbz	r4, 80007d0 <main+0xd0>
    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800078a:	2101      	movs	r1, #1
 800078c:	482d      	ldr	r0, [pc, #180]	; (8000844 <main+0x144>)
 800078e:	f000 fdb1 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000792:	2800      	cmp	r0, #0
 8000794:	d0e9      	beq.n	800076a <main+0x6a>
    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4827      	ldr	r0, [pc, #156]	; (800083c <main+0x13c>)
 800079e:	f000 fdb0 	bl	8001302 <HAL_GPIO_WritePin>
    	    HAL_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 f9f1 	bl	8000b8c <HAL_Delay>
    	    wavPlayer_fileSelect(FILE1);
 80007aa:	4827      	ldr	r0, [pc, #156]	; (8000848 <main+0x148>)
 80007ac:	f007 fc5e 	bl	800806c <wavPlayer_fileSelect>
    	    wavPlayer_play();
 80007b0:	f007 fc7e 	bl	80080b0 <wavPlayer_play>
    	    while(wavPlayer_isFinished())
 80007b4:	f007 fd0e 	bl	80081d4 <wavPlayer_isFinished>
 80007b8:	b988      	cbnz	r0, 80007de <main+0xde>
    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c0:	481e      	ldr	r0, [pc, #120]	; (800083c <main+0x13c>)
 80007c2:	f000 fd9e 	bl	8001302 <HAL_GPIO_WritePin>
    	    HAL_Delay(1000);
 80007c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ca:	f000 f9df 	bl	8000b8c <HAL_Delay>
 80007ce:	e7cc      	b.n	800076a <main+0x6a>
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	491e      	ldr	r1, [pc, #120]	; (800084c <main+0x14c>)
 80007d4:	481e      	ldr	r0, [pc, #120]	; (8000850 <main+0x150>)
 80007d6:	f006 fc4f 	bl	8007078 <f_mount>
    		isSdCardMounted = 1;
 80007da:	2401      	movs	r4, #1
 80007dc:	e7d5      	b.n	800078a <main+0x8a>
        	    wavPlayer_process();
 80007de:	f007 fc8d 	bl	80080fc <wavPlayer_process>
        	    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80007e2:	2101      	movs	r1, #1
 80007e4:	4817      	ldr	r0, [pc, #92]	; (8000844 <main+0x144>)
 80007e6:	f000 fd85 	bl	80012f4 <HAL_GPIO_ReadPin>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d0e2      	beq.n	80007b4 <main+0xb4>
        	    	if(pauseResumeToggle)
 80007ee:	f095 0501 	eors.w	r5, r5, #1
 80007f2:	d00b      	beq.n	800080c <main+0x10c>
        	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <main+0x13c>)
 80007fc:	f000 fd81 	bl	8001302 <HAL_GPIO_WritePin>
        	    		wavPlayer_pause();
 8000800:	f007 fce0 	bl	80081c4 <wavPlayer_pause>
        	    		HAL_Delay(200);
 8000804:	20c8      	movs	r0, #200	; 0xc8
 8000806:	f000 f9c1 	bl	8000b8c <HAL_Delay>
 800080a:	e7d3      	b.n	80007b4 <main+0xb4>
        	    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <main+0x13c>)
 8000814:	f000 fd75 	bl	8001302 <HAL_GPIO_WritePin>
        	    		HAL_Delay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081c:	f000 f9b6 	bl	8000b8c <HAL_Delay>
        	    		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000820:	2101      	movs	r1, #1
 8000822:	4808      	ldr	r0, [pc, #32]	; (8000844 <main+0x144>)
 8000824:	f000 fd66 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000828:	b110      	cbz	r0, 8000830 <main+0x130>
        	    			wavPlayer_stop();
 800082a:	f007 fcc1 	bl	80081b0 <wavPlayer_stop>
 800082e:	e7c1      	b.n	80007b4 <main+0xb4>
        	    			wavPlayer_resume();
 8000830:	f007 fccc 	bl	80081cc <wavPlayer_resume>
 8000834:	e7be      	b.n	80007b4 <main+0xb4>
 8000836:	bf00      	nop
 8000838:	200000ac 	.word	0x200000ac
 800083c:	40020c00 	.word	0x40020c00
 8000840:	20000650 	.word	0x20000650
 8000844:	40020000 	.word	0x40020000
 8000848:	0800863c 	.word	0x0800863c
 800084c:	200001b4 	.word	0x200001b4
 8000850:	200003ec 	.word	0x200003ec

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2100      	movs	r1, #0
 8000858:	9100      	str	r1, [sp, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x34>)
 800085c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800085e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000862:	645a      	str	r2, [r3, #68]	; 0x44
 8000864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000866:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800086a:	9200      	str	r2, [sp, #0]
 800086c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	9101      	str	r1, [sp, #4]
 8000870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	b002      	add	sp, #8
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800088c:	b530      	push	{r4, r5, lr}
 800088e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	2300      	movs	r3, #0
 8000892:	9303      	str	r3, [sp, #12]
 8000894:	9304      	str	r3, [sp, #16]
 8000896:	9305      	str	r3, [sp, #20]
 8000898:	9306      	str	r3, [sp, #24]
 800089a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800089c:	6802      	ldr	r2, [r0, #0]
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_I2C_MspInit+0x64>)
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d001      	beq.n	80008a8 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008a4:	b009      	add	sp, #36	; 0x24
 80008a6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	2500      	movs	r5, #0
 80008aa:	9501      	str	r5, [sp, #4]
 80008ac:	4c11      	ldr	r4, [pc, #68]	; (80008f4 <HAL_I2C_MspInit+0x68>)
 80008ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6323      	str	r3, [r4, #48]	; 0x30
 80008b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80008c0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c6:	2312      	movs	r3, #18
 80008c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ce:	2304      	movs	r3, #4
 80008d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	a903      	add	r1, sp, #12
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <HAL_I2C_MspInit+0x6c>)
 80008d6:	f000 fc2d 	bl	8001134 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008da:	9502      	str	r5, [sp, #8]
 80008dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e2:	6423      	str	r3, [r4, #64]	; 0x40
 80008e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	9b02      	ldr	r3, [sp, #8]
}
 80008ee:	e7d9      	b.n	80008a4 <HAL_I2C_MspInit+0x18>
 80008f0:	40005400 	.word	0x40005400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400

080008fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	2300      	movs	r3, #0
 8000904:	930b      	str	r3, [sp, #44]	; 0x2c
 8000906:	930c      	str	r3, [sp, #48]	; 0x30
 8000908:	930d      	str	r3, [sp, #52]	; 0x34
 800090a:	930e      	str	r3, [sp, #56]	; 0x38
 800090c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090e:	9305      	str	r3, [sp, #20]
 8000910:	9306      	str	r3, [sp, #24]
 8000912:	9307      	str	r3, [sp, #28]
 8000914:	9308      	str	r3, [sp, #32]
 8000916:	9309      	str	r3, [sp, #36]	; 0x24
 8000918:	930a      	str	r3, [sp, #40]	; 0x28
  if(hi2s->Instance==SPI3)
 800091a:	6802      	ldr	r2, [r0, #0]
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <HAL_I2S_MspInit+0x14c>)
 800091e:	429a      	cmp	r2, r3
 8000920:	d002      	beq.n	8000928 <HAL_I2S_MspInit+0x2c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000922:	b010      	add	sp, #64	; 0x40
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	4604      	mov	r4, r0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800092a:	2301      	movs	r3, #1
 800092c:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 180;
 800092e:	23b4      	movs	r3, #180	; 0xb4
 8000930:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000932:	2308      	movs	r3, #8
 8000934:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000936:	2304      	movs	r3, #4
 8000938:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093a:	a805      	add	r0, sp, #20
 800093c:	f003 f8c4 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	2800      	cmp	r0, #0
 8000942:	d17a      	bne.n	8000a3a <HAL_I2S_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000944:	2500      	movs	r5, #0
 8000946:	9501      	str	r5, [sp, #4]
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_I2S_MspInit+0x150>)
 800094a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000950:	641a      	str	r2, [r3, #64]	; 0x40
 8000952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000954:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	9502      	str	r5, [sp, #8]
 800095e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000960:	f042 0201 	orr.w	r2, r2, #1
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
 8000966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000968:	f002 0201 	and.w	r2, r2, #1
 800096c:	9202      	str	r2, [sp, #8]
 800096e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	9503      	str	r5, [sp, #12]
 8000972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000974:	f042 0202 	orr.w	r2, r2, #2
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
 800097a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800097c:	f002 0202 	and.w	r2, r2, #2
 8000980:	9203      	str	r2, [sp, #12]
 8000982:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	9504      	str	r5, [sp, #16]
 8000986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000988:	f042 0204 	orr.w	r2, r2, #4
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000998:	2310      	movs	r3, #16
 800099a:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2602      	movs	r6, #2
 800099e:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a4:	2706      	movs	r7, #6
 80009a6:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	a90b      	add	r1, sp, #44	; 0x2c
 80009aa:	4829      	ldr	r0, [pc, #164]	; (8000a50 <HAL_I2S_MspInit+0x154>)
 80009ac:	f000 fbc2 	bl	8001134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009b0:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80009b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8000a60 <HAL_I2S_MspInit+0x164>
 80009c4:	a90b      	add	r1, sp, #44	; 0x2c
 80009c6:	4650      	mov	r0, sl
 80009c8:	f000 fbb4 	bl	8001134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009cc:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80009d0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80009da:	2307      	movs	r3, #7
 80009dc:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	a90b      	add	r1, sp, #44	; 0x2c
 80009e0:	4650      	mov	r0, sl
 80009e2:	f000 fba7 	bl	8001134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f0:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	a90b      	add	r1, sp, #44	; 0x2c
 80009f4:	4817      	ldr	r0, [pc, #92]	; (8000a54 <HAL_I2S_MspInit+0x158>)
 80009f6:	f000 fb9d 	bl	8001134 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80009fa:	4817      	ldr	r0, [pc, #92]	; (8000a58 <HAL_I2S_MspInit+0x15c>)
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_I2S_MspInit+0x160>)
 80009fe:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000a00:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	f8c0 8010 	str.w	r8, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a10:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a16:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1e:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a20:	2304      	movs	r3, #4
 8000a22:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a24:	2303      	movs	r3, #3
 8000a26:	6283      	str	r3, [r0, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a28:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a2a:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000a2c:	f000 f9ae 	bl	8000d8c <HAL_DMA_Init>
 8000a30:	b930      	cbnz	r0, 8000a40 <HAL_I2S_MspInit+0x144>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_I2S_MspInit+0x15c>)
 8000a34:	63a3      	str	r3, [r4, #56]	; 0x38
 8000a36:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000a38:	e773      	b.n	8000922 <HAL_I2S_MspInit+0x26>
      Error_Handler();
 8000a3a:	f7ff fdd5 	bl	80005e8 <Error_Handler>
 8000a3e:	e781      	b.n	8000944 <HAL_I2S_MspInit+0x48>
      Error_Handler();
 8000a40:	f7ff fdd2 	bl	80005e8 <Error_Handler>
 8000a44:	e7f5      	b.n	8000a32 <HAL_I2S_MspInit+0x136>
 8000a46:	bf00      	nop
 8000a48:	40003c00 	.word	0x40003c00
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020800 	.word	0x40020800
 8000a58:	20000148 	.word	0x20000148
 8000a5c:	40026088 	.word	0x40026088
 8000a60:	40020400 	.word	0x40020400

08000a64 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler>

08000a66 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler>

08000a68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler>

08000a6a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler>

08000a6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler>

08000a6e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f877 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bd08      	pop	{r3, pc}

08000a7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000a7e:	4802      	ldr	r0, [pc, #8]	; (8000a88 <DMA1_Stream5_IRQHandler+0xc>)
 8000a80:	f000 fa6a 	bl	8000f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a84:	bd08      	pop	{r3, pc}
 8000a86:	bf00      	nop
 8000a88:	20000148 	.word	0x20000148

08000a8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <OTG_FS_IRQHandler+0xc>)
 8000a90:	f001 f958 	bl	8001d44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a94:	bd08      	pop	{r3, pc}
 8000a96:	bf00      	nop
 8000a98:	20000a2c 	.word	0x20000a2c

08000a9c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000a9c:	b508      	push	{r3, lr}
 8000a9e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <_sbrk+0x34>)
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	b142      	cbz	r2, 8000ab8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <_sbrk+0x34>)
 8000aa8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000aaa:	4403      	add	r3, r0
 8000aac:	466a      	mov	r2, sp
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d806      	bhi.n	8000ac0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <_sbrk+0x34>)
 8000ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000ab6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x34>)
 8000aba:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <_sbrk+0x38>)
 8000abc:	6011      	str	r1, [r2, #0]
 8000abe:	e7f2      	b.n	8000aa6 <_sbrk+0xa>
		errno = ENOMEM;
 8000ac0:	f007 fbc8 	bl	8008254 <__errno>
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	e7f3      	b.n	8000ab6 <_sbrk+0x1a>
 8000ace:	bf00      	nop
 8000ad0:	200001a8 	.word	0x200001a8
 8000ad4:	20001fe0 	.word	0x20001fe0

08000ad8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <SystemInit+0x10>)
 8000ada:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000ade:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_InitTick+0x40>)
 8000af2:	7818      	ldrb	r0, [r3, #0]
 8000af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_InitTick+0x44>)
 8000afe:	6810      	ldr	r0, [r2, #0]
 8000b00:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b04:	f000 f8ae 	bl	8000c64 <HAL_SYSTICK_Config>
 8000b08:	b968      	cbnz	r0, 8000b26 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	2c0f      	cmp	r4, #15
 8000b0c:	d901      	bls.n	8000b12 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
 8000b10:	e00a      	b.n	8000b28 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	2200      	movs	r2, #0
 8000b14:	4621      	mov	r1, r4
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	f000 f85d 	bl	8000bd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_InitTick+0x40>)
 8000b20:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2000      	movs	r0, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
}
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_Init>:
{
 8000b34:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x30>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b3e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b4e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f82f 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff ffc8 	bl	8000aec <HAL_InitTick>
  HAL_MspInit();
 8000b5c:	f7ff fe7a 	bl	8000854 <HAL_MspInit>
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x10>)
 8000b6a:	6811      	ldr	r1, [r2, #0]
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_IncTick+0x14>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200001b0 	.word	0x200001b0
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_GetTick+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b538      	push	{r3, r4, r5, lr}
 8000b8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff6 	bl	8000b80 <HAL_GetTick>
 8000b94:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b96:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b9a:	d002      	beq.n	8000ba2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HAL_Delay+0x24>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba2:	f7ff ffed 	bl	8000b80 <HAL_GetTick>
 8000ba6:	1b40      	subs	r0, r0, r5
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d3fa      	bcc.n	8000ba2 <HAL_Delay+0x16>
  {
  }
}
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bb6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bbc:	041b      	lsls	r3, r3, #16
 8000bbe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	0200      	lsls	r0, r0, #8
 8000bc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bd0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_NVIC_SetPriority+0x68>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be2:	f1c3 0c07 	rsb	ip, r3, #7
 8000be6:	f1bc 0f04 	cmp.w	ip, #4
 8000bea:	bf28      	it	cs
 8000bec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf0:	f103 0e04 	add.w	lr, r3, #4
 8000bf4:	f1be 0f06 	cmp.w	lr, #6
 8000bf8:	d918      	bls.n	8000c2c <HAL_NVIC_SetPriority+0x54>
 8000bfa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 3eff 	mov.w	lr, #4294967295
 8000c00:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c04:	ea21 010c 	bic.w	r1, r1, ip
 8000c08:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0a:	fa0e f303 	lsl.w	r3, lr, r3
 8000c0e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c12:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c14:	2800      	cmp	r0, #0
 8000c16:	db0b      	blt.n	8000c30 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	0109      	lsls	r1, r1, #4
 8000c1a:	b2c9      	uxtb	r1, r1
 8000c1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c24:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c28:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e7e5      	b.n	8000bfc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	f000 000f 	and.w	r0, r0, #15
 8000c34:	0109      	lsls	r1, r1, #4
 8000c36:	b2c9      	uxtb	r1, r1
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_NVIC_SetPriority+0x6c>)
 8000c3a:	5419      	strb	r1, [r3, r0]
 8000c3c:	e7f4      	b.n	8000c28 <HAL_NVIC_SetPriority+0x50>
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	e000ed14 	.word	0xe000ed14

08000c48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	db07      	blt.n	8000c5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4c:	f000 021f 	and.w	r2, r0, #31
 8000c50:	0940      	lsrs	r0, r0, #5
 8000c52:	2301      	movs	r3, #1
 8000c54:	4093      	lsls	r3, r2
 8000c56:	4a02      	ldr	r2, [pc, #8]	; (8000c60 <HAL_NVIC_EnableIRQ+0x18>)
 8000c58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	3801      	subs	r0, #1
 8000c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c6a:	d20b      	bcs.n	8000c84 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c70:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_SYSTICK_Config+0x24>)
 8000c74:	21f0      	movs	r1, #240	; 0xf0
 8000c76:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	2207      	movs	r2, #7
 8000c80:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c82:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c8c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c8e:	6805      	ldr	r5, [r0, #0]
 8000c90:	682c      	ldr	r4, [r5, #0]
 8000c92:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000c96:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000c98:	6804      	ldr	r4, [r0, #0]
 8000c9a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c9c:	6883      	ldr	r3, [r0, #8]
 8000c9e:	2b40      	cmp	r3, #64	; 0x40
 8000ca0:	d005      	beq.n	8000cae <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000ca2:	6803      	ldr	r3, [r0, #0]
 8000ca4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ca6:	6803      	ldr	r3, [r0, #0]
 8000ca8:	60da      	str	r2, [r3, #12]
  }
}
 8000caa:	bc30      	pop	{r4, r5}
 8000cac:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000cae:	6803      	ldr	r3, [r0, #0]
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000cb2:	6803      	ldr	r3, [r0, #0]
 8000cb4:	60d9      	str	r1, [r3, #12]
 8000cb6:	e7f8      	b.n	8000caa <DMA_SetConfig+0x1e>

08000cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cb8:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cba:	6803      	ldr	r3, [r0, #0]
 8000cbc:	b2d9      	uxtb	r1, r3
 8000cbe:	3910      	subs	r1, #16
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <DMA_CalcBaseAndBitshift+0x3c>)
 8000cc2:	fba2 4201 	umull	r4, r2, r2, r1
 8000cc6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <DMA_CalcBaseAndBitshift+0x40>)
 8000cca:	5ca2      	ldrb	r2, [r4, r2]
 8000ccc:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cce:	295f      	cmp	r1, #95	; 0x5f
 8000cd0:	d909      	bls.n	8000ce6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cd6:	f023 0303 	bic.w	r3, r3, #3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000cde:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ce4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cea:	f023 0303 	bic.w	r3, r3, #3
 8000cee:	6583      	str	r3, [r0, #88]	; 0x58
 8000cf0:	e7f5      	b.n	8000cde <DMA_CalcBaseAndBitshift+0x26>
 8000cf2:	bf00      	nop
 8000cf4:	aaaaaaab 	.word	0xaaaaaaab
 8000cf8:	08008520 	.word	0x08008520

08000cfc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000cfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cfe:	6982      	ldr	r2, [r0, #24]
 8000d00:	b992      	cbnz	r2, 8000d28 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d00a      	beq.n	8000d1c <DMA_CheckFifoParam+0x20>
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d002      	beq.n	8000d10 <DMA_CheckFifoParam+0x14>
 8000d0a:	b10b      	cbz	r3, 8000d10 <DMA_CheckFifoParam+0x14>
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d12:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d16:	d128      	bne.n	8000d6a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000d18:	2000      	movs	r0, #0
 8000d1a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d22:	d024      	beq.n	8000d6e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2000      	movs	r0, #0
 8000d26:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d2c:	d009      	beq.n	8000d42 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d925      	bls.n	8000d7e <DMA_CheckFifoParam+0x82>
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d125      	bne.n	8000d82 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d3c:	d123      	bne.n	8000d86 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	4770      	bx	lr
    switch (tmp)
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d803      	bhi.n	8000d4e <DMA_CheckFifoParam+0x52>
 8000d46:	e8df f003 	tbb	[pc, r3]
 8000d4a:	0414      	.short	0x0414
 8000d4c:	0a14      	.short	0x0a14
 8000d4e:	2000      	movs	r0, #0
 8000d50:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000d58:	d10d      	bne.n	8000d76 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d64:	d009      	beq.n	8000d7a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000d66:	2000      	movs	r0, #0
 8000d68:	4770      	bx	lr
        status = HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	4770      	bx	lr
        status = HAL_ERROR;
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4770      	bx	lr
      status = HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	4770      	bx	lr
        status = HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
 8000d78:	4770      	bx	lr
        status = HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	4770      	bx	lr
      status = HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4770      	bx	lr
    switch (tmp)
 8000d82:	2000      	movs	r0, #0
 8000d84:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000d86:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000d88:	4770      	bx	lr
	...

08000d8c <HAL_DMA_Init>:
{
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fef6 	bl	8000b80 <HAL_GetTick>
  if(hdma == NULL)
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	d05b      	beq.n	8000e50 <HAL_DMA_Init+0xc4>
 8000d98:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000da0:	2300      	movs	r3, #0
 8000da2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	f012 0f01 	tst.w	r2, #1
 8000db8:	d00a      	beq.n	8000dd0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dba:	f7ff fee1 	bl	8000b80 <HAL_GetTick>
 8000dbe:	1b43      	subs	r3, r0, r5
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d9f5      	bls.n	8000db0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000dd0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <HAL_DMA_Init+0xc8>)
 8000dd4:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd6:	6861      	ldr	r1, [r4, #4]
 8000dd8:	68a2      	ldr	r2, [r4, #8]
 8000dda:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ddc:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dde:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de0:	6921      	ldr	r1, [r4, #16]
 8000de2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de8:	69a1      	ldr	r1, [r4, #24]
 8000dea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dee:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df0:	6a21      	ldr	r1, [r4, #32]
 8000df2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000df8:	2904      	cmp	r1, #4
 8000dfa:	d01e      	beq.n	8000e3a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000dfc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000dfe:	6826      	ldr	r6, [r4, #0]
 8000e00:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e02:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e08:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d107      	bne.n	8000e1e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e10:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e14:	b11b      	cbz	r3, 8000e1e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff ff70 	bl	8000cfc <DMA_CheckFifoParam>
 8000e1c:	b990      	cbnz	r0, 8000e44 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000e1e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff49 	bl	8000cb8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e28:	233f      	movs	r3, #63	; 0x3f
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000e38:	e7c9      	b.n	8000dce <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e3e:	4301      	orrs	r1, r0
 8000e40:	430a      	orrs	r2, r1
 8000e42:	e7db      	b.n	8000dfc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000e4e:	e7be      	b.n	8000dce <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000e50:	2001      	movs	r0, #1
 8000e52:	e7bc      	b.n	8000dce <HAL_DMA_Init+0x42>
 8000e54:	f010803f 	.word	0xf010803f

08000e58 <HAL_DMA_Start_IT>:
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e5c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000e5e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000e62:	2801      	cmp	r0, #1
 8000e64:	d02b      	beq.n	8000ebe <HAL_DMA_Start_IT+0x66>
 8000e66:	2001      	movs	r0, #1
 8000e68:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e6c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8000e70:	b2c0      	uxtb	r0, r0
 8000e72:	2801      	cmp	r0, #1
 8000e74:	d004      	beq.n	8000e80 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8000e76:	2300      	movs	r3, #0
 8000e78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8000e7c:	2002      	movs	r0, #2
}
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e80:	2002      	movs	r0, #2
 8000e82:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e86:	2000      	movs	r0, #0
 8000e88:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff fefe 	bl	8000c8c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000e92:	233f      	movs	r3, #63	; 0x3f
 8000e94:	4093      	lsls	r3, r2
 8000e96:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e98:	6822      	ldr	r2, [r4, #0]
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	f043 0316 	orr.w	r3, r3, #22
 8000ea0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ea4:	b123      	cbz	r3, 8000eb0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eba:	2000      	movs	r0, #0
 8000ebc:	e7df      	b.n	8000e7e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	e7dd      	b.n	8000e7e <HAL_DMA_Start_IT+0x26>

08000ec2 <HAL_DMA_Abort>:
{
 8000ec2:	b570      	push	{r4, r5, r6, lr}
 8000ec4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ec6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fe5a 	bl	8000b80 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ecc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d006      	beq.n	8000ee4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8000eda:	2300      	movs	r3, #0
 8000edc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8000ee0:	2001      	movs	r0, #1
}
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	6813      	ldr	r3, [r2, #0]
 8000eea:	f023 0316 	bic.w	r3, r3, #22
 8000eee:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ef0:	6822      	ldr	r2, [r4, #0]
 8000ef2:	6953      	ldr	r3, [r2, #20]
 8000ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ef8:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000efc:	b1e3      	cbz	r3, 8000f38 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f023 0308 	bic.w	r3, r3, #8
 8000f06:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f08:	6822      	ldr	r2, [r4, #0]
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	f023 0301 	bic.w	r3, r3, #1
 8000f10:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f013 0f01 	tst.w	r3, #1
 8000f1a:	d011      	beq.n	8000f40 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1c:	f7ff fe30 	bl	8000b80 <HAL_GetTick>
 8000f20:	1b43      	subs	r3, r0, r5
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	d9f5      	bls.n	8000f12 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f26:	2320      	movs	r3, #32
 8000f28:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8000f30:	2300      	movs	r3, #0
 8000f32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8000f36:	e7d4      	b.n	8000ee2 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1df      	bne.n	8000efe <HAL_DMA_Abort+0x3c>
 8000f3e:	e7e3      	b.n	8000f08 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000f42:	233f      	movs	r3, #63	; 0x3f
 8000f44:	4093      	lsls	r3, r2
 8000f46:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8000f54:	e7c5      	b.n	8000ee2 <HAL_DMA_Abort+0x20>
	...

08000f58 <HAL_DMA_IRQHandler>:
{
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f62:	4b72      	ldr	r3, [pc, #456]	; (800112c <HAL_DMA_IRQHandler+0x1d4>)
 8000f64:	681d      	ldr	r5, [r3, #0]
 8000f66:	4b72      	ldr	r3, [pc, #456]	; (8001130 <HAL_DMA_IRQHandler+0x1d8>)
 8000f68:	fba3 3505 	umull	r3, r5, r3, r5
 8000f6c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f6e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000f70:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f72:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000f74:	2308      	movs	r3, #8
 8000f76:	4093      	lsls	r3, r2
 8000f78:	4233      	tst	r3, r6
 8000f7a:	d010      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f7c:	6803      	ldr	r3, [r0, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	f012 0f04 	tst.w	r2, #4
 8000f84:	d00b      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	f022 0204 	bic.w	r2, r2, #4
 8000f8c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f8e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000f90:	2308      	movs	r3, #8
 8000f92:	4093      	lsls	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f96:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	4233      	tst	r3, r6
 8000fa6:	d009      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	6952      	ldr	r2, [r2, #20]
 8000fac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000fb0:	d004      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fb2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fbc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	4233      	tst	r3, r6
 8000fc4:	d009      	beq.n	8000fda <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	f012 0f02 	tst.w	r2, #2
 8000fce:	d004      	beq.n	8000fda <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fd0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000fdc:	2310      	movs	r3, #16
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	4233      	tst	r3, r6
 8000fe2:	d024      	beq.n	800102e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f012 0f08 	tst.w	r2, #8
 8000fec:	d01f      	beq.n	800102e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fee:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000ff8:	d00d      	beq.n	8001016 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001000:	d104      	bne.n	800100c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001004:	b19b      	cbz	r3, 800102e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001006:	4620      	mov	r0, r4
 8001008:	4798      	blx	r3
 800100a:	e010      	b.n	800102e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800100c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800100e:	b173      	cbz	r3, 800102e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001010:	4620      	mov	r0, r4
 8001012:	4798      	blx	r3
 8001014:	e00b      	b.n	800102e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f412 7f80 	tst.w	r2, #256	; 0x100
 800101c:	d103      	bne.n	8001026 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	f022 0208 	bic.w	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001028:	b10b      	cbz	r3, 800102e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800102a:	4620      	mov	r0, r4
 800102c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800102e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001030:	2320      	movs	r3, #32
 8001032:	4093      	lsls	r3, r2
 8001034:	4233      	tst	r3, r6
 8001036:	d055      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001038:	6822      	ldr	r2, [r4, #0]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	f012 0f10 	tst.w	r2, #16
 8001040:	d050      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001042:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001044:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b05      	cmp	r3, #5
 800104c:	d00e      	beq.n	800106c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001056:	d033      	beq.n	80010c0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800105e:	d12a      	bne.n	80010b6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001060:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001062:	2b00      	cmp	r3, #0
 8001064:	d03e      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001066:	4620      	mov	r0, r4
 8001068:	4798      	blx	r3
 800106a:	e03b      	b.n	80010e4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	f023 0316 	bic.w	r3, r3, #22
 8001074:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6953      	ldr	r3, [r2, #20]
 800107a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800107e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001080:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001082:	b1a3      	cbz	r3, 80010ae <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001084:	6822      	ldr	r2, [r4, #0]
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f023 0308 	bic.w	r3, r3, #8
 800108c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800108e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001090:	233f      	movs	r3, #63	; 0x3f
 8001092:	4093      	lsls	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001096:	2301      	movs	r3, #1
 8001098:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800109c:	2300      	movs	r3, #0
 800109e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80010a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03f      	beq.n	8001128 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80010a8:	4620      	mov	r0, r4
 80010aa:	4798      	blx	r3
        return;
 80010ac:	e03c      	b.n	8001128 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e7      	bne.n	8001084 <HAL_DMA_IRQHandler+0x12c>
 80010b4:	e7eb      	b.n	800108e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80010b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010b8:	b1a3      	cbz	r3, 80010e4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80010ba:	4620      	mov	r0, r4
 80010bc:	4798      	blx	r3
 80010be:	e011      	b.n	80010e4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80010c6:	d109      	bne.n	80010dc <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	f022 0210 	bic.w	r2, r2, #16
 80010ce:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80010d6:	2300      	movs	r3, #0
 80010d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80010dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010de:	b10b      	cbz	r3, 80010e4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80010e0:	4620      	mov	r0, r4
 80010e2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010e6:	b1fb      	cbz	r3, 8001128 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010ea:	f013 0f01 	tst.w	r3, #1
 80010ee:	d017      	beq.n	8001120 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80010f0:	2305      	movs	r3, #5
 80010f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80010f6:	6822      	ldr	r2, [r4, #0]
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001100:	9b01      	ldr	r3, [sp, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	42ab      	cmp	r3, r5
 8001108:	d804      	bhi.n	8001114 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f013 0f01 	tst.w	r3, #1
 8001112:	d1f5      	bne.n	8001100 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001114:	2301      	movs	r3, #1
 8001116:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800111a:	2300      	movs	r3, #0
 800111c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001120:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001122:	b10b      	cbz	r3, 8001128 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001124:	4620      	mov	r0, r4
 8001126:	4798      	blx	r3
}
 8001128:	b003      	add	sp, #12
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	1b4e81b5 	.word	0x1b4e81b5

08001134 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001134:	2300      	movs	r3, #0
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f200 80d2 	bhi.w	80012e0 <HAL_GPIO_Init+0x1ac>
{
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	e060      	b.n	8001204 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	005e      	lsls	r6, r3, #1
 8001146:	2403      	movs	r4, #3
 8001148:	40b4      	lsls	r4, r6
 800114a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	68cc      	ldr	r4, [r1, #12]
 8001150:	40b4      	lsls	r4, r6
 8001152:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001154:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001156:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115c:	684c      	ldr	r4, [r1, #4]
 800115e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001166:	6042      	str	r2, [r0, #4]
 8001168:	e05a      	b.n	8001220 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116a:	08dc      	lsrs	r4, r3, #3
 800116c:	3408      	adds	r4, #8
 800116e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	f003 0207 	and.w	r2, r3, #7
 8001176:	0095      	lsls	r5, r2, #2
 8001178:	220f      	movs	r2, #15
 800117a:	40aa      	lsls	r2, r5
 800117c:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	690a      	ldr	r2, [r1, #16]
 8001182:	40aa      	lsls	r2, r5
 8001184:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001188:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800118c:	e05c      	b.n	8001248 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118e:	2204      	movs	r2, #4
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x60>
 8001192:	2200      	movs	r2, #0
 8001194:	fa02 f20e 	lsl.w	r2, r2, lr
 8001198:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119a:	3402      	adds	r4, #2
 800119c:	4d51      	ldr	r5, [pc, #324]	; (80012e4 <HAL_GPIO_Init+0x1b0>)
 800119e:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a2:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x1b4>)
 80011a4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	ea6f 020c 	mvn.w	r2, ip
 80011aa:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ae:	684e      	ldr	r6, [r1, #4]
 80011b0:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80011b4:	d001      	beq.n	80011ba <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80011b6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80011ba:	4c4b      	ldr	r4, [pc, #300]	; (80012e8 <HAL_GPIO_Init+0x1b4>)
 80011bc:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80011be:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	684e      	ldr	r6, [r1, #4]
 80011c6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80011ca:	d001      	beq.n	80011d0 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80011cc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80011d0:	4c45      	ldr	r4, [pc, #276]	; (80012e8 <HAL_GPIO_Init+0x1b4>)
 80011d2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011da:	684e      	ldr	r6, [r1, #4]
 80011dc:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80011e0:	d001      	beq.n	80011e6 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80011e2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80011e6:	4c40      	ldr	r4, [pc, #256]	; (80012e8 <HAL_GPIO_Init+0x1b4>)
 80011e8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80011ea:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ee:	684d      	ldr	r5, [r1, #4]
 80011f0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80011f4:	d001      	beq.n	80011fa <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 80011f6:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80011fa:	4c3b      	ldr	r4, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x1b4>)
 80011fc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	3301      	adds	r3, #1
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d86b      	bhi.n	80012dc <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001208:	680c      	ldr	r4, [r1, #0]
 800120a:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800120e:	ea32 0404 	bics.w	r4, r2, r4
 8001212:	d1f4      	bne.n	80011fe <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001214:	684c      	ldr	r4, [r1, #4]
 8001216:	f004 0403 	and.w	r4, r4, #3
 800121a:	3c01      	subs	r4, #1
 800121c:	2c01      	cmp	r4, #1
 800121e:	d990      	bls.n	8001142 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	684a      	ldr	r2, [r1, #4]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	2a03      	cmp	r2, #3
 8001228:	d009      	beq.n	800123e <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 800122a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122c:	005d      	lsls	r5, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	40aa      	lsls	r2, r5
 8001232:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001236:	688a      	ldr	r2, [r1, #8]
 8001238:	40aa      	lsls	r2, r5
 800123a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800123c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	684a      	ldr	r2, [r1, #4]
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	2a02      	cmp	r2, #2
 8001246:	d090      	beq.n	800116a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001248:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f20e 	lsl.w	r2, r2, lr
 8001254:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	684a      	ldr	r2, [r1, #4]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001262:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001264:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001266:	684a      	ldr	r2, [r1, #4]
 8001268:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 800126c:	d0c7      	beq.n	80011fe <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2200      	movs	r2, #0
 8001270:	9201      	str	r2, [sp, #4]
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_GPIO_Init+0x1b8>)
 8001274:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001276:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800127a:	6454      	str	r4, [r2, #68]	; 0x44
 800127c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800127e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001282:	9201      	str	r2, [sp, #4]
 8001284:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	089c      	lsrs	r4, r3, #2
 8001288:	1ca5      	adds	r5, r4, #2
 800128a:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <HAL_GPIO_Init+0x1b0>)
 800128c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f20e 	lsl.w	r2, r2, lr
 800129e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_GPIO_Init+0x1bc>)
 80012a4:	4290      	cmp	r0, r2
 80012a6:	f43f af74 	beq.w	8001192 <HAL_GPIO_Init+0x5e>
 80012aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ae:	4290      	cmp	r0, r2
 80012b0:	d00e      	beq.n	80012d0 <HAL_GPIO_Init+0x19c>
 80012b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b6:	4290      	cmp	r0, r2
 80012b8:	d00c      	beq.n	80012d4 <HAL_GPIO_Init+0x1a0>
 80012ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012be:	4290      	cmp	r0, r2
 80012c0:	d00a      	beq.n	80012d8 <HAL_GPIO_Init+0x1a4>
 80012c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c6:	4290      	cmp	r0, r2
 80012c8:	f43f af61 	beq.w	800118e <HAL_GPIO_Init+0x5a>
 80012cc:	2207      	movs	r2, #7
 80012ce:	e761      	b.n	8001194 <HAL_GPIO_Init+0x60>
 80012d0:	2201      	movs	r2, #1
 80012d2:	e75f      	b.n	8001194 <HAL_GPIO_Init+0x60>
 80012d4:	2202      	movs	r2, #2
 80012d6:	e75d      	b.n	8001194 <HAL_GPIO_Init+0x60>
 80012d8:	2203      	movs	r2, #3
 80012da:	e75b      	b.n	8001194 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80012dc:	b002      	add	sp, #8
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40013c00 	.word	0x40013c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f4:	6903      	ldr	r3, [r0, #16]
 80012f6:	4219      	tst	r1, r3
 80012f8:	d001      	beq.n	80012fe <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80012fa:	2001      	movs	r0, #1
 80012fc:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001300:	4770      	bx	lr

08001302 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001302:	b10a      	cbz	r2, 8001308 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001304:	6181      	str	r1, [r0, #24]
 8001306:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001308:	0409      	lsls	r1, r1, #16
 800130a:	6181      	str	r1, [r0, #24]
  }
}
 800130c:	4770      	bx	lr

0800130e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800130e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001310:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001312:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001314:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001318:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131c:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8001320:	2b02      	cmp	r3, #2
 8001322:	d000      	beq.n	8001326 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8001324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001326:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001328:	2c00      	cmp	r4, #0
 800132a:	d0fb      	beq.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>
 800132c:	232c      	movs	r3, #44	; 0x2c
 800132e:	fb03 0307 	mla	r3, r3, r7, r0
 8001332:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001334:	2900      	cmp	r1, #0
 8001336:	d0f5      	beq.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001338:	232c      	movs	r3, #44	; 0x2c
 800133a:	fb03 0307 	mla	r3, r3, r7, r0
 800133e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001340:	4422      	add	r2, r4
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	429a      	cmp	r2, r3
 8001346:	d906      	bls.n	8001356 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001348:	202c      	movs	r0, #44	; 0x2c
 800134a:	fb00 5507 	mla	r5, r0, r7, r5
 800134e:	2304      	movs	r3, #4
 8001350:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8001354:	e7e6      	b.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8001356:	4622      	mov	r2, r4
 8001358:	4630      	mov	r0, r6
 800135a:	f002 fd8e 	bl	8003e7a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800135e:	232c      	movs	r3, #44	; 0x2c
 8001360:	fb03 5307 	mla	r3, r3, r7, r5
 8001364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001366:	4422      	add	r2, r4
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800136a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800136c:	4422      	add	r2, r4
 800136e:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001370:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8001374:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 8001378:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800137c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001380:	42a3      	cmp	r3, r4
 8001382:	d1cf      	bne.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>
 8001384:	2a00      	cmp	r2, #0
 8001386:	d0cd      	beq.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001388:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800138c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001394:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001398:	232c      	movs	r3, #44	; 0x2c
 800139a:	fb03 5507 	mla	r5, r3, r7, r5
 800139e:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80013aa:	e7bb      	b.n	8001324 <HCD_RXQLVL_IRQHandler+0x16>

080013ac <HAL_HCD_HC_Init>:
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b085      	sub	sp, #20
 80013b0:	4604      	mov	r4, r0
 80013b2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80013b6:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80013ba:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 80013be:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 80013c2:	2801      	cmp	r0, #1
 80013c4:	d037      	beq.n	8001436 <HAL_HCD_HC_Init+0x8a>
 80013c6:	2001      	movs	r0, #1
 80013c8:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80013cc:	202c      	movs	r0, #44	; 0x2c
 80013ce:	fb00 4001 	mla	r0, r0, r1, r4
 80013d2:	f04f 0c00 	mov.w	ip, #0
 80013d6:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80013da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 80013de:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 80013e2:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80013e6:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013ea:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 80013ee:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 80013f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013f6:	d116      	bne.n	8001426 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013f8:	202c      	movs	r0, #44	; 0x2c
 80013fa:	fb00 4001 	mla	r0, r0, r1, r4
 80013fe:	f04f 0c00 	mov.w	ip, #0
 8001402:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8001406:	202c      	movs	r0, #44	; 0x2c
 8001408:	fb00 4001 	mla	r0, r0, r1, r4
 800140c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 8001410:	9702      	str	r7, [sp, #8]
 8001412:	9601      	str	r6, [sp, #4]
 8001414:	9500      	str	r5, [sp, #0]
 8001416:	6820      	ldr	r0, [r4, #0]
 8001418:	f002 fe79 	bl	800410e <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 800141c:	2300      	movs	r3, #0
 800141e:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 8001422:	b005      	add	sp, #20
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001426:	202c      	movs	r0, #44	; 0x2c
 8001428:	fb00 4001 	mla	r0, r0, r1, r4
 800142c:	f04f 0c01 	mov.w	ip, #1
 8001430:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 8001434:	e7e7      	b.n	8001406 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8001436:	2002      	movs	r0, #2
 8001438:	e7f3      	b.n	8001422 <HAL_HCD_HC_Init+0x76>

0800143a <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 800143a:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800143e:	2b01      	cmp	r3, #1
 8001440:	d00b      	beq.n	800145a <HAL_HCD_HC_Halt+0x20>
{
 8001442:	b510      	push	{r4, lr}
 8001444:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001446:	2301      	movs	r3, #1
 8001448:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800144c:	6800      	ldr	r0, [r0, #0]
 800144e:	f002 fef2 	bl	8004236 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001452:	2000      	movs	r0, #0
 8001454:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001458:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800145a:	2002      	movs	r0, #2
}
 800145c:	4770      	bx	lr

0800145e <HAL_HCD_Init>:
  if (hhcd == NULL)
 800145e:	2800      	cmp	r0, #0
 8001460:	d04d      	beq.n	80014fe <HAL_HCD_Init+0xa0>
{
 8001462:	b570      	push	{r4, r5, r6, lr}
 8001464:	b08a      	sub	sp, #40	; 0x28
 8001466:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8001468:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800146a:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 800146e:	2b00      	cmp	r3, #0
 8001470:	d040      	beq.n	80014f4 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001472:	2303      	movs	r3, #3
 8001474:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001478:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800147a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800147e:	d101      	bne.n	8001484 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	f002 fcac 	bl	8003de2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800148a:	46a4      	mov	ip, r4
 800148c:	f85c 6b10 	ldr.w	r6, [ip], #16
 8001490:	46ee      	mov	lr, sp
 8001492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001496:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800149a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800149e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80014a2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80014a6:	e88e 0003 	stmia.w	lr, {r0, r1}
 80014aa:	1d25      	adds	r5, r4, #4
 80014ac:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014b0:	4630      	mov	r0, r6
 80014b2:	f002 fc4b 	bl	8003d4c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014b6:	2101      	movs	r1, #1
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	f002 fd10 	bl	8003ede <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014be:	46a4      	mov	ip, r4
 80014c0:	f85c 6b10 	ldr.w	r6, [ip], #16
 80014c4:	46ee      	mov	lr, sp
 80014c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80014ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80014ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80014d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80014d6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80014da:	e88e 0003 	stmia.w	lr, {r0, r1}
 80014de:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80014e2:	4630      	mov	r0, r6
 80014e4:	f002 fd2c 	bl	8003f40 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 80014ee:	2000      	movs	r0, #0
}
 80014f0:	b00a      	add	sp, #40	; 0x28
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80014f4:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 80014f8:	f006 f9f6 	bl	80078e8 <HAL_HCD_MspInit>
 80014fc:	e7b9      	b.n	8001472 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 80014fe:	2001      	movs	r0, #1
}
 8001500:	4770      	bx	lr

08001502 <HAL_HCD_HC_SubmitRequest>:
{
 8001502:	b570      	push	{r4, r5, r6, lr}
 8001504:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8001508:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 800150c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8001510:	fb0c 0c01 	mla	ip, ip, r1, r0
 8001514:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001518:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 800151c:	b97d      	cbnz	r5, 800153e <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800151e:	4664      	mov	r4, ip
 8001520:	f04f 0c03 	mov.w	ip, #3
 8001524:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8001528:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800152c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 8001530:	2b03      	cmp	r3, #3
 8001532:	f200 8081 	bhi.w	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
 8001536:	e8df f003 	tbb	[pc, r3]
 800153a:	790a      	.short	0x790a
 800153c:	5129      	.short	0x5129
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800153e:	242c      	movs	r4, #44	; 0x2c
 8001540:	fb04 0401 	mla	r4, r4, r1, r0
 8001544:	f04f 0c02 	mov.w	ip, #2
 8001548:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 800154c:	e7f0      	b.n	8001530 <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 800154e:	2d01      	cmp	r5, #1
 8001550:	d172      	bne.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d170      	bne.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8001556:	b92e      	cbnz	r6, 8001564 <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001558:	232c      	movs	r3, #44	; 0x2c
 800155a:	fb03 0301 	mla	r3, r3, r1, r0
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001564:	232c      	movs	r3, #44	; 0x2c
 8001566:	fb03 0301 	mla	r3, r3, r1, r0
 800156a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800156e:	b933      	cbnz	r3, 800157e <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001570:	232c      	movs	r3, #44	; 0x2c
 8001572:	fb03 0301 	mla	r3, r3, r1, r0
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800157c:	e05c      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800157e:	232c      	movs	r3, #44	; 0x2c
 8001580:	fb03 0301 	mla	r3, r3, r1, r0
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800158a:	e055      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 800158c:	b992      	cbnz	r2, 80015b4 <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800158e:	232c      	movs	r3, #44	; 0x2c
 8001590:	fb03 0301 	mla	r3, r3, r1, r0
 8001594:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001598:	b92b      	cbnz	r3, 80015a6 <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800159a:	232c      	movs	r3, #44	; 0x2c
 800159c:	fb03 0301 	mla	r3, r3, r1, r0
 80015a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015a4:	e048      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015a6:	232c      	movs	r3, #44	; 0x2c
 80015a8:	fb03 0301 	mla	r3, r3, r1, r0
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b2:	e041      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015b4:	232c      	movs	r3, #44	; 0x2c
 80015b6:	fb03 0301 	mla	r3, r3, r1, r0
 80015ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015be:	b933      	cbnz	r3, 80015ce <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c0:	232c      	movs	r3, #44	; 0x2c
 80015c2:	fb03 0301 	mla	r3, r3, r1, r0
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015cc:	e034      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015ce:	232c      	movs	r3, #44	; 0x2c
 80015d0:	fb03 0301 	mla	r3, r3, r1, r0
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015da:	e02d      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 80015dc:	b992      	cbnz	r2, 8001604 <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015de:	232c      	movs	r3, #44	; 0x2c
 80015e0:	fb03 0301 	mla	r3, r3, r1, r0
 80015e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80015e8:	b92b      	cbnz	r3, 80015f6 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015ea:	232c      	movs	r3, #44	; 0x2c
 80015ec:	fb03 0301 	mla	r3, r3, r1, r0
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015f4:	e020      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015f6:	232c      	movs	r3, #44	; 0x2c
 80015f8:	fb03 0301 	mla	r3, r3, r1, r0
 80015fc:	2202      	movs	r2, #2
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001602:	e019      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001604:	232c      	movs	r3, #44	; 0x2c
 8001606:	fb03 0301 	mla	r3, r3, r1, r0
 800160a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800160e:	b933      	cbnz	r3, 800161e <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001610:	232c      	movs	r3, #44	; 0x2c
 8001612:	fb03 0301 	mla	r3, r3, r1, r0
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800161c:	e00c      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800161e:	232c      	movs	r3, #44	; 0x2c
 8001620:	fb03 0301 	mla	r3, r3, r1, r0
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800162a:	e005      	b.n	8001638 <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800162c:	232c      	movs	r3, #44	; 0x2c
 800162e:	fb03 0301 	mla	r3, r3, r1, r0
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001638:	232c      	movs	r3, #44	; 0x2c
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	18c2      	adds	r2, r0, r3
 8001640:	9c05      	ldr	r4, [sp, #20]
 8001642:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001644:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001646:	2400      	movs	r4, #0
 8001648:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800164c:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 800164e:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8001652:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001656:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800165a:	7c02      	ldrb	r2, [r0, #16]
 800165c:	4401      	add	r1, r0
 800165e:	6800      	ldr	r0, [r0, #0]
 8001660:	f002 fe6e 	bl	8004340 <USB_HC_StartXfer>
}
 8001664:	bd70      	pop	{r4, r5, r6, pc}

08001666 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001666:	b530      	push	{r4, r5, lr}
 8001668:	b083      	sub	sp, #12
 800166a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800166c:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800166e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001672:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8001674:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001678:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001680:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	f013 0f02 	tst.w	r3, #2
 8001688:	d007      	beq.n	800169a <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	f013 0f01 	tst.w	r3, #1
 8001690:	d125      	bne.n	80016de <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001692:	9b00      	ldr	r3, [sp, #0]
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	f013 0f08 	tst.w	r3, #8
 80016a0:	d010      	beq.n	80016c4 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80016a2:	9b00      	ldr	r3, [sp, #0]
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80016aa:	9b01      	ldr	r3, [sp, #4]
 80016ac:	f013 0f04 	tst.w	r3, #4
 80016b0:	d02d      	beq.n	800170e <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80016b2:	69a3      	ldr	r3, [r4, #24]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d015      	beq.n	80016e4 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80016b8:	68e3      	ldr	r3, [r4, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d022      	beq.n	8001704 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80016be:	4620      	mov	r0, r4
 80016c0:	f006 f971 	bl	80079a6 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80016c4:	9b01      	ldr	r3, [sp, #4]
 80016c6:	f013 0f20 	tst.w	r3, #32
 80016ca:	d003      	beq.n	80016d4 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80016cc:	9b00      	ldr	r3, [sp, #0]
 80016ce:	f043 0320 	orr.w	r3, r3, #32
 80016d2:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80016d4:	9b00      	ldr	r3, [sp, #0]
 80016d6:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 80016da:	b003      	add	sp, #12
 80016dc:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 80016de:	f006 f955 	bl	800798c <HAL_HCD_Connect_Callback>
 80016e2:	e7d6      	b.n	8001692 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80016e4:	9b01      	ldr	r3, [sp, #4]
 80016e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80016ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016ee:	d004      	beq.n	80016fa <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016f0:	2101      	movs	r1, #1
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	f002 fc9a 	bl	800402c <USB_InitFSLSPClkSel>
 80016f8:	e7e1      	b.n	80016be <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80016fa:	2102      	movs	r1, #2
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	f002 fc95 	bl	800402c <USB_InitFSLSPClkSel>
 8001702:	e7dc      	b.n	80016be <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8001704:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001708:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800170c:	e7d7      	b.n	80016be <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800170e:	4620      	mov	r0, r4
 8001710:	f006 f94f 	bl	80079b2 <HAL_HCD_PortDisabled_Callback>
 8001714:	e7d6      	b.n	80016c4 <HCD_Port_IRQHandler+0x5e>

08001716 <HCD_HC_IN_IRQHandler>:
{
 8001716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001718:	4605      	mov	r5, r0
 800171a:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800171c:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800171e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8001722:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8001726:	68a3      	ldr	r3, [r4, #8]
 8001728:	f013 0f04 	tst.w	r3, #4
 800172c:	d040      	beq.n	80017b0 <HCD_HC_IN_IRQHandler+0x9a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800172e:	2304      	movs	r3, #4
 8001730:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001732:	68e3      	ldr	r3, [r4, #12]
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800173a:	68a3      	ldr	r3, [r4, #8]
 800173c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001740:	f040 8093 	bne.w	800186a <HCD_HC_IN_IRQHandler+0x154>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001744:	68a3      	ldr	r3, [r4, #8]
 8001746:	f013 0f01 	tst.w	r3, #1
 800174a:	f000 80d7 	beq.w	80018fc <HCD_HC_IN_IRQHandler+0x1e6>
    if (hhcd->Init.dma_enable != 0U)
 800174e:	692b      	ldr	r3, [r5, #16]
 8001750:	b143      	cbz	r3, 8001764 <HCD_HC_IN_IRQHandler+0x4e>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001752:	232c      	movs	r3, #44	; 0x2c
 8001754:	fb03 5306 	mla	r3, r3, r6, r5
 8001758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800175a:	6921      	ldr	r1, [r4, #16]
 800175c:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001760:	1a52      	subs	r2, r2, r1
 8001762:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8001764:	232c      	movs	r3, #44	; 0x2c
 8001766:	fb03 5306 	mla	r3, r3, r6, r5
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001770:	2100      	movs	r1, #0
 8001772:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001774:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001776:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8081 	beq.w	8001882 <HCD_HC_IN_IRQHandler+0x16c>
 8001780:	2b02      	cmp	r3, #2
 8001782:	d07e      	beq.n	8001882 <HCD_HC_IN_IRQHandler+0x16c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001784:	2b03      	cmp	r3, #3
 8001786:	f000 8093 	beq.w	80018b0 <HCD_HC_IN_IRQHandler+0x19a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 8083 	bne.w	8001896 <HCD_HC_IN_IRQHandler+0x180>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001790:	232c      	movs	r3, #44	; 0x2c
 8001792:	fb03 5306 	mla	r3, r3, r6, r5
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800179c:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 80017a0:	4051      	eors	r1, r2
 80017a2:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80017a6:	4631      	mov	r1, r6
 80017a8:	4628      	mov	r0, r5
 80017aa:	f006 f8fb 	bl	80079a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80017ae:	e072      	b.n	8001896 <HCD_HC_IN_IRQHandler+0x180>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80017b0:	68a3      	ldr	r3, [r4, #8]
 80017b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80017b6:	d106      	bne.n	80017c6 <HCD_HC_IN_IRQHandler+0xb0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017b8:	68a3      	ldr	r3, [r4, #8]
 80017ba:	f013 0f20 	tst.w	r3, #32
 80017be:	d013      	beq.n	80017e8 <HCD_HC_IN_IRQHandler+0xd2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80017c0:	2320      	movs	r3, #32
 80017c2:	60a3      	str	r3, [r4, #8]
 80017c4:	e7b9      	b.n	800173a <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80017c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ca:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80017cc:	232c      	movs	r3, #44	; 0x2c
 80017ce:	fb03 0301 	mla	r3, r3, r1, r0
 80017d2:	2207      	movs	r2, #7
 80017d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017d8:	68e3      	ldr	r3, [r4, #12]
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	f002 fd28 	bl	8004236 <USB_HC_Halt>
 80017e6:	e7a8      	b.n	800173a <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80017e8:	68a3      	ldr	r3, [r4, #8]
 80017ea:	f013 0f08 	tst.w	r3, #8
 80017ee:	d117      	bne.n	8001820 <HCD_HC_IN_IRQHandler+0x10a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80017f0:	68a3      	ldr	r3, [r4, #8]
 80017f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80017f6:	d125      	bne.n	8001844 <HCD_HC_IN_IRQHandler+0x12e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80017f8:	68a3      	ldr	r3, [r4, #8]
 80017fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017fe:	d09c      	beq.n	800173a <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001800:	68e3      	ldr	r3, [r4, #12]
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001808:	232c      	movs	r3, #44	; 0x2c
 800180a:	fb03 0301 	mla	r3, r3, r1, r0
 800180e:	2206      	movs	r2, #6
 8001810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001814:	6800      	ldr	r0, [r0, #0]
 8001816:	f002 fd0e 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	60a3      	str	r3, [r4, #8]
 800181e:	e78c      	b.n	800173a <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001820:	68e3      	ldr	r3, [r4, #12]
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001828:	232c      	movs	r3, #44	; 0x2c
 800182a:	fb03 0301 	mla	r3, r3, r1, r0
 800182e:	2205      	movs	r2, #5
 8001830:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001834:	2310      	movs	r3, #16
 8001836:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001838:	2308      	movs	r3, #8
 800183a:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f002 fcfa 	bl	8004236 <USB_HC_Halt>
 8001842:	e77a      	b.n	800173a <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001844:	68e3      	ldr	r3, [r4, #12]
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800184c:	232c      	movs	r3, #44	; 0x2c
 800184e:	fb03 0301 	mla	r3, r3, r1, r0
 8001852:	2208      	movs	r2, #8
 8001854:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001858:	2310      	movs	r3, #16
 800185a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800185c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001860:	60a3      	str	r3, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001862:	6800      	ldr	r0, [r0, #0]
 8001864:	f002 fce7 	bl	8004236 <USB_HC_Halt>
 8001868:	e767      	b.n	800173a <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800186a:	68e3      	ldr	r3, [r4, #12]
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001872:	4631      	mov	r1, r6
 8001874:	6828      	ldr	r0, [r5, #0]
 8001876:	f002 fcde 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800187a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187e:	60a3      	str	r3, [r4, #8]
}
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001882:	68e3      	ldr	r3, [r4, #12]
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800188a:	4631      	mov	r1, r6
 800188c:	6828      	ldr	r0, [r5, #0]
 800188e:	f002 fcd2 	bl	8004236 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001892:	2310      	movs	r3, #16
 8001894:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001896:	692b      	ldr	r3, [r5, #16]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d01a      	beq.n	80018d2 <HCD_HC_IN_IRQHandler+0x1bc>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 5506 	mla	r5, r1, r6, r5
 80018a2:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80018ae:	e7e7      	b.n	8001880 <HCD_HC_IN_IRQHandler+0x16a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80018b0:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80018b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018b8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80018bc:	232c      	movs	r3, #44	; 0x2c
 80018be:	fb03 5306 	mla	r3, r3, r6, r5
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80018c8:	4631      	mov	r1, r6
 80018ca:	4628      	mov	r0, r5
 80018cc:	f006 f86a 	bl	80079a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80018d0:	e7e1      	b.n	8001896 <HCD_HC_IN_IRQHandler+0x180>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80018d2:	232c      	movs	r3, #44	; 0x2c
 80018d4:	fb03 5306 	mla	r3, r3, r6, r5
 80018d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	f013 0f01 	tst.w	r3, #1
 80018e6:	d0cb      	beq.n	8001880 <HCD_HC_IN_IRQHandler+0x16a>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80018e8:	232c      	movs	r3, #44	; 0x2c
 80018ea:	fb03 5506 	mla	r5, r3, r6, r5
 80018ee:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80018fa:	e7c1      	b.n	8001880 <HCD_HC_IN_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80018fc:	68a3      	ldr	r3, [r4, #8]
 80018fe:	f013 0f02 	tst.w	r3, #2
 8001902:	d064      	beq.n	80019ce <HCD_HC_IN_IRQHandler+0x2b8>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001904:	68e3      	ldr	r3, [r4, #12]
 8001906:	f023 0302 	bic.w	r3, r3, #2
 800190a:	60e3      	str	r3, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800190c:	232c      	movs	r3, #44	; 0x2c
 800190e:	fb03 5306 	mla	r3, r3, r6, r5
 8001912:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001916:	2b01      	cmp	r3, #1
 8001918:	d013      	beq.n	8001942 <HCD_HC_IN_IRQHandler+0x22c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800191a:	2b05      	cmp	r3, #5
 800191c:	d023      	beq.n	8001966 <HCD_HC_IN_IRQHandler+0x250>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800191e:	2b06      	cmp	r3, #6
 8001920:	d028      	beq.n	8001974 <HCD_HC_IN_IRQHandler+0x25e>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d026      	beq.n	8001974 <HCD_HC_IN_IRQHandler+0x25e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001926:	2b03      	cmp	r3, #3
 8001928:	d042      	beq.n	80019b0 <HCD_HC_IN_IRQHandler+0x29a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800192a:	2b07      	cmp	r3, #7
 800192c:	d10f      	bne.n	800194e <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 800192e:	232c      	movs	r3, #44	; 0x2c
 8001930:	fb03 5306 	mla	r3, r3, r6, r5
 8001934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001936:	3201      	adds	r2, #1
 8001938:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800193a:	2204      	movs	r2, #4
 800193c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001940:	e005      	b.n	800194e <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001942:	232c      	movs	r3, #44	; 0x2c
 8001944:	fb03 5306 	mla	r3, r3, r6, r5
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800194e:	2302      	movs	r3, #2
 8001950:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001952:	232c      	movs	r3, #44	; 0x2c
 8001954:	fb03 5306 	mla	r3, r3, r6, r5
 8001958:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800195c:	4631      	mov	r1, r6
 800195e:	4628      	mov	r0, r5
 8001960:	f006 f820 	bl	80079a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001964:	e78c      	b.n	8001880 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001966:	232c      	movs	r3, #44	; 0x2c
 8001968:	fb03 5306 	mla	r3, r3, r6, r5
 800196c:	2205      	movs	r2, #5
 800196e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001972:	e7ec      	b.n	800194e <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].ErrCnt++;
 8001974:	222c      	movs	r2, #44	; 0x2c
 8001976:	fb02 5206 	mla	r2, r2, r6, r5
 800197a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800197c:	3301      	adds	r3, #1
 800197e:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001980:	2b02      	cmp	r3, #2
 8001982:	d906      	bls.n	8001992 <HCD_HC_IN_IRQHandler+0x27c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001984:	4613      	mov	r3, r2
 8001986:	2200      	movs	r2, #0
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800198a:	2204      	movs	r2, #4
 800198c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001990:	e7dd      	b.n	800194e <HCD_HC_IN_IRQHandler+0x238>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001992:	232c      	movs	r3, #44	; 0x2c
 8001994:	fb03 5306 	mla	r3, r3, r6, r5
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800199e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019aa:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80019ae:	e7ce      	b.n	800194e <HCD_HC_IN_IRQHandler+0x238>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80019b0:	232c      	movs	r3, #44	; 0x2c
 80019b2:	fb03 5306 	mla	r3, r3, r6, r5
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019bc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019c8:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 80019cc:	e7bf      	b.n	800194e <HCD_HC_IN_IRQHandler+0x238>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019ce:	68a3      	ldr	r3, [r4, #8]
 80019d0:	f013 0f10 	tst.w	r3, #16
 80019d4:	f43f af54 	beq.w	8001880 <HCD_HC_IN_IRQHandler+0x16a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019d8:	232c      	movs	r3, #44	; 0x2c
 80019da:	fb03 5306 	mla	r3, r3, r6, r5
 80019de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d00c      	beq.n	8001a00 <HCD_HC_IN_IRQHandler+0x2ea>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019e6:	b10b      	cbz	r3, 80019ec <HCD_HC_IN_IRQHandler+0x2d6>
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d106      	bne.n	80019fa <HCD_HC_IN_IRQHandler+0x2e4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019ec:	232c      	movs	r3, #44	; 0x2c
 80019ee:	fb03 5306 	mla	r3, r3, r6, r5
 80019f2:	2200      	movs	r2, #0
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80019f6:	692b      	ldr	r3, [r5, #16]
 80019f8:	b183      	cbz	r3, 8001a1c <HCD_HC_IN_IRQHandler+0x306>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019fa:	2310      	movs	r3, #16
 80019fc:	60a3      	str	r3, [r4, #8]
}
 80019fe:	e73f      	b.n	8001880 <HCD_HC_IN_IRQHandler+0x16a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a00:	232c      	movs	r3, #44	; 0x2c
 8001a02:	fb03 5306 	mla	r3, r3, r6, r5
 8001a06:	2200      	movs	r2, #0
 8001a08:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a0a:	68e3      	ldr	r3, [r4, #12]
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a12:	4631      	mov	r1, r6
 8001a14:	6828      	ldr	r0, [r5, #0]
 8001a16:	f002 fc0e 	bl	8004236 <USB_HC_Halt>
 8001a1a:	e7ee      	b.n	80019fa <HCD_HC_IN_IRQHandler+0x2e4>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a1c:	232c      	movs	r3, #44	; 0x2c
 8001a1e:	fb03 5306 	mla	r3, r3, r6, r5
 8001a22:	2203      	movs	r2, #3
 8001a24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a28:	68e3      	ldr	r3, [r4, #12]
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a30:	4631      	mov	r1, r6
 8001a32:	6828      	ldr	r0, [r5, #0]
 8001a34:	f002 fbff 	bl	8004236 <USB_HC_Halt>
 8001a38:	e7df      	b.n	80019fa <HCD_HC_IN_IRQHandler+0x2e4>

08001a3a <HCD_HC_OUT_IRQHandler>:
{
 8001a3a:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a3c:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a3e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001a42:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 8001a46:	68a2      	ldr	r2, [r4, #8]
 8001a48:	f012 0f04 	tst.w	r2, #4
 8001a4c:	d006      	beq.n	8001a5c <HCD_HC_OUT_IRQHandler+0x22>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a4e:	2304      	movs	r3, #4
 8001a50:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a52:	68e3      	ldr	r3, [r4, #12]
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	60e3      	str	r3, [r4, #12]
}
 8001a5a:	bd70      	pop	{r4, r5, r6, pc}
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	460e      	mov	r6, r1
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a60:	68a2      	ldr	r2, [r4, #8]
 8001a62:	f012 0f20 	tst.w	r2, #32
 8001a66:	d018      	beq.n	8001a9a <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a68:	2320      	movs	r3, #32
 8001a6a:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001a6c:	232c      	movs	r3, #44	; 0x2c
 8001a6e:	fb03 0301 	mla	r3, r3, r1, r0
 8001a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d1ef      	bne.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].do_ping = 0U;
 8001a7a:	232c      	movs	r3, #44	; 0x2c
 8001a7c:	fb03 0301 	mla	r3, r3, r1, r0
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a8c:	68e3      	ldr	r3, [r4, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a92:	6800      	ldr	r0, [r0, #0]
 8001a94:	f002 fbcf 	bl	8004236 <USB_HC_Halt>
 8001a98:	e7df      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a9a:	68a2      	ldr	r2, [r4, #8]
 8001a9c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001aa0:	d124      	bne.n	8001aec <HCD_HC_OUT_IRQHandler+0xb2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001aa2:	68a2      	ldr	r2, [r4, #8]
 8001aa4:	f012 0f01 	tst.w	r2, #1
 8001aa8:	d02b      	beq.n	8001b02 <HCD_HC_OUT_IRQHandler+0xc8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001aaa:	232c      	movs	r3, #44	; 0x2c
 8001aac:	fb03 0301 	mla	r3, r3, r1, r0
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ab4:	68a3      	ldr	r3, [r4, #8]
 8001ab6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001aba:	d007      	beq.n	8001acc <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8001abc:	232c      	movs	r3, #44	; 0x2c
 8001abe:	fb03 0301 	mla	r3, r3, r1, r0
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001acc:	68e3      	ldr	r3, [r4, #12]
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	6828      	ldr	r0, [r5, #0]
 8001ad8:	f002 fbad 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001adc:	2301      	movs	r3, #1
 8001ade:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 5506 	mla	r5, r1, r6, r5
 8001ae6:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8001aea:	e7b6      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aec:	68e3      	ldr	r3, [r4, #12]
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af4:	6800      	ldr	r0, [r0, #0]
 8001af6:	f002 fb9e 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afe:	60a3      	str	r3, [r4, #8]
 8001b00:	e7ab      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001b02:	68a2      	ldr	r2, [r4, #8]
 8001b04:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b08:	d129      	bne.n	8001b5e <HCD_HC_OUT_IRQHandler+0x124>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b0a:	68a2      	ldr	r2, [r4, #8]
 8001b0c:	f012 0f08 	tst.w	r2, #8
 8001b10:	d13a      	bne.n	8001b88 <HCD_HC_OUT_IRQHandler+0x14e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001b12:	68a2      	ldr	r2, [r4, #8]
 8001b14:	f012 0f10 	tst.w	r2, #16
 8001b18:	d046      	beq.n	8001ba8 <HCD_HC_OUT_IRQHandler+0x16e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b1a:	232c      	movs	r3, #44	; 0x2c
 8001b1c:	fb03 0301 	mla	r3, r3, r1, r0
 8001b20:	2200      	movs	r2, #0
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2e:	b95b      	cbnz	r3, 8001b48 <HCD_HC_OUT_IRQHandler+0x10e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001b30:	232c      	movs	r3, #44	; 0x2c
 8001b32:	fb03 0301 	mla	r3, r3, r1, r0
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3a:	b92b      	cbnz	r3, 8001b48 <HCD_HC_OUT_IRQHandler+0x10e>
        hhcd->hc[ch_num].do_ping = 1U;
 8001b3c:	232c      	movs	r3, #44	; 0x2c
 8001b3e:	fb03 0301 	mla	r3, r3, r1, r0
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b48:	68e3      	ldr	r3, [r4, #12]
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b50:	4631      	mov	r1, r6
 8001b52:	6828      	ldr	r0, [r5, #0]
 8001b54:	f002 fb6f 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b58:	2310      	movs	r3, #16
 8001b5a:	60a3      	str	r3, [r4, #8]
 8001b5c:	e77d      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
    hhcd->hc[ch_num].state = HC_NYET;
 8001b5e:	232c      	movs	r3, #44	; 0x2c
 8001b60:	fb03 0301 	mla	r3, r3, r1, r0
 8001b64:	2204      	movs	r2, #4
 8001b66:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b70:	2200      	movs	r2, #0
 8001b72:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b74:	68e3      	ldr	r3, [r4, #12]
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b7c:	6800      	ldr	r0, [r0, #0]
 8001b7e:	f002 fb5a 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001b82:	2340      	movs	r3, #64	; 0x40
 8001b84:	60a3      	str	r3, [r4, #8]
 8001b86:	e768      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b88:	2308      	movs	r3, #8
 8001b8a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b8c:	68e3      	ldr	r3, [r4, #12]
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b94:	6800      	ldr	r0, [r0, #0]
 8001b96:	f002 fb4e 	bl	8004236 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001b9a:	232c      	movs	r3, #44	; 0x2c
 8001b9c:	fb03 5506 	mla	r5, r3, r6, r5
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8001ba6:	e758      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ba8:	68a2      	ldr	r2, [r4, #8]
 8001baa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001bae:	d029      	beq.n	8001c04 <HCD_HC_OUT_IRQHandler+0x1ca>
    if (hhcd->Init.dma_enable == 0U)
 8001bb0:	6903      	ldr	r3, [r0, #16]
 8001bb2:	b183      	cbz	r3, 8001bd6 <HCD_HC_OUT_IRQHandler+0x19c>
      hhcd->hc[ch_num].ErrCnt++;
 8001bb4:	222c      	movs	r2, #44	; 0x2c
 8001bb6:	fb02 0201 	mla	r2, r2, r1, r0
 8001bba:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d816      	bhi.n	8001bf2 <HCD_HC_OUT_IRQHandler+0x1b8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bc4:	232c      	movs	r3, #44	; 0x2c
 8001bc6:	fb03 0501 	mla	r5, r3, r1, r0
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	60a3      	str	r3, [r4, #8]
 8001bd4:	e741      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001bd6:	232c      	movs	r3, #44	; 0x2c
 8001bd8:	fb03 0301 	mla	r3, r3, r1, r0
 8001bdc:	2206      	movs	r2, #6
 8001bde:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be2:	68e3      	ldr	r3, [r4, #12]
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	f002 fb23 	bl	8004236 <USB_HC_Halt>
 8001bf0:	e7ee      	b.n	8001bd0 <HCD_HC_OUT_IRQHandler+0x196>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8001bfe:	f005 fed1 	bl	80079a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c02:	e7e5      	b.n	8001bd0 <HCD_HC_OUT_IRQHandler+0x196>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c04:	68a2      	ldr	r2, [r4, #8]
 8001c06:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001c0a:	d127      	bne.n	8001c5c <HCD_HC_OUT_IRQHandler+0x222>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c0c:	68a2      	ldr	r2, [r4, #8]
 8001c0e:	f012 0f02 	tst.w	r2, #2
 8001c12:	f43f af22 	beq.w	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c16:	68e2      	ldr	r2, [r4, #12]
 8001c18:	f022 0202 	bic.w	r2, r2, #2
 8001c1c:	60e2      	str	r2, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c1e:	222c      	movs	r2, #44	; 0x2c
 8001c20:	fb02 0201 	mla	r2, r2, r1, r0
 8001c24:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8001c28:	2a01      	cmp	r2, #1
 8001c2a:	d02a      	beq.n	8001c82 <HCD_HC_OUT_IRQHandler+0x248>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c2c:	2a03      	cmp	r2, #3
 8001c2e:	d05b      	beq.n	8001ce8 <HCD_HC_OUT_IRQHandler+0x2ae>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001c30:	2a04      	cmp	r2, #4
 8001c32:	d06b      	beq.n	8001d0c <HCD_HC_OUT_IRQHandler+0x2d2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c34:	2a05      	cmp	r2, #5
 8001c36:	d070      	beq.n	8001d1a <HCD_HC_OUT_IRQHandler+0x2e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c38:	2a06      	cmp	r2, #6
 8001c3a:	d001      	beq.n	8001c40 <HCD_HC_OUT_IRQHandler+0x206>
 8001c3c:	2a08      	cmp	r2, #8
 8001c3e:	d159      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].ErrCnt++;
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 5106 	mla	r1, r1, r6, r5
 8001c46:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8001c48:	3201      	adds	r2, #1
 8001c4a:	65ca      	str	r2, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c4c:	2a02      	cmp	r2, #2
 8001c4e:	d96a      	bls.n	8001d26 <HCD_HC_OUT_IRQHandler+0x2ec>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c50:	2200      	movs	r2, #0
 8001c52:	65ca      	str	r2, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c54:	2204      	movs	r2, #4
 8001c56:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
 8001c5a:	e04b      	b.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5c:	68e3      	ldr	r3, [r4, #12]
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c64:	6800      	ldr	r0, [r0, #0]
 8001c66:	f002 fae6 	bl	8004236 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c74:	232c      	movs	r3, #44	; 0x2c
 8001c76:	fb03 5506 	mla	r5, r3, r6, r5
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
 8001c80:	e6eb      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001c82:	232c      	movs	r3, #44	; 0x2c
 8001c84:	fb03 0301 	mla	r3, r3, r1, r0
 8001c88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c90:	3b02      	subs	r3, #2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d82d      	bhi.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
        if (hhcd->Init.dma_enable == 0U)
 8001c98:	6901      	ldr	r1, [r0, #16]
 8001c9a:	b941      	cbnz	r1, 8001cae <HCD_HC_OUT_IRQHandler+0x274>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c9c:	232c      	movs	r3, #44	; 0x2c
 8001c9e:	fb03 0306 	mla	r3, r3, r6, r0
 8001ca2:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001ca6:	f082 0201 	eor.w	r2, r2, #1
 8001caa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001cae:	2901      	cmp	r1, #1
 8001cb0:	d120      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
 8001cb2:	232c      	movs	r3, #44	; 0x2c
 8001cb4:	fb03 5306 	mla	r3, r3, r6, r5
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	b1db      	cbz	r3, 8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001cbc:	222c      	movs	r2, #44	; 0x2c
 8001cbe:	fb02 5206 	mla	r2, r2, r6, r5
 8001cc2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8001cce:	f013 0f01 	tst.w	r3, #1
 8001cd2:	d00f      	beq.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001cd4:	232c      	movs	r3, #44	; 0x2c
 8001cd6:	fb03 5306 	mla	r3, r3, r6, r5
 8001cda:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001cde:	f082 0201 	eor.w	r2, r2, #1
 8001ce2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001ce6:	e005      	b.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ce8:	232c      	movs	r3, #44	; 0x2c
 8001cea:	fb03 0301 	mla	r3, r3, r1, r0
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cf8:	232c      	movs	r3, #44	; 0x2c
 8001cfa:	fb03 5306 	mla	r3, r3, r6, r5
 8001cfe:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001d02:	4631      	mov	r1, r6
 8001d04:	4628      	mov	r0, r5
 8001d06:	f005 fe4d 	bl	80079a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001d0a:	e6a6      	b.n	8001a5a <HCD_HC_OUT_IRQHandler+0x20>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d0c:	232c      	movs	r3, #44	; 0x2c
 8001d0e:	fb03 0301 	mla	r3, r3, r1, r0
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001d18:	e7ec      	b.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d1a:	232c      	movs	r3, #44	; 0x2c
 8001d1c:	fb03 0301 	mla	r3, r3, r1, r0
 8001d20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001d24:	e7e6      	b.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d26:	222c      	movs	r2, #44	; 0x2c
 8001d28:	fb02 5206 	mla	r2, r2, r6, r5
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d32:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d36:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001d42:	e7d7      	b.n	8001cf4 <HCD_HC_OUT_IRQHandler+0x2ba>

08001d44 <HAL_HCD_IRQHandler>:
{
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d48:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f002 f8c3 	bl	8003ed6 <USB_GetMode>
 8001d50:	2801      	cmp	r0, #1
 8001d52:	d000      	beq.n	8001d56 <HAL_HCD_IRQHandler+0x12>
}
 8001d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	f002 f8b9 	bl	8003ece <USB_ReadInterrupts>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d0f9      	beq.n	8001d54 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d60:	6820      	ldr	r0, [r4, #0]
 8001d62:	f002 f8b4 	bl	8003ece <USB_ReadInterrupts>
 8001d66:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001d6a:	d003      	beq.n	8001d74 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d72:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d74:	6820      	ldr	r0, [r4, #0]
 8001d76:	f002 f8aa 	bl	8003ece <USB_ReadInterrupts>
 8001d7a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001d7e:	d003      	beq.n	8001d88 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d86:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d88:	6820      	ldr	r0, [r4, #0]
 8001d8a:	f002 f8a0 	bl	8003ece <USB_ReadInterrupts>
 8001d8e:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001d92:	d003      	beq.n	8001d9c <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d9a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	f002 f896 	bl	8003ece <USB_ReadInterrupts>
 8001da2:	f010 0f02 	tst.w	r0, #2
 8001da6:	d002      	beq.n	8001dae <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	f002 f88d 	bl	8003ece <USB_ReadInterrupts>
 8001db4:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8001db8:	d008      	beq.n	8001dcc <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001dc0:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001dc2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001dc6:	f013 0f01 	tst.w	r3, #1
 8001dca:	d01d      	beq.n	8001e08 <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dcc:	6820      	ldr	r0, [r4, #0]
 8001dce:	f002 f87e 	bl	8003ece <USB_ReadInterrupts>
 8001dd2:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001dd6:	d126      	bne.n	8001e26 <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dd8:	6820      	ldr	r0, [r4, #0]
 8001dda:	f002 f878 	bl	8003ece <USB_ReadInterrupts>
 8001dde:	f010 0f08 	tst.w	r0, #8
 8001de2:	d124      	bne.n	8001e2e <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001de4:	6820      	ldr	r0, [r4, #0]
 8001de6:	f002 f872 	bl	8003ece <USB_ReadInterrupts>
 8001dea:	f010 0f10 	tst.w	r0, #16
 8001dee:	d125      	bne.n	8001e3c <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	f002 f86c 	bl	8003ece <USB_ReadInterrupts>
 8001df6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001dfa:	d0ab      	beq.n	8001d54 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dfc:	6820      	ldr	r0, [r4, #0]
 8001dfe:	f002 fa15 	bl	800422c <USB_HC_ReadInterrupt>
 8001e02:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e04:	2600      	movs	r6, #0
 8001e06:	e02c      	b.n	8001e62 <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e08:	2110      	movs	r1, #16
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f001 fff0 	bl	8003df0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e10:	4628      	mov	r0, r5
 8001e12:	f002 f805 	bl	8003e20 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e16:	2101      	movs	r1, #1
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	f002 f907 	bl	800402c <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f005 fdba 	bl	8007998 <HAL_HCD_Disconnect_Callback>
 8001e24:	e7d2      	b.n	8001dcc <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fc1d 	bl	8001666 <HCD_Port_IRQHandler>
 8001e2c:	e7d4      	b.n	8001dd8 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f005 fda6 	bl	8007980 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	2208      	movs	r2, #8
 8001e38:	615a      	str	r2, [r3, #20]
 8001e3a:	e7d3      	b.n	8001de4 <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	6993      	ldr	r3, [r2, #24]
 8001e40:	f023 0310 	bic.w	r3, r3, #16
 8001e44:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff fa61 	bl	800130e <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4c:	6822      	ldr	r2, [r4, #0]
 8001e4e:	6993      	ldr	r3, [r2, #24]
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6193      	str	r3, [r2, #24]
 8001e56:	e7cb      	b.n	8001df0 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e58:	b2f1      	uxtb	r1, r6
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff fded 	bl	8001a3a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e60:	3601      	adds	r6, #1
 8001e62:	68a3      	ldr	r3, [r4, #8]
 8001e64:	42b3      	cmp	r3, r6
 8001e66:	d912      	bls.n	8001e8e <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e68:	f006 030f 	and.w	r3, r6, #15
 8001e6c:	fa27 f303 	lsr.w	r3, r7, r3
 8001e70:	f013 0f01 	tst.w	r3, #1
 8001e74:	d0f4      	beq.n	8001e60 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e76:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001e7a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8001e7e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001e82:	d0e9      	beq.n	8001e58 <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e84:	b2f1      	uxtb	r1, r6
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fc45 	bl	8001716 <HCD_HC_IN_IRQHandler>
 8001e8c:	e7e8      	b.n	8001e60 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	e75d      	b.n	8001d54 <HAL_HCD_IRQHandler+0x10>

08001e98 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8001e98:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d00e      	beq.n	8001ebe <HAL_HCD_Start+0x26>
{
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	f002 f8fc 	bl	80040a8 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	f001 ff90 	bl	8003dd6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001ebc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001ebe:	2002      	movs	r0, #2
}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001ec2:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_HCD_Stop+0x20>
{
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ed4:	6800      	ldr	r0, [r0, #0]
 8001ed6:	f002 fae9 	bl	80044ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001ee0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001ee2:	2002      	movs	r0, #2
}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_HCD_ResetPort>:
{
 8001ee6:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8001ee8:	6800      	ldr	r0, [r0, #0]
 8001eea:	f002 f8be 	bl	800406a <USB_ResetPort>
}
 8001eee:	bd08      	pop	{r3, pc}

08001ef0 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001ef0:	232c      	movs	r3, #44	; 0x2c
 8001ef2:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001ef6:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8001efa:	4770      	bx	lr

08001efc <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001efc:	232c      	movs	r3, #44	; 0x2c
 8001efe:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001f02:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8001f04:	4770      	bx	lr

08001f06 <HAL_HCD_GetCurrentFrame>:
{
 8001f06:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f08:	6800      	ldr	r0, [r0, #0]
 8001f0a:	f002 f8fb 	bl	8004104 <USB_GetCurrentFrame>
}
 8001f0e:	bd08      	pop	{r3, pc}

08001f10 <HAL_HCD_GetCurrentSpeed>:
{
 8001f10:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f12:	6800      	ldr	r0, [r0, #0]
 8001f14:	f002 f8eb 	bl	80040ee <USB_GetHostSpeed>
}
 8001f18:	bd08      	pop	{r3, pc}

08001f1a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1a:	6803      	ldr	r3, [r0, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001f22:	d101      	bne.n	8001f28 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
}
 8001f26:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f2c:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f32:	2220      	movs	r2, #32
 8001f34:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001f3e:	f042 0204 	orr.w	r2, r2, #4
 8001f42:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8001f44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	4770      	bx	lr

08001f4c <I2C_WaitOnFlagUntilTimeout>:
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	4607      	mov	r7, r0
 8001f52:	460d      	mov	r5, r1
 8001f54:	4690      	mov	r8, r2
 8001f56:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f58:	e024      	b.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7fe fe11 	bl	8000b80 <HAL_GetTick>
 8001f5e:	9b06      	ldr	r3, [sp, #24]
 8001f60:	1ac0      	subs	r0, r0, r3
 8001f62:	42b0      	cmp	r0, r6
 8001f64:	d800      	bhi.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001f66:	b9ee      	cbnz	r6, 8001fa4 <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f78:	f042 0220 	orr.w	r2, r2, #32
 8001f7c:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
 8001f84:	e01e      	b.n	8001fc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699c      	ldr	r4, [r3, #24]
 8001f8a:	ea25 0c04 	bic.w	ip, r5, r4
 8001f8e:	fa1f fc8c 	uxth.w	ip, ip
 8001f92:	fabc fc8c 	clz	ip, ip
 8001f96:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001f9a:	45e0      	cmp	r8, ip
 8001f9c:	d111      	bne.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001fa2:	d1da      	bne.n	8001f5a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fa4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d1ec      	bne.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	ea25 0c03 	bic.w	ip, r5, r3
 8001fb4:	fa1f fc8c 	uxth.w	ip, ip
 8001fb8:	fabc fc8c 	clz	ip, ip
 8001fbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001fc0:	e7eb      	b.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001fc2:	2000      	movs	r0, #0
}
 8001fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fcc:	4605      	mov	r5, r0
 8001fce:	460e      	mov	r6, r1
 8001fd0:	4617      	mov	r7, r2
 8001fd2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fd4:	e03d      	b.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fdc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fde:	682b      	ldr	r3, [r5, #0]
 8001fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fea:	2220      	movs	r2, #32
 8001fec:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ff4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001ff6:	f042 0204 	orr.w	r2, r2, #4
 8001ffa:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001ffc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
 8002002:	e034      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002004:	f7fe fdbc 	bl	8000b80 <HAL_GetTick>
 8002008:	eba0 0008 	sub.w	r0, r0, r8
 800200c:	42b8      	cmp	r0, r7
 800200e:	d800      	bhi.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8002010:	b9ff      	cbnz	r7, 8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	2300      	movs	r3, #0
 8002014:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002016:	2220      	movs	r2, #32
 8002018:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002020:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002022:	f042 0220 	orr.w	r2, r2, #32
 8002026:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002028:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 800202c:	2001      	movs	r0, #1
 800202e:	e01e      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	699c      	ldr	r4, [r3, #24]
 8002034:	ea26 0404 	bic.w	r4, r6, r4
 8002038:	b2a4      	uxth	r4, r4
 800203a:	3c00      	subs	r4, #0
 800203c:	bf18      	it	ne
 800203e:	2401      	movne	r4, #1
 8002040:	b1a4      	cbz	r4, 800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002042:	682b      	ldr	r3, [r5, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800204a:	d1c4      	bne.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800204c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002050:	d1d8      	bne.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002052:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8002056:	2b01      	cmp	r3, #1
 8002058:	d1ea      	bne.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800205a:	682b      	ldr	r3, [r5, #0]
 800205c:	695c      	ldr	r4, [r3, #20]
 800205e:	ea26 0404 	bic.w	r4, r6, r4
 8002062:	b2a4      	uxth	r4, r4
 8002064:	3c00      	subs	r4, #0
 8002066:	bf18      	it	ne
 8002068:	2401      	movne	r4, #1
 800206a:	e7e9      	b.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800206c:	2000      	movs	r0, #0
}
 800206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002074 <I2C_MasterRequestWrite>:
{
 8002074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002076:	b083      	sub	sp, #12
 8002078:	4604      	mov	r4, r0
 800207a:	460d      	mov	r5, r1
 800207c:	4616      	mov	r6, r2
 800207e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002080:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002082:	2b08      	cmp	r3, #8
 8002084:	d00d      	beq.n	80020a2 <I2C_MasterRequestWrite+0x2e>
 8002086:	2b01      	cmp	r3, #1
 8002088:	d00b      	beq.n	80020a2 <I2C_MasterRequestWrite+0x2e>
 800208a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800208e:	d008      	beq.n	80020a2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002090:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002092:	2b12      	cmp	r3, #18
 8002094:	d10a      	bne.n	80020ac <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002096:	6802      	ldr	r2, [r0, #0]
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e004      	b.n	80020ac <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a2:	6822      	ldr	r2, [r4, #0]
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ac:	9700      	str	r7, [sp, #0]
 80020ae:	4633      	mov	r3, r6
 80020b0:	2200      	movs	r2, #0
 80020b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7ff ff48 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80020bc:	b980      	cbnz	r0, 80020e0 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020be:	6923      	ldr	r3, [r4, #16]
 80020c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020c4:	d116      	bne.n	80020f4 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80020cc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	4632      	mov	r2, r6
 80020d2:	4913      	ldr	r1, [pc, #76]	; (8002120 <I2C_MasterRequestWrite+0xac>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff ff77 	bl	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020da:	b9f8      	cbnz	r0, 800211c <I2C_MasterRequestWrite+0xa8>
}
 80020dc:	b003      	add	sp, #12
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020e8:	d002      	beq.n	80020f0 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ee:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e7f3      	b.n	80020dc <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020f4:	11eb      	asrs	r3, r5, #7
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	f003 0306 	and.w	r3, r3, #6
 80020fc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002100:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	4632      	mov	r2, r6
 8002106:	4907      	ldr	r1, [pc, #28]	; (8002124 <I2C_MasterRequestWrite+0xb0>)
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff ff5d 	bl	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210e:	b918      	cbnz	r0, 8002118 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	b2ed      	uxtb	r5, r5
 8002114:	611d      	str	r5, [r3, #16]
 8002116:	e7da      	b.n	80020ce <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8002118:	2001      	movs	r0, #1
 800211a:	e7df      	b.n	80020dc <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 800211c:	2001      	movs	r0, #1
 800211e:	e7dd      	b.n	80020dc <I2C_MasterRequestWrite+0x68>
 8002120:	00010002 	.word	0x00010002
 8002124:	00010008 	.word	0x00010008

08002128 <I2C_MasterRequestRead>:
{
 8002128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	4616      	mov	r6, r2
 8002134:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002136:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002138:	6801      	ldr	r1, [r0, #0]
 800213a:	680b      	ldr	r3, [r1, #0]
 800213c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002140:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002142:	2a08      	cmp	r2, #8
 8002144:	d00d      	beq.n	8002162 <I2C_MasterRequestRead+0x3a>
 8002146:	2a01      	cmp	r2, #1
 8002148:	d00b      	beq.n	8002162 <I2C_MasterRequestRead+0x3a>
 800214a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800214e:	d008      	beq.n	8002162 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002150:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002152:	2b11      	cmp	r3, #17
 8002154:	d10a      	bne.n	800216c <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e004      	b.n	800216c <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800216c:	9700      	str	r7, [sp, #0]
 800216e:	4633      	mov	r3, r6
 8002170:	2200      	movs	r2, #0
 8002172:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff fee8 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 800217c:	b998      	cbnz	r0, 80021a6 <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217e:	6923      	ldr	r3, [r4, #16]
 8002180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002184:	d119      	bne.n	80021ba <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	f045 0501 	orr.w	r5, r5, #1
 800218c:	b2ed      	uxtb	r5, r5
 800218e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	4632      	mov	r2, r6
 8002194:	492a      	ldr	r1, [pc, #168]	; (8002240 <I2C_MasterRequestRead+0x118>)
 8002196:	4620      	mov	r0, r4
 8002198:	f7ff ff16 	bl	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800219c:	2800      	cmp	r0, #0
 800219e:	d14c      	bne.n	800223a <I2C_MasterRequestRead+0x112>
}
 80021a0:	b004      	add	sp, #16
 80021a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021ae:	d002      	beq.n	80021b6 <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
 80021b8:	e7f2      	b.n	80021a0 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021ba:	ea4f 18e5 	mov.w	r8, r5, asr #7
 80021be:	f008 0806 	and.w	r8, r8, #6
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80021c8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021ca:	463b      	mov	r3, r7
 80021cc:	4632      	mov	r2, r6
 80021ce:	491d      	ldr	r1, [pc, #116]	; (8002244 <I2C_MasterRequestRead+0x11c>)
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff fef9 	bl	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d6:	b108      	cbz	r0, 80021dc <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 80021d8:	2001      	movs	r0, #1
 80021da:	e7e1      	b.n	80021a0 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	b2ed      	uxtb	r5, r5
 80021e0:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4632      	mov	r2, r6
 80021e6:	4916      	ldr	r1, [pc, #88]	; (8002240 <I2C_MasterRequestRead+0x118>)
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff feed 	bl	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ee:	b108      	cbz	r0, 80021f4 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
 80021f2:	e7d5      	b.n	80021a0 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f4:	2200      	movs	r2, #0
 80021f6:	9203      	str	r2, [sp, #12]
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	6959      	ldr	r1, [r3, #20]
 80021fc:	9103      	str	r1, [sp, #12]
 80021fe:	6999      	ldr	r1, [r3, #24]
 8002200:	9103      	str	r1, [sp, #12]
 8002202:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800220a:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800220c:	9700      	str	r7, [sp, #0]
 800220e:	4633      	mov	r3, r6
 8002210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff fe99 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 800221a:	b920      	cbnz	r0, 8002226 <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002222:	6113      	str	r3, [r2, #16]
 8002224:	e7b4      	b.n	8002190 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800222e:	d002      	beq.n	8002236 <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002234:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e7b2      	b.n	80021a0 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
 800223c:	e7b0      	b.n	80021a0 <I2C_MasterRequestRead+0x78>
 800223e:	bf00      	nop
 8002240:	00010002 	.word	0x00010002
 8002244:	00010008 	.word	0x00010008

08002248 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	4604      	mov	r4, r0
 800224c:	460d      	mov	r5, r1
 800224e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002258:	d11c      	bne.n	8002294 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fe5d 	bl	8001f1a <I2C_IsAcknowledgeFailed>
 8002260:	b9d0      	cbnz	r0, 8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002262:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002266:	d0f3      	beq.n	8002250 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7fe fc8a 	bl	8000b80 <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	42a8      	cmp	r0, r5
 8002270:	d801      	bhi.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002272:	2d00      	cmp	r5, #0
 8002274:	d1ec      	bne.n	8002250 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002276:	2300      	movs	r3, #0
 8002278:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800227a:	2220      	movs	r2, #32
 800227c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002280:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800228c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
 8002292:	e000      	b.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002294:	2000      	movs	r0, #0
}
 8002296:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002298:	2001      	movs	r0, #1
 800229a:	e7fc      	b.n	8002296 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800229c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4604      	mov	r4, r0
 80022a0:	460d      	mov	r5, r1
 80022a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f013 0f04 	tst.w	r3, #4
 80022ac:	d11c      	bne.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fe33 	bl	8001f1a <I2C_IsAcknowledgeFailed>
 80022b4:	b9d0      	cbnz	r0, 80022ec <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80022ba:	d0f3      	beq.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022bc:	f7fe fc60 	bl	8000b80 <HAL_GetTick>
 80022c0:	1b80      	subs	r0, r0, r6
 80022c2:	42a8      	cmp	r0, r5
 80022c4:	d801      	bhi.n	80022ca <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	d1ec      	bne.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ce:	2220      	movs	r2, #32
 80022d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80022e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
 80022e6:	e000      	b.n	80022ea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80022e8:	2000      	movs	r0, #0
}
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	e7fc      	b.n	80022ea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080022f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	4605      	mov	r5, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	6959      	ldr	r1, [r3, #20]
 80022fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002300:	d129      	bne.n	8002356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002302:	6959      	ldr	r1, [r3, #20]
 8002304:	f011 0f10 	tst.w	r1, #16
 8002308:	d115      	bne.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7fe fc39 	bl	8000b80 <HAL_GetTick>
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	42a0      	cmp	r0, r4
 8002312:	d801      	bhi.n	8002318 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002314:	2c00      	cmp	r4, #0
 8002316:	d1ef      	bne.n	80022f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002318:	2300      	movs	r3, #0
 800231a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800231c:	2220      	movs	r2, #32
 800231e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002326:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002328:	f042 0220 	orr.w	r2, r2, #32
 800232c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800232e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002332:	2001      	movs	r0, #1
}
 8002334:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002336:	f06f 0210 	mvn.w	r2, #16
 800233a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800233c:	2300      	movs	r3, #0
 800233e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	2220      	movs	r2, #32
 8002342:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002346:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800234a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800234c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800234e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
 8002354:	e7ee      	b.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
 8002358:	e7ec      	b.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800235c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800235c:	2800      	cmp	r0, #0
 800235e:	f000 80cc 	beq.w	80024fa <HAL_I2C_Init+0x19e>
{
 8002362:	b570      	push	{r4, r5, r6, lr}
 8002364:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800236a:	2b00      	cmp	r3, #0
 800236c:	d077      	beq.n	800245e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800236e:	2324      	movs	r3, #36	; 0x24
 8002370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002386:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002388:	6822      	ldr	r2, [r4, #0]
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002390:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002392:	f001 fb89 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_I2C_Init+0x1a8>)
 800239a:	429a      	cmp	r2, r3
 800239c:	d864      	bhi.n	8002468 <HAL_I2C_Init+0x10c>
 800239e:	4b5a      	ldr	r3, [pc, #360]	; (8002508 <HAL_I2C_Init+0x1ac>)
 80023a0:	4298      	cmp	r0, r3
 80023a2:	bf8c      	ite	hi
 80023a4:	2300      	movhi	r3, #0
 80023a6:	2301      	movls	r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 80a8 	bne.w	80024fe <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80023ae:	4957      	ldr	r1, [pc, #348]	; (800250c <HAL_I2C_Init+0x1b0>)
 80023b0:	fba1 3100 	umull	r3, r1, r1, r0
 80023b4:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b6:	6825      	ldr	r5, [r4, #0]
 80023b8:	686a      	ldr	r2, [r5, #4]
 80023ba:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023be:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80023c2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c4:	6821      	ldr	r1, [r4, #0]
 80023c6:	6a0a      	ldr	r2, [r1, #32]
 80023c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80023cc:	6866      	ldr	r6, [r4, #4]
 80023ce:	4d4d      	ldr	r5, [pc, #308]	; (8002504 <HAL_I2C_Init+0x1a8>)
 80023d0:	42ae      	cmp	r6, r5
 80023d2:	d84f      	bhi.n	8002474 <HAL_I2C_Init+0x118>
 80023d4:	3301      	adds	r3, #1
 80023d6:	4313      	orrs	r3, r2
 80023d8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023da:	6821      	ldr	r1, [r4, #0]
 80023dc:	69ca      	ldr	r2, [r1, #28]
 80023de:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80023e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023e6:	6866      	ldr	r6, [r4, #4]
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_I2C_Init+0x1a8>)
 80023ea:	429e      	cmp	r6, r3
 80023ec:	d84c      	bhi.n	8002488 <HAL_I2C_Init+0x12c>
 80023ee:	1e43      	subs	r3, r0, #1
 80023f0:	0076      	lsls	r6, r6, #1
 80023f2:	fbb3 f3f6 	udiv	r3, r3, r6
 80023f6:	3301      	adds	r3, #1
 80023f8:	f640 70fc 	movw	r0, #4092	; 0xffc
 80023fc:	4203      	tst	r3, r0
 80023fe:	d078      	beq.n	80024f2 <HAL_I2C_Init+0x196>
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002408:	6821      	ldr	r1, [r4, #0]
 800240a:	680b      	ldr	r3, [r1, #0]
 800240c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002410:	69e2      	ldr	r2, [r4, #28]
 8002412:	6a20      	ldr	r0, [r4, #32]
 8002414:	4302      	orrs	r2, r0
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241a:	6821      	ldr	r1, [r4, #0]
 800241c:	688b      	ldr	r3, [r1, #8]
 800241e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002426:	6922      	ldr	r2, [r4, #16]
 8002428:	68e0      	ldr	r0, [r4, #12]
 800242a:	4302      	orrs	r2, r0
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002430:	6821      	ldr	r1, [r4, #0]
 8002432:	68cb      	ldr	r3, [r1, #12]
 8002434:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002438:	6962      	ldr	r2, [r4, #20]
 800243a:	69a0      	ldr	r0, [r4, #24]
 800243c:	4302      	orrs	r2, r0
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244c:	2000      	movs	r0, #0
 800244e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002450:	2320      	movs	r3, #32
 8002452:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800245c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800245e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002462:	f7fe fa13 	bl	800088c <HAL_I2C_MspInit>
 8002466:	e782      	b.n	800236e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002468:	4b29      	ldr	r3, [pc, #164]	; (8002510 <HAL_I2C_Init+0x1b4>)
 800246a:	4298      	cmp	r0, r3
 800246c:	bf8c      	ite	hi
 800246e:	2300      	movhi	r3, #0
 8002470:	2301      	movls	r3, #1
 8002472:	e799      	b.n	80023a8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002474:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8002478:	fb05 f303 	mul.w	r3, r5, r3
 800247c:	4d25      	ldr	r5, [pc, #148]	; (8002514 <HAL_I2C_Init+0x1b8>)
 800247e:	fba5 5303 	umull	r5, r3, r5, r3
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	3301      	adds	r3, #1
 8002486:	e7a6      	b.n	80023d6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002488:	68a3      	ldr	r3, [r4, #8]
 800248a:	b9bb      	cbnz	r3, 80024bc <HAL_I2C_Init+0x160>
 800248c:	1e45      	subs	r5, r0, #1
 800248e:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8002492:	fbb5 f5fc 	udiv	r5, r5, ip
 8002496:	3501      	adds	r5, #1
 8002498:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800249c:	fab5 f585 	clz	r5, r5
 80024a0:	096d      	lsrs	r5, r5, #5
 80024a2:	bb45      	cbnz	r5, 80024f6 <HAL_I2C_Init+0x19a>
 80024a4:	b9c3      	cbnz	r3, 80024d8 <HAL_I2C_Init+0x17c>
 80024a6:	3801      	subs	r0, #1
 80024a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80024ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ba:	e7a3      	b.n	8002404 <HAL_I2C_Init+0xa8>
 80024bc:	1e45      	subs	r5, r0, #1
 80024be:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 80024c2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80024c6:	fbb5 f5fc 	udiv	r5, r5, ip
 80024ca:	3501      	adds	r5, #1
 80024cc:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80024d0:	fab5 f585 	clz	r5, r5
 80024d4:	096d      	lsrs	r5, r5, #5
 80024d6:	e7e4      	b.n	80024a2 <HAL_I2C_Init+0x146>
 80024d8:	3801      	subs	r0, #1
 80024da:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80024de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f0:	e788      	b.n	8002404 <HAL_I2C_Init+0xa8>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e786      	b.n	8002404 <HAL_I2C_Init+0xa8>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e784      	b.n	8002404 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
}
 80024fc:	4770      	bx	lr
    return HAL_ERROR;
 80024fe:	2001      	movs	r0, #1
 8002500:	e7ac      	b.n	800245c <HAL_I2C_Init+0x100>
 8002502:	bf00      	nop
 8002504:	000186a0 	.word	0x000186a0
 8002508:	001e847f 	.word	0x001e847f
 800250c:	431bde83 	.word	0x431bde83
 8002510:	003d08ff 	.word	0x003d08ff
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_I2C_Master_Transmit>:
{
 8002518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800251c:	b085      	sub	sp, #20
 800251e:	4604      	mov	r4, r0
 8002520:	460f      	mov	r7, r1
 8002522:	4691      	mov	r9, r2
 8002524:	4698      	mov	r8, r3
 8002526:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7fe fb2a 	bl	8000b80 <HAL_GetTick>
 800252c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002532:	b2c0      	uxtb	r0, r0
 8002534:	2820      	cmp	r0, #32
 8002536:	d004      	beq.n	8002542 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8002538:	2702      	movs	r7, #2
}
 800253a:	4638      	mov	r0, r7
 800253c:	b005      	add	sp, #20
 800253e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002542:	9500      	str	r5, [sp, #0]
 8002544:	2319      	movs	r3, #25
 8002546:	2201      	movs	r2, #1
 8002548:	494f      	ldr	r1, [pc, #316]	; (8002688 <HAL_I2C_Master_Transmit+0x170>)
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff fcfe 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002550:	2800      	cmp	r0, #0
 8002552:	f040 8092 	bne.w	800267a <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8002556:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	f000 808f 	beq.w	800267e <HAL_I2C_Master_Transmit+0x166>
 8002560:	2301      	movs	r3, #1
 8002562:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f012 0f01 	tst.w	r2, #1
 800256e:	d103      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002580:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002582:	2321      	movs	r3, #33	; 0x21
 8002584:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002588:	2310      	movs	r3, #16
 800258a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002592:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002596:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800259c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_I2C_Master_Transmit+0x174>)
 80025a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a2:	462b      	mov	r3, r5
 80025a4:	4632      	mov	r2, r6
 80025a6:	4639      	mov	r1, r7
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff fd63 	bl	8002074 <I2C_MasterRequestWrite>
 80025ae:	4607      	mov	r7, r0
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d166      	bne.n	8002682 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b4:	2300      	movs	r3, #0
 80025b6:	9303      	str	r3, [sp, #12]
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	9203      	str	r2, [sp, #12]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	9303      	str	r3, [sp, #12]
 80025c2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80025c4:	e011      	b.n	80025ea <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80025cc:	2701      	movs	r7, #1
 80025ce:	e7b4      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e7f7      	b.n	80025cc <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	462a      	mov	r2, r5
 80025de:	4631      	mov	r1, r6
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff fe5b 	bl	800229c <I2C_WaitOnBTFFlagUntilTimeout>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d12e      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80025ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d036      	beq.n	800265e <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	462a      	mov	r2, r5
 80025f2:	4631      	mov	r1, r6
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fe27 	bl	8002248 <I2C_WaitOnTXEFlagUntilTimeout>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d1e3      	bne.n	80025c6 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002606:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800260c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800260e:	b289      	uxth	r1, r1
 8002610:	3901      	subs	r1, #1
 8002612:	b289      	uxth	r1, r1
 8002614:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002616:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800261e:	6822      	ldr	r2, [r4, #0]
 8002620:	6951      	ldr	r1, [r2, #20]
 8002622:	f011 0f04 	tst.w	r1, #4
 8002626:	d0d9      	beq.n	80025dc <HAL_I2C_Master_Transmit+0xc4>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0d7      	beq.n	80025dc <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262c:	7843      	ldrb	r3, [r0, #1]
 800262e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002632:	3301      	adds	r3, #1
 8002634:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002636:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002640:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	8523      	strh	r3, [r4, #40]	; 0x28
 8002646:	e7c9      	b.n	80025dc <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800264e:	2701      	movs	r7, #1
 8002650:	e773      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	6813      	ldr	r3, [r2, #0]
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e7f7      	b.n	800264e <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002666:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	2320      	movs	r3, #32
 800266a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266e:	2300      	movs	r3, #0
 8002670:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002678:	e75f      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 800267a:	2702      	movs	r7, #2
 800267c:	e75d      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800267e:	2702      	movs	r7, #2
 8002680:	e75b      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8002682:	2701      	movs	r7, #1
 8002684:	e759      	b.n	800253a <HAL_I2C_Master_Transmit+0x22>
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000

08002690 <HAL_I2C_Master_Receive>:
{
 8002690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002694:	b087      	sub	sp, #28
 8002696:	4604      	mov	r4, r0
 8002698:	460f      	mov	r7, r1
 800269a:	4691      	mov	r9, r2
 800269c:	4698      	mov	r8, r3
 800269e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7fe fa6e 	bl	8000b80 <HAL_GetTick>
 80026a4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80026aa:	b2c0      	uxtb	r0, r0
 80026ac:	2820      	cmp	r0, #32
 80026ae:	d004      	beq.n	80026ba <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 80026b0:	2702      	movs	r7, #2
}
 80026b2:	4638      	mov	r0, r7
 80026b4:	b007      	add	sp, #28
 80026b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ba:	9500      	str	r5, [sp, #0]
 80026bc:	2319      	movs	r3, #25
 80026be:	2201      	movs	r2, #1
 80026c0:	4989      	ldr	r1, [pc, #548]	; (80028e8 <HAL_I2C_Master_Receive+0x258>)
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff fc42 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	f040 8145 	bne.w	8002958 <HAL_I2C_Master_Receive+0x2c8>
    __HAL_LOCK(hi2c);
 80026ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	f000 8142 	beq.w	800295c <HAL_I2C_Master_Receive+0x2cc>
 80026d8:	2301      	movs	r3, #1
 80026da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f012 0f01 	tst.w	r2, #1
 80026e6:	d103      	bne.n	80026f0 <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f8:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026fa:	2322      	movs	r3, #34	; 0x22
 80026fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002700:	2310      	movs	r3, #16
 8002702:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002706:	2300      	movs	r3, #0
 8002708:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800270a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800270e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002712:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002714:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002716:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_I2C_Master_Receive+0x25c>)
 8002718:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800271a:	462b      	mov	r3, r5
 800271c:	4632      	mov	r2, r6
 800271e:	4639      	mov	r1, r7
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff fd01 	bl	8002128 <I2C_MasterRequestRead>
 8002726:	4607      	mov	r7, r0
 8002728:	2800      	cmp	r0, #0
 800272a:	f040 8119 	bne.w	8002960 <HAL_I2C_Master_Receive+0x2d0>
    if (hi2c->XferSize == 0U)
 800272e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002730:	b95b      	cbnz	r3, 800274a <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	9202      	str	r2, [sp, #8]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	9202      	str	r2, [sp, #8]
 800273e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e07a      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
    else if (hi2c->XferSize == 1U)
 800274a:	2b01      	cmp	r3, #1
 800274c:	d00f      	beq.n	800276e <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 800274e:	2b02      	cmp	r3, #2
 8002750:	d01f      	beq.n	8002792 <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275c:	2300      	movs	r3, #0
 800275e:	9305      	str	r3, [sp, #20]
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	9205      	str	r2, [sp, #20]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	9305      	str	r3, [sp, #20]
 800276a:	9b05      	ldr	r3, [sp, #20]
 800276c:	e068      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002778:	2300      	movs	r3, #0
 800277a:	9303      	str	r3, [sp, #12]
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	9203      	str	r2, [sp, #12]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	9203      	str	r2, [sp, #12]
 8002786:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e056      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027a4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	9304      	str	r3, [sp, #16]
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	9204      	str	r2, [sp, #16]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	9304      	str	r3, [sp, #16]
 80027b4:	9b04      	ldr	r3, [sp, #16]
 80027b6:	e043      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b8:	462a      	mov	r2, r5
 80027ba:	4631      	mov	r1, r6
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fd97 	bl	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	f040 80ce 	bne.w	8002964 <HAL_I2C_Master_Receive+0x2d4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80027d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027e6:	e02b      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e8:	9500      	str	r5, [sp, #0]
 80027ea:	4633      	mov	r3, r6
 80027ec:	2200      	movs	r2, #0
 80027ee:	4940      	ldr	r1, [pc, #256]	; (80028f0 <HAL_I2C_Master_Receive+0x260>)
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fbab 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	f040 80b6 	bne.w	8002968 <HAL_I2C_Master_Receive+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002804:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800280c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800280e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002810:	1c53      	adds	r3, r2, #1
 8002812:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002814:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800281a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29b      	uxth	r3, r3
 8002822:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800282a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800282c:	3301      	adds	r3, #1
 800282e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002830:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002836:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002840:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002842:	2900      	cmp	r1, #0
 8002844:	d07f      	beq.n	8002946 <HAL_I2C_Master_Receive+0x2b6>
      if (hi2c->XferSize <= 3U)
 8002846:	2903      	cmp	r1, #3
 8002848:	d854      	bhi.n	80028f4 <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 800284a:	2901      	cmp	r1, #1
 800284c:	d0b4      	beq.n	80027b8 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 800284e:	2902      	cmp	r1, #2
 8002850:	d0ca      	beq.n	80027e8 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002852:	9500      	str	r5, [sp, #0]
 8002854:	4633      	mov	r3, r6
 8002856:	2200      	movs	r2, #0
 8002858:	4925      	ldr	r1, [pc, #148]	; (80028f0 <HAL_I2C_Master_Receive+0x260>)
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff fb76 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002860:	2800      	cmp	r0, #0
 8002862:	f040 8083 	bne.w	800296c <HAL_I2C_Master_Receive+0x2dc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	6813      	ldr	r3, [r2, #0]
 800286a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800286e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002876:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800287e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002884:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002886:	b289      	uxth	r1, r1
 8002888:	3901      	subs	r1, #1
 800288a:	b289      	uxth	r1, r1
 800288c:	8561      	strh	r1, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	9500      	str	r5, [sp, #0]
 8002890:	4633      	mov	r3, r6
 8002892:	2200      	movs	r2, #0
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_I2C_Master_Receive+0x260>)
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fb58 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 800289c:	2800      	cmp	r0, #0
 800289e:	d167      	bne.n	8002970 <HAL_I2C_Master_Receive+0x2e0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028b0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80028b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028b4:	1c53      	adds	r3, r2, #1
 80028b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80028b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80028be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80028ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80028d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80028da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80028e4:	e7ac      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
 80028e6:	bf00      	nop
 80028e8:	00100002 	.word	0x00100002
 80028ec:	ffff0000 	.word	0xffff0000
 80028f0:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	462a      	mov	r2, r5
 80028f6:	4631      	mov	r1, r6
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fcf9 	bl	80022f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d138      	bne.n	8002974 <HAL_I2C_Master_Receive+0x2e4>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002908:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800290a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800290c:	1c53      	adds	r3, r2, #1
 800290e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002910:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	f011 0f04 	tst.w	r1, #4
 8002928:	d08a      	beq.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800292e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002934:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800293a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002944:	e77c      	b.n	8002840 <HAL_I2C_Master_Receive+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002946:	2320      	movs	r3, #32
 8002948:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	2300      	movs	r3, #0
 800294e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002952:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002956:	e6ac      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8002958:	2702      	movs	r7, #2
 800295a:	e6aa      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 800295c:	2702      	movs	r7, #2
 800295e:	e6a8      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 8002960:	2701      	movs	r7, #1
 8002962:	e6a6      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002964:	2701      	movs	r7, #1
 8002966:	e6a4      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002968:	2701      	movs	r7, #1
 800296a:	e6a2      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 800296c:	2701      	movs	r7, #1
 800296e:	e6a0      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002970:	2701      	movs	r7, #1
 8002972:	e69e      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 8002974:	2701      	movs	r7, #1
 8002976:	e69c      	b.n	80026b2 <HAL_I2C_Master_Receive+0x22>

08002978 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800297c:	4606      	mov	r6, r0
 800297e:	4688      	mov	r8, r1
 8002980:	4617      	mov	r7, r2
 8002982:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002984:	f7fe f8fc 	bl	8000b80 <HAL_GetTick>
 8002988:	4681      	mov	r9, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800298a:	6834      	ldr	r4, [r6, #0]
 800298c:	68a4      	ldr	r4, [r4, #8]
 800298e:	ea38 0304 	bics.w	r3, r8, r4
 8002992:	bf0c      	ite	eq
 8002994:	f04f 0c01 	moveq.w	ip, #1
 8002998:	f04f 0c00 	movne.w	ip, #0
 800299c:	45bc      	cmp	ip, r7
 800299e:	d012      	beq.n	80029c6 <I2S_WaitFlagStateUntilTimeout+0x4e>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80029a4:	d0f1      	beq.n	800298a <I2S_WaitFlagStateUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80029a6:	f7fe f8eb 	bl	8000b80 <HAL_GetTick>
 80029aa:	eba0 0009 	sub.w	r0, r0, r9
 80029ae:	42a8      	cmp	r0, r5
 80029b0:	d201      	bcs.n	80029b6 <I2S_WaitFlagStateUntilTimeout+0x3e>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	d1e9      	bne.n	800298a <I2S_WaitFlagStateUntilTimeout+0x12>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80029bc:	2300      	movs	r3, #0
 80029be:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40

        return HAL_TIMEOUT;
 80029c2:	2003      	movs	r0, #3
 80029c4:	e000      	b.n	80029c8 <I2S_WaitFlagStateUntilTimeout+0x50>
      }
    }
  }
  return HAL_OK;
 80029c6:	2000      	movs	r0, #0
}
 80029c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080029cc <HAL_I2S_Init>:
  if (hi2s == NULL)
 80029cc:	2800      	cmp	r0, #0
 80029ce:	f000 80bf 	beq.w	8002b50 <HAL_I2S_Init+0x184>
{
 80029d2:	b538      	push	{r3, r4, r5, lr}
 80029d4:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d051      	beq.n	8002a82 <HAL_I2S_Init+0xb6>
  hi2s->State = HAL_I2S_STATE_BUSY;
 80029de:	2202      	movs	r2, #2
 80029e0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	69cb      	ldr	r3, [r1, #28]
 80029e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029ec:	f023 030f 	bic.w	r3, r3, #15
 80029f0:	61cb      	str	r3, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	621a      	str	r2, [r3, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80029f6:	6963      	ldr	r3, [r4, #20]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d063      	beq.n	8002ac4 <HAL_I2S_Init+0xf8>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80029fc:	68e3      	ldr	r3, [r4, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d146      	bne.n	8002a90 <HAL_I2S_Init+0xc4>
      packetlength = 16U;
 8002a02:	2510      	movs	r5, #16
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a04:	68a3      	ldr	r3, [r4, #8]
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d800      	bhi.n	8002a0c <HAL_I2S_Init+0x40>
      packetlength = packetlength * 2U;
 8002a0a:	006d      	lsls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f001 f93b 	bl	8003c88 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a12:	6923      	ldr	r3, [r4, #16]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d03c      	beq.n	8002a94 <HAL_I2S_Init+0xc8>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a1a:	fbb0 f0f5 	udiv	r0, r0, r5
 8002a1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002a22:	0043      	lsls	r3, r0, #1
 8002a24:	6960      	ldr	r0, [r4, #20]
 8002a26:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a2a:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <HAL_I2S_Init+0x188>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002a32:	f3c3 02c0 	ubfx	r2, r3, #3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002a36:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8002a3a:	085b      	lsrs	r3, r3, #1
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002a3c:	0211      	lsls	r1, r2, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002a3e:	1e9a      	subs	r2, r3, #2
 8002a40:	2afd      	cmp	r2, #253	; 0xfd
 8002a42:	d841      	bhi.n	8002ac8 <HAL_I2S_Init+0xfc>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002a44:	6922      	ldr	r2, [r4, #16]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	6821      	ldr	r1, [r4, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002a4e:	6821      	ldr	r1, [r4, #0]
 8002a50:	69cb      	ldr	r3, [r1, #28]
 8002a52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a56:	f023 030f 	bic.w	r3, r3, #15
 8002a5a:	6862      	ldr	r2, [r4, #4]
 8002a5c:	68a0      	ldr	r0, [r4, #8]
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	68e0      	ldr	r0, [r4, #12]
 8002a62:	4302      	orrs	r2, r0
 8002a64:	69a0      	ldr	r0, [r4, #24]
 8002a66:	4302      	orrs	r2, r0
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a6e:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a70:	6a23      	ldr	r3, [r4, #32]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d02e      	beq.n	8002ad4 <HAL_I2S_Init+0x108>
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a76:	2000      	movs	r0, #0
 8002a78:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002a80:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8002a82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_I2S_Init+0x18c>)
 8002a88:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8002a8a:	f7fd ff37 	bl	80008fc <HAL_I2S_MspInit>
 8002a8e:	e7a6      	b.n	80029de <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8002a90:	2520      	movs	r5, #32
 8002a92:	e7b7      	b.n	8002a04 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a94:	68e3      	ldr	r3, [r4, #12]
 8002a96:	b153      	cbz	r3, 8002aae <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a98:	00ad      	lsls	r5, r5, #2
 8002a9a:	fbb0 f0f5 	udiv	r0, r0, r5
 8002a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002aa2:	0043      	lsls	r3, r0, #1
 8002aa4:	6960      	ldr	r0, [r4, #20]
 8002aa6:	fbb3 f3f0 	udiv	r3, r3, r0
 8002aaa:	3305      	adds	r3, #5
 8002aac:	e7be      	b.n	8002a2c <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002aae:	00ed      	lsls	r5, r5, #3
 8002ab0:	fbb0 f0f5 	udiv	r0, r0, r5
 8002ab4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ab8:	0043      	lsls	r3, r0, #1
 8002aba:	6960      	ldr	r0, [r4, #20]
 8002abc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ac0:	3305      	adds	r3, #5
 8002ac2:	e7b3      	b.n	8002a2c <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	e7ba      	b.n	8002a3e <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ac8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e7d5      	b.n	8002a80 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_I2S_Init+0x190>)
 8002ad6:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_I2S_Init+0x194>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d01f      	beq.n	8002b20 <HAL_I2S_Init+0x154>
 8002ae0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002ae4:	69d3      	ldr	r3, [r2, #28]
 8002ae6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002aea:	f023 030f 	bic.w	r3, r3, #15
 8002aee:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_I2S_Init+0x194>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d015      	beq.n	8002b24 <HAL_I2S_Init+0x158>
 8002af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002afc:	2202      	movs	r2, #2
 8002afe:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_I2S_Init+0x194>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d010      	beq.n	8002b2a <HAL_I2S_Init+0x15e>
 8002b08:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8002b0c:	69eb      	ldr	r3, [r5, #28]
 8002b0e:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b10:	6862      	ldr	r2, [r4, #4]
 8002b12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002b16:	d00a      	beq.n	8002b2e <HAL_I2S_Init+0x162>
 8002b18:	b9c2      	cbnz	r2, 8002b4c <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 8002b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b1e:	e008      	b.n	8002b32 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_I2S_Init+0x198>)
 8002b22:	e7df      	b.n	8002ae4 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002b24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b28:	e7e8      	b.n	8002afc <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002b2a:	4d0e      	ldr	r5, [pc, #56]	; (8002b64 <HAL_I2S_Init+0x198>)
 8002b2c:	e7ee      	b.n	8002b0c <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8002b2e:	f44f 7080 	mov.w	r0, #256	; 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8002b32:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8002b36:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 8002b38:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002b3a:	ea40 000c 	orr.w	r0, r0, ip
 8002b3e:	4301      	orrs	r1, r0
 8002b40:	430a      	orrs	r2, r1
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002b48:	61eb      	str	r3, [r5, #28]
 8002b4a:	e794      	b.n	8002a76 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	e7f0      	b.n	8002b32 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 8002b50:	2001      	movs	r0, #1
}
 8002b52:	4770      	bx	lr
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	0800305f 	.word	0x0800305f
 8002b5c:	08003299 	.word	0x08003299
 8002b60:	40003800 	.word	0x40003800
 8002b64:	40003400 	.word	0x40003400

08002b68 <HAL_I2S_Transmit_DMA>:
  if ((pData == NULL) || (Size == 0U))
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	d05e      	beq.n	8002c2a <HAL_I2S_Transmit_DMA+0xc2>
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	d05c      	beq.n	8002c2e <HAL_I2S_Transmit_DMA+0xc6>
  __HAL_LOCK(hi2s);
 8002b74:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d059      	beq.n	8002c32 <HAL_I2S_Transmit_DMA+0xca>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002b84:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 8002b88:	b2ed      	uxtb	r5, r5
 8002b8a:	429d      	cmp	r5, r3
 8002b8c:	d110      	bne.n	8002bb0 <HAL_I2S_Transmit_DMA+0x48>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002b98:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d009      	beq.n	8002bba <HAL_I2S_Transmit_DMA+0x52>
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d007      	beq.n	8002bba <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = Size;
 8002baa:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002bac:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002bae:	e008      	b.n	8002bc2 <HAL_I2S_Transmit_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	e03a      	b.n	8002c30 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002bc0:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_I2S_Transmit_DMA+0xd0>)
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bca:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_I2S_Transmit_DMA+0xd4>)
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <HAL_I2S_Transmit_DMA+0xd8>)
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
                                 (uint32_t)&hi2s->Instance->DR,
 8002bd4:	6822      	ldr	r2, [r4, #0]
                                 hi2s->TxXferSize))
 8002bd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	320c      	adds	r2, #12
 8002bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002be0:	f7fe f93a 	bl	8000e58 <HAL_DMA_Start_IT>
 8002be4:	b9a8      	cbnz	r0, 8002c12 <HAL_I2S_Transmit_DMA+0xaa>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002bee:	d103      	bne.n	8002bf8 <HAL_I2S_Transmit_DMA+0x90>
    __HAL_I2S_ENABLE(hi2s);
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf6:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	f012 0f02 	tst.w	r2, #2
 8002c00:	d103      	bne.n	8002c0a <HAL_I2S_Transmit_DMA+0xa2>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	f042 0202 	orr.w	r2, r2, #2
 8002c08:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8002c10:	e00e      	b.n	8002c30 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002c20:	2300      	movs	r3, #0
 8002c22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002c26:	4628      	mov	r0, r5
 8002c28:	e002      	b.n	8002c30 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 8002c2a:	2001      	movs	r0, #1
}
 8002c2c:	4770      	bx	lr
    return  HAL_ERROR;
 8002c2e:	2001      	movs	r0, #1
}
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 8002c32:	2002      	movs	r0, #2
 8002c34:	e7fc      	b.n	8002c30 <HAL_I2S_Transmit_DMA+0xc8>
 8002c36:	bf00      	nop
 8002c38:	08002fbd 	.word	0x08002fbd
 8002c3c:	08002fff 	.word	0x08002fff
 8002c40:	0800312f 	.word	0x0800312f

08002c44 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8002c44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d033      	beq.n	8002cb6 <HAL_I2S_DMAPause+0x72>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d019      	beq.n	8002c92 <HAL_I2S_DMAPause+0x4e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c5e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d01e      	beq.n	8002ca6 <HAL_I2S_DMAPause+0x62>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002c68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d114      	bne.n	8002c9c <HAL_I2S_DMAPause+0x58>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c72:	6802      	ldr	r2, [r0, #0]
 8002c74:	6853      	ldr	r3, [r2, #4]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c7c:	6802      	ldr	r2, [r0, #0]
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_I2S_DMAPause+0x78>)
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d016      	beq.n	8002cb2 <HAL_I2S_DMAPause+0x6e>
 8002c84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002c88:	6853      	ldr	r3, [r2, #4]
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	6053      	str	r3, [r2, #4]
 8002c90:	e004      	b.n	8002c9c <HAL_I2S_DMAPause+0x58>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c92:	6802      	ldr	r2, [r0, #0]
 8002c94:	6853      	ldr	r3, [r2, #4]
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	4770      	bx	lr
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6853      	ldr	r3, [r2, #4]
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6053      	str	r3, [r2, #4]
 8002cb0:	e7f4      	b.n	8002c9c <HAL_I2S_DMAPause+0x58>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cb2:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <HAL_I2S_DMAPause+0x7c>)
 8002cb4:	e7e8      	b.n	8002c88 <HAL_I2S_DMAPause+0x44>
  __HAL_LOCK(hi2s);
 8002cb6:	2002      	movs	r0, #2
}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40003800 	.word	0x40003800
 8002cc0:	40003400 	.word	0x40003400

08002cc4 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8002cc4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d04d      	beq.n	8002d6a <HAL_I2S_DMAResume+0xa6>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002cd4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d027      	beq.n	8002d2e <HAL_I2S_DMAResume+0x6a>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d035      	beq.n	8002d54 <HAL_I2S_DMAResume+0x90>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ce8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d122      	bne.n	8002d38 <HAL_I2S_DMAResume+0x74>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cf2:	6802      	ldr	r2, [r0, #0]
 8002cf4:	6853      	ldr	r3, [r2, #4]
 8002cf6:	f043 0303 	orr.w	r3, r3, #3
 8002cfa:	6053      	str	r3, [r2, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002cfc:	6802      	ldr	r2, [r0, #0]
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_I2S_DMAResume+0xac>)
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d02d      	beq.n	8002d60 <HAL_I2S_DMAResume+0x9c>
 8002d04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002d08:	6853      	ldr	r3, [r2, #4]
 8002d0a:	f043 0303 	orr.w	r3, r3, #3
 8002d0e:	6053      	str	r3, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002d10:	6802      	ldr	r2, [r0, #0]
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_I2S_DMAResume+0xac>)
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d025      	beq.n	8002d64 <HAL_I2S_DMAResume+0xa0>
 8002d18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d22:	d109      	bne.n	8002d38 <HAL_I2S_DMAResume+0x74>
      __HAL_I2SEXT_ENABLE(hi2s);
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2a:	61da      	str	r2, [r3, #28]
 8002d2c:	e004      	b.n	8002d38 <HAL_I2S_DMAResume+0x74>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d2e:	6802      	ldr	r2, [r0, #0]
 8002d30:	6853      	ldr	r3, [r2, #4]
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002d38:	6803      	ldr	r3, [r0, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d40:	d103      	bne.n	8002d4a <HAL_I2S_DMAResume+0x86>
    __HAL_I2S_ENABLE(hi2s);
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d48:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8002d50:	4618      	mov	r0, r3
 8002d52:	4770      	bx	lr
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d54:	6802      	ldr	r2, [r0, #0]
 8002d56:	6853      	ldr	r3, [r2, #4]
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
 8002d5e:	e7eb      	b.n	8002d38 <HAL_I2S_DMAResume+0x74>
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_I2S_DMAResume+0xb0>)
 8002d62:	e7d1      	b.n	8002d08 <HAL_I2S_DMAResume+0x44>
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002d64:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002d68:	e7d8      	b.n	8002d1c <HAL_I2S_DMAResume+0x58>
  __HAL_LOCK(hi2s);
 8002d6a:	2002      	movs	r0, #2
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40003800 	.word	0x40003800
 8002d74:	40003400 	.word	0x40003400

08002d78 <HAL_I2S_DMAStop>:
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d7e:	6843      	ldr	r3, [r0, #4]
 8002d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d84:	d002      	beq.n	8002d8c <HAL_I2S_DMAStop+0x14>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 8082 	bne.w	8002e90 <HAL_I2S_DMAStop+0x118>
    if (hi2s->hdmatx != NULL)
 8002d8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002d8e:	b148      	cbz	r0, 8002da4 <HAL_I2S_DMAStop+0x2c>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002d90:	f7fe f897 	bl	8000ec2 <HAL_DMA_Abort>
 8002d94:	4605      	mov	r5, r0
 8002d96:	b130      	cbz	r0, 8002da6 <HAL_I2S_DMAStop+0x2e>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
 8002d9e:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002da0:	2501      	movs	r5, #1
 8002da2:	e000      	b.n	8002da6 <HAL_I2S_DMAStop+0x2e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002da4:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002da6:	2364      	movs	r3, #100	; 0x64
 8002da8:	2201      	movs	r2, #1
 8002daa:	2102      	movs	r1, #2
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff fde3 	bl	8002978 <I2S_WaitFlagStateUntilTimeout>
 8002db2:	b130      	cbz	r0, 8002dc2 <HAL_I2S_DMAStop+0x4a>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002db4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002dbc:	2501      	movs	r5, #1
 8002dbe:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002dc2:	2364      	movs	r3, #100	; 0x64
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff fdd5 	bl	8002978 <I2S_WaitFlagStateUntilTimeout>
 8002dce:	b130      	cbz	r0, 8002dde <HAL_I2S_DMAStop+0x66>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd8:	2501      	movs	r5, #1
 8002dda:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	69d3      	ldr	r3, [r2, #28]
 8002de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002de6:	61d3      	str	r3, [r2, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	9200      	str	r2, [sp, #0]
 8002df2:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	f022 0202 	bic.w	r2, r2, #2
 8002dfa:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002dfc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d005      	beq.n	8002e12 <HAL_I2S_DMAStop+0x9a>
  hi2s->State = HAL_I2S_STATE_READY;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	b004      	add	sp, #16
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
      if (hi2s->hdmarx != NULL)
 8002e12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e14:	b138      	cbz	r0, 8002e26 <HAL_I2S_DMAStop+0xae>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002e16:	f7fe f854 	bl	8000ec2 <HAL_DMA_Abort>
 8002e1a:	b120      	cbz	r0, 8002e26 <HAL_I2S_DMAStop+0xae>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002e24:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	4b62      	ldr	r3, [pc, #392]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d020      	beq.n	8002e70 <HAL_I2S_DMAStop+0xf8>
 8002e2e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002e32:	69d3      	ldr	r3, [r2, #28]
 8002e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e38:	61d3      	str	r3, [r2, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d016      	beq.n	8002e74 <HAL_I2S_DMAStop+0xfc>
 8002e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	9201      	str	r2, [sp, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	b963      	cbnz	r3, 8002e7a <HAL_I2S_DMAStop+0x102>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002e60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e66:	6463      	str	r3, [r4, #68]	; 0x44
        hi2s->State = HAL_I2S_STATE_READY;
 8002e68:	2501      	movs	r5, #1
 8002e6a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002e6e:	e7ca      	b.n	8002e06 <HAL_I2S_DMAStop+0x8e>
      __HAL_I2SEXT_DISABLE(hi2s);
 8002e70:	4a51      	ldr	r2, [pc, #324]	; (8002fb8 <HAL_I2S_DMAStop+0x240>)
 8002e72:	e7de      	b.n	8002e32 <HAL_I2S_DMAStop+0xba>
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002e74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e78:	e7e7      	b.n	8002e4a <HAL_I2S_DMAStop+0xd2>
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d003      	beq.n	8002e8a <HAL_I2S_DMAStop+0x112>
 8002e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	e7bd      	b.n	8002e06 <HAL_I2S_DMAStop+0x8e>
 8002e8a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e8e:	e7fa      	b.n	8002e86 <HAL_I2S_DMAStop+0x10e>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e94:	d004      	beq.n	8002ea0 <HAL_I2S_DMAStop+0x128>
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2S_DMAStop+0x128>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	e7b2      	b.n	8002e06 <HAL_I2S_DMAStop+0x8e>
    if (hi2s->hdmarx != NULL)
 8002ea0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ea2:	b148      	cbz	r0, 8002eb8 <HAL_I2S_DMAStop+0x140>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002ea4:	f7fe f80d 	bl	8000ec2 <HAL_DMA_Abort>
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	b130      	cbz	r0, 8002eba <HAL_I2S_DMAStop+0x142>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002eac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002eb4:	2501      	movs	r5, #1
 8002eb6:	e000      	b.n	8002eba <HAL_I2S_DMAStop+0x142>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb8:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002eba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b05      	cmp	r3, #5
 8002ec2:	d017      	beq.n	8002ef4 <HAL_I2S_DMAStop+0x17c>
    __HAL_I2S_DISABLE(hi2s);
 8002ec4:	6822      	ldr	r2, [r4, #0]
 8002ec6:	69d3      	ldr	r3, [r2, #28]
 8002ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ecc:	61d3      	str	r3, [r2, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9303      	str	r3, [sp, #12]
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	9203      	str	r2, [sp, #12]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	9203      	str	r2, [sp, #12]
 8002edc:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002ee6:	6863      	ldr	r3, [r4, #4]
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d05a      	beq.n	8002fa4 <HAL_I2S_DMAStop+0x22c>
      READ_REG((hi2s->Instance)->DR);
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	e788      	b.n	8002e06 <HAL_I2S_DMAStop+0x8e>
      if (hi2s->hdmatx != NULL)
 8002ef4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ef6:	b138      	cbz	r0, 8002f08 <HAL_I2S_DMAStop+0x190>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002ef8:	f7fd ffe3 	bl	8000ec2 <HAL_DMA_Abort>
 8002efc:	b120      	cbz	r0, 8002f08 <HAL_I2S_DMAStop+0x190>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002f06:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8002f08:	f7fd fe3a 	bl	8000b80 <HAL_GetTick>
 8002f0c:	4606      	mov	r6, r0
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002f0e:	e012      	b.n	8002f36 <HAL_I2S_DMAStop+0x1be>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6463      	str	r3, [r4, #68]	; 0x44
          hi2s->State = HAL_I2S_STATE_READY;
 8002f18:	2501      	movs	r5, #1
 8002f1a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002f1e:	e00a      	b.n	8002f36 <HAL_I2S_DMAStop+0x1be>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002f20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f013 0f02 	tst.w	r3, #2
 8002f2a:	d11e      	bne.n	8002f6a <HAL_I2S_DMAStop+0x1f2>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002f2c:	f7fd fe28 	bl	8000b80 <HAL_GetTick>
 8002f30:	1b80      	subs	r0, r0, r6
 8002f32:	2864      	cmp	r0, #100	; 0x64
 8002f34:	d8ec      	bhi.n	8002f10 <HAL_I2S_DMAStop+0x198>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_I2S_DMAStop+0x1a8>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f42:	e7ef      	b.n	8002f24 <HAL_I2S_DMAStop+0x1ac>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2s->State = HAL_I2S_STATE_READY;
 8002f4c:	2501      	movs	r5, #1
 8002f4e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002f52:	e00a      	b.n	8002f6a <HAL_I2S_DMAStop+0x1f2>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002f54:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002f5e:	d00b      	beq.n	8002f78 <HAL_I2S_DMAStop+0x200>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002f60:	f7fd fe0e 	bl	8000b80 <HAL_GetTick>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	2864      	cmp	r0, #100	; 0x64
 8002f68:	d8ec      	bhi.n	8002f44 <HAL_I2S_DMAStop+0x1cc>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d0f0      	beq.n	8002f54 <HAL_I2S_DMAStop+0x1dc>
 8002f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f76:	e7ef      	b.n	8002f58 <HAL_I2S_DMAStop+0x1e0>
      __HAL_I2SEXT_DISABLE(hi2s);
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7e:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002f80:	2300      	movs	r3, #0
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_I2S_DMAStop+0x23c>)
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d009      	beq.n	8002fa0 <HAL_I2S_DMAStop+0x228>
 8002f8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f90:	6893      	ldr	r3, [r2, #8]
 8002f92:	9302      	str	r3, [sp, #8]
 8002f94:	9b02      	ldr	r3, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f96:	6853      	ldr	r3, [r2, #4]
 8002f98:	f023 0302 	bic.w	r3, r3, #2
 8002f9c:	6053      	str	r3, [r2, #4]
 8002f9e:	e791      	b.n	8002ec4 <HAL_I2S_DMAStop+0x14c>
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002fa0:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_I2S_DMAStop+0x240>)
 8002fa2:	e7f5      	b.n	8002f90 <HAL_I2S_DMAStop+0x218>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002fa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002faa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002fac:	2501      	movs	r5, #1
 8002fae:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002fb2:	e728      	b.n	8002e06 <HAL_I2S_DMAStop+0x8e>
 8002fb4:	40003800 	.word	0x40003800
 8002fb8:	40003400 	.word	0x40003400

08002fbc <I2S_DMATxHalfCplt>:
{
 8002fbc:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002fbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002fc0:	f005 f840 	bl	8008044 <HAL_I2S_TxHalfCpltCallback>
}
 8002fc4:	bd08      	pop	{r3, pc}

08002fc6 <I2S_Transmit_IT>:
{
 8002fc6:	b508      	push	{r3, lr}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002fc8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002fca:	6803      	ldr	r3, [r0, #0]
 8002fcc:	8812      	ldrh	r2, [r2, #0]
 8002fce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002fd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 8002fd6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002fe0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	b103      	cbz	r3, 8002fe8 <I2S_Transmit_IT+0x22>
}
 8002fe6:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fe8:	6802      	ldr	r2, [r0, #0]
 8002fea:	6853      	ldr	r3, [r2, #4]
 8002fec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff0:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002ff8:	f005 f818 	bl	800802c <HAL_I2S_TxCpltCallback>
}
 8002ffc:	e7f3      	b.n	8002fe6 <I2S_Transmit_IT+0x20>

08002ffe <I2S_DMATxCplt>:
{
 8002ffe:	b508      	push	{r3, lr}
 8003000:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003002:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	b94b      	cbnz	r3, 800301c <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003008:	6802      	ldr	r2, [r0, #0]
 800300a:	6853      	ldr	r3, [r2, #4]
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003016:	2301      	movs	r3, #1
 8003018:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 800301c:	f005 f806 	bl	800802c <HAL_I2S_TxCpltCallback>
}
 8003020:	bd08      	pop	{r3, pc}

08003022 <HAL_I2S_RxCpltCallback>:
}
 8003022:	4770      	bx	lr

08003024 <I2S_Receive_IT>:
{
 8003024:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003026:	6803      	ldr	r3, [r0, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800302c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800302e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003030:	3302      	adds	r3, #2
 8003032:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003034:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800303e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003040:	b29b      	uxth	r3, r3
 8003042:	b103      	cbz	r3, 8003046 <I2S_Receive_IT+0x22>
}
 8003044:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003046:	6802      	ldr	r2, [r0, #0]
 8003048:	6853      	ldr	r3, [r2, #4]
 800304a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800304e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003050:	2301      	movs	r3, #1
 8003052:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003056:	f7ff ffe4 	bl	8003022 <HAL_I2S_RxCpltCallback>
}
 800305a:	e7f3      	b.n	8003044 <I2S_Receive_IT+0x20>

0800305c <HAL_I2S_ErrorCallback>:
}
 800305c:	4770      	bx	lr

0800305e <I2S_IRQHandler>:
{
 800305e:	b510      	push	{r4, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003064:	6802      	ldr	r2, [r0, #0]
 8003066:	6893      	ldr	r3, [r2, #8]
 8003068:	9303      	str	r3, [sp, #12]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800306a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b04      	cmp	r3, #4
 8003072:	d006      	beq.n	8003082 <I2S_IRQHandler+0x24>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003074:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b03      	cmp	r3, #3
 800307c:	d02c      	beq.n	80030d8 <I2S_IRQHandler+0x7a>
}
 800307e:	b004      	add	sp, #16
 8003080:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003082:	9b03      	ldr	r3, [sp, #12]
 8003084:	f013 0f01 	tst.w	r3, #1
 8003088:	d003      	beq.n	8003092 <I2S_IRQHandler+0x34>
 800308a:	6853      	ldr	r3, [r2, #4]
 800308c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003090:	d11f      	bne.n	80030d2 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003092:	9b03      	ldr	r3, [sp, #12]
 8003094:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003098:	d0ec      	beq.n	8003074 <I2S_IRQHandler+0x16>
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	f012 0f20 	tst.w	r2, #32
 80030a2:	d0e7      	beq.n	8003074 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030aa:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030ac:	2300      	movs	r3, #0
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	9201      	str	r2, [sp, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80030bc:	2301      	movs	r3, #1
 80030be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff ffc6 	bl	800305c <HAL_I2S_ErrorCallback>
 80030d0:	e7d0      	b.n	8003074 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80030d2:	f7ff ffa7 	bl	8003024 <I2S_Receive_IT>
 80030d6:	e7dc      	b.n	8003092 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	f013 0f02 	tst.w	r3, #2
 80030de:	d004      	beq.n	80030ea <I2S_IRQHandler+0x8c>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030e8:	d11d      	bne.n	8003126 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80030ea:	9b03      	ldr	r3, [sp, #12]
 80030ec:	f013 0f08 	tst.w	r3, #8
 80030f0:	d0c5      	beq.n	800307e <I2S_IRQHandler+0x20>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f012 0f20 	tst.w	r2, #32
 80030fa:	d0c0      	beq.n	800307e <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003102:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003104:	2300      	movs	r3, #0
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003110:	2301      	movs	r3, #1
 8003112:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003116:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ff9c 	bl	800305c <HAL_I2S_ErrorCallback>
}
 8003124:	e7ab      	b.n	800307e <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff ff4d 	bl	8002fc6 <I2S_Transmit_IT>
 800312c:	e7dd      	b.n	80030ea <I2S_IRQHandler+0x8c>

0800312e <I2S_DMAError>:
{
 800312e:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003130:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003132:	6802      	ldr	r2, [r0, #0]
 8003134:	6853      	ldr	r3, [r2, #4]
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003140:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8003142:	2301      	movs	r3, #1
 8003144:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003148:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8003150:	f7ff ff84 	bl	800305c <HAL_I2S_ErrorCallback>
}
 8003154:	bd08      	pop	{r3, pc}

08003156 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003156:	4770      	bx	lr

08003158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003158:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800315a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	6242      	str	r2, [r0, #36]	; 0x24
 8003160:	6802      	ldr	r2, [r0, #0]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8003166:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003170:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	b93b      	cbnz	r3, 8003186 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003176:	6802      	ldr	r2, [r0, #0]
 8003178:	6853      	ldr	r3, [r2, #4]
 800317a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800317e:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8003180:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003182:	b29b      	uxth	r3, r3
 8003184:	b103      	cbz	r3, 8003188 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003186:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8003188:	2301      	movs	r3, #1
 800318a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800318e:	f7ff ffe2 	bl	8003156 <HAL_I2SEx_TxRxCpltCallback>
}
 8003192:	e7f8      	b.n	8003186 <I2SEx_TxISR_I2S+0x2e>

08003194 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003194:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003196:	6802      	ldr	r2, [r0, #0]
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <I2SEx_RxISR_I2SExt+0x5c>)
 800319a:	429a      	cmp	r2, r3
 800319c:	d01c      	beq.n	80031d8 <I2SEx_RxISR_I2SExt+0x44>
 800319e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031a6:	1c99      	adds	r1, r3, #2
 80031a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80031aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031ac:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031b6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b963      	cbnz	r3, 80031d6 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031bc:	6802      	ldr	r2, [r0, #0]
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <I2SEx_RxISR_I2SExt+0x5c>)
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d00c      	beq.n	80031de <I2SEx_RxISR_I2SExt+0x4a>
 80031c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031c8:	6853      	ldr	r3, [r2, #4]
 80031ca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80031ce:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80031d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	b12b      	cbz	r3, 80031e2 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031d6:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80031d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80031dc:	e7e1      	b.n	80031a2 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031de:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <I2SEx_RxISR_I2SExt+0x60>)
 80031e0:	e7f2      	b.n	80031c8 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031e8:	f7ff ffb5 	bl	8003156 <HAL_I2SEx_TxRxCpltCallback>
}
 80031ec:	e7f3      	b.n	80031d6 <I2SEx_RxISR_I2SExt+0x42>
 80031ee:	bf00      	nop
 80031f0:	40003800 	.word	0x40003800
 80031f4:	40003400 	.word	0x40003400

080031f8 <I2SEx_TxISR_I2SExt>:
{
 80031f8:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	6242      	str	r2, [r0, #36]	; 0x24
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	6801      	ldr	r1, [r0, #0]
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <I2SEx_TxISR_I2SExt+0x5c>)
 8003206:	4299      	cmp	r1, r3
 8003208:	d018      	beq.n	800323c <I2SEx_TxISR_I2SExt+0x44>
 800320a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800320e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003210:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800321a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	b963      	cbnz	r3, 800323a <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003220:	6802      	ldr	r2, [r0, #0]
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <I2SEx_TxISR_I2SExt+0x5c>)
 8003224:	429a      	cmp	r2, r3
 8003226:	d00c      	beq.n	8003242 <I2SEx_TxISR_I2SExt+0x4a>
 8003228:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800322c:	6853      	ldr	r3, [r2, #4]
 800322e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003232:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8003234:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003236:	b29b      	uxth	r3, r3
 8003238:	b12b      	cbz	r3, 8003246 <I2SEx_TxISR_I2SExt+0x4e>
}
 800323a:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800323c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003240:	e7e5      	b.n	800320e <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <I2SEx_TxISR_I2SExt+0x60>)
 8003244:	e7f2      	b.n	800322c <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8003246:	2301      	movs	r3, #1
 8003248:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800324c:	f7ff ff83 	bl	8003156 <HAL_I2SEx_TxRxCpltCallback>
}
 8003250:	e7f3      	b.n	800323a <I2SEx_TxISR_I2SExt+0x42>
 8003252:	bf00      	nop
 8003254:	40003800 	.word	0x40003800
 8003258:	40003400 	.word	0x40003400

0800325c <I2SEx_RxISR_I2S>:
{
 800325c:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003264:	1c99      	adds	r1, r3, #2
 8003266:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003268:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800326a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003274:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003276:	b29b      	uxth	r3, r3
 8003278:	b93b      	cbnz	r3, 800328a <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800327a:	6802      	ldr	r2, [r0, #0]
 800327c:	6853      	ldr	r3, [r2, #4]
 800327e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003282:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8003284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	b103      	cbz	r3, 800328c <I2SEx_RxISR_I2S+0x30>
}
 800328a:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800328c:	2301      	movs	r3, #1
 800328e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003292:	f7ff ff60 	bl	8003156 <HAL_I2SEx_TxRxCpltCallback>
}
 8003296:	e7f8      	b.n	800328a <I2SEx_RxISR_I2S+0x2e>

08003298 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8003298:	b510      	push	{r4, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80032a4:	4a70      	ldr	r2, [pc, #448]	; (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d06f      	beq.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80032aa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032ae:	6891      	ldr	r1, [r2, #8]
 80032b0:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80032b6:	6853      	ldr	r3, [r2, #4]
 80032b8:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d001      	beq.n	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d170      	bne.n	80033a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80032c6:	9b05      	ldr	r3, [sp, #20]
 80032c8:	f013 0f02 	tst.w	r3, #2
 80032cc:	d003      	beq.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80032ce:	9b03      	ldr	r3, [sp, #12]
 80032d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032d4:	d15c      	bne.n	8003390 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80032d6:	9b04      	ldr	r3, [sp, #16]
 80032d8:	f013 0f01 	tst.w	r3, #1
 80032dc:	d003      	beq.n	80032e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80032de:	9b02      	ldr	r3, [sp, #8]
 80032e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032e4:	d158      	bne.n	8003398 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80032e6:	9b04      	ldr	r3, [sp, #16]
 80032e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032ec:	d024      	beq.n	8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80032ee:	9b02      	ldr	r3, [sp, #8]
 80032f0:	f013 0f20 	tst.w	r3, #32
 80032f4:	d020      	beq.n	8003338 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d050      	beq.n	80033a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 80032fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003302:	6853      	ldr	r3, [r2, #4]
 8003304:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003308:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	6853      	ldr	r3, [r2, #4]
 800330e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003312:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	9200      	str	r2, [sp, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8003324:	2301      	movs	r3, #1
 8003326:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800332a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003332:	4620      	mov	r0, r4
 8003334:	f7ff fe92 	bl	800305c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003338:	9b05      	ldr	r3, [sp, #20]
 800333a:	f013 0f08 	tst.w	r3, #8
 800333e:	d022      	beq.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8003340:	9b03      	ldr	r3, [sp, #12]
 8003342:	f013 0f20 	tst.w	r3, #32
 8003346:	d01e      	beq.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	6853      	ldr	r3, [r2, #4]
 800334c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003350:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	4b44      	ldr	r3, [pc, #272]	; (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8003356:	429a      	cmp	r2, r3
 8003358:	d024      	beq.n	80033a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800335a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800335e:	6853      	ldr	r3, [r2, #4]
 8003360:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003364:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003366:	2300      	movs	r3, #0
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003372:	2301      	movs	r3, #1
 8003374:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003378:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fe6b 	bl	800305c <HAL_I2S_ErrorCallback>
}
 8003386:	b006      	add	sp, #24
 8003388:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800338a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800338e:	e78e      	b.n	80032ae <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff fee1 	bl	8003158 <I2SEx_TxISR_I2S>
 8003396:	e79e      	b.n	80032d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8003398:	4620      	mov	r0, r4
 800339a:	f7ff fefb 	bl	8003194 <I2SEx_RxISR_I2SExt>
 800339e:	e7a2      	b.n	80032e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a0:	4a32      	ldr	r2, [pc, #200]	; (800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80033a2:	e7ae      	b.n	8003302 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033a4:	4a31      	ldr	r2, [pc, #196]	; (800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80033a6:	e7da      	b.n	800335e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80033a8:	9b04      	ldr	r3, [sp, #16]
 80033aa:	f013 0f02 	tst.w	r3, #2
 80033ae:	d003      	beq.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80033b0:	9b02      	ldr	r3, [sp, #8]
 80033b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033b6:	d14a      	bne.n	800344e <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80033b8:	9b05      	ldr	r3, [sp, #20]
 80033ba:	f013 0f01 	tst.w	r3, #1
 80033be:	d003      	beq.n	80033c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033c6:	d146      	bne.n	8003456 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033c8:	9b05      	ldr	r3, [sp, #20]
 80033ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033ce:	d01c      	beq.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	f013 0f20 	tst.w	r3, #32
 80033d6:	d018      	beq.n	800340a <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d8:	6822      	ldr	r2, [r4, #0]
 80033da:	6853      	ldr	r3, [r2, #4]
 80033dc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80033e0:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d039      	beq.n	800345e <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80033ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f4:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003404:	4620      	mov	r0, r4
 8003406:	f7ff fe29 	bl	800305c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800340a:	9b04      	ldr	r3, [sp, #16]
 800340c:	f013 0f08 	tst.w	r3, #8
 8003410:	d0b9      	beq.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8003412:	9b02      	ldr	r3, [sp, #8]
 8003414:	f013 0f20 	tst.w	r3, #32
 8003418:	d0b5      	beq.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800341a:	6822      	ldr	r2, [r4, #0]
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800341e:	429a      	cmp	r2, r3
 8003420:	d01f      	beq.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8003422:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003426:	6853      	ldr	r3, [r2, #4]
 8003428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800342c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800342e:	6822      	ldr	r2, [r4, #0]
 8003430:	6853      	ldr	r3, [r2, #4]
 8003432:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003436:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003438:	2301      	movs	r3, #1
 800343a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800343e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff fe08 	bl	800305c <HAL_I2S_ErrorCallback>
}
 800344c:	e79b      	b.n	8003386 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff fed2 	bl	80031f8 <I2SEx_TxISR_I2SExt>
 8003454:	e7b0      	b.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8003456:	4620      	mov	r0, r4
 8003458:	f7ff ff00 	bl	800325c <I2SEx_RxISR_I2S>
 800345c:	e7b4      	b.n	80033c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800345e:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8003460:	e7c5      	b.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003462:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8003464:	e7df      	b.n	8003426 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8003466:	bf00      	nop
 8003468:	40003800 	.word	0x40003800
 800346c:	40003400 	.word	0x40003400

08003470 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003470:	2800      	cmp	r0, #0
 8003472:	f000 81e0 	beq.w	8003836 <HAL_RCC_OscConfig+0x3c6>
{
 8003476:	b570      	push	{r4, r5, r6, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347c:	6803      	ldr	r3, [r0, #0]
 800347e:	f013 0f01 	tst.w	r3, #1
 8003482:	d03b      	beq.n	80034fc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003484:	4b9f      	ldr	r3, [pc, #636]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b04      	cmp	r3, #4
 800348e:	d02c      	beq.n	80034ea <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003490:	4b9c      	ldr	r3, [pc, #624]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003498:	2b08      	cmp	r3, #8
 800349a:	d021      	beq.n	80034e0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d04f      	beq.n	8003544 <HAL_RCC_OscConfig+0xd4>
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d052      	beq.n	8003550 <HAL_RCC_OscConfig+0xe0>
 80034aa:	4b96      	ldr	r3, [pc, #600]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d050      	beq.n	8003564 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fd fb5d 	bl	8000b80 <HAL_GetTick>
 80034c6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c8:	4b8e      	ldr	r3, [pc, #568]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034d0:	d114      	bne.n	80034fc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fd fb55 	bl	8000b80 <HAL_GetTick>
 80034d6:	1b40      	subs	r0, r0, r5
 80034d8:	2864      	cmp	r0, #100	; 0x64
 80034da:	d9f5      	bls.n	80034c8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80034dc:	2003      	movs	r0, #3
 80034de:	e1b1      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e0:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80034e8:	d0d8      	beq.n	800349c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b86      	ldr	r3, [pc, #536]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034f2:	d003      	beq.n	80034fc <HAL_RCC_OscConfig+0x8c>
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 819f 	beq.w	800383a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f013 0f02 	tst.w	r3, #2
 8003502:	d054      	beq.n	80035ae <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003504:	4b7f      	ldr	r3, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f013 0f0c 	tst.w	r3, #12
 800350c:	d03e      	beq.n	800358c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b7d      	ldr	r3, [pc, #500]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d033      	beq.n	8003582 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d068      	beq.n	80035f2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003520:	4b79      	ldr	r3, [pc, #484]	; (8003708 <HAL_RCC_OscConfig+0x298>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fd fb2b 	bl	8000b80 <HAL_GetTick>
 800352a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f013 0f02 	tst.w	r3, #2
 8003534:	d154      	bne.n	80035e0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fd fb23 	bl	8000b80 <HAL_GetTick>
 800353a:	1b40      	subs	r0, r0, r5
 800353c:	2802      	cmp	r0, #2
 800353e:	d9f5      	bls.n	800352c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003540:	2003      	movs	r0, #3
 8003542:	e17f      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	4a6f      	ldr	r2, [pc, #444]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e7b5      	b.n	80034bc <HAL_RCC_OscConfig+0x4c>
 8003550:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e7ab      	b.n	80034bc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003564:	f7fd fb0c 	bl	8000b80 <HAL_GetTick>
 8003568:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003572:	d0c3      	beq.n	80034fc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7fd fb04 	bl	8000b80 <HAL_GetTick>
 8003578:	1b40      	subs	r0, r0, r5
 800357a:	2864      	cmp	r0, #100	; 0x64
 800357c:	d9f5      	bls.n	800356a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800357e:	2003      	movs	r0, #3
 8003580:	e160      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003582:	4b60      	ldr	r3, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800358a:	d1c6      	bne.n	800351a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358c:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f013 0f02 	tst.w	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_OscConfig+0x12e>
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 8150 	bne.w	800383e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4a59      	ldr	r2, [pc, #356]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035a6:	6921      	ldr	r1, [r4, #16]
 80035a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035ac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f013 0f08 	tst.w	r3, #8
 80035b4:	d042      	beq.n	800363c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b6:	6963      	ldr	r3, [r4, #20]
 80035b8:	b36b      	cbz	r3, 8003616 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ba:	4b53      	ldr	r3, [pc, #332]	; (8003708 <HAL_RCC_OscConfig+0x298>)
 80035bc:	2201      	movs	r2, #1
 80035be:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fd fadd 	bl	8000b80 <HAL_GetTick>
 80035c6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c8:	4b4e      	ldr	r3, [pc, #312]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	f013 0f02 	tst.w	r3, #2
 80035d0:	d134      	bne.n	800363c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d2:	f7fd fad5 	bl	8000b80 <HAL_GetTick>
 80035d6:	1b40      	subs	r0, r0, r5
 80035d8:	2802      	cmp	r0, #2
 80035da:	d9f5      	bls.n	80035c8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80035dc:	2003      	movs	r0, #3
 80035de:	e131      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4a48      	ldr	r2, [pc, #288]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035e8:	6921      	ldr	r1, [r4, #16]
 80035ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e7dd      	b.n	80035ae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b45      	ldr	r3, [pc, #276]	; (8003708 <HAL_RCC_OscConfig+0x298>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035f8:	f7fd fac2 	bl	8000b80 <HAL_GetTick>
 80035fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f013 0f02 	tst.w	r3, #2
 8003606:	d0d2      	beq.n	80035ae <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003608:	f7fd faba 	bl	8000b80 <HAL_GetTick>
 800360c:	1b40      	subs	r0, r0, r5
 800360e:	2802      	cmp	r0, #2
 8003610:	d9f5      	bls.n	80035fe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003612:	2003      	movs	r0, #3
 8003614:	e116      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003616:	4b3c      	ldr	r3, [pc, #240]	; (8003708 <HAL_RCC_OscConfig+0x298>)
 8003618:	2200      	movs	r2, #0
 800361a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fd faaf 	bl	8000b80 <HAL_GetTick>
 8003622:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003628:	f013 0f02 	tst.w	r3, #2
 800362c:	d006      	beq.n	800363c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362e:	f7fd faa7 	bl	8000b80 <HAL_GetTick>
 8003632:	1b40      	subs	r0, r0, r5
 8003634:	2802      	cmp	r0, #2
 8003636:	d9f5      	bls.n	8003624 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003638:	2003      	movs	r0, #3
 800363a:	e103      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	f013 0f04 	tst.w	r3, #4
 8003642:	d077      	beq.n	8003734 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003644:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800364c:	d133      	bne.n	80036b6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 8003654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003666:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_RCC_OscConfig+0x29c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003672:	68a3      	ldr	r3, [r4, #8]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d034      	beq.n	80036e2 <HAL_RCC_OscConfig+0x272>
 8003678:	2b05      	cmp	r3, #5
 800367a:	d038      	beq.n	80036ee <HAL_RCC_OscConfig+0x27e>
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 800367e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	671a      	str	r2, [r3, #112]	; 0x70
 8003686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003688:	f022 0204 	bic.w	r2, r2, #4
 800368c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368e:	68a3      	ldr	r3, [r4, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03d      	beq.n	8003710 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd fa74 	bl	8000b80 <HAL_GetTick>
 8003698:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369a:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f013 0f02 	tst.w	r3, #2
 80036a2:	d146      	bne.n	8003732 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fa6c 	bl	8000b80 <HAL_GetTick>
 80036a8:	1b80      	subs	r0, r0, r6
 80036aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80036ae:	4298      	cmp	r0, r3
 80036b0:	d9f3      	bls.n	800369a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80036b2:	2003      	movs	r0, #3
 80036b4:	e0c6      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2500      	movs	r5, #0
 80036b8:	e7d6      	b.n	8003668 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <HAL_RCC_OscConfig+0x29c>)
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80036c4:	f7fd fa5c 	bl	8000b80 <HAL_GetTick>
 80036c8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x29c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036d2:	d1ce      	bne.n	8003672 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fd fa54 	bl	8000b80 <HAL_GetTick>
 80036d8:	1b80      	subs	r0, r0, r6
 80036da:	2802      	cmp	r0, #2
 80036dc:	d9f5      	bls.n	80036ca <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80036de:	2003      	movs	r0, #3
 80036e0:	e0b0      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80036e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	e7cf      	b.n	800368e <HAL_RCC_OscConfig+0x21e>
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_OscConfig+0x294>)
 80036f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f2:	f042 0204 	orr.w	r2, r2, #4
 80036f6:	671a      	str	r2, [r3, #112]	; 0x70
 80036f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	671a      	str	r2, [r3, #112]	; 0x70
 8003700:	e7c5      	b.n	800368e <HAL_RCC_OscConfig+0x21e>
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	42470000 	.word	0x42470000
 800370c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fd fa36 	bl	8000b80 <HAL_GetTick>
 8003714:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f013 0f02 	tst.w	r3, #2
 800371e:	d008      	beq.n	8003732 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fd fa2e 	bl	8000b80 <HAL_GetTick>
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	f241 3388 	movw	r3, #5000	; 0x1388
 800372a:	4298      	cmp	r0, r3
 800372c:	d9f3      	bls.n	8003716 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800372e:	2003      	movs	r0, #3
 8003730:	e088      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003732:	b9ed      	cbnz	r5, 8003770 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003734:	69a3      	ldr	r3, [r4, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8083 	beq.w	8003842 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800373c:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	f002 020c 	and.w	r2, r2, #12
 8003744:	2a08      	cmp	r2, #8
 8003746:	d051      	beq.n	80037ec <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	2b02      	cmp	r3, #2
 800374a:	d017      	beq.n	800377c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b45      	ldr	r3, [pc, #276]	; (8003864 <HAL_RCC_OscConfig+0x3f4>)
 800374e:	2200      	movs	r2, #0
 8003750:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd fa15 	bl	8000b80 <HAL_GetTick>
 8003756:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003758:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003760:	d042      	beq.n	80037e8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd fa0d 	bl	8000b80 <HAL_GetTick>
 8003766:	1b00      	subs	r0, r0, r4
 8003768:	2802      	cmp	r0, #2
 800376a:	d9f5      	bls.n	8003758 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800376c:	2003      	movs	r0, #3
 800376e:	e069      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 8003772:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	e7db      	b.n	8003734 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_RCC_OscConfig+0x3f4>)
 800377e:	2200      	movs	r2, #0
 8003780:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003782:	f7fd f9fd 	bl	8000b80 <HAL_GetTick>
 8003786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003790:	d006      	beq.n	80037a0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd f9f5 	bl	8000b80 <HAL_GetTick>
 8003796:	1b40      	subs	r0, r0, r5
 8003798:	2802      	cmp	r0, #2
 800379a:	d9f5      	bls.n	8003788 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800379c:	2003      	movs	r0, #3
 800379e:	e051      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a0:	69e3      	ldr	r3, [r4, #28]
 80037a2:	6a22      	ldr	r2, [r4, #32]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037a8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80037ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037ae:	0852      	lsrs	r2, r2, #1
 80037b0:	3a01      	subs	r2, #1
 80037b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 80037be:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_OscConfig+0x3f4>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80037c6:	f7fd f9db 	bl	8000b80 <HAL_GetTick>
 80037ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fd f9d3 	bl	8000b80 <HAL_GetTick>
 80037da:	1b00      	subs	r0, r0, r4
 80037dc:	2802      	cmp	r0, #2
 80037de:	d9f5      	bls.n	80037cc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80037e0:	2003      	movs	r0, #3
 80037e2:	e02f      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80037e4:	2000      	movs	r0, #0
 80037e6:	e02d      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 80037e8:	2000      	movs	r0, #0
 80037ea:	e02b      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d02b      	beq.n	8003848 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x3f0>)
 80037f2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80037f8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	4291      	cmp	r1, r2
 80037fc:	d126      	bne.n	800384c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003802:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003804:	428a      	cmp	r2, r1
 8003806:	d123      	bne.n	8003850 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003808:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800380e:	401a      	ands	r2, r3
 8003810:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003814:	d11e      	bne.n	8003854 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003816:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800381a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003820:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003826:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800382a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003830:	d114      	bne.n	800385c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8003832:	2000      	movs	r0, #0
 8003834:	e006      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8003836:	2001      	movs	r0, #1
}
 8003838:	4770      	bx	lr
        return HAL_ERROR;
 800383a:	2001      	movs	r0, #1
 800383c:	e002      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 800383e:	2001      	movs	r0, #1
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8003842:	2000      	movs	r0, #0
}
 8003844:	b002      	add	sp, #8
 8003846:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003848:	2001      	movs	r0, #1
 800384a:	e7fb      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
 800384e:	e7f9      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 8003850:	2001      	movs	r0, #1
 8003852:	e7f7      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 8003854:	2001      	movs	r0, #1
 8003856:	e7f5      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 8003858:	2001      	movs	r0, #1
 800385a:	e7f3      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 800385c:	2001      	movs	r0, #1
 800385e:	e7f1      	b.n	8003844 <HAL_RCC_OscConfig+0x3d4>
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d057      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0xbe>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d157      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003888:	d02a      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003892:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003896:	ebb1 000c 	subs.w	r0, r1, ip
 800389a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800389e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80038a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038a6:	0181      	lsls	r1, r0, #6
 80038a8:	1a09      	subs	r1, r1, r0
 80038aa:	eb63 030e 	sbc.w	r3, r3, lr
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b4:	00c9      	lsls	r1, r1, #3
 80038b6:	eb11 0c0c 	adds.w	ip, r1, ip
 80038ba:	f143 0300 	adc.w	r3, r3, #0
 80038be:	0259      	lsls	r1, r3, #9
 80038c0:	2300      	movs	r3, #0
 80038c2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80038c6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80038ca:	f7fc fc85 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ce:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80038da:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80038de:	e025      	b.n	800392c <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80038e8:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80038ec:	ebb1 000c 	subs.w	r0, r1, ip
 80038f0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80038f4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80038f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038fc:	0181      	lsls	r1, r0, #6
 80038fe:	1a09      	subs	r1, r1, r0
 8003900:	eb63 030e 	sbc.w	r3, r3, lr
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390a:	00c9      	lsls	r1, r1, #3
 800390c:	eb11 0c0c 	adds.w	ip, r1, ip
 8003910:	f143 0300 	adc.w	r3, r3, #0
 8003914:	0299      	lsls	r1, r3, #10
 8003916:	2300      	movs	r3, #0
 8003918:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800391c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003920:	f7fc fc5a 	bl	80001d8 <__aeabi_uldivmod>
 8003924:	e7d3      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003928:	e000      	b.n	800392c <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392a:	4803      	ldr	r0, [pc, #12]	; (8003938 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800392c:	bd08      	pop	{r3, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	007a1200 	.word	0x007a1200
 8003938:	00f42400 	.word	0x00f42400

0800393c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800393c:	2800      	cmp	r0, #0
 800393e:	f000 809b 	beq.w	8003a78 <HAL_RCC_ClockConfig+0x13c>
{
 8003942:	b570      	push	{r4, r5, r6, lr}
 8003944:	460d      	mov	r5, r1
 8003946:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	428b      	cmp	r3, r1
 8003952:	d208      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003954:	b2cb      	uxtb	r3, r1
 8003956:	4a4c      	ldr	r2, [pc, #304]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003958:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	6813      	ldr	r3, [r2, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	428b      	cmp	r3, r1
 8003962:	f040 808b 	bne.w	8003a7c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f013 0f02 	tst.w	r3, #2
 800396c:	d017      	beq.n	800399e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396e:	f013 0f04 	tst.w	r3, #4
 8003972:	d004      	beq.n	800397e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4a45      	ldr	r2, [pc, #276]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003976:	6893      	ldr	r3, [r2, #8]
 8003978:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800397c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	f013 0f08 	tst.w	r3, #8
 8003984:	d004      	beq.n	8003990 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003986:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003988:	6893      	ldr	r3, [r2, #8]
 800398a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800398e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003990:	4a3e      	ldr	r2, [pc, #248]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003992:	6893      	ldr	r3, [r2, #8]
 8003994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003998:	68a1      	ldr	r1, [r4, #8]
 800399a:	430b      	orrs	r3, r1
 800399c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	f013 0f01 	tst.w	r3, #1
 80039a4:	d032      	beq.n	8003a0c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d021      	beq.n	80039f0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ac:	1e9a      	subs	r2, r3, #2
 80039ae:	2a01      	cmp	r2, #1
 80039b0:	d925      	bls.n	80039fe <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4a36      	ldr	r2, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	f012 0f02 	tst.w	r2, #2
 80039ba:	d061      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039bc:	4933      	ldr	r1, [pc, #204]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039be:	688a      	ldr	r2, [r1, #8]
 80039c0:	f022 0203 	bic.w	r2, r2, #3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80039c8:	f7fd f8da 	bl	8000b80 <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039de:	f7fd f8cf 	bl	8000b80 <HAL_GetTick>
 80039e2:	1b80      	subs	r0, r0, r6
 80039e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80039e8:	4298      	cmp	r0, r3
 80039ea:	d9f0      	bls.n	80039ce <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80039ec:	2003      	movs	r0, #3
 80039ee:	e042      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80039f8:	d1e0      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80039fa:	2001      	movs	r0, #1
 80039fc:	e03b      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a06:	d1d9      	bne.n	80039bc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e034      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	42ab      	cmp	r3, r5
 8003a16:	d907      	bls.n	8003a28 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a18:	b2ea      	uxtb	r2, r5
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCC_ClockConfig+0x14c>)
 8003a1c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	d12d      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f013 0f04 	tst.w	r3, #4
 8003a2e:	d006      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a32:	6893      	ldr	r3, [r2, #8]
 8003a34:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003a38:	68e1      	ldr	r1, [r4, #12]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f013 0f08 	tst.w	r3, #8
 8003a44:	d007      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a48:	6893      	ldr	r3, [r2, #8]
 8003a4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a4e:	6921      	ldr	r1, [r4, #16]
 8003a50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a54:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a56:	f7ff ff07 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_ClockConfig+0x150>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x154>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	40d8      	lsrs	r0, r3
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x158>)
 8003a6a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x15c>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f7fd f83c 	bl	8000aec <HAL_InitTick>
  return HAL_OK;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
}
 8003a7a:	4770      	bx	lr
      return HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7fa      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
 8003a82:	e7f8      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003a84:	2001      	movs	r0, #1
 8003a86:	e7f6      	b.n	8003a76 <HAL_RCC_ClockConfig+0x13a>
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	08008508 	.word	0x08008508
 8003a94:	20000000 	.word	0x20000000
 8003a98:	20000008 	.word	0x20000008

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aaa:	f7ff fff7 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003ab6:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003ab8:	5cd3      	ldrb	r3, [r2, r3]
}
 8003aba:	40d8      	lsrs	r0, r3
 8003abc:	bd08      	pop	{r3, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	08008518 	.word	0x08008518

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b530      	push	{r4, r5, lr}
 8003aca:	b083      	sub	sp, #12
 8003acc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ace:	6803      	ldr	r3, [r0, #0]
 8003ad0:	f013 0f05 	tst.w	r3, #5
 8003ad4:	d10e      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f013 0f02 	tst.w	r3, #2
 8003adc:	d138      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f013 0f08 	tst.w	r3, #8
 8003ae4:	f000 809d 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ae8:	7d22      	ldrb	r2, [r4, #20]
 8003aea:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003af0:	2000      	movs	r0, #0
 8003af2:	e097      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_DISABLE();
 8003af4:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003afa:	f7fd f841 	bl	8000b80 <HAL_GetTick>
 8003afe:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003b08:	d006      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b0a:	f7fd f839 	bl	8000b80 <HAL_GetTick>
 8003b0e:	1b43      	subs	r3, r0, r5
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d9f5      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8003b14:	2003      	movs	r0, #3
 8003b16:	e085      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	68a2      	ldr	r2, [r4, #8]
 8003b1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003b20:	68e2      	ldr	r2, [r4, #12]
 8003b22:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003b26:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8003b32:	f7fd f825 	bl	8000b80 <HAL_GetTick>
 8003b36:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b38:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003b40:	d1c9      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b42:	f7fd f81d 	bl	8000b80 <HAL_GetTick>
 8003b46:	1b40      	subs	r0, r0, r5
 8003b48:	2802      	cmp	r0, #2
 8003b4a:	d9f5      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	e069      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	2300      	movs	r3, #0
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003b68:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b70:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b72:	f7fd f805 	bl	8000b80 <HAL_GetTick>
 8003b76:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b78:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b80:	d106      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fc fffd 	bl	8000b80 <HAL_GetTick>
 8003b86:	1b43      	subs	r3, r0, r5
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d9f5      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	e049      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b94:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003b98:	d014      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003b9a:	6922      	ldr	r2, [r4, #16]
 8003b9c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d00f      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ba8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bac:	491f      	ldr	r1, [pc, #124]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003bba:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	f013 0f01 	tst.w	r3, #1
 8003bc2:	d112      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x122>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003bca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003bce:	d01d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd2:	6893      	ldr	r3, [r2, #8]
 8003bd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bd8:	6093      	str	r3, [r2, #8]
 8003bda:	4915      	ldr	r1, [pc, #84]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bdc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003bde:	6922      	ldr	r2, [r4, #16]
 8003be0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003be4:	4313      	orrs	r3, r2
 8003be6:	670b      	str	r3, [r1, #112]	; 0x70
 8003be8:	e779      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8003bea:	f7fc ffc9 	bl	8000b80 <HAL_GetTick>
 8003bee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f013 0f02 	tst.w	r3, #2
 8003bf8:	d1e4      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fc ffc1 	bl	8000b80 <HAL_GetTick>
 8003bfe:	1b40      	subs	r0, r0, r5
 8003c00:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c04:	4298      	cmp	r0, r3
 8003c06:	d9f3      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
 8003c08:	2003      	movs	r0, #3
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0c:	4908      	ldr	r1, [pc, #32]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c0e:	688a      	ldr	r2, [r1, #8]
 8003c10:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003c14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
 8003c20:	e7db      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x112>
  return HAL_OK;
 8003c22:	2000      	movs	r0, #0
}
 8003c24:	b003      	add	sp, #12
 8003c26:	bd30      	pop	{r4, r5, pc}
 8003c28:	42471000 	.word	0x42471000
 8003c2c:	42470000 	.word	0x42470000
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40007000 	.word	0x40007000

08003c38 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCCEx_GetPeriphCLKConfig+0x4c>)
 8003c3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c42:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8003c46:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c4c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8003c50:	60c2      	str	r2, [r0, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8003c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003c5a:	6042      	str	r2, [r0, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c64:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	6102      	str	r2, [r0, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8003c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c74:	d102      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKConfig+0x44>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8003c76:	2300      	movs	r3, #0
 8003c78:	7503      	strb	r3, [r0, #20]
 8003c7a:	4770      	bx	lr
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	7503      	strb	r3, [r0, #20]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003c92:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8003c94:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d125      	bne.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8003c9e:	4815      	ldr	r0, [pc, #84]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8003ca0:	4770      	bx	lr
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb6:	4810      	ldr	r0, [pc, #64]	; (8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8003cb8:	fbb0 f3f3 	udiv	r3, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003cbe:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8003cc2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003cc6:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cca:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003cce:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003cd2:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003cd6:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce2:	4806      	ldr	r0, [pc, #24]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 8003ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce8:	e7e8      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cea:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	00bb8000 	.word	0x00bb8000
 8003cf8:	007a1200 	.word	0x007a1200
 8003cfc:	00f42400 	.word	0x00f42400

08003d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d00:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	4a0e      	ldr	r2, [pc, #56]	; (8003d48 <USB_CoreReset+0x48>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d814      	bhi.n	8003d3c <USB_CoreReset+0x3c>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d12:	6903      	ldr	r3, [r0, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	daf6      	bge.n	8003d06 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d1c:	6903      	ldr	r3, [r0, #16]
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003d24:	9b01      	ldr	r3, [sp, #4]
 8003d26:	3301      	adds	r3, #1
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <USB_CoreReset+0x48>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d808      	bhi.n	8003d42 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d30:	6903      	ldr	r3, [r0, #16]
 8003d32:	f013 0f01 	tst.w	r3, #1
 8003d36:	d1f5      	bne.n	8003d24 <USB_CoreReset+0x24>

  return HAL_OK;
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e000      	b.n	8003d3e <USB_CoreReset+0x3e>
      return HAL_TIMEOUT;
 8003d3c:	2003      	movs	r0, #3
}
 8003d3e:	b002      	add	sp, #8
 8003d40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003d42:	2003      	movs	r0, #3
 8003d44:	e7fb      	b.n	8003d3e <USB_CoreReset+0x3e>
 8003d46:	bf00      	nop
 8003d48:	00030d40 	.word	0x00030d40

08003d4c <USB_CoreInit>:
{
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	4604      	mov	r4, r0
 8003d52:	a803      	add	r0, sp, #12
 8003d54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d58:	9b08      	ldr	r3, [sp, #32]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d11f      	bne.n	8003d9e <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d64:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d78:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8003d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d009      	beq.n	8003d94 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8003d80:	4620      	mov	r0, r4
 8003d82:	f7ff ffbd 	bl	8003d00 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003d86:	9b06      	ldr	r3, [sp, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d01b      	beq.n	8003dc4 <USB_CoreInit+0x78>
}
 8003d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d90:	b004      	add	sp, #16
 8003d92:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d94:	68e3      	ldr	r3, [r4, #12]
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d9a:	60e3      	str	r3, [r4, #12]
 8003d9c:	e7f0      	b.n	8003d80 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d9e:	68e3      	ldr	r3, [r4, #12]
 8003da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da4:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff ffaa 	bl	8003d00 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dae:	b923      	cbnz	r3, 8003dba <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	63a3      	str	r3, [r4, #56]	; 0x38
 8003db8:	e7e5      	b.n	8003d86 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	63a3      	str	r3, [r4, #56]	; 0x38
 8003dc2:	e7e0      	b.n	8003d86 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dc4:	68a3      	ldr	r3, [r4, #8]
 8003dc6:	f043 0306 	orr.w	r3, r3, #6
 8003dca:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	f043 0320 	orr.w	r3, r3, #32
 8003dd2:	60a3      	str	r3, [r4, #8]
 8003dd4:	e7da      	b.n	8003d8c <USB_CoreInit+0x40>

08003dd6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003dd6:	6883      	ldr	r3, [r0, #8]
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6083      	str	r3, [r0, #8]
}
 8003dde:	2000      	movs	r0, #0
 8003de0:	4770      	bx	lr

08003de2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003de2:	6883      	ldr	r3, [r0, #8]
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6083      	str	r3, [r0, #8]
}
 8003dea:	2000      	movs	r0, #0
 8003dec:	4770      	bx	lr
	...

08003df0 <USB_FlushTxFifo>:
{
 8003df0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003df6:	0189      	lsls	r1, r1, #6
 8003df8:	f041 0120 	orr.w	r1, r1, #32
 8003dfc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	3301      	adds	r3, #1
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <USB_FlushTxFifo+0x2c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d805      	bhi.n	8003e16 <USB_FlushTxFifo+0x26>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e0a:	6903      	ldr	r3, [r0, #16]
 8003e0c:	f013 0f20 	tst.w	r3, #32
 8003e10:	d1f5      	bne.n	8003dfe <USB_FlushTxFifo+0xe>
  return HAL_OK;
 8003e12:	2000      	movs	r0, #0
 8003e14:	e000      	b.n	8003e18 <USB_FlushTxFifo+0x28>
      return HAL_TIMEOUT;
 8003e16:	2003      	movs	r0, #3
}
 8003e18:	b002      	add	sp, #8
 8003e1a:	4770      	bx	lr
 8003e1c:	00030d40 	.word	0x00030d40

08003e20 <USB_FlushRxFifo>:
{
 8003e20:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e26:	2310      	movs	r3, #16
 8003e28:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8003e2a:	9b01      	ldr	r3, [sp, #4]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <USB_FlushRxFifo+0x28>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d805      	bhi.n	8003e42 <USB_FlushRxFifo+0x22>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e36:	6903      	ldr	r3, [r0, #16]
 8003e38:	f013 0f10 	tst.w	r3, #16
 8003e3c:	d1f5      	bne.n	8003e2a <USB_FlushRxFifo+0xa>
  return HAL_OK;
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e000      	b.n	8003e44 <USB_FlushRxFifo+0x24>
      return HAL_TIMEOUT;
 8003e42:	2003      	movs	r0, #3
}
 8003e44:	b002      	add	sp, #8
 8003e46:	4770      	bx	lr
 8003e48:	00030d40 	.word	0x00030d40

08003e4c <USB_WritePacket>:
{
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003e52:	b984      	cbnz	r4, 8003e76 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e54:	3303      	adds	r3, #3
 8003e56:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8003e5a:	f04f 0c00 	mov.w	ip, #0
 8003e5e:	e008      	b.n	8003e72 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e60:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	f851 4b04 	ldr.w	r4, [r1], #4
 8003e6c:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003e6e:	f10c 0c01 	add.w	ip, ip, #1
 8003e72:	45f4      	cmp	ip, lr
 8003e74:	d3f4      	bcc.n	8003e60 <USB_WritePacket+0x14>
}
 8003e76:	2000      	movs	r0, #0
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <USB_ReadPacket>:
{
 8003e7a:	b500      	push	{lr}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	4684      	mov	ip, r0
 8003e80:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e82:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003e86:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e005      	b.n	8003e9a <USB_ReadPacket+0x20>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e8e:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8003e92:	6809      	ldr	r1, [r1, #0]
 8003e94:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003e98:	3301      	adds	r3, #1
 8003e9a:	4573      	cmp	r3, lr
 8003e9c:	d3f7      	bcc.n	8003e8e <USB_ReadPacket+0x14>
  if (remaining_bytes != 0U)
 8003e9e:	b19a      	cbz	r2, 8003ec8 <USB_ReadPacket+0x4e>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ea0:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8003ea4:	f8dc 3000 	ldr.w	r3, [ip]
 8003ea8:	9301      	str	r3, [sp, #4]
    i = 0U;
 8003eaa:	f04f 0c00 	mov.w	ip, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003eae:	fa5f f38c 	uxtb.w	r3, ip
 8003eb2:	00d9      	lsls	r1, r3, #3
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	40cb      	lsrs	r3, r1
 8003eb8:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003ebc:	f10c 0c01 	add.w	ip, ip, #1
      remaining_bytes--;
 8003ec0:	3a01      	subs	r2, #1
 8003ec2:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	d1f2      	bne.n	8003eae <USB_ReadPacket+0x34>
}
 8003ec8:	b003      	add	sp, #12
 8003eca:	f85d fb04 	ldr.w	pc, [sp], #4

08003ece <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003ece:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003ed0:	6980      	ldr	r0, [r0, #24]
}
 8003ed2:	4010      	ands	r0, r2
 8003ed4:	4770      	bx	lr

08003ed6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003ed6:	6940      	ldr	r0, [r0, #20]
}
 8003ed8:	f000 0001 	and.w	r0, r0, #1
 8003edc:	4770      	bx	lr

08003ede <USB_SetCurrentMode>:
{
 8003ede:	b538      	push	{r3, r4, r5, lr}
 8003ee0:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ee2:	68c3      	ldr	r3, [r0, #12]
 8003ee4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ee8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003eea:	2901      	cmp	r1, #1
 8003eec:	d013      	beq.n	8003f16 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003eee:	bb19      	cbnz	r1, 8003f38 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ef0:	68c3      	ldr	r3, [r0, #12]
 8003ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ef6:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003ef8:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003efa:	2001      	movs	r0, #1
 8003efc:	f7fc fe46 	bl	8000b8c <HAL_Delay>
      ms++;
 8003f00:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f02:	4628      	mov	r0, r5
 8003f04:	f7ff ffe7 	bl	8003ed6 <USB_GetMode>
 8003f08:	b108      	cbz	r0, 8003f0e <USB_SetCurrentMode+0x30>
 8003f0a:	2c31      	cmp	r4, #49	; 0x31
 8003f0c:	d9f5      	bls.n	8003efa <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003f0e:	2c32      	cmp	r4, #50	; 0x32
 8003f10:	d014      	beq.n	8003f3c <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003f12:	2000      	movs	r0, #0
}
 8003f14:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f16:	68c3      	ldr	r3, [r0, #12]
 8003f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f1c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003f1e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7fc fe33 	bl	8000b8c <HAL_Delay>
      ms++;
 8003f26:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f7ff ffd4 	bl	8003ed6 <USB_GetMode>
 8003f2e:	2801      	cmp	r0, #1
 8003f30:	d0ed      	beq.n	8003f0e <USB_SetCurrentMode+0x30>
 8003f32:	2c31      	cmp	r4, #49	; 0x31
 8003f34:	d9f4      	bls.n	8003f20 <USB_SetCurrentMode+0x42>
 8003f36:	e7ea      	b.n	8003f0e <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e7eb      	b.n	8003f14 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e7e9      	b.n	8003f14 <USB_SetCurrentMode+0x36>

08003f40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f40:	b084      	sub	sp, #16
 8003f42:	b510      	push	{r4, lr}
 8003f44:	4604      	mov	r4, r0
 8003f46:	a803      	add	r0, sp, #12
 8003f48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f58:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f5c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f60:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f68:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f70:	d010      	beq.n	8003f94 <USB_HostInit+0x54>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003f72:	9b05      	ldr	r3, [sp, #20]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d006      	beq.n	8003f86 <USB_HostInit+0x46>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f78:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003f84:	e00c      	b.n	8003fa0 <USB_HostInit+0x60>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003f86:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003f92:	e005      	b.n	8003fa0 <USB_HostInit+0x60>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003f94:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f7ff ff24 	bl	8003df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff ff39 	bl	8003e20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	e009      	b.n	8003fc6 <USB_HostInit+0x86>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003fb2:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8003fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fba:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8003fc4:	3201      	adds	r2, #1
 8003fc6:	9b04      	ldr	r3, [sp, #16]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d8f2      	bhi.n	8003fb2 <USB_HostInit+0x72>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003fd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fdc:	d017      	beq.n	800400e <USB_HostInit+0xce>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003fe4:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003fe8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <USB_HostInit+0xe0>)
 8003fec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ff0:	9b06      	ldr	r3, [sp, #24]
 8003ff2:	b91b      	cbnz	r3, 8003ffc <USB_HostInit+0xbc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ff4:	69a3      	ldr	r3, [r4, #24]
 8003ff6:	f043 0310 	orr.w	r3, r3, #16
 8003ffa:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ffc:	69a2      	ldr	r2, [r4, #24]
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <USB_HostInit+0xe4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8004004:	2000      	movs	r0, #0
 8004006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400a:	b004      	add	sp, #16
 800400c:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004012:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004016:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <USB_HostInit+0xe8>)
 800401a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800401e:	e7e7      	b.n	8003ff0 <USB_HostInit+0xb0>
 8004020:	00e00300 	.word	0x00e00300
 8004024:	a3200008 	.word	0xa3200008
 8004028:	004000e0 	.word	0x004000e0

0800402c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800402c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8004030:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800403c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004040:	f001 0203 	and.w	r2, r1, #3
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 800404a:	2901      	cmp	r1, #1
 800404c:	d003      	beq.n	8004056 <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800404e:	2902      	cmp	r1, #2
 8004050:	d006      	beq.n	8004060 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 8004052:	2000      	movs	r0, #0
 8004054:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8004056:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800405a:	f8cc 3004 	str.w	r3, [ip, #4]
 800405e:	e7f8      	b.n	8004052 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 8004060:	f241 7370 	movw	r3, #6000	; 0x1770
 8004064:	f8cc 3004 	str.w	r3, [ip, #4]
 8004068:	e7f3      	b.n	8004052 <USB_InitFSLSPClkSel+0x26>

0800406a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800406a:	b530      	push	{r4, r5, lr}
 800406c:	b083      	sub	sp, #12
 800406e:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004070:	2500      	movs	r5, #0
 8004072:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004074:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004078:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800407a:	9b01      	ldr	r3, [sp, #4]
 800407c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004080:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004082:	9b01      	ldr	r3, [sp, #4]
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800408c:	2064      	movs	r0, #100	; 0x64
 800408e:	f7fc fd7d 	bl	8000b8c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004098:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800409c:	200a      	movs	r0, #10
 800409e:	f7fc fd75 	bl	8000b8c <HAL_Delay>

  return HAL_OK;
}
 80040a2:	4628      	mov	r0, r5
 80040a4:	b003      	add	sp, #12
 80040a6:	bd30      	pop	{r4, r5, pc}

080040a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80040a8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80040ae:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80040b2:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040b4:	9b01      	ldr	r3, [sp, #4]
 80040b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040ba:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80040c2:	d101      	bne.n	80040c8 <USB_DriveVbus+0x20>
 80040c4:	2901      	cmp	r1, #1
 80040c6:	d00c      	beq.n	80040e2 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80040c8:	9b01      	ldr	r3, [sp, #4]
 80040ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80040ce:	d005      	beq.n	80040dc <USB_DriveVbus+0x34>
 80040d0:	b921      	cbnz	r1, 80040dc <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80040d2:	9b01      	ldr	r3, [sp, #4]
 80040d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80040dc:	2000      	movs	r0, #0
 80040de:	b002      	add	sp, #8
 80040e0:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040e8:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 80040ec:	e7ec      	b.n	80040c8 <USB_DriveVbus+0x20>

080040ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040ee:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80040f4:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80040f8:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80040fa:	9801      	ldr	r0, [sp, #4]
}
 80040fc:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004100:	b002      	add	sp, #8
 8004102:	4770      	bx	lr

08004104 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004104:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004108:	6880      	ldr	r0, [r0, #8]
}
 800410a:	b280      	uxth	r0, r0
 800410c:	4770      	bx	lr

0800410e <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800410e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004112:	4691      	mov	r9, r2
 8004114:	461c      	mov	r4, r3
 8004116:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800411a:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 800411e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004128:	2d03      	cmp	r5, #3
 800412a:	d86a      	bhi.n	8004202 <USB_HC_Init+0xf4>
 800412c:	e8df f005 	tbb	[pc, r5]
 8004130:	18025b02 	.word	0x18025b02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004134:	f240 429d 	movw	r2, #1181	; 0x49d
 8004138:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800413a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800413e:	d109      	bne.n	8004154 <USB_HC_Init+0x46>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004140:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004142:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004146:	d05e      	beq.n	8004206 <USB_HC_Init+0xf8>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800414e:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004150:	2700      	movs	r7, #0
 8004152:	e00c      	b.n	800416e <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800415c:	2700      	movs	r7, #0
 800415e:	e006      	b.n	800416e <USB_HC_Init+0x60>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004160:	f240 629d 	movw	r2, #1693	; 0x69d
 8004164:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004166:	f019 0f80 	tst.w	r9, #128	; 0x80
 800416a:	d136      	bne.n	80041da <USB_HC_Init+0xcc>
  HAL_StatusTypeDef ret = HAL_OK;
 800416c:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800416e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 8004172:	f001 010f 	and.w	r1, r1, #15
 8004176:	2201      	movs	r2, #1
 8004178:	fa02 f101 	lsl.w	r1, r2, r1
 800417c:	4319      	orrs	r1, r3
 800417e:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004182:	6983      	ldr	r3, [r0, #24]
 8004184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004188:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800418a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800418e:	d13c      	bne.n	800420a <USB_HC_Init+0xfc>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8004190:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004194:	f7ff ffab 	bl	80040ee <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004198:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d037      	beq.n	8004210 <USB_HC_Init+0x102>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 80041a0:	2100      	movs	r1, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041a2:	05a3      	lsls	r3, r4, #22
 80041a4:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041a8:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 80041ac:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041b0:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041b4:	04ac      	lsls	r4, r5, #18
 80041b6:	f404 2440 	and.w	r4, r4, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80041ba:	4323      	orrs	r3, r4
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041bc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80041c0:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80041c4:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80041c6:	ea43 0308 	orr.w	r3, r3, r8
 80041ca:	430b      	orrs	r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80041cc:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 80041d0:	2d03      	cmp	r5, #3
 80041d2:	d024      	beq.n	800421e <USB_HC_Init+0x110>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
  }

  return ret;
}
 80041d4:	4638      	mov	r0, r7
 80041d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e0:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80041e2:	2700      	movs	r7, #0
 80041e4:	e7c3      	b.n	800416e <USB_HC_Init+0x60>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041e6:	f240 2225 	movw	r2, #549	; 0x225
 80041ea:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80041ec:	f019 0f80 	tst.w	r9, #128	; 0x80
 80041f0:	d101      	bne.n	80041f6 <USB_HC_Init+0xe8>
  HAL_StatusTypeDef ret = HAL_OK;
 80041f2:	2700      	movs	r7, #0
 80041f4:	e7bb      	b.n	800416e <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80041fc:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80041fe:	2700      	movs	r7, #0
 8004200:	e7b5      	b.n	800416e <USB_HC_Init+0x60>
  switch (ep_type)
 8004202:	2701      	movs	r7, #1
 8004204:	e7b3      	b.n	800416e <USB_HC_Init+0x60>
  HAL_StatusTypeDef ret = HAL_OK;
 8004206:	2700      	movs	r7, #0
 8004208:	e7b1      	b.n	800416e <USB_HC_Init+0x60>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800420a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800420e:	e7c1      	b.n	8004194 <USB_HC_Init+0x86>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004210:	2802      	cmp	r0, #2
 8004212:	d002      	beq.n	800421a <USB_HC_Init+0x10c>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004214:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004218:	e7c3      	b.n	80041a2 <USB_HC_Init+0x94>
    HCcharLowSpeed = 0U;
 800421a:	2100      	movs	r1, #0
 800421c:	e7c1      	b.n	80041a2 <USB_HC_Init+0x94>
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800421e:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8004222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004226:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
 800422a:	e7d3      	b.n	80041d4 <USB_HC_Init+0xc6>

0800422c <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800422c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004230:	6940      	ldr	r0, [r0, #20]
}
 8004232:	b280      	uxth	r0, r0
 8004234:	4770      	bx	lr

08004236 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004236:	b430      	push	{r4, r5}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004238:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800423c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8004240:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004244:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004248:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800424c:	6885      	ldr	r5, [r0, #8]
 800424e:	f015 0f20 	tst.w	r5, #32
 8004252:	d002      	beq.n	800425a <USB_HC_Halt+0x24>
 8004254:	0fe4      	lsrs	r4, r4, #31
 8004256:	2c00      	cmp	r4, #0
 8004258:	d055      	beq.n	8004306 <USB_HC_Halt+0xd0>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800425a:	b333      	cbz	r3, 80042aa <USB_HC_Halt+0x74>
 800425c:	2b02      	cmp	r3, #2
 800425e:	d024      	beq.n	80042aa <USB_HC_Halt+0x74>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004260:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004268:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800426c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8004270:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 8004274:	d14a      	bne.n	800430c <USB_HC_Halt+0xd6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004276:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 800427a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800427e:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004282:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8004286:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800428a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800428e:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 8004292:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004296:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
      do
      {
        if (++count > 1000U)
 800429a:	3301      	adds	r3, #1
 800429c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a0:	d831      	bhi.n	8004306 <USB_HC_Halt+0xd0>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042a2:	6811      	ldr	r1, [r2, #0]
 80042a4:	2900      	cmp	r1, #0
 80042a6:	dbf8      	blt.n	800429a <USB_HC_Halt+0x64>
 80042a8:	e02d      	b.n	8004306 <USB_HC_Halt+0xd0>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80042aa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80042ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80042b6:	6883      	ldr	r3, [r0, #8]
 80042b8:	f013 0f20 	tst.w	r3, #32
 80042bc:	d123      	bne.n	8004306 <USB_HC_Halt+0xd0>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80042be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042c0:	f413 037f 	ands.w	r3, r3, #16711680	; 0xff0000
 80042c4:	d119      	bne.n	80042fa <USB_HC_Halt+0xc4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80042c6:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80042ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80042ce:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042d2:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80042d6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80042da:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80042de:	f8d1 0500 	ldr.w	r0, [r1, #1280]	; 0x500
 80042e2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80042e6:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
          if (++count > 1000U)
 80042ea:	3301      	adds	r3, #1
 80042ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f0:	d809      	bhi.n	8004306 <USB_HC_Halt+0xd0>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80042f2:	6811      	ldr	r1, [r2, #0]
 80042f4:	2900      	cmp	r1, #0
 80042f6:	dbf8      	blt.n	80042ea <USB_HC_Halt+0xb4>
 80042f8:	e005      	b.n	8004306 <USB_HC_Halt+0xd0>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042fa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80042fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004302:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8004306:	2000      	movs	r0, #0
 8004308:	bc30      	pop	{r4, r5}
 800430a:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800430c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8004310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004314:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8004318:	e7f5      	b.n	8004306 <USB_HC_Halt+0xd0>
	...

0800431c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800431c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8004320:	4a06      	ldr	r2, [pc, #24]	; (800433c <USB_DoPing+0x20>)
 8004322:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004326:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800432a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800432e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004332:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8004336:	2000      	movs	r0, #0
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	80080000 	.word	0x80080000

08004340 <USB_HC_StartXfer>:
{
 8004340:	b530      	push	{r4, r5, lr}
 8004342:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004344:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004346:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004348:	f414 7f80 	tst.w	r4, #256	; 0x100
 800434c:	d007      	beq.n	800435e <USB_HC_StartXfer+0x1e>
 800434e:	790c      	ldrb	r4, [r1, #4]
 8004350:	b92c      	cbnz	r4, 800435e <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004352:	2a01      	cmp	r2, #1
 8004354:	d016      	beq.n	8004384 <USB_HC_StartXfer+0x44>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004356:	b912      	cbnz	r2, 800435e <USB_HC_StartXfer+0x1e>
 8004358:	794c      	ldrb	r4, [r1, #5]
 800435a:	2c01      	cmp	r4, #1
 800435c:	d01f      	beq.n	800439e <USB_HC_StartXfer+0x5e>
  if (hc->xfer_len > 0U)
 800435e:	694c      	ldr	r4, [r1, #20]
 8004360:	b30c      	cbz	r4, 80043a6 <USB_HC_StartXfer+0x66>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004362:	890d      	ldrh	r5, [r1, #8]
 8004364:	eb04 0c05 	add.w	ip, r4, r5
 8004368:	f10c 3cff 	add.w	ip, ip, #4294967295
 800436c:	fbbc fcf5 	udiv	ip, ip, r5
 8004370:	fa1f fc8c 	uxth.w	ip, ip
    if (num_packets > max_hc_pkt_count)
 8004374:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8004378:	d917      	bls.n	80043aa <USB_HC_StartXfer+0x6a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800437a:	022d      	lsls	r5, r5, #8
 800437c:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 800437e:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8004382:	e012      	b.n	80043aa <USB_HC_StartXfer+0x6a>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004384:	79cc      	ldrb	r4, [r1, #7]
 8004386:	b10c      	cbz	r4, 800438c <USB_HC_StartXfer+0x4c>
 8004388:	2c02      	cmp	r4, #2
 800438a:	d1e4      	bne.n	8004356 <USB_HC_StartXfer+0x16>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800438c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8004390:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8004394:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8004398:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 800439c:	e7db      	b.n	8004356 <USB_HC_StartXfer+0x16>
      (void)USB_DoPing(USBx, hc->ch_num);
 800439e:	7849      	ldrb	r1, [r1, #1]
 80043a0:	f7ff ffbc 	bl	800431c <USB_DoPing>
      return HAL_OK;
 80043a4:	e070      	b.n	8004488 <USB_HC_StartXfer+0x148>
    num_packets = 1U;
 80043a6:	f04f 0c01 	mov.w	ip, #1
  if (hc->ep_is_in != 0U)
 80043aa:	78cd      	ldrb	r5, [r1, #3]
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	d052      	beq.n	8004456 <USB_HC_StartXfer+0x116>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043b0:	890c      	ldrh	r4, [r1, #8]
 80043b2:	fb04 f40c 	mul.w	r4, r4, ip
 80043b6:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043b8:	690c      	ldr	r4, [r1, #16]
 80043ba:	f3c4 0412 	ubfx	r4, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043be:	4d3a      	ldr	r5, [pc, #232]	; (80044a8 <USB_HC_StartXfer+0x168>)
 80043c0:	ea05 4ccc 	and.w	ip, r5, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043c4:	ea44 040c 	orr.w	r4, r4, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80043c8:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80043cc:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80043d0:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043d4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043d8:	ea44 040c 	orr.w	r4, r4, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043dc:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 80043e0:	b112      	cbz	r2, 80043e8 <USB_HC_StartXfer+0xa8>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80043e2:	68cc      	ldr	r4, [r1, #12]
 80043e4:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80043e8:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80043ec:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80043f0:	f014 0f01 	tst.w	r4, #1
 80043f4:	bf0c      	ite	eq
 80043f6:	f04f 0e01 	moveq.w	lr, #1
 80043fa:	f04f 0e00 	movne.w	lr, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80043fe:	f8d3 5500 	ldr.w	r5, [r3, #1280]	; 0x500
 8004402:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 8004406:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800440a:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 800440e:	ea44 744e 	orr.w	r4, r4, lr, lsl #29
 8004412:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004416:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 800441a:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800441c:	9c03      	ldr	r4, [sp, #12]
 800441e:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8004422:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8004424:	78cc      	ldrb	r4, [r1, #3]
 8004426:	b1c4      	cbz	r4, 800445a <USB_HC_StartXfer+0x11a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004428:	9c03      	ldr	r4, [sp, #12]
 800442a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800442e:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004430:	9c03      	ldr	r4, [sp, #12]
 8004432:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004436:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004438:	9c03      	ldr	r4, [sp, #12]
 800443a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 800443e:	bb1a      	cbnz	r2, 8004488 <USB_HC_StartXfer+0x148>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004440:	78cb      	ldrb	r3, [r1, #3]
 8004442:	bb0b      	cbnz	r3, 8004488 <USB_HC_StartXfer+0x148>
 8004444:	694b      	ldr	r3, [r1, #20]
 8004446:	b1fb      	cbz	r3, 8004488 <USB_HC_StartXfer+0x148>
    switch (hc->ep_type)
 8004448:	79ca      	ldrb	r2, [r1, #7]
 800444a:	2a03      	cmp	r2, #3
 800444c:	d815      	bhi.n	800447a <USB_HC_StartXfer+0x13a>
 800444e:	e8df f002 	tbb	[pc, r2]
 8004452:	1e09      	.short	0x1e09
 8004454:	1e09      	.short	0x1e09
    hc->XferSize = hc->xfer_len;
 8004456:	610c      	str	r4, [r1, #16]
 8004458:	e7ae      	b.n	80043b8 <USB_HC_StartXfer+0x78>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800445a:	9c03      	ldr	r4, [sp, #12]
 800445c:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8004460:	9403      	str	r4, [sp, #12]
 8004462:	e7e5      	b.n	8004430 <USB_HC_StartXfer+0xf0>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004464:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004466:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004468:	b292      	uxth	r2, r2
 800446a:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800446e:	429a      	cmp	r2, r3
 8004470:	d203      	bcs.n	800447a <USB_HC_StartXfer+0x13a>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004472:	6983      	ldr	r3, [r0, #24]
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	8a8b      	ldrh	r3, [r1, #20]
 8004480:	784a      	ldrb	r2, [r1, #1]
 8004482:	68c9      	ldr	r1, [r1, #12]
 8004484:	f7ff fce2 	bl	8003e4c <USB_WritePacket>
}
 8004488:	2000      	movs	r0, #0
 800448a:	b005      	add	sp, #20
 800448c:	bd30      	pop	{r4, r5, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800448e:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004490:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004494:	b292      	uxth	r2, r2
 8004496:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800449a:	429a      	cmp	r2, r3
 800449c:	d2ed      	bcs.n	800447a <USB_HC_StartXfer+0x13a>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800449e:	6983      	ldr	r3, [r0, #24]
 80044a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044a4:	6183      	str	r3, [r0, #24]
 80044a6:	e7e8      	b.n	800447a <USB_HC_StartXfer+0x13a>
 80044a8:	1ff80000 	.word	0x1ff80000

080044ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80044ac:	b510      	push	{r4, lr}
 80044ae:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t count = 0U;
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80044b0:	f7ff fc97 	bl	8003de2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80044b4:	2110      	movs	r1, #16
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff fc9a 	bl	8003df0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80044bc:	4620      	mov	r0, r4
 80044be:	f7ff fcaf 	bl	8003e20 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80044c2:	2200      	movs	r2, #0
 80044c4:	e00a      	b.n	80044dc <USB_StopHost+0x30>
  {
    value = USBx_HC(i)->HCCHAR;
 80044c6:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 80044ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80044ce:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 80044d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80044d6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 80044da:	3201      	adds	r2, #1
 80044dc:	2a0f      	cmp	r2, #15
 80044de:	d9f2      	bls.n	80044c6 <USB_StopHost+0x1a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80044e0:	2000      	movs	r0, #0
  uint32_t count = 0U;
 80044e2:	4603      	mov	r3, r0
 80044e4:	e000      	b.n	80044e8 <USB_StopHost+0x3c>
  for (i = 0U; i <= 15U; i++)
 80044e6:	3001      	adds	r0, #1
 80044e8:	280f      	cmp	r0, #15
 80044ea:	d813      	bhi.n	8004514 <USB_StopHost+0x68>
  {
    value = USBx_HC(i)->HCCHAR;
 80044ec:	eb04 1c40 	add.w	ip, r4, r0, lsl #5
 80044f0:	f50c 61a0 	add.w	r1, ip, #1280	; 0x500
 80044f4:	f8dc 2500 	ldr.w	r2, [ip, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80044f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044fc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8004500:	f8cc 2500 	str.w	r2, [ip, #1280]	; 0x500

    do
    {
      if (++count > 1000U)
 8004504:	3301      	adds	r3, #1
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450a:	d8ec      	bhi.n	80044e6 <USB_StopHost+0x3a>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800450c:	680a      	ldr	r2, [r1, #0]
 800450e:	2a00      	cmp	r2, #0
 8004510:	dbf8      	blt.n	8004504 <USB_StopHost+0x58>
 8004512:	e7e8      	b.n	80044e6 <USB_StopHost+0x3a>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004514:	f04f 33ff 	mov.w	r3, #4294967295
 8004518:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800451c:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff fc59 	bl	8003dd6 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8004524:	2000      	movs	r0, #0
 8004526:	bd10      	pop	{r4, pc}

08004528 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004528:	b510      	push	{r4, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800452a:	4c03      	ldr	r4, [pc, #12]	; (8004538 <MX_FATFS_Init+0x10>)
 800452c:	4621      	mov	r1, r4
 800452e:	4803      	ldr	r0, [pc, #12]	; (800453c <MX_FATFS_Init+0x14>)
 8004530:	f003 f996 	bl	8007860 <FATFS_LinkDriver>
 8004534:	7120      	strb	r0, [r4, #4]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004536:	bd10      	pop	{r4, pc}
 8004538:	200001b4 	.word	0x200001b4
 800453c:	08008528 	.word	0x08008528

08004540 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004540:	2000      	movs	r0, #0
 8004542:	4770      	bx	lr

08004544 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8004544:	2000      	movs	r0, #0
 8004546:	4770      	bx	lr

08004548 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8004548:	b508      	push	{r3, lr}
 800454a:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800454c:	4803      	ldr	r0, [pc, #12]	; (800455c <USBH_status+0x14>)
 800454e:	f000 fb4c 	bl	8004bea <USBH_MSC_UnitIsReady>
 8004552:	b108      	cbz	r0, 8004558 <USBH_status+0x10>
  {
    res = RES_OK;
 8004554:	2000      	movs	r0, #0
  {
    res = RES_ERROR;
  }

  return res;
}
 8004556:	bd08      	pop	{r3, pc}
    res = RES_ERROR;
 8004558:	2001      	movs	r0, #1
 800455a:	e7fc      	b.n	8004556 <USBH_status+0xe>
 800455c:	20000654 	.word	0x20000654

08004560 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004560:	b510      	push	{r4, lr}
 8004562:	b090      	sub	sp, #64	; 0x40
 8004564:	4604      	mov	r4, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	460b      	mov	r3, r1
 800456a:	4601      	mov	r1, r0
 800456c:	480d      	ldr	r0, [pc, #52]	; (80045a4 <USBH_read+0x44>)
 800456e:	f000 fb74 	bl	8004c5a <USBH_MSC_Read>
 8004572:	b908      	cbnz	r0, 8004578 <USBH_read+0x18>
      break;
    }
  }

  return res;
}
 8004574:	b010      	add	sp, #64	; 0x40
 8004576:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8004578:	aa03      	add	r2, sp, #12
 800457a:	4621      	mov	r1, r4
 800457c:	4809      	ldr	r0, [pc, #36]	; (80045a4 <USBH_read+0x44>)
 800457e:	f000 fb47 	bl	8004c10 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8004582:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004586:	2b28      	cmp	r3, #40	; 0x28
 8004588:	d007      	beq.n	800459a <USBH_read+0x3a>
 800458a:	2b3a      	cmp	r3, #58	; 0x3a
 800458c:	d007      	beq.n	800459e <USBH_read+0x3e>
 800458e:	2b04      	cmp	r3, #4
 8004590:	d001      	beq.n	8004596 <USBH_read+0x36>
      res = RES_ERROR;
 8004592:	2001      	movs	r0, #1
 8004594:	e7ee      	b.n	8004574 <USBH_read+0x14>
    switch (info.sense.asc)
 8004596:	2003      	movs	r0, #3
 8004598:	e7ec      	b.n	8004574 <USBH_read+0x14>
 800459a:	2003      	movs	r0, #3
 800459c:	e7ea      	b.n	8004574 <USBH_read+0x14>
 800459e:	2003      	movs	r0, #3
 80045a0:	e7e8      	b.n	8004574 <USBH_read+0x14>
 80045a2:	bf00      	nop
 80045a4:	20000654 	.word	0x20000654

080045a8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045a8:	b530      	push	{r4, r5, lr}
 80045aa:	b08f      	sub	sp, #60	; 0x3c
 80045ac:	460c      	mov	r4, r1
 80045ae:	4615      	mov	r5, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 80045b0:	2903      	cmp	r1, #3
 80045b2:	d824      	bhi.n	80045fe <USBH_ioctl+0x56>
 80045b4:	e8df f001 	tbb	[pc, r1]
 80045b8:	180e0502 	.word	0x180e0502
 80045bc:	4608      	mov	r0, r1
  default:
    res = RES_PARERR;
  }

  return res;
}
 80045be:	b00f      	add	sp, #60	; 0x3c
 80045c0:	bd30      	pop	{r4, r5, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80045c2:	aa01      	add	r2, sp, #4
 80045c4:	4601      	mov	r1, r0
 80045c6:	4812      	ldr	r0, [pc, #72]	; (8004610 <USBH_ioctl+0x68>)
 80045c8:	f000 fb22 	bl	8004c10 <USBH_MSC_GetLUNInfo>
 80045cc:	b9c8      	cbnz	r0, 8004602 <USBH_ioctl+0x5a>
      *(DWORD*)buff = info.capacity.block_nbr;
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 80045d2:	e7f4      	b.n	80045be <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80045d4:	aa01      	add	r2, sp, #4
 80045d6:	4601      	mov	r1, r0
 80045d8:	480d      	ldr	r0, [pc, #52]	; (8004610 <USBH_ioctl+0x68>)
 80045da:	f000 fb19 	bl	8004c10 <USBH_MSC_GetLUNInfo>
 80045de:	b990      	cbnz	r0, 8004606 <USBH_ioctl+0x5e>
      *(DWORD*)buff = info.capacity.block_size;
 80045e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80045e4:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 80045e6:	e7ea      	b.n	80045be <USBH_ioctl+0x16>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80045e8:	aa01      	add	r2, sp, #4
 80045ea:	4601      	mov	r1, r0
 80045ec:	4808      	ldr	r0, [pc, #32]	; (8004610 <USBH_ioctl+0x68>)
 80045ee:	f000 fb0f 	bl	8004c10 <USBH_MSC_GetLUNInfo>
 80045f2:	b950      	cbnz	r0, 800460a <USBH_ioctl+0x62>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80045f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80045f8:	0a5b      	lsrs	r3, r3, #9
 80045fa:	602b      	str	r3, [r5, #0]
      res = RES_OK;
 80045fc:	e7df      	b.n	80045be <USBH_ioctl+0x16>
    res = RES_PARERR;
 80045fe:	2004      	movs	r0, #4
 8004600:	e7dd      	b.n	80045be <USBH_ioctl+0x16>
      res = RES_ERROR;
 8004602:	4620      	mov	r0, r4
 8004604:	e7db      	b.n	80045be <USBH_ioctl+0x16>
      res = RES_ERROR;
 8004606:	2001      	movs	r0, #1
 8004608:	e7d9      	b.n	80045be <USBH_ioctl+0x16>
      res = RES_ERROR;
 800460a:	2001      	movs	r0, #1
 800460c:	e7d7      	b.n	80045be <USBH_ioctl+0x16>
 800460e:	bf00      	nop
 8004610:	20000654 	.word	0x20000654

08004614 <USBH_write>:
{
 8004614:	b510      	push	{r4, lr}
 8004616:	b090      	sub	sp, #64	; 0x40
 8004618:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	460b      	mov	r3, r1
 800461e:	4601      	mov	r1, r0
 8004620:	4810      	ldr	r0, [pc, #64]	; (8004664 <USBH_write+0x50>)
 8004622:	f000 fb65 	bl	8004cf0 <USBH_MSC_Write>
 8004626:	b908      	cbnz	r0, 800462c <USBH_write+0x18>
}
 8004628:	b010      	add	sp, #64	; 0x40
 800462a:	bd10      	pop	{r4, pc}
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800462c:	aa03      	add	r2, sp, #12
 800462e:	4621      	mov	r1, r4
 8004630:	480c      	ldr	r0, [pc, #48]	; (8004664 <USBH_write+0x50>)
 8004632:	f000 faed 	bl	8004c10 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8004636:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800463a:	2b27      	cmp	r3, #39	; 0x27
 800463c:	d00c      	beq.n	8004658 <USBH_write+0x44>
 800463e:	d905      	bls.n	800464c <USBH_write+0x38>
 8004640:	2b28      	cmp	r3, #40	; 0x28
 8004642:	d00b      	beq.n	800465c <USBH_write+0x48>
 8004644:	2b3a      	cmp	r3, #58	; 0x3a
 8004646:	d10b      	bne.n	8004660 <USBH_write+0x4c>
      res = RES_NOTRDY;
 8004648:	2003      	movs	r0, #3
 800464a:	e7ed      	b.n	8004628 <USBH_write+0x14>
    switch (info.sense.asc)
 800464c:	2b04      	cmp	r3, #4
 800464e:	d001      	beq.n	8004654 <USBH_write+0x40>
      res = RES_ERROR;
 8004650:	2001      	movs	r0, #1
 8004652:	e7e9      	b.n	8004628 <USBH_write+0x14>
      res = RES_NOTRDY;
 8004654:	2003      	movs	r0, #3
 8004656:	e7e7      	b.n	8004628 <USBH_write+0x14>
    switch (info.sense.asc)
 8004658:	2002      	movs	r0, #2
 800465a:	e7e5      	b.n	8004628 <USBH_write+0x14>
      res = RES_NOTRDY;
 800465c:	2003      	movs	r0, #3
 800465e:	e7e3      	b.n	8004628 <USBH_write+0x14>
      res = RES_ERROR;
 8004660:	2001      	movs	r0, #1
 8004662:	e7e1      	b.n	8004628 <USBH_write+0x14>
 8004664:	20000654 	.word	0x20000654

08004668 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8004668:	2000      	movs	r0, #0
 800466a:	4770      	bx	lr

0800466c <USBH_MSC_Process>:
{
 800466c:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800466e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004672:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->state)
 8004674:	7b33      	ldrb	r3, [r6, #12]
 8004676:	b123      	cbz	r3, 8004682 <USBH_MSC_Process+0x16>
 8004678:	2b01      	cmp	r3, #1
 800467a:	f040 8145 	bne.w	8004908 <USBH_MSC_Process+0x29c>
      error = USBH_OK;
 800467e:	2000      	movs	r0, #0
}
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	4604      	mov	r4, r0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8004684:	f8b6 10f8 	ldrh.w	r1, [r6, #248]	; 0xf8
 8004688:	7833      	ldrb	r3, [r6, #0]
 800468a:	4299      	cmp	r1, r3
 800468c:	f080 8131 	bcs.w	80048f2 <USBH_MSC_Process+0x286>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004690:	2334      	movs	r3, #52	; 0x34
 8004692:	fb03 6301 	mla	r3, r3, r1, r6
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800469c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 8133 	bhi.w	800490c <USBH_MSC_Process+0x2a0>
 80046a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046aa:	0009      	.short	0x0009
 80046ac:	00440131 	.word	0x00440131
 80046b0:	0015009e 	.word	0x0015009e
 80046b4:	013100d3 	.word	0x013100d3
 80046b8:	011f0131 	.word	0x011f0131
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80046bc:	2334      	movs	r3, #52	; 0x34
 80046be:	fb03 6101 	mla	r1, r3, r1, r6
 80046c2:	2304      	movs	r3, #4
 80046c4:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 80046c8:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80046cc:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
  USBH_StatusTypeDef error = USBH_BUSY;
 80046d0:	2001      	movs	r0, #1
            break;
 80046d2:	e7d5      	b.n	8004680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80046d4:	2234      	movs	r2, #52	; 0x34
 80046d6:	fb01 f202 	mul.w	r2, r1, r2
 80046da:	3298      	adds	r2, #152	; 0x98
 80046dc:	4432      	add	r2, r6
 80046de:	3207      	adds	r2, #7
 80046e0:	b2c9      	uxtb	r1, r1
 80046e2:	f000 fd4c 	bl	800517e <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 80046e6:	4603      	mov	r3, r0
 80046e8:	b938      	cbnz	r0, 80046fa <USBH_MSC_Process+0x8e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80046ea:	f8b6 20f8 	ldrh.w	r2, [r6, #248]	; 0xf8
 80046ee:	2134      	movs	r1, #52	; 0x34
 80046f0:	fb01 6202 	mla	r2, r1, r2, r6
 80046f4:	2102      	movs	r1, #2
 80046f6:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
            if (scsi_status == USBH_FAIL)
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <USBH_MSC_Process+0x9a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00b      	beq.n	800471a <USBH_MSC_Process+0xae>
  USBH_StatusTypeDef error = USBH_BUSY;
 8004702:	2001      	movs	r0, #1
 8004704:	e7bc      	b.n	8004680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004706:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800470a:	2234      	movs	r2, #52	; 0x34
 800470c:	fb02 6603 	mla	r6, r2, r3, r6
 8004710:	2305      	movs	r3, #5
 8004712:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8004716:	2001      	movs	r0, #1
 8004718:	e7b2      	b.n	8004680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800471a:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800471e:	2234      	movs	r2, #52	; 0x34
 8004720:	fb02 6603 	mla	r6, r2, r3, r6
 8004724:	2001      	movs	r0, #1
 8004726:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800472a:	2302      	movs	r3, #2
 800472c:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 8004730:	e7a6      	b.n	8004680 <USBH_MSC_Process+0x14>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8004732:	b2c9      	uxtb	r1, r1
 8004734:	f000 fcb5 	bl	80050a2 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8004738:	4602      	mov	r2, r0
 800473a:	b9c0      	cbnz	r0, 800476e <USBH_MSC_Process+0x102>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800473c:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8004740:	2134      	movs	r1, #52	; 0x34
 8004742:	fb01 6103 	mla	r1, r1, r3, r6
 8004746:	f891 1092 	ldrb.w	r1, [r1, #146]	; 0x92
 800474a:	b1b1      	cbz	r1, 800477a <USBH_MSC_Process+0x10e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800474c:	2134      	movs	r1, #52	; 0x34
 800474e:	fb01 6103 	mla	r1, r1, r3, r6
 8004752:	2001      	movs	r0, #1
 8004754:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8004758:	2134      	movs	r1, #52	; 0x34
 800475a:	fb01 6303 	mla	r3, r1, r3, r6
 800475e:	2103      	movs	r1, #3
 8004760:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004764:	2100      	movs	r1, #0
 8004766:	f883 1091 	strb.w	r1, [r3, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800476a:	f883 1092 	strb.w	r1, [r3, #146]	; 0x92
            if (ready_status == USBH_FAIL)
 800476e:	2a02      	cmp	r2, #2
 8004770:	d00a      	beq.n	8004788 <USBH_MSC_Process+0x11c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8004772:	2a04      	cmp	r2, #4
 8004774:	d02b      	beq.n	80047ce <USBH_MSC_Process+0x162>
  USBH_StatusTypeDef error = USBH_BUSY;
 8004776:	2001      	movs	r0, #1
 8004778:	e782      	b.n	8004680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800477a:	2134      	movs	r1, #52	; 0x34
 800477c:	fb01 6103 	mla	r1, r1, r3, r6
 8004780:	2000      	movs	r0, #0
 8004782:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 8004786:	e7e7      	b.n	8004758 <USBH_MSC_Process+0xec>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8004788:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800478c:	2234      	movs	r2, #52	; 0x34
 800478e:	fb02 6203 	mla	r2, r2, r3, r6
 8004792:	f892 2092 	ldrb.w	r2, [r2, #146]	; 0x92
 8004796:	2a02      	cmp	r2, #2
 8004798:	d012      	beq.n	80047c0 <USBH_MSC_Process+0x154>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800479a:	2234      	movs	r2, #52	; 0x34
 800479c:	fb02 6203 	mla	r2, r2, r3, r6
 80047a0:	2101      	movs	r1, #1
 80047a2:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80047a6:	2234      	movs	r2, #52	; 0x34
 80047a8:	fb02 6603 	mla	r6, r2, r3, r6
 80047ac:	2305      	movs	r3, #5
 80047ae:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80047b2:	2001      	movs	r0, #1
 80047b4:	f886 0091 	strb.w	r0, [r6, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80047b8:	2302      	movs	r3, #2
 80047ba:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
 80047be:	e75f      	b.n	8004680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80047c0:	2234      	movs	r2, #52	; 0x34
 80047c2:	fb02 6203 	mla	r2, r2, r3, r6
 80047c6:	2100      	movs	r1, #0
 80047c8:	f882 10c1 	strb.w	r1, [r2, #193]	; 0xc1
 80047cc:	e7eb      	b.n	80047a6 <USBH_MSC_Process+0x13a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80047ce:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80047d2:	2234      	movs	r2, #52	; 0x34
 80047d4:	fb02 6603 	mla	r6, r2, r3, r6
 80047d8:	2001      	movs	r0, #1
 80047da:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80047de:	2302      	movs	r3, #2
 80047e0:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80047e4:	e74c      	b.n	8004680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80047e6:	2234      	movs	r2, #52	; 0x34
 80047e8:	fb01 f202 	mul.w	r2, r1, r2
 80047ec:	3290      	adds	r2, #144	; 0x90
 80047ee:	4432      	add	r2, r6
 80047f0:	3204      	adds	r2, #4
 80047f2:	b2c9      	uxtb	r1, r1
 80047f4:	f000 fc7c 	bl	80050f0 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 80047f8:	b970      	cbnz	r0, 8004818 <USBH_MSC_Process+0x1ac>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80047fa:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80047fe:	2234      	movs	r2, #52	; 0x34
 8004800:	fb02 6203 	mla	r2, r2, r3, r6
 8004804:	2001      	movs	r0, #1
 8004806:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800480a:	2100      	movs	r1, #0
 800480c:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 8004810:	4403      	add	r3, r0
 8004812:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
 8004816:	e733      	b.n	8004680 <USBH_MSC_Process+0x14>
            else if (scsi_status == USBH_FAIL)
 8004818:	2802      	cmp	r0, #2
 800481a:	d003      	beq.n	8004824 <USBH_MSC_Process+0x1b8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800481c:	2804      	cmp	r0, #4
 800481e:	d00b      	beq.n	8004838 <USBH_MSC_Process+0x1cc>
  USBH_StatusTypeDef error = USBH_BUSY;
 8004820:	2001      	movs	r0, #1
 8004822:	e72d      	b.n	8004680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004824:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 8004828:	2234      	movs	r2, #52	; 0x34
 800482a:	fb02 6603 	mla	r6, r2, r3, r6
 800482e:	2305      	movs	r3, #5
 8004830:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 8004834:	2001      	movs	r0, #1
 8004836:	e723      	b.n	8004680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004838:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800483c:	2234      	movs	r2, #52	; 0x34
 800483e:	fb02 6603 	mla	r6, r2, r3, r6
 8004842:	2001      	movs	r0, #1
 8004844:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004848:	2302      	movs	r3, #2
 800484a:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 800484e:	e717      	b.n	8004680 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8004850:	2234      	movs	r2, #52	; 0x34
 8004852:	fb01 f202 	mul.w	r2, r1, r2
 8004856:	3298      	adds	r2, #152	; 0x98
 8004858:	4432      	add	r2, r6
 800485a:	3204      	adds	r2, #4
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	f000 fcf4 	bl	800524a <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8004862:	4602      	mov	r2, r0
 8004864:	b998      	cbnz	r0, 800488e <USBH_MSC_Process+0x222>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004866:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 800486a:	2134      	movs	r1, #52	; 0x34
 800486c:	fb01 6103 	mla	r1, r1, r3, r6
 8004870:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
 8004874:	2906      	cmp	r1, #6
 8004876:	d010      	beq.n	800489a <USBH_MSC_Process+0x22e>
 8004878:	2902      	cmp	r1, #2
 800487a:	d00e      	beq.n	800489a <USBH_MSC_Process+0x22e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800487c:	2134      	movs	r1, #52	; 0x34
 800487e:	fb01 6103 	mla	r1, r1, r3, r6
 8004882:	2001      	movs	r0, #1
 8004884:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
              MSC_Handle->current_lun++;
 8004888:	4403      	add	r3, r0
 800488a:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800488e:	2a02      	cmp	r2, #2
 8004890:	d014      	beq.n	80048bc <USBH_MSC_Process+0x250>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004892:	2a04      	cmp	r2, #4
 8004894:	d01c      	beq.n	80048d0 <USBH_MSC_Process+0x264>
  USBH_StatusTypeDef error = USBH_BUSY;
 8004896:	2001      	movs	r0, #1
 8004898:	e6f2      	b.n	8004680 <USBH_MSC_Process+0x14>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800489a:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 800489e:	f8d6 00fc 	ldr.w	r0, [r6, #252]	; 0xfc
 80048a2:	1a09      	subs	r1, r1, r0
 80048a4:	f242 700f 	movw	r0, #9999	; 0x270f
 80048a8:	4281      	cmp	r1, r0
 80048aa:	d8e7      	bhi.n	800487c <USBH_MSC_Process+0x210>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80048ac:	2234      	movs	r2, #52	; 0x34
 80048ae:	fb02 6303 	mla	r3, r2, r3, r6
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80048b8:	2001      	movs	r0, #1
                  break;
 80048ba:	e6e1      	b.n	8004680 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80048bc:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80048c0:	2234      	movs	r2, #52	; 0x34
 80048c2:	fb02 6603 	mla	r6, r2, r3, r6
 80048c6:	2308      	movs	r3, #8
 80048c8:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY;
 80048cc:	2001      	movs	r0, #1
 80048ce:	e6d7      	b.n	8004680 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80048d0:	f8b6 30f8 	ldrh.w	r3, [r6, #248]	; 0xf8
 80048d4:	2234      	movs	r2, #52	; 0x34
 80048d6:	fb02 6603 	mla	r6, r2, r3, r6
 80048da:	2001      	movs	r0, #1
 80048dc:	f886 0090 	strb.w	r0, [r6, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80048e0:	2302      	movs	r3, #2
 80048e2:	f886 3091 	strb.w	r3, [r6, #145]	; 0x91
 80048e6:	e6cb      	b.n	8004680 <USBH_MSC_Process+0x14>
            MSC_Handle->current_lun++;
 80048e8:	3101      	adds	r1, #1
 80048ea:	f8a6 10f8 	strh.w	r1, [r6, #248]	; 0xf8
  USBH_StatusTypeDef error = USBH_BUSY;
 80048ee:	2001      	movs	r0, #1
            break;
 80048f0:	e6c6      	b.n	8004680 <USBH_MSC_Process+0x14>
        MSC_Handle->current_lun = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f8a6 30f8 	strh.w	r3, [r6, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80048f8:	2501      	movs	r5, #1
 80048fa:	7335      	strb	r5, [r6, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80048fc:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8004900:	2102      	movs	r1, #2
 8004902:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 8004904:	4628      	mov	r0, r5
 8004906:	e6bb      	b.n	8004680 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 8004908:	2001      	movs	r0, #1
 800490a:	e6b9      	b.n	8004680 <USBH_MSC_Process+0x14>
 800490c:	2001      	movs	r0, #1
 800490e:	e6b7      	b.n	8004680 <USBH_MSC_Process+0x14>

08004910 <USBH_MSC_ClassRequest>:
{
 8004910:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004912:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004916:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 8004918:	7ba3      	ldrb	r3, [r4, #14]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d004      	beq.n	8004928 <USBH_MSC_ClassRequest+0x18>
 800491e:	2b03      	cmp	r3, #3
 8004920:	d025      	beq.n	800496e <USBH_MSC_ClassRequest+0x5e>
 8004922:	b10b      	cbz	r3, 8004928 <USBH_MSC_ClassRequest+0x18>
 8004924:	2001      	movs	r0, #1
}
 8004926:	bd10      	pop	{r4, pc}
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8004928:	4621      	mov	r1, r4
 800492a:	f000 fa6f 	bl	8004e0c <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800492e:	2803      	cmp	r0, #3
 8004930:	d002      	beq.n	8004938 <USBH_MSC_ClassRequest+0x28>
      if (status == USBH_OK)
 8004932:	2800      	cmp	r0, #0
 8004934:	d1f7      	bne.n	8004926 <USBH_MSC_ClassRequest+0x16>
 8004936:	e001      	b.n	800493c <USBH_MSC_ClassRequest+0x2c>
        MSC_Handle->max_lun = 0U;
 8004938:	2000      	movs	r0, #0
 800493a:	7020      	strb	r0, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800493c:	7821      	ldrb	r1, [r4, #0]
 800493e:	2902      	cmp	r1, #2
 8004940:	d813      	bhi.n	800496a <USBH_MSC_ClassRequest+0x5a>
 8004942:	3101      	adds	r1, #1
 8004944:	b2c9      	uxtb	r1, r1
 8004946:	7021      	strb	r1, [r4, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004948:	2300      	movs	r3, #0
 800494a:	428b      	cmp	r3, r1
 800494c:	d2eb      	bcs.n	8004926 <USBH_MSC_ClassRequest+0x16>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800494e:	2234      	movs	r2, #52	; 0x34
 8004950:	fb02 4203 	mla	r2, r2, r3, r4
 8004954:	f04f 0c02 	mov.w	ip, #2
 8004958:	f882 c092 	strb.w	ip, [r2, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800495c:	f04f 0c00 	mov.w	ip, #0
 8004960:	f882 c0c1 	strb.w	ip, [r2, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8004964:	3301      	adds	r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	e7ef      	b.n	800494a <USBH_MSC_ClassRequest+0x3a>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800496a:	2102      	movs	r1, #2
 800496c:	e7eb      	b.n	8004946 <USBH_MSC_ClassRequest+0x36>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800496e:	2100      	movs	r1, #0
 8004970:	f001 fb09 	bl	8005f86 <USBH_ClrFeature>
 8004974:	b918      	cbnz	r0, 800497e <USBH_MSC_ClassRequest+0x6e>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8004976:	7be3      	ldrb	r3, [r4, #15]
 8004978:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800497a:	2001      	movs	r0, #1
 800497c:	e7d3      	b.n	8004926 <USBH_MSC_ClassRequest+0x16>
 800497e:	2001      	movs	r0, #1
 8004980:	e7d1      	b.n	8004926 <USBH_MSC_ClassRequest+0x16>

08004982 <USBH_MSC_InterfaceDeInit>:
{
 8004982:	b538      	push	{r3, r4, r5, lr}
 8004984:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004986:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800498a:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 800498c:	7969      	ldrb	r1, [r5, #5]
 800498e:	b969      	cbnz	r1, 80049ac <USBH_MSC_InterfaceDeInit+0x2a>
  if (MSC_Handle->InPipe)
 8004990:	7929      	ldrb	r1, [r5, #4]
 8004992:	b9a1      	cbnz	r1, 80049be <USBH_MSC_InterfaceDeInit+0x3c>
  if (phost->pActiveClass->pData)
 8004994:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004998:	69d8      	ldr	r0, [r3, #28]
 800499a:	b128      	cbz	r0, 80049a8 <USBH_MSC_InterfaceDeInit+0x26>
    USBH_free(phost->pActiveClass->pData);
 800499c:	f003 fc8c 	bl	80082b8 <free>
    phost->pActiveClass->pData = 0U;
 80049a0:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80049a4:	2200      	movs	r2, #0
 80049a6:	61da      	str	r2, [r3, #28]
}
 80049a8:	2000      	movs	r0, #0
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80049ac:	f001 fb7d 	bl	80060aa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80049b0:	7969      	ldrb	r1, [r5, #5]
 80049b2:	4620      	mov	r0, r4
 80049b4:	f001 fb91 	bl	80060da <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80049b8:	2300      	movs	r3, #0
 80049ba:	716b      	strb	r3, [r5, #5]
 80049bc:	e7e8      	b.n	8004990 <USBH_MSC_InterfaceDeInit+0xe>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80049be:	4620      	mov	r0, r4
 80049c0:	f001 fb73 	bl	80060aa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80049c4:	7929      	ldrb	r1, [r5, #4]
 80049c6:	4620      	mov	r0, r4
 80049c8:	f001 fb87 	bl	80060da <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80049cc:	2300      	movs	r3, #0
 80049ce:	712b      	strb	r3, [r5, #4]
 80049d0:	e7e0      	b.n	8004994 <USBH_MSC_InterfaceDeInit+0x12>

080049d2 <USBH_MSC_InterfaceInit>:
{
 80049d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d4:	b085      	sub	sp, #20
 80049d6:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80049d8:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 80049dc:	2350      	movs	r3, #80	; 0x50
 80049de:	2206      	movs	r2, #6
 80049e0:	7909      	ldrb	r1, [r1, #4]
 80049e2:	f000 feb3 	bl	800574c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80049e6:	2801      	cmp	r0, #1
 80049e8:	d87c      	bhi.n	8004ae4 <USBH_MSC_InterfaceInit+0x112>
 80049ea:	4605      	mov	r5, r0
  status = USBH_SelectInterface(phost, interface);
 80049ec:	4601      	mov	r1, r0
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 fea2 	bl	8005738 <USBH_SelectInterface>
  if (status != USBH_OK)
 80049f4:	4607      	mov	r7, r0
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d178      	bne.n	8004aec <USBH_MSC_InterfaceInit+0x11a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80049fa:	f8d4 637c 	ldr.w	r6, [r4, #892]	; 0x37c
 80049fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004a02:	f003 fc51 	bl	80082a8 <malloc>
 8004a06:	61f0      	str	r0, [r6, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a08:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004a0c:	69de      	ldr	r6, [r3, #28]
  if (MSC_Handle == NULL)
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	d06e      	beq.n	8004af0 <USBH_MSC_InterfaceInit+0x11e>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8004a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a16:	2100      	movs	r1, #0
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f003 fc63 	bl	80082e4 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004a1e:	231a      	movs	r3, #26
 8004a20:	fb03 4305 	mla	r3, r3, r5, r4
 8004a24:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8004a28:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db49      	blt.n	8004ac4 <USBH_MSC_InterfaceInit+0xf2>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004a30:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a32:	231a      	movs	r3, #26
 8004a34:	fb03 4305 	mla	r3, r3, r5, r4
 8004a38:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8004a3c:	8133      	strh	r3, [r6, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004a3e:	231a      	movs	r3, #26
 8004a40:	fb03 4305 	mla	r3, r3, r5, r4
 8004a44:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8004a48:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db41      	blt.n	8004ad4 <USBH_MSC_InterfaceInit+0x102>
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004a50:	71b2      	strb	r2, [r6, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004a52:	201a      	movs	r0, #26
 8004a54:	fb00 4505 	mla	r5, r0, r5, r4
 8004a58:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8004a5c:	8133      	strh	r3, [r6, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8004a5e:	79b1      	ldrb	r1, [r6, #6]
 8004a60:	4620      	mov	r0, r4
 8004a62:	f001 fb27 	bl	80060b4 <USBH_AllocPipe>
 8004a66:	7170      	strb	r0, [r6, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8004a68:	79f1      	ldrb	r1, [r6, #7]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f001 fb22 	bl	80060b4 <USBH_AllocPipe>
 8004a70:	7130      	strb	r0, [r6, #4]
  USBH_MSC_BOT_Init(phost);
 8004a72:	4620      	mov	r0, r4
 8004a74:	f000 f9d8 	bl	8004e28 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8004a78:	79b2      	ldrb	r2, [r6, #6]
 8004a7a:	7971      	ldrb	r1, [r6, #5]
 8004a7c:	8933      	ldrh	r3, [r6, #8]
 8004a7e:	9302      	str	r3, [sp, #8]
 8004a80:	2502      	movs	r5, #2
 8004a82:	9501      	str	r5, [sp, #4]
 8004a84:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f001 fafb 	bl	800608a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8004a94:	79f2      	ldrb	r2, [r6, #7]
 8004a96:	7931      	ldrb	r1, [r6, #4]
 8004a98:	8973      	ldrh	r3, [r6, #10]
 8004a9a:	9302      	str	r3, [sp, #8]
 8004a9c:	9501      	str	r5, [sp, #4]
 8004a9e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f001 faee 	bl	800608a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	7931      	ldrb	r1, [r6, #4]
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f002 ffd0 	bl	8007a58 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	7971      	ldrb	r1, [r6, #5]
 8004abc:	4620      	mov	r0, r4
 8004abe:	f002 ffcb 	bl	8007a58 <USBH_LL_SetToggle>
  return USBH_OK;
 8004ac2:	e010      	b.n	8004ae6 <USBH_MSC_InterfaceInit+0x114>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004ac4:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004ac6:	231a      	movs	r3, #26
 8004ac8:	fb03 4305 	mla	r3, r3, r5, r4
 8004acc:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8004ad0:	8173      	strh	r3, [r6, #10]
 8004ad2:	e7b4      	b.n	8004a3e <USBH_MSC_InterfaceInit+0x6c>
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004ad4:	71f2      	strb	r2, [r6, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004ad6:	201a      	movs	r0, #26
 8004ad8:	fb00 4505 	mla	r5, r0, r5, r4
 8004adc:	f8b5 3358 	ldrh.w	r3, [r5, #856]	; 0x358
 8004ae0:	8173      	strh	r3, [r6, #10]
 8004ae2:	e7bc      	b.n	8004a5e <USBH_MSC_InterfaceInit+0x8c>
    return USBH_FAIL;
 8004ae4:	2702      	movs	r7, #2
}
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	b005      	add	sp, #20
 8004aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8004aec:	2702      	movs	r7, #2
 8004aee:	e7fa      	b.n	8004ae6 <USBH_MSC_InterfaceInit+0x114>
    return USBH_FAIL;
 8004af0:	2702      	movs	r7, #2
 8004af2:	e7f8      	b.n	8004ae6 <USBH_MSC_InterfaceInit+0x114>

08004af4 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	b083      	sub	sp, #12
 8004af8:	460c      	mov	r4, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004afa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004afe:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8004b00:	2334      	movs	r3, #52	; 0x34
 8004b02:	fb03 5301 	mla	r3, r3, r1, r5
 8004b06:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d006      	beq.n	8004b1c <USBH_MSC_RdWrProcess+0x28>
 8004b0e:	2b07      	cmp	r3, #7
 8004b10:	d027      	beq.n	8004b62 <USBH_MSC_RdWrProcess+0x6e>
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d048      	beq.n	8004ba8 <USBH_MSC_RdWrProcess+0xb4>
 8004b16:	2001      	movs	r0, #1
    default:
      break;

  }
  return error;
}
 8004b18:	b003      	add	sp, #12
 8004b1a:	bd30      	pop	{r4, r5, pc}
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	9200      	str	r2, [sp, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	f000 fc1e 	bl	8005362 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 8004b26:	b930      	cbnz	r0, 8004b36 <USBH_MSC_RdWrProcess+0x42>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004b28:	2134      	movs	r1, #52	; 0x34
 8004b2a:	fb01 5404 	mla	r4, r1, r4, r5
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 8004b34:	e7f0      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8004b36:	2802      	cmp	r0, #2
 8004b38:	d003      	beq.n	8004b42 <USBH_MSC_RdWrProcess+0x4e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004b3a:	2804      	cmp	r0, #4
 8004b3c:	d009      	beq.n	8004b52 <USBH_MSC_RdWrProcess+0x5e>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004b3e:	2001      	movs	r0, #1
 8004b40:	e7ea      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8004b42:	2334      	movs	r3, #52	; 0x34
 8004b44:	fb03 5404 	mla	r4, r3, r4, r5
 8004b48:	2305      	movs	r3, #5
 8004b4a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004b4e:	2001      	movs	r0, #1
 8004b50:	e7e2      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004b52:	2334      	movs	r3, #52	; 0x34
 8004b54:	fb03 5404 	mla	r4, r3, r4, r5
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8004b5e:	2002      	movs	r0, #2
 8004b60:	e7da      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8004b62:	2200      	movs	r2, #0
 8004b64:	9200      	str	r2, [sp, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	f000 fbb5 	bl	80052d6 <USBH_MSC_SCSI_Write>
      if (scsi_status == USBH_OK)
 8004b6c:	b930      	cbnz	r0, 8004b7c <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004b6e:	2134      	movs	r1, #52	; 0x34
 8004b70:	fb01 5404 	mla	r4, r1, r4, r5
 8004b74:	2301      	movs	r3, #1
 8004b76:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        error = USBH_OK;
 8004b7a:	e7cd      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
      else if (scsi_status == USBH_FAIL)
 8004b7c:	2802      	cmp	r0, #2
 8004b7e:	d003      	beq.n	8004b88 <USBH_MSC_RdWrProcess+0x94>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004b80:	2804      	cmp	r0, #4
 8004b82:	d009      	beq.n	8004b98 <USBH_MSC_RdWrProcess+0xa4>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004b84:	2001      	movs	r0, #1
 8004b86:	e7c7      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8004b88:	2334      	movs	r3, #52	; 0x34
 8004b8a:	fb03 5404 	mla	r4, r3, r4, r5
 8004b8e:	2305      	movs	r3, #5
 8004b90:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004b94:	2001      	movs	r0, #1
 8004b96:	e7bf      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004b98:	2334      	movs	r3, #52	; 0x34
 8004b9a:	fb03 5404 	mla	r4, r3, r4, r5
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8004ba4:	2002      	movs	r0, #2
 8004ba6:	e7b7      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8004ba8:	2234      	movs	r2, #52	; 0x34
 8004baa:	fb01 f202 	mul.w	r2, r1, r2
 8004bae:	3298      	adds	r2, #152	; 0x98
 8004bb0:	442a      	add	r2, r5
 8004bb2:	3204      	adds	r2, #4
 8004bb4:	f000 fb49 	bl	800524a <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8004bb8:	4603      	mov	r3, r0
 8004bba:	b9a0      	cbnz	r0, 8004be6 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004bbc:	2234      	movs	r2, #52	; 0x34
 8004bbe:	fb02 5204 	mla	r2, r2, r4, r5
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8004bc8:	2002      	movs	r0, #2
 8004bca:	f882 0091 	strb.w	r0, [r2, #145]	; 0x91
      if (scsi_status == USBH_FAIL)
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d0a2      	beq.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d1a0      	bne.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004bd6:	2334      	movs	r3, #52	; 0x34
 8004bd8:	fb03 5404 	mla	r4, r3, r4, r5
 8004bdc:	2308      	movs	r3, #8
 8004bde:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8004be2:	2002      	movs	r0, #2
 8004be4:	e798      	b.n	8004b18 <USBH_MSC_RdWrProcess+0x24>
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004be6:	2001      	movs	r0, #1
 8004be8:	e7f1      	b.n	8004bce <USBH_MSC_RdWrProcess+0xda>

08004bea <USBH_MSC_UnitIsReady>:
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004bea:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004bee:	69da      	ldr	r2, [r3, #28]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8004bf0:	7803      	ldrb	r3, [r0, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b0b      	cmp	r3, #11
 8004bf6:	d001      	beq.n	8004bfc <USBH_MSC_UnitIsReady+0x12>
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	4770      	bx	lr
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8004bfc:	2334      	movs	r3, #52	; 0x34
 8004bfe:	fb03 2101 	mla	r1, r3, r1, r2
 8004c02:	f891 3091 	ldrb.w	r3, [r1, #145]	; 0x91
 8004c06:	b10b      	cbz	r3, 8004c0c <USBH_MSC_UnitIsReady+0x22>
    res = 0U;
 8004c08:	2000      	movs	r0, #0
 8004c0a:	4770      	bx	lr
    res = 1U;
 8004c0c:	2001      	movs	r0, #1
  }

  return res;
}
 8004c0e:	4770      	bx	lr

08004c10 <USBH_MSC_GetLUNInfo>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c10:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004c14:	69db      	ldr	r3, [r3, #28]
  if (phost->gState == HOST_CLASS)
 8004c16:	7800      	ldrb	r0, [r0, #0]
 8004c18:	b2c0      	uxtb	r0, r0
 8004c1a:	280b      	cmp	r0, #11
 8004c1c:	d001      	beq.n	8004c22 <USBH_MSC_GetLUNInfo+0x12>
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
    return USBH_OK;
  }
  else
  {
    return USBH_FAIL;
 8004c1e:	2002      	movs	r0, #2
  }
}
 8004c20:	4770      	bx	lr
{
 8004c22:	b510      	push	{r4, lr}
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8004c24:	2034      	movs	r0, #52	; 0x34
 8004c26:	fb00 f101 	mul.w	r1, r0, r1
 8004c2a:	3190      	adds	r1, #144	; 0x90
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004c32:	f8d3 e000 	ldr.w	lr, [r3]
 8004c36:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004c3a:	6898      	ldr	r0, [r3, #8]
 8004c3c:	68d9      	ldr	r1, [r3, #12]
 8004c3e:	f8c2 e000 	str.w	lr, [r2]
 8004c42:	f8c2 c004 	str.w	ip, [r2, #4]
 8004c46:	6090      	str	r0, [r2, #8]
 8004c48:	60d1      	str	r1, [r2, #12]
 8004c4a:	3310      	adds	r3, #16
 8004c4c:	3210      	adds	r2, #16
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	d1ef      	bne.n	8004c32 <USBH_MSC_GetLUNInfo+0x22>
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6013      	str	r3, [r2, #0]
    return USBH_OK;
 8004c56:	2000      	movs	r0, #0
}
 8004c58:	bd10      	pop	{r4, pc}

08004c5a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	460d      	mov	r5, r1
 8004c62:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004c64:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8004c68:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8004c6a:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8004c6e:	b3c9      	cbz	r1, 8004ce4 <USBH_MSC_Read+0x8a>
 8004c70:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8004c72:	7801      	ldrb	r1, [r0, #0]
 8004c74:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8004c76:	290b      	cmp	r1, #11
 8004c78:	d136      	bne.n	8004ce8 <USBH_MSC_Read+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8004c7a:	2134      	movs	r1, #52	; 0x34
 8004c7c:	fb01 7105 	mla	r1, r1, r5, r7
 8004c80:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8004c84:	2901      	cmp	r1, #1
 8004c86:	d001      	beq.n	8004c8c <USBH_MSC_Read+0x32>
  {
    return  USBH_FAIL;
 8004c88:	2002      	movs	r0, #2
 8004c8a:	e02e      	b.n	8004cea <USBH_MSC_Read+0x90>
  }

  MSC_Handle->state = MSC_READ;
 8004c8c:	2006      	movs	r0, #6
 8004c8e:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8004c90:	2134      	movs	r1, #52	; 0x34
 8004c92:	fb01 7105 	mla	r1, r1, r5, r7
 8004c96:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8004c9a:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8004c9e:	9600      	str	r6, [sp, #0]
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f000 fb5d 	bl	8005362 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8004ca8:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8004cac:	4629      	mov	r1, r5
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7ff ff20 	bl	8004af4 <USBH_MSC_RdWrProcess>
 8004cb4:	2801      	cmp	r0, #1
 8004cb6:	d111      	bne.n	8004cdc <USBH_MSC_Read+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8004cb8:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8004cbc:	eba2 0208 	sub.w	r2, r2, r8
 8004cc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cc4:	fb06 f303 	mul.w	r3, r6, r3
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d803      	bhi.n	8004cd4 <USBH_MSC_Read+0x7a>
 8004ccc:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1eb      	bne.n	8004cac <USBH_MSC_Read+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8004cd8:	2002      	movs	r0, #2
 8004cda:	e006      	b.n	8004cea <USBH_MSC_Read+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	733b      	strb	r3, [r7, #12]

  return USBH_OK;
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e002      	b.n	8004cea <USBH_MSC_Read+0x90>
    return  USBH_FAIL;
 8004ce4:	2002      	movs	r0, #2
 8004ce6:	e000      	b.n	8004cea <USBH_MSC_Read+0x90>
 8004ce8:	2002      	movs	r0, #2
}
 8004cea:	b002      	add	sp, #8
 8004cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004cf0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	9e08      	ldr	r6, [sp, #32]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004cfa:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
 8004cfe:	69cf      	ldr	r7, [r1, #28]

  if ((phost->device.is_connected == 0U) ||
 8004d00:	f890 1320 	ldrb.w	r1, [r0, #800]	; 0x320
 8004d04:	b3c9      	cbz	r1, 8004d7a <USBH_MSC_Write+0x8a>
 8004d06:	4604      	mov	r4, r0
      (phost->gState != HOST_CLASS) ||
 8004d08:	7801      	ldrb	r1, [r0, #0]
 8004d0a:	b2c9      	uxtb	r1, r1
  if ((phost->device.is_connected == 0U) ||
 8004d0c:	290b      	cmp	r1, #11
 8004d0e:	d136      	bne.n	8004d7e <USBH_MSC_Write+0x8e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8004d10:	2134      	movs	r1, #52	; 0x34
 8004d12:	fb01 7105 	mla	r1, r1, r5, r7
 8004d16:	f891 1090 	ldrb.w	r1, [r1, #144]	; 0x90
      (phost->gState != HOST_CLASS) ||
 8004d1a:	2901      	cmp	r1, #1
 8004d1c:	d001      	beq.n	8004d22 <USBH_MSC_Write+0x32>
  {
    return  USBH_FAIL;
 8004d1e:	2002      	movs	r0, #2
 8004d20:	e02e      	b.n	8004d80 <USBH_MSC_Write+0x90>
  }

  MSC_Handle->state = MSC_WRITE;
 8004d22:	2007      	movs	r0, #7
 8004d24:	7338      	strb	r0, [r7, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8004d26:	2134      	movs	r1, #52	; 0x34
 8004d28:	fb01 7105 	mla	r1, r1, r5, r7
 8004d2c:	f881 0090 	strb.w	r0, [r1, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8004d30:	f8a7 50fa 	strh.w	r5, [r7, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8004d34:	9600      	str	r6, [sp, #0]
 8004d36:	4629      	mov	r1, r5
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 facc 	bl	80052d6 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8004d3e:	f8d4 83c4 	ldr.w	r8, [r4, #964]	; 0x3c4
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8004d42:	4629      	mov	r1, r5
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7ff fed5 	bl	8004af4 <USBH_MSC_RdWrProcess>
 8004d4a:	2801      	cmp	r0, #1
 8004d4c:	d111      	bne.n	8004d72 <USBH_MSC_Write+0x82>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8004d4e:	f8d4 23c4 	ldr.w	r2, [r4, #964]	; 0x3c4
 8004d52:	eba2 0208 	sub.w	r2, r2, r8
 8004d56:	f242 7310 	movw	r3, #10000	; 0x2710
 8004d5a:	fb06 f303 	mul.w	r3, r6, r3
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d803      	bhi.n	8004d6a <USBH_MSC_Write+0x7a>
 8004d62:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1eb      	bne.n	8004d42 <USBH_MSC_Write+0x52>
    {
      MSC_Handle->state = MSC_IDLE;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	733b      	strb	r3, [r7, #12]
      return USBH_FAIL;
 8004d6e:	2002      	movs	r0, #2
 8004d70:	e006      	b.n	8004d80 <USBH_MSC_Write+0x90>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	733b      	strb	r3, [r7, #12]
  return USBH_OK;
 8004d76:	2000      	movs	r0, #0
 8004d78:	e002      	b.n	8004d80 <USBH_MSC_Write+0x90>
    return  USBH_FAIL;
 8004d7a:	2002      	movs	r0, #2
 8004d7c:	e000      	b.n	8004d80 <USBH_MSC_Write+0x90>
 8004d7e:	2002      	movs	r0, #2
}
 8004d80:	b002      	add	sp, #8
 8004d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004d88 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8004d88:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004d8a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004d8e:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8004d90:	7921      	ldrb	r1, [r4, #4]
 8004d92:	f002 fe4f 	bl	8007a34 <USBH_LL_GetLastXferSize>
 8004d96:	280d      	cmp	r0, #13
 8004d98:	d001      	beq.n	8004d9e <USBH_MSC_DecodeCSW+0x16>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8004d9a:	2002      	movs	r0, #2
      status = BOT_CSW_PHASE_ERROR;
    }
  } /* CSW Length Check*/

  return status;
}
 8004d9c:	bd10      	pop	{r4, pc}
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8004d9e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <USBH_MSC_DecodeCSW+0x44>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <USBH_MSC_DecodeCSW+0x22>
      status = BOT_CSW_PHASE_ERROR;
 8004da6:	2002      	movs	r0, #2
 8004da8:	e7f8      	b.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8004daa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d001      	beq.n	8004db6 <USBH_MSC_DecodeCSW+0x2e>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8004db2:	2001      	movs	r0, #1
 8004db4:	e7f2      	b.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8004db6:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d0ee      	beq.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8004dbe:	2801      	cmp	r0, #1
 8004dc0:	d0ec      	beq.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8004dc2:	2802      	cmp	r0, #2
 8004dc4:	d0ea      	beq.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	e7e8      	b.n	8004d9c <USBH_MSC_DecodeCSW+0x14>
 8004dca:	bf00      	nop
 8004dcc:	53425355 	.word	0x53425355

08004dd0 <USBH_MSC_BOT_Abort>:
{
 8004dd0:	b508      	push	{r3, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004dd2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004dd6:	69d9      	ldr	r1, [r3, #28]
  switch (dir)
 8004dd8:	b11a      	cbz	r2, 8004de2 <USBH_MSC_BOT_Abort+0x12>
 8004dda:	2a01      	cmp	r2, #1
 8004ddc:	d005      	beq.n	8004dea <USBH_MSC_BOT_Abort+0x1a>
 8004dde:	2002      	movs	r0, #2
}
 8004de0:	bd08      	pop	{r3, pc}
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8004de2:	79c9      	ldrb	r1, [r1, #7]
 8004de4:	f001 f8cf 	bl	8005f86 <USBH_ClrFeature>
      break;
 8004de8:	e7fa      	b.n	8004de0 <USBH_MSC_BOT_Abort+0x10>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8004dea:	7989      	ldrb	r1, [r1, #6]
 8004dec:	f001 f8cb 	bl	8005f86 <USBH_ClrFeature>
      break;
 8004df0:	e7f6      	b.n	8004de0 <USBH_MSC_BOT_Abort+0x10>

08004df2 <USBH_MSC_BOT_REQ_Reset>:
{
 8004df2:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004e00:	8281      	strh	r1, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004e02:	82c1      	strh	r1, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004e04:	460a      	mov	r2, r1
 8004e06:	f001 f800 	bl	8005e0a <USBH_CtlReq>
}
 8004e0a:	bd08      	pop	{r3, pc}

08004e0c <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
 8004e0c:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8004e0e:	22a1      	movs	r2, #161	; 0xa1
 8004e10:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8004e12:	22fe      	movs	r2, #254	; 0xfe
 8004e14:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004e16:	2200      	movs	r2, #0
 8004e18:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8004e1a:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, Maxlun, 1U);
 8004e20:	f000 fff3 	bl	8005e0a <USBH_CtlReq>
}
 8004e24:	bd08      	pop	{r3, pc}
	...

08004e28 <USBH_MSC_BOT_Init>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e28:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004e2c:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8004e2e:	4a05      	ldr	r2, [pc, #20]	; (8004e44 <USBH_MSC_BOT_Init+0x1c>)
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8004e32:	4a05      	ldr	r2, [pc, #20]	; (8004e48 <USBH_MSC_BOT_Init+0x20>)
 8004e34:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8004e3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8004e40:	2000      	movs	r0, #0
 8004e42:	4770      	bx	lr
 8004e44:	43425355 	.word	0x43425355
 8004e48:	20304050 	.word	0x20304050

08004e4c <USBH_MSC_BOT_Process>:
{
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	4605      	mov	r5, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e52:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004e56:	69de      	ldr	r6, [r3, #28]
  switch (MSC_Handle->hbot.state)
 8004e58:	f896 4050 	ldrb.w	r4, [r6, #80]	; 0x50
 8004e5c:	1e63      	subs	r3, r4, #1
 8004e5e:	2b0a      	cmp	r3, #10
 8004e60:	f200 811d 	bhi.w	800509e <USBH_MSC_BOT_Process+0x252>
 8004e64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e68:	001b000b 	.word	0x001b000b
 8004e6c:	004d0042 	.word	0x004d0042
 8004e70:	00830077 	.word	0x00830077
 8004e74:	00c100b6 	.word	0x00c100b6
 8004e78:	00ef00dd 	.word	0x00ef00dd
 8004e7c:	0111      	.short	0x0111
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8004e7e:	f886 1061 	strb.w	r1, [r6, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8004e82:	2302      	movs	r3, #2
 8004e84:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8004e88:	7973      	ldrb	r3, [r6, #5]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	9200      	str	r2, [sp, #0]
 8004e8e:	221f      	movs	r2, #31
 8004e90:	f106 0154 	add.w	r1, r6, #84	; 0x54
 8004e94:	f001 f8c0 	bl	8006018 <USBH_BulkSendData>
}
 8004e98:	4620      	mov	r0, r4
 8004e9a:	b002      	add	sp, #8
 8004e9c:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8004e9e:	7971      	ldrb	r1, [r6, #5]
 8004ea0:	f002 fdce 	bl	8007a40 <USBH_LL_GetURBState>
 8004ea4:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8004ea6:	2801      	cmp	r0, #1
 8004ea8:	d005      	beq.n	8004eb6 <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004eaa:	2802      	cmp	r0, #2
 8004eac:	d015      	beq.n	8004eda <USBH_MSC_BOT_Process+0x8e>
        if (URB_Status == USBH_URB_STALL)
 8004eae:	2805      	cmp	r0, #5
 8004eb0:	d017      	beq.n	8004ee2 <USBH_MSC_BOT_Process+0x96>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004eb2:	2401      	movs	r4, #1
 8004eb4:	e7f0      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8004eb6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004eb8:	b15b      	cbz	r3, 8004ed2 <USBH_MSC_BOT_Process+0x86>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8004eba:	f996 3060 	ldrsb.w	r3, [r6, #96]	; 0x60
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	db03      	blt.n	8004eca <USBH_MSC_BOT_Process+0x7e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004ec8:	e7e6      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004ed0:	e7e2      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8004ed2:	2307      	movs	r3, #7
 8004ed4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004ed8:	e7de      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004eda:	2401      	movs	r4, #1
 8004edc:	f886 4050 	strb.w	r4, [r6, #80]	; 0x50
 8004ee0:	e7da      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004ee8:	2401      	movs	r4, #1
 8004eea:	e7d5      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8004eec:	7933      	ldrb	r3, [r6, #4]
 8004eee:	8972      	ldrh	r2, [r6, #10]
 8004ef0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004ef4:	f001 f8a6 	bl	8006044 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004efe:	2401      	movs	r4, #1
      break;
 8004f00:	e7ca      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8004f02:	7931      	ldrb	r1, [r6, #4]
 8004f04:	f002 fd9c 	bl	8007a40 <USBH_LL_GetURBState>
 8004f08:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8004f0a:	2801      	cmp	r0, #1
 8004f0c:	d003      	beq.n	8004f16 <USBH_MSC_BOT_Process+0xca>
      else if (URB_Status == USBH_URB_STALL)
 8004f0e:	2805      	cmp	r0, #5
 8004f10:	d01c      	beq.n	8004f4c <USBH_MSC_BOT_Process+0x100>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004f12:	2401      	movs	r4, #1
 8004f14:	e7c0      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8004f16:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004f18:	8972      	ldrh	r2, [r6, #10]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90c      	bls.n	8004f38 <USBH_MSC_BOT_Process+0xec>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8004f1e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004f22:	4411      	add	r1, r2
 8004f24:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8004f2c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004f2e:	b933      	cbnz	r3, 8004f3e <USBH_MSC_BOT_Process+0xf2>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8004f30:	2307      	movs	r3, #7
 8004f32:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004f36:	e7af      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	65f3      	str	r3, [r6, #92]	; 0x5c
 8004f3c:	e7f6      	b.n	8004f2c <USBH_MSC_BOT_Process+0xe0>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8004f3e:	7933      	ldrb	r3, [r6, #4]
 8004f40:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004f44:	4628      	mov	r0, r5
 8004f46:	f001 f87d 	bl	8006044 <USBH_BulkReceiveData>
 8004f4a:	e7a5      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8004f4c:	2309      	movs	r3, #9
 8004f4e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004f52:	2401      	movs	r4, #1
 8004f54:	e7a0      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8004f56:	7973      	ldrb	r3, [r6, #5]
 8004f58:	8932      	ldrh	r2, [r6, #8]
 8004f5a:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004f5e:	2401      	movs	r4, #1
 8004f60:	9400      	str	r4, [sp, #0]
 8004f62:	f001 f859 	bl	8006018 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8004f66:	2306      	movs	r3, #6
 8004f68:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      break;
 8004f6c:	e794      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8004f6e:	7971      	ldrb	r1, [r6, #5]
 8004f70:	f002 fd66 	bl	8007a40 <USBH_LL_GetURBState>
 8004f74:	4604      	mov	r4, r0
      if (URB_Status == USBH_URB_DONE)
 8004f76:	2801      	cmp	r0, #1
 8004f78:	d005      	beq.n	8004f86 <USBH_MSC_BOT_Process+0x13a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004f7a:	2802      	cmp	r0, #2
 8004f7c:	d020      	beq.n	8004fc0 <USBH_MSC_BOT_Process+0x174>
      else if (URB_Status == USBH_URB_STALL)
 8004f7e:	2805      	cmp	r0, #5
 8004f80:	d023      	beq.n	8004fca <USBH_MSC_BOT_Process+0x17e>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004f82:	2401      	movs	r4, #1
 8004f84:	e788      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8004f86:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004f88:	8932      	ldrh	r2, [r6, #8]
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d90c      	bls.n	8004fa8 <USBH_MSC_BOT_Process+0x15c>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8004f8e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004f92:	4411      	add	r1, r2
 8004f94:	f8c6 108c 	str.w	r1, [r6, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	65f3      	str	r3, [r6, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8004f9c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004f9e:	b933      	cbnz	r3, 8004fae <USBH_MSC_BOT_Process+0x162>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8004fa6:	e777      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	65f3      	str	r3, [r6, #92]	; 0x5c
 8004fac:	e7f6      	b.n	8004f9c <USBH_MSC_BOT_Process+0x150>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8004fae:	7973      	ldrb	r3, [r6, #5]
 8004fb0:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	9000      	str	r0, [sp, #0]
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f001 f82d 	bl	8006018 <USBH_BulkSendData>
 8004fbe:	e76b      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8004fc0:	2305      	movs	r3, #5
 8004fc2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004fc6:	2401      	movs	r4, #1
 8004fc8:	e766      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8004fca:	230a      	movs	r3, #10
 8004fcc:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004fd0:	2401      	movs	r4, #1
 8004fd2:	e761      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8004fd4:	7933      	ldrb	r3, [r6, #4]
 8004fd6:	220d      	movs	r2, #13
 8004fd8:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8004fdc:	f001 f832 	bl	8006044 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004fe6:	2401      	movs	r4, #1
      break;
 8004fe8:	e756      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8004fea:	7931      	ldrb	r1, [r6, #4]
 8004fec:	f002 fd28 	bl	8007a40 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004ff0:	2801      	cmp	r0, #1
 8004ff2:	d003      	beq.n	8004ffc <USBH_MSC_BOT_Process+0x1b0>
      else if (URB_Status == USBH_URB_STALL)
 8004ff4:	2805      	cmp	r0, #5
 8004ff6:	d00f      	beq.n	8005018 <USBH_MSC_BOT_Process+0x1cc>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8004ff8:	2401      	movs	r4, #1
 8004ffa:	e74d      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005002:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005006:	4628      	mov	r0, r5
 8005008:	f7ff febe 	bl	8004d88 <USBH_MSC_DecodeCSW>
        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800500c:	4604      	mov	r4, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	f43f af42 	beq.w	8004e98 <USBH_MSC_BOT_Process+0x4c>
          status = USBH_FAIL;
 8005014:	2402      	movs	r4, #2
 8005016:	e73f      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005018:	2309      	movs	r3, #9
 800501a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800501e:	2401      	movs	r4, #1
 8005020:	e73a      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005022:	2200      	movs	r2, #0
 8005024:	f7ff fed4 	bl	8004dd0 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 8005028:	b920      	cbnz	r0, 8005034 <USBH_MSC_BOT_Process+0x1e8>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800502a:	2307      	movs	r3, #7
 800502c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005030:	2401      	movs	r4, #1
 8005032:	e731      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      else if (error == USBH_UNRECOVERED_ERROR)
 8005034:	2804      	cmp	r0, #4
 8005036:	d001      	beq.n	800503c <USBH_MSC_BOT_Process+0x1f0>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005038:	2401      	movs	r4, #1
 800503a:	e72d      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800503c:	230b      	movs	r3, #11
 800503e:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005042:	2401      	movs	r4, #1
 8005044:	e728      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8005046:	2201      	movs	r2, #1
 8005048:	f7ff fec2 	bl	8004dd0 <USBH_MSC_BOT_Abort>
      if (error == USBH_OK)
 800504c:	b118      	cbz	r0, 8005056 <USBH_MSC_BOT_Process+0x20a>
        if (error == USBH_UNRECOVERED_ERROR)
 800504e:	2804      	cmp	r0, #4
 8005050:	d016      	beq.n	8005080 <USBH_MSC_BOT_Process+0x234>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005052:	2401      	movs	r4, #1
 8005054:	e720      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8005056:	7971      	ldrb	r1, [r6, #5]
 8005058:	4628      	mov	r0, r5
 800505a:	f002 fd12 	bl	8007a82 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800505e:	f1c0 0201 	rsb	r2, r0, #1
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	7971      	ldrb	r1, [r6, #5]
 8005066:	4628      	mov	r0, r5
 8005068:	f002 fcf6 	bl	8007a58 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800506c:	2200      	movs	r2, #0
 800506e:	7931      	ldrb	r1, [r6, #4]
 8005070:	4628      	mov	r0, r5
 8005072:	f002 fcf1 	bl	8007a58 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8005076:	2309      	movs	r3, #9
 8005078:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 800507c:	2401      	movs	r4, #1
 800507e:	e70b      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8005080:	230b      	movs	r3, #11
 8005082:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8005086:	2401      	movs	r4, #1
 8005088:	e706      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800508a:	f7ff feb2 	bl	8004df2 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800508e:	4604      	mov	r4, r0
 8005090:	2800      	cmp	r0, #0
 8005092:	f47f af01 	bne.w	8004e98 <USBH_MSC_BOT_Process+0x4c>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005096:	2301      	movs	r3, #1
 8005098:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800509c:	e6fc      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>
  switch (MSC_Handle->hbot.state)
 800509e:	2401      	movs	r4, #1
 80050a0:	e6fa      	b.n	8004e98 <USBH_MSC_BOT_Process+0x4c>

080050a2 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80050a2:	b508      	push	{r3, lr}
 80050a4:	4602      	mov	r2, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80050a6:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80050aa:	69db      	ldr	r3, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80050ac:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
 80050b0:	2801      	cmp	r0, #1
 80050b2:	d003      	beq.n	80050bc <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80050b4:	2802      	cmp	r0, #2
 80050b6:	d017      	beq.n	80050e8 <USBH_MSC_SCSI_TestUnitReady+0x46>
 80050b8:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80050ba:	bd08      	pop	{r3, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80050bc:	2200      	movs	r2, #0
 80050be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80050c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80050c4:	210a      	movs	r1, #10
 80050c6:	f883 1062 	strb.w	r1, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80050ca:	f8c3 2063 	str.w	r2, [r3, #99]	; 0x63
 80050ce:	f8c3 2067 	str.w	r2, [r3, #103]	; 0x67
 80050d2:	f8c3 206b 	str.w	r2, [r3, #107]	; 0x6b
 80050d6:	f8c3 206f 	str.w	r2, [r3, #111]	; 0x6f
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      break;
 80050e6:	e7e8      	b.n	80050ba <USBH_MSC_SCSI_TestUnitReady+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7ff feaf 	bl	8004e4c <USBH_MSC_BOT_Process>
      break;
 80050ee:	e7e4      	b.n	80050ba <USBH_MSC_SCSI_TestUnitReady+0x18>

080050f0 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80050f4:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 80050f8:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80050fa:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 80050fe:	2801      	cmp	r0, #1
 8005100:	d004      	beq.n	800510c <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8005102:	4615      	mov	r5, r2
 8005104:	2802      	cmp	r0, #2
 8005106:	d020      	beq.n	800514a <USBH_MSC_SCSI_ReadCapacity+0x5a>
 8005108:	2001      	movs	r0, #1
    default:
      break;
  }

  return error;
}
 800510a:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800510c:	2308      	movs	r3, #8
 800510e:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005116:	230a      	movs	r3, #10
 8005118:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800511c:	2300      	movs	r3, #0
 800511e:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 8005122:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005126:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 800512a:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800512e:	2325      	movs	r3, #37	; 0x25
 8005130:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005134:	2301      	movs	r3, #1
 8005136:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800513a:	2302      	movs	r3, #2
 800513c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005140:	f104 0310 	add.w	r3, r4, #16
 8005144:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005148:	e7df      	b.n	800510a <USBH_MSC_SCSI_ReadCapacity+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fe7e 	bl	8004e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8005150:	2800      	cmp	r0, #0
 8005152:	d1da      	bne.n	800510a <USBH_MSC_SCSI_ReadCapacity+0x1a>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005154:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005158:	78d3      	ldrb	r3, [r2, #3]
 800515a:	7891      	ldrb	r1, [r2, #2]
 800515c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005160:	7851      	ldrb	r1, [r2, #1]
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800516c:	602b      	str	r3, [r5, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800516e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005172:	79d3      	ldrb	r3, [r2, #7]
 8005174:	7992      	ldrb	r2, [r2, #6]
 8005176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800517a:	80ab      	strh	r3, [r5, #4]
 800517c:	e7c5      	b.n	800510a <USBH_MSC_SCSI_ReadCapacity+0x1a>

0800517e <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800517e:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005180:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005184:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005186:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800518a:	2d01      	cmp	r5, #1
 800518c:	d005      	beq.n	800519a <USBH_MSC_SCSI_Inquiry+0x1c>
 800518e:	4616      	mov	r6, r2
 8005190:	2d02      	cmp	r5, #2
 8005192:	d024      	beq.n	80051de <USBH_MSC_SCSI_Inquiry+0x60>
 8005194:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8005196:	4628      	mov	r0, r5
 8005198:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80051a4:	230a      	movs	r3, #10
 80051a6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80051aa:	2300      	movs	r3, #0
 80051ac:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 80051b0:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 80051b4:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80051b8:	2312      	movs	r3, #18
 80051ba:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80051be:	0149      	lsls	r1, r1, #5
 80051c0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80051c4:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80051ce:	2302      	movs	r3, #2
 80051d0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80051d4:	f104 0310 	add.w	r3, r4, #16
 80051d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80051dc:	e7db      	b.n	8005196 <USBH_MSC_SCSI_Inquiry+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80051de:	f7ff fe35 	bl	8004e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80051e2:	4605      	mov	r5, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1d6      	bne.n	8005196 <USBH_MSC_SCSI_Inquiry+0x18>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80051e8:	2222      	movs	r2, #34	; 0x22
 80051ea:	2100      	movs	r1, #0
 80051ec:	4630      	mov	r0, r6
 80051ee:	f003 f879 	bl	80082e4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80051f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80051fe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005208:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800520c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db17      	blt.n	8005244 <USBH_MSC_SCSI_Inquiry+0xc6>
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005214:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f8c6 2003 	str.w	r2, [r6, #3]
 8005220:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005224:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005228:	6918      	ldr	r0, [r3, #16]
 800522a:	6959      	ldr	r1, [r3, #20]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	60f0      	str	r0, [r6, #12]
 8005232:	6131      	str	r1, [r6, #16]
 8005234:	6172      	str	r2, [r6, #20]
 8005236:	61b3      	str	r3, [r6, #24]
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005238:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f8c6 301d 	str.w	r3, [r6, #29]
 8005242:	e7a8      	b.n	8005196 <USBH_MSC_SCSI_Inquiry+0x18>
          inquiry->RemovableMedia = 1U;
 8005244:	2301      	movs	r3, #1
 8005246:	70b3      	strb	r3, [r6, #2]
 8005248:	e7e4      	b.n	8005214 <USBH_MSC_SCSI_Inquiry+0x96>

0800524a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800524a:	b538      	push	{r3, r4, r5, lr}
 800524c:	4603      	mov	r3, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800524e:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 8005252:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8005254:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005258:	2801      	cmp	r0, #1
 800525a:	d004      	beq.n	8005266 <USBH_MSC_SCSI_RequestSense+0x1c>
 800525c:	4615      	mov	r5, r2
 800525e:	2802      	cmp	r0, #2
 8005260:	d025      	beq.n	80052ae <USBH_MSC_SCSI_RequestSense+0x64>
 8005262:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 8005264:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005266:	220e      	movs	r2, #14
 8005268:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005270:	230a      	movs	r3, #10
 8005272:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005276:	2300      	movs	r3, #0
 8005278:	f8c4 3063 	str.w	r3, [r4, #99]	; 0x63
 800527c:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8005280:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
 8005284:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005288:	2303      	movs	r3, #3
 800528a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800528e:	0149      	lsls	r1, r1, #5
 8005290:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005294:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005298:	2301      	movs	r3, #1
 800529a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800529e:	2302      	movs	r3, #2
 80052a0:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80052a4:	f104 0310 	add.w	r3, r4, #16
 80052a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80052ac:	e7da      	b.n	8005264 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fdcc 	bl	8004e4c <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d1d5      	bne.n	8005264 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80052b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80052bc:	789b      	ldrb	r3, [r3, #2]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80052c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80052c8:	7b1b      	ldrb	r3, [r3, #12]
 80052ca:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80052cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80052d0:	7b5b      	ldrb	r3, [r3, #13]
 80052d2:	70ab      	strb	r3, [r5, #2]
 80052d4:	e7c6      	b.n	8005264 <USBH_MSC_SCSI_RequestSense+0x1a>

080052d6 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80052d6:	b538      	push	{r3, r4, r5, lr}
 80052d8:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80052da:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 80052de:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80052e0:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 80052e4:	2801      	cmp	r0, #1
 80052e6:	d003      	beq.n	80052f0 <USBH_MSC_SCSI_Write+0x1a>
 80052e8:	2802      	cmp	r0, #2
 80052ea:	d036      	beq.n	800535a <USBH_MSC_SCSI_Write+0x84>
 80052ec:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80052f0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80052f4:	9d04      	ldr	r5, [sp, #16]
 80052f6:	fb05 f101 	mul.w	r1, r5, r1
 80052fa:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005302:	f04f 0c0a 	mov.w	ip, #10
 8005306:	f884 c062 	strb.w	ip, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800530a:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800530e:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 8005312:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 8005316:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800531a:	212a      	movs	r1, #42	; 0x2a
 800531c:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005320:	f3c2 6107 	ubfx	r1, r2, #24, #8
 8005324:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005328:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800532c:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005330:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005334:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005338:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800533c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8005340:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005344:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005348:	2201      	movs	r2, #1
 800534a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800534e:	2202      	movs	r2, #2
 8005350:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005354:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8005358:	e7c9      	b.n	80052ee <USBH_MSC_SCSI_Write+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800535a:	4660      	mov	r0, ip
 800535c:	f7ff fd76 	bl	8004e4c <USBH_MSC_BOT_Process>
      break;
 8005360:	e7c5      	b.n	80052ee <USBH_MSC_SCSI_Write+0x18>

08005362 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005362:	b538      	push	{r3, r4, r5, lr}
 8005364:	4684      	mov	ip, r0
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005366:	f8d0 037c 	ldr.w	r0, [r0, #892]	; 0x37c
 800536a:	69c4      	ldr	r4, [r0, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800536c:	f894 0052 	ldrb.w	r0, [r4, #82]	; 0x52
 8005370:	2801      	cmp	r0, #1
 8005372:	d003      	beq.n	800537c <USBH_MSC_SCSI_Read+0x1a>
 8005374:	2802      	cmp	r0, #2
 8005376:	d036      	beq.n	80053e6 <USBH_MSC_SCSI_Read+0x84>
 8005378:	2002      	movs	r0, #2
    default:
      break;
  }

  return error;
}
 800537a:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800537c:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8005380:	9d04      	ldr	r5, [sp, #16]
 8005382:	fb05 f101 	mul.w	r1, r5, r1
 8005386:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005388:	2180      	movs	r1, #128	; 0x80
 800538a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800538e:	210a      	movs	r1, #10
 8005390:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005394:	2100      	movs	r1, #0
 8005396:	f8c4 1063 	str.w	r1, [r4, #99]	; 0x63
 800539a:	f8c4 1067 	str.w	r1, [r4, #103]	; 0x67
 800539e:	f8c4 106b 	str.w	r1, [r4, #107]	; 0x6b
 80053a2:	f8c4 106f 	str.w	r1, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80053a6:	2128      	movs	r1, #40	; 0x28
 80053a8:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80053ac:	f3c2 6107 	ubfx	r1, r2, #24, #8
 80053b0:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80053b4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80053b8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80053bc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80053c0:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80053c4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80053c8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80053cc:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80053d0:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80053d4:	2201      	movs	r2, #1
 80053d6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80053da:	2202      	movs	r2, #2
 80053dc:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80053e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 80053e4:	e7c9      	b.n	800537a <USBH_MSC_SCSI_Read+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 80053e6:	4660      	mov	r0, ip
 80053e8:	f7ff fd30 	bl	8004e4c <USBH_MSC_BOT_Process>
      break;
 80053ec:	e7c5      	b.n	800537a <USBH_MSC_SCSI_Read+0x18>

080053ee <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80053ee:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	e006      	b.n	8005402 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 80053f4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 80053f8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80053fc:	2100      	movs	r1, #0
 80053fe:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005400:	3301      	adds	r3, #1
 8005402:	2b0e      	cmp	r3, #14
 8005404:	d9f6      	bls.n	80053f4 <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005406:	2300      	movs	r3, #0
 8005408:	e005      	b.n	8005416 <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 800540a:	eb0c 0203 	add.w	r2, ip, r3
 800540e:	2100      	movs	r1, #0
 8005410:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005414:	3301      	adds	r3, #1
 8005416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541a:	d3f6      	bcc.n	800540a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 800541c:	2000      	movs	r0, #0
 800541e:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8005422:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8005426:	2301      	movs	r3, #1
 8005428:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 800542c:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005430:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 800543a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800543e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005442:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005446:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800544a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 800544e:	4770      	bx	lr

08005450 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005450:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005452:	7803      	ldrb	r3, [r0, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b0b      	cmp	r3, #11
 8005458:	d000      	beq.n	800545c <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 800545a:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800545c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0fa      	beq.n	800545a <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	4798      	blx	r3
}
 8005468:	e7f7      	b.n	800545a <USBH_HandleSof+0xa>

0800546a <USBH_HandleEnum>:
{
 800546a:	b570      	push	{r4, r5, r6, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8005470:	7845      	ldrb	r5, [r0, #1]
 8005472:	2d07      	cmp	r5, #7
 8005474:	f200 812c 	bhi.w	80056d0 <USBH_HandleEnum+0x266>
 8005478:	e8df f015 	tbh	[pc, r5, lsl #1]
 800547c:	00480008 	.word	0x00480008
 8005480:	009a0069 	.word	0x009a0069
 8005484:	00e500bf 	.word	0x00e500bf
 8005488:	011700fe 	.word	0x011700fe
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800548c:	2108      	movs	r1, #8
 800548e:	f000 fcfd 	bl	8005e8c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8005492:	b118      	cbz	r0, 800549c <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005494:	2803      	cmp	r0, #3
 8005496:	d021      	beq.n	80054dc <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005498:	2501      	movs	r5, #1
 800549a:	e109      	b.n	80056b0 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800549c:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80054a0:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80054a2:	2501      	movs	r5, #1
 80054a4:	7065      	strb	r5, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	2600      	movs	r6, #0
 80054aa:	9601      	str	r6, [sp, #4]
 80054ac:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	7921      	ldrb	r1, [r4, #4]
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fde5 	bl	800608a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80054c0:	79a3      	ldrb	r3, [r4, #6]
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	9601      	str	r6, [sp, #4]
 80054c6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80054d0:	4632      	mov	r2, r6
 80054d2:	7961      	ldrb	r1, [r4, #5]
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 fdd8 	bl	800608a <USBH_OpenPipe>
 80054da:	e0e9      	b.n	80056b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80054dc:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80054e0:	3301      	adds	r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d903      	bls.n	80054f4 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 80054ec:	230d      	movs	r3, #13
 80054ee:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80054f0:	2501      	movs	r5, #1
 80054f2:	e0dd      	b.n	80056b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80054f4:	7961      	ldrb	r1, [r4, #5]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 fdef 	bl	80060da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80054fc:	7921      	ldrb	r1, [r4, #4]
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 fdeb 	bl	80060da <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005504:	2300      	movs	r3, #0
 8005506:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005508:	2501      	movs	r5, #1
 800550a:	e0d1      	b.n	80056b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800550c:	2112      	movs	r1, #18
 800550e:	f000 fcbd 	bl	8005e8c <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8005512:	b910      	cbnz	r0, 800551a <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8005514:	2302      	movs	r3, #2
 8005516:	7063      	strb	r3, [r4, #1]
 8005518:	e0ca      	b.n	80056b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800551a:	2803      	cmp	r0, #3
 800551c:	f040 80c8 	bne.w	80056b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8005520:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8005524:	3301      	adds	r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800552c:	2b03      	cmp	r3, #3
 800552e:	d902      	bls.n	8005536 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8005530:	230d      	movs	r3, #13
 8005532:	7023      	strb	r3, [r4, #0]
 8005534:	e0bc      	b.n	80056b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005536:	7961      	ldrb	r1, [r4, #5]
 8005538:	4620      	mov	r0, r4
 800553a:	f000 fdce 	bl	80060da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800553e:	7921      	ldrb	r1, [r4, #4]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fdca 	bl	80060da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005546:	2300      	movs	r3, #0
 8005548:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800554a:	7023      	strb	r3, [r4, #0]
 800554c:	e0b0      	b.n	80056b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800554e:	2101      	movs	r1, #1
 8005550:	f000 fce6 	bl	8005f20 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8005554:	b118      	cbz	r0, 800555e <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005556:	2803      	cmp	r0, #3
 8005558:	d024      	beq.n	80055a4 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800555a:	2501      	movs	r5, #1
 800555c:	e0a8      	b.n	80056b0 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 800555e:	2002      	movs	r0, #2
 8005560:	f002 faa3 	bl	8007aaa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005564:	2501      	movs	r5, #1
 8005566:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800556a:	2303      	movs	r3, #3
 800556c:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800556e:	79a3      	ldrb	r3, [r4, #6]
 8005570:	9302      	str	r3, [sp, #8]
 8005572:	2600      	movs	r6, #0
 8005574:	9601      	str	r6, [sp, #4]
 8005576:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	462b      	mov	r3, r5
 800557e:	2280      	movs	r2, #128	; 0x80
 8005580:	7921      	ldrb	r1, [r4, #4]
 8005582:	4620      	mov	r0, r4
 8005584:	f000 fd81 	bl	800608a <USBH_OpenPipe>
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005588:	79a3      	ldrb	r3, [r4, #6]
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	9601      	str	r6, [sp, #4]
 800558e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005598:	4632      	mov	r2, r6
 800559a:	7961      	ldrb	r1, [r4, #5]
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fd74 	bl	800608a <USBH_OpenPipe>
 80055a2:	e085      	b.n	80056b0 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 80055a4:	230d      	movs	r3, #13
 80055a6:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80055a8:	2300      	movs	r3, #0
 80055aa:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055ac:	2501      	movs	r5, #1
 80055ae:	e07f      	b.n	80056b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80055b0:	2109      	movs	r1, #9
 80055b2:	f000 fc84 	bl	8005ebe <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80055b6:	b918      	cbnz	r0, 80055c0 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80055b8:	2304      	movs	r3, #4
 80055ba:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055bc:	2501      	movs	r5, #1
 80055be:	e077      	b.n	80056b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80055c0:	2803      	cmp	r0, #3
 80055c2:	d001      	beq.n	80055c8 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055c4:	2501      	movs	r5, #1
 80055c6:	e073      	b.n	80056b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80055c8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80055cc:	3301      	adds	r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d903      	bls.n	80055e0 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 80055d8:	230d      	movs	r3, #13
 80055da:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055dc:	2501      	movs	r5, #1
 80055de:	e067      	b.n	80056b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80055e0:	7961      	ldrb	r1, [r4, #5]
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fd79 	bl	80060da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80055e8:	7921      	ldrb	r1, [r4, #4]
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fd75 	bl	80060da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80055f0:	2300      	movs	r3, #0
 80055f2:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80055f4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80055f6:	2501      	movs	r5, #1
 80055f8:	e05a      	b.n	80056b0 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80055fa:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 80055fe:	f000 fc5e 	bl	8005ebe <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8005602:	b918      	cbnz	r0, 800560c <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005604:	2305      	movs	r3, #5
 8005606:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005608:	2501      	movs	r5, #1
 800560a:	e051      	b.n	80056b0 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800560c:	2803      	cmp	r0, #3
 800560e:	d001      	beq.n	8005614 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005610:	2501      	movs	r5, #1
 8005612:	e04d      	b.n	80056b0 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8005614:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8005618:	3301      	adds	r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005620:	2b03      	cmp	r3, #3
 8005622:	d903      	bls.n	800562c <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8005624:	230d      	movs	r3, #13
 8005626:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005628:	2501      	movs	r5, #1
 800562a:	e041      	b.n	80056b0 <USBH_HandleEnum+0x246>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800562c:	7961      	ldrb	r1, [r4, #5]
 800562e:	4620      	mov	r0, r4
 8005630:	f000 fd53 	bl	80060da <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005634:	7921      	ldrb	r1, [r4, #4]
 8005636:	4620      	mov	r0, r4
 8005638:	f000 fd4f 	bl	80060da <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800563c:	2300      	movs	r3, #0
 800563e:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8005640:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005642:	2501      	movs	r5, #1
 8005644:	e034      	b.n	80056b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005646:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 800564a:	b919      	cbnz	r1, 8005654 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800564c:	2306      	movs	r3, #6
 800564e:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005650:	2501      	movs	r5, #1
 8005652:	e02d      	b.n	80056b0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005654:	23ff      	movs	r3, #255	; 0xff
 8005656:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800565a:	f000 fc49 	bl	8005ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800565e:	b918      	cbnz	r0, 8005668 <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005660:	2306      	movs	r3, #6
 8005662:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005664:	2501      	movs	r5, #1
 8005666:	e023      	b.n	80056b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005668:	2803      	cmp	r0, #3
 800566a:	d001      	beq.n	8005670 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800566c:	2501      	movs	r5, #1
 800566e:	e01f      	b.n	80056b0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005670:	2306      	movs	r3, #6
 8005672:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005674:	2501      	movs	r5, #1
 8005676:	e01b      	b.n	80056b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 8005678:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 800567c:	b919      	cbnz	r1, 8005686 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800567e:	2307      	movs	r3, #7
 8005680:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005682:	2501      	movs	r5, #1
 8005684:	e014      	b.n	80056b0 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005686:	23ff      	movs	r3, #255	; 0xff
 8005688:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800568c:	f000 fc30 	bl	8005ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8005690:	b918      	cbnz	r0, 800569a <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005692:	2307      	movs	r3, #7
 8005694:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005696:	2501      	movs	r5, #1
 8005698:	e00a      	b.n	80056b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800569a:	2803      	cmp	r0, #3
 800569c:	d001      	beq.n	80056a2 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800569e:	2501      	movs	r5, #1
 80056a0:	e006      	b.n	80056b0 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80056a2:	2307      	movs	r3, #7
 80056a4:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80056a6:	2501      	movs	r5, #1
 80056a8:	e002      	b.n	80056b0 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80056aa:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 80056ae:	b915      	cbnz	r5, 80056b6 <USBH_HandleEnum+0x24c>
}
 80056b0:	4628      	mov	r0, r5
 80056b2:	b004      	add	sp, #16
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80056b6:	23ff      	movs	r3, #255	; 0xff
 80056b8:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80056bc:	4629      	mov	r1, r5
 80056be:	f000 fc17 	bl	8005ef0 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80056c2:	4605      	mov	r5, r0
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d0f3      	beq.n	80056b0 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80056c8:	2803      	cmp	r0, #3
 80056ca:	d003      	beq.n	80056d4 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80056cc:	2501      	movs	r5, #1
 80056ce:	e7ef      	b.n	80056b0 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 80056d0:	2501      	movs	r5, #1
 80056d2:	e7ed      	b.n	80056b0 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 80056d4:	2500      	movs	r5, #0
 80056d6:	e7eb      	b.n	80056b0 <USBH_HandleEnum+0x246>

080056d8 <USBH_Init>:
  if (phost == NULL)
 80056d8:	b1d8      	cbz	r0, 8005712 <USBH_Init+0x3a>
{
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	460e      	mov	r6, r1
 80056de:	4604      	mov	r4, r0
  phost->id = id;
 80056e0:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 80056e4:	2500      	movs	r5, #0
 80056e6:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80056ea:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  DeInitStateMachine(phost);
 80056ee:	f7ff fe7e 	bl	80053ee <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80056f2:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 80056f6:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80056fa:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80056fe:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 8005702:	b10e      	cbz	r6, 8005708 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8005704:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8005708:	4620      	mov	r0, r4
 800570a:	f002 f959 	bl	80079c0 <USBH_LL_Init>
  return USBH_OK;
 800570e:	2000      	movs	r0, #0
}
 8005710:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8005712:	2002      	movs	r0, #2
}
 8005714:	4770      	bx	lr

08005716 <USBH_RegisterClass>:
  if (pclass != NULL)
 8005716:	460a      	mov	r2, r1
 8005718:	b151      	cbz	r1, 8005730 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800571a:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 800571e:	b94b      	cbnz	r3, 8005734 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 8005726:	33de      	adds	r3, #222	; 0xde
 8005728:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 800572c:	2000      	movs	r0, #0
 800572e:	4770      	bx	lr
    status = USBH_FAIL;
 8005730:	2002      	movs	r0, #2
 8005732:	4770      	bx	lr
      status = USBH_FAIL;
 8005734:	2002      	movs	r0, #2
}
 8005736:	4770      	bx	lr

08005738 <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005738:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800573c:	428b      	cmp	r3, r1
 800573e:	d903      	bls.n	8005748 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8005740:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8005744:	2000      	movs	r0, #0
 8005746:	4770      	bx	lr
    status = USBH_FAIL;
 8005748:	2002      	movs	r0, #2
}
 800574a:	4770      	bx	lr

0800574c <USBH_FindInterface>:
{
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8005750:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005752:	e00b      	b.n	800576c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005754:	f04f 0c1a 	mov.w	ip, #26
 8005758:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800575c:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005760:	459c      	cmp	ip, r3
 8005762:	d01c      	beq.n	800579e <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005764:	2bff      	cmp	r3, #255	; 0xff
 8005766:	d01a      	beq.n	800579e <USBH_FindInterface+0x52>
    if_ix++;
 8005768:	3001      	adds	r0, #1
 800576a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800576c:	2801      	cmp	r0, #1
 800576e:	d815      	bhi.n	800579c <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8005770:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005772:	f04f 0c1a 	mov.w	ip, #26
 8005776:	fb0c 4c00 	mla	ip, ip, r0, r4
 800577a:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 800577e:	458c      	cmp	ip, r1
 8005780:	d001      	beq.n	8005786 <USBH_FindInterface+0x3a>
 8005782:	29ff      	cmp	r1, #255	; 0xff
 8005784:	d1f0      	bne.n	8005768 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005786:	f04f 0c1a 	mov.w	ip, #26
 800578a:	fb0c 4c0e 	mla	ip, ip, lr, r4
 800578e:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005792:	4594      	cmp	ip, r2
 8005794:	d0de      	beq.n	8005754 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005796:	2aff      	cmp	r2, #255	; 0xff
 8005798:	d1e6      	bne.n	8005768 <USBH_FindInterface+0x1c>
 800579a:	e7db      	b.n	8005754 <USBH_FindInterface+0x8>
  return 0xFFU;
 800579c:	20ff      	movs	r0, #255	; 0xff
}
 800579e:	bd10      	pop	{r4, pc}

080057a0 <USBH_Start>:
{
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4604      	mov	r4, r0
  USBH_LL_Start(phost);
 80057a4:	f002 f98f 	bl	8007ac6 <USBH_LL_Start>
  USBH_LL_DriverVBUS(phost, TRUE);
 80057a8:	2101      	movs	r1, #1
 80057aa:	4620      	mov	r0, r4
 80057ac:	f002 f94e 	bl	8007a4c <USBH_LL_DriverVBUS>
}
 80057b0:	2000      	movs	r0, #0
 80057b2:	bd10      	pop	{r4, pc}

080057b4 <USBH_Process>:
{
 80057b4:	b530      	push	{r4, r5, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80057ba:	2302      	movs	r3, #2
 80057bc:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 80057c0:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d011      	beq.n	80057ee <USBH_Process+0x3a>
  switch (phost->gState)
 80057ca:	7823      	ldrb	r3, [r4, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b0b      	cmp	r3, #11
 80057d0:	d87b      	bhi.n	80058ca <USBH_Process+0x116>
 80057d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80057d6:	000f      	.short	0x000f
 80057d8:	00450021 	.word	0x00450021
 80057dc:	007a0105 	.word	0x007a0105
 80057e0:	00e3007d 	.word	0x00e3007d
 80057e4:	009c0092 	.word	0x009c0092
 80057e8:	00b700a6 	.word	0x00b700a6
 80057ec:	00fc      	.short	0x00fc
    phost->gState = HOST_DEV_DISCONNECTED;
 80057ee:	2303      	movs	r3, #3
 80057f0:	7003      	strb	r3, [r0, #0]
 80057f2:	e7ea      	b.n	80057ca <USBH_Process+0x16>
      if (phost->device.is_connected)
 80057f4:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d066      	beq.n	80058ca <USBH_Process+0x116>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80057fc:	2301      	movs	r3, #1
 80057fe:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 8005800:	20c8      	movs	r0, #200	; 0xc8
 8005802:	f002 f952 	bl	8007aaa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005806:	4620      	mov	r0, r4
 8005808:	f002 f96d 	bl	8007ae6 <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800580c:	2300      	movs	r3, #0
 800580e:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8005812:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 8005816:	e058      	b.n	80058ca <USBH_Process+0x116>
      if (phost->device.PortEnabled == 1U)
 8005818:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800581c:	2b01      	cmp	r3, #1
 800581e:	d00f      	beq.n	8005840 <USBH_Process+0x8c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005820:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8005824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005828:	d913      	bls.n	8005852 <USBH_Process+0x9e>
          phost->device.RstCnt++;
 800582a:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800582e:	3301      	adds	r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005836:	2b03      	cmp	r3, #3
 8005838:	d908      	bls.n	800584c <USBH_Process+0x98>
            phost->gState = HOST_ABORT_STATE;
 800583a:	230d      	movs	r3, #13
 800583c:	7023      	strb	r3, [r4, #0]
 800583e:	e044      	b.n	80058ca <USBH_Process+0x116>
        phost->device.RstCnt = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005846:	2302      	movs	r3, #2
 8005848:	7023      	strb	r3, [r4, #0]
 800584a:	e03e      	b.n	80058ca <USBH_Process+0x116>
            phost->gState = HOST_IDLE;
 800584c:	2300      	movs	r3, #0
 800584e:	7023      	strb	r3, [r4, #0]
 8005850:	e03b      	b.n	80058ca <USBH_Process+0x116>
          phost->Timeout += 10U;
 8005852:	330a      	adds	r3, #10
 8005854:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8005858:	200a      	movs	r0, #10
 800585a:	f002 f926 	bl	8007aaa <USBH_Delay>
 800585e:	e034      	b.n	80058ca <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8005860:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8005864:	b113      	cbz	r3, 800586c <USBH_Process+0xb8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005866:	2104      	movs	r1, #4
 8005868:	4620      	mov	r0, r4
 800586a:	4798      	blx	r3
      USBH_Delay(100U);
 800586c:	2064      	movs	r0, #100	; 0x64
 800586e:	f002 f91c 	bl	8007aaa <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005872:	4620      	mov	r0, r4
 8005874:	f002 f8ce 	bl	8007a14 <USBH_LL_GetSpeed>
 8005878:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800587c:	2305      	movs	r3, #5
 800587e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005880:	2100      	movs	r1, #0
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fc16 	bl	80060b4 <USBH_AllocPipe>
 8005888:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800588a:	2180      	movs	r1, #128	; 0x80
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fc11 	bl	80060b4 <USBH_AllocPipe>
 8005892:	4601      	mov	r1, r0
 8005894:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005896:	79a3      	ldrb	r3, [r4, #6]
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	2500      	movs	r5, #0
 800589c:	9501      	str	r5, [sp, #4]
 800589e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fbed 	bl	800608a <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80058b0:	79a3      	ldrb	r3, [r4, #6]
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	9501      	str	r5, [sp, #4]
 80058b6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80058c0:	462a      	mov	r2, r5
 80058c2:	7961      	ldrb	r1, [r4, #5]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fbe0 	bl	800608a <USBH_OpenPipe>
}
 80058ca:	2000      	movs	r0, #0
 80058cc:	b007      	add	sp, #28
 80058ce:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff fdca 	bl	800546a <USBH_HandleEnum>
 80058d6:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 80058da:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f3      	bne.n	80058ca <USBH_Process+0x116>
        phost->device.current_interface = 0U;
 80058e2:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80058e6:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d002      	beq.n	80058f4 <USBH_Process+0x140>
          phost->gState = HOST_INPUT;
 80058ee:	2307      	movs	r3, #7
 80058f0:	7023      	strb	r3, [r4, #0]
 80058f2:	e7ea      	b.n	80058ca <USBH_Process+0x116>
          phost->gState = HOST_SET_CONFIGURATION;
 80058f4:	2308      	movs	r3, #8
 80058f6:	7023      	strb	r3, [r4, #0]
 80058f8:	e7e7      	b.n	80058ca <USBH_Process+0x116>
      if (phost->pUser != NULL)
 80058fa:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0e3      	beq.n	80058ca <USBH_Process+0x116>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005902:	2101      	movs	r1, #1
 8005904:	4620      	mov	r0, r4
 8005906:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005908:	2308      	movs	r3, #8
 800590a:	7023      	strb	r3, [r4, #0]
 800590c:	e7dd      	b.n	80058ca <USBH_Process+0x116>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800590e:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fb15 	bl	8005f42 <USBH_SetCfg>
 8005918:	2800      	cmp	r0, #0
 800591a:	d1d6      	bne.n	80058ca <USBH_Process+0x116>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800591c:	2309      	movs	r3, #9
 800591e:	7023      	strb	r3, [r4, #0]
 8005920:	e7d3      	b.n	80058ca <USBH_Process+0x116>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005922:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 8005926:	f013 0f20 	tst.w	r3, #32
 800592a:	d102      	bne.n	8005932 <USBH_Process+0x17e>
        phost->gState = HOST_CHECK_CLASS;
 800592c:	230a      	movs	r3, #10
 800592e:	7023      	strb	r3, [r4, #0]
 8005930:	e7cb      	b.n	80058ca <USBH_Process+0x116>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005932:	2101      	movs	r1, #1
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fb15 	bl	8005f64 <USBH_SetFeature>
 800593a:	2800      	cmp	r0, #0
 800593c:	d1c5      	bne.n	80058ca <USBH_Process+0x116>
          phost->gState = HOST_CHECK_CLASS;
 800593e:	230a      	movs	r3, #10
 8005940:	7023      	strb	r3, [r4, #0]
 8005942:	e7c2      	b.n	80058ca <USBH_Process+0x116>
      if (phost->ClassNumber == 0U)
 8005944:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0be      	beq.n	80058ca <USBH_Process+0x116>
        phost->pActiveClass = NULL;
 800594c:	2300      	movs	r3, #0
 800594e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005952:	b173      	cbz	r3, 8005972 <USBH_Process+0x1be>
        if (phost->pActiveClass != NULL)
 8005954:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8005958:	b1eb      	cbz	r3, 8005996 <USBH_Process+0x1e2>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4620      	mov	r0, r4
 800595e:	4798      	blx	r3
 8005960:	b9b0      	cbnz	r0, 8005990 <USBH_Process+0x1dc>
            phost->gState = HOST_CLASS_REQUEST;
 8005962:	2306      	movs	r3, #6
 8005964:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005966:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800596a:	2103      	movs	r1, #3
 800596c:	4620      	mov	r0, r4
 800596e:	4798      	blx	r3
 8005970:	e7ab      	b.n	80058ca <USBH_Process+0x116>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005972:	f103 02de 	add.w	r2, r3, #222	; 0xde
 8005976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800597a:	7910      	ldrb	r0, [r2, #4]
 800597c:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8005980:	4288      	cmp	r0, r1
 8005982:	d002      	beq.n	800598a <USBH_Process+0x1d6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005984:	3301      	adds	r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e7e3      	b.n	8005952 <USBH_Process+0x19e>
            phost->pActiveClass = phost->pClass[idx];
 800598a:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 800598e:	e7e1      	b.n	8005954 <USBH_Process+0x1a0>
            phost->gState = HOST_ABORT_STATE;
 8005990:	230d      	movs	r3, #13
 8005992:	7023      	strb	r3, [r4, #0]
 8005994:	e799      	b.n	80058ca <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 8005996:	230d      	movs	r3, #13
 8005998:	7023      	strb	r3, [r4, #0]
 800599a:	e796      	b.n	80058ca <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 800599c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80059a0:	b193      	cbz	r3, 80059c8 <USBH_Process+0x214>
        status = phost->pActiveClass->Requests(phost);
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4620      	mov	r0, r4
 80059a6:	4798      	blx	r3
 80059a8:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80059ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80059b0:	b913      	cbnz	r3, 80059b8 <USBH_Process+0x204>
          phost->gState = HOST_CLASS;
 80059b2:	230b      	movs	r3, #11
 80059b4:	7023      	strb	r3, [r4, #0]
 80059b6:	e788      	b.n	80058ca <USBH_Process+0x116>
        else if (status == USBH_FAIL)
 80059b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d183      	bne.n	80058ca <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 80059c2:	230d      	movs	r3, #13
 80059c4:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80059c6:	e780      	b.n	80058ca <USBH_Process+0x116>
        phost->gState = HOST_ABORT_STATE;
 80059c8:	230d      	movs	r3, #13
 80059ca:	7023      	strb	r3, [r4, #0]
 80059cc:	e77d      	b.n	80058ca <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 80059ce:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f43f af79 	beq.w	80058ca <USBH_Process+0x116>
        phost->pActiveClass->BgndProcess(phost);
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	4620      	mov	r0, r4
 80059dc:	4798      	blx	r3
 80059de:	e774      	b.n	80058ca <USBH_Process+0x116>
      phost->device.is_disconnected = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      DeInitStateMachine(phost);
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7ff fd01 	bl	80053ee <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80059ec:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80059f0:	b12b      	cbz	r3, 80059fe <USBH_Process+0x24a>
        phost->pActiveClass->DeInit(phost);
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4620      	mov	r0, r4
 80059f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80059fe:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8005a02:	b113      	cbz	r3, 8005a0a <USBH_Process+0x256>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005a04:	2105      	movs	r1, #5
 8005a06:	4620      	mov	r0, r4
 8005a08:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8005a0a:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d003      	beq.n	8005a1c <USBH_Process+0x268>
        USBH_LL_Start(phost);
 8005a14:	4620      	mov	r0, r4
 8005a16:	f002 f856 	bl	8007ac6 <USBH_LL_Start>
 8005a1a:	e756      	b.n	80058ca <USBH_Process+0x116>
        phost->device.is_ReEnumerated = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        USBH_Start(phost);
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff febc 	bl	80057a0 <USBH_Start>
 8005a28:	e74f      	b.n	80058ca <USBH_Process+0x116>

08005a2a <USBH_LL_SetTimer>:
  phost->Timer = time;
 8005a2a:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8005a2e:	4770      	bx	lr

08005a30 <USBH_LL_IncTimer>:
{
 8005a30:	b508      	push	{r3, lr}
  phost->Timer++;
 8005a32:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 8005a36:	3201      	adds	r2, #1
 8005a38:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005a3c:	f7ff fd08 	bl	8005450 <USBH_HandleSof>
}
 8005a40:	bd08      	pop	{r3, pc}

08005a42 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8005a48:	4770      	bx	lr

08005a4a <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8005a50:	4770      	bx	lr

08005a52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005a52:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8005a54:	2201      	movs	r2, #1
 8005a56:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a60:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005a64:	4770      	bx	lr

08005a66 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005a66:	b538      	push	{r3, r4, r5, lr}
 8005a68:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005a70:	2500      	movs	r5, #0
 8005a72:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005a76:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005a7a:	f002 f82c 	bl	8007ad6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005a7e:	7921      	ldrb	r1, [r4, #4]
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fb2a 	bl	80060da <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005a86:	7961      	ldrb	r1, [r4, #5]
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fb26 	bl	80060da <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005a8e:	4628      	mov	r0, r5
 8005a90:	bd38      	pop	{r3, r4, r5, pc}

08005a92 <USBH_ParseDevDesc>:
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005a92:	780b      	ldrb	r3, [r1, #0]
 8005a94:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005a96:	784b      	ldrb	r3, [r1, #1]
 8005a98:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005a9a:	788b      	ldrb	r3, [r1, #2]
 8005a9c:	f891 c003 	ldrb.w	ip, [r1, #3]
 8005aa0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8005aa4:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005aa6:	790b      	ldrb	r3, [r1, #4]
 8005aa8:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005aaa:	794b      	ldrb	r3, [r1, #5]
 8005aac:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005aae:	798b      	ldrb	r3, [r1, #6]
 8005ab0:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005ab2:	79cb      	ldrb	r3, [r1, #7]
 8005ab4:	71c3      	strb	r3, [r0, #7]

  if (length > 8U)
 8005ab6:	2a08      	cmp	r2, #8
 8005ab8:	d916      	bls.n	8005ae8 <USBH_ParseDevDesc+0x56>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005aba:	7a0b      	ldrb	r3, [r1, #8]
 8005abc:	7a4a      	ldrb	r2, [r1, #9]
 8005abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ac2:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005ac4:	7a8b      	ldrb	r3, [r1, #10]
 8005ac6:	7aca      	ldrb	r2, [r1, #11]
 8005ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005acc:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005ace:	7b0b      	ldrb	r3, [r1, #12]
 8005ad0:	7b4a      	ldrb	r2, [r1, #13]
 8005ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ad6:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005ad8:	7b8b      	ldrb	r3, [r1, #14]
 8005ada:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005adc:	7bcb      	ldrb	r3, [r1, #15]
 8005ade:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005ae0:	7c0b      	ldrb	r3, [r1, #16]
 8005ae2:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005ae4:	7c4b      	ldrb	r3, [r1, #17]
 8005ae6:	7443      	strb	r3, [r0, #17]
  }
}
 8005ae8:	4770      	bx	lr

08005aea <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005aea:	780b      	ldrb	r3, [r1, #0]
 8005aec:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005aee:	784b      	ldrb	r3, [r1, #1]
 8005af0:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005af2:	788b      	ldrb	r3, [r1, #2]
 8005af4:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005af6:	78cb      	ldrb	r3, [r1, #3]
 8005af8:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005afa:	790b      	ldrb	r3, [r1, #4]
 8005afc:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005afe:	794b      	ldrb	r3, [r1, #5]
 8005b00:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005b02:	798b      	ldrb	r3, [r1, #6]
 8005b04:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005b06:	79cb      	ldrb	r3, [r1, #7]
 8005b08:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005b0a:	7a0b      	ldrb	r3, [r1, #8]
 8005b0c:	7203      	strb	r3, [r0, #8]
}
 8005b0e:	4770      	bx	lr

08005b10 <USBH_ParseEPDesc>:
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005b10:	780b      	ldrb	r3, [r1, #0]
 8005b12:	7003      	strb	r3, [r0, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005b14:	784b      	ldrb	r3, [r1, #1]
 8005b16:	7043      	strb	r3, [r0, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005b18:	788b      	ldrb	r3, [r1, #2]
 8005b1a:	7083      	strb	r3, [r0, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005b1c:	78cb      	ldrb	r3, [r1, #3]
 8005b1e:	70c3      	strb	r3, [r0, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005b20:	790b      	ldrb	r3, [r1, #4]
 8005b22:	794a      	ldrb	r2, [r1, #5]
 8005b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b28:	8083      	strh	r3, [r0, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005b2a:	798b      	ldrb	r3, [r1, #6]
 8005b2c:	7183      	strb	r3, [r0, #6]
}
 8005b2e:	4770      	bx	lr

08005b30 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005b30:	7843      	ldrb	r3, [r0, #1]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d000      	beq.n	8005b38 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 8005b36:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005b38:	7803      	ldrb	r3, [r0, #0]
 8005b3a:	3b02      	subs	r3, #2
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	bf28      	it	cs
 8005b40:	461a      	movcs	r2, r3
 8005b42:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8005b44:	2300      	movs	r3, #0
 8005b46:	e007      	b.n	8005b58 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 8005b48:	eb00 0c03 	add.w	ip, r0, r3
 8005b4c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8005b50:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8005b54:	3302      	adds	r3, #2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d3f5      	bcc.n	8005b48 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	700b      	strb	r3, [r1, #0]
}
 8005b60:	e7e9      	b.n	8005b36 <USBH_ParseStringDesc+0x6>

08005b62 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005b62:	b530      	push	{r4, r5, lr}
 8005b64:	b083      	sub	sp, #12
 8005b66:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8005b68:	7e05      	ldrb	r5, [r0, #24]
 8005b6a:	1e6b      	subs	r3, r5, #1
 8005b6c:	2b0a      	cmp	r3, #10
 8005b6e:	f200 80de 	bhi.w	8005d2e <USBH_HandleControl+0x1cc>
 8005b72:	e8df f003 	tbb	[pc, r3]
 8005b76:	1006      	.short	0x1006
 8005b78:	61544135 	.word	0x61544135
 8005b7c:	aa9d8a7e 	.word	0xaa9d8a7e
 8005b80:	c1          	.byte	0xc1
 8005b81:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005b82:	7942      	ldrb	r2, [r0, #5]
 8005b84:	f100 0110 	add.w	r1, r0, #16
 8005b88:	f000 fa0f 	bl	8005faa <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 8005b90:	4628      	mov	r0, r5
 8005b92:	b003      	add	sp, #12
 8005b94:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005b96:	7941      	ldrb	r1, [r0, #5]
 8005b98:	f001 ff52 	bl	8007a40 <USBH_LL_GetURBState>
 8005b9c:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8005b9e:	2801      	cmp	r0, #1
 8005ba0:	d005      	beq.n	8005bae <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005ba2:	2804      	cmp	r0, #4
 8005ba4:	d018      	beq.n	8005bd8 <USBH_HandleControl+0x76>
 8005ba6:	2802      	cmp	r0, #2
 8005ba8:	d016      	beq.n	8005bd8 <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005baa:	2501      	movs	r5, #1
 8005bac:	e7f0      	b.n	8005b90 <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005bae:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8005bb0:	8ae2      	ldrh	r2, [r4, #22]
 8005bb2:	b142      	cbz	r2, 8005bc6 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 8005bb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bb8:	d102      	bne.n	8005bc0 <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 8005bba:	2305      	movs	r3, #5
 8005bbc:	7623      	strb	r3, [r4, #24]
 8005bbe:	e7e7      	b.n	8005b90 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	7623      	strb	r3, [r4, #24]
 8005bc4:	e7e4      	b.n	8005b90 <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 8005bc6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bca:	d102      	bne.n	8005bd2 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 8005bcc:	2307      	movs	r3, #7
 8005bce:	7623      	strb	r3, [r4, #24]
 8005bd0:	e7de      	b.n	8005b90 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 8005bd2:	2309      	movs	r3, #9
 8005bd4:	7623      	strb	r3, [r4, #24]
 8005bd6:	e7db      	b.n	8005b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8005bd8:	230b      	movs	r3, #11
 8005bda:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bdc:	2501      	movs	r5, #1
 8005bde:	e7d7      	b.n	8005b90 <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005be0:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8005be4:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005be6:	7903      	ldrb	r3, [r0, #4]
 8005be8:	8982      	ldrh	r2, [r0, #12]
 8005bea:	6881      	ldr	r1, [r0, #8]
 8005bec:	f000 fa04 	bl	8005ff8 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bf4:	2501      	movs	r5, #1
      break;
 8005bf6:	e7cb      	b.n	8005b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005bf8:	7901      	ldrb	r1, [r0, #4]
 8005bfa:	f001 ff21 	bl	8007a40 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005bfe:	2801      	cmp	r0, #1
 8005c00:	d006      	beq.n	8005c10 <USBH_HandleControl+0xae>
      if (URB_Status == USBH_URB_STALL)
 8005c02:	2805      	cmp	r0, #5
 8005c04:	f000 8095 	beq.w	8005d32 <USBH_HandleControl+0x1d0>
        if (URB_Status == USBH_URB_ERROR)
 8005c08:	2804      	cmp	r0, #4
 8005c0a:	d004      	beq.n	8005c16 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c0c:	2501      	movs	r5, #1
 8005c0e:	e7bf      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8005c10:	2309      	movs	r3, #9
 8005c12:	7623      	strb	r3, [r4, #24]
 8005c14:	e7f5      	b.n	8005c02 <USBH_HandleControl+0xa0>
          phost->Control.state = CTRL_ERROR;
 8005c16:	230b      	movs	r3, #11
 8005c18:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c1a:	2501      	movs	r5, #1
 8005c1c:	e7b8      	b.n	8005b90 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005c1e:	2501      	movs	r5, #1
 8005c20:	9500      	str	r5, [sp, #0]
 8005c22:	7943      	ldrb	r3, [r0, #5]
 8005c24:	8982      	ldrh	r2, [r0, #12]
 8005c26:	6881      	ldr	r1, [r0, #8]
 8005c28:	f000 f9d0 	bl	8005fcc <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005c2c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005c30:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005c32:	2306      	movs	r3, #6
 8005c34:	7623      	strb	r3, [r4, #24]
      break;
 8005c36:	e7ab      	b.n	8005b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c38:	7941      	ldrb	r1, [r0, #5]
 8005c3a:	f001 ff01 	bl	8007a40 <USBH_LL_GetURBState>
 8005c3e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8005c40:	2801      	cmp	r0, #1
 8005c42:	d007      	beq.n	8005c54 <USBH_HandleControl+0xf2>
      else if (URB_Status == USBH_URB_STALL)
 8005c44:	2805      	cmp	r0, #5
 8005c46:	d008      	beq.n	8005c5a <USBH_HandleControl+0xf8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005c48:	2802      	cmp	r0, #2
 8005c4a:	d00a      	beq.n	8005c62 <USBH_HandleControl+0x100>
        if (URB_Status == USBH_URB_ERROR)
 8005c4c:	2804      	cmp	r0, #4
 8005c4e:	d00c      	beq.n	8005c6a <USBH_HandleControl+0x108>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c50:	2501      	movs	r5, #1
 8005c52:	e79d      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_IN;
 8005c54:	2307      	movs	r3, #7
 8005c56:	7623      	strb	r3, [r4, #24]
 8005c58:	e79a      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 8005c5e:	2503      	movs	r5, #3
 8005c60:	e796      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 8005c62:	2305      	movs	r3, #5
 8005c64:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c66:	2501      	movs	r5, #1
 8005c68:	e792      	b.n	8005b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8005c6a:	230b      	movs	r3, #11
 8005c6c:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8005c6e:	2502      	movs	r5, #2
 8005c70:	e78e      	b.n	8005b90 <USBH_HandleControl+0x2e>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005c72:	7903      	ldrb	r3, [r0, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	4611      	mov	r1, r2
 8005c78:	f000 f9be 	bl	8005ff8 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005c7c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005c80:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005c82:	2308      	movs	r3, #8
 8005c84:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c86:	2501      	movs	r5, #1
      break;
 8005c88:	e782      	b.n	8005b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005c8a:	7901      	ldrb	r1, [r0, #4]
 8005c8c:	f001 fed8 	bl	8007a40 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005c90:	2801      	cmp	r0, #1
 8005c92:	d005      	beq.n	8005ca0 <USBH_HandleControl+0x13e>
      else if (URB_Status == USBH_URB_ERROR)
 8005c94:	2804      	cmp	r0, #4
 8005c96:	d007      	beq.n	8005ca8 <USBH_HandleControl+0x146>
        if (URB_Status == USBH_URB_STALL)
 8005c98:	2805      	cmp	r0, #5
 8005c9a:	d04c      	beq.n	8005d36 <USBH_HandleControl+0x1d4>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c9c:	2501      	movs	r5, #1
 8005c9e:	e777      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8005ca0:	230d      	movs	r3, #13
 8005ca2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8005ca4:	2500      	movs	r5, #0
 8005ca6:	e773      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8005ca8:	230b      	movs	r3, #11
 8005caa:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cac:	2501      	movs	r5, #1
 8005cae:	e76f      	b.n	8005b90 <USBH_HandleControl+0x2e>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005cb0:	2501      	movs	r5, #1
 8005cb2:	9500      	str	r5, [sp, #0]
 8005cb4:	7943      	ldrb	r3, [r0, #5]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4611      	mov	r1, r2
 8005cba:	f000 f987 	bl	8005fcc <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8005cbe:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005cc2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005cc4:	230a      	movs	r3, #10
 8005cc6:	7623      	strb	r3, [r4, #24]
      break;
 8005cc8:	e762      	b.n	8005b90 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005cca:	7941      	ldrb	r1, [r0, #5]
 8005ccc:	f001 feb8 	bl	8007a40 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8005cd0:	2801      	cmp	r0, #1
 8005cd2:	d005      	beq.n	8005ce0 <USBH_HandleControl+0x17e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005cd4:	2802      	cmp	r0, #2
 8005cd6:	d007      	beq.n	8005ce8 <USBH_HandleControl+0x186>
        if (URB_Status == USBH_URB_ERROR)
 8005cd8:	2804      	cmp	r0, #4
 8005cda:	d009      	beq.n	8005cf0 <USBH_HandleControl+0x18e>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cdc:	2501      	movs	r5, #1
 8005cde:	e757      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8005ce0:	230d      	movs	r3, #13
 8005ce2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8005ce4:	2500      	movs	r5, #0
 8005ce6:	e753      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8005ce8:	2309      	movs	r3, #9
 8005cea:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cec:	2501      	movs	r5, #1
 8005cee:	e74f      	b.n	8005b90 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8005cf0:	230b      	movs	r3, #11
 8005cf2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cf4:	2501      	movs	r5, #1
 8005cf6:	e74b      	b.n	8005b90 <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005cf8:	7e43      	ldrb	r3, [r0, #25]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	7643      	strb	r3, [r0, #25]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d803      	bhi.n	8005d0c <USBH_HandleControl+0x1aa>
        phost->Control.state = CTRL_SETUP;
 8005d04:	2501      	movs	r5, #1
 8005d06:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8005d08:	7085      	strb	r5, [r0, #2]
 8005d0a:	e741      	b.n	8005b90 <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005d0c:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8005d10:	2106      	movs	r1, #6
 8005d12:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005d14:	2500      	movs	r5, #0
 8005d16:	7665      	strb	r5, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d18:	7961      	ldrb	r1, [r4, #5]
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f9dd 	bl	80060da <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d20:	7921      	ldrb	r1, [r4, #4]
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 f9d9 	bl	80060da <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005d28:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8005d2a:	2502      	movs	r5, #2
 8005d2c:	e730      	b.n	8005b90 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 8005d2e:	2501      	movs	r5, #1
 8005d30:	e72e      	b.n	8005b90 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8005d32:	2503      	movs	r5, #3
 8005d34:	e72c      	b.n	8005b90 <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 8005d36:	2503      	movs	r5, #3
 8005d38:	e72a      	b.n	8005b90 <USBH_HandleControl+0x2e>

08005d3a <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d3a:	7803      	ldrb	r3, [r0, #0]
 8005d3c:	880a      	ldrh	r2, [r1, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005d42:	7803      	ldrb	r3, [r0, #0]
}
 8005d44:	4418      	add	r0, r3
 8005d46:	4770      	bx	lr

08005d48 <USBH_ParseCfgDesc>:
{
 8005d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005d50:	780b      	ldrb	r3, [r1, #0]
 8005d52:	7003      	strb	r3, [r0, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005d54:	784b      	ldrb	r3, [r1, #1]
 8005d56:	7043      	strb	r3, [r0, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005d58:	788b      	ldrb	r3, [r1, #2]
 8005d5a:	78c9      	ldrb	r1, [r1, #3]
 8005d5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d60:	8043      	strh	r3, [r0, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005d62:	7923      	ldrb	r3, [r4, #4]
 8005d64:	7103      	strb	r3, [r0, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005d66:	7963      	ldrb	r3, [r4, #5]
 8005d68:	7143      	strb	r3, [r0, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005d6a:	79a3      	ldrb	r3, [r4, #6]
 8005d6c:	7183      	strb	r3, [r0, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005d6e:	79e3      	ldrb	r3, [r4, #7]
 8005d70:	71c3      	strb	r3, [r0, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8005d72:	7a23      	ldrb	r3, [r4, #8]
 8005d74:	7203      	strb	r3, [r0, #8]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d76:	2a09      	cmp	r2, #9
 8005d78:	d944      	bls.n	8005e04 <USBH_ParseCfgDesc+0xbc>
 8005d7a:	4605      	mov	r5, r0
    ptr = USB_LEN_CFG_DESC;
 8005d7c:	2309      	movs	r3, #9
 8005d7e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8005d82:	2600      	movs	r6, #0
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005d84:	2e01      	cmp	r6, #1
 8005d86:	d83d      	bhi.n	8005e04 <USBH_ParseCfgDesc+0xbc>
 8005d88:	886a      	ldrh	r2, [r5, #2]
 8005d8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d938      	bls.n	8005e04 <USBH_ParseCfgDesc+0xbc>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005d92:	f10d 0106 	add.w	r1, sp, #6
 8005d96:	4620      	mov	r0, r4
 8005d98:	f7ff ffcf 	bl	8005d3a <USBH_GetNextDesc>
 8005d9c:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005d9e:	7843      	ldrb	r3, [r0, #1]
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d1ef      	bne.n	8005d84 <USBH_ParseCfgDesc+0x3c>
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005da4:	46b0      	mov	r8, r6
 8005da6:	201a      	movs	r0, #26
 8005da8:	fb06 f000 	mul.w	r0, r6, r0
 8005dac:	3008      	adds	r0, #8
 8005dae:	4428      	add	r0, r5
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005db0:	4621      	mov	r1, r4
 8005db2:	3002      	adds	r0, #2
 8005db4:	f7ff fe99 	bl	8005aea <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8005db8:	2700      	movs	r7, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005dba:	231a      	movs	r3, #26
 8005dbc:	fb03 5308 	mla	r3, r3, r8, r5
 8005dc0:	7b9b      	ldrb	r3, [r3, #14]
 8005dc2:	42bb      	cmp	r3, r7
 8005dc4:	d91b      	bls.n	8005dfe <USBH_ParseCfgDesc+0xb6>
 8005dc6:	886a      	ldrh	r2, [r5, #2]
 8005dc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d916      	bls.n	8005dfe <USBH_ParseCfgDesc+0xb6>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005dd0:	f10d 0106 	add.w	r1, sp, #6
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff ffb0 	bl	8005d3a <USBH_GetNextDesc>
 8005dda:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005ddc:	7843      	ldrb	r3, [r0, #1]
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d1eb      	bne.n	8005dba <USBH_ParseCfgDesc+0x72>
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005de2:	3701      	adds	r7, #1
 8005de4:	201a      	movs	r0, #26
 8005de6:	fb00 f008 	mul.w	r0, r0, r8
 8005dea:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8005dee:	3008      	adds	r0, #8
 8005df0:	4428      	add	r0, r5
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8005df2:	4621      	mov	r1, r4
 8005df4:	3004      	adds	r0, #4
 8005df6:	f7ff fe8b 	bl	8005b10 <USBH_ParseEPDesc>
            ep_ix++;
 8005dfa:	b2ff      	uxtb	r7, r7
 8005dfc:	e7dd      	b.n	8005dba <USBH_ParseCfgDesc+0x72>
        if_ix++;
 8005dfe:	3601      	adds	r6, #1
 8005e00:	b2f6      	uxtb	r6, r6
 8005e02:	e7bf      	b.n	8005d84 <USBH_ParseCfgDesc+0x3c>
}
 8005e04:	b002      	add	sp, #8
 8005e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e0a <USBH_CtlReq>:
{
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8005e0e:	7880      	ldrb	r0, [r0, #2]
 8005e10:	2801      	cmp	r0, #1
 8005e12:	d003      	beq.n	8005e1c <USBH_CtlReq+0x12>
 8005e14:	2802      	cmp	r0, #2
 8005e16:	d008      	beq.n	8005e2a <USBH_CtlReq+0x20>
 8005e18:	2001      	movs	r0, #1
}
 8005e1a:	bd10      	pop	{r4, pc}
      phost->Control.buff = buff;
 8005e1c:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8005e1e:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8005e20:	2301      	movs	r3, #1
 8005e22:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8005e24:	2302      	movs	r3, #2
 8005e26:	70a3      	strb	r3, [r4, #2]
      break;
 8005e28:	e7f7      	b.n	8005e1a <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f7ff fe99 	bl	8005b62 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005e30:	b130      	cbz	r0, 8005e40 <USBH_CtlReq+0x36>
 8005e32:	2803      	cmp	r0, #3
 8005e34:	d004      	beq.n	8005e40 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8005e36:	2802      	cmp	r0, #2
 8005e38:	d1ef      	bne.n	8005e1a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	70a3      	strb	r3, [r4, #2]
 8005e3e:	e7ec      	b.n	8005e1a <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8005e40:	2301      	movs	r3, #1
 8005e42:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	7623      	strb	r3, [r4, #24]
 8005e48:	e7e7      	b.n	8005e1a <USBH_CtlReq+0x10>

08005e4a <USBH_GetDescriptor>:
{
 8005e4a:	b508      	push	{r3, lr}
 8005e4c:	468e      	mov	lr, r1
 8005e4e:	4694      	mov	ip, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8005e56:	7883      	ldrb	r3, [r0, #2]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d002      	beq.n	8005e62 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 8005e5c:	f7ff ffd5 	bl	8005e0a <USBH_CtlReq>
}
 8005e60:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005e62:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8005e66:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005e6a:	2306      	movs	r3, #6
 8005e6c:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005e6e:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005e72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8005e76:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 8005e7a:	d003      	beq.n	8005e84 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8005e80:	82c2      	strh	r2, [r0, #22]
 8005e82:	e7eb      	b.n	8005e5c <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005e84:	f240 4309 	movw	r3, #1033	; 0x409
 8005e88:	8283      	strh	r3, [r0, #20]
 8005e8a:	e7f9      	b.n	8005e80 <USBH_GetDescriptor+0x36>

08005e8c <USBH_Get_DevDesc>:
{
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	4604      	mov	r4, r0
                                   USB_DESC_DEVICE, phost->device.Data,
 8005e92:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005e96:	460d      	mov	r5, r1
 8005e98:	9100      	str	r1, [sp, #0]
 8005e9a:	4633      	mov	r3, r6
 8005e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	f7ff ffd2 	bl	8005e4a <USBH_GetDescriptor>
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	b110      	cbz	r0, 8005eb0 <USBH_Get_DevDesc+0x24>
}
 8005eaa:	4638      	mov	r0, r7
 8005eac:	b003      	add	sp, #12
 8005eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005eb0:	462a      	mov	r2, r5
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	f204 3026 	addw	r0, r4, #806	; 0x326
 8005eb8:	f7ff fdeb 	bl	8005a92 <USBH_ParseDevDesc>
 8005ebc:	e7f5      	b.n	8005eaa <USBH_Get_DevDesc+0x1e>

08005ebe <USBH_Get_CfgDesc>:
{
 8005ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005ec6:	f100 061c 	add.w	r6, r0, #28
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005eca:	9100      	str	r1, [sp, #0]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	f7ff ffb9 	bl	8005e4a <USBH_GetDescriptor>
 8005ed8:	4607      	mov	r7, r0
 8005eda:	b110      	cbz	r0, 8005ee2 <USBH_Get_CfgDesc+0x24>
}
 8005edc:	4638      	mov	r0, r7
 8005ede:	b003      	add	sp, #12
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	f504 704e 	add.w	r0, r4, #824	; 0x338
 8005eea:	f7ff ff2d 	bl	8005d48 <USBH_ParseCfgDesc>
 8005eee:	e7f5      	b.n	8005edc <USBH_Get_CfgDesc+0x1e>

08005ef0 <USBH_Get_StringDesc>:
{
 8005ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	461d      	mov	r5, r3
                                   phost->device.Data, length)) == USBH_OK)
 8005ef8:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4623      	mov	r3, r4
 8005f00:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8005f04:	2100      	movs	r1, #0
 8005f06:	f7ff ffa0 	bl	8005e4a <USBH_GetDescriptor>
 8005f0a:	4607      	mov	r7, r0
 8005f0c:	b110      	cbz	r0, 8005f14 <USBH_Get_StringDesc+0x24>
}
 8005f0e:	4638      	mov	r0, r7
 8005f10:	b003      	add	sp, #12
 8005f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005f14:	462a      	mov	r2, r5
 8005f16:	4631      	mov	r1, r6
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff fe09 	bl	8005b30 <USBH_ParseStringDesc>
 8005f1e:	e7f6      	b.n	8005f0e <USBH_Get_StringDesc+0x1e>

08005f20 <USBH_SetAddress>:
{
 8005f20:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8005f22:	7883      	ldrb	r3, [r0, #2]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d004      	beq.n	8005f32 <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	f7ff ff6d 	bl	8005e0a <USBH_CtlReq>
}
 8005f30:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005f32:	2300      	movs	r3, #0
 8005f34:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005f36:	2205      	movs	r2, #5
 8005f38:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005f3a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005f3c:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005f3e:	82c3      	strh	r3, [r0, #22]
 8005f40:	e7f2      	b.n	8005f28 <USBH_SetAddress+0x8>

08005f42 <USBH_SetCfg>:
{
 8005f42:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8005f44:	7883      	ldrb	r3, [r0, #2]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d004      	beq.n	8005f54 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	f7ff ff5c 	bl	8005e0a <USBH_CtlReq>
}
 8005f52:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005f54:	2300      	movs	r3, #0
 8005f56:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005f58:	2209      	movs	r2, #9
 8005f5a:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005f5c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005f5e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005f60:	82c3      	strh	r3, [r0, #22]
 8005f62:	e7f2      	b.n	8005f4a <USBH_SetCfg+0x8>

08005f64 <USBH_SetFeature>:
{
 8005f64:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8005f66:	7883      	ldrb	r3, [r0, #2]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d004      	beq.n	8005f76 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4611      	mov	r1, r2
 8005f70:	f7ff ff4b 	bl	8005e0a <USBH_CtlReq>
}
 8005f74:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005f76:	2300      	movs	r3, #0
 8005f78:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005f7e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005f80:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005f82:	82c3      	strh	r3, [r0, #22]
 8005f84:	e7f2      	b.n	8005f6c <USBH_SetFeature+0x8>

08005f86 <USBH_ClrFeature>:
{
 8005f86:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8005f88:	7883      	ldrb	r3, [r0, #2]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d004      	beq.n	8005f98 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, 0U, 0U);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4611      	mov	r1, r2
 8005f92:	f7ff ff3a 	bl	8005e0a <USBH_CtlReq>
}
 8005f96:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005f98:	2302      	movs	r3, #2
 8005f9a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005fa4:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005fa6:	82c3      	strh	r3, [r0, #22]
 8005fa8:	e7f1      	b.n	8005f8e <USBH_ClrFeature+0x8>

08005faa <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005faa:	b510      	push	{r4, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4611      	mov	r1, r2

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	9403      	str	r4, [sp, #12]
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	9202      	str	r2, [sp, #8]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	9400      	str	r4, [sp, #0]
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	f001 fdb3 	bl	8007b2c <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005fcc:	b530      	push	{r4, r5, lr}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005fd8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8005fdc:	b105      	cbz	r5, 8005fe0 <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8005fde:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	9202      	str	r2, [sp, #8]
 8005fe4:	9401      	str	r4, [sp, #4]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	461a      	mov	r2, r3
 8005fee:	f001 fd9d 	bl	8007b2c <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	b005      	add	sp, #20
 8005ff6:	bd30      	pop	{r4, r5, pc}

08005ff8 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005ff8:	b530      	push	{r4, r5, lr}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006000:	2400      	movs	r4, #0
 8006002:	9403      	str	r4, [sp, #12]
 8006004:	9202      	str	r2, [sp, #8]
 8006006:	9501      	str	r5, [sp, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	9200      	str	r2, [sp, #0]
 800600c:	4623      	mov	r3, r4
 800600e:	f001 fd8d 	bl	8007b2c <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8006012:	4620      	mov	r0, r4
 8006014:	b005      	add	sp, #20
 8006016:	bd30      	pop	{r4, r5, pc}

08006018 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006018:	b530      	push	{r4, r5, lr}
 800601a:	b085      	sub	sp, #20
 800601c:	460c      	mov	r4, r1
 800601e:	4619      	mov	r1, r3
 8006020:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006024:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8006028:	b105      	cbz	r5, 800602c <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 800602a:	2300      	movs	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	9401      	str	r4, [sp, #4]
 8006032:	2301      	movs	r3, #1
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2302      	movs	r3, #2
 8006038:	2200      	movs	r2, #0
 800603a:	f001 fd77 	bl	8007b2c <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800603e:	2000      	movs	r0, #0
 8006040:	b005      	add	sp, #20
 8006042:	bd30      	pop	{r4, r5, pc}

08006044 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006044:	b530      	push	{r4, r5, lr}
 8006046:	b085      	sub	sp, #20
 8006048:	460d      	mov	r5, r1
 800604a:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800604c:	2400      	movs	r4, #0
 800604e:	9403      	str	r4, [sp, #12]
 8006050:	9202      	str	r2, [sp, #8]
 8006052:	9501      	str	r5, [sp, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	9200      	str	r2, [sp, #0]
 8006058:	2302      	movs	r3, #2
 800605a:	f001 fd67 	bl	8007b2c <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800605e:	4620      	mov	r0, r4
 8006060:	b005      	add	sp, #20
 8006062:	bd30      	pop	{r4, r5, pc}

08006064 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
 8006064:	2300      	movs	r3, #0
 8006066:	2b0a      	cmp	r3, #10
 8006068:	d80c      	bhi.n	8006084 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800606a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 800606e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006072:	6852      	ldr	r2, [r2, #4]
 8006074:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006078:	d002      	beq.n	8006080 <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < 11U ; idx++)
 800607a:	3301      	adds	r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e7f2      	b.n	8006066 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8006080:	b298      	uxth	r0, r3
 8006082:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8006084:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8006088:	4770      	bx	lr

0800608a <USBH_OpenPipe>:
{
 800608a:	b510      	push	{r4, lr}
 800608c:	b084      	sub	sp, #16
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800608e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006092:	9402      	str	r4, [sp, #8]
 8006094:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8006098:	9401      	str	r4, [sp, #4]
 800609a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800609e:	9400      	str	r4, [sp, #0]
 80060a0:	f001 fd29 	bl	8007af6 <USBH_LL_OpenPipe>
}
 80060a4:	2000      	movs	r0, #0
 80060a6:	b004      	add	sp, #16
 80060a8:	bd10      	pop	{r4, pc}

080060aa <USBH_ClosePipe>:
{
 80060aa:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 80060ac:	f001 fd36 	bl	8007b1c <USBH_LL_ClosePipe>
}
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd08      	pop	{r3, pc}

080060b4 <USBH_AllocPipe>:
{
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4604      	mov	r4, r0
 80060b8:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 80060ba:	f7ff ffd3 	bl	8006064 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 80060be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060c2:	4298      	cmp	r0, r3
 80060c4:	d007      	beq.n	80060d6 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80060c6:	f000 030f 	and.w	r3, r0, #15
 80060ca:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80060ce:	33e0      	adds	r3, #224	; 0xe0
 80060d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060d4:	605d      	str	r5, [r3, #4]
}
 80060d6:	b2c0      	uxtb	r0, r0
 80060d8:	bd38      	pop	{r3, r4, r5, pc}

080060da <USBH_FreePipe>:
  if (idx < 11U)
 80060da:	290a      	cmp	r1, #10
 80060dc:	d806      	bhi.n	80060ec <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 80060de:	31e0      	adds	r1, #224	; 0xe0
 80060e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80060e4:	6843      	ldr	r3, [r0, #4]
 80060e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80060ea:	6043      	str	r3, [r0, #4]
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr

080060f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80060f0:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060f2:	4b04      	ldr	r3, [pc, #16]	; (8006104 <disk_status+0x14>)
 80060f4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80060f8:	6852      	ldr	r2, [r2, #4]
 80060fa:	6852      	ldr	r2, [r2, #4]
 80060fc:	4403      	add	r3, r0
 80060fe:	7a18      	ldrb	r0, [r3, #8]
 8006100:	4790      	blx	r2
  return stat;
}
 8006102:	bd08      	pop	{r3, pc}
 8006104:	20000644 	.word	0x20000644

08006108 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006108:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <disk_initialize+0x24>)
 800610c:	5c1b      	ldrb	r3, [r3, r0]
 800610e:	b953      	cbnz	r3, 8006126 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <disk_initialize+0x24>)
 8006112:	2201      	movs	r2, #1
 8006114:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006116:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	4418      	add	r0, r3
 8006120:	7a00      	ldrb	r0, [r0, #8]
 8006122:	4790      	blx	r2
  }
  return stat;
}
 8006124:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8006126:	2000      	movs	r0, #0
 8006128:	e7fc      	b.n	8006124 <disk_initialize+0x1c>
 800612a:	bf00      	nop
 800612c:	20000644 	.word	0x20000644

08006130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006130:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006132:	4c04      	ldr	r4, [pc, #16]	; (8006144 <disk_read+0x14>)
 8006134:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006138:	686d      	ldr	r5, [r5, #4]
 800613a:	68ad      	ldr	r5, [r5, #8]
 800613c:	4404      	add	r4, r0
 800613e:	7a20      	ldrb	r0, [r4, #8]
 8006140:	47a8      	blx	r5
  return res;
}
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20000644 	.word	0x20000644

08006148 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006148:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800614a:	4c04      	ldr	r4, [pc, #16]	; (800615c <disk_write+0x14>)
 800614c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8006150:	686d      	ldr	r5, [r5, #4]
 8006152:	68ed      	ldr	r5, [r5, #12]
 8006154:	4404      	add	r4, r0
 8006156:	7a20      	ldrb	r0, [r4, #8]
 8006158:	47a8      	blx	r5
  return res;
}
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20000644 	.word	0x20000644

08006160 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006160:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006162:	4b04      	ldr	r3, [pc, #16]	; (8006174 <disk_ioctl+0x14>)
 8006164:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8006168:	6864      	ldr	r4, [r4, #4]
 800616a:	6924      	ldr	r4, [r4, #16]
 800616c:	4403      	add	r3, r0
 800616e:	7a18      	ldrb	r0, [r3, #8]
 8006170:	47a0      	blx	r4
  return res;
}
 8006172:	bd10      	pop	{r4, pc}
 8006174:	20000644 	.word	0x20000644

08006178 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8006178:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800617a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800617c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8006180:	4770      	bx	lr

08006182 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8006182:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8006184:	7883      	ldrb	r3, [r0, #2]
 8006186:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800618a:	7843      	ldrb	r3, [r0, #1]
 800618c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006190:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8006192:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8006196:	4770      	bx	lr

08006198 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006198:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800619a:	0a09      	lsrs	r1, r1, #8
 800619c:	7041      	strb	r1, [r0, #1]
}
 800619e:	4770      	bx	lr

080061a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80061a0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80061a2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80061a6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80061a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80061ac:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80061ae:	0e09      	lsrs	r1, r1, #24
 80061b0:	70c1      	strb	r1, [r0, #3]
}
 80061b2:	4770      	bx	lr

080061b4 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80061b4:	4694      	mov	ip, r2
 80061b6:	b132      	cbz	r2, 80061c6 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 80061b8:	780a      	ldrb	r2, [r1, #0]
 80061ba:	3101      	adds	r1, #1
 80061bc:	7002      	strb	r2, [r0, #0]
 80061be:	3001      	adds	r0, #1
		} while (--cnt);
 80061c0:	f1bc 0c01 	subs.w	ip, ip, #1
 80061c4:	d1f8      	bne.n	80061b8 <mem_cpy+0x4>
	}
}
 80061c6:	4770      	bx	lr

080061c8 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80061c8:	7001      	strb	r1, [r0, #0]
 80061ca:	3001      	adds	r0, #1
	} while (--cnt);
 80061cc:	3a01      	subs	r2, #1
 80061ce:	d1fb      	bne.n	80061c8 <mem_set>
}
 80061d0:	4770      	bx	lr

080061d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061d2:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80061d4:	f89c 0000 	ldrb.w	r0, [ip]
 80061d8:	f10c 0c01 	add.w	ip, ip, #1
 80061dc:	780b      	ldrb	r3, [r1, #0]
 80061de:	3101      	adds	r1, #1
 80061e0:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80061e2:	3a01      	subs	r2, #1
 80061e4:	d001      	beq.n	80061ea <mem_cmp+0x18>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d0f4      	beq.n	80061d4 <mem_cmp+0x2>

	return r;
}
 80061ea:	4770      	bx	lr

080061ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80061ec:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 80061ee:	e000      	b.n	80061f2 <chk_chr+0x6>
 80061f0:	3301      	adds	r3, #1
 80061f2:	7818      	ldrb	r0, [r3, #0]
 80061f4:	b108      	cbz	r0, 80061fa <chk_chr+0xe>
 80061f6:	4288      	cmp	r0, r1
 80061f8:	d1fa      	bne.n	80061f0 <chk_chr+0x4>
	return *str;
}
 80061fa:	4770      	bx	lr

080061fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061fc:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061fe:	2500      	movs	r5, #0
 8006200:	462b      	mov	r3, r5
 8006202:	e001      	b.n	8006208 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8006204:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006206:	3301      	adds	r3, #1
 8006208:	2b01      	cmp	r3, #1
 800620a:	d815      	bhi.n	8006238 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	4c17      	ldr	r4, [pc, #92]	; (800626c <chk_lock+0x70>)
 8006210:	58a2      	ldr	r2, [r4, r2]
 8006212:	2a00      	cmp	r2, #0
 8006214:	d0f6      	beq.n	8006204 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006216:	6804      	ldr	r4, [r0, #0]
 8006218:	42a2      	cmp	r2, r4
 800621a:	d1f4      	bne.n	8006206 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 800621c:	4a13      	ldr	r2, [pc, #76]	; (800626c <chk_lock+0x70>)
 800621e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006222:	6854      	ldr	r4, [r2, #4]
 8006224:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006226:	4294      	cmp	r4, r2
 8006228:	d1ed      	bne.n	8006206 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800622a:	4a10      	ldr	r2, [pc, #64]	; (800626c <chk_lock+0x70>)
 800622c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8006230:	6894      	ldr	r4, [r2, #8]
 8006232:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8006234:	4294      	cmp	r4, r2
 8006236:	d1e6      	bne.n	8006206 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006238:	2b02      	cmp	r3, #2
 800623a:	d00a      	beq.n	8006252 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800623c:	b9a1      	cbnz	r1, 8006268 <chk_lock+0x6c>
 800623e:	4a0b      	ldr	r2, [pc, #44]	; (800626c <chk_lock+0x70>)
 8006240:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006244:	899b      	ldrh	r3, [r3, #12]
 8006246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624a:	d00b      	beq.n	8006264 <chk_lock+0x68>
 800624c:	2000      	movs	r0, #0
}
 800624e:	bc30      	pop	{r4, r5}
 8006250:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006252:	b92d      	cbnz	r5, 8006260 <chk_lock+0x64>
 8006254:	2902      	cmp	r1, #2
 8006256:	d001      	beq.n	800625c <chk_lock+0x60>
 8006258:	2012      	movs	r0, #18
 800625a:	e7f8      	b.n	800624e <chk_lock+0x52>
 800625c:	2000      	movs	r0, #0
 800625e:	e7f6      	b.n	800624e <chk_lock+0x52>
 8006260:	2000      	movs	r0, #0
 8006262:	e7f4      	b.n	800624e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006264:	2010      	movs	r0, #16
 8006266:	e7f2      	b.n	800624e <chk_lock+0x52>
 8006268:	2010      	movs	r0, #16
 800626a:	e7f0      	b.n	800624e <chk_lock+0x52>
 800626c:	2000061c 	.word	0x2000061c

08006270 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006270:	2000      	movs	r0, #0
 8006272:	e000      	b.n	8006276 <enq_lock+0x6>
 8006274:	3001      	adds	r0, #1
 8006276:	2801      	cmp	r0, #1
 8006278:	d804      	bhi.n	8006284 <enq_lock+0x14>
 800627a:	0103      	lsls	r3, r0, #4
 800627c:	4a03      	ldr	r2, [pc, #12]	; (800628c <enq_lock+0x1c>)
 800627e:	58d3      	ldr	r3, [r2, r3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f7      	bne.n	8006274 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 8006284:	3802      	subs	r0, #2
 8006286:	bf18      	it	ne
 8006288:	2001      	movne	r0, #1
 800628a:	4770      	bx	lr
 800628c:	2000061c 	.word	0x2000061c

08006290 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006290:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <inc_lock+0x8>
 8006296:	3301      	adds	r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d813      	bhi.n	80062c4 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800629c:	011a      	lsls	r2, r3, #4
 800629e:	4c24      	ldr	r4, [pc, #144]	; (8006330 <inc_lock+0xa0>)
 80062a0:	58a4      	ldr	r4, [r4, r2]
 80062a2:	6802      	ldr	r2, [r0, #0]
 80062a4:	4294      	cmp	r4, r2
 80062a6:	d1f6      	bne.n	8006296 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80062a8:	4a21      	ldr	r2, [pc, #132]	; (8006330 <inc_lock+0xa0>)
 80062aa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80062ae:	6854      	ldr	r4, [r2, #4]
 80062b0:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80062b2:	4294      	cmp	r4, r2
 80062b4:	d1ef      	bne.n	8006296 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <inc_lock+0xa0>)
 80062b8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80062bc:	6894      	ldr	r4, [r2, #8]
 80062be:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 80062c0:	4294      	cmp	r4, r2
 80062c2:	d1e8      	bne.n	8006296 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d00d      	beq.n	80062e4 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062c8:	b121      	cbz	r1, 80062d4 <inc_lock+0x44>
 80062ca:	4a19      	ldr	r2, [pc, #100]	; (8006330 <inc_lock+0xa0>)
 80062cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80062d0:	8992      	ldrh	r2, [r2, #12]
 80062d2:	bb52      	cbnz	r2, 800632a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80062d4:	b9f1      	cbnz	r1, 8006314 <inc_lock+0x84>
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <inc_lock+0xa0>)
 80062d8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80062dc:	8991      	ldrh	r1, [r2, #12]
 80062de:	3101      	adds	r1, #1
 80062e0:	b289      	uxth	r1, r1
 80062e2:	e019      	b.n	8006318 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d805      	bhi.n	80062f6 <inc_lock+0x66>
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	4c10      	ldr	r4, [pc, #64]	; (8006330 <inc_lock+0xa0>)
 80062ee:	58a2      	ldr	r2, [r4, r2]
 80062f0:	b10a      	cbz	r2, 80062f6 <inc_lock+0x66>
 80062f2:	3301      	adds	r3, #1
 80062f4:	e7f7      	b.n	80062e6 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d015      	beq.n	8006326 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 80062fa:	4d0d      	ldr	r5, [pc, #52]	; (8006330 <inc_lock+0xa0>)
 80062fc:	011c      	lsls	r4, r3, #4
 80062fe:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8006302:	6806      	ldr	r6, [r0, #0]
 8006304:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8006306:	6884      	ldr	r4, [r0, #8]
 8006308:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800630a:	6940      	ldr	r0, [r0, #20]
 800630c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800630e:	2000      	movs	r0, #0
 8006310:	8190      	strh	r0, [r2, #12]
 8006312:	e7d9      	b.n	80062c8 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006318:	4a05      	ldr	r2, [pc, #20]	; (8006330 <inc_lock+0xa0>)
 800631a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800631e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8006320:	1c58      	adds	r0, r3, #1
}
 8006322:	bc70      	pop	{r4, r5, r6}
 8006324:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006326:	2000      	movs	r0, #0
 8006328:	e7fb      	b.n	8006322 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800632a:	2000      	movs	r0, #0
 800632c:	e7f9      	b.n	8006322 <inc_lock+0x92>
 800632e:	bf00      	nop
 8006330:	2000061c 	.word	0x2000061c

08006334 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006334:	3801      	subs	r0, #1
 8006336:	2801      	cmp	r0, #1
 8006338:	d815      	bhi.n	8006366 <dec_lock+0x32>
		n = Files[i].ctr;
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <dec_lock+0x3c>)
 800633c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006340:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006346:	d003      	beq.n	8006350 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8006348:	b11b      	cbz	r3, 8006352 <dec_lock+0x1e>
 800634a:	3b01      	subs	r3, #1
 800634c:	b29b      	uxth	r3, r3
 800634e:	e000      	b.n	8006352 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006350:	2300      	movs	r3, #0
		Files[i].ctr = n;
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <dec_lock+0x3c>)
 8006354:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006358:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800635a:	b933      	cbnz	r3, 800636a <dec_lock+0x36>
 800635c:	0103      	lsls	r3, r0, #4
 800635e:	2000      	movs	r0, #0
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <dec_lock+0x3c>)
 8006362:	50d0      	str	r0, [r2, r3]
 8006364:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006366:	2002      	movs	r0, #2
 8006368:	4770      	bx	lr
		res = FR_OK;
 800636a:	2000      	movs	r0, #0
	}
	return res;
}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	2000061c 	.word	0x2000061c

08006374 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006374:	2300      	movs	r3, #0
 8006376:	e003      	b.n	8006380 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 8006378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800637c:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800637e:	3301      	adds	r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d811      	bhi.n	80063a8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	4909      	ldr	r1, [pc, #36]	; (80063ac <clear_lock+0x38>)
 8006388:	588a      	ldr	r2, [r1, r2]
 800638a:	4282      	cmp	r2, r0
 800638c:	d1f7      	bne.n	800637e <clear_lock+0xa>
{
 800638e:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006390:	011a      	lsls	r2, r3, #4
 8006392:	2400      	movs	r4, #0
 8006394:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 8006396:	3301      	adds	r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d8ed      	bhi.n	8006378 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	4903      	ldr	r1, [pc, #12]	; (80063ac <clear_lock+0x38>)
 80063a0:	588a      	ldr	r2, [r1, r2]
 80063a2:	4282      	cmp	r2, r0
 80063a4:	d1f7      	bne.n	8006396 <clear_lock+0x22>
 80063a6:	e7f3      	b.n	8006390 <clear_lock+0x1c>
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	2000061c 	.word	0x2000061c

080063b0 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80063b0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063b2:	6943      	ldr	r3, [r0, #20]
 80063b4:	3b02      	subs	r3, #2
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d904      	bls.n	80063c4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80063ba:	8943      	ldrh	r3, [r0, #10]
 80063bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80063be:	fb01 0003 	mla	r0, r1, r3, r0
 80063c2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063c4:	2000      	movs	r0, #0
}
 80063c6:	4770      	bx	lr

080063c8 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80063c8:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80063ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80063cc:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80063ce:	0a49      	lsrs	r1, r1, #9
 80063d0:	8952      	ldrh	r2, [r2, #10]
 80063d2:	fbb1 f1f2 	udiv	r1, r1, r2
 80063d6:	e001      	b.n	80063dc <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 80063d8:	1a09      	subs	r1, r1, r0
 80063da:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063dc:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80063de:	b118      	cbz	r0, 80063e8 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 80063e0:	4281      	cmp	r1, r0
 80063e2:	d2f9      	bcs.n	80063d8 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 80063e4:	6858      	ldr	r0, [r3, #4]
 80063e6:	4408      	add	r0, r1
}
 80063e8:	4770      	bx	lr

080063ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	4606      	mov	r6, r0
 80063ee:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80063f0:	f101 001a 	add.w	r0, r1, #26
 80063f4:	f7ff fec0 	bl	8006178 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 80063f8:	7833      	ldrb	r3, [r6, #0]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d000      	beq.n	8006400 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006402:	f105 0014 	add.w	r0, r5, #20
 8006406:	f7ff feb7 	bl	8006178 <ld_word>
 800640a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800640e:	e7f6      	b.n	80063fe <ld_clust+0x14>

08006410 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4606      	mov	r6, r0
 8006414:	460c      	mov	r4, r1
 8006416:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006418:	b291      	uxth	r1, r2
 800641a:	f104 001a 	add.w	r0, r4, #26
 800641e:	f7ff febb 	bl	8006198 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006422:	7833      	ldrb	r3, [r6, #0]
 8006424:	2b03      	cmp	r3, #3
 8006426:	d000      	beq.n	800642a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8006428:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800642a:	0c29      	lsrs	r1, r5, #16
 800642c:	f104 0014 	add.w	r0, r4, #20
 8006430:	f7ff feb2 	bl	8006198 <st_word>
}
 8006434:	e7f8      	b.n	8006428 <st_clust+0x18>
	...

08006438 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	4681      	mov	r9, r0
 800643e:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006440:	680f      	ldr	r7, [r1, #0]
 8006442:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8006446:	220b      	movs	r2, #11
 8006448:	2120      	movs	r1, #32
 800644a:	4658      	mov	r0, fp
 800644c:	f7ff febc 	bl	80061c8 <mem_set>
	si = i = 0; ni = 8;
 8006450:	2600      	movs	r6, #0
 8006452:	4633      	mov	r3, r6
 8006454:	f04f 0808 	mov.w	r8, #8
 8006458:	e02c      	b.n	80064b4 <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800645a:	3501      	adds	r5, #1
 800645c:	5d7b      	ldrb	r3, [r7, r5]
 800645e:	2b2f      	cmp	r3, #47	; 0x2f
 8006460:	d0fb      	beq.n	800645a <create_name+0x22>
 8006462:	2b5c      	cmp	r3, #92	; 0x5c
 8006464:	d0f9      	beq.n	800645a <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006466:	443d      	add	r5, r7
 8006468:	f8ca 5000 	str.w	r5, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800646c:	2e00      	cmp	r6, #0
 800646e:	d043      	beq.n	80064f8 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006470:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8006474:	2be5      	cmp	r3, #229	; 0xe5
 8006476:	d035      	beq.n	80064e4 <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006478:	2c20      	cmp	r4, #32
 800647a:	d837      	bhi.n	80064ec <create_name+0xb4>
 800647c:	2304      	movs	r3, #4
 800647e:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 8006482:	2000      	movs	r0, #0
 8006484:	e028      	b.n	80064d8 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 8006486:	2608      	movs	r6, #8
 8006488:	f04f 080b 	mov.w	r8, #11
 800648c:	e011      	b.n	80064b2 <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 800648e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006492:	d123      	bne.n	80064dc <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006494:	4621      	mov	r1, r4
 8006496:	4819      	ldr	r0, [pc, #100]	; (80064fc <create_name+0xc4>)
 8006498:	f7ff fea8 	bl	80061ec <chk_chr>
 800649c:	bb50      	cbnz	r0, 80064f4 <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800649e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b19      	cmp	r3, #25
 80064a6:	d801      	bhi.n	80064ac <create_name+0x74>
 80064a8:	3c20      	subs	r4, #32
 80064aa:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80064ac:	f80b 4006 	strb.w	r4, [fp, r6]
 80064b0:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 80064b2:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 80064b4:	1c5d      	adds	r5, r3, #1
 80064b6:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80064b8:	2c20      	cmp	r4, #32
 80064ba:	d9d4      	bls.n	8006466 <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80064bc:	2c2f      	cmp	r4, #47	; 0x2f
 80064be:	d0cd      	beq.n	800645c <create_name+0x24>
 80064c0:	2c5c      	cmp	r4, #92	; 0x5c
 80064c2:	d0cb      	beq.n	800645c <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80064c4:	2c2e      	cmp	r4, #46	; 0x2e
 80064c6:	d001      	beq.n	80064cc <create_name+0x94>
 80064c8:	45b0      	cmp	r8, r6
 80064ca:	d8e0      	bhi.n	800648e <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80064cc:	f1b8 0f0b 	cmp.w	r8, #11
 80064d0:	d00e      	beq.n	80064f0 <create_name+0xb8>
 80064d2:	2c2e      	cmp	r4, #46	; 0x2e
 80064d4:	d0d7      	beq.n	8006486 <create_name+0x4e>
 80064d6:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 80064d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80064dc:	3c80      	subs	r4, #128	; 0x80
 80064de:	4b08      	ldr	r3, [pc, #32]	; (8006500 <create_name+0xc8>)
 80064e0:	5d1c      	ldrb	r4, [r3, r4]
 80064e2:	e7d7      	b.n	8006494 <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064e4:	2305      	movs	r3, #5
 80064e6:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 80064ea:	e7c5      	b.n	8006478 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064ec:	2300      	movs	r3, #0
 80064ee:	e7c6      	b.n	800647e <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80064f0:	2006      	movs	r0, #6
 80064f2:	e7f1      	b.n	80064d8 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80064f4:	2006      	movs	r0, #6
 80064f6:	e7ef      	b.n	80064d8 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064f8:	2006      	movs	r0, #6
 80064fa:	e7ed      	b.n	80064d8 <create_name+0xa0>
 80064fc:	08008654 	.word	0x08008654
 8006500:	0800853c 	.word	0x0800853c

08006504 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006504:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	b138      	cbz	r0, 800651a <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800650a:	4602      	mov	r2, r0
 800650c:	7813      	ldrb	r3, [r2, #0]
 800650e:	2b20      	cmp	r3, #32
 8006510:	d906      	bls.n	8006520 <get_ldnumber+0x1c>
 8006512:	2b3a      	cmp	r3, #58	; 0x3a
 8006514:	d004      	beq.n	8006520 <get_ldnumber+0x1c>
 8006516:	3201      	adds	r2, #1
 8006518:	e7f8      	b.n	800650c <get_ldnumber+0x8>
	int vol = -1;
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006520:	2b3a      	cmp	r3, #58	; 0x3a
 8006522:	d001      	beq.n	8006528 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006524:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8006526:	4770      	bx	lr
{
 8006528:	b410      	push	{r4}
			i = *tp++ - '0';
 800652a:	4603      	mov	r3, r0
 800652c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006530:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006532:	2809      	cmp	r0, #9
 8006534:	d808      	bhi.n	8006548 <get_ldnumber+0x44>
 8006536:	429a      	cmp	r2, r3
 8006538:	d002      	beq.n	8006540 <get_ldnumber+0x3c>
	int vol = -1;
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
 800653e:	e005      	b.n	800654c <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006540:	b938      	cbnz	r0, 8006552 <get_ldnumber+0x4e>
					*path = ++tt;
 8006542:	3201      	adds	r2, #1
 8006544:	600a      	str	r2, [r1, #0]
 8006546:	e001      	b.n	800654c <get_ldnumber+0x48>
	int vol = -1;
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
}
 800654c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006550:	4770      	bx	lr
	int vol = -1;
 8006552:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8006556:	e7f9      	b.n	800654c <get_ldnumber+0x48>

08006558 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800655c:	4604      	mov	r4, r0
 800655e:	b198      	cbz	r0, 8006588 <validate+0x30>
 8006560:	6803      	ldr	r3, [r0, #0]
 8006562:	b19b      	cbz	r3, 800658c <validate+0x34>
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	b1a2      	cbz	r2, 8006592 <validate+0x3a>
 8006568:	8881      	ldrh	r1, [r0, #4]
 800656a:	88da      	ldrh	r2, [r3, #6]
 800656c:	4291      	cmp	r1, r2
 800656e:	d003      	beq.n	8006578 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8006570:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006572:	2400      	movs	r4, #0
 8006574:	602c      	str	r4, [r5, #0]
	return res;
}
 8006576:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006578:	7858      	ldrb	r0, [r3, #1]
 800657a:	f7ff fdb9 	bl	80060f0 <disk_status>
 800657e:	f010 0001 	ands.w	r0, r0, #1
 8006582:	d109      	bne.n	8006598 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006584:	6824      	ldr	r4, [r4, #0]
 8006586:	e7f5      	b.n	8006574 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006588:	2009      	movs	r0, #9
 800658a:	e7f3      	b.n	8006574 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800658c:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800658e:	2009      	movs	r0, #9
 8006590:	e7f0      	b.n	8006574 <validate+0x1c>
 8006592:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006594:	2400      	movs	r4, #0
 8006596:	e7ed      	b.n	8006574 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8006598:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800659a:	2400      	movs	r4, #0
 800659c:	e7ea      	b.n	8006574 <validate+0x1c>

0800659e <sync_window>:
{
 800659e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80065a2:	78c5      	ldrb	r5, [r0, #3]
 80065a4:	b915      	cbnz	r5, 80065ac <sync_window+0xe>
}
 80065a6:	4628      	mov	r0, r5
 80065a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ac:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80065ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80065b0:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065b4:	2301      	movs	r3, #1
 80065b6:	463a      	mov	r2, r7
 80065b8:	4641      	mov	r1, r8
 80065ba:	7840      	ldrb	r0, [r0, #1]
 80065bc:	f7ff fdc4 	bl	8006148 <disk_write>
 80065c0:	4605      	mov	r5, r0
 80065c2:	b9a0      	cbnz	r0, 80065ee <sync_window+0x50>
			fs->wflag = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065c8:	6a23      	ldr	r3, [r4, #32]
 80065ca:	1afb      	subs	r3, r7, r3
 80065cc:	69a2      	ldr	r2, [r4, #24]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d2e9      	bcs.n	80065a6 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065d2:	78a6      	ldrb	r6, [r4, #2]
 80065d4:	e008      	b.n	80065e8 <sync_window+0x4a>
					wsect += fs->fsize;
 80065d6:	69a3      	ldr	r3, [r4, #24]
 80065d8:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80065da:	2301      	movs	r3, #1
 80065dc:	463a      	mov	r2, r7
 80065de:	4641      	mov	r1, r8
 80065e0:	7860      	ldrb	r0, [r4, #1]
 80065e2:	f7ff fdb1 	bl	8006148 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065e6:	3e01      	subs	r6, #1
 80065e8:	2e01      	cmp	r6, #1
 80065ea:	d8f4      	bhi.n	80065d6 <sync_window+0x38>
 80065ec:	e7db      	b.n	80065a6 <sync_window+0x8>
			res = FR_DISK_ERR;
 80065ee:	2501      	movs	r5, #1
 80065f0:	e7d9      	b.n	80065a6 <sync_window+0x8>

080065f2 <move_window>:
{
 80065f2:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80065f6:	428b      	cmp	r3, r1
 80065f8:	d102      	bne.n	8006600 <move_window+0xe>
	FRESULT res = FR_OK;
 80065fa:	2600      	movs	r6, #0
}
 80065fc:	4630      	mov	r0, r6
 80065fe:	bd70      	pop	{r4, r5, r6, pc}
 8006600:	4604      	mov	r4, r0
 8006602:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8006604:	f7ff ffcb 	bl	800659e <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006608:	4606      	mov	r6, r0
 800660a:	2800      	cmp	r0, #0
 800660c:	d1f6      	bne.n	80065fc <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800660e:	2301      	movs	r3, #1
 8006610:	462a      	mov	r2, r5
 8006612:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006616:	7860      	ldrb	r0, [r4, #1]
 8006618:	f7ff fd8a 	bl	8006130 <disk_read>
 800661c:	b110      	cbz	r0, 8006624 <move_window+0x32>
				res = FR_DISK_ERR;
 800661e:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006620:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8006624:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006626:	e7e9      	b.n	80065fc <move_window+0xa>

08006628 <check_fs>:
{
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800662c:	2300      	movs	r3, #0
 800662e:	70c3      	strb	r3, [r0, #3]
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006636:	f7ff ffdc 	bl	80065f2 <move_window>
 800663a:	bb30      	cbnz	r0, 800668a <check_fs+0x62>
 800663c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800663e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8006642:	f7ff fd99 	bl	8006178 <ld_word>
 8006646:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800664a:	4298      	cmp	r0, r3
 800664c:	d11f      	bne.n	800668e <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800664e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006652:	2be9      	cmp	r3, #233	; 0xe9
 8006654:	d007      	beq.n	8006666 <check_fs+0x3e>
 8006656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006658:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800665c:	4a0d      	ldr	r2, [pc, #52]	; (8006694 <check_fs+0x6c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d001      	beq.n	8006666 <check_fs+0x3e>
	return 2;
 8006662:	2502      	movs	r5, #2
 8006664:	e014      	b.n	8006690 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006666:	f104 0066 	add.w	r0, r4, #102	; 0x66
 800666a:	f7ff fd8a 	bl	8006182 <ld_dword>
 800666e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <check_fs+0x70>)
 8006674:	4298      	cmp	r0, r3
 8006676:	d00b      	beq.n	8006690 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006678:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800667c:	f7ff fd81 	bl	8006182 <ld_dword>
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <check_fs+0x74>)
 8006682:	4298      	cmp	r0, r3
 8006684:	d004      	beq.n	8006690 <check_fs+0x68>
	return 2;
 8006686:	2502      	movs	r5, #2
 8006688:	e002      	b.n	8006690 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800668a:	2504      	movs	r5, #4
 800668c:	e000      	b.n	8006690 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800668e:	2503      	movs	r5, #3
}
 8006690:	4628      	mov	r0, r5
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	009000eb 	.word	0x009000eb
 8006698:	00544146 	.word	0x00544146
 800669c:	33544146 	.word	0x33544146

080066a0 <find_volume>:
{
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	b085      	sub	sp, #20
 80066a6:	460e      	mov	r6, r1
 80066a8:	4615      	mov	r5, r2
	*rfs = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80066ae:	f7ff ff29 	bl	8006504 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80066b2:	1e07      	subs	r7, r0, #0
 80066b4:	f2c0 8145 	blt.w	8006942 <find_volume+0x2a2>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066b8:	4bb5      	ldr	r3, [pc, #724]	; (8006990 <find_volume+0x2f0>)
 80066ba:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80066be:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	f000 8143 	beq.w	800694c <find_volume+0x2ac>
	*rfs = fs;							/* Return pointer to the file system object */
 80066c6:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066c8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066cc:	7823      	ldrb	r3, [r4, #0]
 80066ce:	b173      	cbz	r3, 80066ee <find_volume+0x4e>
		stat = disk_status(fs->drv);
 80066d0:	7860      	ldrb	r0, [r4, #1]
 80066d2:	f7ff fd0d 	bl	80060f0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066d6:	f010 0601 	ands.w	r6, r0, #1
 80066da:	d108      	bne.n	80066ee <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80066dc:	2d00      	cmp	r5, #0
 80066de:	f000 8131 	beq.w	8006944 <find_volume+0x2a4>
 80066e2:	f010 0f04 	tst.w	r0, #4
 80066e6:	f000 812d 	beq.w	8006944 <find_volume+0x2a4>
				return FR_WRITE_PROTECTED;
 80066ea:	260a      	movs	r6, #10
 80066ec:	e12a      	b.n	8006944 <find_volume+0x2a4>
	fs->fs_type = 0;					/* Clear the file system object */
 80066ee:	2300      	movs	r3, #0
 80066f0:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80066f2:	b2f8      	uxtb	r0, r7
 80066f4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80066f6:	f7ff fd07 	bl	8006108 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80066fa:	f010 0601 	ands.w	r6, r0, #1
 80066fe:	f040 8127 	bne.w	8006950 <find_volume+0x2b0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006702:	b11d      	cbz	r5, 800670c <find_volume+0x6c>
 8006704:	f010 0f04 	tst.w	r0, #4
 8006708:	f040 8124 	bne.w	8006954 <find_volume+0x2b4>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800670c:	2100      	movs	r1, #0
 800670e:	4620      	mov	r0, r4
 8006710:	f7ff ff8a 	bl	8006628 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006714:	2802      	cmp	r0, #2
 8006716:	f000 80b6 	beq.w	8006886 <find_volume+0x1e6>
	bsect = 0;
 800671a:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800671c:	2804      	cmp	r0, #4
 800671e:	f000 811b 	beq.w	8006958 <find_volume+0x2b8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006722:	2801      	cmp	r0, #1
 8006724:	f200 811a 	bhi.w	800695c <find_volume+0x2bc>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006728:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800672c:	f7ff fd24 	bl	8006178 <ld_word>
 8006730:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006734:	f040 8114 	bne.w	8006960 <find_volume+0x2c0>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006738:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800673c:	f7ff fd1c 	bl	8006178 <ld_word>
 8006740:	4605      	mov	r5, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006742:	b920      	cbnz	r0, 800674e <find_volume+0xae>
 8006744:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8006748:	f7ff fd1b 	bl	8006182 <ld_dword>
 800674c:	4605      	mov	r5, r0
		fs->fsize = fasize;
 800674e:	61a5      	str	r5, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006750:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006754:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006756:	1e53      	subs	r3, r2, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	f200 8102 	bhi.w	8006964 <find_volume+0x2c4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006760:	fb05 f802 	mul.w	r8, r5, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006764:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8006768:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800676c:	f1b9 0f00 	cmp.w	r9, #0
 8006770:	f000 80fa 	beq.w	8006968 <find_volume+0x2c8>
 8006774:	f109 33ff 	add.w	r3, r9, #4294967295
 8006778:	ea19 0f03 	tst.w	r9, r3
 800677c:	f040 80f6 	bne.w	800696c <find_volume+0x2cc>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006780:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8006784:	f7ff fcf8 	bl	8006178 <ld_word>
 8006788:	4682      	mov	sl, r0
 800678a:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800678c:	f010 0f0f 	tst.w	r0, #15
 8006790:	f040 80ee 	bne.w	8006970 <find_volume+0x2d0>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006794:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8006798:	f7ff fcee 	bl	8006178 <ld_word>
 800679c:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800679e:	b920      	cbnz	r0, 80067aa <find_volume+0x10a>
 80067a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067a4:	f7ff fced 	bl	8006182 <ld_dword>
 80067a8:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067aa:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80067ae:	f7ff fce3 	bl	8006178 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067b2:	4602      	mov	r2, r0
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f000 80dd 	beq.w	8006974 <find_volume+0x2d4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80067ba:	eb00 0308 	add.w	r3, r0, r8
 80067be:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80067c2:	459b      	cmp	fp, r3
 80067c4:	f0c0 80d8 	bcc.w	8006978 <find_volume+0x2d8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80067c8:	ebab 0b03 	sub.w	fp, fp, r3
 80067cc:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067d0:	45cb      	cmp	fp, r9
 80067d2:	f0c0 80d3 	bcc.w	800697c <find_volume+0x2dc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80067d6:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80067da:	4281      	cmp	r1, r0
 80067dc:	d96b      	bls.n	80068b6 <find_volume+0x216>
		fmt = FS_FAT32;
 80067de:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80067e2:	f640 70f5 	movw	r0, #4085	; 0xff5
 80067e6:	4281      	cmp	r1, r0
 80067e8:	d801      	bhi.n	80067ee <find_volume+0x14e>
 80067ea:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80067ee:	f101 0902 	add.w	r9, r1, #2
 80067f2:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80067f6:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80067f8:	443a      	add	r2, r7
 80067fa:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80067fc:	443b      	add	r3, r7
 80067fe:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006800:	f1bb 0f03 	cmp.w	fp, #3
 8006804:	d05a      	beq.n	80068bc <find_volume+0x21c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006806:	f1ba 0f00 	cmp.w	sl, #0
 800680a:	f000 80bd 	beq.w	8006988 <find_volume+0x2e8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800680e:	4442      	add	r2, r8
 8006810:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006812:	f1bb 0f02 	cmp.w	fp, #2
 8006816:	d062      	beq.n	80068de <find_volume+0x23e>
 8006818:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800681c:	f009 0901 	and.w	r9, r9, #1
 8006820:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006824:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8006828:	ebb5 2f59 	cmp.w	r5, r9, lsr #9
 800682c:	f0c0 80ae 	bcc.w	800698c <find_volume+0x2ec>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006830:	f04f 33ff 	mov.w	r3, #4294967295
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8006838:	2380      	movs	r3, #128	; 0x80
 800683a:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800683c:	f1bb 0f03 	cmp.w	fp, #3
 8006840:	d050      	beq.n	80068e4 <find_volume+0x244>
	fs->fs_type = fmt;		/* FAT sub-type */
 8006842:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8006846:	4a52      	ldr	r2, [pc, #328]	; (8006990 <find_volume+0x2f0>)
 8006848:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800684a:	3301      	adds	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	8493      	strh	r3, [r2, #36]	; 0x24
 8006850:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff fd8e 	bl	8006374 <clear_lock>
	return FR_OK;
 8006858:	e074      	b.n	8006944 <find_volume+0x2a4>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800685a:	2000      	movs	r0, #0
 800685c:	ab04      	add	r3, sp, #16
 800685e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006862:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006866:	3501      	adds	r5, #1
 8006868:	2d03      	cmp	r5, #3
 800686a:	d80e      	bhi.n	800688a <find_volume+0x1ea>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800686c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006870:	012b      	lsls	r3, r5, #4
 8006872:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006876:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006878:	7903      	ldrb	r3, [r0, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ed      	beq.n	800685a <find_volume+0x1ba>
 800687e:	3008      	adds	r0, #8
 8006880:	f7ff fc7f 	bl	8006182 <ld_dword>
 8006884:	e7ea      	b.n	800685c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006886:	2500      	movs	r5, #0
 8006888:	e7ee      	b.n	8006868 <find_volume+0x1c8>
 800688a:	2500      	movs	r5, #0
 800688c:	e00a      	b.n	80068a4 <find_volume+0x204>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800688e:	4639      	mov	r1, r7
 8006890:	4620      	mov	r0, r4
 8006892:	f7ff fec9 	bl	8006628 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006896:	2801      	cmp	r0, #1
 8006898:	f67f af40 	bls.w	800671c <find_volume+0x7c>
 800689c:	3501      	adds	r5, #1
 800689e:	2d03      	cmp	r5, #3
 80068a0:	f63f af3c 	bhi.w	800671c <find_volume+0x7c>
			bsect = br[i];
 80068a4:	ab04      	add	r3, sp, #16
 80068a6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80068aa:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	d1ed      	bne.n	800688e <find_volume+0x1ee>
 80068b2:	2003      	movs	r0, #3
 80068b4:	e7f2      	b.n	800689c <find_volume+0x1fc>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80068b6:	f04f 0b02 	mov.w	fp, #2
 80068ba:	e792      	b.n	80067e2 <find_volume+0x142>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80068bc:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80068c0:	f7ff fc5a 	bl	8006178 <ld_word>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d15b      	bne.n	8006980 <find_volume+0x2e0>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80068c8:	f1ba 0f00 	cmp.w	sl, #0
 80068cc:	d15a      	bne.n	8006984 <find_volume+0x2e4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80068ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068d2:	f7ff fc56 	bl	8006182 <ld_dword>
 80068d6:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80068d8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80068dc:	e7a2      	b.n	8006824 <find_volume+0x184>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068de:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80068e2:	e79f      	b.n	8006824 <find_volume+0x184>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80068e4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80068e8:	f7ff fc46 	bl	8006178 <ld_word>
 80068ec:	2801      	cmp	r0, #1
 80068ee:	d1a8      	bne.n	8006842 <find_volume+0x1a2>
			&& move_window(fs, bsect + 1) == FR_OK)
 80068f0:	1c79      	adds	r1, r7, #1
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7ff fe7d 	bl	80065f2 <move_window>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d1a2      	bne.n	8006842 <find_volume+0x1a2>
			fs->fsi_flag = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006900:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8006904:	f7ff fc38 	bl	8006178 <ld_word>
 8006908:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800690c:	4298      	cmp	r0, r3
 800690e:	d198      	bne.n	8006842 <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006910:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006914:	f7ff fc35 	bl	8006182 <ld_dword>
 8006918:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <find_volume+0x2f4>)
 800691a:	4298      	cmp	r0, r3
 800691c:	d191      	bne.n	8006842 <find_volume+0x1a2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800691e:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8006922:	f7ff fc2e 	bl	8006182 <ld_dword>
 8006926:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <find_volume+0x2f8>)
 8006928:	4298      	cmp	r0, r3
 800692a:	d18a      	bne.n	8006842 <find_volume+0x1a2>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800692c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006930:	f7ff fc27 	bl	8006182 <ld_dword>
 8006934:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006936:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800693a:	f7ff fc22 	bl	8006182 <ld_dword>
 800693e:	60e0      	str	r0, [r4, #12]
 8006940:	e77f      	b.n	8006842 <find_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006942:	260b      	movs	r6, #11
}
 8006944:	4630      	mov	r0, r6
 8006946:	b005      	add	sp, #20
 8006948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800694c:	260c      	movs	r6, #12
 800694e:	e7f9      	b.n	8006944 <find_volume+0x2a4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006950:	2603      	movs	r6, #3
 8006952:	e7f7      	b.n	8006944 <find_volume+0x2a4>
		return FR_WRITE_PROTECTED;
 8006954:	260a      	movs	r6, #10
 8006956:	e7f5      	b.n	8006944 <find_volume+0x2a4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006958:	2601      	movs	r6, #1
 800695a:	e7f3      	b.n	8006944 <find_volume+0x2a4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800695c:	260d      	movs	r6, #13
 800695e:	e7f1      	b.n	8006944 <find_volume+0x2a4>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006960:	260d      	movs	r6, #13
 8006962:	e7ef      	b.n	8006944 <find_volume+0x2a4>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006964:	260d      	movs	r6, #13
 8006966:	e7ed      	b.n	8006944 <find_volume+0x2a4>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006968:	260d      	movs	r6, #13
 800696a:	e7eb      	b.n	8006944 <find_volume+0x2a4>
 800696c:	260d      	movs	r6, #13
 800696e:	e7e9      	b.n	8006944 <find_volume+0x2a4>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006970:	260d      	movs	r6, #13
 8006972:	e7e7      	b.n	8006944 <find_volume+0x2a4>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006974:	260d      	movs	r6, #13
 8006976:	e7e5      	b.n	8006944 <find_volume+0x2a4>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006978:	260d      	movs	r6, #13
 800697a:	e7e3      	b.n	8006944 <find_volume+0x2a4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800697c:	260d      	movs	r6, #13
 800697e:	e7e1      	b.n	8006944 <find_volume+0x2a4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006980:	260d      	movs	r6, #13
 8006982:	e7df      	b.n	8006944 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006984:	260d      	movs	r6, #13
 8006986:	e7dd      	b.n	8006944 <find_volume+0x2a4>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006988:	260d      	movs	r6, #13
 800698a:	e7db      	b.n	8006944 <find_volume+0x2a4>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800698c:	260d      	movs	r6, #13
 800698e:	e7d9      	b.n	8006944 <find_volume+0x2a4>
 8006990:	2000061c 	.word	0x2000061c
 8006994:	41615252 	.word	0x41615252
 8006998:	61417272 	.word	0x61417272

0800699c <put_fat>:
{
 800699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80069a0:	2901      	cmp	r1, #1
 80069a2:	d97e      	bls.n	8006aa2 <put_fat+0x106>
 80069a4:	4607      	mov	r7, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	4616      	mov	r6, r2
 80069aa:	6943      	ldr	r3, [r0, #20]
 80069ac:	428b      	cmp	r3, r1
 80069ae:	d97a      	bls.n	8006aa6 <put_fat+0x10a>
		switch (fs->fs_type) {
 80069b0:	7803      	ldrb	r3, [r0, #0]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d045      	beq.n	8006a42 <put_fat+0xa6>
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d057      	beq.n	8006a6a <put_fat+0xce>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d003      	beq.n	80069c6 <put_fat+0x2a>
 80069be:	2502      	movs	r5, #2
}
 80069c0:	4628      	mov	r0, r5
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 80069c6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80069ca:	6a01      	ldr	r1, [r0, #32]
 80069cc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80069d0:	f7ff fe0f 	bl	80065f2 <move_window>
			if (res != FR_OK) break;
 80069d4:	4605      	mov	r5, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d1f2      	bne.n	80069c0 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 80069da:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 80069de:	f108 0901 	add.w	r9, r8, #1
 80069e2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80069e6:	f014 0401 	ands.w	r4, r4, #1
 80069ea:	d01f      	beq.n	8006a2c <put_fat+0x90>
 80069ec:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	0132      	lsls	r2, r6, #4
 80069f6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8006a02:	2301      	movs	r3, #1
 8006a04:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a06:	6a39      	ldr	r1, [r7, #32]
 8006a08:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff fdf0 	bl	80065f2 <move_window>
			if (res != FR_OK) break;
 8006a12:	4605      	mov	r5, r0
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d1d3      	bne.n	80069c0 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8006a18:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a1c:	b144      	cbz	r4, 8006a30 <put_fat+0x94>
 8006a1e:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8006a22:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8006a26:	2301      	movs	r3, #1
 8006a28:	70fb      	strb	r3, [r7, #3]
			break;
 8006a2a:	e7c9      	b.n	80069c0 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a2c:	b2f3      	uxtb	r3, r6
 8006a2e:	e7e6      	b.n	80069fe <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006a30:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8006a34:	f022 020f 	bic.w	r2, r2, #15
 8006a38:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8006a3c:	4332      	orrs	r2, r6
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	e7ef      	b.n	8006a22 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006a42:	6a01      	ldr	r1, [r0, #32]
 8006a44:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006a48:	f7ff fdd3 	bl	80065f2 <move_window>
			if (res != FR_OK) break;
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d1b6      	bne.n	80069c0 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a52:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006a56:	0064      	lsls	r4, r4, #1
 8006a58:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006a5c:	b2b1      	uxth	r1, r6
 8006a5e:	4420      	add	r0, r4
 8006a60:	f7ff fb9a 	bl	8006198 <st_word>
			fs->wflag = 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	70fb      	strb	r3, [r7, #3]
			break;
 8006a68:	e7aa      	b.n	80069c0 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a6a:	6a01      	ldr	r1, [r0, #32]
 8006a6c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006a70:	f7ff fdbf 	bl	80065f2 <move_window>
			if (res != FR_OK) break;
 8006a74:	4605      	mov	r5, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d1a2      	bne.n	80069c0 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a7a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8006a7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a82:	00a4      	lsls	r4, r4, #2
 8006a84:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006a88:	441c      	add	r4, r3
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fb79 	bl	8006182 <ld_dword>
 8006a90:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a94:	4331      	orrs	r1, r6
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff fb82 	bl	80061a0 <st_dword>
			fs->wflag = 1;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	70fb      	strb	r3, [r7, #3]
			break;
 8006aa0:	e78e      	b.n	80069c0 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8006aa2:	2502      	movs	r5, #2
 8006aa4:	e78c      	b.n	80069c0 <put_fat+0x24>
 8006aa6:	2502      	movs	r5, #2
 8006aa8:	e78a      	b.n	80069c0 <put_fat+0x24>

08006aaa <get_fat>:
{
 8006aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8006aac:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006aae:	2901      	cmp	r1, #1
 8006ab0:	d956      	bls.n	8006b60 <get_fat+0xb6>
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	696b      	ldr	r3, [r5, #20]
 8006ab6:	428b      	cmp	r3, r1
 8006ab8:	d954      	bls.n	8006b64 <get_fat+0xba>
		switch (fs->fs_type) {
 8006aba:	782b      	ldrb	r3, [r5, #0]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d02d      	beq.n	8006b1c <get_fat+0x72>
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d03b      	beq.n	8006b3c <get_fat+0x92>
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <get_fat+0x22>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	e04a      	b.n	8006b62 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8006acc:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ad0:	6a29      	ldr	r1, [r5, #32]
 8006ad2:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f7ff fd8b 	bl	80065f2 <move_window>
 8006adc:	b110      	cbz	r0, 8006ae4 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	e03e      	b.n	8006b62 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8006ae4:	1c77      	adds	r7, r6, #1
 8006ae6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006aea:	442e      	add	r6, r5
 8006aec:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006af0:	6a29      	ldr	r1, [r5, #32]
 8006af2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006af6:	4628      	mov	r0, r5
 8006af8:	f7ff fd7b 	bl	80065f2 <move_window>
 8006afc:	bba0      	cbnz	r0, 8006b68 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006afe:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006b02:	443d      	add	r5, r7
 8006b04:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8006b08:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b0c:	f014 0f01 	tst.w	r4, #1
 8006b10:	d001      	beq.n	8006b16 <get_fat+0x6c>
 8006b12:	0900      	lsrs	r0, r0, #4
 8006b14:	e025      	b.n	8006b62 <get_fat+0xb8>
 8006b16:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006b1a:	e022      	b.n	8006b62 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b1c:	6a29      	ldr	r1, [r5, #32]
 8006b1e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7ff fd65 	bl	80065f2 <move_window>
 8006b28:	bb08      	cbnz	r0, 8006b6e <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b2a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8006b2e:	0064      	lsls	r4, r4, #1
 8006b30:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006b34:	4420      	add	r0, r4
 8006b36:	f7ff fb1f 	bl	8006178 <ld_word>
			break;
 8006b3a:	e012      	b.n	8006b62 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b3c:	6a29      	ldr	r1, [r5, #32]
 8006b3e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006b42:	4628      	mov	r0, r5
 8006b44:	f7ff fd55 	bl	80065f2 <move_window>
 8006b48:	b9a0      	cbnz	r0, 8006b74 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b4a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8006b4e:	00a4      	lsls	r4, r4, #2
 8006b50:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006b54:	4420      	add	r0, r4
 8006b56:	f7ff fb14 	bl	8006182 <ld_dword>
 8006b5a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8006b5e:	e000      	b.n	8006b62 <get_fat+0xb8>
		val = 1;	/* Internal error */
 8006b60:	2001      	movs	r0, #1
}
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8006b64:	2001      	movs	r0, #1
 8006b66:	e7fc      	b.n	8006b62 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e7f9      	b.n	8006b62 <get_fat+0xb8>
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	e7f6      	b.n	8006b62 <get_fat+0xb8>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8006b78:	e7f3      	b.n	8006b62 <get_fat+0xb8>

08006b7a <dir_sdi>:
{
 8006b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8006b7e:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b82:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006b86:	d240      	bcs.n	8006c0a <dir_sdi+0x90>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	f011 0f1f 	tst.w	r1, #31
 8006b90:	d13d      	bne.n	8006c0e <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 8006b92:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b94:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b96:	b92c      	cbnz	r4, 8006ba4 <dir_sdi+0x2a>
 8006b98:	f898 3000 	ldrb.w	r3, [r8]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8006ba0:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ba4:	b9b4      	cbnz	r4, 8006bd4 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ba6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006baa:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8006bae:	d930      	bls.n	8006c12 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 8006bb0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006bb4:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8006bb6:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006bb8:	69f3      	ldr	r3, [r6, #28]
 8006bba:	b393      	cbz	r3, 8006c22 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006bbc:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8006bc0:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006bc2:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8006bc6:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8006bca:	4419      	add	r1, r3
 8006bcc:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8006bce:	2000      	movs	r0, #0
}
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bd4:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8006bd8:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8006bda:	42af      	cmp	r7, r5
 8006bdc:	d30f      	bcc.n	8006bfe <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006bde:	4621      	mov	r1, r4
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff ff62 	bl	8006aaa <get_fat>
 8006be6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bec:	d013      	beq.n	8006c16 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006bee:	2801      	cmp	r0, #1
 8006bf0:	d913      	bls.n	8006c1a <dir_sdi+0xa0>
 8006bf2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006bf6:	4283      	cmp	r3, r0
 8006bf8:	d911      	bls.n	8006c1e <dir_sdi+0xa4>
			ofs -= csz;
 8006bfa:	1b7f      	subs	r7, r7, r5
 8006bfc:	e7ed      	b.n	8006bda <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4640      	mov	r0, r8
 8006c02:	f7ff fbd5 	bl	80063b0 <clust2sect>
 8006c06:	61f0      	str	r0, [r6, #28]
 8006c08:	e7d5      	b.n	8006bb6 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	e7e0      	b.n	8006bd0 <dir_sdi+0x56>
 8006c0e:	2002      	movs	r0, #2
 8006c10:	e7de      	b.n	8006bd0 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006c12:	2002      	movs	r0, #2
 8006c14:	e7dc      	b.n	8006bd0 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c16:	2001      	movs	r0, #1
 8006c18:	e7da      	b.n	8006bd0 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c1a:	2002      	movs	r0, #2
 8006c1c:	e7d8      	b.n	8006bd0 <dir_sdi+0x56>
 8006c1e:	2002      	movs	r0, #2
 8006c20:	e7d6      	b.n	8006bd0 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8006c22:	2002      	movs	r0, #2
 8006c24:	e7d4      	b.n	8006bd0 <dir_sdi+0x56>

08006c26 <create_chain>:
{
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8006c2c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8006c2e:	460f      	mov	r7, r1
 8006c30:	b951      	cbnz	r1, 8006c48 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006c32:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d012      	beq.n	8006c62 <create_chain+0x3c>
 8006c3c:	6973      	ldr	r3, [r6, #20]
 8006c3e:	4543      	cmp	r3, r8
 8006c40:	d811      	bhi.n	8006c66 <create_chain+0x40>
 8006c42:	f04f 0801 	mov.w	r8, #1
 8006c46:	e00e      	b.n	8006c66 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006c48:	f7ff ff2f 	bl	8006aaa <get_fat>
 8006c4c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c4e:	2801      	cmp	r0, #1
 8006c50:	d947      	bls.n	8006ce2 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c52:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c56:	d049      	beq.n	8006cec <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c58:	6972      	ldr	r2, [r6, #20]
 8006c5a:	4282      	cmp	r2, r0
 8006c5c:	d846      	bhi.n	8006cec <create_chain+0xc6>
		scl = clst;
 8006c5e:	46b8      	mov	r8, r7
 8006c60:	e001      	b.n	8006c66 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006c62:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8006c66:	4644      	mov	r4, r8
 8006c68:	e00c      	b.n	8006c84 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f7ff ff1c 	bl	8006aaa <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8006c72:	4603      	mov	r3, r0
 8006c74:	b178      	cbz	r0, 8006c96 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c76:	2801      	cmp	r0, #1
 8006c78:	d038      	beq.n	8006cec <create_chain+0xc6>
 8006c7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c7e:	d035      	beq.n	8006cec <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c80:	4544      	cmp	r4, r8
 8006c82:	d032      	beq.n	8006cea <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8006c84:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c86:	6973      	ldr	r3, [r6, #20]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d8ee      	bhi.n	8006c6a <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8006c8c:	f1b8 0f01 	cmp.w	r8, #1
 8006c90:	d929      	bls.n	8006ce6 <create_chain+0xc0>
				ncl = 2;
 8006c92:	2402      	movs	r4, #2
 8006c94:	e7e9      	b.n	8006c6a <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff fe7d 	bl	800699c <put_fat>
		if (res == FR_OK && clst != 0) {
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	b900      	cbnz	r0, 8006ca8 <create_chain+0x82>
 8006ca6:	b977      	cbnz	r7, 8006cc6 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ca8:	b9a3      	cbnz	r3, 8006cd4 <create_chain+0xae>
		fs->last_clst = ncl;
 8006caa:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006cac:	6932      	ldr	r2, [r6, #16]
 8006cae:	6973      	ldr	r3, [r6, #20]
 8006cb0:	3b02      	subs	r3, #2
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d801      	bhi.n	8006cba <create_chain+0x94>
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8006cba:	7933      	ldrb	r3, [r6, #4]
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	7133      	strb	r3, [r6, #4]
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	e012      	b.n	8006cec <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	4639      	mov	r1, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7ff fe66 	bl	800699c <put_fat>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	e7e9      	b.n	8006ca8 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <create_chain+0xb6>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e007      	b.n	8006cec <create_chain+0xc6>
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	e004      	b.n	8006cec <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e002      	b.n	8006cec <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cf2 <remove_chain>:
{
 8006cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf4:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8006cf6:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006cf8:	2901      	cmp	r1, #1
 8006cfa:	d92e      	bls.n	8006d5a <remove_chain+0x68>
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	4611      	mov	r1, r2
 8006d00:	696b      	ldr	r3, [r5, #20]
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	d92b      	bls.n	8006d5e <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006d06:	b14a      	cbz	r2, 8006d1c <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006d08:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff fe45 	bl	800699c <put_fat>
		if (res != FR_OK) return res;
 8006d12:	4607      	mov	r7, r0
 8006d14:	b110      	cbz	r0, 8006d1c <remove_chain+0x2a>
 8006d16:	e023      	b.n	8006d60 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d18:	42a2      	cmp	r2, r4
 8006d1a:	d921      	bls.n	8006d60 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006d1c:	4627      	mov	r7, r4
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff fec2 	bl	8006aaa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d26:	4604      	mov	r4, r0
 8006d28:	b1e0      	cbz	r0, 8006d64 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d2a:	2801      	cmp	r0, #1
 8006d2c:	d01c      	beq.n	8006d68 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d32:	d01b      	beq.n	8006d6c <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006d34:	2200      	movs	r2, #0
 8006d36:	4639      	mov	r1, r7
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f7ff fe2f 	bl	800699c <put_fat>
			if (res != FR_OK) return res;
 8006d3e:	4607      	mov	r7, r0
 8006d40:	b970      	cbnz	r0, 8006d60 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d42:	692b      	ldr	r3, [r5, #16]
 8006d44:	696a      	ldr	r2, [r5, #20]
 8006d46:	1e91      	subs	r1, r2, #2
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	d2e5      	bcs.n	8006d18 <remove_chain+0x26>
			fs->free_clst++;
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8006d50:	792b      	ldrb	r3, [r5, #4]
 8006d52:	f043 0301 	orr.w	r3, r3, #1
 8006d56:	712b      	strb	r3, [r5, #4]
 8006d58:	e7de      	b.n	8006d18 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006d5a:	2702      	movs	r7, #2
 8006d5c:	e000      	b.n	8006d60 <remove_chain+0x6e>
 8006d5e:	2702      	movs	r7, #2
}
 8006d60:	4638      	mov	r0, r7
 8006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8006d64:	2700      	movs	r7, #0
 8006d66:	e7fb      	b.n	8006d60 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006d68:	2702      	movs	r7, #2
 8006d6a:	e7f9      	b.n	8006d60 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006d6c:	2701      	movs	r7, #1
 8006d6e:	e7f7      	b.n	8006d60 <remove_chain+0x6e>

08006d70 <dir_next>:
{
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8006d74:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006d76:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006d78:	69c3      	ldr	r3, [r0, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d06c      	beq.n	8006e58 <dir_next+0xe8>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4688      	mov	r8, r1
 8006d82:	3520      	adds	r5, #32
 8006d84:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8006d88:	d268      	bcs.n	8006e5c <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006d8a:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8006d8e:	b93f      	cbnz	r7, 8006da0 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8006d90:	3301      	adds	r3, #1
 8006d92:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8006d94:	6981      	ldr	r1, [r0, #24]
 8006d96:	b979      	cbnz	r1, 8006db8 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006d98:	8933      	ldrh	r3, [r6, #8]
 8006d9a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8006d9e:	d907      	bls.n	8006db0 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8006da0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006da2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8006da6:	443b      	add	r3, r7
 8006da8:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8006daa:	2000      	movs	r0, #0
}
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61c3      	str	r3, [r0, #28]
 8006db4:	2004      	movs	r0, #4
 8006db6:	e7f9      	b.n	8006dac <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006db8:	8973      	ldrh	r3, [r6, #10]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8006dc0:	d1ee      	bne.n	8006da0 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006dc2:	f7ff fe72 	bl	8006aaa <get_fat>
 8006dc6:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006dc8:	2801      	cmp	r0, #1
 8006dca:	d949      	bls.n	8006e60 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006dcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dd0:	d048      	beq.n	8006e64 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006dd2:	6973      	ldr	r3, [r6, #20]
 8006dd4:	4283      	cmp	r3, r0
 8006dd6:	d837      	bhi.n	8006e48 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d011      	beq.n	8006e02 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006dde:	69a1      	ldr	r1, [r4, #24]
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff ff20 	bl	8006c26 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006de6:	4682      	mov	sl, r0
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d03d      	beq.n	8006e68 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006dec:	2801      	cmp	r0, #1
 8006dee:	d03d      	beq.n	8006e6c <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006df0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006df4:	d03c      	beq.n	8006e70 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff fbd1 	bl	800659e <sync_window>
 8006dfc:	b128      	cbz	r0, 8006e0a <dir_next+0x9a>
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e7d4      	b.n	8006dac <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61e3      	str	r3, [r4, #28]
 8006e06:	2004      	movs	r0, #4
 8006e08:	e7d0      	b.n	8006dac <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8006e14:	f7ff f9d8 	bl	80061c8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e18:	4651      	mov	r1, sl
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff fac8 	bl	80063b0 <clust2sect>
 8006e20:	62f0      	str	r0, [r6, #44]	; 0x2c
 8006e22:	8973      	ldrh	r3, [r6, #10]
 8006e24:	4599      	cmp	r9, r3
 8006e26:	d20b      	bcs.n	8006e40 <dir_next+0xd0>
						fs->wflag = 1;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff fbb6 	bl	800659e <sync_window>
 8006e32:	b9f8      	cbnz	r0, 8006e74 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006e34:	f109 0901 	add.w	r9, r9, #1
 8006e38:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	62f3      	str	r3, [r6, #44]	; 0x2c
 8006e3e:	e7f0      	b.n	8006e22 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8006e40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006e42:	eba3 0309 	sub.w	r3, r3, r9
 8006e46:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8006e48:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff faae 	bl	80063b0 <clust2sect>
 8006e54:	61e0      	str	r0, [r4, #28]
 8006e56:	e7a3      	b.n	8006da0 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006e58:	2004      	movs	r0, #4
 8006e5a:	e7a7      	b.n	8006dac <dir_next+0x3c>
 8006e5c:	2004      	movs	r0, #4
 8006e5e:	e7a5      	b.n	8006dac <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006e60:	2002      	movs	r0, #2
 8006e62:	e7a3      	b.n	8006dac <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006e64:	2001      	movs	r0, #1
 8006e66:	e7a1      	b.n	8006dac <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006e68:	2007      	movs	r0, #7
 8006e6a:	e79f      	b.n	8006dac <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006e6c:	2002      	movs	r0, #2
 8006e6e:	e79d      	b.n	8006dac <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e70:	2001      	movs	r0, #1
 8006e72:	e79b      	b.n	8006dac <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006e74:	2001      	movs	r0, #1
 8006e76:	e799      	b.n	8006dac <dir_next+0x3c>

08006e78 <dir_find>:
{
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006e7c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e7e:	2100      	movs	r1, #0
 8006e80:	f7ff fe7b 	bl	8006b7a <dir_sdi>
	if (res != FR_OK) return res;
 8006e84:	4605      	mov	r5, r0
 8006e86:	b140      	cbz	r0, 8006e9a <dir_find+0x22>
}
 8006e88:	4628      	mov	r0, r5
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f7ff ff6e 	bl	8006d70 <dir_next>
	} while (res == FR_OK);
 8006e94:	4605      	mov	r5, r0
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d1f6      	bne.n	8006e88 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8006e9a:	69e1      	ldr	r1, [r4, #28]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f7ff fba8 	bl	80065f2 <move_window>
		if (res != FR_OK) break;
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1ef      	bne.n	8006e88 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8006ea8:	6a20      	ldr	r0, [r4, #32]
 8006eaa:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006eac:	b17b      	cbz	r3, 8006ece <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006eae:	7ac3      	ldrb	r3, [r0, #11]
 8006eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb4:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006eb6:	7ac3      	ldrb	r3, [r0, #11]
 8006eb8:	f013 0f08 	tst.w	r3, #8
 8006ebc:	d1e6      	bne.n	8006e8c <dir_find+0x14>
 8006ebe:	220b      	movs	r2, #11
 8006ec0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006ec4:	f7ff f985 	bl	80061d2 <mem_cmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d1df      	bne.n	8006e8c <dir_find+0x14>
 8006ecc:	e7dc      	b.n	8006e88 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ece:	2504      	movs	r5, #4
 8006ed0:	e7da      	b.n	8006e88 <dir_find+0x10>

08006ed2 <follow_path>:
{
 8006ed2:	b530      	push	{r4, r5, lr}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8006eda:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006edc:	e001      	b.n	8006ee2 <follow_path+0x10>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	2a2f      	cmp	r2, #47	; 0x2f
 8006ee8:	d0f9      	beq.n	8006ede <follow_path+0xc>
 8006eea:	2a5c      	cmp	r2, #92	; 0x5c
 8006eec:	d0f7      	beq.n	8006ede <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8006eee:	2200      	movs	r2, #0
 8006ef0:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b1f      	cmp	r3, #31
 8006ef6:	d91e      	bls.n	8006f36 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ef8:	a901      	add	r1, sp, #4
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7ff fa9c 	bl	8006438 <create_name>
			if (res != FR_OK) break;
 8006f00:	4603      	mov	r3, r0
 8006f02:	bb00      	cbnz	r0, 8006f46 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff ffb7 	bl	8006e78 <dir_find>
			ns = dp->fn[NSFLAG];
 8006f0a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8006f0e:	4603      	mov	r3, r0
 8006f10:	b9e0      	cbnz	r0, 8006f4c <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f12:	f012 0f04 	tst.w	r2, #4
 8006f16:	d116      	bne.n	8006f46 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006f18:	79a3      	ldrb	r3, [r4, #6]
 8006f1a:	f013 0f10 	tst.w	r3, #16
 8006f1e:	d01c      	beq.n	8006f5a <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f20:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006f24:	6961      	ldr	r1, [r4, #20]
 8006f26:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006f2a:	4419      	add	r1, r3
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f7ff fa5c 	bl	80063ea <ld_clust>
 8006f32:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f34:	e7e0      	b.n	8006ef8 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff fe1b 	bl	8006b7a <dir_sdi>
 8006f44:	4603      	mov	r3, r0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	b003      	add	sp, #12
 8006f4a:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006f4c:	2804      	cmp	r0, #4
 8006f4e:	d1fa      	bne.n	8006f46 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006f50:	f012 0f04 	tst.w	r2, #4
 8006f54:	d1f7      	bne.n	8006f46 <follow_path+0x74>
 8006f56:	2305      	movs	r3, #5
 8006f58:	e7f5      	b.n	8006f46 <follow_path+0x74>
				res = FR_NO_PATH; break;
 8006f5a:	2305      	movs	r3, #5
 8006f5c:	e7f3      	b.n	8006f46 <follow_path+0x74>

08006f5e <dir_alloc>:
{
 8006f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8006f64:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8006f66:	2100      	movs	r1, #0
 8006f68:	f7ff fe07 	bl	8006b7a <dir_sdi>
	if (res == FR_OK) {
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	b9c0      	cbnz	r0, 8006fa2 <dir_alloc+0x44>
		n = 0;
 8006f70:	2500      	movs	r5, #0
 8006f72:	e008      	b.n	8006f86 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f74:	3501      	adds	r5, #1
 8006f76:	42b5      	cmp	r5, r6
 8006f78:	d013      	beq.n	8006fa2 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f7ff fef7 	bl	8006d70 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006f82:	4602      	mov	r2, r0
 8006f84:	b968      	cbnz	r0, 8006fa2 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8006f86:	69e1      	ldr	r1, [r4, #28]
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f7ff fb32 	bl	80065f2 <move_window>
			if (res != FR_OK) break;
 8006f8e:	4602      	mov	r2, r0
 8006f90:	b938      	cbnz	r0, 8006fa2 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006f92:	6a23      	ldr	r3, [r4, #32]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2be5      	cmp	r3, #229	; 0xe5
 8006f98:	d0ec      	beq.n	8006f74 <dir_alloc+0x16>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ea      	beq.n	8006f74 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	e7eb      	b.n	8006f7a <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006fa2:	2a04      	cmp	r2, #4
 8006fa4:	d001      	beq.n	8006faa <dir_alloc+0x4c>
}
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006faa:	2207      	movs	r2, #7
 8006fac:	e7fb      	b.n	8006fa6 <dir_alloc+0x48>

08006fae <dir_register>:
{
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006fb2:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	f7ff ffd2 	bl	8006f5e <dir_alloc>
	if (res == FR_OK) {
 8006fba:	4605      	mov	r5, r0
 8006fbc:	b108      	cbz	r0, 8006fc2 <dir_register+0x14>
}
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8006fc2:	69e1      	ldr	r1, [r4, #28]
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff fb14 	bl	80065f2 <move_window>
		if (res == FR_OK) {
 8006fca:	4605      	mov	r5, r0
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1f6      	bne.n	8006fbe <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6a20      	ldr	r0, [r4, #32]
 8006fd6:	f7ff f8f7 	bl	80061c8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006fda:	220b      	movs	r2, #11
 8006fdc:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8006fe0:	6a20      	ldr	r0, [r4, #32]
 8006fe2:	f7ff f8e7 	bl	80061b4 <mem_cpy>
			fs->wflag = 1;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	70f3      	strb	r3, [r6, #3]
 8006fea:	e7e8      	b.n	8006fbe <dir_register+0x10>

08006fec <sync_fs>:
{
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006ff0:	f7ff fad5 	bl	800659e <sync_window>
	if (res == FR_OK) {
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b948      	cbnz	r0, 800700c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ff8:	7823      	ldrb	r3, [r4, #0]
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d008      	beq.n	8007010 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ffe:	2200      	movs	r2, #0
 8007000:	4611      	mov	r1, r2
 8007002:	7860      	ldrb	r0, [r4, #1]
 8007004:	f7ff f8ac 	bl	8006160 <disk_ioctl>
 8007008:	b100      	cbz	r0, 800700c <sync_fs+0x20>
 800700a:	2501      	movs	r5, #1
}
 800700c:	4628      	mov	r0, r5
 800700e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007010:	7923      	ldrb	r3, [r4, #4]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d1f3      	bne.n	8006ffe <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8007016:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800701a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800701e:	2100      	movs	r1, #0
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff f8d1 	bl	80061c8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007026:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800702a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800702e:	f7ff f8b3 	bl	8006198 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007032:	490f      	ldr	r1, [pc, #60]	; (8007070 <sync_fs+0x84>)
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff f8b3 	bl	80061a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800703a:	490e      	ldr	r1, [pc, #56]	; (8007074 <sync_fs+0x88>)
 800703c:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8007040:	f7ff f8ae 	bl	80061a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007044:	6921      	ldr	r1, [r4, #16]
 8007046:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800704a:	f7ff f8a9 	bl	80061a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800704e:	68e1      	ldr	r1, [r4, #12]
 8007050:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007054:	f7ff f8a4 	bl	80061a0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8007058:	69e2      	ldr	r2, [r4, #28]
 800705a:	3201      	adds	r2, #1
 800705c:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800705e:	2301      	movs	r3, #1
 8007060:	4631      	mov	r1, r6
 8007062:	7860      	ldrb	r0, [r4, #1]
 8007064:	f7ff f870 	bl	8006148 <disk_write>
			fs->fsi_flag = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	7123      	strb	r3, [r4, #4]
 800706c:	e7c7      	b.n	8006ffe <sync_fs+0x12>
 800706e:	bf00      	nop
 8007070:	41615252 	.word	0x41615252
 8007074:	61417272 	.word	0x61417272

08007078 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	9001      	str	r0, [sp, #4]
 800707e:	9100      	str	r1, [sp, #0]
 8007080:	4615      	mov	r5, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007082:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007084:	a803      	add	r0, sp, #12
 8007086:	f7ff fa3d 	bl	8006504 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800708a:	1e04      	subs	r4, r0, #0
 800708c:	db1e      	blt.n	80070cc <f_mount+0x54>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800708e:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <f_mount+0x5c>)
 8007090:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007094:	6a1e      	ldr	r6, [r3, #32]

	if (cfs) {
 8007096:	b126      	cbz	r6, 80070a2 <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007098:	4630      	mov	r0, r6
 800709a:	f7ff f96b 	bl	8006374 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800709e:	2300      	movs	r3, #0
 80070a0:	7033      	strb	r3, [r6, #0]
	}

	if (fs) {
 80070a2:	9b01      	ldr	r3, [sp, #4]
 80070a4:	b10b      	cbz	r3, 80070aa <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	4809      	ldr	r0, [pc, #36]	; (80070d4 <f_mount+0x5c>)
 80070ae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80070b2:	6203      	str	r3, [r0, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80070b4:	b163      	cbz	r3, 80070d0 <f_mount+0x58>
 80070b6:	2d01      	cmp	r5, #1
 80070b8:	d002      	beq.n	80070c0 <f_mount+0x48>
 80070ba:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80070bc:	b004      	add	sp, #16
 80070be:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80070c0:	2200      	movs	r2, #0
 80070c2:	a901      	add	r1, sp, #4
 80070c4:	4668      	mov	r0, sp
 80070c6:	f7ff faeb 	bl	80066a0 <find_volume>
	LEAVE_FF(fs, res);
 80070ca:	e7f7      	b.n	80070bc <f_mount+0x44>
	if (vol < 0) return FR_INVALID_DRIVE;
 80070cc:	200b      	movs	r0, #11
 80070ce:	e7f5      	b.n	80070bc <f_mount+0x44>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80070d0:	2000      	movs	r0, #0
 80070d2:	e7f3      	b.n	80070bc <f_mount+0x44>
 80070d4:	2000061c 	.word	0x2000061c

080070d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80070d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070dc:	b091      	sub	sp, #68	; 0x44
 80070de:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f000 810a 	beq.w	80072fa <f_open+0x222>
 80070e6:	4615      	mov	r5, r2
 80070e8:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80070ea:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80070ee:	463a      	mov	r2, r7
 80070f0:	a903      	add	r1, sp, #12
 80070f2:	a801      	add	r0, sp, #4
 80070f4:	f7ff fad4 	bl	80066a0 <find_volume>
	if (res == FR_OK) {
 80070f8:	4604      	mov	r4, r0
 80070fa:	b130      	cbz	r0, 800710a <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80070fc:	b10c      	cbz	r4, 8007102 <f_open+0x2a>
 80070fe:	2300      	movs	r3, #0
 8007100:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 8007102:	4620      	mov	r0, r4
 8007104:	b011      	add	sp, #68	; 0x44
 8007106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800710e:	9901      	ldr	r1, [sp, #4]
 8007110:	a804      	add	r0, sp, #16
 8007112:	f7ff fede 	bl	8006ed2 <follow_path>
		if (res == FR_OK) {
 8007116:	4604      	mov	r4, r0
 8007118:	b960      	cbnz	r0, 8007134 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800711a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800711e:	2b00      	cmp	r3, #0
 8007120:	db50      	blt.n	80071c4 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007122:	f037 0301 	bics.w	r3, r7, #1
 8007126:	bf14      	ite	ne
 8007128:	2101      	movne	r1, #1
 800712a:	2100      	moveq	r1, #0
 800712c:	a804      	add	r0, sp, #16
 800712e:	f7ff f865 	bl	80061fc <chk_lock>
 8007132:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007134:	f015 0f1c 	tst.w	r5, #28
 8007138:	d05a      	beq.n	80071f0 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800713a:	2c00      	cmp	r4, #0
 800713c:	d04e      	beq.n	80071dc <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800713e:	2c04      	cmp	r4, #4
 8007140:	d042      	beq.n	80071c8 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007142:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007146:	2c00      	cmp	r4, #0
 8007148:	d161      	bne.n	800720e <f_open+0x136>
 800714a:	f017 0f08 	tst.w	r7, #8
 800714e:	d05e      	beq.n	800720e <f_open+0x136>
				dw = GET_FATTIME();
 8007150:	f7fd f9f6 	bl	8004540 <get_fattime>
 8007154:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007156:	4601      	mov	r1, r0
 8007158:	980c      	ldr	r0, [sp, #48]	; 0x30
 800715a:	300e      	adds	r0, #14
 800715c:	f7ff f820 	bl	80061a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007160:	4629      	mov	r1, r5
 8007162:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007164:	3016      	adds	r0, #22
 8007166:	f7ff f81b 	bl	80061a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800716a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800716c:	2220      	movs	r2, #32
 800716e:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007170:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007174:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007178:	4649      	mov	r1, r9
 800717a:	4640      	mov	r0, r8
 800717c:	f7ff f935 	bl	80063ea <ld_clust>
 8007180:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007182:	2200      	movs	r2, #0
 8007184:	4649      	mov	r1, r9
 8007186:	4640      	mov	r0, r8
 8007188:	f7ff f942 	bl	8006410 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800718c:	2100      	movs	r1, #0
 800718e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007190:	301c      	adds	r0, #28
 8007192:	f7ff f805 	bl	80061a0 <st_dword>
					fs->wflag = 1;
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	2201      	movs	r2, #1
 800719a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800719c:	b3bd      	cbz	r5, 800720e <f_open+0x136>
						dw = fs->winsect;
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80071a4:	2200      	movs	r2, #0
 80071a6:	4629      	mov	r1, r5
 80071a8:	a804      	add	r0, sp, #16
 80071aa:	f7ff fda2 	bl	8006cf2 <remove_chain>
						if (res == FR_OK) {
 80071ae:	4604      	mov	r4, r0
 80071b0:	bb68      	cbnz	r0, 800720e <f_open+0x136>
							res = move_window(fs, dw);
 80071b2:	4641      	mov	r1, r8
 80071b4:	9803      	ldr	r0, [sp, #12]
 80071b6:	f7ff fa1c 	bl	80065f2 <move_window>
 80071ba:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80071bc:	3d01      	subs	r5, #1
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	60dd      	str	r5, [r3, #12]
 80071c2:	e024      	b.n	800720e <f_open+0x136>
				res = FR_INVALID_NAME;
 80071c4:	2406      	movs	r4, #6
 80071c6:	e7b5      	b.n	8007134 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071c8:	f7ff f852 	bl	8006270 <enq_lock>
 80071cc:	b908      	cbnz	r0, 80071d2 <f_open+0xfa>
 80071ce:	2412      	movs	r4, #18
 80071d0:	e7b7      	b.n	8007142 <f_open+0x6a>
 80071d2:	a804      	add	r0, sp, #16
 80071d4:	f7ff feeb 	bl	8006fae <dir_register>
 80071d8:	4604      	mov	r4, r0
 80071da:	e7b2      	b.n	8007142 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80071dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80071e0:	f013 0f11 	tst.w	r3, #17
 80071e4:	d112      	bne.n	800720c <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80071e6:	f015 0f04 	tst.w	r5, #4
 80071ea:	d0ac      	beq.n	8007146 <f_open+0x6e>
 80071ec:	2408      	movs	r4, #8
 80071ee:	e00e      	b.n	800720e <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 80071f0:	b96c      	cbnz	r4, 800720e <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80071f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80071f6:	f013 0f10 	tst.w	r3, #16
 80071fa:	d14c      	bne.n	8007296 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80071fc:	f015 0f02 	tst.w	r5, #2
 8007200:	d005      	beq.n	800720e <f_open+0x136>
 8007202:	f013 0f01 	tst.w	r3, #1
 8007206:	d002      	beq.n	800720e <f_open+0x136>
						res = FR_DENIED;
 8007208:	2407      	movs	r4, #7
 800720a:	e016      	b.n	800723a <f_open+0x162>
					res = FR_DENIED;
 800720c:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800720e:	b9a4      	cbnz	r4, 800723a <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007210:	f017 0f08 	tst.w	r7, #8
 8007214:	d001      	beq.n	800721a <f_open+0x142>
				mode |= FA_MODIFIED;
 8007216:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007222:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007224:	f037 0301 	bics.w	r3, r7, #1
 8007228:	bf14      	ite	ne
 800722a:	2101      	movne	r1, #1
 800722c:	2100      	moveq	r1, #0
 800722e:	a804      	add	r0, sp, #16
 8007230:	f7ff f82e 	bl	8006290 <inc_lock>
 8007234:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007236:	2800      	cmp	r0, #0
 8007238:	d05d      	beq.n	80072f6 <f_open+0x21e>
		if (res == FR_OK) {
 800723a:	2c00      	cmp	r4, #0
 800723c:	f47f af5e 	bne.w	80070fc <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007240:	9d03      	ldr	r5, [sp, #12]
 8007242:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007246:	4641      	mov	r1, r8
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff f8ce 	bl	80063ea <ld_clust>
 800724e:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007250:	f108 001c 	add.w	r0, r8, #28
 8007254:	f7fe ff95 	bl	8006182 <ld_dword>
 8007258:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800725a:	2100      	movs	r1, #0
 800725c:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800725e:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 8007260:	88eb      	ldrh	r3, [r5, #6]
 8007262:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 8007264:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 8007266:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007268:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800726a:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800726c:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8007270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007274:	4640      	mov	r0, r8
 8007276:	f7fe ffa7 	bl	80061c8 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800727a:	f017 0f20 	tst.w	r7, #32
 800727e:	f43f af3d 	beq.w	80070fc <f_open+0x24>
 8007282:	68f5      	ldr	r5, [r6, #12]
 8007284:	2d00      	cmp	r5, #0
 8007286:	f43f af39 	beq.w	80070fc <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800728a:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	895f      	ldrh	r7, [r3, #10]
 8007290:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007292:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007294:	e005      	b.n	80072a2 <f_open+0x1ca>
					res = FR_NO_FILE;
 8007296:	2404      	movs	r4, #4
 8007298:	e7cf      	b.n	800723a <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800729a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800729e:	d00b      	beq.n	80072b8 <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80072a0:	1bed      	subs	r5, r5, r7
 80072a2:	b95c      	cbnz	r4, 80072bc <f_open+0x1e4>
 80072a4:	42bd      	cmp	r5, r7
 80072a6:	d909      	bls.n	80072bc <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7ff fbfe 	bl	8006aaa <get_fat>
 80072ae:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80072b0:	2801      	cmp	r0, #1
 80072b2:	d8f2      	bhi.n	800729a <f_open+0x1c2>
 80072b4:	2402      	movs	r4, #2
 80072b6:	e7f0      	b.n	800729a <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80072b8:	2401      	movs	r4, #1
 80072ba:	e7f1      	b.n	80072a0 <f_open+0x1c8>
				fp->clust = clst;
 80072bc:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072be:	2c00      	cmp	r4, #0
 80072c0:	f47f af1c 	bne.w	80070fc <f_open+0x24>
 80072c4:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f43f af17 	beq.w	80070fc <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072ce:	9f03      	ldr	r7, [sp, #12]
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff f86d 	bl	80063b0 <clust2sect>
 80072d6:	b908      	cbnz	r0, 80072dc <f_open+0x204>
						res = FR_INT_ERR;
 80072d8:	2402      	movs	r4, #2
 80072da:	e710      	b.n	80070fe <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072dc:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80072e0:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	4641      	mov	r1, r8
 80072e6:	7878      	ldrb	r0, [r7, #1]
 80072e8:	f7fe ff22 	bl	8006130 <disk_read>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	f43f af05 	beq.w	80070fc <f_open+0x24>
 80072f2:	2401      	movs	r4, #1
 80072f4:	e703      	b.n	80070fe <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80072f6:	2402      	movs	r4, #2
 80072f8:	e700      	b.n	80070fc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80072fa:	2409      	movs	r4, #9
 80072fc:	e701      	b.n	8007102 <f_open+0x2a>

080072fe <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80072fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007302:	b085      	sub	sp, #20
 8007304:	4604      	mov	r4, r0
 8007306:	460e      	mov	r6, r1
 8007308:	4617      	mov	r7, r2
 800730a:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800730c:	2300      	movs	r3, #0
 800730e:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007312:	a903      	add	r1, sp, #12
 8007314:	f7ff f920 	bl	8006558 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007318:	9001      	str	r0, [sp, #4]
 800731a:	2800      	cmp	r0, #0
 800731c:	f040 80ae 	bne.w	800747c <f_read+0x17e>
 8007320:	7d63      	ldrb	r3, [r4, #21]
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	f040 80a9 	bne.w	800747c <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800732a:	7d23      	ldrb	r3, [r4, #20]
 800732c:	f013 0f01 	tst.w	r3, #1
 8007330:	f000 80c3 	beq.w	80074ba <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 8007334:	68e5      	ldr	r5, [r4, #12]
 8007336:	69a3      	ldr	r3, [r4, #24]
 8007338:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800733a:	42bd      	cmp	r5, r7
 800733c:	d362      	bcc.n	8007404 <f_read+0x106>
 800733e:	463d      	mov	r5, r7
 8007340:	e060      	b.n	8007404 <f_read+0x106>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007344:	b11b      	cbz	r3, 800734e <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff f83e 	bl	80063c8 <clmt_clust>
 800734c:	e06a      	b.n	8007424 <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800734e:	69e1      	ldr	r1, [r4, #28]
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff fbaa 	bl	8006aaa <get_fat>
 8007356:	e065      	b.n	8007424 <f_read+0x126>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007358:	f04f 0a02 	mov.w	sl, #2
 800735c:	f884 a015 	strb.w	sl, [r4, #21]
 8007360:	f8cd a004 	str.w	sl, [sp, #4]
 8007364:	e08a      	b.n	800747c <f_read+0x17e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007366:	f04f 0a01 	mov.w	sl, #1
 800736a:	f884 a015 	strb.w	sl, [r4, #21]
 800736e:	f8cd a004 	str.w	sl, [sp, #4]
 8007372:	e083      	b.n	800747c <f_read+0x17e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007374:	f04f 0a02 	mov.w	sl, #2
 8007378:	f884 a015 	strb.w	sl, [r4, #21]
 800737c:	f8cd a004 	str.w	sl, [sp, #4]
 8007380:	e07c      	b.n	800747c <f_read+0x17e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007382:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	db02      	blt.n	8007390 <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800738a:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800738e:	e02f      	b.n	80073f0 <f_read+0xf2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007390:	6a20      	ldr	r0, [r4, #32]
 8007392:	eba0 0009 	sub.w	r0, r0, r9
 8007396:	4550      	cmp	r0, sl
 8007398:	d2f7      	bcs.n	800738a <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800739a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800739e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80073a2:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 80073a6:	f7fe ff05 	bl	80061b4 <mem_cpy>
 80073aa:	e7ee      	b.n	800738a <f_read+0x8c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073ac:	6a22      	ldr	r2, [r4, #32]
 80073ae:	454a      	cmp	r2, r9
 80073b0:	d00d      	beq.n	80073ce <f_read+0xd0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073b2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	db64      	blt.n	8007484 <f_read+0x186>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073ba:	2301      	movs	r3, #1
 80073bc:	464a      	mov	r2, r9
 80073be:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80073c2:	9803      	ldr	r0, [sp, #12]
 80073c4:	7840      	ldrb	r0, [r0, #1]
 80073c6:	f7fe feb3 	bl	8006130 <disk_read>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d16e      	bne.n	80074ac <f_read+0x1ae>
			}
#endif
			fp->sect = sect;
 80073ce:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80073d2:	69a3      	ldr	r3, [r4, #24]
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80073dc:	42bd      	cmp	r5, r7
 80073de:	d200      	bcs.n	80073e2 <f_read+0xe4>
 80073e0:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80073e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80073e6:	463a      	mov	r2, r7
 80073e8:	4419      	add	r1, r3
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7fe fee2 	bl	80061b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80073f0:	443e      	add	r6, r7
 80073f2:	69a3      	ldr	r3, [r4, #24]
 80073f4:	443b      	add	r3, r7
 80073f6:	61a3      	str	r3, [r4, #24]
 80073f8:	f8d8 3000 	ldr.w	r3, [r8]
 80073fc:	443b      	add	r3, r7
 80073fe:	f8c8 3000 	str.w	r3, [r8]
 8007402:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8007404:	2d00      	cmp	r5, #0
 8007406:	d039      	beq.n	800747c <f_read+0x17e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007408:	69a1      	ldr	r1, [r4, #24]
 800740a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1df      	bne.n	80073d2 <f_read+0xd4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	895f      	ldrh	r7, [r3, #10]
 8007416:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8007418:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800741c:	d108      	bne.n	8007430 <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800741e:	2900      	cmp	r1, #0
 8007420:	d18f      	bne.n	8007342 <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007422:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007424:	2801      	cmp	r0, #1
 8007426:	d997      	bls.n	8007358 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007428:	f1b0 3fff 	cmp.w	r0, #4294967295
 800742c:	d09b      	beq.n	8007366 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
 800742e:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007430:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007434:	69e1      	ldr	r1, [r4, #28]
 8007436:	4658      	mov	r0, fp
 8007438:	f7fe ffba 	bl	80063b0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800743c:	4681      	mov	r9, r0
 800743e:	2800      	cmp	r0, #0
 8007440:	d098      	beq.n	8007374 <f_read+0x76>
			sect += csect;
 8007442:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007444:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007448:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800744c:	d3ae      	bcc.n	80073ac <f_read+0xae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800744e:	eb07 030a 	add.w	r3, r7, sl
 8007452:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <f_read+0x160>
					cc = fs->csize - csect;
 800745a:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800745e:	4653      	mov	r3, sl
 8007460:	464a      	mov	r2, r9
 8007462:	4631      	mov	r1, r6
 8007464:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007468:	f7fe fe62 	bl	8006130 <disk_read>
 800746c:	2800      	cmp	r0, #0
 800746e:	d088      	beq.n	8007382 <f_read+0x84>
 8007470:	f04f 0a01 	mov.w	sl, #1
 8007474:	f884 a015 	strb.w	sl, [r4, #21]
 8007478:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800747c:	9801      	ldr	r0, [sp, #4]
 800747e:	b005      	add	sp, #20
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007484:	2301      	movs	r3, #1
 8007486:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800748a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800748e:	f7fe fe5b 	bl	8006148 <disk_write>
 8007492:	b920      	cbnz	r0, 800749e <f_read+0x1a0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007494:	7d23      	ldrb	r3, [r4, #20]
 8007496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749a:	7523      	strb	r3, [r4, #20]
 800749c:	e78d      	b.n	80073ba <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800749e:	f04f 0a01 	mov.w	sl, #1
 80074a2:	f884 a015 	strb.w	sl, [r4, #21]
 80074a6:	f8cd a004 	str.w	sl, [sp, #4]
 80074aa:	e7e7      	b.n	800747c <f_read+0x17e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80074ac:	f04f 0a01 	mov.w	sl, #1
 80074b0:	f884 a015 	strb.w	sl, [r4, #21]
 80074b4:	f8cd a004 	str.w	sl, [sp, #4]
 80074b8:	e7e0      	b.n	800747c <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80074ba:	2307      	movs	r3, #7
 80074bc:	9301      	str	r3, [sp, #4]
 80074be:	e7dd      	b.n	800747c <f_read+0x17e>

080074c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074c6:	a901      	add	r1, sp, #4
 80074c8:	f7ff f846 	bl	8006558 <validate>
	if (res == FR_OK) {
 80074cc:	b970      	cbnz	r0, 80074ec <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074ce:	7d23      	ldrb	r3, [r4, #20]
 80074d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074d4:	d00a      	beq.n	80074ec <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80074d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074da:	d109      	bne.n	80074f0 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80074dc:	f7fd f830 	bl	8004540 <get_fattime>
 80074e0:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80074e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074e4:	9801      	ldr	r0, [sp, #4]
 80074e6:	f7ff f884 	bl	80065f2 <move_window>
				if (res == FR_OK) {
 80074ea:	b178      	cbz	r0, 800750c <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80074ec:	b002      	add	sp, #8
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074f0:	2301      	movs	r3, #1
 80074f2:	6a22      	ldr	r2, [r4, #32]
 80074f4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80074f8:	9801      	ldr	r0, [sp, #4]
 80074fa:	7840      	ldrb	r0, [r0, #1]
 80074fc:	f7fe fe24 	bl	8006148 <disk_write>
 8007500:	bb40      	cbnz	r0, 8007554 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007502:	7d23      	ldrb	r3, [r4, #20]
 8007504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007508:	7523      	strb	r3, [r4, #20]
 800750a:	e7e7      	b.n	80074dc <f_sync+0x1c>
					dir = fp->dir_ptr;
 800750c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800750e:	7af3      	ldrb	r3, [r6, #11]
 8007510:	f043 0320 	orr.w	r3, r3, #32
 8007514:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007516:	68a2      	ldr	r2, [r4, #8]
 8007518:	4631      	mov	r1, r6
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	f7fe ff78 	bl	8006410 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007520:	68e1      	ldr	r1, [r4, #12]
 8007522:	f106 001c 	add.w	r0, r6, #28
 8007526:	f7fe fe3b 	bl	80061a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800752a:	4629      	mov	r1, r5
 800752c:	f106 0016 	add.w	r0, r6, #22
 8007530:	f7fe fe36 	bl	80061a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007534:	2100      	movs	r1, #0
 8007536:	f106 0012 	add.w	r0, r6, #18
 800753a:	f7fe fe2d 	bl	8006198 <st_word>
					fs->wflag = 1;
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007544:	9801      	ldr	r0, [sp, #4]
 8007546:	f7ff fd51 	bl	8006fec <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800754a:	7d23      	ldrb	r3, [r4, #20]
 800754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007550:	7523      	strb	r3, [r4, #20]
 8007552:	e7cb      	b.n	80074ec <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007554:	2001      	movs	r0, #1
 8007556:	e7c9      	b.n	80074ec <f_sync+0x2c>

08007558 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007558:	b510      	push	{r4, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800755e:	f7ff ffaf 	bl	80074c0 <f_sync>
	if (res == FR_OK)
 8007562:	b108      	cbz	r0, 8007568 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007564:	b002      	add	sp, #8
 8007566:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007568:	a901      	add	r1, sp, #4
 800756a:	4620      	mov	r0, r4
 800756c:	f7fe fff4 	bl	8006558 <validate>
		if (res == FR_OK) {
 8007570:	2800      	cmp	r0, #0
 8007572:	d1f7      	bne.n	8007564 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007574:	6920      	ldr	r0, [r4, #16]
 8007576:	f7fe fedd 	bl	8006334 <dec_lock>
			if (res == FR_OK)
 800757a:	2800      	cmp	r0, #0
 800757c:	d1f2      	bne.n	8007564 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800757e:	6020      	str	r0, [r4, #0]
 8007580:	e7f0      	b.n	8007564 <f_close+0xc>

08007582 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007586:	b083      	sub	sp, #12
 8007588:	4604      	mov	r4, r0
 800758a:	460e      	mov	r6, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800758c:	a901      	add	r1, sp, #4
 800758e:	f7fe ffe3 	bl	8006558 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007592:	4605      	mov	r5, r0
 8007594:	b900      	cbnz	r0, 8007598 <f_lseek+0x16>
 8007596:	7d65      	ldrb	r5, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007598:	b96d      	cbnz	r5, 80075b6 <f_lseek+0x34>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800759a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8089 	beq.w	80076b4 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80075a2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80075a6:	d00a      	beq.n	80075be <f_lseek+0x3c>
				*tbl = 0;		/* Terminate table */
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80075a8:	68e7      	ldr	r7, [r4, #12]
 80075aa:	42b7      	cmp	r7, r6
 80075ac:	d300      	bcc.n	80075b0 <f_lseek+0x2e>
 80075ae:	4637      	mov	r7, r6
			fp->fptr = ofs;				/* Set file pointer */
 80075b0:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 80075b2:	2f00      	cmp	r7, #0
 80075b4:	d13f      	bne.n	8007636 <f_lseek+0xb4>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 80075b6:	4628      	mov	r0, r5
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80075be:	4698      	mov	r8, r3
 80075c0:	f858 bb04 	ldr.w	fp, [r8], #4
			cl = fp->obj.sclust;		/* Origin of the chain */
 80075c4:	f8d4 a008 	ldr.w	sl, [r4, #8]
			if (cl) {
 80075c8:	f1ba 0f00 	cmp.w	sl, #0
 80075cc:	d027      	beq.n	800761e <f_lseek+0x9c>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80075ce:	f04f 0902 	mov.w	r9, #2
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80075d2:	f109 0902 	add.w	r9, r9, #2
 80075d6:	4651      	mov	r1, sl
 80075d8:	2700      	movs	r7, #0
						pcl = cl; ncl++;
 80075da:	3701      	adds	r7, #1
						cl = get_fat(&fp->obj, cl);
 80075dc:	460e      	mov	r6, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	f7ff fa63 	bl	8006aaa <get_fat>
 80075e4:	4601      	mov	r1, r0
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80075e6:	2801      	cmp	r0, #1
 80075e8:	d913      	bls.n	8007612 <f_lseek+0x90>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075ee:	d013      	beq.n	8007618 <f_lseek+0x96>
					} while (cl == pcl + 1);
 80075f0:	3601      	adds	r6, #1
 80075f2:	4286      	cmp	r6, r0
 80075f4:	d0f1      	beq.n	80075da <f_lseek+0x58>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80075f6:	45cb      	cmp	fp, r9
 80075f8:	d305      	bcc.n	8007606 <f_lseek+0x84>
						*tbl++ = ncl; *tbl++ = tcl;
 80075fa:	4643      	mov	r3, r8
 80075fc:	f843 7b08 	str.w	r7, [r3], #8
 8007600:	f8c8 a004 	str.w	sl, [r8, #4]
 8007604:	4698      	mov	r8, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	428b      	cmp	r3, r1
 800760c:	d909      	bls.n	8007622 <f_lseek+0xa0>
						cl = get_fat(&fp->obj, cl);
 800760e:	468a      	mov	sl, r1
 8007610:	e7df      	b.n	80075d2 <f_lseek+0x50>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007612:	2502      	movs	r5, #2
 8007614:	7565      	strb	r5, [r4, #21]
 8007616:	e7ce      	b.n	80075b6 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007618:	2501      	movs	r5, #1
 800761a:	7565      	strb	r5, [r4, #21]
 800761c:	e7cb      	b.n	80075b6 <f_lseek+0x34>
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800761e:	f04f 0902 	mov.w	r9, #2
			*fp->cltbl = ulen;	/* Number of items used */
 8007622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007624:	f8c3 9000 	str.w	r9, [r3]
			if (ulen <= tlen) {
 8007628:	45d9      	cmp	r9, fp
 800762a:	f200 80ec 	bhi.w	8007806 <f_lseek+0x284>
				*tbl = 0;		/* Terminate table */
 800762e:	2300      	movs	r3, #0
 8007630:	f8c8 3000 	str.w	r3, [r8]
 8007634:	e7bf      	b.n	80075b6 <f_lseek+0x34>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007636:	f107 38ff 	add.w	r8, r7, #4294967295
 800763a:	4641      	mov	r1, r8
 800763c:	4620      	mov	r0, r4
 800763e:	f7fe fec3 	bl	80063c8 <clmt_clust>
 8007642:	4601      	mov	r1, r0
 8007644:	61e0      	str	r0, [r4, #28]
				dsc = clust2sect(fs, fp->clust);
 8007646:	9e01      	ldr	r6, [sp, #4]
 8007648:	4630      	mov	r0, r6
 800764a:	f7fe feb1 	bl	80063b0 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800764e:	b1e0      	cbz	r0, 800768a <f_lseek+0x108>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007650:	8971      	ldrh	r1, [r6, #10]
 8007652:	3901      	subs	r1, #1
 8007654:	ea01 2158 	and.w	r1, r1, r8, lsr #9
 8007658:	eb01 0800 	add.w	r8, r1, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800765c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007660:	2f00      	cmp	r7, #0
 8007662:	d0a8      	beq.n	80075b6 <f_lseek+0x34>
 8007664:	6a22      	ldr	r2, [r4, #32]
 8007666:	4542      	cmp	r2, r8
 8007668:	d0a5      	beq.n	80075b6 <f_lseek+0x34>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800766a:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	db0e      	blt.n	8007690 <f_lseek+0x10e>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007672:	2301      	movs	r3, #1
 8007674:	4642      	mov	r2, r8
 8007676:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800767a:	9801      	ldr	r0, [sp, #4]
 800767c:	7840      	ldrb	r0, [r0, #1]
 800767e:	f7fe fd57 	bl	8006130 <disk_read>
 8007682:	b9a0      	cbnz	r0, 80076ae <f_lseek+0x12c>
					fp->sect = dsc;
 8007684:	f8c4 8020 	str.w	r8, [r4, #32]
 8007688:	e795      	b.n	80075b6 <f_lseek+0x34>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800768a:	2502      	movs	r5, #2
 800768c:	7565      	strb	r5, [r4, #21]
 800768e:	e792      	b.n	80075b6 <f_lseek+0x34>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007690:	2301      	movs	r3, #1
 8007692:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007696:	7870      	ldrb	r0, [r6, #1]
 8007698:	f7fe fd56 	bl	8006148 <disk_write>
 800769c:	b920      	cbnz	r0, 80076a8 <f_lseek+0x126>
						fp->flag &= (BYTE)~FA_DIRTY;
 800769e:	7d23      	ldrb	r3, [r4, #20]
 80076a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a4:	7523      	strb	r3, [r4, #20]
 80076a6:	e7e4      	b.n	8007672 <f_lseek+0xf0>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076a8:	2501      	movs	r5, #1
 80076aa:	7565      	strb	r5, [r4, #21]
 80076ac:	e783      	b.n	80075b6 <f_lseek+0x34>
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80076ae:	2501      	movs	r5, #1
 80076b0:	7565      	strb	r5, [r4, #21]
 80076b2:	e780      	b.n	80075b6 <f_lseek+0x34>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80076b4:	68e3      	ldr	r3, [r4, #12]
 80076b6:	42b3      	cmp	r3, r6
 80076b8:	d204      	bcs.n	80076c4 <f_lseek+0x142>
 80076ba:	7d22      	ldrb	r2, [r4, #20]
 80076bc:	f012 0f02 	tst.w	r2, #2
 80076c0:	d100      	bne.n	80076c4 <f_lseek+0x142>
			ofs = fp->obj.objsize;
 80076c2:	461e      	mov	r6, r3
		ifptr = fp->fptr;
 80076c4:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80076c6:	2200      	movs	r2, #0
 80076c8:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80076ca:	b1de      	cbz	r6, 8007704 <f_lseek+0x182>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80076cc:	9a01      	ldr	r2, [sp, #4]
 80076ce:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 80076d2:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 80076d6:	b173      	cbz	r3, 80076f6 <f_lseek+0x174>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80076d8:	1e72      	subs	r2, r6, #1
 80076da:	fbb2 f2f8 	udiv	r2, r2, r8
 80076de:	3b01      	subs	r3, #1
 80076e0:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 80076e4:	428a      	cmp	r2, r1
 80076e6:	d306      	bcc.n	80076f6 <f_lseek+0x174>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80076e8:	f1c8 0700 	rsb	r7, r8, #0
 80076ec:	401f      	ands	r7, r3
 80076ee:	61a7      	str	r7, [r4, #24]
				ofs -= fp->fptr;
 80076f0:	1bf7      	subs	r7, r6, r7
				clst = fp->clust;
 80076f2:	69e6      	ldr	r6, [r4, #28]
 80076f4:	e004      	b.n	8007700 <f_lseek+0x17e>
				clst = fp->obj.sclust;					/* start from the first cluster */
 80076f6:	68a0      	ldr	r0, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80076f8:	b330      	cbz	r0, 8007748 <f_lseek+0x1c6>
				fp->clust = clst;
 80076fa:	61e0      	str	r0, [r4, #28]
 80076fc:	4637      	mov	r7, r6
 80076fe:	4606      	mov	r6, r0
			if (clst != 0) {
 8007700:	2e00      	cmp	r6, #0
 8007702:	d141      	bne.n	8007788 <f_lseek+0x206>
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007704:	69a3      	ldr	r3, [r4, #24]
 8007706:	68e2      	ldr	r2, [r4, #12]
 8007708:	4293      	cmp	r3, r2
 800770a:	d904      	bls.n	8007716 <f_lseek+0x194>
			fp->obj.objsize = fp->fptr;
 800770c:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 800770e:	7d22      	ldrb	r2, [r4, #20]
 8007710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007714:	7522      	strb	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f af4b 	beq.w	80075b6 <f_lseek+0x34>
 8007720:	6a22      	ldr	r2, [r4, #32]
 8007722:	42b2      	cmp	r2, r6
 8007724:	f43f af47 	beq.w	80075b6 <f_lseek+0x34>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007728:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db57      	blt.n	80077e0 <f_lseek+0x25e>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007730:	2301      	movs	r3, #1
 8007732:	4632      	mov	r2, r6
 8007734:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007738:	9801      	ldr	r0, [sp, #4]
 800773a:	7840      	ldrb	r0, [r0, #1]
 800773c:	f7fe fcf8 	bl	8006130 <disk_read>
 8007740:	2800      	cmp	r0, #0
 8007742:	d15d      	bne.n	8007800 <f_lseek+0x27e>
			fp->sect = nsect;
 8007744:	6226      	str	r6, [r4, #32]
 8007746:	e736      	b.n	80075b6 <f_lseek+0x34>
					clst = create_chain(&fp->obj, 0);
 8007748:	2100      	movs	r1, #0
 800774a:	4620      	mov	r0, r4
 800774c:	f7ff fa6b 	bl	8006c26 <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007750:	2801      	cmp	r0, #1
 8007752:	d004      	beq.n	800775e <f_lseek+0x1dc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007758:	d004      	beq.n	8007764 <f_lseek+0x1e2>
					fp->obj.sclust = clst;
 800775a:	60a0      	str	r0, [r4, #8]
 800775c:	e7cd      	b.n	80076fa <f_lseek+0x178>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800775e:	2502      	movs	r5, #2
 8007760:	7565      	strb	r5, [r4, #21]
 8007762:	e728      	b.n	80075b6 <f_lseek+0x34>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007764:	2501      	movs	r5, #1
 8007766:	7565      	strb	r5, [r4, #21]
 8007768:	e725      	b.n	80075b6 <f_lseek+0x34>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800776a:	4631      	mov	r1, r6
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff f99c 	bl	8006aaa <get_fat>
 8007772:	4606      	mov	r6, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007774:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007778:	d027      	beq.n	80077ca <f_lseek+0x248>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800777a:	2e01      	cmp	r6, #1
 800777c:	d928      	bls.n	80077d0 <f_lseek+0x24e>
 800777e:	9b01      	ldr	r3, [sp, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	42b3      	cmp	r3, r6
 8007784:	d924      	bls.n	80077d0 <f_lseek+0x24e>
					fp->clust = clst;
 8007786:	61e6      	str	r6, [r4, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007788:	4547      	cmp	r7, r8
 800778a:	d910      	bls.n	80077ae <f_lseek+0x22c>
					ofs -= bcs; fp->fptr += bcs;
 800778c:	eba7 0708 	sub.w	r7, r7, r8
 8007790:	69a3      	ldr	r3, [r4, #24]
 8007792:	4443      	add	r3, r8
 8007794:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007796:	7d23      	ldrb	r3, [r4, #20]
 8007798:	f013 0f02 	tst.w	r3, #2
 800779c:	d0e5      	beq.n	800776a <f_lseek+0x1e8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800779e:	4631      	mov	r1, r6
 80077a0:	4620      	mov	r0, r4
 80077a2:	f7ff fa40 	bl	8006c26 <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80077a6:	4606      	mov	r6, r0
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d1e3      	bne.n	8007774 <f_lseek+0x1f2>
							ofs = 0; break;
 80077ac:	4607      	mov	r7, r0
				fp->fptr += ofs;
 80077ae:	69a3      	ldr	r3, [r4, #24]
 80077b0:	443b      	add	r3, r7
 80077b2:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 80077b4:	f3c7 0308 	ubfx	r3, r7, #0, #9
 80077b8:	b183      	cbz	r3, 80077dc <f_lseek+0x25a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80077ba:	4631      	mov	r1, r6
 80077bc:	9801      	ldr	r0, [sp, #4]
 80077be:	f7fe fdf7 	bl	80063b0 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80077c2:	b140      	cbz	r0, 80077d6 <f_lseek+0x254>
					nsect += (DWORD)(ofs / SS(fs));
 80077c4:	eb00 2657 	add.w	r6, r0, r7, lsr #9
 80077c8:	e79c      	b.n	8007704 <f_lseek+0x182>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077ca:	2501      	movs	r5, #1
 80077cc:	7565      	strb	r5, [r4, #21]
 80077ce:	e6f2      	b.n	80075b6 <f_lseek+0x34>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80077d0:	2502      	movs	r5, #2
 80077d2:	7565      	strb	r5, [r4, #21]
 80077d4:	e6ef      	b.n	80075b6 <f_lseek+0x34>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80077d6:	2502      	movs	r5, #2
 80077d8:	7565      	strb	r5, [r4, #21]
 80077da:	e6ec      	b.n	80075b6 <f_lseek+0x34>
		fp->fptr = nsect = 0;
 80077dc:	461e      	mov	r6, r3
 80077de:	e791      	b.n	8007704 <f_lseek+0x182>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077e0:	2301      	movs	r3, #1
 80077e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80077e6:	9801      	ldr	r0, [sp, #4]
 80077e8:	7840      	ldrb	r0, [r0, #1]
 80077ea:	f7fe fcad 	bl	8006148 <disk_write>
 80077ee:	b920      	cbnz	r0, 80077fa <f_lseek+0x278>
				fp->flag &= (BYTE)~FA_DIRTY;
 80077f0:	7d23      	ldrb	r3, [r4, #20]
 80077f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f6:	7523      	strb	r3, [r4, #20]
 80077f8:	e79a      	b.n	8007730 <f_lseek+0x1ae>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077fa:	2501      	movs	r5, #1
 80077fc:	7565      	strb	r5, [r4, #21]
 80077fe:	e6da      	b.n	80075b6 <f_lseek+0x34>
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007800:	2501      	movs	r5, #1
 8007802:	7565      	strb	r5, [r4, #21]
 8007804:	e6d7      	b.n	80075b6 <f_lseek+0x34>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007806:	2511      	movs	r5, #17
 8007808:	e6d5      	b.n	80075b6 <f_lseek+0x34>
	...

0800780c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <FATFS_LinkDriverEx+0x50>)
 800780e:	7a5b      	ldrb	r3, [r3, #9]
 8007810:	bb13      	cbnz	r3, 8007858 <FATFS_LinkDriverEx+0x4c>
{
 8007812:	b510      	push	{r4, lr}
 8007814:	4604      	mov	r4, r0
 8007816:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800781a:	4b10      	ldr	r3, [pc, #64]	; (800785c <FATFS_LinkDriverEx+0x50>)
 800781c:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007820:	fa5f fc8c 	uxtb.w	ip, ip
 8007824:	f04f 0e00 	mov.w	lr, #0
 8007828:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800782c:	f893 c009 	ldrb.w	ip, [r3, #9]
 8007830:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007834:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8007838:	7a5c      	ldrb	r4, [r3, #9]
 800783a:	441c      	add	r4, r3
 800783c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800783e:	7a5a      	ldrb	r2, [r3, #9]
 8007840:	1c54      	adds	r4, r2, #1
 8007842:	b2e4      	uxtb	r4, r4
 8007844:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8007846:	3230      	adds	r2, #48	; 0x30
 8007848:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800784a:	233a      	movs	r3, #58	; 0x3a
 800784c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800784e:	232f      	movs	r3, #47	; 0x2f
 8007850:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007852:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8007856:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8007858:	2001      	movs	r0, #1
}
 800785a:	4770      	bx	lr
 800785c:	20000644 	.word	0x20000644

08007860 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007860:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8007862:	2200      	movs	r2, #0
 8007864:	f7ff ffd2 	bl	800780c <FATFS_LinkDriverEx>
}
 8007868:	bd08      	pop	{r3, pc}
	...

0800786c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800786c:	2904      	cmp	r1, #4
 800786e:	d00c      	beq.n	800788a <USBH_UserProcess+0x1e>
 8007870:	2905      	cmp	r1, #5
 8007872:	d002      	beq.n	800787a <USBH_UserProcess+0xe>
 8007874:	2902      	cmp	r1, #2
 8007876:	d004      	beq.n	8007882 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007878:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <USBH_UserProcess+0x28>)
 800787c:	2203      	movs	r2, #3
 800787e:	701a      	strb	r2, [r3, #0]
  break;
 8007880:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8007882:	4b04      	ldr	r3, [pc, #16]	; (8007894 <USBH_UserProcess+0x28>)
 8007884:	2202      	movs	r2, #2
 8007886:	701a      	strb	r2, [r3, #0]
  break;
 8007888:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800788a:	4b02      	ldr	r3, [pc, #8]	; (8007894 <USBH_UserProcess+0x28>)
 800788c:	2201      	movs	r2, #1
 800788e:	701a      	strb	r2, [r3, #0]
}
 8007890:	e7f2      	b.n	8007878 <USBH_UserProcess+0xc>
 8007892:	bf00      	nop
 8007894:	20000650 	.word	0x20000650

08007898 <MX_USB_HOST_Init>:
{
 8007898:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800789a:	2201      	movs	r2, #1
 800789c:	490b      	ldr	r1, [pc, #44]	; (80078cc <MX_USB_HOST_Init+0x34>)
 800789e:	480c      	ldr	r0, [pc, #48]	; (80078d0 <MX_USB_HOST_Init+0x38>)
 80078a0:	f7fd ff1a 	bl	80056d8 <USBH_Init>
 80078a4:	b948      	cbnz	r0, 80078ba <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80078a6:	490b      	ldr	r1, [pc, #44]	; (80078d4 <MX_USB_HOST_Init+0x3c>)
 80078a8:	4809      	ldr	r0, [pc, #36]	; (80078d0 <MX_USB_HOST_Init+0x38>)
 80078aa:	f7fd ff34 	bl	8005716 <USBH_RegisterClass>
 80078ae:	b938      	cbnz	r0, 80078c0 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80078b0:	4807      	ldr	r0, [pc, #28]	; (80078d0 <MX_USB_HOST_Init+0x38>)
 80078b2:	f7fd ff75 	bl	80057a0 <USBH_Start>
 80078b6:	b930      	cbnz	r0, 80078c6 <MX_USB_HOST_Init+0x2e>
}
 80078b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80078ba:	f7f8 fe95 	bl	80005e8 <Error_Handler>
 80078be:	e7f2      	b.n	80078a6 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 80078c0:	f7f8 fe92 	bl	80005e8 <Error_Handler>
 80078c4:	e7f4      	b.n	80078b0 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 80078c6:	f7f8 fe8f 	bl	80005e8 <Error_Handler>
}
 80078ca:	e7f5      	b.n	80078b8 <MX_USB_HOST_Init+0x20>
 80078cc:	0800786d 	.word	0x0800786d
 80078d0:	20000654 	.word	0x20000654
 80078d4:	2000000c 	.word	0x2000000c

080078d8 <MX_USB_HOST_Process>:
{
 80078d8:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 80078da:	4802      	ldr	r0, [pc, #8]	; (80078e4 <MX_USB_HOST_Process+0xc>)
 80078dc:	f7fd ff6a 	bl	80057b4 <USBH_Process>
}
 80078e0:	bd08      	pop	{r3, pc}
 80078e2:	bf00      	nop
 80078e4:	20000654 	.word	0x20000654

080078e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ec:	2300      	movs	r3, #0
 80078ee:	9303      	str	r3, [sp, #12]
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	9306      	str	r3, [sp, #24]
 80078f6:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 80078f8:	6803      	ldr	r3, [r0, #0]
 80078fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078fe:	d001      	beq.n	8007904 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007900:	b008      	add	sp, #32
 8007902:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007904:	2500      	movs	r5, #0
 8007906:	9501      	str	r5, [sp, #4]
 8007908:	4c1b      	ldr	r4, [pc, #108]	; (8007978 <HAL_HCD_MspInit+0x90>)
 800790a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800790c:	f043 0301 	orr.w	r3, r3, #1
 8007910:	6323      	str	r3, [r4, #48]	; 0x30
 8007912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800791c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007920:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007922:	4e16      	ldr	r6, [pc, #88]	; (800797c <HAL_HCD_MspInit+0x94>)
 8007924:	a903      	add	r1, sp, #12
 8007926:	4630      	mov	r0, r6
 8007928:	f7f9 fc04 	bl	8001134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800792c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007930:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007932:	2302      	movs	r3, #2
 8007934:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007936:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007938:	2303      	movs	r3, #3
 800793a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800793c:	230a      	movs	r3, #10
 800793e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007940:	a903      	add	r1, sp, #12
 8007942:	4630      	mov	r0, r6
 8007944:	f7f9 fbf6 	bl	8001134 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	6363      	str	r3, [r4, #52]	; 0x34
 8007950:	9502      	str	r5, [sp, #8]
 8007952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007958:	6463      	str	r3, [r4, #68]	; 0x44
 800795a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800795c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007964:	462a      	mov	r2, r5
 8007966:	4629      	mov	r1, r5
 8007968:	2043      	movs	r0, #67	; 0x43
 800796a:	f7f9 f935 	bl	8000bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800796e:	2043      	movs	r0, #67	; 0x43
 8007970:	f7f9 f96a 	bl	8000c48 <HAL_NVIC_EnableIRQ>
}
 8007974:	e7c4      	b.n	8007900 <HAL_HCD_MspInit+0x18>
 8007976:	bf00      	nop
 8007978:	40023800 	.word	0x40023800
 800797c:	40020000 	.word	0x40020000

08007980 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007980:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8007982:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007986:	f7fe f853 	bl	8005a30 <USBH_LL_IncTimer>
}
 800798a:	bd08      	pop	{r3, pc}

0800798c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800798c:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 800798e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8007992:	f7fe f85e 	bl	8005a52 <USBH_LL_Connect>
}
 8007996:	bd08      	pop	{r3, pc}

08007998 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007998:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 800799a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800799e:	f7fe f862 	bl	8005a66 <USBH_LL_Disconnect>
}
 80079a2:	bd08      	pop	{r3, pc}

080079a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80079a4:	4770      	bx	lr

080079a6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079a6:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 80079a8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80079ac:	f7fe f849 	bl	8005a42 <USBH_LL_PortEnabled>
}
 80079b0:	bd08      	pop	{r3, pc}

080079b2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079b2:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 80079b4:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80079b8:	f7fe f847 	bl	8005a4a <USBH_LL_PortDisabled>
}
 80079bc:	bd08      	pop	{r3, pc}
	...

080079c0 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80079c0:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d001      	beq.n	80079cc <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 80079c8:	2000      	movs	r0, #0
 80079ca:	4770      	bx	lr
{
 80079cc:	b510      	push	{r4, lr}
 80079ce:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 80079d0:	480f      	ldr	r0, [pc, #60]	; (8007a10 <USBH_LL_Init+0x50>)
 80079d2:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80079d6:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079de:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80079e0:	2308      	movs	r3, #8
 80079e2:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80079ec:	2202      	movs	r2, #2
 80079ee:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079f0:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80079f2:	f7f9 fd34 	bl	800145e <HAL_HCD_Init>
 80079f6:	b940      	cbnz	r0, 8007a0a <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079f8:	4805      	ldr	r0, [pc, #20]	; (8007a10 <USBH_LL_Init+0x50>)
 80079fa:	f7fa fa84 	bl	8001f06 <HAL_HCD_GetCurrentFrame>
 80079fe:	4601      	mov	r1, r0
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7fe f812 	bl	8005a2a <USBH_LL_SetTimer>
}
 8007a06:	2000      	movs	r0, #0
 8007a08:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007a0a:	f7f8 fded 	bl	80005e8 <Error_Handler>
 8007a0e:	e7f3      	b.n	80079f8 <USBH_LL_Init+0x38>
 8007a10:	20000a2c 	.word	0x20000a2c

08007a14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a14:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a16:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a1a:	f7fa fa79 	bl	8001f10 <HAL_HCD_GetCurrentSpeed>
 8007a1e:	2801      	cmp	r0, #1
 8007a20:	d004      	beq.n	8007a2c <USBH_LL_GetSpeed+0x18>
 8007a22:	2802      	cmp	r0, #2
 8007a24:	d004      	beq.n	8007a30 <USBH_LL_GetSpeed+0x1c>
 8007a26:	b100      	cbz	r0, 8007a2a <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8007a28:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 8007a2a:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	e7fc      	b.n	8007a2a <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8007a30:	2002      	movs	r0, #2
 8007a32:	e7fa      	b.n	8007a2a <USBH_LL_GetSpeed+0x16>

08007a34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a34:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a36:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a3a:	f7fa fa5f 	bl	8001efc <HAL_HCD_HC_GetXferCount>
}
 8007a3e:	bd08      	pop	{r3, pc}

08007a40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a40:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a42:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007a46:	f7fa fa53 	bl	8001ef0 <HAL_HCD_HC_GetURBState>
}
 8007a4a:	bd08      	pop	{r3, pc}

08007a4c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a4c:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007a4e:	20c8      	movs	r0, #200	; 0xc8
 8007a50:	f7f9 f89c 	bl	8000b8c <HAL_Delay>
  return USBH_OK;
}
 8007a54:	2000      	movs	r0, #0
 8007a56:	bd08      	pop	{r3, pc}

08007a58 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a58:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8007a5c:	202c      	movs	r0, #44	; 0x2c
 8007a5e:	fb00 3001 	mla	r0, r0, r1, r3
 8007a62:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8007a66:	b130      	cbz	r0, 8007a76 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a68:	202c      	movs	r0, #44	; 0x2c
 8007a6a:	fb00 3301 	mla	r3, r0, r1, r3
 8007a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8007a72:	2000      	movs	r0, #0
 8007a74:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8007a76:	202c      	movs	r0, #44	; 0x2c
 8007a78:	fb00 3301 	mla	r3, r0, r1, r3
 8007a7c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8007a80:	e7f7      	b.n	8007a72 <USBH_LL_SetToggle+0x1a>

08007a82 <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a82:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8007a86:	222c      	movs	r2, #44	; 0x2c
 8007a88:	fb02 3201 	mla	r2, r2, r1, r3
 8007a8c:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 8007a90:	b12a      	cbz	r2, 8007a9e <USBH_LL_GetToggle+0x1c>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8007a92:	222c      	movs	r2, #44	; 0x2c
 8007a94:	fb02 3301 	mla	r3, r2, r1, r3
 8007a98:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8007a9c:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8007a9e:	222c      	movs	r2, #44	; 0x2c
 8007aa0:	fb02 3301 	mla	r3, r2, r1, r3
 8007aa4:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
  }
  return toggle;
}
 8007aa8:	4770      	bx	lr

08007aaa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007aaa:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8007aac:	f7f9 f86e 	bl	8000b8c <HAL_Delay>
}
 8007ab0:	bd08      	pop	{r3, pc}

08007ab2 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8007ab2:	2802      	cmp	r0, #2
 8007ab4:	d805      	bhi.n	8007ac2 <USBH_Get_USB_Status+0x10>
 8007ab6:	e8df f000 	tbb	[pc, r0]
 8007aba:	0405      	.short	0x0405
 8007abc:	02          	.byte	0x02
 8007abd:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007abe:	2001      	movs	r0, #1
    break;
 8007ac0:	4770      	bx	lr
      usb_status = USBH_FAIL;
 8007ac2:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8007ac4:	4770      	bx	lr

08007ac6 <USBH_LL_Start>:
{
 8007ac6:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8007ac8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007acc:	f7fa f9e4 	bl	8001e98 <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007ad0:	f7ff ffef 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007ad4:	bd08      	pop	{r3, pc}

08007ad6 <USBH_LL_Stop>:
{
 8007ad6:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8007ad8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007adc:	f7fa f9f1 	bl	8001ec2 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007ae0:	f7ff ffe7 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007ae4:	bd08      	pop	{r3, pc}

08007ae6 <USBH_LL_ResetPort>:
{
 8007ae6:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ae8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007aec:	f7fa f9fb 	bl	8001ee6 <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007af0:	f7ff ffdf 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007af4:	bd08      	pop	{r3, pc}

08007af6 <USBH_LL_OpenPipe>:
{
 8007af6:	b510      	push	{r4, lr}
 8007af8:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007afa:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007afe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007b02:	9402      	str	r4, [sp, #8]
 8007b04:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8007b08:	9401      	str	r4, [sp, #4]
 8007b0a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007b0e:	9400      	str	r4, [sp, #0]
 8007b10:	f7f9 fc4c 	bl	80013ac <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007b14:	f7ff ffcd 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd10      	pop	{r4, pc}

08007b1c <USBH_LL_ClosePipe>:
{
 8007b1c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b1e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007b22:	f7f9 fc8a 	bl	800143a <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8007b26:	f7ff ffc4 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007b2a:	bd08      	pop	{r3, pc}

08007b2c <USBH_LL_SubmitURB>:
{
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b30:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007b34:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8007b38:	9403      	str	r4, [sp, #12]
 8007b3a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007b3e:	9402      	str	r4, [sp, #8]
 8007b40:	9c07      	ldr	r4, [sp, #28]
 8007b42:	9401      	str	r4, [sp, #4]
 8007b44:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007b48:	9400      	str	r4, [sp, #0]
 8007b4a:	f7f9 fcda 	bl	8001502 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b4e:	f7ff ffb0 	bl	8007ab2 <USBH_Get_USB_Status>
}
 8007b52:	b004      	add	sp, #16
 8007b54:	bd10      	pop	{r4, pc}
	...

08007b58 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8007b58:	b500      	push	{lr}
 8007b5a:	b085      	sub	sp, #20
  uint8_t iData[2];
	iData[0] = reg;
 8007b5c:	f88d 000c 	strb.w	r0, [sp, #12]
	iData[1] = data[0];
 8007b60:	780b      	ldrb	r3, [r1, #0]
 8007b62:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8007b66:	2364      	movs	r3, #100	; 0x64
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	aa03      	add	r2, sp, #12
 8007b6e:	2194      	movs	r1, #148	; 0x94
 8007b70:	4802      	ldr	r0, [pc, #8]	; (8007b7c <write_register+0x24>)
 8007b72:	f7fa fcd1 	bl	8002518 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8007b76:	b005      	add	sp, #20
 8007b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b7c:	20000d30 	.word	0x20000d30

08007b80 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	460c      	mov	r4, r1
  uint8_t iData[2];
	iData[0] = reg;
 8007b86:	f88d 000c 	strb.w	r0, [sp, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8007b8a:	4d09      	ldr	r5, [pc, #36]	; (8007bb0 <read_register+0x30>)
 8007b8c:	2664      	movs	r6, #100	; 0x64
 8007b8e:	9600      	str	r6, [sp, #0]
 8007b90:	2301      	movs	r3, #1
 8007b92:	aa03      	add	r2, sp, #12
 8007b94:	2194      	movs	r1, #148	; 0x94
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7fa fcbe 	bl	8002518 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8007b9c:	9600      	str	r6, [sp, #0]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	2194      	movs	r1, #148	; 0x94
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f7fa fd73 	bl	8002690 <HAL_I2C_Master_Receive>
}
 8007baa:	b004      	add	sp, #16
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000d30 	.word	0x20000d30

08007bb4 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	b530      	push	{r4, r5, lr}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	ac06      	add	r4, sp, #24
 8007bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007bc0:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8007bc4:	4b5f      	ldr	r3, [pc, #380]	; (8007d44 <CS43_Init+0x190>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	69d3      	ldr	r3, [r2, #28]
 8007bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bd4:	61d3      	str	r3, [r2, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	2110      	movs	r1, #16
 8007bda:	485b      	ldr	r0, [pc, #364]	; (8007d48 <CS43_Init+0x194>)
 8007bdc:	f7f9 fb91 	bl	8001302 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8007be0:	2254      	movs	r2, #84	; 0x54
 8007be2:	a906      	add	r1, sp, #24
 8007be4:	4859      	ldr	r0, [pc, #356]	; (8007d4c <CS43_Init+0x198>)
 8007be6:	f000 fb6f 	bl	80082c8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(POWER_CONTROL1,iData);
 8007bf0:	a901      	add	r1, sp, #4
 8007bf2:	2002      	movs	r0, #2
 8007bf4:	f7ff ffb0 	bl	8007b58 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8007bf8:	2580      	movs	r5, #128	; 0x80
 8007bfa:	f88d 5005 	strb.w	r5, [sp, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8007bfe:	23a0      	movs	r3, #160	; 0xa0
 8007c00:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8007c04:	23ac      	movs	r3, #172	; 0xac
 8007c06:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8007c0a:	23af      	movs	r3, #175	; 0xaf
 8007c0c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8007c10:	f10d 0105 	add.w	r1, sp, #5
 8007c14:	2004      	movs	r0, #4
 8007c16:	f7ff ff9f 	bl	8007b58 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8007c1a:	f88d 5005 	strb.w	r5, [sp, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8007c1e:	f10d 0105 	add.w	r1, sp, #5
 8007c22:	2005      	movs	r0, #5
 8007c24:	f7ff ff98 	bl	8007b58 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8007c28:	a901      	add	r1, sp, #4
 8007c2a:	2006      	movs	r0, #6
 8007c2c:	f7ff ffa8 	bl	8007b80 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8007c30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] &= ~(1 << 7);  // Slave
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
	iData[1] &= ~(1 << 4);  // No DSP mode
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
	iData[1] |= (1 << 2);
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	f88d 3005 	strb.w	r3, [sp, #5]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8007c44:	f043 0303 	orr.w	r3, r3, #3
 8007c48:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8007c4c:	f10d 0105 	add.w	r1, sp, #5
 8007c50:	2006      	movs	r0, #6
 8007c52:	f7ff ff81 	bl	8007b58 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8007c56:	f10d 0105 	add.w	r1, sp, #5
 8007c5a:	2008      	movs	r0, #8
 8007c5c:	f7ff ff90 	bl	8007b80 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8007c60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c68:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8007c74:	f10d 0105 	add.w	r1, sp, #5
 8007c78:	2008      	movs	r0, #8
 8007c7a:	f7ff ff6d 	bl	8007b58 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8007c7e:	f10d 0105 	add.w	r1, sp, #5
 8007c82:	2009      	movs	r0, #9
 8007c84:	f7ff ff7c 	bl	8007b80 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8007c88:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c90:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8007c94:	f043 0301 	orr.w	r3, r3, #1
 8007c98:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8007c9c:	f10d 0105 	add.w	r1, sp, #5
 8007ca0:	2009      	movs	r0, #9
 8007ca2:	f7ff ff59 	bl	8007b58 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8007ca6:	f10d 0105 	add.w	r1, sp, #5
 8007caa:	200e      	movs	r0, #14
 8007cac:	f7ff ff68 	bl	8007b80 <read_register>
	if(outputMode == MODE_ANALOG)
 8007cb0:	2c03      	cmp	r4, #3
 8007cb2:	d004      	beq.n	8007cbe <CS43_Init+0x10a>
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
	}
	else if(outputMode == MODE_I2S)
 8007cb4:	b9c4      	cbnz	r4, 8007ce8 <CS43_Init+0x134>
	{
		iData[1] = 0x02;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	f88d 3005 	strb.w	r3, [sp, #5]
 8007cbc:	e014      	b.n	8007ce8 <CS43_Init+0x134>
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8007cbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007cc2:	432b      	orrs	r3, r5
 8007cc4:	f88d 3005 	strb.w	r3, [sp, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8007cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ccc:	f88d 3005 	strb.w	r3, [sp, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8007cd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cd4:	f88d 3005 	strb.w	r3, [sp, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8007cd8:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 8007cdc:	f88d 3005 	strb.w	r3, [sp, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8007ce0:	f023 0308 	bic.w	r3, r3, #8
 8007ce4:	f88d 3005 	strb.w	r3, [sp, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8007ce8:	f10d 0105 	add.w	r1, sp, #5
 8007cec:	200e      	movs	r0, #14
 8007cee:	f7ff ff33 	bl	8007b58 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8007cf2:	f10d 0105 	add.w	r1, sp, #5
 8007cf6:	200f      	movs	r0, #15
 8007cf8:	f7ff ff42 	bl	8007b80 <read_register>
	iData[1] = 0x00;
 8007cfc:	2400      	movs	r4, #0
 8007cfe:	f88d 4005 	strb.w	r4, [sp, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8007d02:	f10d 0105 	add.w	r1, sp, #5
 8007d06:	200f      	movs	r0, #15
 8007d08:	f7ff ff26 	bl	8007b58 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 8007d0c:	f88d 4005 	strb.w	r4, [sp, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8007d10:	f10d 0105 	add.w	r1, sp, #5
 8007d14:	2014      	movs	r0, #20
 8007d16:	f7ff ff1f 	bl	8007b58 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8007d1a:	f10d 0105 	add.w	r1, sp, #5
 8007d1e:	2015      	movs	r0, #21
 8007d20:	f7ff ff1a 	bl	8007b58 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8007d24:	f10d 0105 	add.w	r1, sp, #5
 8007d28:	201a      	movs	r0, #26
 8007d2a:	f7ff ff15 	bl	8007b58 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8007d2e:	f10d 0105 	add.w	r1, sp, #5
 8007d32:	201b      	movs	r0, #27
 8007d34:	f7ff ff10 	bl	8007b58 <write_register>
}
 8007d38:	b003      	add	sp, #12
 8007d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d3e:	b004      	add	sp, #16
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000100 	.word	0x20000100
 8007d48:	40020c00 	.word	0x40020c00
 8007d4c:	20000d30 	.word	0x20000d30

08007d50 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8007d50:	b500      	push	{lr}
 8007d52:	b083      	sub	sp, #12
  uint8_t iData[2];
	switch (side)
 8007d54:	2803      	cmp	r0, #3
 8007d56:	d809      	bhi.n	8007d6c <CS43_Enable_RightLeft+0x1c>
 8007d58:	e8df f000 	tbb	[pc, r0]
 8007d5c:	28211a02 	.word	0x28211a02
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8007d60:	23c0      	movs	r3, #192	; 0xc0
 8007d62:	f88d 3005 	strb.w	r3, [sp, #5]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8007d66:	23f0      	movs	r3, #240	; 0xf0
 8007d68:	f88d 3005 	strb.w	r3, [sp, #5]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
			break;
		default:
			break;
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8007d6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007d70:	f043 030c 	orr.w	r3, r3, #12
 8007d74:	f88d 3005 	strb.w	r3, [sp, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8007d78:	f043 0303 	orr.w	r3, r3, #3
 8007d7c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8007d80:	f10d 0105 	add.w	r1, sp, #5
 8007d84:	2004      	movs	r0, #4
 8007d86:	f7ff fee7 	bl	8007b58 <write_register>
}
 8007d8a:	b003      	add	sp, #12
 8007d8c:	f85d fb04 	ldr.w	pc, [sp], #4
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	f88d 3005 	strb.w	r3, [sp, #5]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8007d96:	23b0      	movs	r3, #176	; 0xb0
 8007d98:	f88d 3005 	strb.w	r3, [sp, #5]
			break;
 8007d9c:	e7e6      	b.n	8007d6c <CS43_Enable_RightLeft+0x1c>
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8007d9e:	23c0      	movs	r3, #192	; 0xc0
 8007da0:	f88d 3005 	strb.w	r3, [sp, #5]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8007da4:	23e0      	movs	r3, #224	; 0xe0
 8007da6:	f88d 3005 	strb.w	r3, [sp, #5]
			break;
 8007daa:	e7df      	b.n	8007d6c <CS43_Enable_RightLeft+0x1c>
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8007dac:	2380      	movs	r3, #128	; 0x80
 8007dae:	f88d 3005 	strb.w	r3, [sp, #5]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8007db2:	23a0      	movs	r3, #160	; 0xa0
 8007db4:	f88d 3005 	strb.w	r3, [sp, #5]
			break;
 8007db8:	e7d8      	b.n	8007d6c <CS43_Enable_RightLeft+0x1c>

08007dba <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8007dba:	b500      	push	{lr}
 8007dbc:	b083      	sub	sp, #12
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 8007dbe:	3019      	adds	r0, #25
 8007dc0:	f88d 0005 	strb.w	r0, [sp, #5]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8007dc4:	f10d 0105 	add.w	r1, sp, #5
 8007dc8:	2020      	movs	r0, #32
 8007dca:	f7ff fec5 	bl	8007b58 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8007dce:	f10d 0105 	add.w	r1, sp, #5
 8007dd2:	2021      	movs	r0, #33	; 0x21
 8007dd4:	f7ff fec0 	bl	8007b58 <write_register>
}
 8007dd8:	b003      	add	sp, #12
 8007dda:	f85d fb04 	ldr.w	pc, [sp], #4

08007dde <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8007dde:	b500      	push	{lr}
 8007de0:	b083      	sub	sp, #12
  uint8_t iData[2];
  if(mute)
 8007de2:	b1b8      	cbz	r0, 8007e14 <CS43_SetMute+0x36>
  {
    iData[1] = 0xFF;
 8007de4:	23ff      	movs	r3, #255	; 0xff
 8007de6:	f88d 3005 	strb.w	r3, [sp, #5]
    write_register(POWER_CONTROL2,&iData[1]);
 8007dea:	f10d 0105 	add.w	r1, sp, #5
 8007dee:	2004      	movs	r0, #4
 8007df0:	f7ff feb2 	bl	8007b58 <write_register>
    iData[1] = 0x01;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f88d 3005 	strb.w	r3, [sp, #5]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8007dfa:	f10d 0105 	add.w	r1, sp, #5
 8007dfe:	2022      	movs	r0, #34	; 0x22
 8007e00:	f7ff feaa 	bl	8007b58 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8007e04:	f10d 0105 	add.w	r1, sp, #5
 8007e08:	2023      	movs	r0, #35	; 0x23
 8007e0a:	f7ff fea5 	bl	8007b58 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8007e0e:	b003      	add	sp, #12
 8007e10:	f85d fb04 	ldr.w	pc, [sp], #4
    iData[1] = 0x00;
 8007e14:	2300      	movs	r3, #0
 8007e16:	f88d 3005 	strb.w	r3, [sp, #5]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8007e1a:	f10d 0105 	add.w	r1, sp, #5
 8007e1e:	2022      	movs	r0, #34	; 0x22
 8007e20:	f7ff fe9a 	bl	8007b58 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8007e24:	f10d 0105 	add.w	r1, sp, #5
 8007e28:	2023      	movs	r0, #35	; 0x23
 8007e2a:	f7ff fe95 	bl	8007b58 <write_register>
    iData[1] = 0xAF;
 8007e2e:	23af      	movs	r3, #175	; 0xaf
 8007e30:	f88d 3005 	strb.w	r3, [sp, #5]
    write_register(POWER_CONTROL2,&iData[1]);
 8007e34:	f10d 0105 	add.w	r1, sp, #5
 8007e38:	2004      	movs	r0, #4
 8007e3a:	f7ff fe8d 	bl	8007b58 <write_register>
}
 8007e3e:	e7e6      	b.n	8007e0e <CS43_SetMute+0x30>

08007e40 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8007e40:	b500      	push	{lr}
 8007e42:	b083      	sub	sp, #12
  uint8_t iData[2];
  CS43_SetMute(0);
 8007e44:	2000      	movs	r0, #0
 8007e46:	f7ff ffca 	bl	8007dde <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8007e4a:	2399      	movs	r3, #153	; 0x99
 8007e4c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(CONFIG_00,&iData[1]);
 8007e50:	f10d 0105 	add.w	r1, sp, #5
 8007e54:	2000      	movs	r0, #0
 8007e56:	f7ff fe7f 	bl	8007b58 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(CONFIG_47,&iData[1]);
 8007e60:	f10d 0105 	add.w	r1, sp, #5
 8007e64:	2047      	movs	r0, #71	; 0x47
 8007e66:	f7ff fe77 	bl	8007b58 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8007e6a:	f10d 0105 	add.w	r1, sp, #5
 8007e6e:	2032      	movs	r0, #50	; 0x32
 8007e70:	f7ff fe86 	bl	8007b80 <read_register>
	iData[1] |= 0x80;
 8007e74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e7c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(CONFIG_32,&iData[1]);
 8007e80:	f10d 0105 	add.w	r1, sp, #5
 8007e84:	2032      	movs	r0, #50	; 0x32
 8007e86:	f7ff fe67 	bl	8007b58 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8007e8a:	f10d 0105 	add.w	r1, sp, #5
 8007e8e:	2032      	movs	r0, #50	; 0x32
 8007e90:	f7ff fe76 	bl	8007b80 <read_register>
	iData[1] &= ~(0x80);
 8007e94:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9c:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(CONFIG_32,&iData[1]);
 8007ea0:	f10d 0105 	add.w	r1, sp, #5
 8007ea4:	2032      	movs	r0, #50	; 0x32
 8007ea6:	f7ff fe57 	bl	8007b58 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f88d 0005 	strb.w	r0, [sp, #5]
	write_register(CONFIG_00,&iData[1]);
 8007eb0:	f10d 0105 	add.w	r1, sp, #5
 8007eb4:	f7ff fe50 	bl	8007b58 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8007eb8:	239e      	movs	r3, #158	; 0x9e
 8007eba:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8007ebe:	f10d 0105 	add.w	r1, sp, #5
 8007ec2:	2002      	movs	r0, #2
 8007ec4:	f7ff fe48 	bl	8007b58 <write_register>
}
 8007ec8:	b003      	add	sp, #12
 8007eca:	f85d fb04 	ldr.w	pc, [sp], #4

08007ece <CS43_Stop>:

void CS43_Stop(void)
{
 8007ece:	b500      	push	{lr}
 8007ed0:	b083      	sub	sp, #12
  uint8_t iData[2];
  CS43_SetMute(1);
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	f7ff ff83 	bl	8007dde <CS43_SetMute>
  iData[1] = 0x04;
 8007ed8:	2304      	movs	r3, #4
 8007eda:	f88d 3005 	strb.w	r3, [sp, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8007ede:	f10d 0105 	add.w	r1, sp, #5
 8007ee2:	200e      	movs	r0, #14
 8007ee4:	f7ff fe38 	bl	8007b58 <write_register>
	iData[1] = 0x9F;
 8007ee8:	239f      	movs	r3, #159	; 0x9f
 8007eea:	f88d 3005 	strb.w	r3, [sp, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8007eee:	f10d 0105 	add.w	r1, sp, #5
 8007ef2:	2002      	movs	r0, #2
 8007ef4:	f7ff fe30 	bl	8007b58 <write_register>
}
 8007ef8:	b003      	add	sp, #12
 8007efa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007f00 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8007f00:	b510      	push	{r4, lr}
 8007f02:	b086      	sub	sp, #24
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8007f04:	24ff      	movs	r4, #255	; 0xff

  for(index = 0; index < 8; index++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	e001      	b.n	8007f0e <audioI2S_pllClockConfig+0xe>
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b07      	cmp	r3, #7
 8007f10:	d806      	bhi.n	8007f20 <audioI2S_pllClockConfig+0x20>
  {
    if(I2SFreq[index] == audioFreq)
 8007f12:	4a13      	ldr	r2, [pc, #76]	; (8007f60 <audioI2S_pllClockConfig+0x60>)
 8007f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f18:	4282      	cmp	r2, r0
 8007f1a:	d1f6      	bne.n	8007f0a <audioI2S_pllClockConfig+0xa>
    {
      freqindex = index;
 8007f1c:	461c      	mov	r4, r3
 8007f1e:	e7f4      	b.n	8007f0a <audioI2S_pllClockConfig+0xa>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8007f20:	4668      	mov	r0, sp
 8007f22:	f7fb fe89 	bl	8003c38 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8007f26:	f014 0f07 	tst.w	r4, #7
 8007f2a:	d10d      	bne.n	8007f48 <audioI2S_pllClockConfig+0x48>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8007f30:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <audioI2S_pllClockConfig+0x60>)
 8007f32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f36:	6a23      	ldr	r3, [r4, #32]
 8007f38:	9302      	str	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8007f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f3c:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8007f3e:	4668      	mov	r0, sp
 8007f40:	f7fb fdc2 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8007f44:	b006      	add	sp, #24
 8007f46:	bd10      	pop	{r4, pc}
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8007f4c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007f50:	9302      	str	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8007f52:	2303      	movs	r3, #3
 8007f54:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8007f56:	4668      	mov	r0, sp
 8007f58:	f7fb fdb6 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
}
 8007f5c:	e7f2      	b.n	8007f44 <audioI2S_pllClockConfig+0x44>
 8007f5e:	bf00      	nop
 8007f60:	080085dc 	.word	0x080085dc

08007f64 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8007f64:	b508      	push	{r3, lr}
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8007f66:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <I2S3_freqUpdate+0x38>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <I2S3_freqUpdate+0x3c>)
 8007f6c:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8007f6e:	69d1      	ldr	r1, [r2, #28]
 8007f70:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f74:	61d1      	str	r1, [r2, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8007f76:	6158      	str	r0, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8007f78:	2200      	movs	r2, #0
 8007f7a:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8007f7c:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8007f7e:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8007f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f84:	6119      	str	r1, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8007f86:	6059      	str	r1, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8007f88:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fa fd1e 	bl	80029cc <HAL_I2S_Init>
 8007f90:	b108      	cbz	r0, 8007f96 <I2S3_freqUpdate+0x32>
  {
    return false;
 8007f92:	2000      	movs	r0, #0
  }
  else
  {
    return true;
  }
}
 8007f94:	bd08      	pop	{r3, pc}
    return true;
 8007f96:	2001      	movs	r0, #1
 8007f98:	e7fc      	b.n	8007f94 <I2S3_freqUpdate+0x30>
 8007f9a:	bf00      	nop
 8007f9c:	20000d84 	.word	0x20000d84
 8007fa0:	40003c00 	.word	0x40003c00

08007fa4 <audioI2S_setHandle>:
/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
  hAudioI2S = pI2Shandle;
 8007fa4:	4b01      	ldr	r3, [pc, #4]	; (8007fac <audioI2S_setHandle+0x8>)
 8007fa6:	6018      	str	r0, [r3, #0]
}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000d84 	.word	0x20000d84

08007fb0 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4604      	mov	r4, r0
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8007fb4:	f7ff ffa4 	bl	8007f00 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7ff ffd3 	bl	8007f64 <I2S3_freqUpdate>
  return true;
}
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	bd10      	pop	{r4, pc}
	...

08007fc4 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	460c      	mov	r4, r1
  //Start Codec
  CS43_Start();
 8007fca:	f7ff ff39 	bl	8007e40 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <audioI2S_play+0x28>)
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8007fd6:	d206      	bcs.n	8007fe6 <audioI2S_play+0x22>
 8007fd8:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7fa fdc3 	bl	8002b68 <HAL_I2S_Transmit_DMA>
  return true;
}
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8007fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fea:	e7f7      	b.n	8007fdc <audioI2S_play+0x18>
 8007fec:	20000d84 	.word	0x20000d84

08007ff0 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8007ff0:	b508      	push	{r3, lr}
  CS43_Stop();
 8007ff2:	f7ff ff6c 	bl	8007ece <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8007ff6:	4b02      	ldr	r3, [pc, #8]	; (8008000 <audioI2S_pause+0x10>)
 8007ff8:	6818      	ldr	r0, [r3, #0]
 8007ffa:	f7fa fe23 	bl	8002c44 <HAL_I2S_DMAPause>
}
 8007ffe:	bd08      	pop	{r3, pc}
 8008000:	20000d84 	.word	0x20000d84

08008004 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8008004:	b508      	push	{r3, lr}
  CS43_Start();
 8008006:	f7ff ff1b 	bl	8007e40 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 800800a:	4b02      	ldr	r3, [pc, #8]	; (8008014 <audioI2S_resume+0x10>)
 800800c:	6818      	ldr	r0, [r3, #0]
 800800e:	f7fa fe59 	bl	8002cc4 <HAL_I2S_DMAResume>
}
 8008012:	bd08      	pop	{r3, pc}
 8008014:	20000d84 	.word	0x20000d84

08008018 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8008018:	b508      	push	{r3, lr}
  CS43_Stop();
 800801a:	f7ff ff58 	bl	8007ece <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 800801e:	4b02      	ldr	r3, [pc, #8]	; (8008028 <audioI2S_stop+0x10>)
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f7fa fea9 	bl	8002d78 <HAL_I2S_DMAStop>
}
 8008026:	bd08      	pop	{r3, pc}
 8008028:	20000d84 	.word	0x20000d84

0800802c <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800802c:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI3)
 800802e:	6802      	ldr	r2, [r0, #0]
 8008030:	4b03      	ldr	r3, [pc, #12]	; (8008040 <HAL_I2S_TxCpltCallback+0x14>)
 8008032:	429a      	cmp	r2, r3
 8008034:	d000      	beq.n	8008038 <HAL_I2S_TxCpltCallback+0xc>
  {
    audioI2S_fullTransfer_Callback();
  }
}
 8008036:	bd08      	pop	{r3, pc}
    audioI2S_fullTransfer_Callback();
 8008038:	f000 f8da 	bl	80081f0 <audioI2S_fullTransfer_Callback>
}
 800803c:	e7fb      	b.n	8008036 <HAL_I2S_TxCpltCallback+0xa>
 800803e:	bf00      	nop
 8008040:	40003c00 	.word	0x40003c00

08008044 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008044:	b508      	push	{r3, lr}
  if(hi2s->Instance == SPI3)
 8008046:	6802      	ldr	r2, [r0, #0]
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <HAL_I2S_TxHalfCpltCallback+0x14>)
 800804a:	429a      	cmp	r2, r3
 800804c:	d000      	beq.n	8008050 <HAL_I2S_TxHalfCpltCallback+0xc>
  {
    audioI2S_halfTransfer_Callback();
  }
}
 800804e:	bd08      	pop	{r3, pc}
    audioI2S_halfTransfer_Callback();
 8008050:	f000 f8c6 	bl	80081e0 <audioI2S_halfTransfer_Callback>
}
 8008054:	e7fb      	b.n	800804e <HAL_I2S_TxHalfCpltCallback+0xa>
 8008056:	bf00      	nop
 8008058:	40003c00 	.word	0x40003c00

0800805c <wavPlayer_reset>:
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
  audioRemainSize = 0;
 800805c:	4b02      	ldr	r3, [pc, #8]	; (8008068 <wavPlayer_reset+0xc>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8008062:	605a      	str	r2, [r3, #4]
}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000d88 	.word	0x20000d88

0800806c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 800806c:	b510      	push	{r4, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	4601      	mov	r1, r0
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8008076:	2201      	movs	r2, #1
 8008078:	480b      	ldr	r0, [pc, #44]	; (80080a8 <wavPlayer_fileSelect+0x3c>)
 800807a:	f7ff f82d 	bl	80070d8 <f_open>
 800807e:	b110      	cbz	r0, 8008086 <wavPlayer_fileSelect+0x1a>
  {
    return false;
 8008080:	2000      	movs	r0, #0
  //Get audio data size
  fileLength = wavHeader.FileSize;
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
  return true;
}
 8008082:	b00c      	add	sp, #48	; 0x30
 8008084:	bd10      	pop	{r4, pc}
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8008086:	4c09      	ldr	r4, [pc, #36]	; (80080ac <wavPlayer_fileSelect+0x40>)
 8008088:	466b      	mov	r3, sp
 800808a:	222c      	movs	r2, #44	; 0x2c
 800808c:	a901      	add	r1, sp, #4
 800808e:	f104 0008 	add.w	r0, r4, #8
 8008092:	f7ff f934 	bl	80072fe <f_read>
  fileLength = wavHeader.FileSize;
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
  samplingFreq = wavHeader.SampleRate;
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
  return true;
 80080a2:	2001      	movs	r0, #1
 80080a4:	e7ed      	b.n	8008082 <wavPlayer_fileSelect+0x16>
 80080a6:	bf00      	nop
 80080a8:	20000d90 	.word	0x20000d90
 80080ac:	20000d88 	.word	0x20000d88

080080b0 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80080b0:	b570      	push	{r4, r5, r6, lr}
  isFinished = false;
 80080b2:	4c10      	ldr	r4, [pc, #64]	; (80080f4 <wavPlayer_play+0x44>)
 80080b4:	2500      	movs	r5, #0
 80080b6:	f884 5240 	strb.w	r5, [r4, #576]	; 0x240
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80080ba:	f8d4 023c 	ldr.w	r0, [r4, #572]	; 0x23c
 80080be:	f7ff ff77 	bl	8007fb0 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80080c2:	f104 0608 	add.w	r6, r4, #8
 80080c6:	4629      	mov	r1, r5
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff fa5a 	bl	8007582 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 80080ce:	4d0a      	ldr	r5, [pc, #40]	; (80080f8 <wavPlayer_play+0x48>)
 80080d0:	1d23      	adds	r3, r4, #4
 80080d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080d6:	4629      	mov	r1, r5
 80080d8:	4630      	mov	r0, r6
 80080da:	f7ff f910 	bl	80072fe <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 80080de:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	6023      	str	r3, [r4, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 80080e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7ff ff69 	bl	8007fc4 <audioI2S_play>
}
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	20000d88 	.word	0x20000d88
 80080f8:	20000fcc 	.word	0x20000fcc

080080fc <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 80080fc:	b510      	push	{r4, lr}
  switch(playerControlSM)
 80080fe:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <wavPlayer_process+0xa8>)
 8008100:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d021      	beq.n	800814e <wavPlayer_process+0x52>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d03c      	beq.n	8008188 <wavPlayer_process+0x8c>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d000      	beq.n	8008114 <wavPlayer_process+0x18>
    wavPlayer_reset();
    isFinished = true;
    playerControlSM = PLAYER_CONTROL_Idle;
    break;
  }
}
 8008112:	bd10      	pop	{r4, pc}
    playerReadBytes = 0;
 8008114:	4c23      	ldr	r4, [pc, #140]	; (80081a4 <wavPlayer_process+0xa8>)
 8008116:	2300      	movs	r3, #0
 8008118:	6063      	str	r3, [r4, #4]
    playerControlSM = PLAYER_CONTROL_Idle;
 800811a:	f884 3241 	strb.w	r3, [r4, #577]	; 0x241
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 800811e:	1d23      	adds	r3, r4, #4
 8008120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008124:	4920      	ldr	r1, [pc, #128]	; (80081a8 <wavPlayer_process+0xac>)
 8008126:	f104 0008 	add.w	r0, r4, #8
 800812a:	f7ff f8e8 	bl	80072fe <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008134:	d904      	bls.n	8008140 <wavPlayer_process+0x44>
      audioRemainSize -= playerReadBytes;
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	6861      	ldr	r1, [r4, #4]
 800813a:	1a52      	subs	r2, r2, r1
 800813c:	6022      	str	r2, [r4, #0]
 800813e:	e7e8      	b.n	8008112 <wavPlayer_process+0x16>
      audioRemainSize = 0;
 8008140:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <wavPlayer_process+0xa8>)
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8008146:	2203      	movs	r2, #3
 8008148:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 800814c:	e7e1      	b.n	8008112 <wavPlayer_process+0x16>
    playerReadBytes = 0;
 800814e:	4c15      	ldr	r4, [pc, #84]	; (80081a4 <wavPlayer_process+0xa8>)
 8008150:	2300      	movs	r3, #0
 8008152:	6063      	str	r3, [r4, #4]
    playerControlSM = PLAYER_CONTROL_Idle;
 8008154:	f884 3241 	strb.w	r3, [r4, #577]	; 0x241
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8008158:	1d23      	adds	r3, r4, #4
 800815a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800815e:	4913      	ldr	r1, [pc, #76]	; (80081ac <wavPlayer_process+0xb0>)
 8008160:	f104 0008 	add.w	r0, r4, #8
 8008164:	f7ff f8cb 	bl	80072fe <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816e:	d904      	bls.n	800817a <wavPlayer_process+0x7e>
      audioRemainSize -= playerReadBytes;
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	6861      	ldr	r1, [r4, #4]
 8008174:	1a52      	subs	r2, r2, r1
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	e7cb      	b.n	8008112 <wavPlayer_process+0x16>
      audioRemainSize = 0;
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <wavPlayer_process+0xa8>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8008180:	2203      	movs	r2, #3
 8008182:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8008186:	e7c4      	b.n	8008112 <wavPlayer_process+0x16>
    f_close(&wavFile);
 8008188:	4c06      	ldr	r4, [pc, #24]	; (80081a4 <wavPlayer_process+0xa8>)
 800818a:	f104 0008 	add.w	r0, r4, #8
 800818e:	f7ff f9e3 	bl	8007558 <f_close>
    wavPlayer_reset();
 8008192:	f7ff ff63 	bl	800805c <wavPlayer_reset>
    isFinished = true;
 8008196:	2301      	movs	r3, #1
 8008198:	f884 3240 	strb.w	r3, [r4, #576]	; 0x240
    playerControlSM = PLAYER_CONTROL_Idle;
 800819c:	2300      	movs	r3, #0
 800819e:	f884 3241 	strb.w	r3, [r4, #577]	; 0x241
}
 80081a2:	e7b6      	b.n	8008112 <wavPlayer_process+0x16>
 80081a4:	20000d88 	.word	0x20000d88
 80081a8:	20000fcc 	.word	0x20000fcc
 80081ac:	200017cc 	.word	0x200017cc

080081b0 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 80081b0:	b508      	push	{r3, lr}
  audioI2S_stop();
 80081b2:	f7ff ff31 	bl	8008018 <audioI2S_stop>
  isFinished = true;
 80081b6:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <wavPlayer_stop+0x10>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 80081be:	bd08      	pop	{r3, pc}
 80081c0:	20000d88 	.word	0x20000d88

080081c4 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 80081c4:	b508      	push	{r3, lr}
  audioI2S_pause();
 80081c6:	f7ff ff13 	bl	8007ff0 <audioI2S_pause>
}
 80081ca:	bd08      	pop	{r3, pc}

080081cc <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 80081cc:	b508      	push	{r3, lr}
  audioI2S_resume();
 80081ce:	f7ff ff19 	bl	8008004 <audioI2S_resume>
}
 80081d2:	bd08      	pop	{r3, pc}

080081d4 <wavPlayer_isFinished>:
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
  return isFinished;
}
 80081d4:	4b01      	ldr	r3, [pc, #4]	; (80081dc <wavPlayer_isFinished+0x8>)
 80081d6:	f893 0240 	ldrb.w	r0, [r3, #576]	; 0x240
 80081da:	4770      	bx	lr
 80081dc:	20000d88 	.word	0x20000d88

080081e0 <audioI2S_halfTransfer_Callback>:
/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <audioI2S_halfTransfer_Callback+0xc>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000d88 	.word	0x20000d88

080081f0 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 80081f0:	4b02      	ldr	r3, [pc, #8]	; (80081fc <audioI2S_fullTransfer_Callback+0xc>)
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000d88 	.word	0x20000d88

08008200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008204:	480d      	ldr	r0, [pc, #52]	; (800823c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008206:	490e      	ldr	r1, [pc, #56]	; (8008240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008208:	4a0e      	ldr	r2, [pc, #56]	; (8008244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800820a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800820c:	e002      	b.n	8008214 <LoopCopyDataInit>

0800820e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800820e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008212:	3304      	adds	r3, #4

08008214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008218:	d3f9      	bcc.n	800820e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800821a:	4a0b      	ldr	r2, [pc, #44]	; (8008248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800821c:	4c0b      	ldr	r4, [pc, #44]	; (800824c <LoopFillZerobss+0x26>)
  movs r3, #0
 800821e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008220:	e001      	b.n	8008226 <LoopFillZerobss>

08008222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008224:	3204      	adds	r2, #4

08008226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008228:	d3fb      	bcc.n	8008222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800822a:	f7f8 fc55 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800822e:	f000 f817 	bl	8008260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008232:	f7f8 fa65 	bl	8000700 <main>
  bx  lr    
 8008236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800823c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008240:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8008244:	080086a8 	.word	0x080086a8
  ldr r2, =_sbss
 8008248:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800824c:	20001fdc 	.word	0x20001fdc

08008250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008250:	e7fe      	b.n	8008250 <ADC_IRQHandler>
	...

08008254 <__errno>:
 8008254:	4b01      	ldr	r3, [pc, #4]	; (800825c <__errno+0x8>)
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	2000002c 	.word	0x2000002c

08008260 <__libc_init_array>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	4d0d      	ldr	r5, [pc, #52]	; (8008298 <__libc_init_array+0x38>)
 8008264:	4c0d      	ldr	r4, [pc, #52]	; (800829c <__libc_init_array+0x3c>)
 8008266:	1b64      	subs	r4, r4, r5
 8008268:	10a4      	asrs	r4, r4, #2
 800826a:	2600      	movs	r6, #0
 800826c:	42a6      	cmp	r6, r4
 800826e:	d109      	bne.n	8008284 <__libc_init_array+0x24>
 8008270:	4d0b      	ldr	r5, [pc, #44]	; (80082a0 <__libc_init_array+0x40>)
 8008272:	4c0c      	ldr	r4, [pc, #48]	; (80082a4 <__libc_init_array+0x44>)
 8008274:	f000 f93c 	bl	80084f0 <_init>
 8008278:	1b64      	subs	r4, r4, r5
 800827a:	10a4      	asrs	r4, r4, #2
 800827c:	2600      	movs	r6, #0
 800827e:	42a6      	cmp	r6, r4
 8008280:	d105      	bne.n	800828e <__libc_init_array+0x2e>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	f855 3b04 	ldr.w	r3, [r5], #4
 8008288:	4798      	blx	r3
 800828a:	3601      	adds	r6, #1
 800828c:	e7ee      	b.n	800826c <__libc_init_array+0xc>
 800828e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008292:	4798      	blx	r3
 8008294:	3601      	adds	r6, #1
 8008296:	e7f2      	b.n	800827e <__libc_init_array+0x1e>
 8008298:	080086a0 	.word	0x080086a0
 800829c:	080086a0 	.word	0x080086a0
 80082a0:	080086a0 	.word	0x080086a0
 80082a4:	080086a4 	.word	0x080086a4

080082a8 <malloc>:
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <malloc+0xc>)
 80082aa:	4601      	mov	r1, r0
 80082ac:	6818      	ldr	r0, [r3, #0]
 80082ae:	f000 b88d 	b.w	80083cc <_malloc_r>
 80082b2:	bf00      	nop
 80082b4:	2000002c 	.word	0x2000002c

080082b8 <free>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <free+0xc>)
 80082ba:	4601      	mov	r1, r0
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f000 b819 	b.w	80082f4 <_free_r>
 80082c2:	bf00      	nop
 80082c4:	2000002c 	.word	0x2000002c

080082c8 <memcpy>:
 80082c8:	440a      	add	r2, r1
 80082ca:	4291      	cmp	r1, r2
 80082cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d0:	d100      	bne.n	80082d4 <memcpy+0xc>
 80082d2:	4770      	bx	lr
 80082d4:	b510      	push	{r4, lr}
 80082d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082de:	4291      	cmp	r1, r2
 80082e0:	d1f9      	bne.n	80082d6 <memcpy+0xe>
 80082e2:	bd10      	pop	{r4, pc}

080082e4 <memset>:
 80082e4:	4402      	add	r2, r0
 80082e6:	4603      	mov	r3, r0
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d100      	bne.n	80082ee <memset+0xa>
 80082ec:	4770      	bx	lr
 80082ee:	f803 1b01 	strb.w	r1, [r3], #1
 80082f2:	e7f9      	b.n	80082e8 <memset+0x4>

080082f4 <_free_r>:
 80082f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082f6:	2900      	cmp	r1, #0
 80082f8:	d044      	beq.n	8008384 <_free_r+0x90>
 80082fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fe:	9001      	str	r0, [sp, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f1a1 0404 	sub.w	r4, r1, #4
 8008306:	bfb8      	it	lt
 8008308:	18e4      	addlt	r4, r4, r3
 800830a:	f000 f8e3 	bl	80084d4 <__malloc_lock>
 800830e:	4a1e      	ldr	r2, [pc, #120]	; (8008388 <_free_r+0x94>)
 8008310:	9801      	ldr	r0, [sp, #4]
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	b933      	cbnz	r3, 8008324 <_free_r+0x30>
 8008316:	6063      	str	r3, [r4, #4]
 8008318:	6014      	str	r4, [r2, #0]
 800831a:	b003      	add	sp, #12
 800831c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008320:	f000 b8de 	b.w	80084e0 <__malloc_unlock>
 8008324:	42a3      	cmp	r3, r4
 8008326:	d908      	bls.n	800833a <_free_r+0x46>
 8008328:	6825      	ldr	r5, [r4, #0]
 800832a:	1961      	adds	r1, r4, r5
 800832c:	428b      	cmp	r3, r1
 800832e:	bf01      	itttt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	1949      	addeq	r1, r1, r5
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	e7ed      	b.n	8008316 <_free_r+0x22>
 800833a:	461a      	mov	r2, r3
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	b10b      	cbz	r3, 8008344 <_free_r+0x50>
 8008340:	42a3      	cmp	r3, r4
 8008342:	d9fa      	bls.n	800833a <_free_r+0x46>
 8008344:	6811      	ldr	r1, [r2, #0]
 8008346:	1855      	adds	r5, r2, r1
 8008348:	42a5      	cmp	r5, r4
 800834a:	d10b      	bne.n	8008364 <_free_r+0x70>
 800834c:	6824      	ldr	r4, [r4, #0]
 800834e:	4421      	add	r1, r4
 8008350:	1854      	adds	r4, r2, r1
 8008352:	42a3      	cmp	r3, r4
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	d1e0      	bne.n	800831a <_free_r+0x26>
 8008358:	681c      	ldr	r4, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	6053      	str	r3, [r2, #4]
 800835e:	4421      	add	r1, r4
 8008360:	6011      	str	r1, [r2, #0]
 8008362:	e7da      	b.n	800831a <_free_r+0x26>
 8008364:	d902      	bls.n	800836c <_free_r+0x78>
 8008366:	230c      	movs	r3, #12
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	e7d6      	b.n	800831a <_free_r+0x26>
 800836c:	6825      	ldr	r5, [r4, #0]
 800836e:	1961      	adds	r1, r4, r5
 8008370:	428b      	cmp	r3, r1
 8008372:	bf04      	itt	eq
 8008374:	6819      	ldreq	r1, [r3, #0]
 8008376:	685b      	ldreq	r3, [r3, #4]
 8008378:	6063      	str	r3, [r4, #4]
 800837a:	bf04      	itt	eq
 800837c:	1949      	addeq	r1, r1, r5
 800837e:	6021      	streq	r1, [r4, #0]
 8008380:	6054      	str	r4, [r2, #4]
 8008382:	e7ca      	b.n	800831a <_free_r+0x26>
 8008384:	b003      	add	sp, #12
 8008386:	bd30      	pop	{r4, r5, pc}
 8008388:	20001fcc 	.word	0x20001fcc

0800838c <sbrk_aligned>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4e0e      	ldr	r6, [pc, #56]	; (80083c8 <sbrk_aligned+0x3c>)
 8008390:	460c      	mov	r4, r1
 8008392:	6831      	ldr	r1, [r6, #0]
 8008394:	4605      	mov	r5, r0
 8008396:	b911      	cbnz	r1, 800839e <sbrk_aligned+0x12>
 8008398:	f000 f88c 	bl	80084b4 <_sbrk_r>
 800839c:	6030      	str	r0, [r6, #0]
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 f887 	bl	80084b4 <_sbrk_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d00a      	beq.n	80083c0 <sbrk_aligned+0x34>
 80083aa:	1cc4      	adds	r4, r0, #3
 80083ac:	f024 0403 	bic.w	r4, r4, #3
 80083b0:	42a0      	cmp	r0, r4
 80083b2:	d007      	beq.n	80083c4 <sbrk_aligned+0x38>
 80083b4:	1a21      	subs	r1, r4, r0
 80083b6:	4628      	mov	r0, r5
 80083b8:	f000 f87c 	bl	80084b4 <_sbrk_r>
 80083bc:	3001      	adds	r0, #1
 80083be:	d101      	bne.n	80083c4 <sbrk_aligned+0x38>
 80083c0:	f04f 34ff 	mov.w	r4, #4294967295
 80083c4:	4620      	mov	r0, r4
 80083c6:	bd70      	pop	{r4, r5, r6, pc}
 80083c8:	20001fd0 	.word	0x20001fd0

080083cc <_malloc_r>:
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	1ccd      	adds	r5, r1, #3
 80083d2:	f025 0503 	bic.w	r5, r5, #3
 80083d6:	3508      	adds	r5, #8
 80083d8:	2d0c      	cmp	r5, #12
 80083da:	bf38      	it	cc
 80083dc:	250c      	movcc	r5, #12
 80083de:	2d00      	cmp	r5, #0
 80083e0:	4607      	mov	r7, r0
 80083e2:	db01      	blt.n	80083e8 <_malloc_r+0x1c>
 80083e4:	42a9      	cmp	r1, r5
 80083e6:	d905      	bls.n	80083f4 <_malloc_r+0x28>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	2600      	movs	r6, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f4:	4e2e      	ldr	r6, [pc, #184]	; (80084b0 <_malloc_r+0xe4>)
 80083f6:	f000 f86d 	bl	80084d4 <__malloc_lock>
 80083fa:	6833      	ldr	r3, [r6, #0]
 80083fc:	461c      	mov	r4, r3
 80083fe:	bb34      	cbnz	r4, 800844e <_malloc_r+0x82>
 8008400:	4629      	mov	r1, r5
 8008402:	4638      	mov	r0, r7
 8008404:	f7ff ffc2 	bl	800838c <sbrk_aligned>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	4604      	mov	r4, r0
 800840c:	d14d      	bne.n	80084aa <_malloc_r+0xde>
 800840e:	6834      	ldr	r4, [r6, #0]
 8008410:	4626      	mov	r6, r4
 8008412:	2e00      	cmp	r6, #0
 8008414:	d140      	bne.n	8008498 <_malloc_r+0xcc>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	4631      	mov	r1, r6
 800841a:	4638      	mov	r0, r7
 800841c:	eb04 0803 	add.w	r8, r4, r3
 8008420:	f000 f848 	bl	80084b4 <_sbrk_r>
 8008424:	4580      	cmp	r8, r0
 8008426:	d13a      	bne.n	800849e <_malloc_r+0xd2>
 8008428:	6821      	ldr	r1, [r4, #0]
 800842a:	3503      	adds	r5, #3
 800842c:	1a6d      	subs	r5, r5, r1
 800842e:	f025 0503 	bic.w	r5, r5, #3
 8008432:	3508      	adds	r5, #8
 8008434:	2d0c      	cmp	r5, #12
 8008436:	bf38      	it	cc
 8008438:	250c      	movcc	r5, #12
 800843a:	4629      	mov	r1, r5
 800843c:	4638      	mov	r0, r7
 800843e:	f7ff ffa5 	bl	800838c <sbrk_aligned>
 8008442:	3001      	adds	r0, #1
 8008444:	d02b      	beq.n	800849e <_malloc_r+0xd2>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	442b      	add	r3, r5
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	e00e      	b.n	800846c <_malloc_r+0xa0>
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	1b52      	subs	r2, r2, r5
 8008452:	d41e      	bmi.n	8008492 <_malloc_r+0xc6>
 8008454:	2a0b      	cmp	r2, #11
 8008456:	d916      	bls.n	8008486 <_malloc_r+0xba>
 8008458:	1961      	adds	r1, r4, r5
 800845a:	42a3      	cmp	r3, r4
 800845c:	6025      	str	r5, [r4, #0]
 800845e:	bf18      	it	ne
 8008460:	6059      	strne	r1, [r3, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	bf08      	it	eq
 8008466:	6031      	streq	r1, [r6, #0]
 8008468:	5162      	str	r2, [r4, r5]
 800846a:	604b      	str	r3, [r1, #4]
 800846c:	4638      	mov	r0, r7
 800846e:	f104 060b 	add.w	r6, r4, #11
 8008472:	f000 f835 	bl	80084e0 <__malloc_unlock>
 8008476:	f026 0607 	bic.w	r6, r6, #7
 800847a:	1d23      	adds	r3, r4, #4
 800847c:	1af2      	subs	r2, r6, r3
 800847e:	d0b6      	beq.n	80083ee <_malloc_r+0x22>
 8008480:	1b9b      	subs	r3, r3, r6
 8008482:	50a3      	str	r3, [r4, r2]
 8008484:	e7b3      	b.n	80083ee <_malloc_r+0x22>
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	42a3      	cmp	r3, r4
 800848a:	bf0c      	ite	eq
 800848c:	6032      	streq	r2, [r6, #0]
 800848e:	605a      	strne	r2, [r3, #4]
 8008490:	e7ec      	b.n	800846c <_malloc_r+0xa0>
 8008492:	4623      	mov	r3, r4
 8008494:	6864      	ldr	r4, [r4, #4]
 8008496:	e7b2      	b.n	80083fe <_malloc_r+0x32>
 8008498:	4634      	mov	r4, r6
 800849a:	6876      	ldr	r6, [r6, #4]
 800849c:	e7b9      	b.n	8008412 <_malloc_r+0x46>
 800849e:	230c      	movs	r3, #12
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4638      	mov	r0, r7
 80084a4:	f000 f81c 	bl	80084e0 <__malloc_unlock>
 80084a8:	e7a1      	b.n	80083ee <_malloc_r+0x22>
 80084aa:	6025      	str	r5, [r4, #0]
 80084ac:	e7de      	b.n	800846c <_malloc_r+0xa0>
 80084ae:	bf00      	nop
 80084b0:	20001fcc 	.word	0x20001fcc

080084b4 <_sbrk_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_sbrk_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7f8 faec 	bl	8000a9c <_sbrk>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_sbrk_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_sbrk_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20001fd4 	.word	0x20001fd4

080084d4 <__malloc_lock>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__malloc_lock+0x8>)
 80084d6:	f000 b809 	b.w	80084ec <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	20001fd8 	.word	0x20001fd8

080084e0 <__malloc_unlock>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__malloc_unlock+0x8>)
 80084e2:	f000 b804 	b.w	80084ee <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	20001fd8 	.word	0x20001fd8

080084ec <__retarget_lock_acquire_recursive>:
 80084ec:	4770      	bx	lr

080084ee <__retarget_lock_release_recursive>:
 80084ee:	4770      	bx	lr

080084f0 <_init>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr

080084fc <_fini>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr
