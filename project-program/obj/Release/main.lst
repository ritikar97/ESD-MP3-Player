                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_mp3_files
                                     13 	.globl _print_buffer
                                     14 	.globl __sdcc_external_startup
                                     15 	.globl _disk_initialize
                                     16 	.globl _pf_readdir
                                     17 	.globl _pf_opendir
                                     18 	.globl _pf_read
                                     19 	.globl _pf_open
                                     20 	.globl _pf_mount
                                     21 	.globl _write_to_DAC_and_EEPROM
                                     22 	.globl _reset_DAC
                                     23 	.globl _init_timer0
                                     24 	.globl _lcdinit
                                     25 	.globl _get_card_type
                                     26 	.globl _spi_init
                                     27 	.globl _init_serial
                                     28 	.globl _printf_tiny
                                     29 	.globl _TF1
                                     30 	.globl _TR1
                                     31 	.globl _TF0
                                     32 	.globl _TR0
                                     33 	.globl _IE1
                                     34 	.globl _IT1
                                     35 	.globl _IE0
                                     36 	.globl _IT0
                                     37 	.globl _SM0
                                     38 	.globl _SM1
                                     39 	.globl _SM2
                                     40 	.globl _REN
                                     41 	.globl _TB8
                                     42 	.globl _RB8
                                     43 	.globl _TI
                                     44 	.globl _RI
                                     45 	.globl _CY
                                     46 	.globl _AC
                                     47 	.globl _F0
                                     48 	.globl _RS1
                                     49 	.globl _RS0
                                     50 	.globl _OV
                                     51 	.globl _F1
                                     52 	.globl _P
                                     53 	.globl _RD
                                     54 	.globl _WR
                                     55 	.globl _T1
                                     56 	.globl _T0
                                     57 	.globl _INT1
                                     58 	.globl _INT0
                                     59 	.globl _TXD0
                                     60 	.globl _TXD
                                     61 	.globl _RXD0
                                     62 	.globl _RXD
                                     63 	.globl _P3_7
                                     64 	.globl _P3_6
                                     65 	.globl _P3_5
                                     66 	.globl _P3_4
                                     67 	.globl _P3_3
                                     68 	.globl _P3_2
                                     69 	.globl _P3_1
                                     70 	.globl _P3_0
                                     71 	.globl _P2_7
                                     72 	.globl _P2_6
                                     73 	.globl _P2_5
                                     74 	.globl _P2_4
                                     75 	.globl _P2_3
                                     76 	.globl _P2_2
                                     77 	.globl _P2_1
                                     78 	.globl _P2_0
                                     79 	.globl _P1_7
                                     80 	.globl _P1_6
                                     81 	.globl _P1_5
                                     82 	.globl _P1_4
                                     83 	.globl _P1_3
                                     84 	.globl _P1_2
                                     85 	.globl _P1_1
                                     86 	.globl _P1_0
                                     87 	.globl _P0_7
                                     88 	.globl _P0_6
                                     89 	.globl _P0_5
                                     90 	.globl _P0_4
                                     91 	.globl _P0_3
                                     92 	.globl _P0_2
                                     93 	.globl _P0_1
                                     94 	.globl _P0_0
                                     95 	.globl _PS
                                     96 	.globl _PT1
                                     97 	.globl _PX1
                                     98 	.globl _PT0
                                     99 	.globl _PX0
                                    100 	.globl _EA
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _BREG_F7
                                    107 	.globl _BREG_F6
                                    108 	.globl _BREG_F5
                                    109 	.globl _BREG_F4
                                    110 	.globl _BREG_F3
                                    111 	.globl _BREG_F2
                                    112 	.globl _BREG_F1
                                    113 	.globl _BREG_F0
                                    114 	.globl _P5_7
                                    115 	.globl _P5_6
                                    116 	.globl _P5_5
                                    117 	.globl _P5_4
                                    118 	.globl _P5_3
                                    119 	.globl _P5_2
                                    120 	.globl _P5_1
                                    121 	.globl _P5_0
                                    122 	.globl _P4_7
                                    123 	.globl _P4_6
                                    124 	.globl _P4_5
                                    125 	.globl _P4_4
                                    126 	.globl _P4_3
                                    127 	.globl _P4_2
                                    128 	.globl _P4_1
                                    129 	.globl _P4_0
                                    130 	.globl _PX0L
                                    131 	.globl _PT0L
                                    132 	.globl _PX1L
                                    133 	.globl _PT1L
                                    134 	.globl _PSL
                                    135 	.globl _PT2L
                                    136 	.globl _PPCL
                                    137 	.globl _EC
                                    138 	.globl _CCF0
                                    139 	.globl _CCF1
                                    140 	.globl _CCF2
                                    141 	.globl _CCF3
                                    142 	.globl _CCF4
                                    143 	.globl _CR
                                    144 	.globl _CF
                                    145 	.globl _TF2
                                    146 	.globl _EXF2
                                    147 	.globl _RCLK
                                    148 	.globl _TCLK
                                    149 	.globl _EXEN2
                                    150 	.globl _TR2
                                    151 	.globl _C_T2
                                    152 	.globl _CP_RL2
                                    153 	.globl _T2CON_7
                                    154 	.globl _T2CON_6
                                    155 	.globl _T2CON_5
                                    156 	.globl _T2CON_4
                                    157 	.globl _T2CON_3
                                    158 	.globl _T2CON_2
                                    159 	.globl _T2CON_1
                                    160 	.globl _T2CON_0
                                    161 	.globl _PT2
                                    162 	.globl _ET2
                                    163 	.globl _TMOD
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TH1
                                    167 	.globl _TH0
                                    168 	.globl _TCON
                                    169 	.globl _SP
                                    170 	.globl _SCON
                                    171 	.globl _SBUF0
                                    172 	.globl _SBUF
                                    173 	.globl _PSW
                                    174 	.globl _PCON
                                    175 	.globl _P3
                                    176 	.globl _P2
                                    177 	.globl _P1
                                    178 	.globl _P0
                                    179 	.globl _IP
                                    180 	.globl _IE
                                    181 	.globl _DP0L
                                    182 	.globl _DPL
                                    183 	.globl _DP0H
                                    184 	.globl _DPH
                                    185 	.globl _B
                                    186 	.globl _ACC
                                    187 	.globl _EECON
                                    188 	.globl _KBF
                                    189 	.globl _KBE
                                    190 	.globl _KBLS
                                    191 	.globl _BRL
                                    192 	.globl _BDRCON
                                    193 	.globl _T2MOD
                                    194 	.globl _SPDAT
                                    195 	.globl _SPSTA
                                    196 	.globl _SPCON
                                    197 	.globl _SADEN
                                    198 	.globl _SADDR
                                    199 	.globl _WDTPRG
                                    200 	.globl _WDTRST
                                    201 	.globl _P5
                                    202 	.globl _P4
                                    203 	.globl _IPH1
                                    204 	.globl _IPL1
                                    205 	.globl _IPH0
                                    206 	.globl _IPL0
                                    207 	.globl _IEN1
                                    208 	.globl _IEN0
                                    209 	.globl _CMOD
                                    210 	.globl _CL
                                    211 	.globl _CH
                                    212 	.globl _CCON
                                    213 	.globl _CCAPM4
                                    214 	.globl _CCAPM3
                                    215 	.globl _CCAPM2
                                    216 	.globl _CCAPM1
                                    217 	.globl _CCAPM0
                                    218 	.globl _CCAP4L
                                    219 	.globl _CCAP3L
                                    220 	.globl _CCAP2L
                                    221 	.globl _CCAP1L
                                    222 	.globl _CCAP0L
                                    223 	.globl _CCAP4H
                                    224 	.globl _CCAP3H
                                    225 	.globl _CCAP2H
                                    226 	.globl _CCAP1H
                                    227 	.globl _CCAP0H
                                    228 	.globl _CKCON1
                                    229 	.globl _CKCON0
                                    230 	.globl _CKRL
                                    231 	.globl _AUXR1
                                    232 	.globl _AUXR
                                    233 	.globl _TH2
                                    234 	.globl _TL2
                                    235 	.globl _RCAP2H
                                    236 	.globl _RCAP2L
                                    237 	.globl _T2CON
                                    238 	.globl _SDCard
                                    239 ;--------------------------------------------------------
                                    240 ; special function registers
                                    241 ;--------------------------------------------------------
                                    242 	.area RSEG    (ABS,DATA)
      000000                        243 	.org 0x0000
                           0000C8   244 _T2CON	=	0x00c8
                           0000CA   245 _RCAP2L	=	0x00ca
                           0000CB   246 _RCAP2H	=	0x00cb
                           0000CC   247 _TL2	=	0x00cc
                           0000CD   248 _TH2	=	0x00cd
                           00008E   249 _AUXR	=	0x008e
                           0000A2   250 _AUXR1	=	0x00a2
                           000097   251 _CKRL	=	0x0097
                           00008F   252 _CKCON0	=	0x008f
                           0000AF   253 _CKCON1	=	0x00af
                           0000FA   254 _CCAP0H	=	0x00fa
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 _CCAP2H	=	0x00fc
                           0000FD   257 _CCAP3H	=	0x00fd
                           0000FE   258 _CCAP4H	=	0x00fe
                           0000EA   259 _CCAP0L	=	0x00ea
                           0000EB   260 _CCAP1L	=	0x00eb
                           0000EC   261 _CCAP2L	=	0x00ec
                           0000ED   262 _CCAP3L	=	0x00ed
                           0000EE   263 _CCAP4L	=	0x00ee
                           0000DA   264 _CCAPM0	=	0x00da
                           0000DB   265 _CCAPM1	=	0x00db
                           0000DC   266 _CCAPM2	=	0x00dc
                           0000DD   267 _CCAPM3	=	0x00dd
                           0000DE   268 _CCAPM4	=	0x00de
                           0000D8   269 _CCON	=	0x00d8
                           0000F9   270 _CH	=	0x00f9
                           0000E9   271 _CL	=	0x00e9
                           0000D9   272 _CMOD	=	0x00d9
                           0000A8   273 _IEN0	=	0x00a8
                           0000B1   274 _IEN1	=	0x00b1
                           0000B8   275 _IPL0	=	0x00b8
                           0000B7   276 _IPH0	=	0x00b7
                           0000B2   277 _IPL1	=	0x00b2
                           0000B3   278 _IPH1	=	0x00b3
                           0000C0   279 _P4	=	0x00c0
                           0000E8   280 _P5	=	0x00e8
                           0000A6   281 _WDTRST	=	0x00a6
                           0000A7   282 _WDTPRG	=	0x00a7
                           0000A9   283 _SADDR	=	0x00a9
                           0000B9   284 _SADEN	=	0x00b9
                           0000C3   285 _SPCON	=	0x00c3
                           0000C4   286 _SPSTA	=	0x00c4
                           0000C5   287 _SPDAT	=	0x00c5
                           0000C9   288 _T2MOD	=	0x00c9
                           00009B   289 _BDRCON	=	0x009b
                           00009A   290 _BRL	=	0x009a
                           00009C   291 _KBLS	=	0x009c
                           00009D   292 _KBE	=	0x009d
                           00009E   293 _KBF	=	0x009e
                           0000D2   294 _EECON	=	0x00d2
                           0000E0   295 _ACC	=	0x00e0
                           0000F0   296 _B	=	0x00f0
                           000083   297 _DPH	=	0x0083
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DPL	=	0x0082
                           000082   300 _DP0L	=	0x0082
                           0000A8   301 _IE	=	0x00a8
                           0000B8   302 _IP	=	0x00b8
                           000080   303 _P0	=	0x0080
                           000090   304 _P1	=	0x0090
                           0000A0   305 _P2	=	0x00a0
                           0000B0   306 _P3	=	0x00b0
                           000087   307 _PCON	=	0x0087
                           0000D0   308 _PSW	=	0x00d0
                           000099   309 _SBUF	=	0x0099
                           000099   310 _SBUF0	=	0x0099
                           000098   311 _SCON	=	0x0098
                           000081   312 _SP	=	0x0081
                           000088   313 _TCON	=	0x0088
                           00008C   314 _TH0	=	0x008c
                           00008D   315 _TH1	=	0x008d
                           00008A   316 _TL0	=	0x008a
                           00008B   317 _TL1	=	0x008b
                           000089   318 _TMOD	=	0x0089
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           0000AD   324 _ET2	=	0x00ad
                           0000BD   325 _PT2	=	0x00bd
                           0000C8   326 _T2CON_0	=	0x00c8
                           0000C9   327 _T2CON_1	=	0x00c9
                           0000CA   328 _T2CON_2	=	0x00ca
                           0000CB   329 _T2CON_3	=	0x00cb
                           0000CC   330 _T2CON_4	=	0x00cc
                           0000CD   331 _T2CON_5	=	0x00cd
                           0000CE   332 _T2CON_6	=	0x00ce
                           0000CF   333 _T2CON_7	=	0x00cf
                           0000C8   334 _CP_RL2	=	0x00c8
                           0000C9   335 _C_T2	=	0x00c9
                           0000CA   336 _TR2	=	0x00ca
                           0000CB   337 _EXEN2	=	0x00cb
                           0000CC   338 _TCLK	=	0x00cc
                           0000CD   339 _RCLK	=	0x00cd
                           0000CE   340 _EXF2	=	0x00ce
                           0000CF   341 _TF2	=	0x00cf
                           0000DF   342 _CF	=	0x00df
                           0000DE   343 _CR	=	0x00de
                           0000DC   344 _CCF4	=	0x00dc
                           0000DB   345 _CCF3	=	0x00db
                           0000DA   346 _CCF2	=	0x00da
                           0000D9   347 _CCF1	=	0x00d9
                           0000D8   348 _CCF0	=	0x00d8
                           0000AE   349 _EC	=	0x00ae
                           0000BE   350 _PPCL	=	0x00be
                           0000BD   351 _PT2L	=	0x00bd
                           0000BC   352 _PSL	=	0x00bc
                           0000BB   353 _PT1L	=	0x00bb
                           0000BA   354 _PX1L	=	0x00ba
                           0000B9   355 _PT0L	=	0x00b9
                           0000B8   356 _PX0L	=	0x00b8
                           0000C0   357 _P4_0	=	0x00c0
                           0000C1   358 _P4_1	=	0x00c1
                           0000C2   359 _P4_2	=	0x00c2
                           0000C3   360 _P4_3	=	0x00c3
                           0000C4   361 _P4_4	=	0x00c4
                           0000C5   362 _P4_5	=	0x00c5
                           0000C6   363 _P4_6	=	0x00c6
                           0000C7   364 _P4_7	=	0x00c7
                           0000E8   365 _P5_0	=	0x00e8
                           0000E9   366 _P5_1	=	0x00e9
                           0000EA   367 _P5_2	=	0x00ea
                           0000EB   368 _P5_3	=	0x00eb
                           0000EC   369 _P5_4	=	0x00ec
                           0000ED   370 _P5_5	=	0x00ed
                           0000EE   371 _P5_6	=	0x00ee
                           0000EF   372 _P5_7	=	0x00ef
                           0000F0   373 _BREG_F0	=	0x00f0
                           0000F1   374 _BREG_F1	=	0x00f1
                           0000F2   375 _BREG_F2	=	0x00f2
                           0000F3   376 _BREG_F3	=	0x00f3
                           0000F4   377 _BREG_F4	=	0x00f4
                           0000F5   378 _BREG_F5	=	0x00f5
                           0000F6   379 _BREG_F6	=	0x00f6
                           0000F7   380 _BREG_F7	=	0x00f7
                           0000A8   381 _EX0	=	0x00a8
                           0000A9   382 _ET0	=	0x00a9
                           0000AA   383 _EX1	=	0x00aa
                           0000AB   384 _ET1	=	0x00ab
                           0000AC   385 _ES	=	0x00ac
                           0000AF   386 _EA	=	0x00af
                           0000B8   387 _PX0	=	0x00b8
                           0000B9   388 _PT0	=	0x00b9
                           0000BA   389 _PX1	=	0x00ba
                           0000BB   390 _PT1	=	0x00bb
                           0000BC   391 _PS	=	0x00bc
                           000080   392 _P0_0	=	0x0080
                           000081   393 _P0_1	=	0x0081
                           000082   394 _P0_2	=	0x0082
                           000083   395 _P0_3	=	0x0083
                           000084   396 _P0_4	=	0x0084
                           000085   397 _P0_5	=	0x0085
                           000086   398 _P0_6	=	0x0086
                           000087   399 _P0_7	=	0x0087
                           000090   400 _P1_0	=	0x0090
                           000091   401 _P1_1	=	0x0091
                           000092   402 _P1_2	=	0x0092
                           000093   403 _P1_3	=	0x0093
                           000094   404 _P1_4	=	0x0094
                           000095   405 _P1_5	=	0x0095
                           000096   406 _P1_6	=	0x0096
                           000097   407 _P1_7	=	0x0097
                           0000A0   408 _P2_0	=	0x00a0
                           0000A1   409 _P2_1	=	0x00a1
                           0000A2   410 _P2_2	=	0x00a2
                           0000A3   411 _P2_3	=	0x00a3
                           0000A4   412 _P2_4	=	0x00a4
                           0000A5   413 _P2_5	=	0x00a5
                           0000A6   414 _P2_6	=	0x00a6
                           0000A7   415 _P2_7	=	0x00a7
                           0000B0   416 _P3_0	=	0x00b0
                           0000B1   417 _P3_1	=	0x00b1
                           0000B2   418 _P3_2	=	0x00b2
                           0000B3   419 _P3_3	=	0x00b3
                           0000B4   420 _P3_4	=	0x00b4
                           0000B5   421 _P3_5	=	0x00b5
                           0000B6   422 _P3_6	=	0x00b6
                           0000B7   423 _P3_7	=	0x00b7
                           0000B0   424 _RXD	=	0x00b0
                           0000B0   425 _RXD0	=	0x00b0
                           0000B1   426 _TXD	=	0x00b1
                           0000B1   427 _TXD0	=	0x00b1
                           0000B2   428 _INT0	=	0x00b2
                           0000B3   429 _INT1	=	0x00b3
                           0000B4   430 _T0	=	0x00b4
                           0000B5   431 _T1	=	0x00b5
                           0000B6   432 _WR	=	0x00b6
                           0000B7   433 _RD	=	0x00b7
                           0000D0   434 _P	=	0x00d0
                           0000D1   435 _F1	=	0x00d1
                           0000D2   436 _OV	=	0x00d2
                           0000D3   437 _RS0	=	0x00d3
                           0000D4   438 _RS1	=	0x00d4
                           0000D5   439 _F0	=	0x00d5
                           0000D6   440 _AC	=	0x00d6
                           0000D7   441 _CY	=	0x00d7
                           000098   442 _RI	=	0x0098
                           000099   443 _TI	=	0x0099
                           00009A   444 _RB8	=	0x009a
                           00009B   445 _TB8	=	0x009b
                           00009C   446 _REN	=	0x009c
                           00009D   447 _SM2	=	0x009d
                           00009E   448 _SM1	=	0x009e
                           00009F   449 _SM0	=	0x009f
                           000088   450 _IT0	=	0x0088
                           000089   451 _IE0	=	0x0089
                           00008A   452 _IT1	=	0x008a
                           00008B   453 _IE1	=	0x008b
                           00008C   454 _TR0	=	0x008c
                           00008D   455 _TF0	=	0x008d
                           00008E   456 _TR1	=	0x008e
                           00008F   457 _TF1	=	0x008f
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable register banks
                                    460 ;--------------------------------------------------------
                                    461 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        462 	.ds 8
                                    463 ;--------------------------------------------------------
                                    464 ; internal ram data
                                    465 ;--------------------------------------------------------
                                    466 	.area DSEG    (DATA)
                                    467 ;--------------------------------------------------------
                                    468 ; overlayable items in internal ram
                                    469 ;--------------------------------------------------------
                                    470 ;--------------------------------------------------------
                                    471 ; Stack segment in internal ram
                                    472 ;--------------------------------------------------------
                                    473 	.area	SSEG
      000000                        474 __start__stack:
      000000                        475 	.ds	1
                                    476 
                                    477 ;--------------------------------------------------------
                                    478 ; indirectly addressable internal ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area ISEG    (DATA)
                                    481 ;--------------------------------------------------------
                                    482 ; absolute internal ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area IABS    (ABS,DATA)
                                    485 	.area IABS    (ABS,DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; bit data
                                    488 ;--------------------------------------------------------
                                    489 	.area BSEG    (BIT)
                                    490 ;--------------------------------------------------------
                                    491 ; paged external ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area PSEG    (PAG,XDATA)
                                    494 ;--------------------------------------------------------
                                    495 ; external ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area XSEG    (XDATA)
      000000                        498 _SDCard::
      000000                        499 	.ds 42
      00002A                        500 _print_buffer_buff_65536_85:
      00002A                        501 	.ds 3
      00002D                        502 _read_mp3_files_fno_65536_91:
      00002D                        503 	.ds 22
      000043                        504 _read_mp3_files_dir_65536_91:
      000043                        505 	.ds 17
      000054                        506 _read_mp3_files_buff_65536_91:
      000054                        507 	.ds 64
      000094                        508 _read_mp3_files_br_65536_91:
      000094                        509 	.ds 2
                                    510 ;--------------------------------------------------------
                                    511 ; absolute external ram data
                                    512 ;--------------------------------------------------------
                                    513 	.area XABS    (ABS,XDATA)
                                    514 ;--------------------------------------------------------
                                    515 ; external initialized ram data
                                    516 ;--------------------------------------------------------
                                    517 	.area XISEG   (XDATA)
                                    518 	.area HOME    (CODE)
                                    519 	.area GSINIT0 (CODE)
                                    520 	.area GSINIT1 (CODE)
                                    521 	.area GSINIT2 (CODE)
                                    522 	.area GSINIT3 (CODE)
                                    523 	.area GSINIT4 (CODE)
                                    524 	.area GSINIT5 (CODE)
                                    525 	.area GSINIT  (CODE)
                                    526 	.area GSFINAL (CODE)
                                    527 	.area CSEG    (CODE)
                                    528 ;--------------------------------------------------------
                                    529 ; interrupt vector
                                    530 ;--------------------------------------------------------
                                    531 	.area HOME    (CODE)
      000000                        532 __interrupt_vect:
      000000 02r00r00         [24]  533 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  534 	reti
      000004                        535 	.ds	7
      00000B 02r00r00         [24]  536 	ljmp	_Timer0_IRQHandler
                                    537 ;--------------------------------------------------------
                                    538 ; global & static initialisations
                                    539 ;--------------------------------------------------------
                                    540 	.area HOME    (CODE)
                                    541 	.area GSINIT  (CODE)
                                    542 	.area GSFINAL (CODE)
                                    543 	.area GSINIT  (CODE)
                                    544 	.globl __sdcc_gsinit_startup
                                    545 	.globl __sdcc_program_startup
                                    546 	.globl __start__stack
                                    547 	.globl __mcs51_genXINIT
                                    548 	.globl __mcs51_genXRAMCLEAR
                                    549 	.globl __mcs51_genRAMCLEAR
                                    550 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  551 	ljmp	__sdcc_program_startup
                                    552 ;--------------------------------------------------------
                                    553 ; Home
                                    554 ;--------------------------------------------------------
                                    555 	.area HOME    (CODE)
                                    556 	.area HOME    (CODE)
      00000E                        557 __sdcc_program_startup:
      00000E 02r01rAB         [24]  558 	ljmp	_main
                                    559 ;	return from main will return to caller
                                    560 ;--------------------------------------------------------
                                    561 ; code
                                    562 ;--------------------------------------------------------
                                    563 	.area CSEG    (CODE)
                                    564 ;------------------------------------------------------------
                                    565 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    566 ;------------------------------------------------------------
                                    567 ;	main.c:32: _sdcc_external_startup()
                                    568 ;	-----------------------------------------
                                    569 ;	 function _sdcc_external_startup
                                    570 ;	-----------------------------------------
      000000                        571 __sdcc_external_startup:
                           000007   572 	ar7 = 0x07
                           000006   573 	ar6 = 0x06
                           000005   574 	ar5 = 0x05
                           000004   575 	ar4 = 0x04
                           000003   576 	ar3 = 0x03
                           000002   577 	ar2 = 0x02
                           000001   578 	ar1 = 0x01
                           000000   579 	ar0 = 0x00
                                    580 ;	main.c:35: AUXR |= (XRS1 | XRS0);
      000000 43 8E 0C         [24]  581 	orl	_AUXR,#0x0c
                                    582 ;	main.c:36: AUXR &= ~(XRS2);
      000003 53 8E EF         [24]  583 	anl	_AUXR,#0xef
                                    584 ;	main.c:38: init_serial();
      000006 12r00r00         [24]  585 	lcall	_init_serial
                                    586 ;	main.c:39: return 0;
      000009 90 00 00         [24]  587 	mov	dptr,#0x0000
                                    588 ;	main.c:40: }
      00000C 22               [24]  589 	ret
                                    590 ;------------------------------------------------------------
                                    591 ;Allocation info for local variables in function 'print_buffer'
                                    592 ;------------------------------------------------------------
                                    593 ;buff                      Allocated with name '_print_buffer_buff_65536_85'
                                    594 ;i                         Allocated with name '_print_buffer_i_131072_87'
                                    595 ;------------------------------------------------------------
                                    596 ;	main.c:42: void print_buffer(const BYTE *buff)
                                    597 ;	-----------------------------------------
                                    598 ;	 function print_buffer
                                    599 ;	-----------------------------------------
      00000D                        600 _print_buffer:
      00000D AF F0            [24]  601 	mov	r7,b
      00000F AE 83            [24]  602 	mov	r6,dph
      000011 E5 82            [12]  603 	mov	a,dpl
      000013 90r00r2A         [24]  604 	mov	dptr,#_print_buffer_buff_65536_85
      000016 F0               [24]  605 	movx	@dptr,a
      000017 EE               [12]  606 	mov	a,r6
      000018 A3               [24]  607 	inc	dptr
      000019 F0               [24]  608 	movx	@dptr,a
      00001A EF               [12]  609 	mov	a,r7
      00001B A3               [24]  610 	inc	dptr
      00001C F0               [24]  611 	movx	@dptr,a
                                    612 ;	main.c:44: for(int i=0;i<RD_BLOCK_SIZE;i++){
      00001D 90r00r2A         [24]  613 	mov	dptr,#_print_buffer_buff_65536_85
      000020 E0               [24]  614 	movx	a,@dptr
      000021 FD               [12]  615 	mov	r5,a
      000022 A3               [24]  616 	inc	dptr
      000023 E0               [24]  617 	movx	a,@dptr
      000024 FE               [12]  618 	mov	r6,a
      000025 A3               [24]  619 	inc	dptr
      000026 E0               [24]  620 	movx	a,@dptr
      000027 FF               [12]  621 	mov	r7,a
      000028 7B 00            [12]  622 	mov	r3,#0x00
      00002A 7C 00            [12]  623 	mov	r4,#0x00
      00002C                        624 00105$:
      00002C C3               [12]  625 	clr	c
      00002D EB               [12]  626 	mov	a,r3
      00002E 94 40            [12]  627 	subb	a,#0x40
      000030 EC               [12]  628 	mov	a,r4
      000031 64 80            [12]  629 	xrl	a,#0x80
      000033 94 80            [12]  630 	subb	a,#0x80
      000035 40 01            [24]  631 	jc	00122$
      000037 22               [24]  632 	ret
      000038                        633 00122$:
                                    634 ;	main.c:45: if(((i + 1) >> 4) == 0){
      000038 74 01            [12]  635 	mov	a,#0x01
      00003A 2B               [12]  636 	add	a,r3
      00003B F9               [12]  637 	mov	r1,a
      00003C E4               [12]  638 	clr	a
      00003D 3C               [12]  639 	addc	a,r4
      00003E C4               [12]  640 	swap	a
      00003F C9               [12]  641 	xch	a,r1
      000040 C4               [12]  642 	swap	a
      000041 54 0F            [12]  643 	anl	a,#0x0f
      000043 69               [12]  644 	xrl	a,r1
      000044 C9               [12]  645 	xch	a,r1
      000045 54 0F            [12]  646 	anl	a,#0x0f
      000047 C9               [12]  647 	xch	a,r1
      000048 69               [12]  648 	xrl	a,r1
      000049 C9               [12]  649 	xch	a,r1
      00004A 30 E3 02         [24]  650 	jnb	acc.3,00123$
      00004D 44 F0            [12]  651 	orl	a,#0xf0
      00004F                        652 00123$:
      00004F 49               [12]  653 	orl	a,r1
      000050 70 23            [24]  654 	jnz	00102$
                                    655 ;	main.c:46: printf_tiny("\r\n");
      000052 C0 07            [24]  656 	push	ar7
      000054 C0 06            [24]  657 	push	ar6
      000056 C0 05            [24]  658 	push	ar5
      000058 C0 04            [24]  659 	push	ar4
      00005A C0 03            [24]  660 	push	ar3
      00005C 74r00            [12]  661 	mov	a,#___str_0
      00005E C0 E0            [24]  662 	push	acc
      000060 74s00            [12]  663 	mov	a,#(___str_0 >> 8)
      000062 C0 E0            [24]  664 	push	acc
      000064 12r00r00         [24]  665 	lcall	_printf_tiny
      000067 15 81            [12]  666 	dec	sp
      000069 15 81            [12]  667 	dec	sp
      00006B D0 03            [24]  668 	pop	ar3
      00006D D0 04            [24]  669 	pop	ar4
      00006F D0 05            [24]  670 	pop	ar5
      000071 D0 06            [24]  671 	pop	ar6
      000073 D0 07            [24]  672 	pop	ar7
      000075                        673 00102$:
                                    674 ;	main.c:48: printf_tiny("%x ", buff[i]);
      000075 EB               [12]  675 	mov	a,r3
      000076 2D               [12]  676 	add	a,r5
      000077 F8               [12]  677 	mov	r0,a
      000078 EC               [12]  678 	mov	a,r4
      000079 3E               [12]  679 	addc	a,r6
      00007A F9               [12]  680 	mov	r1,a
      00007B 8F 02            [24]  681 	mov	ar2,r7
      00007D 88 82            [24]  682 	mov	dpl,r0
      00007F 89 83            [24]  683 	mov	dph,r1
      000081 8A F0            [24]  684 	mov	b,r2
      000083 12r00r00         [24]  685 	lcall	__gptrget
      000086 F8               [12]  686 	mov	r0,a
      000087 7A 00            [12]  687 	mov	r2,#0x00
      000089 C0 07            [24]  688 	push	ar7
      00008B C0 06            [24]  689 	push	ar6
      00008D C0 05            [24]  690 	push	ar5
      00008F C0 04            [24]  691 	push	ar4
      000091 C0 03            [24]  692 	push	ar3
      000093 C0 00            [24]  693 	push	ar0
      000095 C0 02            [24]  694 	push	ar2
      000097 74r03            [12]  695 	mov	a,#___str_1
      000099 C0 E0            [24]  696 	push	acc
      00009B 74s00            [12]  697 	mov	a,#(___str_1 >> 8)
      00009D C0 E0            [24]  698 	push	acc
      00009F 12r00r00         [24]  699 	lcall	_printf_tiny
      0000A2 E5 81            [12]  700 	mov	a,sp
      0000A4 24 FC            [12]  701 	add	a,#0xfc
      0000A6 F5 81            [12]  702 	mov	sp,a
      0000A8 D0 03            [24]  703 	pop	ar3
      0000AA D0 04            [24]  704 	pop	ar4
      0000AC D0 05            [24]  705 	pop	ar5
      0000AE D0 06            [24]  706 	pop	ar6
      0000B0 D0 07            [24]  707 	pop	ar7
                                    708 ;	main.c:44: for(int i=0;i<RD_BLOCK_SIZE;i++){
      0000B2 0B               [12]  709 	inc	r3
      0000B3 BB 00 01         [24]  710 	cjne	r3,#0x00,00125$
      0000B6 0C               [12]  711 	inc	r4
      0000B7                        712 00125$:
                                    713 ;	main.c:50: }
      0000B7 02r00r2C         [24]  714 	ljmp	00105$
                                    715 ;------------------------------------------------------------
                                    716 ;Allocation info for local variables in function 'read_mp3_files'
                                    717 ;------------------------------------------------------------
                                    718 ;res                       Allocated with name '_read_mp3_files_res_65536_91'
                                    719 ;fno                       Allocated with name '_read_mp3_files_fno_65536_91'
                                    720 ;dir                       Allocated with name '_read_mp3_files_dir_65536_91'
                                    721 ;buff                      Allocated with name '_read_mp3_files_buff_65536_91'
                                    722 ;br                        Allocated with name '_read_mp3_files_br_65536_91'
                                    723 ;------------------------------------------------------------
                                    724 ;	main.c:52: void read_mp3_files(void)
                                    725 ;	-----------------------------------------
                                    726 ;	 function read_mp3_files
                                    727 ;	-----------------------------------------
      0000BA                        728 _read_mp3_files:
                                    729 ;	main.c:60: res = pf_opendir(&dir, "/");
      0000BA 90r00r00         [24]  730 	mov	dptr,#_pf_opendir_PARM_2
      0000BD 74r07            [12]  731 	mov	a,#___str_2
      0000BF F0               [24]  732 	movx	@dptr,a
      0000C0 74s00            [12]  733 	mov	a,#(___str_2 >> 8)
      0000C2 A3               [24]  734 	inc	dptr
      0000C3 F0               [24]  735 	movx	@dptr,a
      0000C4 74 80            [12]  736 	mov	a,#0x80
      0000C6 A3               [24]  737 	inc	dptr
      0000C7 F0               [24]  738 	movx	@dptr,a
      0000C8 90r00r43         [24]  739 	mov	dptr,#_read_mp3_files_dir_65536_91
      0000CB 75 F0 00         [24]  740 	mov	b,#0x00
      0000CE 12r00r00         [24]  741 	lcall	_pf_opendir
      0000D1 E5 82            [12]  742 	mov	a,dpl
                                    743 ;	main.c:61: if (res == FR_OK) {
      0000D3 60 01            [24]  744 	jz	00145$
      0000D5 22               [24]  745 	ret
      0000D6                        746 00145$:
      0000D6                        747 00114$:
                                    748 ;	main.c:64: res = pf_readdir(&dir, &fno);
      0000D6 90r00r00         [24]  749 	mov	dptr,#_pf_readdir_PARM_2
      0000D9 74r2D            [12]  750 	mov	a,#_read_mp3_files_fno_65536_91
      0000DB F0               [24]  751 	movx	@dptr,a
      0000DC 74s00            [12]  752 	mov	a,#(_read_mp3_files_fno_65536_91 >> 8)
      0000DE A3               [24]  753 	inc	dptr
      0000DF F0               [24]  754 	movx	@dptr,a
      0000E0 E4               [12]  755 	clr	a
      0000E1 A3               [24]  756 	inc	dptr
      0000E2 F0               [24]  757 	movx	@dptr,a
      0000E3 90r00r43         [24]  758 	mov	dptr,#_read_mp3_files_dir_65536_91
      0000E6 75 F0 00         [24]  759 	mov	b,#0x00
      0000E9 12r00r00         [24]  760 	lcall	_pf_readdir
      0000EC E5 82            [12]  761 	mov	a,dpl
                                    762 ;	main.c:65: if (res != FR_OK || fno.fname[0] == 0){
      0000EE 70 06            [24]  763 	jnz	00101$
      0000F0 90r00r36         [24]  764 	mov	dptr,#(_read_mp3_files_fno_65536_91 + 0x0009)
      0000F3 E0               [24]  765 	movx	a,@dptr
      0000F4 70 10            [24]  766 	jnz	00102$
      0000F6                        767 00101$:
                                    768 ;	main.c:66: printf_tiny("No more files found\r\n");
      0000F6 74r09            [12]  769 	mov	a,#___str_3
      0000F8 C0 E0            [24]  770 	push	acc
      0000FA 74s00            [12]  771 	mov	a,#(___str_3 >> 8)
      0000FC C0 E0            [24]  772 	push	acc
      0000FE 12r00r00         [24]  773 	lcall	_printf_tiny
      000101 15 81            [12]  774 	dec	sp
      000103 15 81            [12]  775 	dec	sp
                                    776 ;	main.c:67: break;
      000105 22               [24]  777 	ret
      000106                        778 00102$:
                                    779 ;	main.c:69: printf_tiny("reading file /%s ...\r\n",fno.fname);
      000106 74r36            [12]  780 	mov	a,#(_read_mp3_files_fno_65536_91 + 0x0009)
      000108 C0 E0            [24]  781 	push	acc
      00010A 74s00            [12]  782 	mov	a,#((_read_mp3_files_fno_65536_91 + 0x0009) >> 8)
      00010C C0 E0            [24]  783 	push	acc
      00010E E4               [12]  784 	clr	a
      00010F C0 E0            [24]  785 	push	acc
      000111 74r1F            [12]  786 	mov	a,#___str_4
      000113 C0 E0            [24]  787 	push	acc
      000115 74s00            [12]  788 	mov	a,#(___str_4 >> 8)
      000117 C0 E0            [24]  789 	push	acc
      000119 12r00r00         [24]  790 	lcall	_printf_tiny
      00011C E5 81            [12]  791 	mov	a,sp
      00011E 24 FB            [12]  792 	add	a,#0xfb
      000120 F5 81            [12]  793 	mov	sp,a
                                    794 ;	main.c:72: res = pf_open(fno.fname);
      000122 90r00r36         [24]  795 	mov	dptr,#(_read_mp3_files_fno_65536_91 + 0x0009)
      000125 75 F0 00         [24]  796 	mov	b,#0x00
      000128 12r00r00         [24]  797 	lcall	_pf_open
      00012B E5 82            [12]  798 	mov	a,dpl
                                    799 ;	main.c:73: if (res != FR_OK){
      00012D 60 1D            [24]  800 	jz	00108$
                                    801 ;	main.c:74: printf_tiny("Error: failed to open %s\r\n", fno.fname);
      00012F 74r36            [12]  802 	mov	a,#(_read_mp3_files_fno_65536_91 + 0x0009)
      000131 C0 E0            [24]  803 	push	acc
      000133 74s00            [12]  804 	mov	a,#((_read_mp3_files_fno_65536_91 + 0x0009) >> 8)
      000135 C0 E0            [24]  805 	push	acc
      000137 E4               [12]  806 	clr	a
      000138 C0 E0            [24]  807 	push	acc
      00013A 74r36            [12]  808 	mov	a,#___str_5
      00013C C0 E0            [24]  809 	push	acc
      00013E 74s00            [12]  810 	mov	a,#(___str_5 >> 8)
      000140 C0 E0            [24]  811 	push	acc
      000142 12r00r00         [24]  812 	lcall	_printf_tiny
      000145 E5 81            [12]  813 	mov	a,sp
      000147 24 FB            [12]  814 	add	a,#0xfb
      000149 F5 81            [12]  815 	mov	sp,a
                                    816 ;	main.c:75: break;
                                    817 ;	main.c:79: do{
      00014B 22               [24]  818 	ret
      00014C                        819 00108$:
                                    820 ;	main.c:81: res = pf_read(buff, RD_BLOCK_SIZE, &br);
      00014C 90r00r00         [24]  821 	mov	dptr,#_pf_read_PARM_2
      00014F 74 40            [12]  822 	mov	a,#0x40
      000151 F0               [24]  823 	movx	@dptr,a
      000152 E4               [12]  824 	clr	a
      000153 A3               [24]  825 	inc	dptr
      000154 F0               [24]  826 	movx	@dptr,a
      000155 90r00r00         [24]  827 	mov	dptr,#_pf_read_PARM_3
      000158 74r94            [12]  828 	mov	a,#_read_mp3_files_br_65536_91
      00015A F0               [24]  829 	movx	@dptr,a
      00015B 74s00            [12]  830 	mov	a,#(_read_mp3_files_br_65536_91 >> 8)
      00015D A3               [24]  831 	inc	dptr
      00015E F0               [24]  832 	movx	@dptr,a
      00015F E4               [12]  833 	clr	a
      000160 A3               [24]  834 	inc	dptr
      000161 F0               [24]  835 	movx	@dptr,a
      000162 90r00r54         [24]  836 	mov	dptr,#_read_mp3_files_buff_65536_91
      000165 75 F0 00         [24]  837 	mov	b,#0x00
      000168 12r00r00         [24]  838 	lcall	_pf_read
      00016B E5 82            [12]  839 	mov	a,dpl
                                    840 ;	main.c:83: if(res != FR_OK){
      00016D 60 1F            [24]  841 	jz	00107$
                                    842 ;	main.c:84: printf_tiny("Error: failed to read %s\r\n", fno.fname);
      00016F 74r36            [12]  843 	mov	a,#(_read_mp3_files_fno_65536_91 + 0x0009)
      000171 C0 E0            [24]  844 	push	acc
      000173 74s00            [12]  845 	mov	a,#((_read_mp3_files_fno_65536_91 + 0x0009) >> 8)
      000175 C0 E0            [24]  846 	push	acc
      000177 E4               [12]  847 	clr	a
      000178 C0 E0            [24]  848 	push	acc
      00017A 74r51            [12]  849 	mov	a,#___str_6
      00017C C0 E0            [24]  850 	push	acc
      00017E 74s00            [12]  851 	mov	a,#(___str_6 >> 8)
      000180 C0 E0            [24]  852 	push	acc
      000182 12r00r00         [24]  853 	lcall	_printf_tiny
      000185 E5 81            [12]  854 	mov	a,sp
      000187 24 FB            [12]  855 	add	a,#0xfb
      000189 F5 81            [12]  856 	mov	sp,a
                                    857 ;	main.c:85: break;
      00018B 02r00rD6         [24]  858 	ljmp	00114$
      00018E                        859 00107$:
                                    860 ;	main.c:88: print_buffer((const BYTE *)buff);
      00018E 90r00r54         [24]  861 	mov	dptr,#_read_mp3_files_buff_65536_91
      000191 75 F0 00         [24]  862 	mov	b,#0x00
      000194 12r00r0D         [24]  863 	lcall	_print_buffer
                                    864 ;	main.c:90: }while(br == RD_BLOCK_SIZE); //exit when reached EOF
      000197 90r00r94         [24]  865 	mov	dptr,#_read_mp3_files_br_65536_91
      00019A E0               [24]  866 	movx	a,@dptr
      00019B FE               [12]  867 	mov	r6,a
      00019C A3               [24]  868 	inc	dptr
      00019D E0               [24]  869 	movx	a,@dptr
      00019E FF               [12]  870 	mov	r7,a
      00019F BE 40 05         [24]  871 	cjne	r6,#0x40,00150$
      0001A2 BF 00 02         [24]  872 	cjne	r7,#0x00,00150$
      0001A5 80 A5            [24]  873 	sjmp	00108$
      0001A7                        874 00150$:
      0001A7 02r00rD6         [24]  875 	ljmp	00114$
                                    876 ;	main.c:94: return;
                                    877 ;	main.c:95: }
      0001AA 22               [24]  878 	ret
                                    879 ;------------------------------------------------------------
                                    880 ;Allocation info for local variables in function 'main'
                                    881 ;------------------------------------------------------------
                                    882 ;	main.c:98: void main(void)
                                    883 ;	-----------------------------------------
                                    884 ;	 function main
                                    885 ;	-----------------------------------------
      0001AB                        886 _main:
                                    887 ;	main.c:101: init_timer0();
      0001AB 12r00r00         [24]  888 	lcall	_init_timer0
                                    889 ;	main.c:102: lcdinit();
      0001AE 12r00r00         [24]  890 	lcall	_lcdinit
                                    891 ;	main.c:103: spi_init();
      0001B1 12r00r00         [24]  892 	lcall	_spi_init
                                    893 ;	main.c:104: reset_DAC();
      0001B4 12r00r00         [24]  894 	lcall	_reset_DAC
                                    895 ;	main.c:106: write_to_DAC_and_EEPROM(0);
      0001B7 90 00 00         [24]  896 	mov	dptr,#0x0000
      0001BA 12r00r00         [24]  897 	lcall	_write_to_DAC_and_EEPROM
                                    898 ;	main.c:109: if( pf_mount(&SDCard))
      0001BD 90r00r00         [24]  899 	mov	dptr,#_SDCard
      0001C0 75 F0 00         [24]  900 	mov	b,#0x00
      0001C3 12r00r00         [24]  901 	lcall	_pf_mount
      0001C6 E5 82            [12]  902 	mov	a,dpl
      0001C8 60 11            [24]  903 	jz	00105$
                                    904 ;	main.c:111: printf_tiny("Couldn't mount drive...\r\n");
      0001CA 74r6C            [12]  905 	mov	a,#___str_7
      0001CC C0 E0            [24]  906 	push	acc
      0001CE 74s00            [12]  907 	mov	a,#(___str_7 >> 8)
      0001D0 C0 E0            [24]  908 	push	acc
      0001D2 12r00r00         [24]  909 	lcall	_printf_tiny
      0001D5 15 81            [12]  910 	dec	sp
      0001D7 15 81            [12]  911 	dec	sp
                                    912 ;	main.c:112: while( 1 );
      0001D9                        913 00102$:
      0001D9 80 FE            [24]  914 	sjmp	00102$
      0001DB                        915 00105$:
                                    916 ;	main.c:115: printf_tiny("SD card mounted\r\n");
      0001DB 74r86            [12]  917 	mov	a,#___str_8
      0001DD C0 E0            [24]  918 	push	acc
      0001DF 74s00            [12]  919 	mov	a,#(___str_8 >> 8)
      0001E1 C0 E0            [24]  920 	push	acc
      0001E3 12r00r00         [24]  921 	lcall	_printf_tiny
      0001E6 15 81            [12]  922 	dec	sp
      0001E8 15 81            [12]  923 	dec	sp
                                    924 ;	main.c:118: if( disk_initialize( ) & STA_NOINIT )
      0001EA 12r00r00         [24]  925 	lcall	_disk_initialize
      0001ED E5 82            [12]  926 	mov	a,dpl
      0001EF 30 E0 63         [24]  927 	jnb	acc.0,00115$
                                    928 ;	main.c:120: switch( get_card_type() )
      0001F2 12r00r00         [24]  929 	lcall	_get_card_type
      0001F5 AE 82            [24]  930 	mov	r6,dpl
      0001F7 AF 83            [24]  931 	mov	r7,dph
      0001F9 BE 00 05         [24]  932 	cjne	r6,#0x00,00155$
      0001FC BF 00 02         [24]  933 	cjne	r7,#0x00,00155$
      0001FF 80 10            [24]  934 	sjmp	00106$
      000201                        935 00155$:
      000201 BE 01 05         [24]  936 	cjne	r6,#0x01,00156$
      000204 BF 00 02         [24]  937 	cjne	r7,#0x00,00156$
      000207 80 19            [24]  938 	sjmp	00107$
      000209                        939 00156$:
                                    940 ;	main.c:122: case 0 :
      000209 BE 02 38         [24]  941 	cjne	r6,#0x02,00109$
      00020C BF 00 35         [24]  942 	cjne	r7,#0x00,00109$
      00020F 80 22            [24]  943 	sjmp	00108$
      000211                        944 00106$:
                                    945 ;	main.c:123: printf_tiny("Couldn't find SD card\r\n");
      000211 74r98            [12]  946 	mov	a,#___str_9
      000213 C0 E0            [24]  947 	push	acc
      000215 74s00            [12]  948 	mov	a,#(___str_9 >> 8)
      000217 C0 E0            [24]  949 	push	acc
      000219 12r00r00         [24]  950 	lcall	_printf_tiny
      00021C 15 81            [12]  951 	dec	sp
      00021E 15 81            [12]  952 	dec	sp
                                    953 ;	main.c:124: break;
                                    954 ;	main.c:125: case 1 :
      000220 80 31            [24]  955 	sjmp	00112$
      000222                        956 00107$:
                                    957 ;	main.c:126: printf_tiny("Card type is MMC - Can't use this type\r\n");
      000222 74rB0            [12]  958 	mov	a,#___str_10
      000224 C0 E0            [24]  959 	push	acc
      000226 74s00            [12]  960 	mov	a,#(___str_10 >> 8)
      000228 C0 E0            [24]  961 	push	acc
      00022A 12r00r00         [24]  962 	lcall	_printf_tiny
      00022D 15 81            [12]  963 	dec	sp
      00022F 15 81            [12]  964 	dec	sp
                                    965 ;	main.c:127: break;
                                    966 ;	main.c:128: case 2 :
      000231 80 20            [24]  967 	sjmp	00112$
      000233                        968 00108$:
                                    969 ;	main.c:129: printf_tiny("Couldn't initialize SD Card drive...\r\n");
      000233 74rD9            [12]  970 	mov	a,#___str_11
      000235 C0 E0            [24]  971 	push	acc
      000237 74s00            [12]  972 	mov	a,#(___str_11 >> 8)
      000239 C0 E0            [24]  973 	push	acc
      00023B 12r00r00         [24]  974 	lcall	_printf_tiny
      00023E 15 81            [12]  975 	dec	sp
      000240 15 81            [12]  976 	dec	sp
                                    977 ;	main.c:130: break;
                                    978 ;	main.c:131: default :
      000242 80 0F            [24]  979 	sjmp	00112$
      000244                        980 00109$:
                                    981 ;	main.c:132: printf_tiny("Unknown Card Type error...\r\n");
      000244 74r00            [12]  982 	mov	a,#___str_12
      000246 C0 E0            [24]  983 	push	acc
      000248 74s01            [12]  984 	mov	a,#(___str_12 >> 8)
      00024A C0 E0            [24]  985 	push	acc
      00024C 12r00r00         [24]  986 	lcall	_printf_tiny
      00024F 15 81            [12]  987 	dec	sp
      000251 15 81            [12]  988 	dec	sp
                                    989 ;	main.c:135: while( 1 );
      000253                        990 00112$:
      000253 80 FE            [24]  991 	sjmp	00112$
      000255                        992 00115$:
                                    993 ;	main.c:138: printf_tiny("SD card initialized\r\n");
      000255 74r1D            [12]  994 	mov	a,#___str_13
      000257 C0 E0            [24]  995 	push	acc
      000259 74s01            [12]  996 	mov	a,#(___str_13 >> 8)
      00025B C0 E0            [24]  997 	push	acc
      00025D 12r00r00         [24]  998 	lcall	_printf_tiny
      000260 15 81            [12]  999 	dec	sp
      000262 15 81            [12] 1000 	dec	sp
                                   1001 ;	main.c:141: printf_tiny("Finished reading files\r\n");
      000264 74r33            [12] 1002 	mov	a,#___str_14
      000266 C0 E0            [24] 1003 	push	acc
      000268 74s01            [12] 1004 	mov	a,#(___str_14 >> 8)
      00026A C0 E0            [24] 1005 	push	acc
      00026C 12r00r00         [24] 1006 	lcall	_printf_tiny
      00026F 15 81            [12] 1007 	dec	sp
      000271 15 81            [12] 1008 	dec	sp
                                   1009 ;	main.c:142: read_mp3_files();
      000273 12r00rBA         [24] 1010 	lcall	_read_mp3_files
                                   1011 ;	main.c:143: while( 1 );
      000276                       1012 00117$:
                                   1013 ;	main.c:144: }
      000276 80 FE            [24] 1014 	sjmp	00117$
                                   1015 	.area CSEG    (CODE)
                                   1016 	.area CONST   (CODE)
                                   1017 	.area CONST   (CODE)
      000000                       1018 ___str_0:
      000000 0D                    1019 	.db 0x0d
      000001 0A                    1020 	.db 0x0a
      000002 00                    1021 	.db 0x00
                                   1022 	.area CSEG    (CODE)
                                   1023 	.area CONST   (CODE)
      000003                       1024 ___str_1:
      000003 25 78 20              1025 	.ascii "%x "
      000006 00                    1026 	.db 0x00
                                   1027 	.area CSEG    (CODE)
                                   1028 	.area CONST   (CODE)
      000007                       1029 ___str_2:
      000007 2F                    1030 	.ascii "/"
      000008 00                    1031 	.db 0x00
                                   1032 	.area CSEG    (CODE)
                                   1033 	.area CONST   (CODE)
      000009                       1034 ___str_3:
      000009 4E 6F 20 6D 6F 72 65  1035 	.ascii "No more files found"
             20 66 69 6C 65 73 20
             66 6F 75 6E 64
      00001C 0D                    1036 	.db 0x0d
      00001D 0A                    1037 	.db 0x0a
      00001E 00                    1038 	.db 0x00
                                   1039 	.area CSEG    (CODE)
                                   1040 	.area CONST   (CODE)
      00001F                       1041 ___str_4:
      00001F 72 65 61 64 69 6E 67  1042 	.ascii "reading file /%s ..."
             20 66 69 6C 65 20 2F
             25 73 20 2E 2E 2E
      000033 0D                    1043 	.db 0x0d
      000034 0A                    1044 	.db 0x0a
      000035 00                    1045 	.db 0x00
                                   1046 	.area CSEG    (CODE)
                                   1047 	.area CONST   (CODE)
      000036                       1048 ___str_5:
      000036 45 72 72 6F 72 3A 20  1049 	.ascii "Error: failed to open %s"
             66 61 69 6C 65 64 20
             74 6F 20 6F 70 65 6E
             20 25 73
      00004E 0D                    1050 	.db 0x0d
      00004F 0A                    1051 	.db 0x0a
      000050 00                    1052 	.db 0x00
                                   1053 	.area CSEG    (CODE)
                                   1054 	.area CONST   (CODE)
      000051                       1055 ___str_6:
      000051 45 72 72 6F 72 3A 20  1056 	.ascii "Error: failed to read %s"
             66 61 69 6C 65 64 20
             74 6F 20 72 65 61 64
             20 25 73
      000069 0D                    1057 	.db 0x0d
      00006A 0A                    1058 	.db 0x0a
      00006B 00                    1059 	.db 0x00
                                   1060 	.area CSEG    (CODE)
                                   1061 	.area CONST   (CODE)
      00006C                       1062 ___str_7:
      00006C 43 6F 75 6C 64 6E 27  1063 	.ascii "Couldn't mount drive..."
             74 20 6D 6F 75 6E 74
             20 64 72 69 76 65 2E
             2E 2E
      000083 0D                    1064 	.db 0x0d
      000084 0A                    1065 	.db 0x0a
      000085 00                    1066 	.db 0x00
                                   1067 	.area CSEG    (CODE)
                                   1068 	.area CONST   (CODE)
      000086                       1069 ___str_8:
      000086 53 44 20 63 61 72 64  1070 	.ascii "SD card mounted"
             20 6D 6F 75 6E 74 65
             64
      000095 0D                    1071 	.db 0x0d
      000096 0A                    1072 	.db 0x0a
      000097 00                    1073 	.db 0x00
                                   1074 	.area CSEG    (CODE)
                                   1075 	.area CONST   (CODE)
      000098                       1076 ___str_9:
      000098 43 6F 75 6C 64 6E 27  1077 	.ascii "Couldn't find SD card"
             74 20 66 69 6E 64 20
             53 44 20 63 61 72 64
      0000AD 0D                    1078 	.db 0x0d
      0000AE 0A                    1079 	.db 0x0a
      0000AF 00                    1080 	.db 0x00
                                   1081 	.area CSEG    (CODE)
                                   1082 	.area CONST   (CODE)
      0000B0                       1083 ___str_10:
      0000B0 43 61 72 64 20 74 79  1084 	.ascii "Card type is MMC - Can't use this type"
             70 65 20 69 73 20 4D
             4D 43 20 2D 20 43 61
             6E 27 74 20 75 73 65
             20 74 68 69 73 20 74
             79 70 65
      0000D6 0D                    1085 	.db 0x0d
      0000D7 0A                    1086 	.db 0x0a
      0000D8 00                    1087 	.db 0x00
                                   1088 	.area CSEG    (CODE)
                                   1089 	.area CONST   (CODE)
      0000D9                       1090 ___str_11:
      0000D9 43 6F 75 6C 64 6E 27  1091 	.ascii "Couldn't initialize SD Card drive..."
             74 20 69 6E 69 74 69
             61 6C 69 7A 65 20 53
             44 20 43 61 72 64 20
             64 72 69 76 65 2E 2E
             2E
      0000FD 0D                    1092 	.db 0x0d
      0000FE 0A                    1093 	.db 0x0a
      0000FF 00                    1094 	.db 0x00
                                   1095 	.area CSEG    (CODE)
                                   1096 	.area CONST   (CODE)
      000100                       1097 ___str_12:
      000100 55 6E 6B 6E 6F 77 6E  1098 	.ascii "Unknown Card Type error..."
             20 43 61 72 64 20 54
             79 70 65 20 65 72 72
             6F 72 2E 2E 2E
      00011A 0D                    1099 	.db 0x0d
      00011B 0A                    1100 	.db 0x0a
      00011C 00                    1101 	.db 0x00
                                   1102 	.area CSEG    (CODE)
                                   1103 	.area CONST   (CODE)
      00011D                       1104 ___str_13:
      00011D 53 44 20 63 61 72 64  1105 	.ascii "SD card initialized"
             20 69 6E 69 74 69 61
             6C 69 7A 65 64
      000130 0D                    1106 	.db 0x0d
      000131 0A                    1107 	.db 0x0a
      000132 00                    1108 	.db 0x00
                                   1109 	.area CSEG    (CODE)
                                   1110 	.area CONST   (CODE)
      000133                       1111 ___str_14:
      000133 46 69 6E 69 73 68 65  1112 	.ascii "Finished reading files"
             64 20 72 65 61 64 69
             6E 67 20 66 69 6C 65
             73
      000149 0D                    1113 	.db 0x0d
      00014A 0A                    1114 	.db 0x0a
      00014B 00                    1115 	.db 0x00
                                   1116 	.area CSEG    (CODE)
                                   1117 	.area XINIT   (CODE)
                                   1118 	.area CABS    (ABS,CODE)
