                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module pff
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _disk_readp
                                     12 	.globl _disk_initialize
                                     13 	.globl _pf_mount
                                     14 	.globl _pf_open
                                     15 	.globl _pf_read
                                     16 	.globl _pf_opendir
                                     17 	.globl _pf_readdir
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; special function bits
                                     25 ;--------------------------------------------------------
                                     26 	.area RSEG    (ABS,DATA)
      000000                         27 	.org 0x0000
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable register banks
                                     30 ;--------------------------------------------------------
                                     31 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         32 	.ds 8
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable bit register bank
                                     35 ;--------------------------------------------------------
                                     36 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         37 bits:
      000000                         38 	.ds 1
                           008000    39 	b0 = bits[0]
                           008100    40 	b1 = bits[1]
                           008200    41 	b2 = bits[2]
                           008300    42 	b3 = bits[3]
                           008400    43 	b4 = bits[4]
                           008500    44 	b5 = bits[5]
                           008600    45 	b6 = bits[6]
                           008700    46 	b7 = bits[7]
                                     47 ;--------------------------------------------------------
                                     48 ; internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DSEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; overlayable items in internal ram
                                     53 ;--------------------------------------------------------
                                     54 ;--------------------------------------------------------
                                     55 ; indirectly addressable internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area ISEG    (DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute internal ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area IABS    (ABS,DATA)
                                     62 	.area IABS    (ABS,DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; bit data
                                     65 ;--------------------------------------------------------
                                     66 	.area BSEG    (BIT)
                                     67 ;--------------------------------------------------------
                                     68 ; paged external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area PSEG    (PAG,XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XSEG    (XDATA)
      000000                         75 _FatFs:
      000000                         76 	.ds 3
                                     77 ;--------------------------------------------------------
                                     78 ; absolute external ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XABS    (ABS,XDATA)
                                     81 ;--------------------------------------------------------
                                     82 ; external initialized ram data
                                     83 ;--------------------------------------------------------
                                     84 	.area XISEG   (XDATA)
                                     85 	.area HOME    (CODE)
                                     86 	.area GSINIT0 (CODE)
                                     87 	.area GSINIT1 (CODE)
                                     88 	.area GSINIT2 (CODE)
                                     89 	.area GSINIT3 (CODE)
                                     90 	.area GSINIT4 (CODE)
                                     91 	.area GSINIT5 (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area CSEG    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; global & static initialisations
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area GSINIT  (CODE)
                                    100 	.area GSFINAL (CODE)
                                    101 	.area GSINIT  (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; Home
                                    104 ;--------------------------------------------------------
                                    105 	.area HOME    (CODE)
                                    106 	.area HOME    (CODE)
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CSEG    (CODE)
                                    111 ;------------------------------------------------------------
                                    112 ;Allocation info for local variables in function 'ld_word'
                                    113 ;------------------------------------------------------------
                                    114 ;ptr                       Allocated to registers r5 r6 r7 
                                    115 ;rv                        Allocated to registers r2 r4 
                                    116 ;------------------------------------------------------------
                                    117 ;	pff\source\pff.c:384: static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
                                    118 ;	-----------------------------------------
                                    119 ;	 function ld_word
                                    120 ;	-----------------------------------------
      000000                        121 _ld_word:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
      000000 AD 82            [24]  130 	mov	r5,dpl
      000002 AE 83            [24]  131 	mov	r6,dph
      000004 AF F0            [24]  132 	mov	r7,b
                                    133 ;	pff\source\pff.c:388: rv = ptr[1];
      000006 74 01            [12]  134 	mov	a,#0x01
      000008 2D               [12]  135 	add	a,r5
      000009 FA               [12]  136 	mov	r2,a
      00000A E4               [12]  137 	clr	a
      00000B 3E               [12]  138 	addc	a,r6
      00000C FB               [12]  139 	mov	r3,a
      00000D 8F 04            [24]  140 	mov	ar4,r7
      00000F 8A 82            [24]  141 	mov	dpl,r2
      000011 8B 83            [24]  142 	mov	dph,r3
      000013 8C F0            [24]  143 	mov	b,r4
      000015 12r00r00         [24]  144 	lcall	__gptrget
                                    145 ;	pff\source\pff.c:389: rv = rv << 8 | ptr[0];
      000018 FC               [12]  146 	mov	r4,a
      000019 7A 00            [12]  147 	mov	r2,#0x00
      00001B 8D 82            [24]  148 	mov	dpl,r5
      00001D 8E 83            [24]  149 	mov	dph,r6
      00001F 8F F0            [24]  150 	mov	b,r7
      000021 12r00r00         [24]  151 	lcall	__gptrget
      000024 7F 00            [12]  152 	mov	r7,#0x00
      000026 42 02            [12]  153 	orl	ar2,a
      000028 EF               [12]  154 	mov	a,r7
      000029 42 04            [12]  155 	orl	ar4,a
                                    156 ;	pff\source\pff.c:390: return rv;
      00002B 8A 82            [24]  157 	mov	dpl,r2
      00002D 8C 83            [24]  158 	mov	dph,r4
                                    159 ;	pff\source\pff.c:391: }
      00002F 22               [24]  160 	ret
                                    161 ;------------------------------------------------------------
                                    162 ;Allocation info for local variables in function 'ld_dword'
                                    163 ;------------------------------------------------------------
                                    164 ;ptr                       Allocated to stack - _bp +1
                                    165 ;rv                        Allocated to registers r2 r7 r6 r5 
                                    166 ;sloc0                     Allocated to stack - _bp +4
                                    167 ;------------------------------------------------------------
                                    168 ;	pff\source\pff.c:393: static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
                                    169 ;	-----------------------------------------
                                    170 ;	 function ld_dword
                                    171 ;	-----------------------------------------
      000030                        172 _ld_dword:
      000030 C0*00            [24]  173 	push	_bp
      000032 85 81*00         [24]  174 	mov	_bp,sp
      000035 C0 82            [24]  175 	push	dpl
      000037 C0 83            [24]  176 	push	dph
      000039 C0 F0            [24]  177 	push	b
      00003B E5 81            [12]  178 	mov	a,sp
      00003D 24 04            [12]  179 	add	a,#0x04
      00003F F5 81            [12]  180 	mov	sp,a
                                    181 ;	pff\source\pff.c:397: rv = ptr[3];
      000041 A8*00            [24]  182 	mov	r0,_bp
      000043 08               [12]  183 	inc	r0
      000044 74 03            [12]  184 	mov	a,#0x03
      000046 26               [12]  185 	add	a,@r0
      000047 FA               [12]  186 	mov	r2,a
      000048 E4               [12]  187 	clr	a
      000049 08               [12]  188 	inc	r0
      00004A 36               [12]  189 	addc	a,@r0
      00004B FB               [12]  190 	mov	r3,a
      00004C 08               [12]  191 	inc	r0
      00004D 86 04            [24]  192 	mov	ar4,@r0
      00004F 8A 82            [24]  193 	mov	dpl,r2
      000051 8B 83            [24]  194 	mov	dph,r3
      000053 8C F0            [24]  195 	mov	b,r4
      000055 12r00r00         [24]  196 	lcall	__gptrget
      000058 FA               [12]  197 	mov	r2,a
                                    198 ;	pff\source\pff.c:398: rv = rv << 8 | ptr[2];
      000059 E4               [12]  199 	clr	a
      00005A FB               [12]  200 	mov	r3,a
      00005B FC               [12]  201 	mov	r4,a
      00005C E5*00            [12]  202 	mov	a,_bp
      00005E 24 04            [12]  203 	add	a,#0x04
      000060 F8               [12]  204 	mov	r0,a
      000061 08               [12]  205 	inc	r0
      000062 08               [12]  206 	inc	r0
      000063 08               [12]  207 	inc	r0
      000064 A6 04            [24]  208 	mov	@r0,ar4
      000066 18               [12]  209 	dec	r0
      000067 A6 03            [24]  210 	mov	@r0,ar3
      000069 18               [12]  211 	dec	r0
      00006A A6 02            [24]  212 	mov	@r0,ar2
      00006C 18               [12]  213 	dec	r0
      00006D 76 00            [12]  214 	mov	@r0,#0x00
      00006F A8*00            [24]  215 	mov	r0,_bp
      000071 08               [12]  216 	inc	r0
      000072 74 02            [12]  217 	mov	a,#0x02
      000074 26               [12]  218 	add	a,@r0
      000075 FD               [12]  219 	mov	r5,a
      000076 E4               [12]  220 	clr	a
      000077 08               [12]  221 	inc	r0
      000078 36               [12]  222 	addc	a,@r0
      000079 FE               [12]  223 	mov	r6,a
      00007A 08               [12]  224 	inc	r0
      00007B 86 07            [24]  225 	mov	ar7,@r0
      00007D 8D 82            [24]  226 	mov	dpl,r5
      00007F 8E 83            [24]  227 	mov	dph,r6
      000081 8F F0            [24]  228 	mov	b,r7
      000083 12r00r00         [24]  229 	lcall	__gptrget
      000086 FD               [12]  230 	mov	r5,a
      000087 E4               [12]  231 	clr	a
      000088 FF               [12]  232 	mov	r7,a
      000089 FE               [12]  233 	mov	r6,a
      00008A FC               [12]  234 	mov	r4,a
      00008B E5*00            [12]  235 	mov	a,_bp
      00008D 24 04            [12]  236 	add	a,#0x04
      00008F F8               [12]  237 	mov	r0,a
      000090 E6               [12]  238 	mov	a,@r0
      000091 42 05            [12]  239 	orl	ar5,a
      000093 08               [12]  240 	inc	r0
      000094 E6               [12]  241 	mov	a,@r0
      000095 42 07            [12]  242 	orl	ar7,a
      000097 08               [12]  243 	inc	r0
      000098 E6               [12]  244 	mov	a,@r0
      000099 42 06            [12]  245 	orl	ar6,a
      00009B 08               [12]  246 	inc	r0
      00009C E6               [12]  247 	mov	a,@r0
      00009D 42 04            [12]  248 	orl	ar4,a
                                    249 ;	pff\source\pff.c:399: rv = rv << 8 | ptr[1];
      00009F E5*00            [12]  250 	mov	a,_bp
      0000A1 24 04            [12]  251 	add	a,#0x04
      0000A3 F8               [12]  252 	mov	r0,a
      0000A4 08               [12]  253 	inc	r0
      0000A5 08               [12]  254 	inc	r0
      0000A6 08               [12]  255 	inc	r0
      0000A7 A6 06            [24]  256 	mov	@r0,ar6
      0000A9 18               [12]  257 	dec	r0
      0000AA A6 07            [24]  258 	mov	@r0,ar7
      0000AC 18               [12]  259 	dec	r0
      0000AD A6 05            [24]  260 	mov	@r0,ar5
      0000AF 18               [12]  261 	dec	r0
      0000B0 76 00            [12]  262 	mov	@r0,#0x00
      0000B2 A8*00            [24]  263 	mov	r0,_bp
      0000B4 08               [12]  264 	inc	r0
      0000B5 74 01            [12]  265 	mov	a,#0x01
      0000B7 26               [12]  266 	add	a,@r0
      0000B8 FA               [12]  267 	mov	r2,a
      0000B9 E4               [12]  268 	clr	a
      0000BA 08               [12]  269 	inc	r0
      0000BB 36               [12]  270 	addc	a,@r0
      0000BC FB               [12]  271 	mov	r3,a
      0000BD 08               [12]  272 	inc	r0
      0000BE 86 07            [24]  273 	mov	ar7,@r0
      0000C0 8A 82            [24]  274 	mov	dpl,r2
      0000C2 8B 83            [24]  275 	mov	dph,r3
      0000C4 8F F0            [24]  276 	mov	b,r7
      0000C6 12r00r00         [24]  277 	lcall	__gptrget
      0000C9 FA               [12]  278 	mov	r2,a
      0000CA E4               [12]  279 	clr	a
      0000CB FF               [12]  280 	mov	r7,a
      0000CC FE               [12]  281 	mov	r6,a
      0000CD FD               [12]  282 	mov	r5,a
      0000CE E5*00            [12]  283 	mov	a,_bp
      0000D0 24 04            [12]  284 	add	a,#0x04
      0000D2 F8               [12]  285 	mov	r0,a
      0000D3 E6               [12]  286 	mov	a,@r0
      0000D4 42 02            [12]  287 	orl	ar2,a
      0000D6 08               [12]  288 	inc	r0
      0000D7 E6               [12]  289 	mov	a,@r0
      0000D8 42 07            [12]  290 	orl	ar7,a
      0000DA 08               [12]  291 	inc	r0
      0000DB E6               [12]  292 	mov	a,@r0
      0000DC 42 06            [12]  293 	orl	ar6,a
      0000DE 08               [12]  294 	inc	r0
      0000DF E6               [12]  295 	mov	a,@r0
      0000E0 42 05            [12]  296 	orl	ar5,a
                                    297 ;	pff\source\pff.c:400: rv = rv << 8 | ptr[0];
      0000E2 E5*00            [12]  298 	mov	a,_bp
      0000E4 24 04            [12]  299 	add	a,#0x04
      0000E6 F8               [12]  300 	mov	r0,a
      0000E7 08               [12]  301 	inc	r0
      0000E8 08               [12]  302 	inc	r0
      0000E9 08               [12]  303 	inc	r0
      0000EA A6 06            [24]  304 	mov	@r0,ar6
      0000EC 18               [12]  305 	dec	r0
      0000ED A6 07            [24]  306 	mov	@r0,ar7
      0000EF 18               [12]  307 	dec	r0
      0000F0 A6 02            [24]  308 	mov	@r0,ar2
      0000F2 18               [12]  309 	dec	r0
      0000F3 76 00            [12]  310 	mov	@r0,#0x00
      0000F5 A8*00            [24]  311 	mov	r0,_bp
      0000F7 08               [12]  312 	inc	r0
      0000F8 86 82            [24]  313 	mov	dpl,@r0
      0000FA 08               [12]  314 	inc	r0
      0000FB 86 83            [24]  315 	mov	dph,@r0
      0000FD 08               [12]  316 	inc	r0
      0000FE 86 F0            [24]  317 	mov	b,@r0
      000100 12r00r00         [24]  318 	lcall	__gptrget
      000103 FB               [12]  319 	mov	r3,a
      000104 E4               [12]  320 	clr	a
      000105 FC               [12]  321 	mov	r4,a
      000106 FE               [12]  322 	mov	r6,a
      000107 FF               [12]  323 	mov	r7,a
      000108 E5*00            [12]  324 	mov	a,_bp
      00010A 24 04            [12]  325 	add	a,#0x04
      00010C F8               [12]  326 	mov	r0,a
      00010D E6               [12]  327 	mov	a,@r0
      00010E 42 03            [12]  328 	orl	ar3,a
      000110 08               [12]  329 	inc	r0
      000111 E6               [12]  330 	mov	a,@r0
      000112 42 04            [12]  331 	orl	ar4,a
      000114 08               [12]  332 	inc	r0
      000115 E6               [12]  333 	mov	a,@r0
      000116 42 06            [12]  334 	orl	ar6,a
      000118 08               [12]  335 	inc	r0
      000119 E6               [12]  336 	mov	a,@r0
      00011A 42 07            [12]  337 	orl	ar7,a
                                    338 ;	pff\source\pff.c:401: return rv;
      00011C 8B 82            [24]  339 	mov	dpl,r3
      00011E 8C 83            [24]  340 	mov	dph,r4
      000120 8E F0            [24]  341 	mov	b,r6
      000122 EF               [12]  342 	mov	a,r7
                                    343 ;	pff\source\pff.c:402: }
      000123 85*00 81         [24]  344 	mov	sp,_bp
      000126 D0*00            [24]  345 	pop	_bp
      000128 22               [24]  346 	ret
                                    347 ;------------------------------------------------------------
                                    348 ;Allocation info for local variables in function 'mem_set'
                                    349 ;------------------------------------------------------------
                                    350 ;val                       Allocated to stack - _bp -4
                                    351 ;cnt                       Allocated to stack - _bp -6
                                    352 ;dst                       Allocated to registers r5 r6 r7 
                                    353 ;d                         Allocated to registers 
                                    354 ;sloc0                     Allocated to stack - _bp +1
                                    355 ;------------------------------------------------------------
                                    356 ;	pff\source\pff.c:411: static void mem_set (void* dst, int val, int cnt) {
                                    357 ;	-----------------------------------------
                                    358 ;	 function mem_set
                                    359 ;	-----------------------------------------
      000129                        360 _mem_set:
      000129 C0*00            [24]  361 	push	_bp
      00012B 85 81*00         [24]  362 	mov	_bp,sp
      00012E 05 81            [12]  363 	inc	sp
      000130 05 81            [12]  364 	inc	sp
      000132 AD 82            [24]  365 	mov	r5,dpl
      000134 AE 83            [24]  366 	mov	r6,dph
      000136 AF F0            [24]  367 	mov	r7,b
                                    368 ;	pff\source\pff.c:412: char *d = (char*)dst;
                                    369 ;	pff\source\pff.c:413: while (cnt--) *d++ = (char)val;
      000138 E5*00            [12]  370 	mov	a,_bp
      00013A 24 FA            [12]  371 	add	a,#0xfa
      00013C F8               [12]  372 	mov	r0,a
      00013D A9*00            [24]  373 	mov	r1,_bp
      00013F 09               [12]  374 	inc	r1
      000140 E6               [12]  375 	mov	a,@r0
      000141 F7               [12]  376 	mov	@r1,a
      000142 08               [12]  377 	inc	r0
      000143 E6               [12]  378 	mov	a,@r0
      000144 09               [12]  379 	inc	r1
      000145 F7               [12]  380 	mov	@r1,a
      000146                        381 00101$:
      000146 A8*00            [24]  382 	mov	r0,_bp
      000148 08               [12]  383 	inc	r0
      000149 86 02            [24]  384 	mov	ar2,@r0
      00014B 08               [12]  385 	inc	r0
      00014C 86 04            [24]  386 	mov	ar4,@r0
      00014E A8*00            [24]  387 	mov	r0,_bp
      000150 08               [12]  388 	inc	r0
      000151 16               [12]  389 	dec	@r0
      000152 B6 FF 02         [24]  390 	cjne	@r0,#0xff,00115$
      000155 08               [12]  391 	inc	r0
      000156 16               [12]  392 	dec	@r0
      000157                        393 00115$:
      000157 EA               [12]  394 	mov	a,r2
      000158 4C               [12]  395 	orl	a,r4
      000159 60 18            [24]  396 	jz	00104$
      00015B E5*00            [12]  397 	mov	a,_bp
      00015D 24 FC            [12]  398 	add	a,#0xfc
      00015F F8               [12]  399 	mov	r0,a
      000160 86 04            [24]  400 	mov	ar4,@r0
      000162 8D 82            [24]  401 	mov	dpl,r5
      000164 8E 83            [24]  402 	mov	dph,r6
      000166 8F F0            [24]  403 	mov	b,r7
      000168 EC               [12]  404 	mov	a,r4
      000169 12r00r00         [24]  405 	lcall	__gptrput
      00016C A3               [24]  406 	inc	dptr
      00016D AD 82            [24]  407 	mov	r5,dpl
      00016F AE 83            [24]  408 	mov	r6,dph
      000171 80 D3            [24]  409 	sjmp	00101$
      000173                        410 00104$:
                                    411 ;	pff\source\pff.c:414: }
      000173 85*00 81         [24]  412 	mov	sp,_bp
      000176 D0*00            [24]  413 	pop	_bp
      000178 22               [24]  414 	ret
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'mem_cmp'
                                    417 ;------------------------------------------------------------
                                    418 ;src                       Allocated to stack - _bp -5
                                    419 ;cnt                       Allocated to stack - _bp -7
                                    420 ;dst                       Allocated to registers r5 r6 r7 
                                    421 ;d                         Allocated to registers 
                                    422 ;s                         Allocated to registers 
                                    423 ;r                         Allocated to stack - _bp +5
                                    424 ;sloc0                     Allocated to stack - _bp +5
                                    425 ;sloc1                     Allocated to stack - _bp +1
                                    426 ;sloc2                     Allocated to stack - _bp +7
                                    427 ;sloc3                     Allocated to stack - _bp +3
                                    428 ;------------------------------------------------------------
                                    429 ;	pff\source\pff.c:417: static int mem_cmp (const void* dst, const void* src, int cnt) {
                                    430 ;	-----------------------------------------
                                    431 ;	 function mem_cmp
                                    432 ;	-----------------------------------------
      000179                        433 _mem_cmp:
      000179 C0*00            [24]  434 	push	_bp
      00017B E5 81            [12]  435 	mov	a,sp
      00017D F5*00            [12]  436 	mov	_bp,a
      00017F 24 09            [12]  437 	add	a,#0x09
      000181 F5 81            [12]  438 	mov	sp,a
      000183 AD 82            [24]  439 	mov	r5,dpl
      000185 AE 83            [24]  440 	mov	r6,dph
      000187 AF F0            [24]  441 	mov	r7,b
                                    442 ;	pff\source\pff.c:418: const char *d = (const char *)dst, *s = (const char *)src;
      000189 E5*00            [12]  443 	mov	a,_bp
      00018B 24 FB            [12]  444 	add	a,#0xfb
      00018D F8               [12]  445 	mov	r0,a
      00018E E5*00            [12]  446 	mov	a,_bp
      000190 24 07            [12]  447 	add	a,#0x07
      000192 F9               [12]  448 	mov	r1,a
      000193 E6               [12]  449 	mov	a,@r0
      000194 F7               [12]  450 	mov	@r1,a
      000195 08               [12]  451 	inc	r0
      000196 E6               [12]  452 	mov	a,@r0
      000197 09               [12]  453 	inc	r1
      000198 F7               [12]  454 	mov	@r1,a
      000199 08               [12]  455 	inc	r0
      00019A E6               [12]  456 	mov	a,@r0
      00019B 09               [12]  457 	inc	r1
      00019C F7               [12]  458 	mov	@r1,a
                                    459 ;	pff\source\pff.c:419: int r = 0;
      00019D E5*00            [12]  460 	mov	a,_bp
      00019F 24 05            [12]  461 	add	a,#0x05
      0001A1 F8               [12]  462 	mov	r0,a
      0001A2 E4               [12]  463 	clr	a
      0001A3 F6               [12]  464 	mov	@r0,a
      0001A4 08               [12]  465 	inc	r0
      0001A5 F6               [12]  466 	mov	@r0,a
                                    467 ;	pff\source\pff.c:420: while (cnt-- && (r = *d++ - *s++) == 0) ;
      0001A6 E5*00            [12]  468 	mov	a,_bp
      0001A8 24 F9            [12]  469 	add	a,#0xf9
      0001AA F8               [12]  470 	mov	r0,a
      0001AB A9*00            [24]  471 	mov	r1,_bp
      0001AD 09               [12]  472 	inc	r1
      0001AE E6               [12]  473 	mov	a,@r0
      0001AF F7               [12]  474 	mov	@r1,a
      0001B0 08               [12]  475 	inc	r0
      0001B1 E6               [12]  476 	mov	a,@r0
      0001B2 09               [12]  477 	inc	r1
      0001B3 F7               [12]  478 	mov	@r1,a
      0001B4                        479 00102$:
      0001B4 A8*00            [24]  480 	mov	r0,_bp
      0001B6 08               [12]  481 	inc	r0
      0001B7 86 03            [24]  482 	mov	ar3,@r0
      0001B9 08               [12]  483 	inc	r0
      0001BA 86 04            [24]  484 	mov	ar4,@r0
      0001BC A8*00            [24]  485 	mov	r0,_bp
      0001BE 08               [12]  486 	inc	r0
      0001BF 16               [12]  487 	dec	@r0
      0001C0 B6 FF 02         [24]  488 	cjne	@r0,#0xff,00116$
      0001C3 08               [12]  489 	inc	r0
      0001C4 16               [12]  490 	dec	@r0
      0001C5                        491 00116$:
      0001C5 EB               [12]  492 	mov	a,r3
      0001C6 4C               [12]  493 	orl	a,r4
      0001C7 60 4F            [24]  494 	jz	00104$
      0001C9 8D 82            [24]  495 	mov	dpl,r5
      0001CB 8E 83            [24]  496 	mov	dph,r6
      0001CD 8F F0            [24]  497 	mov	b,r7
      0001CF 12r00r00         [24]  498 	lcall	__gptrget
      0001D2 FC               [12]  499 	mov	r4,a
      0001D3 A3               [24]  500 	inc	dptr
      0001D4 AD 82            [24]  501 	mov	r5,dpl
      0001D6 AE 83            [24]  502 	mov	r6,dph
      0001D8 E5*00            [12]  503 	mov	a,_bp
      0001DA 24 03            [12]  504 	add	a,#0x03
      0001DC F8               [12]  505 	mov	r0,a
      0001DD A6 04            [24]  506 	mov	@r0,ar4
      0001DF 08               [12]  507 	inc	r0
      0001E0 76 00            [12]  508 	mov	@r0,#0x00
      0001E2 E5*00            [12]  509 	mov	a,_bp
      0001E4 24 07            [12]  510 	add	a,#0x07
      0001E6 F8               [12]  511 	mov	r0,a
      0001E7 86 82            [24]  512 	mov	dpl,@r0
      0001E9 08               [12]  513 	inc	r0
      0001EA 86 83            [24]  514 	mov	dph,@r0
      0001EC 08               [12]  515 	inc	r0
      0001ED 86 F0            [24]  516 	mov	b,@r0
      0001EF 12r00r00         [24]  517 	lcall	__gptrget
      0001F2 FA               [12]  518 	mov	r2,a
      0001F3 A3               [24]  519 	inc	dptr
      0001F4 18               [12]  520 	dec	r0
      0001F5 18               [12]  521 	dec	r0
      0001F6 A6 82            [24]  522 	mov	@r0,dpl
      0001F8 08               [12]  523 	inc	r0
      0001F9 A6 83            [24]  524 	mov	@r0,dph
      0001FB 7C 00            [12]  525 	mov	r4,#0x00
      0001FD E5*00            [12]  526 	mov	a,_bp
      0001FF 24 03            [12]  527 	add	a,#0x03
      000201 F8               [12]  528 	mov	r0,a
      000202 E6               [12]  529 	mov	a,@r0
      000203 C3               [12]  530 	clr	c
      000204 9A               [12]  531 	subb	a,r2
      000205 FA               [12]  532 	mov	r2,a
      000206 08               [12]  533 	inc	r0
      000207 E6               [12]  534 	mov	a,@r0
      000208 9C               [12]  535 	subb	a,r4
      000209 FC               [12]  536 	mov	r4,a
      00020A E5*00            [12]  537 	mov	a,_bp
      00020C 24 05            [12]  538 	add	a,#0x05
      00020E F8               [12]  539 	mov	r0,a
      00020F A6 02            [24]  540 	mov	@r0,ar2
      000211 08               [12]  541 	inc	r0
      000212 A6 04            [24]  542 	mov	@r0,ar4
      000214 EA               [12]  543 	mov	a,r2
      000215 4C               [12]  544 	orl	a,r4
      000216 60 9C            [24]  545 	jz	00102$
      000218                        546 00104$:
                                    547 ;	pff\source\pff.c:421: return r;
      000218 E5*00            [12]  548 	mov	a,_bp
      00021A 24 05            [12]  549 	add	a,#0x05
      00021C F8               [12]  550 	mov	r0,a
      00021D 86 82            [24]  551 	mov	dpl,@r0
      00021F 08               [12]  552 	inc	r0
      000220 86 83            [24]  553 	mov	dph,@r0
                                    554 ;	pff\source\pff.c:422: }
      000222 85*00 81         [24]  555 	mov	sp,_bp
      000225 D0*00            [24]  556 	pop	_bp
      000227 22               [24]  557 	ret
                                    558 ;------------------------------------------------------------
                                    559 ;Allocation info for local variables in function 'get_fat'
                                    560 ;------------------------------------------------------------
                                    561 ;clst                      Allocated to stack - _bp +1
                                    562 ;buf                       Allocated to stack - _bp +11
                                    563 ;fs                        Allocated to stack - _bp +15
                                    564 ;sloc0                     Allocated to stack - _bp +9
                                    565 ;sloc1                     Allocated to stack - _bp +5
                                    566 ;------------------------------------------------------------
                                    567 ;	pff\source\pff.c:430: static CLUST get_fat (	/* 1:IO error, Else:Cluster status */
                                    568 ;	-----------------------------------------
                                    569 ;	 function get_fat
                                    570 ;	-----------------------------------------
      000228                        571 _get_fat:
      000228 C0*00            [24]  572 	push	_bp
      00022A 85 81*00         [24]  573 	mov	_bp,sp
      00022D C0 82            [24]  574 	push	dpl
      00022F C0 83            [24]  575 	push	dph
      000231 C0 F0            [24]  576 	push	b
      000233 C0 E0            [24]  577 	push	acc
      000235 E5 81            [12]  578 	mov	a,sp
      000237 24 0D            [12]  579 	add	a,#0x0d
      000239 F5 81            [12]  580 	mov	sp,a
                                    581 ;	pff\source\pff.c:435: FATFS *fs = FatFs;
      00023B 90r00r00         [24]  582 	mov	dptr,#_FatFs
      00023E E0               [24]  583 	movx	a,@dptr
      00023F FF               [12]  584 	mov	r7,a
      000240 A3               [24]  585 	inc	dptr
      000241 E0               [24]  586 	movx	a,@dptr
      000242 FE               [12]  587 	mov	r6,a
      000243 A3               [24]  588 	inc	dptr
      000244 E0               [24]  589 	movx	a,@dptr
      000245 FD               [12]  590 	mov	r5,a
      000246 E5*00            [12]  591 	mov	a,_bp
      000248 24 0F            [12]  592 	add	a,#0x0f
      00024A F8               [12]  593 	mov	r0,a
      00024B A6 07            [24]  594 	mov	@r0,ar7
      00024D 08               [12]  595 	inc	r0
      00024E A6 06            [24]  596 	mov	@r0,ar6
      000250 08               [12]  597 	inc	r0
      000251 A6 05            [24]  598 	mov	@r0,ar5
                                    599 ;	pff\source\pff.c:440: if (clst < 2 || clst >= fs->n_fatent) return 1;	/* Range check */
      000253 A8*00            [24]  600 	mov	r0,_bp
      000255 08               [12]  601 	inc	r0
      000256 C3               [12]  602 	clr	c
      000257 E6               [12]  603 	mov	a,@r0
      000258 94 02            [12]  604 	subb	a,#0x02
      00025A 08               [12]  605 	inc	r0
      00025B E6               [12]  606 	mov	a,@r0
      00025C 94 00            [12]  607 	subb	a,#0x00
      00025E 08               [12]  608 	inc	r0
      00025F E6               [12]  609 	mov	a,@r0
      000260 94 00            [12]  610 	subb	a,#0x00
      000262 08               [12]  611 	inc	r0
      000263 E6               [12]  612 	mov	a,@r0
      000264 94 00            [12]  613 	subb	a,#0x00
      000266 40 3A            [24]  614 	jc	00101$
      000268 E5*00            [12]  615 	mov	a,_bp
      00026A 24 0F            [12]  616 	add	a,#0x0f
      00026C F8               [12]  617 	mov	r0,a
      00026D 74 06            [12]  618 	mov	a,#0x06
      00026F 26               [12]  619 	add	a,@r0
      000270 FA               [12]  620 	mov	r2,a
      000271 E4               [12]  621 	clr	a
      000272 08               [12]  622 	inc	r0
      000273 36               [12]  623 	addc	a,@r0
      000274 FB               [12]  624 	mov	r3,a
      000275 08               [12]  625 	inc	r0
      000276 86 07            [24]  626 	mov	ar7,@r0
      000278 8A 82            [24]  627 	mov	dpl,r2
      00027A 8B 83            [24]  628 	mov	dph,r3
      00027C 8F F0            [24]  629 	mov	b,r7
      00027E 12r00r00         [24]  630 	lcall	__gptrget
      000281 FA               [12]  631 	mov	r2,a
      000282 A3               [24]  632 	inc	dptr
      000283 12r00r00         [24]  633 	lcall	__gptrget
      000286 FB               [12]  634 	mov	r3,a
      000287 A3               [24]  635 	inc	dptr
      000288 12r00r00         [24]  636 	lcall	__gptrget
      00028B FF               [12]  637 	mov	r7,a
      00028C A3               [24]  638 	inc	dptr
      00028D 12r00r00         [24]  639 	lcall	__gptrget
      000290 FE               [12]  640 	mov	r6,a
      000291 A8*00            [24]  641 	mov	r0,_bp
      000293 08               [12]  642 	inc	r0
      000294 C3               [12]  643 	clr	c
      000295 E6               [12]  644 	mov	a,@r0
      000296 9A               [12]  645 	subb	a,r2
      000297 08               [12]  646 	inc	r0
      000298 E6               [12]  647 	mov	a,@r0
      000299 9B               [12]  648 	subb	a,r3
      00029A 08               [12]  649 	inc	r0
      00029B E6               [12]  650 	mov	a,@r0
      00029C 9F               [12]  651 	subb	a,r7
      00029D 08               [12]  652 	inc	r0
      00029E E6               [12]  653 	mov	a,@r0
      00029F 9E               [12]  654 	subb	a,r6
      0002A0 40 09            [24]  655 	jc	00102$
      0002A2                        656 00101$:
      0002A2 90 00 01         [24]  657 	mov	dptr,#(0x01&0x00ff)
      0002A5 E4               [12]  658 	clr	a
      0002A6 F5 F0            [12]  659 	mov	b,a
      0002A8 02r03rBA         [24]  660 	ljmp	00108$
      0002AB                        661 00102$:
                                    662 ;	pff\source\pff.c:442: switch (fs->fs_type) {
      0002AB E5*00            [12]  663 	mov	a,_bp
      0002AD 24 0F            [12]  664 	add	a,#0x0f
      0002AF F8               [12]  665 	mov	r0,a
      0002B0 86 82            [24]  666 	mov	dpl,@r0
      0002B2 08               [12]  667 	inc	r0
      0002B3 86 83            [24]  668 	mov	dph,@r0
      0002B5 08               [12]  669 	inc	r0
      0002B6 86 F0            [24]  670 	mov	b,@r0
      0002B8 12r00r00         [24]  671 	lcall	__gptrget
      0002BB FF               [12]  672 	mov	r7,a
      0002BC BF 03 02         [24]  673 	cjne	r7,#0x03,00124$
      0002BF 80 03            [24]  674 	sjmp	00125$
      0002C1                        675 00124$:
      0002C1 02r03rB4         [24]  676 	ljmp	00107$
      0002C4                        677 00125$:
                                    678 ;	pff\source\pff.c:464: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
      0002C4 A8*00            [24]  679 	mov	r0,_bp
      0002C6 08               [12]  680 	inc	r0
      0002C7 86 04            [24]  681 	mov	ar4,@r0
      0002C9 08               [12]  682 	inc	r0
      0002CA 53 04 7F         [24]  683 	anl	ar4,#0x7f
      0002CD 7D 00            [12]  684 	mov	r5,#0x00
      0002CF E5*00            [12]  685 	mov	a,_bp
      0002D1 24 09            [12]  686 	add	a,#0x09
      0002D3 F8               [12]  687 	mov	r0,a
      0002D4 EC               [12]  688 	mov	a,r4
      0002D5 2C               [12]  689 	add	a,r4
      0002D6 F6               [12]  690 	mov	@r0,a
      0002D7 ED               [12]  691 	mov	a,r5
      0002D8 33               [12]  692 	rlc	a
      0002D9 08               [12]  693 	inc	r0
      0002DA F6               [12]  694 	mov	@r0,a
      0002DB 18               [12]  695 	dec	r0
      0002DC E6               [12]  696 	mov	a,@r0
      0002DD 26               [12]  697 	add	a,@r0
      0002DE F6               [12]  698 	mov	@r0,a
      0002DF 08               [12]  699 	inc	r0
      0002E0 E6               [12]  700 	mov	a,@r0
      0002E1 33               [12]  701 	rlc	a
      0002E2 F6               [12]  702 	mov	@r0,a
      0002E3 E5*00            [12]  703 	mov	a,_bp
      0002E5 24 0F            [12]  704 	add	a,#0x0f
      0002E7 F8               [12]  705 	mov	r0,a
      0002E8 74 0A            [12]  706 	mov	a,#0x0a
      0002EA 26               [12]  707 	add	a,@r0
      0002EB FB               [12]  708 	mov	r3,a
      0002EC E4               [12]  709 	clr	a
      0002ED 08               [12]  710 	inc	r0
      0002EE 36               [12]  711 	addc	a,@r0
      0002EF FE               [12]  712 	mov	r6,a
      0002F0 08               [12]  713 	inc	r0
      0002F1 86 07            [24]  714 	mov	ar7,@r0
      0002F3 8B 82            [24]  715 	mov	dpl,r3
      0002F5 8E 83            [24]  716 	mov	dph,r6
      0002F7 8F F0            [24]  717 	mov	b,r7
      0002F9 E5*00            [12]  718 	mov	a,_bp
      0002FB 24 05            [12]  719 	add	a,#0x05
      0002FD F8               [12]  720 	mov	r0,a
      0002FE 12r00r00         [24]  721 	lcall	__gptrget
      000301 F6               [12]  722 	mov	@r0,a
      000302 A3               [24]  723 	inc	dptr
      000303 12r00r00         [24]  724 	lcall	__gptrget
      000306 08               [12]  725 	inc	r0
      000307 F6               [12]  726 	mov	@r0,a
      000308 A3               [24]  727 	inc	dptr
      000309 12r00r00         [24]  728 	lcall	__gptrget
      00030C 08               [12]  729 	inc	r0
      00030D F6               [12]  730 	mov	@r0,a
      00030E A3               [24]  731 	inc	dptr
      00030F 12r00r00         [24]  732 	lcall	__gptrget
      000312 08               [12]  733 	inc	r0
      000313 F6               [12]  734 	mov	@r0,a
      000314 A8*00            [24]  735 	mov	r0,_bp
      000316 08               [12]  736 	inc	r0
      000317 86 04            [24]  737 	mov	ar4,@r0
      000319 08               [12]  738 	inc	r0
      00031A E6               [12]  739 	mov	a,@r0
      00031B A2 E7            [12]  740 	mov	c,acc.7
      00031D CC               [12]  741 	xch	a,r4
      00031E 33               [12]  742 	rlc	a
      00031F CC               [12]  743 	xch	a,r4
      000320 33               [12]  744 	rlc	a
      000321 CC               [12]  745 	xch	a,r4
      000322 54 01            [12]  746 	anl	a,#0x01
      000324 FD               [12]  747 	mov	r5,a
      000325 08               [12]  748 	inc	r0
      000326 E6               [12]  749 	mov	a,@r0
      000327 26               [12]  750 	add	a,@r0
      000328 4D               [12]  751 	orl	a,r5
      000329 FD               [12]  752 	mov	r5,a
      00032A 86 06            [24]  753 	mov	ar6,@r0
      00032C 08               [12]  754 	inc	r0
      00032D E6               [12]  755 	mov	a,@r0
      00032E A2 E7            [12]  756 	mov	c,acc.7
      000330 CE               [12]  757 	xch	a,r6
      000331 33               [12]  758 	rlc	a
      000332 CE               [12]  759 	xch	a,r6
      000333 33               [12]  760 	rlc	a
      000334 CE               [12]  761 	xch	a,r6
      000335 54 01            [12]  762 	anl	a,#0x01
      000337 FF               [12]  763 	mov	r7,a
      000338 E5*00            [12]  764 	mov	a,_bp
      00033A 24 05            [12]  765 	add	a,#0x05
      00033C F8               [12]  766 	mov	r0,a
      00033D EC               [12]  767 	mov	a,r4
      00033E 26               [12]  768 	add	a,@r0
      00033F F6               [12]  769 	mov	@r0,a
      000340 ED               [12]  770 	mov	a,r5
      000341 08               [12]  771 	inc	r0
      000342 36               [12]  772 	addc	a,@r0
      000343 F6               [12]  773 	mov	@r0,a
      000344 EE               [12]  774 	mov	a,r6
      000345 08               [12]  775 	inc	r0
      000346 36               [12]  776 	addc	a,@r0
      000347 F6               [12]  777 	mov	@r0,a
      000348 EF               [12]  778 	mov	a,r7
      000349 08               [12]  779 	inc	r0
      00034A 36               [12]  780 	addc	a,@r0
      00034B F6               [12]  781 	mov	@r0,a
      00034C E5*00            [12]  782 	mov	a,_bp
      00034E 24 0B            [12]  783 	add	a,#0x0b
      000350 FB               [12]  784 	mov	r3,a
      000351 FA               [12]  785 	mov	r2,a
      000352 7E 00            [12]  786 	mov	r6,#0x00
      000354 7F 40            [12]  787 	mov	r7,#0x40
      000356 C0 03            [24]  788 	push	ar3
      000358 74 04            [12]  789 	mov	a,#0x04
      00035A C0 E0            [24]  790 	push	acc
      00035C E4               [12]  791 	clr	a
      00035D C0 E0            [24]  792 	push	acc
      00035F E5*00            [12]  793 	mov	a,_bp
      000361 24 09            [12]  794 	add	a,#0x09
      000363 F8               [12]  795 	mov	r0,a
      000364 E6               [12]  796 	mov	a,@r0
      000365 C0 E0            [24]  797 	push	acc
      000367 08               [12]  798 	inc	r0
      000368 E6               [12]  799 	mov	a,@r0
      000369 C0 E0            [24]  800 	push	acc
      00036B E5*00            [12]  801 	mov	a,_bp
      00036D 24 05            [12]  802 	add	a,#0x05
      00036F F8               [12]  803 	mov	r0,a
      000370 E6               [12]  804 	mov	a,@r0
      000371 C0 E0            [24]  805 	push	acc
      000373 08               [12]  806 	inc	r0
      000374 E6               [12]  807 	mov	a,@r0
      000375 C0 E0            [24]  808 	push	acc
      000377 08               [12]  809 	inc	r0
      000378 E6               [12]  810 	mov	a,@r0
      000379 C0 E0            [24]  811 	push	acc
      00037B 08               [12]  812 	inc	r0
      00037C E6               [12]  813 	mov	a,@r0
      00037D C0 E0            [24]  814 	push	acc
      00037F 8A 82            [24]  815 	mov	dpl,r2
      000381 8E 83            [24]  816 	mov	dph,r6
      000383 8F F0            [24]  817 	mov	b,r7
      000385 12r00r00         [24]  818 	lcall	_disk_readp
      000388 AF 82            [24]  819 	mov	r7,dpl
      00038A E5 81            [12]  820 	mov	a,sp
      00038C 24 F8            [12]  821 	add	a,#0xf8
      00038E F5 81            [12]  822 	mov	sp,a
      000390 D0 03            [24]  823 	pop	ar3
      000392 EF               [12]  824 	mov	a,r7
                                    825 ;	pff\source\pff.c:465: return ld_dword(buf) & 0x0FFFFFFF;
      000393 70 1F            [24]  826 	jnz	00107$
      000395 FF               [12]  827 	mov	r7,a
      000396 7E 40            [12]  828 	mov	r6,#0x40
      000398 8B 82            [24]  829 	mov	dpl,r3
      00039A 8F 83            [24]  830 	mov	dph,r7
      00039C 8E F0            [24]  831 	mov	b,r6
      00039E 12r00r30         [24]  832 	lcall	_ld_dword
      0003A1 AC 82            [24]  833 	mov	r4,dpl
      0003A3 AD 83            [24]  834 	mov	r5,dph
      0003A5 AE F0            [24]  835 	mov	r6,b
      0003A7 FF               [12]  836 	mov	r7,a
      0003A8 53 07 0F         [24]  837 	anl	ar7,#0x0f
      0003AB 8C 82            [24]  838 	mov	dpl,r4
      0003AD 8D 83            [24]  839 	mov	dph,r5
      0003AF 8E F0            [24]  840 	mov	b,r6
      0003B1 EF               [12]  841 	mov	a,r7
                                    842 ;	pff\source\pff.c:467: }
      0003B2 80 06            [24]  843 	sjmp	00108$
      0003B4                        844 00107$:
                                    845 ;	pff\source\pff.c:469: return 1;	/* An error occured at the disk I/O layer */
      0003B4 90 00 01         [24]  846 	mov	dptr,#(0x01&0x00ff)
      0003B7 E4               [12]  847 	clr	a
      0003B8 F5 F0            [12]  848 	mov	b,a
      0003BA                        849 00108$:
                                    850 ;	pff\source\pff.c:470: }
      0003BA 85*00 81         [24]  851 	mov	sp,_bp
      0003BD D0*00            [24]  852 	pop	_bp
      0003BF 22               [24]  853 	ret
                                    854 ;------------------------------------------------------------
                                    855 ;Allocation info for local variables in function 'clust2sect'
                                    856 ;------------------------------------------------------------
                                    857 ;clst                      Allocated to stack - _bp +1
                                    858 ;fs                        Allocated to stack - _bp +9
                                    859 ;sloc0                     Allocated to stack - _bp +5
                                    860 ;------------------------------------------------------------
                                    861 ;	pff\source\pff.c:479: static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
                                    862 ;	-----------------------------------------
                                    863 ;	 function clust2sect
                                    864 ;	-----------------------------------------
      0003C0                        865 _clust2sect:
      0003C0 C0*00            [24]  866 	push	_bp
      0003C2 85 81*00         [24]  867 	mov	_bp,sp
      0003C5 C8               [12]  868 	xch	a,r0
      0003C6 E5 81            [12]  869 	mov	a,sp
      0003C8 24 0B            [12]  870 	add	a,#0x0b
      0003CA F5 81            [12]  871 	mov	sp,a
      0003CC E5*00            [12]  872 	mov	a,_bp
      0003CE 24 05            [12]  873 	add	a,#0x05
      0003D0 C8               [12]  874 	xch	a,r0
      0003D1 A6 82            [24]  875 	mov	@r0,dpl
      0003D3 08               [12]  876 	inc	r0
      0003D4 A6 83            [24]  877 	mov	@r0,dph
      0003D6 08               [12]  878 	inc	r0
      0003D7 A6 F0            [24]  879 	mov	@r0,b
      0003D9 08               [12]  880 	inc	r0
      0003DA F6               [12]  881 	mov	@r0,a
                                    882 ;	pff\source\pff.c:483: FATFS *fs = FatFs;
      0003DB 90r00r00         [24]  883 	mov	dptr,#_FatFs
      0003DE E0               [24]  884 	movx	a,@dptr
      0003DF FA               [12]  885 	mov	r2,a
      0003E0 A3               [24]  886 	inc	dptr
      0003E1 E0               [24]  887 	movx	a,@dptr
      0003E2 FB               [12]  888 	mov	r3,a
      0003E3 A3               [24]  889 	inc	dptr
      0003E4 E0               [24]  890 	movx	a,@dptr
      0003E5 FF               [12]  891 	mov	r7,a
      0003E6 E5*00            [12]  892 	mov	a,_bp
      0003E8 24 09            [12]  893 	add	a,#0x09
      0003EA F8               [12]  894 	mov	r0,a
      0003EB A6 02            [24]  895 	mov	@r0,ar2
      0003ED 08               [12]  896 	inc	r0
      0003EE A6 03            [24]  897 	mov	@r0,ar3
      0003F0 08               [12]  898 	inc	r0
      0003F1 A6 07            [24]  899 	mov	@r0,ar7
                                    900 ;	pff\source\pff.c:486: clst -= 2;
      0003F3 E5*00            [12]  901 	mov	a,_bp
      0003F5 24 05            [12]  902 	add	a,#0x05
      0003F7 F8               [12]  903 	mov	r0,a
      0003F8 A9*00            [24]  904 	mov	r1,_bp
      0003FA 09               [12]  905 	inc	r1
      0003FB E6               [12]  906 	mov	a,@r0
      0003FC 24 FE            [12]  907 	add	a,#0xfe
      0003FE F7               [12]  908 	mov	@r1,a
      0003FF 08               [12]  909 	inc	r0
      000400 E6               [12]  910 	mov	a,@r0
      000401 34 FF            [12]  911 	addc	a,#0xff
      000403 09               [12]  912 	inc	r1
      000404 F7               [12]  913 	mov	@r1,a
      000405 08               [12]  914 	inc	r0
      000406 E6               [12]  915 	mov	a,@r0
      000407 34 FF            [12]  916 	addc	a,#0xff
      000409 09               [12]  917 	inc	r1
      00040A F7               [12]  918 	mov	@r1,a
      00040B 08               [12]  919 	inc	r0
      00040C E6               [12]  920 	mov	a,@r0
      00040D 34 FF            [12]  921 	addc	a,#0xff
      00040F 09               [12]  922 	inc	r1
      000410 F7               [12]  923 	mov	@r1,a
                                    924 ;	pff\source\pff.c:487: if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
      000411 E5*00            [12]  925 	mov	a,_bp
      000413 24 09            [12]  926 	add	a,#0x09
      000415 F8               [12]  927 	mov	r0,a
      000416 74 06            [12]  928 	mov	a,#0x06
      000418 26               [12]  929 	add	a,@r0
      000419 FA               [12]  930 	mov	r2,a
      00041A E4               [12]  931 	clr	a
      00041B 08               [12]  932 	inc	r0
      00041C 36               [12]  933 	addc	a,@r0
      00041D FB               [12]  934 	mov	r3,a
      00041E 08               [12]  935 	inc	r0
      00041F 86 04            [24]  936 	mov	ar4,@r0
      000421 8A 82            [24]  937 	mov	dpl,r2
      000423 8B 83            [24]  938 	mov	dph,r3
      000425 8C F0            [24]  939 	mov	b,r4
      000427 12r00r00         [24]  940 	lcall	__gptrget
      00042A FA               [12]  941 	mov	r2,a
      00042B A3               [24]  942 	inc	dptr
      00042C 12r00r00         [24]  943 	lcall	__gptrget
      00042F FB               [12]  944 	mov	r3,a
      000430 A3               [24]  945 	inc	dptr
      000431 12r00r00         [24]  946 	lcall	__gptrget
      000434 FC               [12]  947 	mov	r4,a
      000435 A3               [24]  948 	inc	dptr
      000436 12r00r00         [24]  949 	lcall	__gptrget
      000439 FF               [12]  950 	mov	r7,a
      00043A EA               [12]  951 	mov	a,r2
      00043B 24 FE            [12]  952 	add	a,#0xfe
      00043D FA               [12]  953 	mov	r2,a
      00043E EB               [12]  954 	mov	a,r3
      00043F 34 FF            [12]  955 	addc	a,#0xff
      000441 FB               [12]  956 	mov	r3,a
      000442 EC               [12]  957 	mov	a,r4
      000443 34 FF            [12]  958 	addc	a,#0xff
      000445 FC               [12]  959 	mov	r4,a
      000446 EF               [12]  960 	mov	a,r7
      000447 34 FF            [12]  961 	addc	a,#0xff
      000449 FF               [12]  962 	mov	r7,a
      00044A A8*00            [24]  963 	mov	r0,_bp
      00044C 08               [12]  964 	inc	r0
      00044D C3               [12]  965 	clr	c
      00044E E6               [12]  966 	mov	a,@r0
      00044F 9A               [12]  967 	subb	a,r2
      000450 08               [12]  968 	inc	r0
      000451 E6               [12]  969 	mov	a,@r0
      000452 9B               [12]  970 	subb	a,r3
      000453 08               [12]  971 	inc	r0
      000454 E6               [12]  972 	mov	a,@r0
      000455 9C               [12]  973 	subb	a,r4
      000456 08               [12]  974 	inc	r0
      000457 E6               [12]  975 	mov	a,@r0
      000458 9F               [12]  976 	subb	a,r7
      000459 40 09            [24]  977 	jc	00102$
      00045B 90 00 00         [24]  978 	mov	dptr,#(0x00&0x00ff)
      00045E E4               [12]  979 	clr	a
      00045F F5 F0            [12]  980 	mov	b,a
      000461 02r04rF5         [24]  981 	ljmp	00103$
      000464                        982 00102$:
                                    983 ;	pff\source\pff.c:488: return (DWORD)clst * fs->csize + fs->database;
      000464 E5*00            [12]  984 	mov	a,_bp
      000466 24 09            [12]  985 	add	a,#0x09
      000468 F8               [12]  986 	mov	r0,a
      000469 74 02            [12]  987 	mov	a,#0x02
      00046B 26               [12]  988 	add	a,@r0
      00046C FD               [12]  989 	mov	r5,a
      00046D E4               [12]  990 	clr	a
      00046E 08               [12]  991 	inc	r0
      00046F 36               [12]  992 	addc	a,@r0
      000470 FE               [12]  993 	mov	r6,a
      000471 08               [12]  994 	inc	r0
      000472 86 07            [24]  995 	mov	ar7,@r0
      000474 8D 82            [24]  996 	mov	dpl,r5
      000476 8E 83            [24]  997 	mov	dph,r6
      000478 8F F0            [24]  998 	mov	b,r7
      00047A 12r00r00         [24]  999 	lcall	__gptrget
      00047D FD               [12] 1000 	mov	r5,a
      00047E 7F 00            [12] 1001 	mov	r7,#0x00
      000480 7E 00            [12] 1002 	mov	r6,#0x00
      000482 7C 00            [12] 1003 	mov	r4,#0x00
      000484 C0 05            [24] 1004 	push	ar5
      000486 C0 07            [24] 1005 	push	ar7
      000488 C0 06            [24] 1006 	push	ar6
      00048A C0 04            [24] 1007 	push	ar4
      00048C A8*00            [24] 1008 	mov	r0,_bp
      00048E 08               [12] 1009 	inc	r0
      00048F 86 82            [24] 1010 	mov	dpl,@r0
      000491 08               [12] 1011 	inc	r0
      000492 86 83            [24] 1012 	mov	dph,@r0
      000494 08               [12] 1013 	inc	r0
      000495 86 F0            [24] 1014 	mov	b,@r0
      000497 08               [12] 1015 	inc	r0
      000498 E6               [12] 1016 	mov	a,@r0
      000499 12r00r00         [24] 1017 	lcall	__mullong
      00049C C8               [12] 1018 	xch	a,r0
      00049D E5*00            [12] 1019 	mov	a,_bp
      00049F 24 05            [12] 1020 	add	a,#0x05
      0004A1 C8               [12] 1021 	xch	a,r0
      0004A2 A6 82            [24] 1022 	mov	@r0,dpl
      0004A4 08               [12] 1023 	inc	r0
      0004A5 A6 83            [24] 1024 	mov	@r0,dph
      0004A7 08               [12] 1025 	inc	r0
      0004A8 A6 F0            [24] 1026 	mov	@r0,b
      0004AA 08               [12] 1027 	inc	r0
      0004AB F6               [12] 1028 	mov	@r0,a
      0004AC E5 81            [12] 1029 	mov	a,sp
      0004AE 24 FC            [12] 1030 	add	a,#0xfc
      0004B0 F5 81            [12] 1031 	mov	sp,a
      0004B2 E5*00            [12] 1032 	mov	a,_bp
      0004B4 24 09            [12] 1033 	add	a,#0x09
      0004B6 F8               [12] 1034 	mov	r0,a
      0004B7 74 12            [12] 1035 	mov	a,#0x12
      0004B9 26               [12] 1036 	add	a,@r0
      0004BA FA               [12] 1037 	mov	r2,a
      0004BB E4               [12] 1038 	clr	a
      0004BC 08               [12] 1039 	inc	r0
      0004BD 36               [12] 1040 	addc	a,@r0
      0004BE FB               [12] 1041 	mov	r3,a
      0004BF 08               [12] 1042 	inc	r0
      0004C0 86 07            [24] 1043 	mov	ar7,@r0
      0004C2 8A 82            [24] 1044 	mov	dpl,r2
      0004C4 8B 83            [24] 1045 	mov	dph,r3
      0004C6 8F F0            [24] 1046 	mov	b,r7
      0004C8 12r00r00         [24] 1047 	lcall	__gptrget
      0004CB FA               [12] 1048 	mov	r2,a
      0004CC A3               [24] 1049 	inc	dptr
      0004CD 12r00r00         [24] 1050 	lcall	__gptrget
      0004D0 FB               [12] 1051 	mov	r3,a
      0004D1 A3               [24] 1052 	inc	dptr
      0004D2 12r00r00         [24] 1053 	lcall	__gptrget
      0004D5 FF               [12] 1054 	mov	r7,a
      0004D6 A3               [24] 1055 	inc	dptr
      0004D7 12r00r00         [24] 1056 	lcall	__gptrget
      0004DA FE               [12] 1057 	mov	r6,a
      0004DB E5*00            [12] 1058 	mov	a,_bp
      0004DD 24 05            [12] 1059 	add	a,#0x05
      0004DF F8               [12] 1060 	mov	r0,a
      0004E0 EA               [12] 1061 	mov	a,r2
      0004E1 26               [12] 1062 	add	a,@r0
      0004E2 FA               [12] 1063 	mov	r2,a
      0004E3 EB               [12] 1064 	mov	a,r3
      0004E4 08               [12] 1065 	inc	r0
      0004E5 36               [12] 1066 	addc	a,@r0
      0004E6 FB               [12] 1067 	mov	r3,a
      0004E7 EF               [12] 1068 	mov	a,r7
      0004E8 08               [12] 1069 	inc	r0
      0004E9 36               [12] 1070 	addc	a,@r0
      0004EA FF               [12] 1071 	mov	r7,a
      0004EB EE               [12] 1072 	mov	a,r6
      0004EC 08               [12] 1073 	inc	r0
      0004ED 36               [12] 1074 	addc	a,@r0
      0004EE FE               [12] 1075 	mov	r6,a
      0004EF 8A 82            [24] 1076 	mov	dpl,r2
      0004F1 8B 83            [24] 1077 	mov	dph,r3
      0004F3 8F F0            [24] 1078 	mov	b,r7
      0004F5                       1079 00103$:
                                   1080 ;	pff\source\pff.c:489: }
      0004F5 85*00 81         [24] 1081 	mov	sp,_bp
      0004F8 D0*00            [24] 1082 	pop	_bp
      0004FA 22               [24] 1083 	ret
                                   1084 ;------------------------------------------------------------
                                   1085 ;Allocation info for local variables in function 'get_clust'
                                   1086 ;------------------------------------------------------------
                                   1087 ;dir                       Allocated to stack - _bp +1
                                   1088 ;fs                        Allocated to registers 
                                   1089 ;clst                      Allocated to stack - _bp +4
                                   1090 ;------------------------------------------------------------
                                   1091 ;	pff\source\pff.c:492: static CLUST get_clust (
                                   1092 ;	-----------------------------------------
                                   1093 ;	 function get_clust
                                   1094 ;	-----------------------------------------
      0004FB                       1095 _get_clust:
      0004FB C0*00            [24] 1096 	push	_bp
      0004FD 85 81*00         [24] 1097 	mov	_bp,sp
      000500 C0 82            [24] 1098 	push	dpl
      000502 C0 83            [24] 1099 	push	dph
      000504 C0 F0            [24] 1100 	push	b
      000506 E5 81            [12] 1101 	mov	a,sp
      000508 24 04            [12] 1102 	add	a,#0x04
      00050A F5 81            [12] 1103 	mov	sp,a
                                   1104 ;	pff\source\pff.c:501: clst = ld_word(dir+DIR_FstClusHI);
      00050C A8*00            [24] 1105 	mov	r0,_bp
      00050E 08               [12] 1106 	inc	r0
      00050F 74 14            [12] 1107 	mov	a,#0x14
      000511 26               [12] 1108 	add	a,@r0
      000512 FA               [12] 1109 	mov	r2,a
      000513 E4               [12] 1110 	clr	a
      000514 08               [12] 1111 	inc	r0
      000515 36               [12] 1112 	addc	a,@r0
      000516 FB               [12] 1113 	mov	r3,a
      000517 08               [12] 1114 	inc	r0
      000518 86 04            [24] 1115 	mov	ar4,@r0
      00051A 8A 82            [24] 1116 	mov	dpl,r2
      00051C 8B 83            [24] 1117 	mov	dph,r3
      00051E 8C F0            [24] 1118 	mov	b,r4
      000520 12r00r00         [24] 1119 	lcall	_ld_word
      000523 AB 82            [24] 1120 	mov	r3,dpl
      000525 AC 83            [24] 1121 	mov	r4,dph
      000527 8C 02            [24] 1122 	mov	ar2,r4
                                   1123 ;	pff\source\pff.c:502: clst <<= 16;
      000529 E4               [12] 1124 	clr	a
      00052A E5*00            [12] 1125 	mov	a,_bp
      00052C 24 04            [12] 1126 	add	a,#0x04
      00052E F8               [12] 1127 	mov	r0,a
      00052F 08               [12] 1128 	inc	r0
      000530 08               [12] 1129 	inc	r0
      000531 08               [12] 1130 	inc	r0
      000532 A6 02            [24] 1131 	mov	@r0,ar2
      000534 18               [12] 1132 	dec	r0
      000535 A6 03            [24] 1133 	mov	@r0,ar3
      000537 18               [12] 1134 	dec	r0
      000538 18               [12] 1135 	dec	r0
      000539 76 00            [12] 1136 	mov	@r0,#0x00
      00053B 08               [12] 1137 	inc	r0
      00053C 76 00            [12] 1138 	mov	@r0,#0x00
                                   1139 ;	pff\source\pff.c:504: clst |= ld_word(dir+DIR_FstClusLO);
      00053E A8*00            [24] 1140 	mov	r0,_bp
      000540 08               [12] 1141 	inc	r0
      000541 74 1A            [12] 1142 	mov	a,#0x1a
      000543 26               [12] 1143 	add	a,@r0
      000544 FD               [12] 1144 	mov	r5,a
      000545 E4               [12] 1145 	clr	a
      000546 08               [12] 1146 	inc	r0
      000547 36               [12] 1147 	addc	a,@r0
      000548 FE               [12] 1148 	mov	r6,a
      000549 08               [12] 1149 	inc	r0
      00054A 86 07            [24] 1150 	mov	ar7,@r0
      00054C 8D 82            [24] 1151 	mov	dpl,r5
      00054E 8E 83            [24] 1152 	mov	dph,r6
      000550 8F F0            [24] 1153 	mov	b,r7
      000552 12r00r00         [24] 1154 	lcall	_ld_word
      000555 AE 82            [24] 1155 	mov	r6,dpl
      000557 AF 83            [24] 1156 	mov	r7,dph
      000559 E4               [12] 1157 	clr	a
      00055A FD               [12] 1158 	mov	r5,a
      00055B FC               [12] 1159 	mov	r4,a
      00055C E5*00            [12] 1160 	mov	a,_bp
      00055E 24 04            [12] 1161 	add	a,#0x04
      000560 F8               [12] 1162 	mov	r0,a
      000561 E6               [12] 1163 	mov	a,@r0
      000562 42 06            [12] 1164 	orl	ar6,a
      000564 08               [12] 1165 	inc	r0
      000565 E6               [12] 1166 	mov	a,@r0
      000566 42 07            [12] 1167 	orl	ar7,a
      000568 08               [12] 1168 	inc	r0
      000569 E6               [12] 1169 	mov	a,@r0
      00056A 42 05            [12] 1170 	orl	ar5,a
      00056C 08               [12] 1171 	inc	r0
      00056D E6               [12] 1172 	mov	a,@r0
      00056E 42 04            [12] 1173 	orl	ar4,a
                                   1174 ;	pff\source\pff.c:506: return clst;
      000570 8E 82            [24] 1175 	mov	dpl,r6
      000572 8F 83            [24] 1176 	mov	dph,r7
      000574 8D F0            [24] 1177 	mov	b,r5
      000576 EC               [12] 1178 	mov	a,r4
                                   1179 ;	pff\source\pff.c:507: }
      000577 85*00 81         [24] 1180 	mov	sp,_bp
      00057A D0*00            [24] 1181 	pop	_bp
      00057C 22               [24] 1182 	ret
                                   1183 ;------------------------------------------------------------
                                   1184 ;Allocation info for local variables in function 'dir_rewind'
                                   1185 ;------------------------------------------------------------
                                   1186 ;dj                        Allocated to stack - _bp +1
                                   1187 ;clst                      Allocated to stack - _bp +7
                                   1188 ;fs                        Allocated to stack - _bp +11
                                   1189 ;sloc0                     Allocated to stack - _bp +4
                                   1190 ;------------------------------------------------------------
                                   1191 ;	pff\source\pff.c:513: static FRESULT dir_rewind (
                                   1192 ;	-----------------------------------------
                                   1193 ;	 function dir_rewind
                                   1194 ;	-----------------------------------------
      00057D                       1195 _dir_rewind:
      00057D C0*00            [24] 1196 	push	_bp
      00057F 85 81*00         [24] 1197 	mov	_bp,sp
      000582 C0 82            [24] 1198 	push	dpl
      000584 C0 83            [24] 1199 	push	dph
      000586 C0 F0            [24] 1200 	push	b
      000588 E5 81            [12] 1201 	mov	a,sp
      00058A 24 0A            [12] 1202 	add	a,#0x0a
      00058C F5 81            [12] 1203 	mov	sp,a
                                   1204 ;	pff\source\pff.c:518: FATFS *fs = FatFs;
      00058E 90r00r00         [24] 1205 	mov	dptr,#_FatFs
      000591 E0               [24] 1206 	movx	a,@dptr
      000592 FA               [12] 1207 	mov	r2,a
      000593 A3               [24] 1208 	inc	dptr
      000594 E0               [24] 1209 	movx	a,@dptr
      000595 FB               [12] 1210 	mov	r3,a
      000596 A3               [24] 1211 	inc	dptr
      000597 E0               [24] 1212 	movx	a,@dptr
      000598 FC               [12] 1213 	mov	r4,a
      000599 E5*00            [12] 1214 	mov	a,_bp
      00059B 24 0B            [12] 1215 	add	a,#0x0b
      00059D F8               [12] 1216 	mov	r0,a
      00059E A6 02            [24] 1217 	mov	@r0,ar2
      0005A0 08               [12] 1218 	inc	r0
      0005A1 A6 03            [24] 1219 	mov	@r0,ar3
      0005A3 08               [12] 1220 	inc	r0
      0005A4 A6 04            [24] 1221 	mov	@r0,ar4
                                   1222 ;	pff\source\pff.c:521: dj->index = 0;
      0005A6 A8*00            [24] 1223 	mov	r0,_bp
      0005A8 08               [12] 1224 	inc	r0
      0005A9 86 82            [24] 1225 	mov	dpl,@r0
      0005AB 08               [12] 1226 	inc	r0
      0005AC 86 83            [24] 1227 	mov	dph,@r0
      0005AE 08               [12] 1228 	inc	r0
      0005AF 86 F0            [24] 1229 	mov	b,@r0
      0005B1 E4               [12] 1230 	clr	a
      0005B2 12r00r00         [24] 1231 	lcall	__gptrput
      0005B5 A3               [24] 1232 	inc	dptr
      0005B6 12r00r00         [24] 1233 	lcall	__gptrput
                                   1234 ;	pff\source\pff.c:522: clst = dj->sclust;
      0005B9 A8*00            [24] 1235 	mov	r0,_bp
      0005BB 08               [12] 1236 	inc	r0
      0005BC 74 05            [12] 1237 	mov	a,#0x05
      0005BE 26               [12] 1238 	add	a,@r0
      0005BF FA               [12] 1239 	mov	r2,a
      0005C0 E4               [12] 1240 	clr	a
      0005C1 08               [12] 1241 	inc	r0
      0005C2 36               [12] 1242 	addc	a,@r0
      0005C3 FB               [12] 1243 	mov	r3,a
      0005C4 08               [12] 1244 	inc	r0
      0005C5 86 04            [24] 1245 	mov	ar4,@r0
      0005C7 8A 82            [24] 1246 	mov	dpl,r2
      0005C9 8B 83            [24] 1247 	mov	dph,r3
      0005CB 8C F0            [24] 1248 	mov	b,r4
      0005CD E5*00            [12] 1249 	mov	a,_bp
      0005CF 24 07            [12] 1250 	add	a,#0x07
      0005D1 F8               [12] 1251 	mov	r0,a
      0005D2 12r00r00         [24] 1252 	lcall	__gptrget
      0005D5 F6               [12] 1253 	mov	@r0,a
      0005D6 A3               [24] 1254 	inc	dptr
      0005D7 12r00r00         [24] 1255 	lcall	__gptrget
      0005DA 08               [12] 1256 	inc	r0
      0005DB F6               [12] 1257 	mov	@r0,a
      0005DC A3               [24] 1258 	inc	dptr
      0005DD 12r00r00         [24] 1259 	lcall	__gptrget
      0005E0 08               [12] 1260 	inc	r0
      0005E1 F6               [12] 1261 	mov	@r0,a
      0005E2 A3               [24] 1262 	inc	dptr
      0005E3 12r00r00         [24] 1263 	lcall	__gptrget
      0005E6 08               [12] 1264 	inc	r0
      0005E7 F6               [12] 1265 	mov	@r0,a
                                   1266 ;	pff\source\pff.c:523: if (clst == 1 || clst >= fs->n_fatent) {	/* Check start cluster range */
      0005E8 E5*00            [12] 1267 	mov	a,_bp
      0005EA 24 07            [12] 1268 	add	a,#0x07
      0005EC F8               [12] 1269 	mov	r0,a
      0005ED B6 01 0E         [24] 1270 	cjne	@r0,#0x01,00126$
      0005F0 08               [12] 1271 	inc	r0
      0005F1 B6 00 0A         [24] 1272 	cjne	@r0,#0x00,00126$
      0005F4 08               [12] 1273 	inc	r0
      0005F5 B6 00 06         [24] 1274 	cjne	@r0,#0x00,00126$
      0005F8 08               [12] 1275 	inc	r0
      0005F9 B6 00 02         [24] 1276 	cjne	@r0,#0x00,00126$
      0005FC 80 3C            [24] 1277 	sjmp	00101$
      0005FE                       1278 00126$:
      0005FE E5*00            [12] 1279 	mov	a,_bp
      000600 24 0B            [12] 1280 	add	a,#0x0b
      000602 F8               [12] 1281 	mov	r0,a
      000603 74 06            [12] 1282 	mov	a,#0x06
      000605 26               [12] 1283 	add	a,@r0
      000606 FD               [12] 1284 	mov	r5,a
      000607 E4               [12] 1285 	clr	a
      000608 08               [12] 1286 	inc	r0
      000609 36               [12] 1287 	addc	a,@r0
      00060A FE               [12] 1288 	mov	r6,a
      00060B 08               [12] 1289 	inc	r0
      00060C 86 07            [24] 1290 	mov	ar7,@r0
      00060E 8D 82            [24] 1291 	mov	dpl,r5
      000610 8E 83            [24] 1292 	mov	dph,r6
      000612 8F F0            [24] 1293 	mov	b,r7
      000614 12r00r00         [24] 1294 	lcall	__gptrget
      000617 FD               [12] 1295 	mov	r5,a
      000618 A3               [24] 1296 	inc	dptr
      000619 12r00r00         [24] 1297 	lcall	__gptrget
      00061C FE               [12] 1298 	mov	r6,a
      00061D A3               [24] 1299 	inc	dptr
      00061E 12r00r00         [24] 1300 	lcall	__gptrget
      000621 FF               [12] 1301 	mov	r7,a
      000622 A3               [24] 1302 	inc	dptr
      000623 12r00r00         [24] 1303 	lcall	__gptrget
      000626 FC               [12] 1304 	mov	r4,a
      000627 E5*00            [12] 1305 	mov	a,_bp
      000629 24 07            [12] 1306 	add	a,#0x07
      00062B F8               [12] 1307 	mov	r0,a
      00062C C3               [12] 1308 	clr	c
      00062D E6               [12] 1309 	mov	a,@r0
      00062E 9D               [12] 1310 	subb	a,r5
      00062F 08               [12] 1311 	inc	r0
      000630 E6               [12] 1312 	mov	a,@r0
      000631 9E               [12] 1313 	subb	a,r6
      000632 08               [12] 1314 	inc	r0
      000633 E6               [12] 1315 	mov	a,@r0
      000634 9F               [12] 1316 	subb	a,r7
      000635 08               [12] 1317 	inc	r0
      000636 E6               [12] 1318 	mov	a,@r0
      000637 9C               [12] 1319 	subb	a,r4
      000638 40 06            [24] 1320 	jc	00106$
      00063A                       1321 00101$:
                                   1322 ;	pff\source\pff.c:524: return FR_DISK_ERR;
      00063A 75 82 01         [24] 1323 	mov	dpl,#0x01
      00063D 02r06rFF         [24] 1324 	ljmp	00109$
                                   1325 ;	pff\source\pff.c:526: if (PF_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32)) {	/* Replace cluster# 0 with root cluster# if in FAT32 */
      000640                       1326 00106$:
      000640 E5*00            [12] 1327 	mov	a,_bp
      000642 24 07            [12] 1328 	add	a,#0x07
      000644 F8               [12] 1329 	mov	r0,a
      000645 E6               [12] 1330 	mov	a,@r0
      000646 08               [12] 1331 	inc	r0
      000647 46               [12] 1332 	orl	a,@r0
      000648 08               [12] 1333 	inc	r0
      000649 46               [12] 1334 	orl	a,@r0
      00064A 08               [12] 1335 	inc	r0
      00064B 46               [12] 1336 	orl	a,@r0
      00064C 70 31            [24] 1337 	jnz	00105$
                                   1338 ;	pff\source\pff.c:527: clst = (CLUST)fs->dirbase;
      00064E E5*00            [12] 1339 	mov	a,_bp
      000650 24 0B            [12] 1340 	add	a,#0x0b
      000652 F8               [12] 1341 	mov	r0,a
      000653 74 0E            [12] 1342 	mov	a,#0x0e
      000655 26               [12] 1343 	add	a,@r0
      000656 FD               [12] 1344 	mov	r5,a
      000657 E4               [12] 1345 	clr	a
      000658 08               [12] 1346 	inc	r0
      000659 36               [12] 1347 	addc	a,@r0
      00065A FE               [12] 1348 	mov	r6,a
      00065B 08               [12] 1349 	inc	r0
      00065C 86 07            [24] 1350 	mov	ar7,@r0
      00065E 8D 82            [24] 1351 	mov	dpl,r5
      000660 8E 83            [24] 1352 	mov	dph,r6
      000662 8F F0            [24] 1353 	mov	b,r7
      000664 E5*00            [12] 1354 	mov	a,_bp
      000666 24 07            [12] 1355 	add	a,#0x07
      000668 F8               [12] 1356 	mov	r0,a
      000669 12r00r00         [24] 1357 	lcall	__gptrget
      00066C F6               [12] 1358 	mov	@r0,a
      00066D A3               [24] 1359 	inc	dptr
      00066E 12r00r00         [24] 1360 	lcall	__gptrget
      000671 08               [12] 1361 	inc	r0
      000672 F6               [12] 1362 	mov	@r0,a
      000673 A3               [24] 1363 	inc	dptr
      000674 12r00r00         [24] 1364 	lcall	__gptrget
      000677 08               [12] 1365 	inc	r0
      000678 F6               [12] 1366 	mov	@r0,a
      000679 A3               [24] 1367 	inc	dptr
      00067A 12r00r00         [24] 1368 	lcall	__gptrget
      00067D 08               [12] 1369 	inc	r0
      00067E F6               [12] 1370 	mov	@r0,a
      00067F                       1371 00105$:
                                   1372 ;	pff\source\pff.c:529: dj->clust = clst;						/* Current cluster */
      00067F A8*00            [24] 1373 	mov	r0,_bp
      000681 08               [12] 1374 	inc	r0
      000682 74 09            [12] 1375 	mov	a,#0x09
      000684 26               [12] 1376 	add	a,@r0
      000685 FD               [12] 1377 	mov	r5,a
      000686 E4               [12] 1378 	clr	a
      000687 08               [12] 1379 	inc	r0
      000688 36               [12] 1380 	addc	a,@r0
      000689 FE               [12] 1381 	mov	r6,a
      00068A 08               [12] 1382 	inc	r0
      00068B 86 07            [24] 1383 	mov	ar7,@r0
      00068D 8D 82            [24] 1384 	mov	dpl,r5
      00068F 8E 83            [24] 1385 	mov	dph,r6
      000691 8F F0            [24] 1386 	mov	b,r7
      000693 E5*00            [12] 1387 	mov	a,_bp
      000695 24 07            [12] 1388 	add	a,#0x07
      000697 F8               [12] 1389 	mov	r0,a
      000698 E6               [12] 1390 	mov	a,@r0
      000699 12r00r00         [24] 1391 	lcall	__gptrput
      00069C A3               [24] 1392 	inc	dptr
      00069D 08               [12] 1393 	inc	r0
      00069E E6               [12] 1394 	mov	a,@r0
      00069F 12r00r00         [24] 1395 	lcall	__gptrput
      0006A2 A3               [24] 1396 	inc	dptr
      0006A3 08               [12] 1397 	inc	r0
      0006A4 E6               [12] 1398 	mov	a,@r0
      0006A5 12r00r00         [24] 1399 	lcall	__gptrput
      0006A8 A3               [24] 1400 	inc	dptr
      0006A9 08               [12] 1401 	inc	r0
      0006AA E6               [12] 1402 	mov	a,@r0
      0006AB 12r00r00         [24] 1403 	lcall	__gptrput
                                   1404 ;	pff\source\pff.c:530: dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
      0006AE A8*00            [24] 1405 	mov	r0,_bp
      0006B0 08               [12] 1406 	inc	r0
      0006B1 E5*00            [12] 1407 	mov	a,_bp
      0006B3 24 04            [12] 1408 	add	a,#0x04
      0006B5 F9               [12] 1409 	mov	r1,a
      0006B6 74 0D            [12] 1410 	mov	a,#0x0d
      0006B8 26               [12] 1411 	add	a,@r0
      0006B9 F7               [12] 1412 	mov	@r1,a
      0006BA E4               [12] 1413 	clr	a
      0006BB 08               [12] 1414 	inc	r0
      0006BC 36               [12] 1415 	addc	a,@r0
      0006BD 09               [12] 1416 	inc	r1
      0006BE F7               [12] 1417 	mov	@r1,a
      0006BF 08               [12] 1418 	inc	r0
      0006C0 E6               [12] 1419 	mov	a,@r0
      0006C1 09               [12] 1420 	inc	r1
      0006C2 F7               [12] 1421 	mov	@r1,a
      0006C3 E5*00            [12] 1422 	mov	a,_bp
      0006C5 24 07            [12] 1423 	add	a,#0x07
      0006C7 F8               [12] 1424 	mov	r0,a
      0006C8 86 82            [24] 1425 	mov	dpl,@r0
      0006CA 08               [12] 1426 	inc	r0
      0006CB 86 83            [24] 1427 	mov	dph,@r0
      0006CD 08               [12] 1428 	inc	r0
      0006CE 86 F0            [24] 1429 	mov	b,@r0
      0006D0 08               [12] 1430 	inc	r0
      0006D1 E6               [12] 1431 	mov	a,@r0
      0006D2 12r03rC0         [24] 1432 	lcall	_clust2sect
      0006D5 AA 82            [24] 1433 	mov	r2,dpl
      0006D7 AB 83            [24] 1434 	mov	r3,dph
      0006D9 AC F0            [24] 1435 	mov	r4,b
      0006DB FF               [12] 1436 	mov	r7,a
      0006DC E5*00            [12] 1437 	mov	a,_bp
      0006DE 24 04            [12] 1438 	add	a,#0x04
      0006E0 F8               [12] 1439 	mov	r0,a
      0006E1 86 82            [24] 1440 	mov	dpl,@r0
      0006E3 08               [12] 1441 	inc	r0
      0006E4 86 83            [24] 1442 	mov	dph,@r0
      0006E6 08               [12] 1443 	inc	r0
      0006E7 86 F0            [24] 1444 	mov	b,@r0
      0006E9 EA               [12] 1445 	mov	a,r2
      0006EA 12r00r00         [24] 1446 	lcall	__gptrput
      0006ED A3               [24] 1447 	inc	dptr
      0006EE EB               [12] 1448 	mov	a,r3
      0006EF 12r00r00         [24] 1449 	lcall	__gptrput
      0006F2 A3               [24] 1450 	inc	dptr
      0006F3 EC               [12] 1451 	mov	a,r4
      0006F4 12r00r00         [24] 1452 	lcall	__gptrput
      0006F7 A3               [24] 1453 	inc	dptr
      0006F8 EF               [12] 1454 	mov	a,r7
      0006F9 12r00r00         [24] 1455 	lcall	__gptrput
                                   1456 ;	pff\source\pff.c:532: return FR_OK;	/* Seek succeeded */
      0006FC 75 82 00         [24] 1457 	mov	dpl,#0x00
      0006FF                       1458 00109$:
                                   1459 ;	pff\source\pff.c:533: }
      0006FF 85*00 81         [24] 1460 	mov	sp,_bp
      000702 D0*00            [24] 1461 	pop	_bp
      000704 22               [24] 1462 	ret
                                   1463 ;------------------------------------------------------------
                                   1464 ;Allocation info for local variables in function 'dir_next'
                                   1465 ;------------------------------------------------------------
                                   1466 ;dj                        Allocated to stack - _bp +1
                                   1467 ;clst                      Allocated to stack - _bp +16
                                   1468 ;i                         Allocated to stack - _bp +14
                                   1469 ;fs                        Allocated to stack - _bp +20
                                   1470 ;sloc0                     Allocated to stack - _bp +10
                                   1471 ;sloc1                     Allocated to stack - _bp +17
                                   1472 ;sloc2                     Allocated to stack - _bp +4
                                   1473 ;sloc3                     Allocated to stack - _bp +7
                                   1474 ;------------------------------------------------------------
                                   1475 ;	pff\source\pff.c:542: static FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
                                   1476 ;	-----------------------------------------
                                   1477 ;	 function dir_next
                                   1478 ;	-----------------------------------------
      000705                       1479 _dir_next:
      000705 C0*00            [24] 1480 	push	_bp
      000707 85 81*00         [24] 1481 	mov	_bp,sp
      00070A C0 82            [24] 1482 	push	dpl
      00070C C0 83            [24] 1483 	push	dph
      00070E C0 F0            [24] 1484 	push	b
      000710 E5 81            [12] 1485 	mov	a,sp
      000712 24 13            [12] 1486 	add	a,#0x13
      000714 F5 81            [12] 1487 	mov	sp,a
                                   1488 ;	pff\source\pff.c:548: FATFS *fs = FatFs;
      000716 90r00r00         [24] 1489 	mov	dptr,#_FatFs
      000719 E0               [24] 1490 	movx	a,@dptr
      00071A FA               [12] 1491 	mov	r2,a
      00071B A3               [24] 1492 	inc	dptr
      00071C E0               [24] 1493 	movx	a,@dptr
      00071D FB               [12] 1494 	mov	r3,a
      00071E A3               [24] 1495 	inc	dptr
      00071F E0               [24] 1496 	movx	a,@dptr
      000720 FC               [12] 1497 	mov	r4,a
      000721 E5*00            [12] 1498 	mov	a,_bp
      000723 24 14            [12] 1499 	add	a,#0x14
      000725 F8               [12] 1500 	mov	r0,a
      000726 A6 02            [24] 1501 	mov	@r0,ar2
      000728 08               [12] 1502 	inc	r0
      000729 A6 03            [24] 1503 	mov	@r0,ar3
      00072B 08               [12] 1504 	inc	r0
      00072C A6 04            [24] 1505 	mov	@r0,ar4
                                   1506 ;	pff\source\pff.c:551: i = dj->index + 1;
      00072E A8*00            [24] 1507 	mov	r0,_bp
      000730 08               [12] 1508 	inc	r0
      000731 86 82            [24] 1509 	mov	dpl,@r0
      000733 08               [12] 1510 	inc	r0
      000734 86 83            [24] 1511 	mov	dph,@r0
      000736 08               [12] 1512 	inc	r0
      000737 86 F0            [24] 1513 	mov	b,@r0
      000739 12r00r00         [24] 1514 	lcall	__gptrget
      00073C FB               [12] 1515 	mov	r3,a
      00073D A3               [24] 1516 	inc	dptr
      00073E 12r00r00         [24] 1517 	lcall	__gptrget
      000741 FC               [12] 1518 	mov	r4,a
      000742 0B               [12] 1519 	inc	r3
      000743 BB 00 01         [24] 1520 	cjne	r3,#0x00,00147$
      000746 0C               [12] 1521 	inc	r4
      000747                       1522 00147$:
      000747 E5*00            [12] 1523 	mov	a,_bp
      000749 24 0E            [12] 1524 	add	a,#0x0e
      00074B F8               [12] 1525 	mov	r0,a
      00074C A6 03            [24] 1526 	mov	@r0,ar3
      00074E 08               [12] 1527 	inc	r0
      00074F A6 04            [24] 1528 	mov	@r0,ar4
                                   1529 ;	pff\source\pff.c:552: if (!i || !dj->sect) return FR_NO_FILE;	/* Report EOT when index has reached 65535 */
      000751 E5*00            [12] 1530 	mov	a,_bp
      000753 24 0E            [12] 1531 	add	a,#0x0e
      000755 F8               [12] 1532 	mov	r0,a
      000756 E6               [12] 1533 	mov	a,@r0
      000757 08               [12] 1534 	inc	r0
      000758 46               [12] 1535 	orl	a,@r0
      000759 60 3B            [24] 1536 	jz	00101$
      00075B A8*00            [24] 1537 	mov	r0,_bp
      00075D 08               [12] 1538 	inc	r0
      00075E E5*00            [12] 1539 	mov	a,_bp
      000760 24 04            [12] 1540 	add	a,#0x04
      000762 F9               [12] 1541 	mov	r1,a
      000763 74 0D            [12] 1542 	mov	a,#0x0d
      000765 26               [12] 1543 	add	a,@r0
      000766 F7               [12] 1544 	mov	@r1,a
      000767 E4               [12] 1545 	clr	a
      000768 08               [12] 1546 	inc	r0
      000769 36               [12] 1547 	addc	a,@r0
      00076A 09               [12] 1548 	inc	r1
      00076B F7               [12] 1549 	mov	@r1,a
      00076C 08               [12] 1550 	inc	r0
      00076D E6               [12] 1551 	mov	a,@r0
      00076E 09               [12] 1552 	inc	r1
      00076F F7               [12] 1553 	mov	@r1,a
      000770 E5*00            [12] 1554 	mov	a,_bp
      000772 24 04            [12] 1555 	add	a,#0x04
      000774 F8               [12] 1556 	mov	r0,a
      000775 86 82            [24] 1557 	mov	dpl,@r0
      000777 08               [12] 1558 	inc	r0
      000778 86 83            [24] 1559 	mov	dph,@r0
      00077A 08               [12] 1560 	inc	r0
      00077B 86 F0            [24] 1561 	mov	b,@r0
      00077D 12r00r00         [24] 1562 	lcall	__gptrget
      000780 FE               [12] 1563 	mov	r6,a
      000781 A3               [24] 1564 	inc	dptr
      000782 12r00r00         [24] 1565 	lcall	__gptrget
      000785 FD               [12] 1566 	mov	r5,a
      000786 A3               [24] 1567 	inc	dptr
      000787 12r00r00         [24] 1568 	lcall	__gptrget
      00078A FC               [12] 1569 	mov	r4,a
      00078B A3               [24] 1570 	inc	dptr
      00078C 12r00r00         [24] 1571 	lcall	__gptrget
      00078F FF               [12] 1572 	mov	r7,a
      000790 EE               [12] 1573 	mov	a,r6
      000791 4D               [12] 1574 	orl	a,r5
      000792 4C               [12] 1575 	orl	a,r4
      000793 4F               [12] 1576 	orl	a,r7
      000794 70 06            [24] 1577 	jnz	00102$
      000796                       1578 00101$:
      000796 75 82 03         [24] 1579 	mov	dpl,#0x03
      000799 02r09r9A         [24] 1580 	ljmp	00117$
      00079C                       1581 00102$:
                                   1582 ;	pff\source\pff.c:554: if (!(i % 16)) {		/* Sector changed? */
      00079C E5*00            [12] 1583 	mov	a,_bp
      00079E 24 0E            [12] 1584 	add	a,#0x0e
      0007A0 F8               [12] 1585 	mov	r0,a
      0007A1 86 03            [24] 1586 	mov	ar3,@r0
      0007A3 08               [12] 1587 	inc	r0
      0007A4 86 02            [24] 1588 	mov	ar2,@r0
      0007A6 EB               [12] 1589 	mov	a,r3
      0007A7 54 0F            [12] 1590 	anl	a,#0x0f
      0007A9 60 03            [24] 1591 	jz	00151$
      0007AB 02r09r7D         [24] 1592 	ljmp	00116$
      0007AE                       1593 00151$:
                                   1594 ;	pff\source\pff.c:555: dj->sect++;			/* Next sector */
      0007AE 0E               [12] 1595 	inc	r6
      0007AF BE 00 09         [24] 1596 	cjne	r6,#0x00,00152$
      0007B2 0D               [12] 1597 	inc	r5
      0007B3 BD 00 05         [24] 1598 	cjne	r5,#0x00,00152$
      0007B6 0C               [12] 1599 	inc	r4
      0007B7 BC 00 01         [24] 1600 	cjne	r4,#0x00,00152$
      0007BA 0F               [12] 1601 	inc	r7
      0007BB                       1602 00152$:
      0007BB E5*00            [12] 1603 	mov	a,_bp
      0007BD 24 04            [12] 1604 	add	a,#0x04
      0007BF F8               [12] 1605 	mov	r0,a
      0007C0 86 82            [24] 1606 	mov	dpl,@r0
      0007C2 08               [12] 1607 	inc	r0
      0007C3 86 83            [24] 1608 	mov	dph,@r0
      0007C5 08               [12] 1609 	inc	r0
      0007C6 86 F0            [24] 1610 	mov	b,@r0
      0007C8 EE               [12] 1611 	mov	a,r6
      0007C9 12r00r00         [24] 1612 	lcall	__gptrput
      0007CC A3               [24] 1613 	inc	dptr
      0007CD ED               [12] 1614 	mov	a,r5
      0007CE 12r00r00         [24] 1615 	lcall	__gptrput
      0007D1 A3               [24] 1616 	inc	dptr
      0007D2 EC               [12] 1617 	mov	a,r4
      0007D3 12r00r00         [24] 1618 	lcall	__gptrput
      0007D6 A3               [24] 1619 	inc	dptr
      0007D7 EF               [12] 1620 	mov	a,r7
      0007D8 12r00r00         [24] 1621 	lcall	__gptrput
                                   1622 ;	pff\source\pff.c:557: if (dj->clust == 0) {	/* Static table */
      0007DB A8*00            [24] 1623 	mov	r0,_bp
      0007DD 08               [12] 1624 	inc	r0
      0007DE E5*00            [12] 1625 	mov	a,_bp
      0007E0 24 07            [12] 1626 	add	a,#0x07
      0007E2 F9               [12] 1627 	mov	r1,a
      0007E3 74 09            [12] 1628 	mov	a,#0x09
      0007E5 26               [12] 1629 	add	a,@r0
      0007E6 F7               [12] 1630 	mov	@r1,a
      0007E7 E4               [12] 1631 	clr	a
      0007E8 08               [12] 1632 	inc	r0
      0007E9 36               [12] 1633 	addc	a,@r0
      0007EA 09               [12] 1634 	inc	r1
      0007EB F7               [12] 1635 	mov	@r1,a
      0007EC 08               [12] 1636 	inc	r0
      0007ED E6               [12] 1637 	mov	a,@r0
      0007EE 09               [12] 1638 	inc	r1
      0007EF F7               [12] 1639 	mov	@r1,a
      0007F0 E5*00            [12] 1640 	mov	a,_bp
      0007F2 24 07            [12] 1641 	add	a,#0x07
      0007F4 F8               [12] 1642 	mov	r0,a
      0007F5 86 82            [24] 1643 	mov	dpl,@r0
      0007F7 08               [12] 1644 	inc	r0
      0007F8 86 83            [24] 1645 	mov	dph,@r0
      0007FA 08               [12] 1646 	inc	r0
      0007FB 86 F0            [24] 1647 	mov	b,@r0
      0007FD E5*00            [12] 1648 	mov	a,_bp
      0007FF 24 0A            [12] 1649 	add	a,#0x0a
      000801 F9               [12] 1650 	mov	r1,a
      000802 12r00r00         [24] 1651 	lcall	__gptrget
      000805 F7               [12] 1652 	mov	@r1,a
      000806 A3               [24] 1653 	inc	dptr
      000807 12r00r00         [24] 1654 	lcall	__gptrget
      00080A 09               [12] 1655 	inc	r1
      00080B F7               [12] 1656 	mov	@r1,a
      00080C A3               [24] 1657 	inc	dptr
      00080D 12r00r00         [24] 1658 	lcall	__gptrget
      000810 09               [12] 1659 	inc	r1
      000811 F7               [12] 1660 	mov	@r1,a
      000812 A3               [24] 1661 	inc	dptr
      000813 12r00r00         [24] 1662 	lcall	__gptrget
      000816 09               [12] 1663 	inc	r1
      000817 F7               [12] 1664 	mov	@r1,a
      000818 E5*00            [12] 1665 	mov	a,_bp
      00081A 24 0A            [12] 1666 	add	a,#0x0a
      00081C F8               [12] 1667 	mov	r0,a
      00081D E6               [12] 1668 	mov	a,@r0
      00081E 08               [12] 1669 	inc	r0
      00081F 46               [12] 1670 	orl	a,@r0
      000820 08               [12] 1671 	inc	r0
      000821 46               [12] 1672 	orl	a,@r0
      000822 08               [12] 1673 	inc	r0
      000823 46               [12] 1674 	orl	a,@r0
      000824 70 35            [24] 1675 	jnz	00113$
                                   1676 ;	pff\source\pff.c:558: if (i >= fs->n_rootdir) return FR_NO_FILE;	/* Report EOT when end of table */
      000826 E5*00            [12] 1677 	mov	a,_bp
      000828 24 14            [12] 1678 	add	a,#0x14
      00082A F8               [12] 1679 	mov	r0,a
      00082B 74 04            [12] 1680 	mov	a,#0x04
      00082D 26               [12] 1681 	add	a,@r0
      00082E FA               [12] 1682 	mov	r2,a
      00082F E4               [12] 1683 	clr	a
      000830 08               [12] 1684 	inc	r0
      000831 36               [12] 1685 	addc	a,@r0
      000832 FB               [12] 1686 	mov	r3,a
      000833 08               [12] 1687 	inc	r0
      000834 86 04            [24] 1688 	mov	ar4,@r0
      000836 8A 82            [24] 1689 	mov	dpl,r2
      000838 8B 83            [24] 1690 	mov	dph,r3
      00083A 8C F0            [24] 1691 	mov	b,r4
      00083C 12r00r00         [24] 1692 	lcall	__gptrget
      00083F FA               [12] 1693 	mov	r2,a
      000840 A3               [24] 1694 	inc	dptr
      000841 12r00r00         [24] 1695 	lcall	__gptrget
      000844 FB               [12] 1696 	mov	r3,a
      000845 E5*00            [12] 1697 	mov	a,_bp
      000847 24 0E            [12] 1698 	add	a,#0x0e
      000849 F8               [12] 1699 	mov	r0,a
      00084A C3               [12] 1700 	clr	c
      00084B E6               [12] 1701 	mov	a,@r0
      00084C 9A               [12] 1702 	subb	a,r2
      00084D 08               [12] 1703 	inc	r0
      00084E E6               [12] 1704 	mov	a,@r0
      00084F 9B               [12] 1705 	subb	a,r3
      000850 50 03            [24] 1706 	jnc	00154$
      000852 02r09r7D         [24] 1707 	ljmp	00116$
      000855                       1708 00154$:
      000855 75 82 03         [24] 1709 	mov	dpl,#0x03
      000858 02r09r9A         [24] 1710 	ljmp	00117$
      00085B                       1711 00113$:
                                   1712 ;	pff\source\pff.c:561: if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
      00085B EA               [12] 1713 	mov	a,r2
      00085C C4               [12] 1714 	swap	a
      00085D CB               [12] 1715 	xch	a,r3
      00085E C4               [12] 1716 	swap	a
      00085F 54 0F            [12] 1717 	anl	a,#0x0f
      000861 6B               [12] 1718 	xrl	a,r3
      000862 CB               [12] 1719 	xch	a,r3
      000863 54 0F            [12] 1720 	anl	a,#0x0f
      000865 CB               [12] 1721 	xch	a,r3
      000866 6B               [12] 1722 	xrl	a,r3
      000867 CB               [12] 1723 	xch	a,r3
      000868 FC               [12] 1724 	mov	r4,a
      000869 E5*00            [12] 1725 	mov	a,_bp
      00086B 24 14            [12] 1726 	add	a,#0x14
      00086D F8               [12] 1727 	mov	r0,a
      00086E 74 02            [12] 1728 	mov	a,#0x02
      000870 26               [12] 1729 	add	a,@r0
      000871 FA               [12] 1730 	mov	r2,a
      000872 E4               [12] 1731 	clr	a
      000873 08               [12] 1732 	inc	r0
      000874 36               [12] 1733 	addc	a,@r0
      000875 FE               [12] 1734 	mov	r6,a
      000876 08               [12] 1735 	inc	r0
      000877 86 07            [24] 1736 	mov	ar7,@r0
      000879 8A 82            [24] 1737 	mov	dpl,r2
      00087B 8E 83            [24] 1738 	mov	dph,r6
      00087D 8F F0            [24] 1739 	mov	b,r7
      00087F 12r00r00         [24] 1740 	lcall	__gptrget
      000882 FA               [12] 1741 	mov	r2,a
      000883 7F 00            [12] 1742 	mov	r7,#0x00
      000885 1A               [12] 1743 	dec	r2
      000886 BA FF 01         [24] 1744 	cjne	r2,#0xff,00155$
      000889 1F               [12] 1745 	dec	r7
      00088A                       1746 00155$:
      00088A EA               [12] 1747 	mov	a,r2
      00088B 52 03            [12] 1748 	anl	ar3,a
      00088D EF               [12] 1749 	mov	a,r7
      00088E 52 04            [12] 1750 	anl	ar4,a
      000890 EB               [12] 1751 	mov	a,r3
      000891 4C               [12] 1752 	orl	a,r4
      000892 60 03            [24] 1753 	jz	00156$
      000894 02r09r7D         [24] 1754 	ljmp	00116$
      000897                       1755 00156$:
                                   1756 ;	pff\source\pff.c:562: clst = get_fat(dj->clust);		/* Get next cluster */
      000897 E5*00            [12] 1757 	mov	a,_bp
      000899 24 0A            [12] 1758 	add	a,#0x0a
      00089B F8               [12] 1759 	mov	r0,a
      00089C 86 82            [24] 1760 	mov	dpl,@r0
      00089E 08               [12] 1761 	inc	r0
      00089F 86 83            [24] 1762 	mov	dph,@r0
      0008A1 08               [12] 1763 	inc	r0
      0008A2 86 F0            [24] 1764 	mov	b,@r0
      0008A4 08               [12] 1765 	inc	r0
      0008A5 E6               [12] 1766 	mov	a,@r0
      0008A6 12r02r28         [24] 1767 	lcall	_get_fat
      0008A9 AD 82            [24] 1768 	mov	r5,dpl
      0008AB AE 83            [24] 1769 	mov	r6,dph
      0008AD AC F0            [24] 1770 	mov	r4,b
      0008AF FF               [12] 1771 	mov	r7,a
      0008B0 E5*00            [12] 1772 	mov	a,_bp
      0008B2 24 10            [12] 1773 	add	a,#0x10
      0008B4 F8               [12] 1774 	mov	r0,a
      0008B5 A6 05            [24] 1775 	mov	@r0,ar5
      0008B7 08               [12] 1776 	inc	r0
      0008B8 A6 06            [24] 1777 	mov	@r0,ar6
      0008BA 08               [12] 1778 	inc	r0
      0008BB A6 04            [24] 1779 	mov	@r0,ar4
      0008BD 08               [12] 1780 	inc	r0
      0008BE A6 07            [24] 1781 	mov	@r0,ar7
                                   1782 ;	pff\source\pff.c:563: if (clst <= 1) return FR_DISK_ERR;
      0008C0 E5*00            [12] 1783 	mov	a,_bp
      0008C2 24 10            [12] 1784 	add	a,#0x10
      0008C4 F8               [12] 1785 	mov	r0,a
      0008C5 C3               [12] 1786 	clr	c
      0008C6 74 01            [12] 1787 	mov	a,#0x01
      0008C8 96               [12] 1788 	subb	a,@r0
      0008C9 E4               [12] 1789 	clr	a
      0008CA 08               [12] 1790 	inc	r0
      0008CB 96               [12] 1791 	subb	a,@r0
      0008CC E4               [12] 1792 	clr	a
      0008CD 08               [12] 1793 	inc	r0
      0008CE 96               [12] 1794 	subb	a,@r0
      0008CF E4               [12] 1795 	clr	a
      0008D0 08               [12] 1796 	inc	r0
      0008D1 96               [12] 1797 	subb	a,@r0
      0008D2 40 06            [24] 1798 	jc	00107$
      0008D4 75 82 01         [24] 1799 	mov	dpl,#0x01
      0008D7 02r09r9A         [24] 1800 	ljmp	00117$
      0008DA                       1801 00107$:
                                   1802 ;	pff\source\pff.c:564: if (clst >= fs->n_fatent) return FR_NO_FILE;	/* Report EOT when it reached end of dynamic table */
      0008DA E5*00            [12] 1803 	mov	a,_bp
      0008DC 24 14            [12] 1804 	add	a,#0x14
      0008DE F8               [12] 1805 	mov	r0,a
      0008DF 74 06            [12] 1806 	mov	a,#0x06
      0008E1 26               [12] 1807 	add	a,@r0
      0008E2 FD               [12] 1808 	mov	r5,a
      0008E3 E4               [12] 1809 	clr	a
      0008E4 08               [12] 1810 	inc	r0
      0008E5 36               [12] 1811 	addc	a,@r0
      0008E6 FE               [12] 1812 	mov	r6,a
      0008E7 08               [12] 1813 	inc	r0
      0008E8 86 07            [24] 1814 	mov	ar7,@r0
      0008EA 8D 82            [24] 1815 	mov	dpl,r5
      0008EC 8E 83            [24] 1816 	mov	dph,r6
      0008EE 8F F0            [24] 1817 	mov	b,r7
      0008F0 12r00r00         [24] 1818 	lcall	__gptrget
      0008F3 FD               [12] 1819 	mov	r5,a
      0008F4 A3               [24] 1820 	inc	dptr
      0008F5 12r00r00         [24] 1821 	lcall	__gptrget
      0008F8 FE               [12] 1822 	mov	r6,a
      0008F9 A3               [24] 1823 	inc	dptr
      0008FA 12r00r00         [24] 1824 	lcall	__gptrget
      0008FD FF               [12] 1825 	mov	r7,a
      0008FE A3               [24] 1826 	inc	dptr
      0008FF 12r00r00         [24] 1827 	lcall	__gptrget
      000902 FC               [12] 1828 	mov	r4,a
      000903 E5*00            [12] 1829 	mov	a,_bp
      000905 24 10            [12] 1830 	add	a,#0x10
      000907 F8               [12] 1831 	mov	r0,a
      000908 C3               [12] 1832 	clr	c
      000909 E6               [12] 1833 	mov	a,@r0
      00090A 9D               [12] 1834 	subb	a,r5
      00090B 08               [12] 1835 	inc	r0
      00090C E6               [12] 1836 	mov	a,@r0
      00090D 9E               [12] 1837 	subb	a,r6
      00090E 08               [12] 1838 	inc	r0
      00090F E6               [12] 1839 	mov	a,@r0
      000910 9F               [12] 1840 	subb	a,r7
      000911 08               [12] 1841 	inc	r0
      000912 E6               [12] 1842 	mov	a,@r0
      000913 9C               [12] 1843 	subb	a,r4
      000914 40 06            [24] 1844 	jc	00109$
      000916 75 82 03         [24] 1845 	mov	dpl,#0x03
      000919 02r09r9A         [24] 1846 	ljmp	00117$
      00091C                       1847 00109$:
                                   1848 ;	pff\source\pff.c:565: dj->clust = clst;				/* Initialize data for new cluster */
      00091C E5*00            [12] 1849 	mov	a,_bp
      00091E 24 07            [12] 1850 	add	a,#0x07
      000920 F8               [12] 1851 	mov	r0,a
      000921 86 82            [24] 1852 	mov	dpl,@r0
      000923 08               [12] 1853 	inc	r0
      000924 86 83            [24] 1854 	mov	dph,@r0
      000926 08               [12] 1855 	inc	r0
      000927 86 F0            [24] 1856 	mov	b,@r0
      000929 E5*00            [12] 1857 	mov	a,_bp
      00092B 24 10            [12] 1858 	add	a,#0x10
      00092D F9               [12] 1859 	mov	r1,a
      00092E E7               [12] 1860 	mov	a,@r1
      00092F 12r00r00         [24] 1861 	lcall	__gptrput
      000932 A3               [24] 1862 	inc	dptr
      000933 09               [12] 1863 	inc	r1
      000934 E7               [12] 1864 	mov	a,@r1
      000935 12r00r00         [24] 1865 	lcall	__gptrput
      000938 A3               [24] 1866 	inc	dptr
      000939 09               [12] 1867 	inc	r1
      00093A E7               [12] 1868 	mov	a,@r1
      00093B 12r00r00         [24] 1869 	lcall	__gptrput
      00093E A3               [24] 1870 	inc	dptr
      00093F 09               [12] 1871 	inc	r1
      000940 E7               [12] 1872 	mov	a,@r1
      000941 12r00r00         [24] 1873 	lcall	__gptrput
                                   1874 ;	pff\source\pff.c:566: dj->sect = clust2sect(clst);
      000944 E5*00            [12] 1875 	mov	a,_bp
      000946 24 10            [12] 1876 	add	a,#0x10
      000948 F8               [12] 1877 	mov	r0,a
      000949 86 82            [24] 1878 	mov	dpl,@r0
      00094B 08               [12] 1879 	inc	r0
      00094C 86 83            [24] 1880 	mov	dph,@r0
      00094E 08               [12] 1881 	inc	r0
      00094F 86 F0            [24] 1882 	mov	b,@r0
      000951 08               [12] 1883 	inc	r0
      000952 E6               [12] 1884 	mov	a,@r0
      000953 12r03rC0         [24] 1885 	lcall	_clust2sect
      000956 AE 82            [24] 1886 	mov	r6,dpl
      000958 AD 83            [24] 1887 	mov	r5,dph
      00095A AC F0            [24] 1888 	mov	r4,b
      00095C FF               [12] 1889 	mov	r7,a
      00095D E5*00            [12] 1890 	mov	a,_bp
      00095F 24 04            [12] 1891 	add	a,#0x04
      000961 F8               [12] 1892 	mov	r0,a
      000962 86 82            [24] 1893 	mov	dpl,@r0
      000964 08               [12] 1894 	inc	r0
      000965 86 83            [24] 1895 	mov	dph,@r0
      000967 08               [12] 1896 	inc	r0
      000968 86 F0            [24] 1897 	mov	b,@r0
      00096A EE               [12] 1898 	mov	a,r6
      00096B 12r00r00         [24] 1899 	lcall	__gptrput
      00096E A3               [24] 1900 	inc	dptr
      00096F ED               [12] 1901 	mov	a,r5
      000970 12r00r00         [24] 1902 	lcall	__gptrput
      000973 A3               [24] 1903 	inc	dptr
      000974 EC               [12] 1904 	mov	a,r4
      000975 12r00r00         [24] 1905 	lcall	__gptrput
      000978 A3               [24] 1906 	inc	dptr
      000979 EF               [12] 1907 	mov	a,r7
      00097A 12r00r00         [24] 1908 	lcall	__gptrput
      00097D                       1909 00116$:
                                   1910 ;	pff\source\pff.c:571: dj->index = i;
      00097D A8*00            [24] 1911 	mov	r0,_bp
      00097F 08               [12] 1912 	inc	r0
      000980 86 82            [24] 1913 	mov	dpl,@r0
      000982 08               [12] 1914 	inc	r0
      000983 86 83            [24] 1915 	mov	dph,@r0
      000985 08               [12] 1916 	inc	r0
      000986 86 F0            [24] 1917 	mov	b,@r0
      000988 E5*00            [12] 1918 	mov	a,_bp
      00098A 24 0E            [12] 1919 	add	a,#0x0e
      00098C F9               [12] 1920 	mov	r1,a
      00098D E7               [12] 1921 	mov	a,@r1
      00098E 12r00r00         [24] 1922 	lcall	__gptrput
      000991 A3               [24] 1923 	inc	dptr
      000992 09               [12] 1924 	inc	r1
      000993 E7               [12] 1925 	mov	a,@r1
      000994 12r00r00         [24] 1926 	lcall	__gptrput
                                   1927 ;	pff\source\pff.c:573: return FR_OK;
      000997 75 82 00         [24] 1928 	mov	dpl,#0x00
      00099A                       1929 00117$:
                                   1930 ;	pff\source\pff.c:574: }
      00099A 85*00 81         [24] 1931 	mov	sp,_bp
      00099D D0*00            [24] 1932 	pop	_bp
      00099F 22               [24] 1933 	ret
                                   1934 ;------------------------------------------------------------
                                   1935 ;Allocation info for local variables in function 'dir_find'
                                   1936 ;------------------------------------------------------------
                                   1937 ;dir                       Allocated to stack - _bp -5
                                   1938 ;dj                        Allocated to stack - _bp +1
                                   1939 ;res                       Allocated to registers r6 
                                   1940 ;c                         Allocated to registers 
                                   1941 ;sloc0                     Allocated to stack - _bp +4
                                   1942 ;sloc1                     Allocated to stack - _bp +7
                                   1943 ;------------------------------------------------------------
                                   1944 ;	pff\source\pff.c:583: static FRESULT dir_find (
                                   1945 ;	-----------------------------------------
                                   1946 ;	 function dir_find
                                   1947 ;	-----------------------------------------
      0009A0                       1948 _dir_find:
      0009A0 C0*00            [24] 1949 	push	_bp
      0009A2 85 81*00         [24] 1950 	mov	_bp,sp
      0009A5 C0 82            [24] 1951 	push	dpl
      0009A7 C0 83            [24] 1952 	push	dph
      0009A9 C0 F0            [24] 1953 	push	b
      0009AB E5 81            [12] 1954 	mov	a,sp
      0009AD 24 06            [12] 1955 	add	a,#0x06
      0009AF F5 81            [12] 1956 	mov	sp,a
                                   1957 ;	pff\source\pff.c:592: res = dir_rewind(dj);			/* Rewind directory object */
      0009B1 A8*00            [24] 1958 	mov	r0,_bp
      0009B3 08               [12] 1959 	inc	r0
      0009B4 86 82            [24] 1960 	mov	dpl,@r0
      0009B6 08               [12] 1961 	inc	r0
      0009B7 86 83            [24] 1962 	mov	dph,@r0
      0009B9 08               [12] 1963 	inc	r0
      0009BA 86 F0            [24] 1964 	mov	b,@r0
      0009BC 12r05r7D         [24] 1965 	lcall	_dir_rewind
                                   1966 ;	pff\source\pff.c:593: if (res != FR_OK) return res;
      0009BF E5 82            [12] 1967 	mov	a,dpl
      0009C1 FC               [12] 1968 	mov	r4,a
      0009C2 60 05            [24] 1969 	jz	00122$
      0009C4 8C 82            [24] 1970 	mov	dpl,r4
      0009C6 02r0Br6D         [24] 1971 	ljmp	00113$
                                   1972 ;	pff\source\pff.c:595: do {
      0009C9                       1973 00122$:
      0009C9 A8*00            [24] 1974 	mov	r0,_bp
      0009CB 08               [12] 1975 	inc	r0
      0009CC 74 02            [12] 1976 	mov	a,#0x02
      0009CE 26               [12] 1977 	add	a,@r0
      0009CF FA               [12] 1978 	mov	r2,a
      0009D0 E4               [12] 1979 	clr	a
      0009D1 08               [12] 1980 	inc	r0
      0009D2 36               [12] 1981 	addc	a,@r0
      0009D3 FB               [12] 1982 	mov	r3,a
      0009D4 08               [12] 1983 	inc	r0
      0009D5 86 04            [24] 1984 	mov	ar4,@r0
      0009D7 A8*00            [24] 1985 	mov	r0,_bp
      0009D9 08               [12] 1986 	inc	r0
      0009DA E5*00            [12] 1987 	mov	a,_bp
      0009DC 24 04            [12] 1988 	add	a,#0x04
      0009DE F9               [12] 1989 	mov	r1,a
      0009DF 74 0D            [12] 1990 	mov	a,#0x0d
      0009E1 26               [12] 1991 	add	a,@r0
      0009E2 F7               [12] 1992 	mov	@r1,a
      0009E3 E4               [12] 1993 	clr	a
      0009E4 08               [12] 1994 	inc	r0
      0009E5 36               [12] 1995 	addc	a,@r0
      0009E6 09               [12] 1996 	inc	r1
      0009E7 F7               [12] 1997 	mov	@r1,a
      0009E8 08               [12] 1998 	inc	r0
      0009E9 E6               [12] 1999 	mov	a,@r0
      0009EA 09               [12] 2000 	inc	r1
      0009EB F7               [12] 2001 	mov	@r1,a
      0009EC                       2002 00110$:
                                   2003 ;	pff\source\pff.c:596: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
      0009EC C0 02            [24] 2004 	push	ar2
      0009EE C0 03            [24] 2005 	push	ar3
      0009F0 C0 04            [24] 2006 	push	ar4
      0009F2 A8*00            [24] 2007 	mov	r0,_bp
      0009F4 08               [12] 2008 	inc	r0
      0009F5 86 82            [24] 2009 	mov	dpl,@r0
      0009F7 08               [12] 2010 	inc	r0
      0009F8 86 83            [24] 2011 	mov	dph,@r0
      0009FA 08               [12] 2012 	inc	r0
      0009FB 86 F0            [24] 2013 	mov	b,@r0
      0009FD 12r00r00         [24] 2014 	lcall	__gptrget
      000A00 FB               [12] 2015 	mov	r3,a
      000A01 A3               [24] 2016 	inc	dptr
      000A02 12r00r00         [24] 2017 	lcall	__gptrget
      000A05 53 03 0F         [24] 2018 	anl	ar3,#0x0f
      000A08 E4               [12] 2019 	clr	a
      000A09 C4               [12] 2020 	swap	a
      000A0A 23               [12] 2021 	rl	a
      000A0B 54 E0            [12] 2022 	anl	a,#0xe0
      000A0D CB               [12] 2023 	xch	a,r3
      000A0E C4               [12] 2024 	swap	a
      000A0F 23               [12] 2025 	rl	a
      000A10 CB               [12] 2026 	xch	a,r3
      000A11 6B               [12] 2027 	xrl	a,r3
      000A12 CB               [12] 2028 	xch	a,r3
      000A13 54 E0            [12] 2029 	anl	a,#0xe0
      000A15 CB               [12] 2030 	xch	a,r3
      000A16 6B               [12] 2031 	xrl	a,r3
      000A17 FC               [12] 2032 	mov	r4,a
      000A18 E5*00            [12] 2033 	mov	a,_bp
      000A1A 24 04            [12] 2034 	add	a,#0x04
      000A1C F8               [12] 2035 	mov	r0,a
      000A1D 86 82            [24] 2036 	mov	dpl,@r0
      000A1F 08               [12] 2037 	inc	r0
      000A20 86 83            [24] 2038 	mov	dph,@r0
      000A22 08               [12] 2039 	inc	r0
      000A23 86 F0            [24] 2040 	mov	b,@r0
      000A25 12r00r00         [24] 2041 	lcall	__gptrget
      000A28 FA               [12] 2042 	mov	r2,a
      000A29 A3               [24] 2043 	inc	dptr
      000A2A 12r00r00         [24] 2044 	lcall	__gptrget
      000A2D FD               [12] 2045 	mov	r5,a
      000A2E A3               [24] 2046 	inc	dptr
      000A2F 12r00r00         [24] 2047 	lcall	__gptrget
      000A32 FE               [12] 2048 	mov	r6,a
      000A33 A3               [24] 2049 	inc	dptr
      000A34 12r00r00         [24] 2050 	lcall	__gptrget
      000A37 FF               [12] 2051 	mov	r7,a
      000A38 C0 04            [24] 2052 	push	ar4
      000A3A C0 03            [24] 2053 	push	ar3
      000A3C C0 02            [24] 2054 	push	ar2
      000A3E 74 20            [12] 2055 	mov	a,#0x20
      000A40 C0 E0            [24] 2056 	push	acc
      000A42 E4               [12] 2057 	clr	a
      000A43 C0 E0            [24] 2058 	push	acc
      000A45 C0 03            [24] 2059 	push	ar3
      000A47 C0 04            [24] 2060 	push	ar4
      000A49 C0 02            [24] 2061 	push	ar2
      000A4B C0 05            [24] 2062 	push	ar5
      000A4D C0 06            [24] 2063 	push	ar6
      000A4F C0 07            [24] 2064 	push	ar7
      000A51 E5*00            [12] 2065 	mov	a,_bp
      000A53 24 FB            [12] 2066 	add	a,#0xfb
      000A55 F8               [12] 2067 	mov	r0,a
      000A56 86 82            [24] 2068 	mov	dpl,@r0
      000A58 08               [12] 2069 	inc	r0
      000A59 86 83            [24] 2070 	mov	dph,@r0
      000A5B 08               [12] 2071 	inc	r0
      000A5C 86 F0            [24] 2072 	mov	b,@r0
      000A5E 12r00r00         [24] 2073 	lcall	_disk_readp
      000A61 AF 82            [24] 2074 	mov	r7,dpl
      000A63 E5 81            [12] 2075 	mov	a,sp
      000A65 24 F8            [12] 2076 	add	a,#0xf8
      000A67 F5 81            [12] 2077 	mov	sp,a
      000A69 D0 02            [24] 2078 	pop	ar2
      000A6B D0 03            [24] 2079 	pop	ar3
      000A6D D0 04            [24] 2080 	pop	ar4
      000A6F D0 04            [24] 2081 	pop	ar4
      000A71 D0 03            [24] 2082 	pop	ar3
      000A73 D0 02            [24] 2083 	pop	ar2
      000A75 EF               [12] 2084 	mov	a,r7
      000A76 60 06            [24] 2085 	jz	00115$
                                   2086 ;	pff\source\pff.c:597: ? FR_DISK_ERR : FR_OK;
      000A78 7E 01            [12] 2087 	mov	r6,#0x01
      000A7A 7F 00            [12] 2088 	mov	r7,#0x00
      000A7C 80 04            [24] 2089 	sjmp	00116$
      000A7E                       2090 00115$:
      000A7E 7E 00            [12] 2091 	mov	r6,#0x00
      000A80 7F 00            [12] 2092 	mov	r7,#0x00
      000A82                       2093 00116$:
                                   2094 ;	pff\source\pff.c:598: if (res != FR_OK) break;
      000A82 EE               [12] 2095 	mov	a,r6
      000A83 60 03            [24] 2096 	jz	00149$
      000A85 02r0Br6B         [24] 2097 	ljmp	00112$
      000A88                       2098 00149$:
                                   2099 ;	pff\source\pff.c:599: c = dir[DIR_Name];	/* First character */
      000A88 E5*00            [12] 2100 	mov	a,_bp
      000A8A 24 FB            [12] 2101 	add	a,#0xfb
      000A8C F8               [12] 2102 	mov	r0,a
      000A8D E5*00            [12] 2103 	mov	a,_bp
      000A8F 24 07            [12] 2104 	add	a,#0x07
      000A91 F9               [12] 2105 	mov	r1,a
      000A92 E6               [12] 2106 	mov	a,@r0
      000A93 F7               [12] 2107 	mov	@r1,a
      000A94 08               [12] 2108 	inc	r0
      000A95 E6               [12] 2109 	mov	a,@r0
      000A96 09               [12] 2110 	inc	r1
      000A97 F7               [12] 2111 	mov	@r1,a
      000A98 08               [12] 2112 	inc	r0
      000A99 E6               [12] 2113 	mov	a,@r0
      000A9A 09               [12] 2114 	inc	r1
      000A9B F7               [12] 2115 	mov	@r1,a
      000A9C E5*00            [12] 2116 	mov	a,_bp
      000A9E 24 07            [12] 2117 	add	a,#0x07
      000AA0 F8               [12] 2118 	mov	r0,a
      000AA1 86 82            [24] 2119 	mov	dpl,@r0
      000AA3 08               [12] 2120 	inc	r0
      000AA4 86 83            [24] 2121 	mov	dph,@r0
      000AA6 08               [12] 2122 	inc	r0
      000AA7 86 F0            [24] 2123 	mov	b,@r0
      000AA9 12r00r00         [24] 2124 	lcall	__gptrget
      000AAC 70 05            [24] 2125 	jnz	00106$
                                   2126 ;	pff\source\pff.c:600: if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
      000AAE 7E 03            [12] 2127 	mov	r6,#0x03
      000AB0 02r0Br6B         [24] 2128 	ljmp	00112$
      000AB3                       2129 00106$:
                                   2130 ;	pff\source\pff.c:601: if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) break;	/* Is it a valid entry? */
      000AB3 C0 02            [24] 2131 	push	ar2
      000AB5 C0 03            [24] 2132 	push	ar3
      000AB7 C0 04            [24] 2133 	push	ar4
      000AB9 E5*00            [12] 2134 	mov	a,_bp
      000ABB 24 07            [12] 2135 	add	a,#0x07
      000ABD F8               [12] 2136 	mov	r0,a
      000ABE 74 0B            [12] 2137 	mov	a,#0x0b
      000AC0 26               [12] 2138 	add	a,@r0
      000AC1 FC               [12] 2139 	mov	r4,a
      000AC2 E4               [12] 2140 	clr	a
      000AC3 08               [12] 2141 	inc	r0
      000AC4 36               [12] 2142 	addc	a,@r0
      000AC5 FD               [12] 2143 	mov	r5,a
      000AC6 08               [12] 2144 	inc	r0
      000AC7 86 07            [24] 2145 	mov	ar7,@r0
      000AC9 8C 82            [24] 2146 	mov	dpl,r4
      000ACB 8D 83            [24] 2147 	mov	dph,r5
      000ACD 8F F0            [24] 2148 	mov	b,r7
      000ACF 12r00r00         [24] 2149 	lcall	__gptrget
      000AD2 D0 04            [24] 2150 	pop	ar4
      000AD4 D0 03            [24] 2151 	pop	ar3
      000AD6 D0 02            [24] 2152 	pop	ar2
      000AD8 20 E3 6C         [24] 2153 	jb	acc.3,00108$
      000ADB C0 06            [24] 2154 	push	ar6
      000ADD 8A 82            [24] 2155 	mov	dpl,r2
      000ADF 8B 83            [24] 2156 	mov	dph,r3
      000AE1 8C F0            [24] 2157 	mov	b,r4
      000AE3 12r00r00         [24] 2158 	lcall	__gptrget
      000AE6 FD               [12] 2159 	mov	r5,a
      000AE7 A3               [24] 2160 	inc	dptr
      000AE8 12r00r00         [24] 2161 	lcall	__gptrget
      000AEB FE               [12] 2162 	mov	r6,a
      000AEC A3               [24] 2163 	inc	dptr
      000AED 12r00r00         [24] 2164 	lcall	__gptrget
      000AF0 FF               [12] 2165 	mov	r7,a
      000AF1 E5*00            [12] 2166 	mov	a,_bp
      000AF3 24 07            [12] 2167 	add	a,#0x07
      000AF5 F8               [12] 2168 	mov	r0,a
      000AF6 A6 05            [24] 2169 	mov	@r0,ar5
      000AF8 08               [12] 2170 	inc	r0
      000AF9 A6 06            [24] 2171 	mov	@r0,ar6
      000AFB 08               [12] 2172 	inc	r0
      000AFC A6 07            [24] 2173 	mov	@r0,ar7
      000AFE E5*00            [12] 2174 	mov	a,_bp
      000B00 24 FB            [12] 2175 	add	a,#0xfb
      000B02 F8               [12] 2176 	mov	r0,a
      000B03 86 05            [24] 2177 	mov	ar5,@r0
      000B05 08               [12] 2178 	inc	r0
      000B06 86 06            [24] 2179 	mov	ar6,@r0
      000B08 08               [12] 2180 	inc	r0
      000B09 86 07            [24] 2181 	mov	ar7,@r0
      000B0B C0 04            [24] 2182 	push	ar4
      000B0D C0 03            [24] 2183 	push	ar3
      000B0F C0 02            [24] 2184 	push	ar2
      000B11 74 0B            [12] 2185 	mov	a,#0x0b
      000B13 C0 E0            [24] 2186 	push	acc
      000B15 E4               [12] 2187 	clr	a
      000B16 C0 E0            [24] 2188 	push	acc
      000B18 E5*00            [12] 2189 	mov	a,_bp
      000B1A 24 07            [12] 2190 	add	a,#0x07
      000B1C F8               [12] 2191 	mov	r0,a
      000B1D E6               [12] 2192 	mov	a,@r0
      000B1E C0 E0            [24] 2193 	push	acc
      000B20 08               [12] 2194 	inc	r0
      000B21 E6               [12] 2195 	mov	a,@r0
      000B22 C0 E0            [24] 2196 	push	acc
      000B24 08               [12] 2197 	inc	r0
      000B25 E6               [12] 2198 	mov	a,@r0
      000B26 C0 E0            [24] 2199 	push	acc
      000B28 8D 82            [24] 2200 	mov	dpl,r5
      000B2A 8E 83            [24] 2201 	mov	dph,r6
      000B2C 8F F0            [24] 2202 	mov	b,r7
      000B2E 12r01r79         [24] 2203 	lcall	_mem_cmp
      000B31 AE 82            [24] 2204 	mov	r6,dpl
      000B33 AF 83            [24] 2205 	mov	r7,dph
      000B35 E5 81            [12] 2206 	mov	a,sp
      000B37 24 FB            [12] 2207 	add	a,#0xfb
      000B39 F5 81            [12] 2208 	mov	sp,a
      000B3B D0 02            [24] 2209 	pop	ar2
      000B3D D0 03            [24] 2210 	pop	ar3
      000B3F D0 04            [24] 2211 	pop	ar4
      000B41 EE               [12] 2212 	mov	a,r6
      000B42 4F               [12] 2213 	orl	a,r7
      000B43 D0 06            [24] 2214 	pop	ar6
      000B45 60 24            [24] 2215 	jz	00112$
      000B47                       2216 00108$:
                                   2217 ;	pff\source\pff.c:602: res = dir_next(dj);					/* Next entry */
      000B47 A8*00            [24] 2218 	mov	r0,_bp
      000B49 08               [12] 2219 	inc	r0
      000B4A 86 82            [24] 2220 	mov	dpl,@r0
      000B4C 08               [12] 2221 	inc	r0
      000B4D 86 83            [24] 2222 	mov	dph,@r0
      000B4F 08               [12] 2223 	inc	r0
      000B50 86 F0            [24] 2224 	mov	b,@r0
      000B52 C0 04            [24] 2225 	push	ar4
      000B54 C0 03            [24] 2226 	push	ar3
      000B56 C0 02            [24] 2227 	push	ar2
      000B58 12r07r05         [24] 2228 	lcall	_dir_next
      000B5B AF 82            [24] 2229 	mov	r7,dpl
      000B5D D0 02            [24] 2230 	pop	ar2
      000B5F D0 03            [24] 2231 	pop	ar3
      000B61 D0 04            [24] 2232 	pop	ar4
      000B63 8F 06            [24] 2233 	mov	ar6,r7
                                   2234 ;	pff\source\pff.c:603: } while (res == FR_OK);
      000B65 EE               [12] 2235 	mov	a,r6
      000B66 70 03            [24] 2236 	jnz	00153$
      000B68 02r09rEC         [24] 2237 	ljmp	00110$
      000B6B                       2238 00153$:
      000B6B                       2239 00112$:
                                   2240 ;	pff\source\pff.c:605: return res;
      000B6B 8E 82            [24] 2241 	mov	dpl,r6
      000B6D                       2242 00113$:
                                   2243 ;	pff\source\pff.c:606: }
      000B6D 85*00 81         [24] 2244 	mov	sp,_bp
      000B70 D0*00            [24] 2245 	pop	_bp
      000B72 22               [24] 2246 	ret
                                   2247 ;------------------------------------------------------------
                                   2248 ;Allocation info for local variables in function 'dir_read'
                                   2249 ;------------------------------------------------------------
                                   2250 ;dir                       Allocated to stack - _bp -5
                                   2251 ;dj                        Allocated to stack - _bp +1
                                   2252 ;res                       Allocated to stack - _bp +8
                                   2253 ;a                         Allocated to registers r6 
                                   2254 ;c                         Allocated to registers r7 
                                   2255 ;sloc0                     Allocated to stack - _bp +4
                                   2256 ;------------------------------------------------------------
                                   2257 ;	pff\source\pff.c:615: static FRESULT dir_read (
                                   2258 ;	-----------------------------------------
                                   2259 ;	 function dir_read
                                   2260 ;	-----------------------------------------
      000B73                       2261 _dir_read:
      000B73 C0*00            [24] 2262 	push	_bp
      000B75 85 81*00         [24] 2263 	mov	_bp,sp
      000B78 C0 82            [24] 2264 	push	dpl
      000B7A C0 83            [24] 2265 	push	dph
      000B7C C0 F0            [24] 2266 	push	b
      000B7E E5 81            [12] 2267 	mov	a,sp
      000B80 24 05            [12] 2268 	add	a,#0x05
      000B82 F5 81            [12] 2269 	mov	sp,a
                                   2270 ;	pff\source\pff.c:624: res = FR_NO_FILE;
      000B84 E5*00            [12] 2271 	mov	a,_bp
      000B86 24 08            [12] 2272 	add	a,#0x08
      000B88 F8               [12] 2273 	mov	r0,a
      000B89 76 03            [12] 2274 	mov	@r0,#0x03
                                   2275 ;	pff\source\pff.c:625: while (dj->sect) {
      000B8B A8*00            [24] 2276 	mov	r0,_bp
      000B8D 08               [12] 2277 	inc	r0
      000B8E 74 0D            [12] 2278 	mov	a,#0x0d
      000B90 26               [12] 2279 	add	a,@r0
      000B91 FA               [12] 2280 	mov	r2,a
      000B92 E4               [12] 2281 	clr	a
      000B93 08               [12] 2282 	inc	r0
      000B94 36               [12] 2283 	addc	a,@r0
      000B95 FB               [12] 2284 	mov	r3,a
      000B96 08               [12] 2285 	inc	r0
      000B97 86 04            [24] 2286 	mov	ar4,@r0
      000B99                       2287 00111$:
      000B99 8A 82            [24] 2288 	mov	dpl,r2
      000B9B 8B 83            [24] 2289 	mov	dph,r3
      000B9D 8C F0            [24] 2290 	mov	b,r4
      000B9F E5*00            [12] 2291 	mov	a,_bp
      000BA1 24 04            [12] 2292 	add	a,#0x04
      000BA3 F8               [12] 2293 	mov	r0,a
      000BA4 12r00r00         [24] 2294 	lcall	__gptrget
      000BA7 F6               [12] 2295 	mov	@r0,a
      000BA8 A3               [24] 2296 	inc	dptr
      000BA9 12r00r00         [24] 2297 	lcall	__gptrget
      000BAC 08               [12] 2298 	inc	r0
      000BAD F6               [12] 2299 	mov	@r0,a
      000BAE A3               [24] 2300 	inc	dptr
      000BAF 12r00r00         [24] 2301 	lcall	__gptrget
      000BB2 08               [12] 2302 	inc	r0
      000BB3 F6               [12] 2303 	mov	@r0,a
      000BB4 A3               [24] 2304 	inc	dptr
      000BB5 12r00r00         [24] 2305 	lcall	__gptrget
      000BB8 08               [12] 2306 	inc	r0
      000BB9 F6               [12] 2307 	mov	@r0,a
      000BBA E5*00            [12] 2308 	mov	a,_bp
      000BBC 24 04            [12] 2309 	add	a,#0x04
      000BBE F8               [12] 2310 	mov	r0,a
      000BBF E6               [12] 2311 	mov	a,@r0
      000BC0 08               [12] 2312 	inc	r0
      000BC1 46               [12] 2313 	orl	a,@r0
      000BC2 08               [12] 2314 	inc	r0
      000BC3 46               [12] 2315 	orl	a,@r0
      000BC4 08               [12] 2316 	inc	r0
      000BC5 46               [12] 2317 	orl	a,@r0
      000BC6 70 03            [24] 2318 	jnz	00152$
      000BC8 02r0CrF7         [24] 2319 	ljmp	00113$
      000BCB                       2320 00152$:
                                   2321 ;	pff\source\pff.c:626: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
      000BCB C0 02            [24] 2322 	push	ar2
      000BCD C0 03            [24] 2323 	push	ar3
      000BCF C0 04            [24] 2324 	push	ar4
      000BD1 A8*00            [24] 2325 	mov	r0,_bp
      000BD3 08               [12] 2326 	inc	r0
      000BD4 86 82            [24] 2327 	mov	dpl,@r0
      000BD6 08               [12] 2328 	inc	r0
      000BD7 86 83            [24] 2329 	mov	dph,@r0
      000BD9 08               [12] 2330 	inc	r0
      000BDA 86 F0            [24] 2331 	mov	b,@r0
      000BDC 12r00r00         [24] 2332 	lcall	__gptrget
      000BDF FB               [12] 2333 	mov	r3,a
      000BE0 A3               [24] 2334 	inc	dptr
      000BE1 12r00r00         [24] 2335 	lcall	__gptrget
      000BE4 53 03 0F         [24] 2336 	anl	ar3,#0x0f
      000BE7 E4               [12] 2337 	clr	a
      000BE8 C4               [12] 2338 	swap	a
      000BE9 23               [12] 2339 	rl	a
      000BEA 54 E0            [12] 2340 	anl	a,#0xe0
      000BEC CB               [12] 2341 	xch	a,r3
      000BED C4               [12] 2342 	swap	a
      000BEE 23               [12] 2343 	rl	a
      000BEF CB               [12] 2344 	xch	a,r3
      000BF0 6B               [12] 2345 	xrl	a,r3
      000BF1 CB               [12] 2346 	xch	a,r3
      000BF2 54 E0            [12] 2347 	anl	a,#0xe0
      000BF4 CB               [12] 2348 	xch	a,r3
      000BF5 6B               [12] 2349 	xrl	a,r3
      000BF6 FC               [12] 2350 	mov	r4,a
      000BF7 C0 03            [24] 2351 	push	ar3
      000BF9 C0 02            [24] 2352 	push	ar2
      000BFB 74 20            [12] 2353 	mov	a,#0x20
      000BFD C0 E0            [24] 2354 	push	acc
      000BFF E4               [12] 2355 	clr	a
      000C00 C0 E0            [24] 2356 	push	acc
      000C02 C0 03            [24] 2357 	push	ar3
      000C04 C0 04            [24] 2358 	push	ar4
      000C06 E5*00            [12] 2359 	mov	a,_bp
      000C08 24 04            [12] 2360 	add	a,#0x04
      000C0A F8               [12] 2361 	mov	r0,a
      000C0B E6               [12] 2362 	mov	a,@r0
      000C0C C0 E0            [24] 2363 	push	acc
      000C0E 08               [12] 2364 	inc	r0
      000C0F E6               [12] 2365 	mov	a,@r0
      000C10 C0 E0            [24] 2366 	push	acc
      000C12 08               [12] 2367 	inc	r0
      000C13 E6               [12] 2368 	mov	a,@r0
      000C14 C0 E0            [24] 2369 	push	acc
      000C16 08               [12] 2370 	inc	r0
      000C17 E6               [12] 2371 	mov	a,@r0
      000C18 C0 E0            [24] 2372 	push	acc
      000C1A E5*00            [12] 2373 	mov	a,_bp
      000C1C 24 FB            [12] 2374 	add	a,#0xfb
      000C1E F8               [12] 2375 	mov	r0,a
      000C1F 86 82            [24] 2376 	mov	dpl,@r0
      000C21 08               [12] 2377 	inc	r0
      000C22 86 83            [24] 2378 	mov	dph,@r0
      000C24 08               [12] 2379 	inc	r0
      000C25 86 F0            [24] 2380 	mov	b,@r0
      000C27 12r00r00         [24] 2381 	lcall	_disk_readp
      000C2A AC 82            [24] 2382 	mov	r4,dpl
      000C2C E5 81            [12] 2383 	mov	a,sp
      000C2E 24 F8            [12] 2384 	add	a,#0xf8
      000C30 F5 81            [12] 2385 	mov	sp,a
      000C32 D0 02            [24] 2386 	pop	ar2
      000C34 D0 03            [24] 2387 	pop	ar3
      000C36 EC               [12] 2388 	mov	a,r4
      000C37 D0 04            [24] 2389 	pop	ar4
      000C39 D0 03            [24] 2390 	pop	ar3
      000C3B D0 02            [24] 2391 	pop	ar2
      000C3D 60 06            [24] 2392 	jz	00118$
                                   2393 ;	pff\source\pff.c:627: ? FR_DISK_ERR : FR_OK;
      000C3F 7F 01            [12] 2394 	mov	r7,#0x01
      000C41 7E 00            [12] 2395 	mov	r6,#0x00
      000C43 80 04            [24] 2396 	sjmp	00119$
      000C45                       2397 00118$:
      000C45 7F 00            [12] 2398 	mov	r7,#0x00
      000C47 7E 00            [12] 2399 	mov	r6,#0x00
      000C49                       2400 00119$:
      000C49 E5*00            [12] 2401 	mov	a,_bp
      000C4B 24 08            [12] 2402 	add	a,#0x08
      000C4D F8               [12] 2403 	mov	r0,a
      000C4E A6 07            [24] 2404 	mov	@r0,ar7
                                   2405 ;	pff\source\pff.c:628: if (res != FR_OK) break;
      000C50 E5*00            [12] 2406 	mov	a,_bp
      000C52 24 08            [12] 2407 	add	a,#0x08
      000C54 F8               [12] 2408 	mov	r0,a
      000C55 E6               [12] 2409 	mov	a,@r0
      000C56 60 03            [24] 2410 	jz	00154$
      000C58 02r0CrF7         [24] 2411 	ljmp	00113$
      000C5B                       2412 00154$:
                                   2413 ;	pff\source\pff.c:629: c = dir[DIR_Name];
      000C5B E5*00            [12] 2414 	mov	a,_bp
      000C5D 24 FB            [12] 2415 	add	a,#0xfb
      000C5F F8               [12] 2416 	mov	r0,a
      000C60 E5*00            [12] 2417 	mov	a,_bp
      000C62 24 04            [12] 2418 	add	a,#0x04
      000C64 F9               [12] 2419 	mov	r1,a
      000C65 E6               [12] 2420 	mov	a,@r0
      000C66 F7               [12] 2421 	mov	@r1,a
      000C67 08               [12] 2422 	inc	r0
      000C68 E6               [12] 2423 	mov	a,@r0
      000C69 09               [12] 2424 	inc	r1
      000C6A F7               [12] 2425 	mov	@r1,a
      000C6B 08               [12] 2426 	inc	r0
      000C6C E6               [12] 2427 	mov	a,@r0
      000C6D 09               [12] 2428 	inc	r1
      000C6E F7               [12] 2429 	mov	@r1,a
      000C6F E5*00            [12] 2430 	mov	a,_bp
      000C71 24 04            [12] 2431 	add	a,#0x04
      000C73 F8               [12] 2432 	mov	r0,a
      000C74 86 82            [24] 2433 	mov	dpl,@r0
      000C76 08               [12] 2434 	inc	r0
      000C77 86 83            [24] 2435 	mov	dph,@r0
      000C79 08               [12] 2436 	inc	r0
      000C7A 86 F0            [24] 2437 	mov	b,@r0
      000C7C 12r00r00         [24] 2438 	lcall	__gptrget
                                   2439 ;	pff\source\pff.c:630: if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
      000C7F FF               [12] 2440 	mov	r7,a
      000C80 70 09            [24] 2441 	jnz	00104$
      000C82 E5*00            [12] 2442 	mov	a,_bp
      000C84 24 08            [12] 2443 	add	a,#0x08
      000C86 F8               [12] 2444 	mov	r0,a
      000C87 76 03            [12] 2445 	mov	@r0,#0x03
      000C89 80 6C            [24] 2446 	sjmp	00113$
      000C8B                       2447 00104$:
                                   2448 ;	pff\source\pff.c:631: a = dir[DIR_Attr] & AM_MASK;
      000C8B C0 02            [24] 2449 	push	ar2
      000C8D C0 03            [24] 2450 	push	ar3
      000C8F C0 04            [24] 2451 	push	ar4
      000C91 E5*00            [12] 2452 	mov	a,_bp
      000C93 24 04            [12] 2453 	add	a,#0x04
      000C95 F8               [12] 2454 	mov	r0,a
      000C96 74 0B            [12] 2455 	mov	a,#0x0b
      000C98 26               [12] 2456 	add	a,@r0
      000C99 FC               [12] 2457 	mov	r4,a
      000C9A E4               [12] 2458 	clr	a
      000C9B 08               [12] 2459 	inc	r0
      000C9C 36               [12] 2460 	addc	a,@r0
      000C9D FD               [12] 2461 	mov	r5,a
      000C9E 08               [12] 2462 	inc	r0
      000C9F 86 06            [24] 2463 	mov	ar6,@r0
      000CA1 8C 82            [24] 2464 	mov	dpl,r4
      000CA3 8D 83            [24] 2465 	mov	dph,r5
      000CA5 8E F0            [24] 2466 	mov	b,r6
      000CA7 12r00r00         [24] 2467 	lcall	__gptrget
      000CAA FC               [12] 2468 	mov	r4,a
      000CAB 74 3F            [12] 2469 	mov	a,#0x3f
      000CAD 5C               [12] 2470 	anl	a,r4
      000CAE FE               [12] 2471 	mov	r6,a
                                   2472 ;	pff\source\pff.c:632: if (c != 0xE5 && c != '.' && !(a & AM_VOL))	break;	/* Is it a valid entry? */
      000CAF BF E5 08         [24] 2473 	cjne	r7,#0xe5,00156$
      000CB2 D0 04            [24] 2474 	pop	ar4
      000CB4 D0 03            [24] 2475 	pop	ar3
      000CB6 D0 02            [24] 2476 	pop	ar2
      000CB8 80 0F            [24] 2477 	sjmp	00106$
      000CBA                       2478 00156$:
      000CBA D0 04            [24] 2479 	pop	ar4
      000CBC D0 03            [24] 2480 	pop	ar3
      000CBE D0 02            [24] 2481 	pop	ar2
      000CC0 BF 2E 02         [24] 2482 	cjne	r7,#0x2e,00157$
      000CC3 80 04            [24] 2483 	sjmp	00106$
      000CC5                       2484 00157$:
      000CC5 EE               [12] 2485 	mov	a,r6
      000CC6 30 E3 2E         [24] 2486 	jnb	acc.3,00113$
      000CC9                       2487 00106$:
                                   2488 ;	pff\source\pff.c:633: res = dir_next(dj);			/* Next entry */
      000CC9 A8*00            [24] 2489 	mov	r0,_bp
      000CCB 08               [12] 2490 	inc	r0
      000CCC 86 82            [24] 2491 	mov	dpl,@r0
      000CCE 08               [12] 2492 	inc	r0
      000CCF 86 83            [24] 2493 	mov	dph,@r0
      000CD1 08               [12] 2494 	inc	r0
      000CD2 86 F0            [24] 2495 	mov	b,@r0
      000CD4 C0 04            [24] 2496 	push	ar4
      000CD6 C0 03            [24] 2497 	push	ar3
      000CD8 C0 02            [24] 2498 	push	ar2
      000CDA 12r07r05         [24] 2499 	lcall	_dir_next
      000CDD AF 82            [24] 2500 	mov	r7,dpl
      000CDF D0 02            [24] 2501 	pop	ar2
      000CE1 D0 03            [24] 2502 	pop	ar3
      000CE3 D0 04            [24] 2503 	pop	ar4
      000CE5 E5*00            [12] 2504 	mov	a,_bp
      000CE7 24 08            [12] 2505 	add	a,#0x08
      000CE9 F8               [12] 2506 	mov	r0,a
      000CEA A6 07            [24] 2507 	mov	@r0,ar7
                                   2508 ;	pff\source\pff.c:634: if (res != FR_OK) break;
      000CEC E5*00            [12] 2509 	mov	a,_bp
      000CEE 24 08            [12] 2510 	add	a,#0x08
      000CF0 F8               [12] 2511 	mov	r0,a
      000CF1 E6               [12] 2512 	mov	a,@r0
      000CF2 70 03            [24] 2513 	jnz	00159$
      000CF4 02r0Br99         [24] 2514 	ljmp	00111$
      000CF7                       2515 00159$:
      000CF7                       2516 00113$:
                                   2517 ;	pff\source\pff.c:637: if (res != FR_OK) dj->sect = 0;
      000CF7 E5*00            [12] 2518 	mov	a,_bp
      000CF9 24 08            [12] 2519 	add	a,#0x08
      000CFB F8               [12] 2520 	mov	r0,a
      000CFC E6               [12] 2521 	mov	a,@r0
      000CFD 60 24            [24] 2522 	jz	00115$
      000CFF A8*00            [24] 2523 	mov	r0,_bp
      000D01 08               [12] 2524 	inc	r0
      000D02 74 0D            [12] 2525 	mov	a,#0x0d
      000D04 26               [12] 2526 	add	a,@r0
      000D05 FD               [12] 2527 	mov	r5,a
      000D06 E4               [12] 2528 	clr	a
      000D07 08               [12] 2529 	inc	r0
      000D08 36               [12] 2530 	addc	a,@r0
      000D09 FE               [12] 2531 	mov	r6,a
      000D0A 08               [12] 2532 	inc	r0
      000D0B 86 07            [24] 2533 	mov	ar7,@r0
      000D0D 8D 82            [24] 2534 	mov	dpl,r5
      000D0F 8E 83            [24] 2535 	mov	dph,r6
      000D11 8F F0            [24] 2536 	mov	b,r7
      000D13 E4               [12] 2537 	clr	a
      000D14 12r00r00         [24] 2538 	lcall	__gptrput
      000D17 A3               [24] 2539 	inc	dptr
      000D18 12r00r00         [24] 2540 	lcall	__gptrput
      000D1B A3               [24] 2541 	inc	dptr
      000D1C 12r00r00         [24] 2542 	lcall	__gptrput
      000D1F A3               [24] 2543 	inc	dptr
      000D20 12r00r00         [24] 2544 	lcall	__gptrput
      000D23                       2545 00115$:
                                   2546 ;	pff\source\pff.c:639: return res;
      000D23 E5*00            [12] 2547 	mov	a,_bp
      000D25 24 08            [12] 2548 	add	a,#0x08
      000D27 F8               [12] 2549 	mov	r0,a
      000D28 86 82            [24] 2550 	mov	dpl,@r0
                                   2551 ;	pff\source\pff.c:640: }
      000D2A 85*00 81         [24] 2552 	mov	sp,_bp
      000D2D D0*00            [24] 2553 	pop	_bp
      000D2F 22               [24] 2554 	ret
                                   2555 ;------------------------------------------------------------
                                   2556 ;Allocation info for local variables in function 'create_name'
                                   2557 ;------------------------------------------------------------
                                   2558 ;path                      Allocated to stack - _bp -5
                                   2559 ;dj                        Allocated to registers r5 r6 r7 
                                   2560 ;c                         Allocated to stack - _bp +1
                                   2561 ;d                         Allocated to registers 
                                   2562 ;ni                        Allocated to stack - _bp +2
                                   2563 ;si                        Allocated to registers r5 
                                   2564 ;i                         Allocated to stack - _bp +3
                                   2565 ;sfn                       Allocated to stack - _bp +4
                                   2566 ;p                         Allocated to stack - _bp +7
                                   2567 ;------------------------------------------------------------
                                   2568 ;	pff\source\pff.c:650: static FRESULT create_name (
                                   2569 ;	-----------------------------------------
                                   2570 ;	 function create_name
                                   2571 ;	-----------------------------------------
      000D30                       2572 _create_name:
      000D30 C0*00            [24] 2573 	push	_bp
      000D32 E5 81            [12] 2574 	mov	a,sp
      000D34 F5*00            [12] 2575 	mov	_bp,a
      000D36 24 09            [12] 2576 	add	a,#0x09
      000D38 F5 81            [12] 2577 	mov	sp,a
      000D3A AD 82            [24] 2578 	mov	r5,dpl
      000D3C AE 83            [24] 2579 	mov	r6,dph
      000D3E AF F0            [24] 2580 	mov	r7,b
                                   2581 ;	pff\source\pff.c:662: sfn = dj->fn;
      000D40 74 02            [12] 2582 	mov	a,#0x02
      000D42 2D               [12] 2583 	add	a,r5
      000D43 FD               [12] 2584 	mov	r5,a
      000D44 E4               [12] 2585 	clr	a
      000D45 3E               [12] 2586 	addc	a,r6
      000D46 FE               [12] 2587 	mov	r6,a
      000D47 8D 82            [24] 2588 	mov	dpl,r5
      000D49 8E 83            [24] 2589 	mov	dph,r6
      000D4B 8F F0            [24] 2590 	mov	b,r7
      000D4D E5*00            [12] 2591 	mov	a,_bp
      000D4F 24 04            [12] 2592 	add	a,#0x04
      000D51 F8               [12] 2593 	mov	r0,a
      000D52 12r00r00         [24] 2594 	lcall	__gptrget
      000D55 F6               [12] 2595 	mov	@r0,a
      000D56 A3               [24] 2596 	inc	dptr
      000D57 12r00r00         [24] 2597 	lcall	__gptrget
      000D5A 08               [12] 2598 	inc	r0
      000D5B F6               [12] 2599 	mov	@r0,a
      000D5C A3               [24] 2600 	inc	dptr
      000D5D 12r00r00         [24] 2601 	lcall	__gptrget
      000D60 08               [12] 2602 	inc	r0
      000D61 F6               [12] 2603 	mov	@r0,a
                                   2604 ;	pff\source\pff.c:663: mem_set(sfn, ' ', 11);
      000D62 E5*00            [12] 2605 	mov	a,_bp
      000D64 24 04            [12] 2606 	add	a,#0x04
      000D66 F8               [12] 2607 	mov	r0,a
      000D67 86 02            [24] 2608 	mov	ar2,@r0
      000D69 08               [12] 2609 	inc	r0
      000D6A 86 03            [24] 2610 	mov	ar3,@r0
      000D6C 08               [12] 2611 	inc	r0
      000D6D 86 04            [24] 2612 	mov	ar4,@r0
      000D6F 74 0B            [12] 2613 	mov	a,#0x0b
      000D71 C0 E0            [24] 2614 	push	acc
      000D73 E4               [12] 2615 	clr	a
      000D74 C0 E0            [24] 2616 	push	acc
      000D76 74 20            [12] 2617 	mov	a,#0x20
      000D78 C0 E0            [24] 2618 	push	acc
      000D7A E4               [12] 2619 	clr	a
      000D7B C0 E0            [24] 2620 	push	acc
      000D7D 8A 82            [24] 2621 	mov	dpl,r2
      000D7F 8B 83            [24] 2622 	mov	dph,r3
      000D81 8C F0            [24] 2623 	mov	b,r4
      000D83 12r01r29         [24] 2624 	lcall	_mem_set
      000D86 E5 81            [12] 2625 	mov	a,sp
      000D88 24 FC            [12] 2626 	add	a,#0xfc
      000D8A F5 81            [12] 2627 	mov	sp,a
                                   2628 ;	pff\source\pff.c:664: si = i = 0; ni = 8;
      000D8C E5*00            [12] 2629 	mov	a,_bp
      000D8E 24 03            [12] 2630 	add	a,#0x03
      000D90 F8               [12] 2631 	mov	r0,a
      000D91 76 00            [12] 2632 	mov	@r0,#0x00
      000D93 A8*00            [24] 2633 	mov	r0,_bp
      000D95 08               [12] 2634 	inc	r0
      000D96 08               [12] 2635 	inc	r0
      000D97 76 08            [12] 2636 	mov	@r0,#0x08
                                   2637 ;	pff\source\pff.c:665: p = *path;
      000D99 E5*00            [12] 2638 	mov	a,_bp
      000D9B 24 FB            [12] 2639 	add	a,#0xfb
      000D9D F8               [12] 2640 	mov	r0,a
      000D9E 86 02            [24] 2641 	mov	ar2,@r0
      000DA0 08               [12] 2642 	inc	r0
      000DA1 86 06            [24] 2643 	mov	ar6,@r0
      000DA3 08               [12] 2644 	inc	r0
      000DA4 86 07            [24] 2645 	mov	ar7,@r0
      000DA6 8A 82            [24] 2646 	mov	dpl,r2
      000DA8 8E 83            [24] 2647 	mov	dph,r6
      000DAA 8F F0            [24] 2648 	mov	b,r7
      000DAC E5*00            [12] 2649 	mov	a,_bp
      000DAE 24 07            [12] 2650 	add	a,#0x07
      000DB0 F8               [12] 2651 	mov	r0,a
      000DB1 12r00r00         [24] 2652 	lcall	__gptrget
      000DB4 F6               [12] 2653 	mov	@r0,a
      000DB5 A3               [24] 2654 	inc	dptr
      000DB6 12r00r00         [24] 2655 	lcall	__gptrget
      000DB9 08               [12] 2656 	inc	r0
      000DBA F6               [12] 2657 	mov	@r0,a
      000DBB A3               [24] 2658 	inc	dptr
      000DBC 12r00r00         [24] 2659 	lcall	__gptrget
      000DBF 08               [12] 2660 	inc	r0
      000DC0 F6               [12] 2661 	mov	@r0,a
      000DC1 7D 00            [12] 2662 	mov	r5,#0x00
      000DC3                       2663 00120$:
                                   2664 ;	pff\source\pff.c:667: c = p[si++];
      000DC3 C0 02            [24] 2665 	push	ar2
      000DC5 C0 06            [24] 2666 	push	ar6
      000DC7 C0 07            [24] 2667 	push	ar7
      000DC9 E5*00            [12] 2668 	mov	a,_bp
      000DCB 24 07            [12] 2669 	add	a,#0x07
      000DCD F8               [12] 2670 	mov	r0,a
      000DCE ED               [12] 2671 	mov	a,r5
      000DCF 26               [12] 2672 	add	a,@r0
      000DD0 FB               [12] 2673 	mov	r3,a
      000DD1 E4               [12] 2674 	clr	a
      000DD2 08               [12] 2675 	inc	r0
      000DD3 36               [12] 2676 	addc	a,@r0
      000DD4 FC               [12] 2677 	mov	r4,a
      000DD5 08               [12] 2678 	inc	r0
      000DD6 86 07            [24] 2679 	mov	ar7,@r0
      000DD8 0D               [12] 2680 	inc	r5
      000DD9 8B 82            [24] 2681 	mov	dpl,r3
      000DDB 8C 83            [24] 2682 	mov	dph,r4
      000DDD 8F F0            [24] 2683 	mov	b,r7
      000DDF A8*00            [24] 2684 	mov	r0,_bp
      000DE1 08               [12] 2685 	inc	r0
      000DE2 12r00r00         [24] 2686 	lcall	__gptrget
      000DE5 F6               [12] 2687 	mov	@r0,a
                                   2688 ;	pff\source\pff.c:668: if (c <= ' ' || c == '/') break;	/* Break on end of segment */
      000DE6 A8*00            [24] 2689 	mov	r0,_bp
      000DE8 08               [12] 2690 	inc	r0
      000DE9 E6               [12] 2691 	mov	a,@r0
      000DEA 24 DF            [12] 2692 	add	a,#0xff - 0x20
      000DEC 92*00            [24] 2693 	mov	b0,c
      000DEE D0 07            [24] 2694 	pop	ar7
      000DF0 D0 06            [24] 2695 	pop	ar6
      000DF2 D0 02            [24] 2696 	pop	ar2
      000DF4 20*00 03         [24] 2697 	jb	b0,00154$
      000DF7 02r0Er6C         [24] 2698 	ljmp	00119$
      000DFA                       2699 00154$:
      000DFA A8*00            [24] 2700 	mov	r0,_bp
      000DFC 08               [12] 2701 	inc	r0
      000DFD B6 2F 02         [24] 2702 	cjne	@r0,#0x2f,00155$
      000E00 80 6A            [24] 2703 	sjmp	00119$
      000E02                       2704 00155$:
                                   2705 ;	pff\source\pff.c:669: if (c == '.' || i >= ni) {
      000E02 A8*00            [24] 2706 	mov	r0,_bp
      000E04 08               [12] 2707 	inc	r0
      000E05 B6 2E 02         [24] 2708 	cjne	@r0,#0x2e,00156$
      000E08 80 0E            [24] 2709 	sjmp	00107$
      000E0A                       2710 00156$:
      000E0A E5*00            [12] 2711 	mov	a,_bp
      000E0C 24 03            [12] 2712 	add	a,#0x03
      000E0E F8               [12] 2713 	mov	r0,a
      000E0F A9*00            [24] 2714 	mov	r1,_bp
      000E11 09               [12] 2715 	inc	r1
      000E12 09               [12] 2716 	inc	r1
      000E13 C3               [12] 2717 	clr	c
      000E14 E6               [12] 2718 	mov	a,@r0
      000E15 97               [12] 2719 	subb	a,@r1
      000E16 40 1C            [24] 2720 	jc	00111$
      000E18                       2721 00107$:
                                   2722 ;	pff\source\pff.c:670: if (ni != 8 || c != '.') break;
      000E18 A8*00            [24] 2723 	mov	r0,_bp
      000E1A 08               [12] 2724 	inc	r0
      000E1B 08               [12] 2725 	inc	r0
      000E1C B6 08 4D         [24] 2726 	cjne	@r0,#0x08,00119$
      000E1F A8*00            [24] 2727 	mov	r0,_bp
      000E21 08               [12] 2728 	inc	r0
      000E22 B6 2E 47         [24] 2729 	cjne	@r0,#0x2e,00119$
                                   2730 ;	pff\source\pff.c:671: i = 8; ni = 11;
      000E25 E5*00            [12] 2731 	mov	a,_bp
      000E27 24 03            [12] 2732 	add	a,#0x03
      000E29 F8               [12] 2733 	mov	r0,a
      000E2A 76 08            [12] 2734 	mov	@r0,#0x08
      000E2C A8*00            [24] 2735 	mov	r0,_bp
      000E2E 08               [12] 2736 	inc	r0
      000E2F 08               [12] 2737 	inc	r0
      000E30 76 0B            [12] 2738 	mov	@r0,#0x0b
                                   2739 ;	pff\source\pff.c:672: continue;
                                   2740 ;	pff\source\pff.c:682: if (PF_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
      000E32 80 8F            [24] 2741 	sjmp	00120$
      000E34                       2742 00111$:
                                   2743 ;	pff\source\pff.c:683: sfn[i++] = c;
      000E34 C0 02            [24] 2744 	push	ar2
      000E36 C0 06            [24] 2745 	push	ar6
      000E38 C0 07            [24] 2746 	push	ar7
      000E3A E5*00            [12] 2747 	mov	a,_bp
      000E3C 24 03            [12] 2748 	add	a,#0x03
      000E3E F8               [12] 2749 	mov	r0,a
      000E3F 86 04            [24] 2750 	mov	ar4,@r0
      000E41 E5*00            [12] 2751 	mov	a,_bp
      000E43 24 03            [12] 2752 	add	a,#0x03
      000E45 F8               [12] 2753 	mov	r0,a
      000E46 06               [12] 2754 	inc	@r0
      000E47 E5*00            [12] 2755 	mov	a,_bp
      000E49 24 04            [12] 2756 	add	a,#0x04
      000E4B F8               [12] 2757 	mov	r0,a
      000E4C EC               [12] 2758 	mov	a,r4
      000E4D 26               [12] 2759 	add	a,@r0
      000E4E FB               [12] 2760 	mov	r3,a
      000E4F E4               [12] 2761 	clr	a
      000E50 08               [12] 2762 	inc	r0
      000E51 36               [12] 2763 	addc	a,@r0
      000E52 FC               [12] 2764 	mov	r4,a
      000E53 08               [12] 2765 	inc	r0
      000E54 86 07            [24] 2766 	mov	ar7,@r0
      000E56 8B 82            [24] 2767 	mov	dpl,r3
      000E58 8C 83            [24] 2768 	mov	dph,r4
      000E5A 8F F0            [24] 2769 	mov	b,r7
      000E5C A8*00            [24] 2770 	mov	r0,_bp
      000E5E 08               [12] 2771 	inc	r0
      000E5F E6               [12] 2772 	mov	a,@r0
      000E60 12r00r00         [24] 2773 	lcall	__gptrput
      000E63 D0 07            [24] 2774 	pop	ar7
      000E65 D0 06            [24] 2775 	pop	ar6
      000E67 D0 02            [24] 2776 	pop	ar2
      000E69 02r0DrC3         [24] 2777 	ljmp	00120$
      000E6C                       2778 00119$:
                                   2779 ;	pff\source\pff.c:686: *path = &p[si];						/* Rerurn pointer to the next segment */
      000E6C E5*00            [12] 2780 	mov	a,_bp
      000E6E 24 07            [12] 2781 	add	a,#0x07
      000E70 F8               [12] 2782 	mov	r0,a
      000E71 ED               [12] 2783 	mov	a,r5
      000E72 26               [12] 2784 	add	a,@r0
      000E73 FD               [12] 2785 	mov	r5,a
      000E74 E4               [12] 2786 	clr	a
      000E75 08               [12] 2787 	inc	r0
      000E76 36               [12] 2788 	addc	a,@r0
      000E77 FC               [12] 2789 	mov	r4,a
      000E78 08               [12] 2790 	inc	r0
      000E79 86 03            [24] 2791 	mov	ar3,@r0
      000E7B 8A 82            [24] 2792 	mov	dpl,r2
      000E7D 8E 83            [24] 2793 	mov	dph,r6
      000E7F 8F F0            [24] 2794 	mov	b,r7
      000E81 ED               [12] 2795 	mov	a,r5
      000E82 12r00r00         [24] 2796 	lcall	__gptrput
      000E85 A3               [24] 2797 	inc	dptr
      000E86 EC               [12] 2798 	mov	a,r4
      000E87 12r00r00         [24] 2799 	lcall	__gptrput
      000E8A A3               [24] 2800 	inc	dptr
      000E8B EB               [12] 2801 	mov	a,r3
      000E8C 12r00r00         [24] 2802 	lcall	__gptrput
                                   2803 ;	pff\source\pff.c:688: sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
      000E8F E5*00            [12] 2804 	mov	a,_bp
      000E91 24 04            [12] 2805 	add	a,#0x04
      000E93 F8               [12] 2806 	mov	r0,a
      000E94 74 0B            [12] 2807 	mov	a,#0x0b
      000E96 26               [12] 2808 	add	a,@r0
      000E97 FD               [12] 2809 	mov	r5,a
      000E98 E4               [12] 2810 	clr	a
      000E99 08               [12] 2811 	inc	r0
      000E9A 36               [12] 2812 	addc	a,@r0
      000E9B FE               [12] 2813 	mov	r6,a
      000E9C 08               [12] 2814 	inc	r0
      000E9D 86 07            [24] 2815 	mov	ar7,@r0
      000E9F 20*00 06         [24] 2816 	jb	b0,00123$
      000EA2 7B 01            [12] 2817 	mov	r3,#0x01
      000EA4 7C 00            [12] 2818 	mov	r4,#0x00
      000EA6 80 04            [24] 2819 	sjmp	00124$
      000EA8                       2820 00123$:
      000EA8 7B 00            [12] 2821 	mov	r3,#0x00
      000EAA 7C 00            [12] 2822 	mov	r4,#0x00
      000EAC                       2823 00124$:
      000EAC 8D 82            [24] 2824 	mov	dpl,r5
      000EAE 8E 83            [24] 2825 	mov	dph,r6
      000EB0 8F F0            [24] 2826 	mov	b,r7
      000EB2 EB               [12] 2827 	mov	a,r3
      000EB3 12r00r00         [24] 2828 	lcall	__gptrput
                                   2829 ;	pff\source\pff.c:690: return FR_OK;
      000EB6 75 82 00         [24] 2830 	mov	dpl,#0x00
                                   2831 ;	pff\source\pff.c:691: }
      000EB9 85*00 81         [24] 2832 	mov	sp,_bp
      000EBC D0*00            [24] 2833 	pop	_bp
      000EBE 22               [24] 2834 	ret
                                   2835 ;------------------------------------------------------------
                                   2836 ;Allocation info for local variables in function 'get_fileinfo'
                                   2837 ;------------------------------------------------------------
                                   2838 ;dir                       Allocated to stack - _bp -5
                                   2839 ;fno                       Allocated to stack - _bp -8
                                   2840 ;dj                        Allocated to registers r7 r5 r6 
                                   2841 ;i                         Allocated to registers r4 
                                   2842 ;c                         Allocated to registers r3 
                                   2843 ;p                         Allocated to registers 
                                   2844 ;sloc0                     Allocated to stack - _bp +1
                                   2845 ;sloc1                     Allocated to stack - _bp +4
                                   2846 ;sloc2                     Allocated to stack - _bp +15
                                   2847 ;------------------------------------------------------------
                                   2848 ;	pff\source\pff.c:700: static void get_fileinfo (		/* No return code */
                                   2849 ;	-----------------------------------------
                                   2850 ;	 function get_fileinfo
                                   2851 ;	-----------------------------------------
      000EBF                       2852 _get_fileinfo:
      000EBF C0*00            [24] 2853 	push	_bp
      000EC1 E5 81            [12] 2854 	mov	a,sp
      000EC3 F5*00            [12] 2855 	mov	_bp,a
      000EC5 24 06            [12] 2856 	add	a,#0x06
      000EC7 F5 81            [12] 2857 	mov	sp,a
      000EC9 AF 82            [24] 2858 	mov	r7,dpl
      000ECB AD 83            [24] 2859 	mov	r5,dph
      000ECD AE F0            [24] 2860 	mov	r6,b
                                   2861 ;	pff\source\pff.c:710: p = fno->fname;
      000ECF E5*00            [12] 2862 	mov	a,_bp
      000ED1 24 F8            [12] 2863 	add	a,#0xf8
      000ED3 F8               [12] 2864 	mov	r0,a
      000ED4 E5*00            [12] 2865 	mov	a,_bp
      000ED6 24 04            [12] 2866 	add	a,#0x04
      000ED8 F9               [12] 2867 	mov	r1,a
      000ED9 E6               [12] 2868 	mov	a,@r0
      000EDA F7               [12] 2869 	mov	@r1,a
      000EDB 08               [12] 2870 	inc	r0
      000EDC E6               [12] 2871 	mov	a,@r0
      000EDD 09               [12] 2872 	inc	r1
      000EDE F7               [12] 2873 	mov	@r1,a
      000EDF 08               [12] 2874 	inc	r0
      000EE0 E6               [12] 2875 	mov	a,@r0
      000EE1 09               [12] 2876 	inc	r1
      000EE2 F7               [12] 2877 	mov	@r1,a
      000EE3 E5*00            [12] 2878 	mov	a,_bp
      000EE5 24 04            [12] 2879 	add	a,#0x04
      000EE7 F8               [12] 2880 	mov	r0,a
      000EE8 A9*00            [24] 2881 	mov	r1,_bp
      000EEA 09               [12] 2882 	inc	r1
      000EEB 74 09            [12] 2883 	mov	a,#0x09
      000EED 26               [12] 2884 	add	a,@r0
      000EEE F7               [12] 2885 	mov	@r1,a
      000EEF E4               [12] 2886 	clr	a
      000EF0 08               [12] 2887 	inc	r0
      000EF1 36               [12] 2888 	addc	a,@r0
      000EF2 09               [12] 2889 	inc	r1
      000EF3 F7               [12] 2890 	mov	@r1,a
      000EF4 08               [12] 2891 	inc	r0
      000EF5 E6               [12] 2892 	mov	a,@r0
      000EF6 09               [12] 2893 	inc	r1
      000EF7 F7               [12] 2894 	mov	@r1,a
                                   2895 ;	pff\source\pff.c:711: if (dj->sect) {
      000EF8 74 0D            [12] 2896 	mov	a,#0x0d
      000EFA 2F               [12] 2897 	add	a,r7
      000EFB FF               [12] 2898 	mov	r7,a
      000EFC E4               [12] 2899 	clr	a
      000EFD 3D               [12] 2900 	addc	a,r5
      000EFE FD               [12] 2901 	mov	r5,a
      000EFF 8F 82            [24] 2902 	mov	dpl,r7
      000F01 8D 83            [24] 2903 	mov	dph,r5
      000F03 8E F0            [24] 2904 	mov	b,r6
      000F05 12r00r00         [24] 2905 	lcall	__gptrget
      000F08 FC               [12] 2906 	mov	r4,a
      000F09 A3               [24] 2907 	inc	dptr
      000F0A 12r00r00         [24] 2908 	lcall	__gptrget
      000F0D FD               [12] 2909 	mov	r5,a
      000F0E A3               [24] 2910 	inc	dptr
      000F0F 12r00r00         [24] 2911 	lcall	__gptrget
      000F12 FE               [12] 2912 	mov	r6,a
      000F13 A3               [24] 2913 	inc	dptr
      000F14 12r00r00         [24] 2914 	lcall	__gptrget
      000F17 FF               [12] 2915 	mov	r7,a
      000F18 EC               [12] 2916 	mov	a,r4
      000F19 4D               [12] 2917 	orl	a,r5
      000F1A 4E               [12] 2918 	orl	a,r6
      000F1B 4F               [12] 2919 	orl	a,r7
      000F1C 70 03            [24] 2920 	jnz	00156$
      000F1E 02r11r06         [24] 2921 	ljmp	00112$
      000F21                       2922 00156$:
                                   2923 ;	pff\source\pff.c:712: for (i = 0; i < 8; i++) {	/* Copy file name body */
      000F21 A8*00            [24] 2924 	mov	r0,_bp
      000F23 08               [12] 2925 	inc	r0
      000F24 86 05            [24] 2926 	mov	ar5,@r0
      000F26 08               [12] 2927 	inc	r0
      000F27 86 06            [24] 2928 	mov	ar6,@r0
      000F29 08               [12] 2929 	inc	r0
      000F2A 86 07            [24] 2930 	mov	ar7,@r0
      000F2C 7C 00            [12] 2931 	mov	r4,#0x00
      000F2E                       2932 00113$:
                                   2933 ;	pff\source\pff.c:713: c = dir[i];
      000F2E C0 05            [24] 2934 	push	ar5
      000F30 C0 06            [24] 2935 	push	ar6
      000F32 C0 07            [24] 2936 	push	ar7
      000F34 E5*00            [12] 2937 	mov	a,_bp
      000F36 24 FB            [12] 2938 	add	a,#0xfb
      000F38 F8               [12] 2939 	mov	r0,a
      000F39 EC               [12] 2940 	mov	a,r4
      000F3A 26               [12] 2941 	add	a,@r0
      000F3B FA               [12] 2942 	mov	r2,a
      000F3C E4               [12] 2943 	clr	a
      000F3D 08               [12] 2944 	inc	r0
      000F3E 36               [12] 2945 	addc	a,@r0
      000F3F FB               [12] 2946 	mov	r3,a
      000F40 08               [12] 2947 	inc	r0
      000F41 86 07            [24] 2948 	mov	ar7,@r0
      000F43 8A 82            [24] 2949 	mov	dpl,r2
      000F45 8B 83            [24] 2950 	mov	dph,r3
      000F47 8F F0            [24] 2951 	mov	b,r7
      000F49 12r00r00         [24] 2952 	lcall	__gptrget
      000F4C FB               [12] 2953 	mov	r3,a
                                   2954 ;	pff\source\pff.c:714: if (c == ' ') break;
      000F4D BB 20 08         [24] 2955 	cjne	r3,#0x20,00157$
      000F50 D0 07            [24] 2956 	pop	ar7
      000F52 D0 06            [24] 2957 	pop	ar6
      000F54 D0 05            [24] 2958 	pop	ar5
      000F56 80 20            [24] 2959 	sjmp	00126$
      000F58                       2960 00157$:
      000F58 D0 07            [24] 2961 	pop	ar7
      000F5A D0 06            [24] 2962 	pop	ar6
      000F5C D0 05            [24] 2963 	pop	ar5
                                   2964 ;	pff\source\pff.c:715: if (c == 0x05) c = 0xE5;
      000F5E BB 05 02         [24] 2965 	cjne	r3,#0x05,00104$
      000F61 7B E5            [12] 2966 	mov	r3,#0xe5
      000F63                       2967 00104$:
                                   2968 ;	pff\source\pff.c:716: *p++ = c;
      000F63 8D 82            [24] 2969 	mov	dpl,r5
      000F65 8E 83            [24] 2970 	mov	dph,r6
      000F67 8F F0            [24] 2971 	mov	b,r7
      000F69 EB               [12] 2972 	mov	a,r3
      000F6A 12r00r00         [24] 2973 	lcall	__gptrput
      000F6D A3               [24] 2974 	inc	dptr
      000F6E AD 82            [24] 2975 	mov	r5,dpl
      000F70 AE 83            [24] 2976 	mov	r6,dph
                                   2977 ;	pff\source\pff.c:712: for (i = 0; i < 8; i++) {	/* Copy file name body */
      000F72 0C               [12] 2978 	inc	r4
      000F73 BC 08 00         [24] 2979 	cjne	r4,#0x08,00160$
      000F76                       2980 00160$:
      000F76 40 B6            [24] 2981 	jc	00113$
      000F78                       2982 00126$:
      000F78 A8*00            [24] 2983 	mov	r0,_bp
      000F7A 08               [12] 2984 	inc	r0
      000F7B A6 05            [24] 2985 	mov	@r0,ar5
      000F7D 08               [12] 2986 	inc	r0
      000F7E A6 06            [24] 2987 	mov	@r0,ar6
      000F80 08               [12] 2988 	inc	r0
      000F81 A6 07            [24] 2989 	mov	@r0,ar7
                                   2990 ;	pff\source\pff.c:718: if (dir[8] != ' ') {		/* Copy file name extension */
      000F83 E5*00            [12] 2991 	mov	a,_bp
      000F85 24 FB            [12] 2992 	add	a,#0xfb
      000F87 F8               [12] 2993 	mov	r0,a
      000F88 74 08            [12] 2994 	mov	a,#0x08
      000F8A 26               [12] 2995 	add	a,@r0
      000F8B FA               [12] 2996 	mov	r2,a
      000F8C E4               [12] 2997 	clr	a
      000F8D 08               [12] 2998 	inc	r0
      000F8E 36               [12] 2999 	addc	a,@r0
      000F8F FB               [12] 3000 	mov	r3,a
      000F90 08               [12] 3001 	inc	r0
      000F91 86 04            [24] 3002 	mov	ar4,@r0
      000F93 8A 82            [24] 3003 	mov	dpl,r2
      000F95 8B 83            [24] 3004 	mov	dph,r3
      000F97 8C F0            [24] 3005 	mov	b,r4
      000F99 12r00r00         [24] 3006 	lcall	__gptrget
      000F9C FA               [12] 3007 	mov	r2,a
      000F9D BA 20 02         [24] 3008 	cjne	r2,#0x20,00162$
      000FA0 80 62            [24] 3009 	sjmp	00110$
      000FA2                       3010 00162$:
                                   3011 ;	pff\source\pff.c:719: *p++ = '.';
      000FA2 8D 82            [24] 3012 	mov	dpl,r5
      000FA4 8E 83            [24] 3013 	mov	dph,r6
      000FA6 8F F0            [24] 3014 	mov	b,r7
      000FA8 74 2E            [12] 3015 	mov	a,#0x2e
      000FAA 12r00r00         [24] 3016 	lcall	__gptrput
      000FAD 0D               [12] 3017 	inc	r5
      000FAE BD 00 01         [24] 3018 	cjne	r5,#0x00,00163$
      000FB1 0E               [12] 3019 	inc	r6
      000FB2                       3020 00163$:
                                   3021 ;	pff\source\pff.c:720: for (i = 8; i < 11; i++) {
      000FB2 7C 08            [12] 3022 	mov	r4,#0x08
      000FB4                       3023 00115$:
                                   3024 ;	pff\source\pff.c:721: c = dir[i];
      000FB4 C0 05            [24] 3025 	push	ar5
      000FB6 C0 06            [24] 3026 	push	ar6
      000FB8 C0 07            [24] 3027 	push	ar7
      000FBA E5*00            [12] 3028 	mov	a,_bp
      000FBC 24 FB            [12] 3029 	add	a,#0xfb
      000FBE F8               [12] 3030 	mov	r0,a
      000FBF EC               [12] 3031 	mov	a,r4
      000FC0 26               [12] 3032 	add	a,@r0
      000FC1 FA               [12] 3033 	mov	r2,a
      000FC2 E4               [12] 3034 	clr	a
      000FC3 08               [12] 3035 	inc	r0
      000FC4 36               [12] 3036 	addc	a,@r0
      000FC5 FB               [12] 3037 	mov	r3,a
      000FC6 08               [12] 3038 	inc	r0
      000FC7 86 07            [24] 3039 	mov	ar7,@r0
      000FC9 8A 82            [24] 3040 	mov	dpl,r2
      000FCB 8B 83            [24] 3041 	mov	dph,r3
      000FCD 8F F0            [24] 3042 	mov	b,r7
      000FCF 12r00r00         [24] 3043 	lcall	__gptrget
      000FD2 FB               [12] 3044 	mov	r3,a
                                   3045 ;	pff\source\pff.c:722: if (c == ' ') break;
      000FD3 BB 20 08         [24] 3046 	cjne	r3,#0x20,00164$
      000FD6 D0 07            [24] 3047 	pop	ar7
      000FD8 D0 06            [24] 3048 	pop	ar6
      000FDA D0 05            [24] 3049 	pop	ar5
      000FDC 80 1B            [24] 3050 	sjmp	00127$
      000FDE                       3051 00164$:
      000FDE D0 07            [24] 3052 	pop	ar7
      000FE0 D0 06            [24] 3053 	pop	ar6
      000FE2 D0 05            [24] 3054 	pop	ar5
                                   3055 ;	pff\source\pff.c:723: *p++ = c;
      000FE4 8D 82            [24] 3056 	mov	dpl,r5
      000FE6 8E 83            [24] 3057 	mov	dph,r6
      000FE8 8F F0            [24] 3058 	mov	b,r7
      000FEA EB               [12] 3059 	mov	a,r3
      000FEB 12r00r00         [24] 3060 	lcall	__gptrput
      000FEE A3               [24] 3061 	inc	dptr
      000FEF AD 82            [24] 3062 	mov	r5,dpl
      000FF1 AE 83            [24] 3063 	mov	r6,dph
                                   3064 ;	pff\source\pff.c:720: for (i = 8; i < 11; i++) {
      000FF3 0C               [12] 3065 	inc	r4
      000FF4 BC 0B 00         [24] 3066 	cjne	r4,#0x0b,00165$
      000FF7                       3067 00165$:
      000FF7 40 BB            [24] 3068 	jc	00115$
      000FF9                       3069 00127$:
      000FF9 A8*00            [24] 3070 	mov	r0,_bp
      000FFB 08               [12] 3071 	inc	r0
      000FFC A6 05            [24] 3072 	mov	@r0,ar5
      000FFE 08               [12] 3073 	inc	r0
      000FFF A6 06            [24] 3074 	mov	@r0,ar6
      001001 08               [12] 3075 	inc	r0
      001002 A6 07            [24] 3076 	mov	@r0,ar7
      001004                       3077 00110$:
                                   3078 ;	pff\source\pff.c:726: fno->fattrib = dir[DIR_Attr];				/* Attribute */
      001004 E5*00            [12] 3079 	mov	a,_bp
      001006 24 04            [12] 3080 	add	a,#0x04
      001008 F8               [12] 3081 	mov	r0,a
      001009 74 08            [12] 3082 	mov	a,#0x08
      00100B 26               [12] 3083 	add	a,@r0
      00100C FD               [12] 3084 	mov	r5,a
      00100D E4               [12] 3085 	clr	a
      00100E 08               [12] 3086 	inc	r0
      00100F 36               [12] 3087 	addc	a,@r0
      001010 FE               [12] 3088 	mov	r6,a
      001011 08               [12] 3089 	inc	r0
      001012 86 07            [24] 3090 	mov	ar7,@r0
      001014 E5*00            [12] 3091 	mov	a,_bp
      001016 24 FB            [12] 3092 	add	a,#0xfb
      001018 F8               [12] 3093 	mov	r0,a
      001019 74 0B            [12] 3094 	mov	a,#0x0b
      00101B 26               [12] 3095 	add	a,@r0
      00101C FA               [12] 3096 	mov	r2,a
      00101D E4               [12] 3097 	clr	a
      00101E 08               [12] 3098 	inc	r0
      00101F 36               [12] 3099 	addc	a,@r0
      001020 FB               [12] 3100 	mov	r3,a
      001021 08               [12] 3101 	inc	r0
      001022 86 04            [24] 3102 	mov	ar4,@r0
      001024 8A 82            [24] 3103 	mov	dpl,r2
      001026 8B 83            [24] 3104 	mov	dph,r3
      001028 8C F0            [24] 3105 	mov	b,r4
      00102A 12r00r00         [24] 3106 	lcall	__gptrget
      00102D 8D 82            [24] 3107 	mov	dpl,r5
      00102F 8E 83            [24] 3108 	mov	dph,r6
      001031 8F F0            [24] 3109 	mov	b,r7
      001033 12r00r00         [24] 3110 	lcall	__gptrput
                                   3111 ;	pff\source\pff.c:727: fno->fsize = ld_dword(dir+DIR_FileSize);	/* Size */
      001036 E5*00            [12] 3112 	mov	a,_bp
      001038 24 FB            [12] 3113 	add	a,#0xfb
      00103A F8               [12] 3114 	mov	r0,a
      00103B 74 1C            [12] 3115 	mov	a,#0x1c
      00103D 26               [12] 3116 	add	a,@r0
      00103E FD               [12] 3117 	mov	r5,a
      00103F E4               [12] 3118 	clr	a
      001040 08               [12] 3119 	inc	r0
      001041 36               [12] 3120 	addc	a,@r0
      001042 FE               [12] 3121 	mov	r6,a
      001043 08               [12] 3122 	inc	r0
      001044 86 07            [24] 3123 	mov	ar7,@r0
      001046 8D 82            [24] 3124 	mov	dpl,r5
      001048 8E 83            [24] 3125 	mov	dph,r6
      00104A 8F F0            [24] 3126 	mov	b,r7
      00104C 12r00r30         [24] 3127 	lcall	_ld_dword
      00104F AE 82            [24] 3128 	mov	r6,dpl
      001051 AD 83            [24] 3129 	mov	r5,dph
      001053 AC F0            [24] 3130 	mov	r4,b
      001055 FF               [12] 3131 	mov	r7,a
      001056 E5*00            [12] 3132 	mov	a,_bp
      001058 24 04            [12] 3133 	add	a,#0x04
      00105A F8               [12] 3134 	mov	r0,a
      00105B 86 82            [24] 3135 	mov	dpl,@r0
      00105D 08               [12] 3136 	inc	r0
      00105E 86 83            [24] 3137 	mov	dph,@r0
      001060 08               [12] 3138 	inc	r0
      001061 86 F0            [24] 3139 	mov	b,@r0
      001063 EE               [12] 3140 	mov	a,r6
      001064 12r00r00         [24] 3141 	lcall	__gptrput
      001067 A3               [24] 3142 	inc	dptr
      001068 ED               [12] 3143 	mov	a,r5
      001069 12r00r00         [24] 3144 	lcall	__gptrput
      00106C A3               [24] 3145 	inc	dptr
      00106D EC               [12] 3146 	mov	a,r4
      00106E 12r00r00         [24] 3147 	lcall	__gptrput
      001071 A3               [24] 3148 	inc	dptr
      001072 EF               [12] 3149 	mov	a,r7
      001073 12r00r00         [24] 3150 	lcall	__gptrput
                                   3151 ;	pff\source\pff.c:728: fno->fdate = ld_word(dir+DIR_WrtDate);		/* Date */
      001076 E5*00            [12] 3152 	mov	a,_bp
      001078 24 04            [12] 3153 	add	a,#0x04
      00107A F8               [12] 3154 	mov	r0,a
      00107B 74 04            [12] 3155 	mov	a,#0x04
      00107D 26               [12] 3156 	add	a,@r0
      00107E FD               [12] 3157 	mov	r5,a
      00107F E4               [12] 3158 	clr	a
      001080 08               [12] 3159 	inc	r0
      001081 36               [12] 3160 	addc	a,@r0
      001082 FE               [12] 3161 	mov	r6,a
      001083 08               [12] 3162 	inc	r0
      001084 86 07            [24] 3163 	mov	ar7,@r0
      001086 E5*00            [12] 3164 	mov	a,_bp
      001088 24 FB            [12] 3165 	add	a,#0xfb
      00108A F8               [12] 3166 	mov	r0,a
      00108B 74 18            [12] 3167 	mov	a,#0x18
      00108D 26               [12] 3168 	add	a,@r0
      00108E FA               [12] 3169 	mov	r2,a
      00108F E4               [12] 3170 	clr	a
      001090 08               [12] 3171 	inc	r0
      001091 36               [12] 3172 	addc	a,@r0
      001092 FB               [12] 3173 	mov	r3,a
      001093 08               [12] 3174 	inc	r0
      001094 86 04            [24] 3175 	mov	ar4,@r0
      001096 8A 82            [24] 3176 	mov	dpl,r2
      001098 8B 83            [24] 3177 	mov	dph,r3
      00109A 8C F0            [24] 3178 	mov	b,r4
      00109C C0 07            [24] 3179 	push	ar7
      00109E C0 06            [24] 3180 	push	ar6
      0010A0 C0 05            [24] 3181 	push	ar5
      0010A2 12r00r00         [24] 3182 	lcall	_ld_word
      0010A5 AB 82            [24] 3183 	mov	r3,dpl
      0010A7 AC 83            [24] 3184 	mov	r4,dph
      0010A9 D0 05            [24] 3185 	pop	ar5
      0010AB D0 06            [24] 3186 	pop	ar6
      0010AD D0 07            [24] 3187 	pop	ar7
      0010AF 8D 82            [24] 3188 	mov	dpl,r5
      0010B1 8E 83            [24] 3189 	mov	dph,r6
      0010B3 8F F0            [24] 3190 	mov	b,r7
      0010B5 EB               [12] 3191 	mov	a,r3
      0010B6 12r00r00         [24] 3192 	lcall	__gptrput
      0010B9 A3               [24] 3193 	inc	dptr
      0010BA EC               [12] 3194 	mov	a,r4
      0010BB 12r00r00         [24] 3195 	lcall	__gptrput
                                   3196 ;	pff\source\pff.c:729: fno->ftime = ld_word(dir+DIR_WrtTime);		/* Time */
      0010BE E5*00            [12] 3197 	mov	a,_bp
      0010C0 24 04            [12] 3198 	add	a,#0x04
      0010C2 F8               [12] 3199 	mov	r0,a
      0010C3 74 06            [12] 3200 	mov	a,#0x06
      0010C5 26               [12] 3201 	add	a,@r0
      0010C6 FD               [12] 3202 	mov	r5,a
      0010C7 E4               [12] 3203 	clr	a
      0010C8 08               [12] 3204 	inc	r0
      0010C9 36               [12] 3205 	addc	a,@r0
      0010CA FE               [12] 3206 	mov	r6,a
      0010CB 08               [12] 3207 	inc	r0
      0010CC 86 07            [24] 3208 	mov	ar7,@r0
      0010CE E5*00            [12] 3209 	mov	a,_bp
      0010D0 24 FB            [12] 3210 	add	a,#0xfb
      0010D2 F8               [12] 3211 	mov	r0,a
      0010D3 74 16            [12] 3212 	mov	a,#0x16
      0010D5 26               [12] 3213 	add	a,@r0
      0010D6 FA               [12] 3214 	mov	r2,a
      0010D7 E4               [12] 3215 	clr	a
      0010D8 08               [12] 3216 	inc	r0
      0010D9 36               [12] 3217 	addc	a,@r0
      0010DA FB               [12] 3218 	mov	r3,a
      0010DB 08               [12] 3219 	inc	r0
      0010DC 86 04            [24] 3220 	mov	ar4,@r0
      0010DE 8A 82            [24] 3221 	mov	dpl,r2
      0010E0 8B 83            [24] 3222 	mov	dph,r3
      0010E2 8C F0            [24] 3223 	mov	b,r4
      0010E4 C0 07            [24] 3224 	push	ar7
      0010E6 C0 06            [24] 3225 	push	ar6
      0010E8 C0 05            [24] 3226 	push	ar5
      0010EA 12r00r00         [24] 3227 	lcall	_ld_word
      0010ED AB 82            [24] 3228 	mov	r3,dpl
      0010EF AC 83            [24] 3229 	mov	r4,dph
      0010F1 D0 05            [24] 3230 	pop	ar5
      0010F3 D0 06            [24] 3231 	pop	ar6
      0010F5 D0 07            [24] 3232 	pop	ar7
      0010F7 8D 82            [24] 3233 	mov	dpl,r5
      0010F9 8E 83            [24] 3234 	mov	dph,r6
      0010FB 8F F0            [24] 3235 	mov	b,r7
      0010FD EB               [12] 3236 	mov	a,r3
      0010FE 12r00r00         [24] 3237 	lcall	__gptrput
      001101 A3               [24] 3238 	inc	dptr
      001102 EC               [12] 3239 	mov	a,r4
      001103 12r00r00         [24] 3240 	lcall	__gptrput
      001106                       3241 00112$:
                                   3242 ;	pff\source\pff.c:731: *p = 0;
      001106 A8*00            [24] 3243 	mov	r0,_bp
      001108 08               [12] 3244 	inc	r0
      001109 86 82            [24] 3245 	mov	dpl,@r0
      00110B 08               [12] 3246 	inc	r0
      00110C 86 83            [24] 3247 	mov	dph,@r0
      00110E 08               [12] 3248 	inc	r0
      00110F 86 F0            [24] 3249 	mov	b,@r0
      001111 E4               [12] 3250 	clr	a
      001112 12r00r00         [24] 3251 	lcall	__gptrput
                                   3252 ;	pff\source\pff.c:732: }
      001115 85*00 81         [24] 3253 	mov	sp,_bp
      001118 D0*00            [24] 3254 	pop	_bp
      00111A 22               [24] 3255 	ret
                                   3256 ;------------------------------------------------------------
                                   3257 ;Allocation info for local variables in function 'follow_path'
                                   3258 ;------------------------------------------------------------
                                   3259 ;dir                       Allocated to stack - _bp -5
                                   3260 ;path                      Allocated to stack - _bp -8
                                   3261 ;dj                        Allocated to stack - _bp +1
                                   3262 ;res                       Allocated to stack - _bp +10
                                   3263 ;sloc0                     Allocated to stack - _bp +5
                                   3264 ;sloc1                     Allocated to stack - _bp +4
                                   3265 ;sloc2                     Allocated to stack - _bp +7
                                   3266 ;------------------------------------------------------------
                                   3267 ;	pff\source\pff.c:741: static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
                                   3268 ;	-----------------------------------------
                                   3269 ;	 function follow_path
                                   3270 ;	-----------------------------------------
      00111B                       3271 _follow_path:
      00111B C0*00            [24] 3272 	push	_bp
      00111D 85 81*00         [24] 3273 	mov	_bp,sp
      001120 C0 82            [24] 3274 	push	dpl
      001122 C0 83            [24] 3275 	push	dph
      001124 C0 F0            [24] 3276 	push	b
      001126 E5 81            [12] 3277 	mov	a,sp
      001128 24 07            [12] 3278 	add	a,#0x07
      00112A F5 81            [12] 3279 	mov	sp,a
                                   3280 ;	pff\source\pff.c:750: while (*path == ' ') path++;		/* Strip leading spaces */
      00112C E5*00            [12] 3281 	mov	a,_bp
      00112E 24 F8            [12] 3282 	add	a,#0xf8
      001130 F8               [12] 3283 	mov	r0,a
      001131 86 02            [24] 3284 	mov	ar2,@r0
      001133 08               [12] 3285 	inc	r0
      001134 86 03            [24] 3286 	mov	ar3,@r0
      001136 08               [12] 3287 	inc	r0
      001137 86 04            [24] 3288 	mov	ar4,@r0
      001139                       3289 00101$:
      001139 8A 82            [24] 3290 	mov	dpl,r2
      00113B 8B 83            [24] 3291 	mov	dph,r3
      00113D 8C F0            [24] 3292 	mov	b,r4
      00113F 12r00r00         [24] 3293 	lcall	__gptrget
      001142 FF               [12] 3294 	mov	r7,a
      001143 BF 20 14         [24] 3295 	cjne	r7,#0x20,00131$
      001146 0A               [12] 3296 	inc	r2
      001147 BA 00 01         [24] 3297 	cjne	r2,#0x00,00161$
      00114A 0B               [12] 3298 	inc	r3
      00114B                       3299 00161$:
      00114B E5*00            [12] 3300 	mov	a,_bp
      00114D 24 F8            [12] 3301 	add	a,#0xf8
      00114F F8               [12] 3302 	mov	r0,a
      001150 A6 02            [24] 3303 	mov	@r0,ar2
      001152 08               [12] 3304 	inc	r0
      001153 A6 03            [24] 3305 	mov	@r0,ar3
      001155 08               [12] 3306 	inc	r0
      001156 A6 04            [24] 3307 	mov	@r0,ar4
      001158 80 DF            [24] 3308 	sjmp	00101$
      00115A                       3309 00131$:
      00115A E5*00            [12] 3310 	mov	a,_bp
      00115C 24 F8            [12] 3311 	add	a,#0xf8
      00115E F8               [12] 3312 	mov	r0,a
      00115F A6 02            [24] 3313 	mov	@r0,ar2
      001161 08               [12] 3314 	inc	r0
      001162 A6 03            [24] 3315 	mov	@r0,ar3
      001164 08               [12] 3316 	inc	r0
      001165 A6 04            [24] 3317 	mov	@r0,ar4
                                   3318 ;	pff\source\pff.c:751: if (*path == '/') path++;			/* Strip heading separator if exist */
      001167 BF 2F 10         [24] 3319 	cjne	r7,#0x2f,00105$
      00116A E5*00            [12] 3320 	mov	a,_bp
      00116C 24 F8            [12] 3321 	add	a,#0xf8
      00116E F8               [12] 3322 	mov	r0,a
      00116F 74 01            [12] 3323 	mov	a,#0x01
      001171 2A               [12] 3324 	add	a,r2
      001172 F6               [12] 3325 	mov	@r0,a
      001173 E4               [12] 3326 	clr	a
      001174 3B               [12] 3327 	addc	a,r3
      001175 08               [12] 3328 	inc	r0
      001176 F6               [12] 3329 	mov	@r0,a
      001177 08               [12] 3330 	inc	r0
      001178 A6 04            [24] 3331 	mov	@r0,ar4
      00117A                       3332 00105$:
                                   3333 ;	pff\source\pff.c:752: dj->sclust = 0;						/* Set start directory (always root dir) */
      00117A A8*00            [24] 3334 	mov	r0,_bp
      00117C 08               [12] 3335 	inc	r0
      00117D 74 05            [12] 3336 	mov	a,#0x05
      00117F 26               [12] 3337 	add	a,@r0
      001180 FA               [12] 3338 	mov	r2,a
      001181 E4               [12] 3339 	clr	a
      001182 08               [12] 3340 	inc	r0
      001183 36               [12] 3341 	addc	a,@r0
      001184 FB               [12] 3342 	mov	r3,a
      001185 08               [12] 3343 	inc	r0
      001186 86 04            [24] 3344 	mov	ar4,@r0
      001188 8A 82            [24] 3345 	mov	dpl,r2
      00118A 8B 83            [24] 3346 	mov	dph,r3
      00118C 8C F0            [24] 3347 	mov	b,r4
      00118E E4               [12] 3348 	clr	a
      00118F 12r00r00         [24] 3349 	lcall	__gptrput
      001192 A3               [24] 3350 	inc	dptr
      001193 12r00r00         [24] 3351 	lcall	__gptrput
      001196 A3               [24] 3352 	inc	dptr
      001197 12r00r00         [24] 3353 	lcall	__gptrput
      00119A A3               [24] 3354 	inc	dptr
      00119B 12r00r00         [24] 3355 	lcall	__gptrput
                                   3356 ;	pff\source\pff.c:754: if ((BYTE)*path < ' ') {			/* Null path means the root directory */
      00119E E5*00            [12] 3357 	mov	a,_bp
      0011A0 24 F8            [12] 3358 	add	a,#0xf8
      0011A2 F8               [12] 3359 	mov	r0,a
      0011A3 86 02            [24] 3360 	mov	ar2,@r0
      0011A5 08               [12] 3361 	inc	r0
      0011A6 86 03            [24] 3362 	mov	ar3,@r0
      0011A8 08               [12] 3363 	inc	r0
      0011A9 86 04            [24] 3364 	mov	ar4,@r0
      0011AB 8A 82            [24] 3365 	mov	dpl,r2
      0011AD 8B 83            [24] 3366 	mov	dph,r3
      0011AF 8C F0            [24] 3367 	mov	b,r4
      0011B1 12r00r00         [24] 3368 	lcall	__gptrget
      0011B4 FA               [12] 3369 	mov	r2,a
      0011B5 BA 20 00         [24] 3370 	cjne	r2,#0x20,00164$
      0011B8                       3371 00164$:
      0011B8 50 31            [24] 3372 	jnc	00130$
                                   3373 ;	pff\source\pff.c:755: res = dir_rewind(dj);
      0011BA A8*00            [24] 3374 	mov	r0,_bp
      0011BC 08               [12] 3375 	inc	r0
      0011BD 86 82            [24] 3376 	mov	dpl,@r0
      0011BF 08               [12] 3377 	inc	r0
      0011C0 86 83            [24] 3378 	mov	dph,@r0
      0011C2 08               [12] 3379 	inc	r0
      0011C3 86 F0            [24] 3380 	mov	b,@r0
      0011C5 12r05r7D         [24] 3381 	lcall	_dir_rewind
      0011C8 AC 82            [24] 3382 	mov	r4,dpl
      0011CA E5*00            [12] 3383 	mov	a,_bp
      0011CC 24 0A            [12] 3384 	add	a,#0x0a
      0011CE F8               [12] 3385 	mov	r0,a
      0011CF A6 04            [24] 3386 	mov	@r0,ar4
                                   3387 ;	pff\source\pff.c:756: dir[0] = 0;
      0011D1 E5*00            [12] 3388 	mov	a,_bp
      0011D3 24 FB            [12] 3389 	add	a,#0xfb
      0011D5 F8               [12] 3390 	mov	r0,a
      0011D6 86 02            [24] 3391 	mov	ar2,@r0
      0011D8 08               [12] 3392 	inc	r0
      0011D9 86 03            [24] 3393 	mov	ar3,@r0
      0011DB 08               [12] 3394 	inc	r0
      0011DC 86 04            [24] 3395 	mov	ar4,@r0
      0011DE 8A 82            [24] 3396 	mov	dpl,r2
      0011E0 8B 83            [24] 3397 	mov	dph,r3
      0011E2 8C F0            [24] 3398 	mov	b,r4
      0011E4 E4               [12] 3399 	clr	a
      0011E5 12r00r00         [24] 3400 	lcall	__gptrput
      0011E8 02r13r5B         [24] 3401 	ljmp	00117$
      0011EB                       3402 00130$:
      0011EB A8*00            [24] 3403 	mov	r0,_bp
      0011ED 08               [12] 3404 	inc	r0
      0011EE 74 02            [12] 3405 	mov	a,#0x02
      0011F0 26               [12] 3406 	add	a,@r0
      0011F1 FA               [12] 3407 	mov	r2,a
      0011F2 E4               [12] 3408 	clr	a
      0011F3 08               [12] 3409 	inc	r0
      0011F4 36               [12] 3410 	addc	a,@r0
      0011F5 FB               [12] 3411 	mov	r3,a
      0011F6 08               [12] 3412 	inc	r0
      0011F7 86 04            [24] 3413 	mov	ar4,@r0
      0011F9 E5*00            [12] 3414 	mov	a,_bp
      0011FB 24 FB            [12] 3415 	add	a,#0xfb
      0011FD F8               [12] 3416 	mov	r0,a
      0011FE E5*00            [12] 3417 	mov	a,_bp
      001200 24 04            [12] 3418 	add	a,#0x04
      001202 F9               [12] 3419 	mov	r1,a
      001203 74 0B            [12] 3420 	mov	a,#0x0b
      001205 26               [12] 3421 	add	a,@r0
      001206 F7               [12] 3422 	mov	@r1,a
      001207 E4               [12] 3423 	clr	a
      001208 08               [12] 3424 	inc	r0
      001209 36               [12] 3425 	addc	a,@r0
      00120A 09               [12] 3426 	inc	r1
      00120B F7               [12] 3427 	mov	@r1,a
      00120C 08               [12] 3428 	inc	r0
      00120D E6               [12] 3429 	mov	a,@r0
      00120E 09               [12] 3430 	inc	r1
      00120F F7               [12] 3431 	mov	@r1,a
      001210                       3432 00118$:
                                   3433 ;	pff\source\pff.c:760: res = create_name(dj, &path);	/* Get a segment */
      001210 C0 02            [24] 3434 	push	ar2
      001212 C0 03            [24] 3435 	push	ar3
      001214 C0 04            [24] 3436 	push	ar4
      001216 E5*00            [12] 3437 	mov	a,_bp
      001218 24 F8            [12] 3438 	add	a,#0xf8
      00121A FC               [12] 3439 	mov	r4,a
      00121B 7B 00            [12] 3440 	mov	r3,#0x00
      00121D 7A 40            [12] 3441 	mov	r2,#0x40
      00121F C0 03            [24] 3442 	push	ar3
      001221 C0 02            [24] 3443 	push	ar2
      001223 C0 04            [24] 3444 	push	ar4
      001225 C0 03            [24] 3445 	push	ar3
      001227 C0 02            [24] 3446 	push	ar2
      001229 A8*00            [24] 3447 	mov	r0,_bp
      00122B 08               [12] 3448 	inc	r0
      00122C 86 82            [24] 3449 	mov	dpl,@r0
      00122E 08               [12] 3450 	inc	r0
      00122F 86 83            [24] 3451 	mov	dph,@r0
      001231 08               [12] 3452 	inc	r0
      001232 86 F0            [24] 3453 	mov	b,@r0
      001234 12r0Dr30         [24] 3454 	lcall	_create_name
      001237 AC 82            [24] 3455 	mov	r4,dpl
      001239 15 81            [12] 3456 	dec	sp
      00123B 15 81            [12] 3457 	dec	sp
      00123D 15 81            [12] 3458 	dec	sp
      00123F D0 02            [24] 3459 	pop	ar2
      001241 D0 03            [24] 3460 	pop	ar3
      001243 E5*00            [12] 3461 	mov	a,_bp
      001245 24 0A            [12] 3462 	add	a,#0x0a
      001247 F8               [12] 3463 	mov	r0,a
      001248 A6 04            [24] 3464 	mov	@r0,ar4
                                   3465 ;	pff\source\pff.c:761: if (res != FR_OK) break;
      00124A E5*00            [12] 3466 	mov	a,_bp
      00124C 24 0A            [12] 3467 	add	a,#0x0a
      00124E F8               [12] 3468 	mov	r0,a
      00124F E6               [12] 3469 	mov	a,@r0
      001250 D0 04            [24] 3470 	pop	ar4
      001252 D0 03            [24] 3471 	pop	ar3
      001254 D0 02            [24] 3472 	pop	ar2
      001256 60 03            [24] 3473 	jz	00166$
      001258 02r13r5B         [24] 3474 	ljmp	00117$
      00125B                       3475 00166$:
                                   3476 ;	pff\source\pff.c:762: res = dir_find(dj, dir);		/* Find it */
      00125B C0 02            [24] 3477 	push	ar2
      00125D C0 03            [24] 3478 	push	ar3
      00125F C0 04            [24] 3479 	push	ar4
      001261 C0 03            [24] 3480 	push	ar3
      001263 C0 02            [24] 3481 	push	ar2
      001265 E5*00            [12] 3482 	mov	a,_bp
      001267 24 FB            [12] 3483 	add	a,#0xfb
      001269 F8               [12] 3484 	mov	r0,a
      00126A E6               [12] 3485 	mov	a,@r0
      00126B C0 E0            [24] 3486 	push	acc
      00126D 08               [12] 3487 	inc	r0
      00126E E6               [12] 3488 	mov	a,@r0
      00126F C0 E0            [24] 3489 	push	acc
      001271 08               [12] 3490 	inc	r0
      001272 E6               [12] 3491 	mov	a,@r0
      001273 C0 E0            [24] 3492 	push	acc
      001275 A8*00            [24] 3493 	mov	r0,_bp
      001277 08               [12] 3494 	inc	r0
      001278 86 82            [24] 3495 	mov	dpl,@r0
      00127A 08               [12] 3496 	inc	r0
      00127B 86 83            [24] 3497 	mov	dph,@r0
      00127D 08               [12] 3498 	inc	r0
      00127E 86 F0            [24] 3499 	mov	b,@r0
      001280 12r09rA0         [24] 3500 	lcall	_dir_find
      001283 AC 82            [24] 3501 	mov	r4,dpl
      001285 15 81            [12] 3502 	dec	sp
      001287 15 81            [12] 3503 	dec	sp
      001289 15 81            [12] 3504 	dec	sp
      00128B D0 02            [24] 3505 	pop	ar2
      00128D D0 03            [24] 3506 	pop	ar3
      00128F E5*00            [12] 3507 	mov	a,_bp
      001291 24 0A            [12] 3508 	add	a,#0x0a
      001293 F8               [12] 3509 	mov	r0,a
      001294 A6 04            [24] 3510 	mov	@r0,ar4
                                   3511 ;	pff\source\pff.c:763: if (res != FR_OK) break;		/* Could not find the object */
      001296 E5*00            [12] 3512 	mov	a,_bp
      001298 24 0A            [12] 3513 	add	a,#0x0a
      00129A F8               [12] 3514 	mov	r0,a
      00129B E6               [12] 3515 	mov	a,@r0
      00129C D0 04            [24] 3516 	pop	ar4
      00129E D0 03            [24] 3517 	pop	ar3
      0012A0 D0 02            [24] 3518 	pop	ar2
      0012A2 60 03            [24] 3519 	jz	00167$
      0012A4 02r13r5B         [24] 3520 	ljmp	00117$
      0012A7                       3521 00167$:
                                   3522 ;	pff\source\pff.c:764: if (dj->fn[11]) break;			/* Last segment match. Function completed. */
      0012A7 8A 82            [24] 3523 	mov	dpl,r2
      0012A9 8B 83            [24] 3524 	mov	dph,r3
      0012AB 8C F0            [24] 3525 	mov	b,r4
      0012AD 12r00r00         [24] 3526 	lcall	__gptrget
      0012B0 FD               [12] 3527 	mov	r5,a
      0012B1 A3               [24] 3528 	inc	dptr
      0012B2 12r00r00         [24] 3529 	lcall	__gptrget
      0012B5 FE               [12] 3530 	mov	r6,a
      0012B6 A3               [24] 3531 	inc	dptr
      0012B7 12r00r00         [24] 3532 	lcall	__gptrget
      0012BA FF               [12] 3533 	mov	r7,a
      0012BB 74 0B            [12] 3534 	mov	a,#0x0b
      0012BD 2D               [12] 3535 	add	a,r5
      0012BE FD               [12] 3536 	mov	r5,a
      0012BF E4               [12] 3537 	clr	a
      0012C0 3E               [12] 3538 	addc	a,r6
      0012C1 FE               [12] 3539 	mov	r6,a
      0012C2 8D 82            [24] 3540 	mov	dpl,r5
      0012C4 8E 83            [24] 3541 	mov	dph,r6
      0012C6 8F F0            [24] 3542 	mov	b,r7
      0012C8 12r00r00         [24] 3543 	lcall	__gptrget
      0012CB 60 03            [24] 3544 	jz	00168$
      0012CD 02r13r5B         [24] 3545 	ljmp	00117$
      0012D0                       3546 00168$:
                                   3547 ;	pff\source\pff.c:765: if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
      0012D0 C0 02            [24] 3548 	push	ar2
      0012D2 C0 03            [24] 3549 	push	ar3
      0012D4 C0 04            [24] 3550 	push	ar4
      0012D6 E5*00            [12] 3551 	mov	a,_bp
      0012D8 24 04            [12] 3552 	add	a,#0x04
      0012DA F8               [12] 3553 	mov	r0,a
      0012DB 86 82            [24] 3554 	mov	dpl,@r0
      0012DD 08               [12] 3555 	inc	r0
      0012DE 86 83            [24] 3556 	mov	dph,@r0
      0012E0 08               [12] 3557 	inc	r0
      0012E1 86 F0            [24] 3558 	mov	b,@r0
      0012E3 12r00r00         [24] 3559 	lcall	__gptrget
      0012E6 D0 04            [24] 3560 	pop	ar4
      0012E8 D0 03            [24] 3561 	pop	ar3
      0012EA D0 02            [24] 3562 	pop	ar2
      0012EC 20 E4 09         [24] 3563 	jb	acc.4,00113$
                                   3564 ;	pff\source\pff.c:766: res = FR_NO_FILE; break;
      0012EF E5*00            [12] 3565 	mov	a,_bp
      0012F1 24 0A            [12] 3566 	add	a,#0x0a
      0012F3 F8               [12] 3567 	mov	r0,a
      0012F4 76 03            [12] 3568 	mov	@r0,#0x03
      0012F6 80 63            [24] 3569 	sjmp	00117$
      0012F8                       3570 00113$:
                                   3571 ;	pff\source\pff.c:768: dj->sclust = get_clust(dir);	/* Follow next */
      0012F8 C0 02            [24] 3572 	push	ar2
      0012FA C0 03            [24] 3573 	push	ar3
      0012FC C0 04            [24] 3574 	push	ar4
      0012FE A8*00            [24] 3575 	mov	r0,_bp
      001300 08               [12] 3576 	inc	r0
      001301 E5*00            [12] 3577 	mov	a,_bp
      001303 24 07            [12] 3578 	add	a,#0x07
      001305 F9               [12] 3579 	mov	r1,a
      001306 74 05            [12] 3580 	mov	a,#0x05
      001308 26               [12] 3581 	add	a,@r0
      001309 F7               [12] 3582 	mov	@r1,a
      00130A E4               [12] 3583 	clr	a
      00130B 08               [12] 3584 	inc	r0
      00130C 36               [12] 3585 	addc	a,@r0
      00130D 09               [12] 3586 	inc	r1
      00130E F7               [12] 3587 	mov	@r1,a
      00130F 08               [12] 3588 	inc	r0
      001310 E6               [12] 3589 	mov	a,@r0
      001311 09               [12] 3590 	inc	r1
      001312 F7               [12] 3591 	mov	@r1,a
      001313 E5*00            [12] 3592 	mov	a,_bp
      001315 24 FB            [12] 3593 	add	a,#0xfb
      001317 F8               [12] 3594 	mov	r0,a
      001318 86 82            [24] 3595 	mov	dpl,@r0
      00131A 08               [12] 3596 	inc	r0
      00131B 86 83            [24] 3597 	mov	dph,@r0
      00131D 08               [12] 3598 	inc	r0
      00131E 86 F0            [24] 3599 	mov	b,@r0
      001320 C0 03            [24] 3600 	push	ar3
      001322 C0 02            [24] 3601 	push	ar2
      001324 12r04rFB         [24] 3602 	lcall	_get_clust
      001327 AE 82            [24] 3603 	mov	r6,dpl
      001329 AD 83            [24] 3604 	mov	r5,dph
      00132B AC F0            [24] 3605 	mov	r4,b
      00132D FF               [12] 3606 	mov	r7,a
      00132E D0 02            [24] 3607 	pop	ar2
      001330 D0 03            [24] 3608 	pop	ar3
      001332 E5*00            [12] 3609 	mov	a,_bp
      001334 24 07            [12] 3610 	add	a,#0x07
      001336 F8               [12] 3611 	mov	r0,a
      001337 86 82            [24] 3612 	mov	dpl,@r0
      001339 08               [12] 3613 	inc	r0
      00133A 86 83            [24] 3614 	mov	dph,@r0
      00133C 08               [12] 3615 	inc	r0
      00133D 86 F0            [24] 3616 	mov	b,@r0
      00133F EE               [12] 3617 	mov	a,r6
      001340 12r00r00         [24] 3618 	lcall	__gptrput
      001343 A3               [24] 3619 	inc	dptr
      001344 ED               [12] 3620 	mov	a,r5
      001345 12r00r00         [24] 3621 	lcall	__gptrput
      001348 A3               [24] 3622 	inc	dptr
      001349 EC               [12] 3623 	mov	a,r4
      00134A 12r00r00         [24] 3624 	lcall	__gptrput
      00134D A3               [24] 3625 	inc	dptr
      00134E EF               [12] 3626 	mov	a,r7
      00134F 12r00r00         [24] 3627 	lcall	__gptrput
      001352 D0 04            [24] 3628 	pop	ar4
      001354 D0 03            [24] 3629 	pop	ar3
      001356 D0 02            [24] 3630 	pop	ar2
      001358 02r12r10         [24] 3631 	ljmp	00118$
      00135B                       3632 00117$:
                                   3633 ;	pff\source\pff.c:772: return res;
      00135B E5*00            [12] 3634 	mov	a,_bp
      00135D 24 0A            [12] 3635 	add	a,#0x0a
      00135F F8               [12] 3636 	mov	r0,a
      001360 86 82            [24] 3637 	mov	dpl,@r0
                                   3638 ;	pff\source\pff.c:773: }
      001362 85*00 81         [24] 3639 	mov	sp,_bp
      001365 D0*00            [24] 3640 	pop	_bp
      001367 22               [24] 3641 	ret
                                   3642 ;------------------------------------------------------------
                                   3643 ;Allocation info for local variables in function 'check_fs'
                                   3644 ;------------------------------------------------------------
                                   3645 ;sect                      Allocated to stack - _bp -6
                                   3646 ;buf                       Allocated to registers r5 r6 r7 
                                   3647 ;------------------------------------------------------------
                                   3648 ;	pff\source\pff.c:782: static BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
                                   3649 ;	-----------------------------------------
                                   3650 ;	 function check_fs
                                   3651 ;	-----------------------------------------
      001368                       3652 _check_fs:
      001368 C0*00            [24] 3653 	push	_bp
      00136A 85 81*00         [24] 3654 	mov	_bp,sp
      00136D AD 82            [24] 3655 	mov	r5,dpl
      00136F AE 83            [24] 3656 	mov	r6,dph
      001371 AF F0            [24] 3657 	mov	r7,b
                                   3658 ;	pff\source\pff.c:787: if (disk_readp(buf, sect, 510, 2)) {	/* Read the boot record */
      001373 C0 07            [24] 3659 	push	ar7
      001375 C0 06            [24] 3660 	push	ar6
      001377 C0 05            [24] 3661 	push	ar5
      001379 74 02            [12] 3662 	mov	a,#0x02
      00137B C0 E0            [24] 3663 	push	acc
      00137D E4               [12] 3664 	clr	a
      00137E C0 E0            [24] 3665 	push	acc
      001380 74 FE            [12] 3666 	mov	a,#0xfe
      001382 C0 E0            [24] 3667 	push	acc
      001384 F4               [12] 3668 	cpl	a
      001385 C0 E0            [24] 3669 	push	acc
      001387 E5*00            [12] 3670 	mov	a,_bp
      001389 24 FA            [12] 3671 	add	a,#0xfa
      00138B F8               [12] 3672 	mov	r0,a
      00138C E6               [12] 3673 	mov	a,@r0
      00138D C0 E0            [24] 3674 	push	acc
      00138F 08               [12] 3675 	inc	r0
      001390 E6               [12] 3676 	mov	a,@r0
      001391 C0 E0            [24] 3677 	push	acc
      001393 08               [12] 3678 	inc	r0
      001394 E6               [12] 3679 	mov	a,@r0
      001395 C0 E0            [24] 3680 	push	acc
      001397 08               [12] 3681 	inc	r0
      001398 E6               [12] 3682 	mov	a,@r0
      001399 C0 E0            [24] 3683 	push	acc
      00139B 8D 82            [24] 3684 	mov	dpl,r5
      00139D 8E 83            [24] 3685 	mov	dph,r6
      00139F 8F F0            [24] 3686 	mov	b,r7
      0013A1 12r00r00         [24] 3687 	lcall	_disk_readp
      0013A4 AC 82            [24] 3688 	mov	r4,dpl
      0013A6 E5 81            [12] 3689 	mov	a,sp
      0013A8 24 F8            [12] 3690 	add	a,#0xf8
      0013AA F5 81            [12] 3691 	mov	sp,a
      0013AC D0 05            [24] 3692 	pop	ar5
      0013AE D0 06            [24] 3693 	pop	ar6
      0013B0 D0 07            [24] 3694 	pop	ar7
      0013B2 EC               [12] 3695 	mov	a,r4
      0013B3 60 06            [24] 3696 	jz	00102$
                                   3697 ;	pff\source\pff.c:788: return 3;
      0013B5 75 82 03         [24] 3698 	mov	dpl,#0x03
      0013B8 02r14r3E         [24] 3699 	ljmp	00113$
      0013BB                       3700 00102$:
                                   3701 ;	pff\source\pff.c:790: if (ld_word(buf) != 0xAA55) {			/* Check record signature */
      0013BB 8D 82            [24] 3702 	mov	dpl,r5
      0013BD 8E 83            [24] 3703 	mov	dph,r6
      0013BF 8F F0            [24] 3704 	mov	b,r7
      0013C1 C0 07            [24] 3705 	push	ar7
      0013C3 C0 06            [24] 3706 	push	ar6
      0013C5 C0 05            [24] 3707 	push	ar5
      0013C7 12r00r00         [24] 3708 	lcall	_ld_word
      0013CA AB 82            [24] 3709 	mov	r3,dpl
      0013CC AC 83            [24] 3710 	mov	r4,dph
      0013CE D0 05            [24] 3711 	pop	ar5
      0013D0 D0 06            [24] 3712 	pop	ar6
      0013D2 D0 07            [24] 3713 	pop	ar7
      0013D4 BB 55 05         [24] 3714 	cjne	r3,#0x55,00132$
      0013D7 BC AA 02         [24] 3715 	cjne	r4,#0xaa,00132$
      0013DA 80 05            [24] 3716 	sjmp	00111$
      0013DC                       3717 00132$:
                                   3718 ;	pff\source\pff.c:791: return 2;
      0013DC 75 82 02         [24] 3719 	mov	dpl,#0x02
                                   3720 ;	pff\source\pff.c:797: if (PF_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && ld_word(buf) == 0x4146) {	/* Check FAT32 */
      0013DF 80 5D            [24] 3721 	sjmp	00113$
      0013E1                       3722 00111$:
      0013E1 C0 07            [24] 3723 	push	ar7
      0013E3 C0 06            [24] 3724 	push	ar6
      0013E5 C0 05            [24] 3725 	push	ar5
      0013E7 74 02            [12] 3726 	mov	a,#0x02
      0013E9 C0 E0            [24] 3727 	push	acc
      0013EB E4               [12] 3728 	clr	a
      0013EC C0 E0            [24] 3729 	push	acc
      0013EE 74 52            [12] 3730 	mov	a,#0x52
      0013F0 C0 E0            [24] 3731 	push	acc
      0013F2 E4               [12] 3732 	clr	a
      0013F3 C0 E0            [24] 3733 	push	acc
      0013F5 E5*00            [12] 3734 	mov	a,_bp
      0013F7 24 FA            [12] 3735 	add	a,#0xfa
      0013F9 F8               [12] 3736 	mov	r0,a
      0013FA E6               [12] 3737 	mov	a,@r0
      0013FB C0 E0            [24] 3738 	push	acc
      0013FD 08               [12] 3739 	inc	r0
      0013FE E6               [12] 3740 	mov	a,@r0
      0013FF C0 E0            [24] 3741 	push	acc
      001401 08               [12] 3742 	inc	r0
      001402 E6               [12] 3743 	mov	a,@r0
      001403 C0 E0            [24] 3744 	push	acc
      001405 08               [12] 3745 	inc	r0
      001406 E6               [12] 3746 	mov	a,@r0
      001407 C0 E0            [24] 3747 	push	acc
      001409 8D 82            [24] 3748 	mov	dpl,r5
      00140B 8E 83            [24] 3749 	mov	dph,r6
      00140D 8F F0            [24] 3750 	mov	b,r7
      00140F 12r00r00         [24] 3751 	lcall	_disk_readp
      001412 AC 82            [24] 3752 	mov	r4,dpl
      001414 E5 81            [12] 3753 	mov	a,sp
      001416 24 F8            [12] 3754 	add	a,#0xf8
      001418 F5 81            [12] 3755 	mov	sp,a
      00141A D0 05            [24] 3756 	pop	ar5
      00141C D0 06            [24] 3757 	pop	ar6
      00141E D0 07            [24] 3758 	pop	ar7
      001420 EC               [12] 3759 	mov	a,r4
      001421 70 18            [24] 3760 	jnz	00110$
      001423 8D 82            [24] 3761 	mov	dpl,r5
      001425 8E 83            [24] 3762 	mov	dph,r6
      001427 8F F0            [24] 3763 	mov	b,r7
      001429 12r00r00         [24] 3764 	lcall	_ld_word
      00142C AE 82            [24] 3765 	mov	r6,dpl
      00142E AF 83            [24] 3766 	mov	r7,dph
      001430 BE 46 08         [24] 3767 	cjne	r6,#0x46,00110$
      001433 BF 41 05         [24] 3768 	cjne	r7,#0x41,00110$
                                   3769 ;	pff\source\pff.c:798: return 0;
      001436 75 82 00         [24] 3770 	mov	dpl,#0x00
      001439 80 03            [24] 3771 	sjmp	00113$
      00143B                       3772 00110$:
                                   3773 ;	pff\source\pff.c:800: return 1;
      00143B 75 82 01         [24] 3774 	mov	dpl,#0x01
      00143E                       3775 00113$:
                                   3776 ;	pff\source\pff.c:801: }
      00143E D0*00            [24] 3777 	pop	_bp
      001440 22               [24] 3778 	ret
                                   3779 ;------------------------------------------------------------
                                   3780 ;Allocation info for local variables in function 'pf_mount'
                                   3781 ;------------------------------------------------------------
                                   3782 ;fs                        Allocated to stack - _bp +1
                                   3783 ;fmt                       Allocated to registers r7 
                                   3784 ;buf                       Allocated to stack - _bp +23
                                   3785 ;bsect                     Allocated to stack - _bp +59
                                   3786 ;fsize                     Allocated to stack - _bp +19
                                   3787 ;tsect                     Allocated to stack - _bp +15
                                   3788 ;mclst                     Allocated to stack - _bp +63
                                   3789 ;sloc0                     Allocated to stack - _bp +5
                                   3790 ;sloc1                     Allocated to stack - _bp +9
                                   3791 ;sloc2                     Allocated to stack - _bp +4
                                   3792 ;sloc3                     Allocated to stack - _bp +12
                                   3793 ;sloc4                     Allocated to stack - _bp +15
                                   3794 ;------------------------------------------------------------
                                   3795 ;	pff\source\pff.c:818: FRESULT pf_mount (
                                   3796 ;	-----------------------------------------
                                   3797 ;	 function pf_mount
                                   3798 ;	-----------------------------------------
      001441                       3799 _pf_mount:
      001441 C0*00            [24] 3800 	push	_bp
      001443 85 81*00         [24] 3801 	mov	_bp,sp
      001446 C0 82            [24] 3802 	push	dpl
      001448 C0 83            [24] 3803 	push	dph
      00144A C0 F0            [24] 3804 	push	b
      00144C E5 81            [12] 3805 	mov	a,sp
      00144E 24 3F            [12] 3806 	add	a,#0x3f
      001450 F5 81            [12] 3807 	mov	sp,a
                                   3808 ;	pff\source\pff.c:826: FatFs = 0;
      001452 90r00r00         [24] 3809 	mov	dptr,#_FatFs
      001455 E4               [12] 3810 	clr	a
      001456 F0               [24] 3811 	movx	@dptr,a
      001457 A3               [24] 3812 	inc	dptr
      001458 F0               [24] 3813 	movx	@dptr,a
      001459 A3               [24] 3814 	inc	dptr
      00145A F0               [24] 3815 	movx	@dptr,a
                                   3816 ;	pff\source\pff.c:828: if (disk_initialize() & STA_NOINIT) {	/* Check if the drive is ready or not */
      00145B 12r00r00         [24] 3817 	lcall	_disk_initialize
      00145E E5 82            [12] 3818 	mov	a,dpl
      001460 30 E0 06         [24] 3819 	jnb	acc.0,00102$
                                   3820 ;	pff\source\pff.c:829: return FR_NOT_READY;
      001463 75 82 02         [24] 3821 	mov	dpl,#0x02
      001466 02r19rEF         [24] 3822 	ljmp	00137$
      001469                       3823 00102$:
                                   3824 ;	pff\source\pff.c:833: bsect = 0;
      001469 E5*00            [12] 3825 	mov	a,_bp
      00146B 24 3B            [12] 3826 	add	a,#0x3b
      00146D F8               [12] 3827 	mov	r0,a
      00146E E4               [12] 3828 	clr	a
      00146F F6               [12] 3829 	mov	@r0,a
      001470 08               [12] 3830 	inc	r0
      001471 F6               [12] 3831 	mov	@r0,a
      001472 08               [12] 3832 	inc	r0
      001473 F6               [12] 3833 	mov	@r0,a
      001474 08               [12] 3834 	inc	r0
      001475 F6               [12] 3835 	mov	@r0,a
                                   3836 ;	pff\source\pff.c:834: fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
      001476 E5*00            [12] 3837 	mov	a,_bp
      001478 24 17            [12] 3838 	add	a,#0x17
      00147A F9               [12] 3839 	mov	r1,a
      00147B FA               [12] 3840 	mov	r2,a
      00147C 7B 00            [12] 3841 	mov	r3,#0x00
      00147E 7C 40            [12] 3842 	mov	r4,#0x40
      001480 C0 01            [24] 3843 	push	ar1
      001482 E4               [12] 3844 	clr	a
      001483 C0 E0            [24] 3845 	push	acc
      001485 C0 E0            [24] 3846 	push	acc
      001487 C0 E0            [24] 3847 	push	acc
      001489 C0 E0            [24] 3848 	push	acc
      00148B 8A 82            [24] 3849 	mov	dpl,r2
      00148D 8B 83            [24] 3850 	mov	dph,r3
      00148F 8C F0            [24] 3851 	mov	b,r4
      001491 12r13r68         [24] 3852 	lcall	_check_fs
      001494 AC 82            [24] 3853 	mov	r4,dpl
      001496 E5 81            [12] 3854 	mov	a,sp
      001498 24 FC            [12] 3855 	add	a,#0xfc
      00149A F5 81            [12] 3856 	mov	sp,a
      00149C D0 01            [24] 3857 	pop	ar1
                                   3858 ;	pff\source\pff.c:835: if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
      00149E BC 01 02         [24] 3859 	cjne	r4,#0x01,00195$
      0014A1 80 03            [24] 3860 	sjmp	00196$
      0014A3                       3861 00195$:
      0014A3 02r15r48         [24] 3862 	ljmp	00109$
      0014A6                       3863 00196$:
                                   3864 ;	pff\source\pff.c:837: if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
      0014A6 C0 04            [24] 3865 	push	ar4
      0014A8 89 03            [24] 3866 	mov	ar3,r1
      0014AA 8B 02            [24] 3867 	mov	ar2,r3
      0014AC 7B 00            [12] 3868 	mov	r3,#0x00
      0014AE 7C 40            [12] 3869 	mov	r4,#0x40
      0014B0 C0 01            [24] 3870 	push	ar1
      0014B2 74 10            [12] 3871 	mov	a,#0x10
      0014B4 C0 E0            [24] 3872 	push	acc
      0014B6 E4               [12] 3873 	clr	a
      0014B7 C0 E0            [24] 3874 	push	acc
      0014B9 74 BE            [12] 3875 	mov	a,#0xbe
      0014BB C0 E0            [24] 3876 	push	acc
      0014BD 74 01            [12] 3877 	mov	a,#0x01
      0014BF C0 E0            [24] 3878 	push	acc
      0014C1 E4               [12] 3879 	clr	a
      0014C2 C0 E0            [24] 3880 	push	acc
      0014C4 C0 E0            [24] 3881 	push	acc
      0014C6 C0 E0            [24] 3882 	push	acc
      0014C8 C0 E0            [24] 3883 	push	acc
      0014CA 8A 82            [24] 3884 	mov	dpl,r2
      0014CC 8B 83            [24] 3885 	mov	dph,r3
      0014CE 8C F0            [24] 3886 	mov	b,r4
      0014D0 12r00r00         [24] 3887 	lcall	_disk_readp
      0014D3 AC 82            [24] 3888 	mov	r4,dpl
      0014D5 E5 81            [12] 3889 	mov	a,sp
      0014D7 24 F8            [12] 3890 	add	a,#0xf8
      0014D9 F5 81            [12] 3891 	mov	sp,a
      0014DB D0 01            [24] 3892 	pop	ar1
      0014DD EC               [12] 3893 	mov	a,r4
      0014DE D0 04            [24] 3894 	pop	ar4
      0014E0 60 04            [24] 3895 	jz	00106$
                                   3896 ;	pff\source\pff.c:838: fmt = 3;
      0014E2 7C 03            [12] 3897 	mov	r4,#0x03
      0014E4 80 62            [24] 3898 	sjmp	00109$
      0014E6                       3899 00106$:
                                   3900 ;	pff\source\pff.c:840: if (buf[4]) {					/* Is the partition existing? */
      0014E6 74 04            [12] 3901 	mov	a,#0x04
      0014E8 29               [12] 3902 	add	a,r1
      0014E9 F8               [12] 3903 	mov	r0,a
      0014EA E6               [12] 3904 	mov	a,@r0
      0014EB 60 5B            [24] 3905 	jz	00109$
                                   3906 ;	pff\source\pff.c:841: bsect = ld_dword(&buf[8]);	/* Partition offset in LBA */
      0014ED 74 08            [12] 3907 	mov	a,#0x08
      0014EF 29               [12] 3908 	add	a,r1
      0014F0 FA               [12] 3909 	mov	r2,a
      0014F1 7B 00            [12] 3910 	mov	r3,#0x00
      0014F3 7F 40            [12] 3911 	mov	r7,#0x40
      0014F5 8A 82            [24] 3912 	mov	dpl,r2
      0014F7 8B 83            [24] 3913 	mov	dph,r3
      0014F9 8F F0            [24] 3914 	mov	b,r7
      0014FB C0 01            [24] 3915 	push	ar1
      0014FD 12r00r30         [24] 3916 	lcall	_ld_dword
      001500 AB 82            [24] 3917 	mov	r3,dpl
      001502 AD 83            [24] 3918 	mov	r5,dph
      001504 AE F0            [24] 3919 	mov	r6,b
      001506 FF               [12] 3920 	mov	r7,a
      001507 D0 01            [24] 3921 	pop	ar1
      001509 E5*00            [12] 3922 	mov	a,_bp
      00150B 24 3B            [12] 3923 	add	a,#0x3b
      00150D F8               [12] 3924 	mov	r0,a
      00150E A6 03            [24] 3925 	mov	@r0,ar3
      001510 08               [12] 3926 	inc	r0
      001511 A6 05            [24] 3927 	mov	@r0,ar5
      001513 08               [12] 3928 	inc	r0
      001514 A6 06            [24] 3929 	mov	@r0,ar6
      001516 08               [12] 3930 	inc	r0
      001517 A6 07            [24] 3931 	mov	@r0,ar7
                                   3932 ;	pff\source\pff.c:842: fmt = check_fs(buf, bsect);	/* Check the partition */
      001519 89 07            [24] 3933 	mov	ar7,r1
      00151B 7E 00            [12] 3934 	mov	r6,#0x00
      00151D 7D 40            [12] 3935 	mov	r5,#0x40
      00151F C0 01            [24] 3936 	push	ar1
      001521 E5*00            [12] 3937 	mov	a,_bp
      001523 24 3B            [12] 3938 	add	a,#0x3b
      001525 F8               [12] 3939 	mov	r0,a
      001526 E6               [12] 3940 	mov	a,@r0
      001527 C0 E0            [24] 3941 	push	acc
      001529 08               [12] 3942 	inc	r0
      00152A E6               [12] 3943 	mov	a,@r0
      00152B C0 E0            [24] 3944 	push	acc
      00152D 08               [12] 3945 	inc	r0
      00152E E6               [12] 3946 	mov	a,@r0
      00152F C0 E0            [24] 3947 	push	acc
      001531 08               [12] 3948 	inc	r0
      001532 E6               [12] 3949 	mov	a,@r0
      001533 C0 E0            [24] 3950 	push	acc
      001535 8F 82            [24] 3951 	mov	dpl,r7
      001537 8E 83            [24] 3952 	mov	dph,r6
      001539 8D F0            [24] 3953 	mov	b,r5
      00153B 12r13r68         [24] 3954 	lcall	_check_fs
      00153E AC 82            [24] 3955 	mov	r4,dpl
      001540 E5 81            [12] 3956 	mov	a,sp
      001542 24 FC            [12] 3957 	add	a,#0xfc
      001544 F5 81            [12] 3958 	mov	sp,a
      001546 D0 01            [24] 3959 	pop	ar1
                                   3960 ;	pff\source\pff.c:883: return FR_OK;
                                   3961 ;	pff\source\pff.c:842: fmt = check_fs(buf, bsect);	/* Check the partition */
      001548                       3962 00109$:
                                   3963 ;	pff\source\pff.c:846: if (fmt == 3) return FR_DISK_ERR;
      001548 BC 03 06         [24] 3964 	cjne	r4,#0x03,00111$
      00154B 75 82 01         [24] 3965 	mov	dpl,#0x01
      00154E 02r19rEF         [24] 3966 	ljmp	00137$
      001551                       3967 00111$:
                                   3968 ;	pff\source\pff.c:847: if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
      001551 EC               [12] 3969 	mov	a,r4
      001552 60 06            [24] 3970 	jz	00113$
      001554 75 82 06         [24] 3971 	mov	dpl,#0x06
      001557 02r19rEF         [24] 3972 	ljmp	00137$
      00155A                       3973 00113$:
                                   3974 ;	pff\source\pff.c:850: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
      00155A 89 04            [24] 3975 	mov	ar4,r1
      00155C 7B 00            [12] 3976 	mov	r3,#0x00
      00155E 7A 40            [12] 3977 	mov	r2,#0x40
      001560 C0 01            [24] 3978 	push	ar1
      001562 74 24            [12] 3979 	mov	a,#0x24
      001564 C0 E0            [24] 3980 	push	acc
      001566 E4               [12] 3981 	clr	a
      001567 C0 E0            [24] 3982 	push	acc
      001569 74 0D            [12] 3983 	mov	a,#0x0d
      00156B C0 E0            [24] 3984 	push	acc
      00156D E4               [12] 3985 	clr	a
      00156E C0 E0            [24] 3986 	push	acc
      001570 E5*00            [12] 3987 	mov	a,_bp
      001572 24 3B            [12] 3988 	add	a,#0x3b
      001574 F8               [12] 3989 	mov	r0,a
      001575 E6               [12] 3990 	mov	a,@r0
      001576 C0 E0            [24] 3991 	push	acc
      001578 08               [12] 3992 	inc	r0
      001579 E6               [12] 3993 	mov	a,@r0
      00157A C0 E0            [24] 3994 	push	acc
      00157C 08               [12] 3995 	inc	r0
      00157D E6               [12] 3996 	mov	a,@r0
      00157E C0 E0            [24] 3997 	push	acc
      001580 08               [12] 3998 	inc	r0
      001581 E6               [12] 3999 	mov	a,@r0
      001582 C0 E0            [24] 4000 	push	acc
      001584 8C 82            [24] 4001 	mov	dpl,r4
      001586 8B 83            [24] 4002 	mov	dph,r3
      001588 8A F0            [24] 4003 	mov	b,r2
      00158A 12r00r00         [24] 4004 	lcall	_disk_readp
      00158D AC 82            [24] 4005 	mov	r4,dpl
      00158F E5 81            [12] 4006 	mov	a,sp
      001591 24 F8            [12] 4007 	add	a,#0xf8
      001593 F5 81            [12] 4008 	mov	sp,a
      001595 D0 01            [24] 4009 	pop	ar1
      001597 EC               [12] 4010 	mov	a,r4
      001598 60 06            [24] 4011 	jz	00115$
      00159A 75 82 01         [24] 4012 	mov	dpl,#0x01
      00159D 02r19rEF         [24] 4013 	ljmp	00137$
      0015A0                       4014 00115$:
                                   4015 ;	pff\source\pff.c:852: fsize = ld_word(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
      0015A0 74 09            [12] 4016 	mov	a,#0x09
      0015A2 29               [12] 4017 	add	a,r1
      0015A3 FC               [12] 4018 	mov	r4,a
      0015A4 7B 00            [12] 4019 	mov	r3,#0x00
      0015A6 7A 40            [12] 4020 	mov	r2,#0x40
      0015A8 8C 82            [24] 4021 	mov	dpl,r4
      0015AA 8B 83            [24] 4022 	mov	dph,r3
      0015AC 8A F0            [24] 4023 	mov	b,r2
      0015AE C0 01            [24] 4024 	push	ar1
      0015B0 12r00r00         [24] 4025 	lcall	_ld_word
      0015B3 AB 82            [24] 4026 	mov	r3,dpl
      0015B5 AC 83            [24] 4027 	mov	r4,dph
      0015B7 D0 01            [24] 4028 	pop	ar1
      0015B9 E5*00            [12] 4029 	mov	a,_bp
      0015BB 24 05            [12] 4030 	add	a,#0x05
      0015BD F8               [12] 4031 	mov	r0,a
      0015BE A6 03            [24] 4032 	mov	@r0,ar3
      0015C0 08               [12] 4033 	inc	r0
      0015C1 A6 04            [24] 4034 	mov	@r0,ar4
      0015C3 08               [12] 4035 	inc	r0
      0015C4 76 00            [12] 4036 	mov	@r0,#0x00
      0015C6 08               [12] 4037 	inc	r0
      0015C7 76 00            [12] 4038 	mov	@r0,#0x00
                                   4039 ;	pff\source\pff.c:853: if (!fsize) fsize = ld_dword(buf+BPB_FATSz32-13);
      0015C9 E5*00            [12] 4040 	mov	a,_bp
      0015CB 24 05            [12] 4041 	add	a,#0x05
      0015CD F8               [12] 4042 	mov	r0,a
      0015CE E6               [12] 4043 	mov	a,@r0
      0015CF 08               [12] 4044 	inc	r0
      0015D0 46               [12] 4045 	orl	a,@r0
      0015D1 08               [12] 4046 	inc	r0
      0015D2 46               [12] 4047 	orl	a,@r0
      0015D3 08               [12] 4048 	inc	r0
      0015D4 46               [12] 4049 	orl	a,@r0
      0015D5 70 25            [24] 4050 	jnz	00117$
      0015D7 74 17            [12] 4051 	mov	a,#0x17
      0015D9 29               [12] 4052 	add	a,r1
      0015DA FC               [12] 4053 	mov	r4,a
      0015DB 7B 00            [12] 4054 	mov	r3,#0x00
      0015DD 7A 40            [12] 4055 	mov	r2,#0x40
      0015DF 8C 82            [24] 4056 	mov	dpl,r4
      0015E1 8B 83            [24] 4057 	mov	dph,r3
      0015E3 8A F0            [24] 4058 	mov	b,r2
      0015E5 C0 01            [24] 4059 	push	ar1
      0015E7 12r00r30         [24] 4060 	lcall	_ld_dword
      0015EA C8               [12] 4061 	xch	a,r0
      0015EB E5*00            [12] 4062 	mov	a,_bp
      0015ED 24 05            [12] 4063 	add	a,#0x05
      0015EF C8               [12] 4064 	xch	a,r0
      0015F0 A6 82            [24] 4065 	mov	@r0,dpl
      0015F2 08               [12] 4066 	inc	r0
      0015F3 A6 83            [24] 4067 	mov	@r0,dph
      0015F5 08               [12] 4068 	inc	r0
      0015F6 A6 F0            [24] 4069 	mov	@r0,b
      0015F8 08               [12] 4070 	inc	r0
      0015F9 F6               [12] 4071 	mov	@r0,a
      0015FA D0 01            [24] 4072 	pop	ar1
      0015FC                       4073 00117$:
                                   4074 ;	pff\source\pff.c:855: fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
      0015FC 74 03            [12] 4075 	mov	a,#0x03
      0015FE 29               [12] 4076 	add	a,r1
      0015FF F8               [12] 4077 	mov	r0,a
      001600 86 04            [24] 4078 	mov	ar4,@r0
      001602 8C 02            [24] 4079 	mov	ar2,r4
      001604 7B 00            [12] 4080 	mov	r3,#0x00
      001606 7C 00            [12] 4081 	mov	r4,#0x00
      001608 7F 00            [12] 4082 	mov	r7,#0x00
      00160A C0 01            [24] 4083 	push	ar1
      00160C C0 02            [24] 4084 	push	ar2
      00160E C0 03            [24] 4085 	push	ar3
      001610 C0 04            [24] 4086 	push	ar4
      001612 C0 07            [24] 4087 	push	ar7
      001614 E5*00            [12] 4088 	mov	a,_bp
      001616 24 05            [12] 4089 	add	a,#0x05
      001618 F8               [12] 4090 	mov	r0,a
      001619 86 82            [24] 4091 	mov	dpl,@r0
      00161B 08               [12] 4092 	inc	r0
      00161C 86 83            [24] 4093 	mov	dph,@r0
      00161E 08               [12] 4094 	inc	r0
      00161F 86 F0            [24] 4095 	mov	b,@r0
      001621 08               [12] 4096 	inc	r0
      001622 E6               [12] 4097 	mov	a,@r0
      001623 12r00r00         [24] 4098 	lcall	__mullong
      001626 AC 82            [24] 4099 	mov	r4,dpl
      001628 AD 83            [24] 4100 	mov	r5,dph
      00162A AE F0            [24] 4101 	mov	r6,b
      00162C FF               [12] 4102 	mov	r7,a
      00162D E5 81            [12] 4103 	mov	a,sp
      00162F 24 FC            [12] 4104 	add	a,#0xfc
      001631 F5 81            [12] 4105 	mov	sp,a
      001633 E5*00            [12] 4106 	mov	a,_bp
      001635 24 13            [12] 4107 	add	a,#0x13
      001637 F8               [12] 4108 	mov	r0,a
      001638 A6 04            [24] 4109 	mov	@r0,ar4
      00163A 08               [12] 4110 	inc	r0
      00163B A6 05            [24] 4111 	mov	@r0,ar5
      00163D 08               [12] 4112 	inc	r0
      00163E A6 06            [24] 4113 	mov	@r0,ar6
      001640 08               [12] 4114 	inc	r0
      001641 A6 07            [24] 4115 	mov	@r0,ar7
                                   4116 ;	pff\source\pff.c:856: fs->fatbase = bsect + ld_word(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
      001643 A8*00            [24] 4117 	mov	r0,_bp
      001645 08               [12] 4118 	inc	r0
      001646 E5*00            [12] 4119 	mov	a,_bp
      001648 24 05            [12] 4120 	add	a,#0x05
      00164A F9               [12] 4121 	mov	r1,a
      00164B 74 0A            [12] 4122 	mov	a,#0x0a
      00164D 26               [12] 4123 	add	a,@r0
      00164E F7               [12] 4124 	mov	@r1,a
      00164F E4               [12] 4125 	clr	a
      001650 08               [12] 4126 	inc	r0
      001651 36               [12] 4127 	addc	a,@r0
      001652 09               [12] 4128 	inc	r1
      001653 F7               [12] 4129 	mov	@r1,a
      001654 08               [12] 4130 	inc	r0
      001655 E6               [12] 4131 	mov	a,@r0
      001656 09               [12] 4132 	inc	r1
      001657 F7               [12] 4133 	mov	@r1,a
      001658 D0 01            [24] 4134 	pop	ar1
      00165A E5*00            [12] 4135 	mov	a,_bp
      00165C 24 04            [12] 4136 	add	a,#0x04
      00165E F8               [12] 4137 	mov	r0,a
      00165F E9               [12] 4138 	mov	a,r1
      001660 04               [12] 4139 	inc	a
      001661 F6               [12] 4140 	mov	@r0,a
      001662 E5*00            [12] 4141 	mov	a,_bp
      001664 24 04            [12] 4142 	add	a,#0x04
      001666 F8               [12] 4143 	mov	r0,a
      001667 86 02            [24] 4144 	mov	ar2,@r0
      001669 7E 00            [12] 4145 	mov	r6,#0x00
      00166B 7F 40            [12] 4146 	mov	r7,#0x40
      00166D 8A 82            [24] 4147 	mov	dpl,r2
      00166F 8E 83            [24] 4148 	mov	dph,r6
      001671 8F F0            [24] 4149 	mov	b,r7
      001673 C0 01            [24] 4150 	push	ar1
      001675 12r00r00         [24] 4151 	lcall	_ld_word
      001678 AE 82            [24] 4152 	mov	r6,dpl
      00167A AF 83            [24] 4153 	mov	r7,dph
      00167C E4               [12] 4154 	clr	a
      00167D FD               [12] 4155 	mov	r5,a
      00167E FC               [12] 4156 	mov	r4,a
      00167F E5*00            [12] 4157 	mov	a,_bp
      001681 24 3B            [12] 4158 	add	a,#0x3b
      001683 F8               [12] 4159 	mov	r0,a
      001684 EE               [12] 4160 	mov	a,r6
      001685 26               [12] 4161 	add	a,@r0
      001686 FE               [12] 4162 	mov	r6,a
      001687 EF               [12] 4163 	mov	a,r7
      001688 08               [12] 4164 	inc	r0
      001689 36               [12] 4165 	addc	a,@r0
      00168A FF               [12] 4166 	mov	r7,a
      00168B ED               [12] 4167 	mov	a,r5
      00168C 08               [12] 4168 	inc	r0
      00168D 36               [12] 4169 	addc	a,@r0
      00168E FD               [12] 4170 	mov	r5,a
      00168F EC               [12] 4171 	mov	a,r4
      001690 08               [12] 4172 	inc	r0
      001691 36               [12] 4173 	addc	a,@r0
      001692 FC               [12] 4174 	mov	r4,a
      001693 E5*00            [12] 4175 	mov	a,_bp
      001695 24 05            [12] 4176 	add	a,#0x05
      001697 F8               [12] 4177 	mov	r0,a
      001698 86 82            [24] 4178 	mov	dpl,@r0
      00169A 08               [12] 4179 	inc	r0
      00169B 86 83            [24] 4180 	mov	dph,@r0
      00169D 08               [12] 4181 	inc	r0
      00169E 86 F0            [24] 4182 	mov	b,@r0
      0016A0 EE               [12] 4183 	mov	a,r6
      0016A1 12r00r00         [24] 4184 	lcall	__gptrput
      0016A4 A3               [24] 4185 	inc	dptr
      0016A5 EF               [12] 4186 	mov	a,r7
      0016A6 12r00r00         [24] 4187 	lcall	__gptrput
      0016A9 A3               [24] 4188 	inc	dptr
      0016AA ED               [12] 4189 	mov	a,r5
      0016AB 12r00r00         [24] 4190 	lcall	__gptrput
      0016AE A3               [24] 4191 	inc	dptr
      0016AF EC               [12] 4192 	mov	a,r4
      0016B0 12r00r00         [24] 4193 	lcall	__gptrput
                                   4194 ;	pff\source\pff.c:857: fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
      0016B3 A8*00            [24] 4195 	mov	r0,_bp
      0016B5 08               [12] 4196 	inc	r0
      0016B6 E5*00            [12] 4197 	mov	a,_bp
      0016B8 24 0C            [12] 4198 	add	a,#0x0c
      0016BA F9               [12] 4199 	mov	r1,a
      0016BB 74 02            [12] 4200 	mov	a,#0x02
      0016BD 26               [12] 4201 	add	a,@r0
      0016BE F7               [12] 4202 	mov	@r1,a
      0016BF E4               [12] 4203 	clr	a
      0016C0 08               [12] 4204 	inc	r0
      0016C1 36               [12] 4205 	addc	a,@r0
      0016C2 09               [12] 4206 	inc	r1
      0016C3 F7               [12] 4207 	mov	@r1,a
      0016C4 08               [12] 4208 	inc	r0
      0016C5 E6               [12] 4209 	mov	a,@r0
      0016C6 09               [12] 4210 	inc	r1
      0016C7 F7               [12] 4211 	mov	@r1,a
      0016C8 D0 01            [24] 4212 	pop	ar1
      0016CA 87 04            [24] 4213 	mov	ar4,@r1
      0016CC E5*00            [12] 4214 	mov	a,_bp
      0016CE 24 0C            [12] 4215 	add	a,#0x0c
      0016D0 F8               [12] 4216 	mov	r0,a
      0016D1 86 82            [24] 4217 	mov	dpl,@r0
      0016D3 08               [12] 4218 	inc	r0
      0016D4 86 83            [24] 4219 	mov	dph,@r0
      0016D6 08               [12] 4220 	inc	r0
      0016D7 86 F0            [24] 4221 	mov	b,@r0
      0016D9 EC               [12] 4222 	mov	a,r4
      0016DA 12r00r00         [24] 4223 	lcall	__gptrput
                                   4224 ;	pff\source\pff.c:858: fs->n_rootdir = ld_word(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
      0016DD A8*00            [24] 4225 	mov	r0,_bp
      0016DF 08               [12] 4226 	inc	r0
      0016E0 C0 01            [24] 4227 	push	ar1
      0016E2 E5*00            [12] 4228 	mov	a,_bp
      0016E4 24 09            [12] 4229 	add	a,#0x09
      0016E6 F9               [12] 4230 	mov	r1,a
      0016E7 74 04            [12] 4231 	mov	a,#0x04
      0016E9 26               [12] 4232 	add	a,@r0
      0016EA F7               [12] 4233 	mov	@r1,a
      0016EB E4               [12] 4234 	clr	a
      0016EC 08               [12] 4235 	inc	r0
      0016ED 36               [12] 4236 	addc	a,@r0
      0016EE 09               [12] 4237 	inc	r1
      0016EF F7               [12] 4238 	mov	@r1,a
      0016F0 08               [12] 4239 	inc	r0
      0016F1 E6               [12] 4240 	mov	a,@r0
      0016F2 09               [12] 4241 	inc	r1
      0016F3 F7               [12] 4242 	mov	@r1,a
      0016F4 D0 01            [24] 4243 	pop	ar1
      0016F6 74 04            [12] 4244 	mov	a,#0x04
      0016F8 29               [12] 4245 	add	a,r1
      0016F9 FA               [12] 4246 	mov	r2,a
      0016FA 7B 00            [12] 4247 	mov	r3,#0x00
      0016FC 7C 40            [12] 4248 	mov	r4,#0x40
      0016FE 8A 82            [24] 4249 	mov	dpl,r2
      001700 8B 83            [24] 4250 	mov	dph,r3
      001702 8C F0            [24] 4251 	mov	b,r4
      001704 C0 01            [24] 4252 	push	ar1
      001706 12r00r00         [24] 4253 	lcall	_ld_word
      001709 AB 82            [24] 4254 	mov	r3,dpl
      00170B AC 83            [24] 4255 	mov	r4,dph
      00170D D0 01            [24] 4256 	pop	ar1
      00170F E5*00            [12] 4257 	mov	a,_bp
      001711 24 09            [12] 4258 	add	a,#0x09
      001713 F8               [12] 4259 	mov	r0,a
      001714 86 82            [24] 4260 	mov	dpl,@r0
      001716 08               [12] 4261 	inc	r0
      001717 86 83            [24] 4262 	mov	dph,@r0
      001719 08               [12] 4263 	inc	r0
      00171A 86 F0            [24] 4264 	mov	b,@r0
      00171C EB               [12] 4265 	mov	a,r3
      00171D 12r00r00         [24] 4266 	lcall	__gptrput
      001720 A3               [24] 4267 	inc	dptr
      001721 EC               [12] 4268 	mov	a,r4
      001722 12r00r00         [24] 4269 	lcall	__gptrput
                                   4270 ;	pff\source\pff.c:859: tsect = ld_word(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
      001725 74 06            [12] 4271 	mov	a,#0x06
      001727 29               [12] 4272 	add	a,r1
      001728 FC               [12] 4273 	mov	r4,a
      001729 7B 00            [12] 4274 	mov	r3,#0x00
      00172B 7A 40            [12] 4275 	mov	r2,#0x40
      00172D 8C 82            [24] 4276 	mov	dpl,r4
      00172F 8B 83            [24] 4277 	mov	dph,r3
      001731 8A F0            [24] 4278 	mov	b,r2
      001733 C0 01            [24] 4279 	push	ar1
      001735 12r00r00         [24] 4280 	lcall	_ld_word
      001738 AB 82            [24] 4281 	mov	r3,dpl
      00173A AC 83            [24] 4282 	mov	r4,dph
      00173C D0 01            [24] 4283 	pop	ar1
      00173E 8C 02            [24] 4284 	mov	ar2,r4
      001740 E4               [12] 4285 	clr	a
      001741 FC               [12] 4286 	mov	r4,a
      001742 FF               [12] 4287 	mov	r7,a
      001743 E5*00            [12] 4288 	mov	a,_bp
      001745 24 0F            [12] 4289 	add	a,#0x0f
      001747 F8               [12] 4290 	mov	r0,a
      001748 A6 03            [24] 4291 	mov	@r0,ar3
      00174A 08               [12] 4292 	inc	r0
      00174B A6 02            [24] 4293 	mov	@r0,ar2
      00174D 08               [12] 4294 	inc	r0
      00174E A6 04            [24] 4295 	mov	@r0,ar4
      001750 08               [12] 4296 	inc	r0
      001751 A6 07            [24] 4297 	mov	@r0,ar7
                                   4298 ;	pff\source\pff.c:860: if (!tsect) tsect = ld_dword(buf+BPB_TotSec32-13);
      001753 EB               [12] 4299 	mov	a,r3
      001754 4A               [12] 4300 	orl	a,r2
      001755 4C               [12] 4301 	orl	a,r4
      001756 4F               [12] 4302 	orl	a,r7
      001757 70 2C            [24] 4303 	jnz	00119$
      001759 74 13            [12] 4304 	mov	a,#0x13
      00175B 29               [12] 4305 	add	a,r1
      00175C FF               [12] 4306 	mov	r7,a
      00175D 7E 00            [12] 4307 	mov	r6,#0x00
      00175F 7D 40            [12] 4308 	mov	r5,#0x40
      001761 8F 82            [24] 4309 	mov	dpl,r7
      001763 8E 83            [24] 4310 	mov	dph,r6
      001765 8D F0            [24] 4311 	mov	b,r5
      001767 C0 01            [24] 4312 	push	ar1
      001769 12r00r30         [24] 4313 	lcall	_ld_dword
      00176C AC 82            [24] 4314 	mov	r4,dpl
      00176E AD 83            [24] 4315 	mov	r5,dph
      001770 AE F0            [24] 4316 	mov	r6,b
      001772 FF               [12] 4317 	mov	r7,a
      001773 D0 01            [24] 4318 	pop	ar1
      001775 E5*00            [12] 4319 	mov	a,_bp
      001777 24 0F            [12] 4320 	add	a,#0x0f
      001779 F8               [12] 4321 	mov	r0,a
      00177A A6 04            [24] 4322 	mov	@r0,ar4
      00177C 08               [12] 4323 	inc	r0
      00177D A6 05            [24] 4324 	mov	@r0,ar5
      00177F 08               [12] 4325 	inc	r0
      001780 A6 06            [24] 4326 	mov	@r0,ar6
      001782 08               [12] 4327 	inc	r0
      001783 A6 07            [24] 4328 	mov	@r0,ar7
      001785                       4329 00119$:
                                   4330 ;	pff\source\pff.c:862: - ld_word(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
      001785 C0 01            [24] 4331 	push	ar1
      001787 E5*00            [12] 4332 	mov	a,_bp
      001789 24 04            [12] 4333 	add	a,#0x04
      00178B F8               [12] 4334 	mov	r0,a
      00178C 86 07            [24] 4335 	mov	ar7,@r0
      00178E 7E 00            [12] 4336 	mov	r6,#0x00
      001790 7D 40            [12] 4337 	mov	r5,#0x40
      001792 8F 82            [24] 4338 	mov	dpl,r7
      001794 8E 83            [24] 4339 	mov	dph,r6
      001796 8D F0            [24] 4340 	mov	b,r5
      001798 C0 01            [24] 4341 	push	ar1
      00179A 12r00r00         [24] 4342 	lcall	_ld_word
      00179D AE 82            [24] 4343 	mov	r6,dpl
      00179F AF 83            [24] 4344 	mov	r7,dph
      0017A1 E4               [12] 4345 	clr	a
      0017A2 FD               [12] 4346 	mov	r5,a
      0017A3 FC               [12] 4347 	mov	r4,a
      0017A4 E5*00            [12] 4348 	mov	a,_bp
      0017A6 24 0F            [12] 4349 	add	a,#0x0f
      0017A8 F8               [12] 4350 	mov	r0,a
      0017A9 E6               [12] 4351 	mov	a,@r0
      0017AA C3               [12] 4352 	clr	c
      0017AB 9E               [12] 4353 	subb	a,r6
      0017AC FE               [12] 4354 	mov	r6,a
      0017AD 08               [12] 4355 	inc	r0
      0017AE E6               [12] 4356 	mov	a,@r0
      0017AF 9F               [12] 4357 	subb	a,r7
      0017B0 FF               [12] 4358 	mov	r7,a
      0017B1 08               [12] 4359 	inc	r0
      0017B2 E6               [12] 4360 	mov	a,@r0
      0017B3 9D               [12] 4361 	subb	a,r5
      0017B4 FD               [12] 4362 	mov	r5,a
      0017B5 08               [12] 4363 	inc	r0
      0017B6 E6               [12] 4364 	mov	a,@r0
      0017B7 9C               [12] 4365 	subb	a,r4
      0017B8 FC               [12] 4366 	mov	r4,a
      0017B9 E5*00            [12] 4367 	mov	a,_bp
      0017BB 24 13            [12] 4368 	add	a,#0x13
      0017BD F8               [12] 4369 	mov	r0,a
      0017BE E5*00            [12] 4370 	mov	a,_bp
      0017C0 24 0F            [12] 4371 	add	a,#0x0f
      0017C2 F9               [12] 4372 	mov	r1,a
      0017C3 EE               [12] 4373 	mov	a,r6
      0017C4 C3               [12] 4374 	clr	c
      0017C5 96               [12] 4375 	subb	a,@r0
      0017C6 F7               [12] 4376 	mov	@r1,a
      0017C7 EF               [12] 4377 	mov	a,r7
      0017C8 08               [12] 4378 	inc	r0
      0017C9 96               [12] 4379 	subb	a,@r0
      0017CA 09               [12] 4380 	inc	r1
      0017CB F7               [12] 4381 	mov	@r1,a
      0017CC ED               [12] 4382 	mov	a,r5
      0017CD 08               [12] 4383 	inc	r0
      0017CE 96               [12] 4384 	subb	a,@r0
      0017CF 09               [12] 4385 	inc	r1
      0017D0 F7               [12] 4386 	mov	@r1,a
      0017D1 EC               [12] 4387 	mov	a,r4
      0017D2 08               [12] 4388 	inc	r0
      0017D3 96               [12] 4389 	subb	a,@r0
      0017D4 09               [12] 4390 	inc	r1
      0017D5 F7               [12] 4391 	mov	@r1,a
      0017D6 E5*00            [12] 4392 	mov	a,_bp
      0017D8 24 09            [12] 4393 	add	a,#0x09
      0017DA F8               [12] 4394 	mov	r0,a
      0017DB 86 82            [24] 4395 	mov	dpl,@r0
      0017DD 08               [12] 4396 	inc	r0
      0017DE 86 83            [24] 4397 	mov	dph,@r0
      0017E0 08               [12] 4398 	inc	r0
      0017E1 86 F0            [24] 4399 	mov	b,@r0
      0017E3 12r00r00         [24] 4400 	lcall	__gptrget
      0017E6 FA               [12] 4401 	mov	r2,a
      0017E7 A3               [24] 4402 	inc	dptr
      0017E8 12r00r00         [24] 4403 	lcall	__gptrget
      0017EB C4               [12] 4404 	swap	a
      0017EC CA               [12] 4405 	xch	a,r2
      0017ED C4               [12] 4406 	swap	a
      0017EE 54 0F            [12] 4407 	anl	a,#0x0f
      0017F0 6A               [12] 4408 	xrl	a,r2
      0017F1 CA               [12] 4409 	xch	a,r2
      0017F2 54 0F            [12] 4410 	anl	a,#0x0f
      0017F4 CA               [12] 4411 	xch	a,r2
      0017F5 6A               [12] 4412 	xrl	a,r2
      0017F6 CA               [12] 4413 	xch	a,r2
      0017F7 FB               [12] 4414 	mov	r3,a
      0017F8 E4               [12] 4415 	clr	a
      0017F9 FE               [12] 4416 	mov	r6,a
      0017FA FF               [12] 4417 	mov	r7,a
      0017FB E5*00            [12] 4418 	mov	a,_bp
      0017FD 24 0F            [12] 4419 	add	a,#0x0f
      0017FF F8               [12] 4420 	mov	r0,a
      001800 E6               [12] 4421 	mov	a,@r0
      001801 C3               [12] 4422 	clr	c
      001802 9A               [12] 4423 	subb	a,r2
      001803 F6               [12] 4424 	mov	@r0,a
      001804 08               [12] 4425 	inc	r0
      001805 E6               [12] 4426 	mov	a,@r0
      001806 9B               [12] 4427 	subb	a,r3
      001807 F6               [12] 4428 	mov	@r0,a
      001808 08               [12] 4429 	inc	r0
      001809 E6               [12] 4430 	mov	a,@r0
      00180A 9E               [12] 4431 	subb	a,r6
      00180B F6               [12] 4432 	mov	@r0,a
      00180C 08               [12] 4433 	inc	r0
      00180D E6               [12] 4434 	mov	a,@r0
      00180E 9F               [12] 4435 	subb	a,r7
      00180F F6               [12] 4436 	mov	@r0,a
                                   4437 ;	pff\source\pff.c:863: ) / fs->csize + 2;
      001810 E5*00            [12] 4438 	mov	a,_bp
      001812 24 0C            [12] 4439 	add	a,#0x0c
      001814 F8               [12] 4440 	mov	r0,a
      001815 86 82            [24] 4441 	mov	dpl,@r0
      001817 08               [12] 4442 	inc	r0
      001818 86 83            [24] 4443 	mov	dph,@r0
      00181A 08               [12] 4444 	inc	r0
      00181B 86 F0            [24] 4445 	mov	b,@r0
      00181D 12r00r00         [24] 4446 	lcall	__gptrget
      001820 FC               [12] 4447 	mov	r4,a
      001821 7D 00            [12] 4448 	mov	r5,#0x00
      001823 7E 00            [12] 4449 	mov	r6,#0x00
      001825 7F 00            [12] 4450 	mov	r7,#0x00
      001827 C0 04            [24] 4451 	push	ar4
      001829 C0 05            [24] 4452 	push	ar5
      00182B C0 06            [24] 4453 	push	ar6
      00182D C0 07            [24] 4454 	push	ar7
      00182F E5*00            [12] 4455 	mov	a,_bp
      001831 24 0F            [12] 4456 	add	a,#0x0f
      001833 F8               [12] 4457 	mov	r0,a
      001834 86 82            [24] 4458 	mov	dpl,@r0
      001836 08               [12] 4459 	inc	r0
      001837 86 83            [24] 4460 	mov	dph,@r0
      001839 08               [12] 4461 	inc	r0
      00183A 86 F0            [24] 4462 	mov	b,@r0
      00183C 08               [12] 4463 	inc	r0
      00183D E6               [12] 4464 	mov	a,@r0
      00183E 12r00r00         [24] 4465 	lcall	__divulong
      001841 AC 82            [24] 4466 	mov	r4,dpl
      001843 AD 83            [24] 4467 	mov	r5,dph
      001845 AE F0            [24] 4468 	mov	r6,b
      001847 FF               [12] 4469 	mov	r7,a
      001848 E5 81            [12] 4470 	mov	a,sp
      00184A 24 FC            [12] 4471 	add	a,#0xfc
      00184C F5 81            [12] 4472 	mov	sp,a
      00184E D0 01            [24] 4473 	pop	ar1
      001850 E5*00            [12] 4474 	mov	a,_bp
      001852 24 3F            [12] 4475 	add	a,#0x3f
      001854 F8               [12] 4476 	mov	r0,a
      001855 74 02            [12] 4477 	mov	a,#0x02
      001857 2C               [12] 4478 	add	a,r4
      001858 F6               [12] 4479 	mov	@r0,a
      001859 E4               [12] 4480 	clr	a
      00185A 3D               [12] 4481 	addc	a,r5
      00185B 08               [12] 4482 	inc	r0
      00185C F6               [12] 4483 	mov	@r0,a
      00185D E4               [12] 4484 	clr	a
      00185E 3E               [12] 4485 	addc	a,r6
      00185F 08               [12] 4486 	inc	r0
      001860 F6               [12] 4487 	mov	@r0,a
      001861 E4               [12] 4488 	clr	a
      001862 3F               [12] 4489 	addc	a,r7
      001863 08               [12] 4490 	inc	r0
      001864 F6               [12] 4491 	mov	@r0,a
                                   4492 ;	pff\source\pff.c:864: fs->n_fatent = (CLUST)mclst;
      001865 A8*00            [24] 4493 	mov	r0,_bp
      001867 08               [12] 4494 	inc	r0
      001868 74 06            [12] 4495 	mov	a,#0x06
      00186A 26               [12] 4496 	add	a,@r0
      00186B FA               [12] 4497 	mov	r2,a
      00186C E4               [12] 4498 	clr	a
      00186D 08               [12] 4499 	inc	r0
      00186E 36               [12] 4500 	addc	a,@r0
      00186F FB               [12] 4501 	mov	r3,a
      001870 08               [12] 4502 	inc	r0
      001871 86 07            [24] 4503 	mov	ar7,@r0
      001873 8A 82            [24] 4504 	mov	dpl,r2
      001875 8B 83            [24] 4505 	mov	dph,r3
      001877 8F F0            [24] 4506 	mov	b,r7
      001879 E5*00            [12] 4507 	mov	a,_bp
      00187B 24 3F            [12] 4508 	add	a,#0x3f
      00187D F8               [12] 4509 	mov	r0,a
      00187E E6               [12] 4510 	mov	a,@r0
      00187F 12r00r00         [24] 4511 	lcall	__gptrput
      001882 A3               [24] 4512 	inc	dptr
      001883 08               [12] 4513 	inc	r0
      001884 E6               [12] 4514 	mov	a,@r0
      001885 12r00r00         [24] 4515 	lcall	__gptrput
      001888 A3               [24] 4516 	inc	dptr
      001889 08               [12] 4517 	inc	r0
      00188A E6               [12] 4518 	mov	a,@r0
      00188B 12r00r00         [24] 4519 	lcall	__gptrput
      00188E A3               [24] 4520 	inc	dptr
      00188F 08               [12] 4521 	inc	r0
      001890 E6               [12] 4522 	mov	a,@r0
      001891 12r00r00         [24] 4523 	lcall	__gptrput
                                   4524 ;	pff\source\pff.c:866: fmt = 0;							/* Determine the FAT sub type */
      001894 7F 00            [12] 4525 	mov	r7,#0x00
                                   4526 ;	pff\source\pff.c:869: if (PF_FS_FAT32 && mclst >= 0xFFF7) fmt = FS_FAT32;
      001896 E5*00            [12] 4527 	mov	a,_bp
      001898 24 3F            [12] 4528 	add	a,#0x3f
      00189A F8               [12] 4529 	mov	r0,a
      00189B C3               [12] 4530 	clr	c
      00189C E6               [12] 4531 	mov	a,@r0
      00189D 94 F7            [12] 4532 	subb	a,#0xf7
      00189F 08               [12] 4533 	inc	r0
      0018A0 E6               [12] 4534 	mov	a,@r0
      0018A1 94 FF            [12] 4535 	subb	a,#0xff
      0018A3 08               [12] 4536 	inc	r0
      0018A4 E6               [12] 4537 	mov	a,@r0
      0018A5 94 00            [12] 4538 	subb	a,#0x00
      0018A7 08               [12] 4539 	inc	r0
      0018A8 E6               [12] 4540 	mov	a,@r0
      0018A9 94 00            [12] 4541 	subb	a,#0x00
      0018AB D0 01            [24] 4542 	pop	ar1
      0018AD 40 02            [24] 4543 	jc	00128$
      0018AF 7F 03            [12] 4544 	mov	r7,#0x03
      0018B1                       4545 00128$:
                                   4546 ;	pff\source\pff.c:870: if (!fmt) return FR_NO_FILESYSTEM;
      0018B1 EF               [12] 4547 	mov	a,r7
      0018B2 70 06            [24] 4548 	jnz	00131$
      0018B4 75 82 06         [24] 4549 	mov	dpl,#0x06
      0018B7 02r19rEF         [24] 4550 	ljmp	00137$
      0018BA                       4551 00131$:
                                   4552 ;	pff\source\pff.c:871: fs->fs_type = fmt;
      0018BA A8*00            [24] 4553 	mov	r0,_bp
      0018BC 08               [12] 4554 	inc	r0
      0018BD 86 82            [24] 4555 	mov	dpl,@r0
      0018BF 08               [12] 4556 	inc	r0
      0018C0 86 83            [24] 4557 	mov	dph,@r0
      0018C2 08               [12] 4558 	inc	r0
      0018C3 86 F0            [24] 4559 	mov	b,@r0
      0018C5 EF               [12] 4560 	mov	a,r7
      0018C6 12r00r00         [24] 4561 	lcall	__gptrput
                                   4562 ;	pff\source\pff.c:874: fs->dirbase = ld_dword(buf+(BPB_RootClus-13));	/* Root directory start cluster */
      0018C9 A8*00            [24] 4563 	mov	r0,_bp
      0018CB 08               [12] 4564 	inc	r0
      0018CC C0 01            [24] 4565 	push	ar1
      0018CE E5*00            [12] 4566 	mov	a,_bp
      0018D0 24 0F            [12] 4567 	add	a,#0x0f
      0018D2 F9               [12] 4568 	mov	r1,a
      0018D3 74 0E            [12] 4569 	mov	a,#0x0e
      0018D5 26               [12] 4570 	add	a,@r0
      0018D6 F7               [12] 4571 	mov	@r1,a
      0018D7 E4               [12] 4572 	clr	a
      0018D8 08               [12] 4573 	inc	r0
      0018D9 36               [12] 4574 	addc	a,@r0
      0018DA 09               [12] 4575 	inc	r1
      0018DB F7               [12] 4576 	mov	@r1,a
      0018DC 08               [12] 4577 	inc	r0
      0018DD E6               [12] 4578 	mov	a,@r0
      0018DE 09               [12] 4579 	inc	r1
      0018DF F7               [12] 4580 	mov	@r1,a
      0018E0 D0 01            [24] 4581 	pop	ar1
      0018E2 74 1F            [12] 4582 	mov	a,#0x1f
      0018E4 29               [12] 4583 	add	a,r1
      0018E5 FC               [12] 4584 	mov	r4,a
      0018E6 7B 00            [12] 4585 	mov	r3,#0x00
      0018E8 7A 40            [12] 4586 	mov	r2,#0x40
      0018EA 8C 82            [24] 4587 	mov	dpl,r4
      0018EC 8B 83            [24] 4588 	mov	dph,r3
      0018EE 8A F0            [24] 4589 	mov	b,r2
      0018F0 12r00r30         [24] 4590 	lcall	_ld_dword
      0018F3 AA 82            [24] 4591 	mov	r2,dpl
      0018F5 AB 83            [24] 4592 	mov	r3,dph
      0018F7 AC F0            [24] 4593 	mov	r4,b
      0018F9 FF               [12] 4594 	mov	r7,a
      0018FA E5*00            [12] 4595 	mov	a,_bp
      0018FC 24 0F            [12] 4596 	add	a,#0x0f
      0018FE F8               [12] 4597 	mov	r0,a
      0018FF 86 82            [24] 4598 	mov	dpl,@r0
      001901 08               [12] 4599 	inc	r0
      001902 86 83            [24] 4600 	mov	dph,@r0
      001904 08               [12] 4601 	inc	r0
      001905 86 F0            [24] 4602 	mov	b,@r0
      001907 EA               [12] 4603 	mov	a,r2
      001908 12r00r00         [24] 4604 	lcall	__gptrput
      00190B A3               [24] 4605 	inc	dptr
      00190C EB               [12] 4606 	mov	a,r3
      00190D 12r00r00         [24] 4607 	lcall	__gptrput
      001910 A3               [24] 4608 	inc	dptr
      001911 EC               [12] 4609 	mov	a,r4
      001912 12r00r00         [24] 4610 	lcall	__gptrput
      001915 A3               [24] 4611 	inc	dptr
      001916 EF               [12] 4612 	mov	a,r7
      001917 12r00r00         [24] 4613 	lcall	__gptrput
                                   4614 ;	pff\source\pff.c:878: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
      00191A A8*00            [24] 4615 	mov	r0,_bp
      00191C 08               [12] 4616 	inc	r0
      00191D E5*00            [12] 4617 	mov	a,_bp
      00191F 24 0F            [12] 4618 	add	a,#0x0f
      001921 F9               [12] 4619 	mov	r1,a
      001922 74 12            [12] 4620 	mov	a,#0x12
      001924 26               [12] 4621 	add	a,@r0
      001925 F7               [12] 4622 	mov	@r1,a
      001926 E4               [12] 4623 	clr	a
      001927 08               [12] 4624 	inc	r0
      001928 36               [12] 4625 	addc	a,@r0
      001929 09               [12] 4626 	inc	r1
      00192A F7               [12] 4627 	mov	@r1,a
      00192B 08               [12] 4628 	inc	r0
      00192C E6               [12] 4629 	mov	a,@r0
      00192D 09               [12] 4630 	inc	r1
      00192E F7               [12] 4631 	mov	@r1,a
      00192F E5*00            [12] 4632 	mov	a,_bp
      001931 24 05            [12] 4633 	add	a,#0x05
      001933 F8               [12] 4634 	mov	r0,a
      001934 86 82            [24] 4635 	mov	dpl,@r0
      001936 08               [12] 4636 	inc	r0
      001937 86 83            [24] 4637 	mov	dph,@r0
      001939 08               [12] 4638 	inc	r0
      00193A 86 F0            [24] 4639 	mov	b,@r0
      00193C 12r00r00         [24] 4640 	lcall	__gptrget
      00193F FA               [12] 4641 	mov	r2,a
      001940 A3               [24] 4642 	inc	dptr
      001941 12r00r00         [24] 4643 	lcall	__gptrget
      001944 FB               [12] 4644 	mov	r3,a
      001945 A3               [24] 4645 	inc	dptr
      001946 12r00r00         [24] 4646 	lcall	__gptrget
      001949 FC               [12] 4647 	mov	r4,a
      00194A A3               [24] 4648 	inc	dptr
      00194B 12r00r00         [24] 4649 	lcall	__gptrget
      00194E FF               [12] 4650 	mov	r7,a
      00194F E5*00            [12] 4651 	mov	a,_bp
      001951 24 13            [12] 4652 	add	a,#0x13
      001953 F8               [12] 4653 	mov	r0,a
      001954 E5*00            [12] 4654 	mov	a,_bp
      001956 24 05            [12] 4655 	add	a,#0x05
      001958 F9               [12] 4656 	mov	r1,a
      001959 E6               [12] 4657 	mov	a,@r0
      00195A 2A               [12] 4658 	add	a,r2
      00195B F7               [12] 4659 	mov	@r1,a
      00195C 08               [12] 4660 	inc	r0
      00195D E6               [12] 4661 	mov	a,@r0
      00195E 3B               [12] 4662 	addc	a,r3
      00195F 09               [12] 4663 	inc	r1
      001960 F7               [12] 4664 	mov	@r1,a
      001961 08               [12] 4665 	inc	r0
      001962 E6               [12] 4666 	mov	a,@r0
      001963 3C               [12] 4667 	addc	a,r4
      001964 09               [12] 4668 	inc	r1
      001965 F7               [12] 4669 	mov	@r1,a
      001966 08               [12] 4670 	inc	r0
      001967 E6               [12] 4671 	mov	a,@r0
      001968 3F               [12] 4672 	addc	a,r7
      001969 09               [12] 4673 	inc	r1
      00196A F7               [12] 4674 	mov	@r1,a
      00196B E5*00            [12] 4675 	mov	a,_bp
      00196D 24 09            [12] 4676 	add	a,#0x09
      00196F F8               [12] 4677 	mov	r0,a
      001970 86 82            [24] 4678 	mov	dpl,@r0
      001972 08               [12] 4679 	inc	r0
      001973 86 83            [24] 4680 	mov	dph,@r0
      001975 08               [12] 4681 	inc	r0
      001976 86 F0            [24] 4682 	mov	b,@r0
      001978 12r00r00         [24] 4683 	lcall	__gptrget
      00197B FD               [12] 4684 	mov	r5,a
      00197C A3               [24] 4685 	inc	dptr
      00197D 12r00r00         [24] 4686 	lcall	__gptrget
      001980 C4               [12] 4687 	swap	a
      001981 CD               [12] 4688 	xch	a,r5
      001982 C4               [12] 4689 	swap	a
      001983 54 0F            [12] 4690 	anl	a,#0x0f
      001985 6D               [12] 4691 	xrl	a,r5
      001986 CD               [12] 4692 	xch	a,r5
      001987 54 0F            [12] 4693 	anl	a,#0x0f
      001989 CD               [12] 4694 	xch	a,r5
      00198A 6D               [12] 4695 	xrl	a,r5
      00198B CD               [12] 4696 	xch	a,r5
      00198C FE               [12] 4697 	mov	r6,a
      00198D E4               [12] 4698 	clr	a
      00198E FC               [12] 4699 	mov	r4,a
      00198F FF               [12] 4700 	mov	r7,a
      001990 E5*00            [12] 4701 	mov	a,_bp
      001992 24 05            [12] 4702 	add	a,#0x05
      001994 F8               [12] 4703 	mov	r0,a
      001995 ED               [12] 4704 	mov	a,r5
      001996 26               [12] 4705 	add	a,@r0
      001997 FD               [12] 4706 	mov	r5,a
      001998 EE               [12] 4707 	mov	a,r6
      001999 08               [12] 4708 	inc	r0
      00199A 36               [12] 4709 	addc	a,@r0
      00199B FE               [12] 4710 	mov	r6,a
      00199C EC               [12] 4711 	mov	a,r4
      00199D 08               [12] 4712 	inc	r0
      00199E 36               [12] 4713 	addc	a,@r0
      00199F FC               [12] 4714 	mov	r4,a
      0019A0 EF               [12] 4715 	mov	a,r7
      0019A1 08               [12] 4716 	inc	r0
      0019A2 36               [12] 4717 	addc	a,@r0
      0019A3 FF               [12] 4718 	mov	r7,a
      0019A4 E5*00            [12] 4719 	mov	a,_bp
      0019A6 24 0F            [12] 4720 	add	a,#0x0f
      0019A8 F8               [12] 4721 	mov	r0,a
      0019A9 86 82            [24] 4722 	mov	dpl,@r0
      0019AB 08               [12] 4723 	inc	r0
      0019AC 86 83            [24] 4724 	mov	dph,@r0
      0019AE 08               [12] 4725 	inc	r0
      0019AF 86 F0            [24] 4726 	mov	b,@r0
      0019B1 ED               [12] 4727 	mov	a,r5
      0019B2 12r00r00         [24] 4728 	lcall	__gptrput
      0019B5 A3               [24] 4729 	inc	dptr
      0019B6 EE               [12] 4730 	mov	a,r6
      0019B7 12r00r00         [24] 4731 	lcall	__gptrput
      0019BA A3               [24] 4732 	inc	dptr
      0019BB EC               [12] 4733 	mov	a,r4
      0019BC 12r00r00         [24] 4734 	lcall	__gptrput
      0019BF A3               [24] 4735 	inc	dptr
      0019C0 EF               [12] 4736 	mov	a,r7
      0019C1 12r00r00         [24] 4737 	lcall	__gptrput
                                   4738 ;	pff\source\pff.c:880: fs->flag = 0;
      0019C4 A8*00            [24] 4739 	mov	r0,_bp
      0019C6 08               [12] 4740 	inc	r0
      0019C7 74 01            [12] 4741 	mov	a,#0x01
      0019C9 26               [12] 4742 	add	a,@r0
      0019CA FD               [12] 4743 	mov	r5,a
      0019CB E4               [12] 4744 	clr	a
      0019CC 08               [12] 4745 	inc	r0
      0019CD 36               [12] 4746 	addc	a,@r0
      0019CE FE               [12] 4747 	mov	r6,a
      0019CF 08               [12] 4748 	inc	r0
      0019D0 86 07            [24] 4749 	mov	ar7,@r0
      0019D2 8D 82            [24] 4750 	mov	dpl,r5
      0019D4 8E 83            [24] 4751 	mov	dph,r6
      0019D6 8F F0            [24] 4752 	mov	b,r7
      0019D8 E4               [12] 4753 	clr	a
      0019D9 12r00r00         [24] 4754 	lcall	__gptrput
                                   4755 ;	pff\source\pff.c:881: FatFs = fs;
      0019DC A8*00            [24] 4756 	mov	r0,_bp
      0019DE 08               [12] 4757 	inc	r0
      0019DF 90r00r00         [24] 4758 	mov	dptr,#_FatFs
      0019E2 E6               [12] 4759 	mov	a,@r0
      0019E3 F0               [24] 4760 	movx	@dptr,a
      0019E4 08               [12] 4761 	inc	r0
      0019E5 E6               [12] 4762 	mov	a,@r0
      0019E6 A3               [24] 4763 	inc	dptr
      0019E7 F0               [24] 4764 	movx	@dptr,a
      0019E8 08               [12] 4765 	inc	r0
      0019E9 E6               [12] 4766 	mov	a,@r0
      0019EA A3               [24] 4767 	inc	dptr
      0019EB F0               [24] 4768 	movx	@dptr,a
                                   4769 ;	pff\source\pff.c:883: return FR_OK;
      0019EC 75 82 00         [24] 4770 	mov	dpl,#0x00
      0019EF                       4771 00137$:
                                   4772 ;	pff\source\pff.c:884: }
      0019EF 85*00 81         [24] 4773 	mov	sp,_bp
      0019F2 D0*00            [24] 4774 	pop	_bp
      0019F4 22               [24] 4775 	ret
                                   4776 ;------------------------------------------------------------
                                   4777 ;Allocation info for local variables in function 'pf_open'
                                   4778 ;------------------------------------------------------------
                                   4779 ;path                      Allocated to stack - _bp +1
                                   4780 ;res                       Allocated to registers r6 
                                   4781 ;dj                        Allocated to stack - _bp +7
                                   4782 ;sp                        Allocated to stack - _bp +56
                                   4783 ;dir                       Allocated to stack - _bp +24
                                   4784 ;fs                        Allocated to stack - _bp +68
                                   4785 ;sloc0                     Allocated to stack - _bp +69
                                   4786 ;sloc1                     Allocated to stack - _bp +70
                                   4787 ;sloc2                     Allocated to stack - _bp +4
                                   4788 ;------------------------------------------------------------
                                   4789 ;	pff\source\pff.c:893: FRESULT pf_open (
                                   4790 ;	-----------------------------------------
                                   4791 ;	 function pf_open
                                   4792 ;	-----------------------------------------
      0019F5                       4793 _pf_open:
      0019F5 C0*00            [24] 4794 	push	_bp
      0019F7 85 81*00         [24] 4795 	mov	_bp,sp
      0019FA C0 82            [24] 4796 	push	dpl
      0019FC C0 83            [24] 4797 	push	dph
      0019FE C0 F0            [24] 4798 	push	b
      001A00 E5 81            [12] 4799 	mov	a,sp
      001A02 24 43            [12] 4800 	add	a,#0x43
      001A04 F5 81            [12] 4801 	mov	sp,a
                                   4802 ;	pff\source\pff.c:900: FATFS *fs = FatFs;
      001A06 90r00r00         [24] 4803 	mov	dptr,#_FatFs
      001A09 E0               [24] 4804 	movx	a,@dptr
      001A0A FA               [12] 4805 	mov	r2,a
      001A0B A3               [24] 4806 	inc	dptr
      001A0C E0               [24] 4807 	movx	a,@dptr
      001A0D FB               [12] 4808 	mov	r3,a
      001A0E A3               [24] 4809 	inc	dptr
      001A0F E0               [24] 4810 	movx	a,@dptr
      001A10 FC               [12] 4811 	mov	r4,a
      001A11 E5*00            [12] 4812 	mov	a,_bp
      001A13 24 44            [12] 4813 	add	a,#0x44
      001A15 F8               [12] 4814 	mov	r0,a
      001A16 A6 02            [24] 4815 	mov	@r0,ar2
      001A18 08               [12] 4816 	inc	r0
      001A19 A6 03            [24] 4817 	mov	@r0,ar3
      001A1B 08               [12] 4818 	inc	r0
      001A1C A6 04            [24] 4819 	mov	@r0,ar4
                                   4820 ;	pff\source\pff.c:903: if (!fs) return FR_NOT_ENABLED;		/* Check file system */
      001A1E E5*00            [12] 4821 	mov	a,_bp
      001A20 24 44            [12] 4822 	add	a,#0x44
      001A22 F8               [12] 4823 	mov	r0,a
      001A23 E6               [12] 4824 	mov	a,@r0
      001A24 08               [12] 4825 	inc	r0
      001A25 46               [12] 4826 	orl	a,@r0
      001A26 70 06            [24] 4827 	jnz	00102$
      001A28 75 82 05         [24] 4828 	mov	dpl,#0x05
      001A2B 02r1Br9B         [24] 4829 	ljmp	00108$
      001A2E                       4830 00102$:
                                   4831 ;	pff\source\pff.c:905: fs->flag = 0;
      001A2E E5*00            [12] 4832 	mov	a,_bp
      001A30 24 44            [12] 4833 	add	a,#0x44
      001A32 F8               [12] 4834 	mov	r0,a
      001A33 74 01            [12] 4835 	mov	a,#0x01
      001A35 26               [12] 4836 	add	a,@r0
      001A36 FD               [12] 4837 	mov	r5,a
      001A37 E4               [12] 4838 	clr	a
      001A38 08               [12] 4839 	inc	r0
      001A39 36               [12] 4840 	addc	a,@r0
      001A3A FE               [12] 4841 	mov	r6,a
      001A3B 08               [12] 4842 	inc	r0
      001A3C 86 07            [24] 4843 	mov	ar7,@r0
      001A3E 8D 82            [24] 4844 	mov	dpl,r5
      001A40 8E 83            [24] 4845 	mov	dph,r6
      001A42 8F F0            [24] 4846 	mov	b,r7
      001A44 E4               [12] 4847 	clr	a
      001A45 12r00r00         [24] 4848 	lcall	__gptrput
                                   4849 ;	pff\source\pff.c:906: dj.fn = sp;
      001A48 E5*00            [12] 4850 	mov	a,_bp
      001A4A 24 07            [12] 4851 	add	a,#0x07
      001A4C FF               [12] 4852 	mov	r7,a
      001A4D 24 02            [12] 4853 	add	a,#0x02
      001A4F F9               [12] 4854 	mov	r1,a
      001A50 E5*00            [12] 4855 	mov	a,_bp
      001A52 24 38            [12] 4856 	add	a,#0x38
      001A54 FC               [12] 4857 	mov	r4,a
      001A55 7D 00            [12] 4858 	mov	r5,#0x00
      001A57 7E 40            [12] 4859 	mov	r6,#0x40
      001A59 A7 04            [24] 4860 	mov	@r1,ar4
      001A5B 09               [12] 4861 	inc	r1
      001A5C A7 05            [24] 4862 	mov	@r1,ar5
      001A5E 09               [12] 4863 	inc	r1
      001A5F A7 06            [24] 4864 	mov	@r1,ar6
                                   4865 ;	pff\source\pff.c:907: res = follow_path(&dj, dir, path);	/* Follow the file path */
      001A61 E5*00            [12] 4866 	mov	a,_bp
      001A63 24 18            [12] 4867 	add	a,#0x18
      001A65 F8               [12] 4868 	mov	r0,a
      001A66 FC               [12] 4869 	mov	r4,a
      001A67 7D 00            [12] 4870 	mov	r5,#0x00
      001A69 7E 40            [12] 4871 	mov	r6,#0x40
      001A6B 7B 00            [12] 4872 	mov	r3,#0x00
      001A6D 7A 40            [12] 4873 	mov	r2,#0x40
      001A6F C0 00            [24] 4874 	push	ar0
      001A71 A9*00            [24] 4875 	mov	r1,_bp
      001A73 09               [12] 4876 	inc	r1
      001A74 E7               [12] 4877 	mov	a,@r1
      001A75 C0 E0            [24] 4878 	push	acc
      001A77 09               [12] 4879 	inc	r1
      001A78 E7               [12] 4880 	mov	a,@r1
      001A79 C0 E0            [24] 4881 	push	acc
      001A7B 09               [12] 4882 	inc	r1
      001A7C E7               [12] 4883 	mov	a,@r1
      001A7D C0 E0            [24] 4884 	push	acc
      001A7F C0 04            [24] 4885 	push	ar4
      001A81 C0 05            [24] 4886 	push	ar5
      001A83 C0 06            [24] 4887 	push	ar6
      001A85 8F 82            [24] 4888 	mov	dpl,r7
      001A87 8B 83            [24] 4889 	mov	dph,r3
      001A89 8A F0            [24] 4890 	mov	b,r2
      001A8B 12r11r1B         [24] 4891 	lcall	_follow_path
      001A8E AF 82            [24] 4892 	mov	r7,dpl
      001A90 E5 81            [12] 4893 	mov	a,sp
      001A92 24 FA            [12] 4894 	add	a,#0xfa
      001A94 F5 81            [12] 4895 	mov	sp,a
      001A96 D0 00            [24] 4896 	pop	ar0
                                   4897 ;	pff\source\pff.c:908: if (res != FR_OK) return res;		/* Follow failed */
      001A98 EF               [12] 4898 	mov	a,r7
      001A99 FE               [12] 4899 	mov	r6,a
      001A9A 60 05            [24] 4900 	jz	00104$
      001A9C 8E 82            [24] 4901 	mov	dpl,r6
      001A9E 02r1Br9B         [24] 4902 	ljmp	00108$
      001AA1                       4903 00104$:
                                   4904 ;	pff\source\pff.c:909: if (!dir[0] || (dir[DIR_Attr] & AM_DIR)) return FR_NO_FILE;	/* It is a directory */
      001AA1 E6               [12] 4905 	mov	a,@r0
      001AA2 60 09            [24] 4906 	jz	00105$
      001AA4 74 0B            [12] 4907 	mov	a,#0x0b
      001AA6 28               [12] 4908 	add	a,r0
      001AA7 F9               [12] 4909 	mov	r1,a
      001AA8 E7               [12] 4910 	mov	a,@r1
      001AA9 FF               [12] 4911 	mov	r7,a
      001AAA 30 E4 06         [24] 4912 	jnb	acc.4,00106$
      001AAD                       4913 00105$:
      001AAD 75 82 03         [24] 4914 	mov	dpl,#0x03
      001AB0 02r1Br9B         [24] 4915 	ljmp	00108$
      001AB3                       4916 00106$:
                                   4917 ;	pff\source\pff.c:911: fs->org_clust = get_clust(dir);		/* File start cluster */
      001AB3 E5*00            [12] 4918 	mov	a,_bp
      001AB5 24 44            [12] 4919 	add	a,#0x44
      001AB7 F9               [12] 4920 	mov	r1,a
      001AB8 C0 00            [24] 4921 	push	ar0
      001ABA E5*00            [12] 4922 	mov	a,_bp
      001ABC 24 04            [12] 4923 	add	a,#0x04
      001ABE F8               [12] 4924 	mov	r0,a
      001ABF 74 1E            [12] 4925 	mov	a,#0x1e
      001AC1 27               [12] 4926 	add	a,@r1
      001AC2 F6               [12] 4927 	mov	@r0,a
      001AC3 E4               [12] 4928 	clr	a
      001AC4 09               [12] 4929 	inc	r1
      001AC5 37               [12] 4930 	addc	a,@r1
      001AC6 08               [12] 4931 	inc	r0
      001AC7 F6               [12] 4932 	mov	@r0,a
      001AC8 09               [12] 4933 	inc	r1
      001AC9 E7               [12] 4934 	mov	a,@r1
      001ACA 08               [12] 4935 	inc	r0
      001ACB F6               [12] 4936 	mov	@r0,a
      001ACC D0 00            [24] 4937 	pop	ar0
      001ACE 88 04            [24] 4938 	mov	ar4,r0
      001AD0 7B 00            [12] 4939 	mov	r3,#0x00
      001AD2 7A 40            [12] 4940 	mov	r2,#0x40
      001AD4 8C 82            [24] 4941 	mov	dpl,r4
      001AD6 8B 83            [24] 4942 	mov	dph,r3
      001AD8 8A F0            [24] 4943 	mov	b,r2
      001ADA C0 00            [24] 4944 	push	ar0
      001ADC 12r04rFB         [24] 4945 	lcall	_get_clust
      001ADF AA 82            [24] 4946 	mov	r2,dpl
      001AE1 AB 83            [24] 4947 	mov	r3,dph
      001AE3 AC F0            [24] 4948 	mov	r4,b
      001AE5 FF               [12] 4949 	mov	r7,a
      001AE6 E5*00            [12] 4950 	mov	a,_bp
      001AE8 24 04            [12] 4951 	add	a,#0x04
      001AEA F9               [12] 4952 	mov	r1,a
      001AEB 87 82            [24] 4953 	mov	dpl,@r1
      001AED 09               [12] 4954 	inc	r1
      001AEE 87 83            [24] 4955 	mov	dph,@r1
      001AF0 09               [12] 4956 	inc	r1
      001AF1 87 F0            [24] 4957 	mov	b,@r1
      001AF3 EA               [12] 4958 	mov	a,r2
      001AF4 12r00r00         [24] 4959 	lcall	__gptrput
      001AF7 A3               [24] 4960 	inc	dptr
      001AF8 EB               [12] 4961 	mov	a,r3
      001AF9 12r00r00         [24] 4962 	lcall	__gptrput
      001AFC A3               [24] 4963 	inc	dptr
      001AFD EC               [12] 4964 	mov	a,r4
      001AFE 12r00r00         [24] 4965 	lcall	__gptrput
      001B01 A3               [24] 4966 	inc	dptr
      001B02 EF               [12] 4967 	mov	a,r7
      001B03 12r00r00         [24] 4968 	lcall	__gptrput
                                   4969 ;	pff\source\pff.c:912: fs->fsize = ld_dword(dir+DIR_FileSize);	/* File size */
      001B06 E5*00            [12] 4970 	mov	a,_bp
      001B08 24 44            [12] 4971 	add	a,#0x44
      001B0A F9               [12] 4972 	mov	r1,a
      001B0B E5*00            [12] 4973 	mov	a,_bp
      001B0D 24 04            [12] 4974 	add	a,#0x04
      001B0F F8               [12] 4975 	mov	r0,a
      001B10 74 1A            [12] 4976 	mov	a,#0x1a
      001B12 27               [12] 4977 	add	a,@r1
      001B13 F6               [12] 4978 	mov	@r0,a
      001B14 E4               [12] 4979 	clr	a
      001B15 09               [12] 4980 	inc	r1
      001B16 37               [12] 4981 	addc	a,@r1
      001B17 08               [12] 4982 	inc	r0
      001B18 F6               [12] 4983 	mov	@r0,a
      001B19 09               [12] 4984 	inc	r1
      001B1A E7               [12] 4985 	mov	a,@r1
      001B1B 08               [12] 4986 	inc	r0
      001B1C F6               [12] 4987 	mov	@r0,a
      001B1D D0 00            [24] 4988 	pop	ar0
      001B1F 74 1C            [12] 4989 	mov	a,#0x1c
      001B21 28               [12] 4990 	add	a,r0
      001B22 FC               [12] 4991 	mov	r4,a
      001B23 7B 00            [12] 4992 	mov	r3,#0x00
      001B25 7A 40            [12] 4993 	mov	r2,#0x40
      001B27 8C 82            [24] 4994 	mov	dpl,r4
      001B29 8B 83            [24] 4995 	mov	dph,r3
      001B2B 8A F0            [24] 4996 	mov	b,r2
      001B2D 12r00r30         [24] 4997 	lcall	_ld_dword
      001B30 AA 82            [24] 4998 	mov	r2,dpl
      001B32 AB 83            [24] 4999 	mov	r3,dph
      001B34 AC F0            [24] 5000 	mov	r4,b
      001B36 FF               [12] 5001 	mov	r7,a
      001B37 E5*00            [12] 5002 	mov	a,_bp
      001B39 24 04            [12] 5003 	add	a,#0x04
      001B3B F8               [12] 5004 	mov	r0,a
      001B3C 86 82            [24] 5005 	mov	dpl,@r0
      001B3E 08               [12] 5006 	inc	r0
      001B3F 86 83            [24] 5007 	mov	dph,@r0
      001B41 08               [12] 5008 	inc	r0
      001B42 86 F0            [24] 5009 	mov	b,@r0
      001B44 EA               [12] 5010 	mov	a,r2
      001B45 12r00r00         [24] 5011 	lcall	__gptrput
      001B48 A3               [24] 5012 	inc	dptr
      001B49 EB               [12] 5013 	mov	a,r3
      001B4A 12r00r00         [24] 5014 	lcall	__gptrput
      001B4D A3               [24] 5015 	inc	dptr
      001B4E EC               [12] 5016 	mov	a,r4
      001B4F 12r00r00         [24] 5017 	lcall	__gptrput
      001B52 A3               [24] 5018 	inc	dptr
      001B53 EF               [12] 5019 	mov	a,r7
      001B54 12r00r00         [24] 5020 	lcall	__gptrput
                                   5021 ;	pff\source\pff.c:913: fs->fptr = 0;						/* File pointer */
      001B57 E5*00            [12] 5022 	mov	a,_bp
      001B59 24 44            [12] 5023 	add	a,#0x44
      001B5B F8               [12] 5024 	mov	r0,a
      001B5C 74 16            [12] 5025 	mov	a,#0x16
      001B5E 26               [12] 5026 	add	a,@r0
      001B5F FD               [12] 5027 	mov	r5,a
      001B60 E4               [12] 5028 	clr	a
      001B61 08               [12] 5029 	inc	r0
      001B62 36               [12] 5030 	addc	a,@r0
      001B63 FE               [12] 5031 	mov	r6,a
      001B64 08               [12] 5032 	inc	r0
      001B65 86 07            [24] 5033 	mov	ar7,@r0
      001B67 8D 82            [24] 5034 	mov	dpl,r5
      001B69 8E 83            [24] 5035 	mov	dph,r6
      001B6B 8F F0            [24] 5036 	mov	b,r7
      001B6D E4               [12] 5037 	clr	a
      001B6E 12r00r00         [24] 5038 	lcall	__gptrput
      001B71 A3               [24] 5039 	inc	dptr
      001B72 12r00r00         [24] 5040 	lcall	__gptrput
      001B75 A3               [24] 5041 	inc	dptr
      001B76 12r00r00         [24] 5042 	lcall	__gptrput
      001B79 A3               [24] 5043 	inc	dptr
      001B7A 12r00r00         [24] 5044 	lcall	__gptrput
                                   5045 ;	pff\source\pff.c:914: fs->flag = FA_OPENED;
      001B7D E5*00            [12] 5046 	mov	a,_bp
      001B7F 24 44            [12] 5047 	add	a,#0x44
      001B81 F8               [12] 5048 	mov	r0,a
      001B82 74 01            [12] 5049 	mov	a,#0x01
      001B84 26               [12] 5050 	add	a,@r0
      001B85 FD               [12] 5051 	mov	r5,a
      001B86 E4               [12] 5052 	clr	a
      001B87 08               [12] 5053 	inc	r0
      001B88 36               [12] 5054 	addc	a,@r0
      001B89 FE               [12] 5055 	mov	r6,a
      001B8A 08               [12] 5056 	inc	r0
      001B8B 86 07            [24] 5057 	mov	ar7,@r0
      001B8D 8D 82            [24] 5058 	mov	dpl,r5
      001B8F 8E 83            [24] 5059 	mov	dph,r6
      001B91 8F F0            [24] 5060 	mov	b,r7
      001B93 74 01            [12] 5061 	mov	a,#0x01
      001B95 12r00r00         [24] 5062 	lcall	__gptrput
                                   5063 ;	pff\source\pff.c:916: return FR_OK;
      001B98 75 82 00         [24] 5064 	mov	dpl,#0x00
      001B9B                       5065 00108$:
                                   5066 ;	pff\source\pff.c:917: }
      001B9B 85*00 81         [24] 5067 	mov	sp,_bp
      001B9E D0*00            [24] 5068 	pop	_bp
      001BA0 22               [24] 5069 	ret
                                   5070 ;------------------------------------------------------------
                                   5071 ;Allocation info for local variables in function 'pf_read'
                                   5072 ;------------------------------------------------------------
                                   5073 ;btr                       Allocated to stack - _bp -4
                                   5074 ;br                        Allocated to stack - _bp -7
                                   5075 ;buff                      Allocated to registers r5 r6 r7 
                                   5076 ;dr                        Allocated to registers r7 
                                   5077 ;clst                      Allocated to stack - _bp +39
                                   5078 ;sect                      Allocated to stack - _bp +17
                                   5079 ;remain                    Allocated to stack - _bp +32
                                   5080 ;rcnt                      Allocated to stack - _bp +30
                                   5081 ;cs                        Allocated to registers r3 
                                   5082 ;rbuff                     Allocated to stack - _bp +27
                                   5083 ;fs                        Allocated to stack - _bp +36
                                   5084 ;sloc0                     Allocated to stack - _bp +1
                                   5085 ;sloc1                     Allocated to stack - _bp +7
                                   5086 ;sloc2                     Allocated to stack - _bp +10
                                   5087 ;sloc3                     Allocated to stack - _bp +4
                                   5088 ;sloc4                     Allocated to stack - _bp +24
                                   5089 ;sloc5                     Allocated to stack - _bp +17
                                   5090 ;sloc6                     Allocated to stack - _bp +21
                                   5091 ;sloc7                     Allocated to stack - _bp +49
                                   5092 ;sloc8                     Allocated to stack - _bp +14
                                   5093 ;------------------------------------------------------------
                                   5094 ;	pff\source\pff.c:927: FRESULT pf_read (
                                   5095 ;	-----------------------------------------
                                   5096 ;	 function pf_read
                                   5097 ;	-----------------------------------------
      001BA1                       5098 _pf_read:
      001BA1 C0*00            [24] 5099 	push	_bp
      001BA3 E5 81            [12] 5100 	mov	a,sp
      001BA5 F5*00            [12] 5101 	mov	_bp,a
      001BA7 24 2A            [12] 5102 	add	a,#0x2a
      001BA9 F5 81            [12] 5103 	mov	sp,a
      001BAB AD 82            [24] 5104 	mov	r5,dpl
      001BAD AE 83            [24] 5105 	mov	r6,dph
      001BAF AF F0            [24] 5106 	mov	r7,b
                                   5107 ;	pff\source\pff.c:937: BYTE cs, *rbuff = buff;
      001BB1 E5*00            [12] 5108 	mov	a,_bp
      001BB3 24 1B            [12] 5109 	add	a,#0x1b
      001BB5 F8               [12] 5110 	mov	r0,a
      001BB6 A6 05            [24] 5111 	mov	@r0,ar5
      001BB8 08               [12] 5112 	inc	r0
      001BB9 A6 06            [24] 5113 	mov	@r0,ar6
      001BBB 08               [12] 5114 	inc	r0
      001BBC A6 07            [24] 5115 	mov	@r0,ar7
                                   5116 ;	pff\source\pff.c:938: FATFS *fs = FatFs;
      001BBE 90r00r00         [24] 5117 	mov	dptr,#_FatFs
      001BC1 E0               [24] 5118 	movx	a,@dptr
      001BC2 FA               [12] 5119 	mov	r2,a
      001BC3 A3               [24] 5120 	inc	dptr
      001BC4 E0               [24] 5121 	movx	a,@dptr
      001BC5 FB               [12] 5122 	mov	r3,a
      001BC6 A3               [24] 5123 	inc	dptr
      001BC7 E0               [24] 5124 	movx	a,@dptr
      001BC8 FC               [12] 5125 	mov	r4,a
      001BC9 E5*00            [12] 5126 	mov	a,_bp
      001BCB 24 24            [12] 5127 	add	a,#0x24
      001BCD F8               [12] 5128 	mov	r0,a
      001BCE A6 02            [24] 5129 	mov	@r0,ar2
      001BD0 08               [12] 5130 	inc	r0
      001BD1 A6 03            [24] 5131 	mov	@r0,ar3
      001BD3 08               [12] 5132 	inc	r0
      001BD4 A6 04            [24] 5133 	mov	@r0,ar4
                                   5134 ;	pff\source\pff.c:941: *br = 0;
      001BD6 E5*00            [12] 5135 	mov	a,_bp
      001BD8 24 F9            [12] 5136 	add	a,#0xf9
      001BDA F8               [12] 5137 	mov	r0,a
      001BDB E5*00            [12] 5138 	mov	a,_bp
      001BDD 24 0E            [12] 5139 	add	a,#0x0e
      001BDF F9               [12] 5140 	mov	r1,a
      001BE0 E6               [12] 5141 	mov	a,@r0
      001BE1 F7               [12] 5142 	mov	@r1,a
      001BE2 08               [12] 5143 	inc	r0
      001BE3 E6               [12] 5144 	mov	a,@r0
      001BE4 09               [12] 5145 	inc	r1
      001BE5 F7               [12] 5146 	mov	@r1,a
      001BE6 08               [12] 5147 	inc	r0
      001BE7 E6               [12] 5148 	mov	a,@r0
      001BE8 09               [12] 5149 	inc	r1
      001BE9 F7               [12] 5150 	mov	@r1,a
      001BEA E5*00            [12] 5151 	mov	a,_bp
      001BEC 24 0E            [12] 5152 	add	a,#0x0e
      001BEE F8               [12] 5153 	mov	r0,a
      001BEF 86 82            [24] 5154 	mov	dpl,@r0
      001BF1 08               [12] 5155 	inc	r0
      001BF2 86 83            [24] 5156 	mov	dph,@r0
      001BF4 08               [12] 5157 	inc	r0
      001BF5 86 F0            [24] 5158 	mov	b,@r0
      001BF7 E4               [12] 5159 	clr	a
      001BF8 12r00r00         [24] 5160 	lcall	__gptrput
      001BFB A3               [24] 5161 	inc	dptr
      001BFC 12r00r00         [24] 5162 	lcall	__gptrput
                                   5163 ;	pff\source\pff.c:942: if (!fs) return FR_NOT_ENABLED;		/* Check file system */
      001BFF E5*00            [12] 5164 	mov	a,_bp
      001C01 24 24            [12] 5165 	add	a,#0x24
      001C03 F8               [12] 5166 	mov	r0,a
      001C04 E6               [12] 5167 	mov	a,@r0
      001C05 08               [12] 5168 	inc	r0
      001C06 46               [12] 5169 	orl	a,@r0
      001C07 70 06            [24] 5170 	jnz	00102$
      001C09 75 82 05         [24] 5171 	mov	dpl,#0x05
      001C0C 02r20rD3         [24] 5172 	ljmp	00127$
      001C0F                       5173 00102$:
                                   5174 ;	pff\source\pff.c:943: if (!(fs->flag & FA_OPENED)) return FR_NOT_OPENED;	/* Check if opened */
      001C0F E5*00            [12] 5175 	mov	a,_bp
      001C11 24 24            [12] 5176 	add	a,#0x24
      001C13 F8               [12] 5177 	mov	r0,a
      001C14 A9*00            [24] 5178 	mov	r1,_bp
      001C16 09               [12] 5179 	inc	r1
      001C17 74 01            [12] 5180 	mov	a,#0x01
      001C19 26               [12] 5181 	add	a,@r0
      001C1A F7               [12] 5182 	mov	@r1,a
      001C1B E4               [12] 5183 	clr	a
      001C1C 08               [12] 5184 	inc	r0
      001C1D 36               [12] 5185 	addc	a,@r0
      001C1E 09               [12] 5186 	inc	r1
      001C1F F7               [12] 5187 	mov	@r1,a
      001C20 08               [12] 5188 	inc	r0
      001C21 E6               [12] 5189 	mov	a,@r0
      001C22 09               [12] 5190 	inc	r1
      001C23 F7               [12] 5191 	mov	@r1,a
      001C24 A8*00            [24] 5192 	mov	r0,_bp
      001C26 08               [12] 5193 	inc	r0
      001C27 86 82            [24] 5194 	mov	dpl,@r0
      001C29 08               [12] 5195 	inc	r0
      001C2A 86 83            [24] 5196 	mov	dph,@r0
      001C2C 08               [12] 5197 	inc	r0
      001C2D 86 F0            [24] 5198 	mov	b,@r0
      001C2F 12r00r00         [24] 5199 	lcall	__gptrget
      001C32 FC               [12] 5200 	mov	r4,a
      001C33 20 E0 06         [24] 5201 	jb	acc.0,00104$
      001C36 75 82 04         [24] 5202 	mov	dpl,#0x04
      001C39 02r20rD3         [24] 5203 	ljmp	00127$
      001C3C                       5204 00104$:
                                   5205 ;	pff\source\pff.c:945: remain = fs->fsize - fs->fptr;
      001C3C E5*00            [12] 5206 	mov	a,_bp
      001C3E 24 24            [12] 5207 	add	a,#0x24
      001C40 F8               [12] 5208 	mov	r0,a
      001C41 74 1A            [12] 5209 	mov	a,#0x1a
      001C43 26               [12] 5210 	add	a,@r0
      001C44 FA               [12] 5211 	mov	r2,a
      001C45 E4               [12] 5212 	clr	a
      001C46 08               [12] 5213 	inc	r0
      001C47 36               [12] 5214 	addc	a,@r0
      001C48 FB               [12] 5215 	mov	r3,a
      001C49 08               [12] 5216 	inc	r0
      001C4A 86 04            [24] 5217 	mov	ar4,@r0
      001C4C 8A 82            [24] 5218 	mov	dpl,r2
      001C4E 8B 83            [24] 5219 	mov	dph,r3
      001C50 8C F0            [24] 5220 	mov	b,r4
      001C52 E5*00            [12] 5221 	mov	a,_bp
      001C54 24 0A            [12] 5222 	add	a,#0x0a
      001C56 F8               [12] 5223 	mov	r0,a
      001C57 12r00r00         [24] 5224 	lcall	__gptrget
      001C5A F6               [12] 5225 	mov	@r0,a
      001C5B A3               [24] 5226 	inc	dptr
      001C5C 12r00r00         [24] 5227 	lcall	__gptrget
      001C5F 08               [12] 5228 	inc	r0
      001C60 F6               [12] 5229 	mov	@r0,a
      001C61 A3               [24] 5230 	inc	dptr
      001C62 12r00r00         [24] 5231 	lcall	__gptrget
      001C65 08               [12] 5232 	inc	r0
      001C66 F6               [12] 5233 	mov	@r0,a
      001C67 A3               [24] 5234 	inc	dptr
      001C68 12r00r00         [24] 5235 	lcall	__gptrget
      001C6B 08               [12] 5236 	inc	r0
      001C6C F6               [12] 5237 	mov	@r0,a
      001C6D E5*00            [12] 5238 	mov	a,_bp
      001C6F 24 24            [12] 5239 	add	a,#0x24
      001C71 F8               [12] 5240 	mov	r0,a
      001C72 E5*00            [12] 5241 	mov	a,_bp
      001C74 24 07            [12] 5242 	add	a,#0x07
      001C76 F9               [12] 5243 	mov	r1,a
      001C77 74 16            [12] 5244 	mov	a,#0x16
      001C79 26               [12] 5245 	add	a,@r0
      001C7A F7               [12] 5246 	mov	@r1,a
      001C7B E4               [12] 5247 	clr	a
      001C7C 08               [12] 5248 	inc	r0
      001C7D 36               [12] 5249 	addc	a,@r0
      001C7E 09               [12] 5250 	inc	r1
      001C7F F7               [12] 5251 	mov	@r1,a
      001C80 08               [12] 5252 	inc	r0
      001C81 E6               [12] 5253 	mov	a,@r0
      001C82 09               [12] 5254 	inc	r1
      001C83 F7               [12] 5255 	mov	@r1,a
      001C84 E5*00            [12] 5256 	mov	a,_bp
      001C86 24 07            [12] 5257 	add	a,#0x07
      001C88 F8               [12] 5258 	mov	r0,a
      001C89 86 82            [24] 5259 	mov	dpl,@r0
      001C8B 08               [12] 5260 	inc	r0
      001C8C 86 83            [24] 5261 	mov	dph,@r0
      001C8E 08               [12] 5262 	inc	r0
      001C8F 86 F0            [24] 5263 	mov	b,@r0
      001C91 12r00r00         [24] 5264 	lcall	__gptrget
      001C94 FC               [12] 5265 	mov	r4,a
      001C95 A3               [24] 5266 	inc	dptr
      001C96 12r00r00         [24] 5267 	lcall	__gptrget
      001C99 FD               [12] 5268 	mov	r5,a
      001C9A A3               [24] 5269 	inc	dptr
      001C9B 12r00r00         [24] 5270 	lcall	__gptrget
      001C9E FE               [12] 5271 	mov	r6,a
      001C9F A3               [24] 5272 	inc	dptr
      001CA0 12r00r00         [24] 5273 	lcall	__gptrget
      001CA3 FF               [12] 5274 	mov	r7,a
      001CA4 E5*00            [12] 5275 	mov	a,_bp
      001CA6 24 0A            [12] 5276 	add	a,#0x0a
      001CA8 F8               [12] 5277 	mov	r0,a
      001CA9 E6               [12] 5278 	mov	a,@r0
      001CAA C3               [12] 5279 	clr	c
      001CAB 9C               [12] 5280 	subb	a,r4
      001CAC FC               [12] 5281 	mov	r4,a
      001CAD 08               [12] 5282 	inc	r0
      001CAE E6               [12] 5283 	mov	a,@r0
      001CAF 9D               [12] 5284 	subb	a,r5
      001CB0 FD               [12] 5285 	mov	r5,a
      001CB1 08               [12] 5286 	inc	r0
      001CB2 E6               [12] 5287 	mov	a,@r0
      001CB3 9E               [12] 5288 	subb	a,r6
      001CB4 FE               [12] 5289 	mov	r6,a
      001CB5 08               [12] 5290 	inc	r0
      001CB6 E6               [12] 5291 	mov	a,@r0
      001CB7 9F               [12] 5292 	subb	a,r7
      001CB8 FF               [12] 5293 	mov	r7,a
      001CB9 E5*00            [12] 5294 	mov	a,_bp
      001CBB 24 20            [12] 5295 	add	a,#0x20
      001CBD F8               [12] 5296 	mov	r0,a
      001CBE A6 04            [24] 5297 	mov	@r0,ar4
      001CC0 08               [12] 5298 	inc	r0
      001CC1 A6 05            [24] 5299 	mov	@r0,ar5
      001CC3 08               [12] 5300 	inc	r0
      001CC4 A6 06            [24] 5301 	mov	@r0,ar6
      001CC6 08               [12] 5302 	inc	r0
      001CC7 A6 07            [24] 5303 	mov	@r0,ar7
                                   5304 ;	pff\source\pff.c:946: if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
      001CC9 E5*00            [12] 5305 	mov	a,_bp
      001CCB 24 FC            [12] 5306 	add	a,#0xfc
      001CCD F8               [12] 5307 	mov	r0,a
      001CCE 86 04            [24] 5308 	mov	ar4,@r0
      001CD0 08               [12] 5309 	inc	r0
      001CD1 86 05            [24] 5310 	mov	ar5,@r0
      001CD3 E4               [12] 5311 	clr	a
      001CD4 FE               [12] 5312 	mov	r6,a
      001CD5 FF               [12] 5313 	mov	r7,a
      001CD6 E5*00            [12] 5314 	mov	a,_bp
      001CD8 24 20            [12] 5315 	add	a,#0x20
      001CDA F8               [12] 5316 	mov	r0,a
      001CDB C3               [12] 5317 	clr	c
      001CDC E6               [12] 5318 	mov	a,@r0
      001CDD 9C               [12] 5319 	subb	a,r4
      001CDE 08               [12] 5320 	inc	r0
      001CDF E6               [12] 5321 	mov	a,@r0
      001CE0 9D               [12] 5322 	subb	a,r5
      001CE1 08               [12] 5323 	inc	r0
      001CE2 E6               [12] 5324 	mov	a,@r0
      001CE3 9E               [12] 5325 	subb	a,r6
      001CE4 08               [12] 5326 	inc	r0
      001CE5 E6               [12] 5327 	mov	a,@r0
      001CE6 9F               [12] 5328 	subb	a,r7
      001CE7 50 10            [24] 5329 	jnc	00140$
      001CE9 E5*00            [12] 5330 	mov	a,_bp
      001CEB 24 20            [12] 5331 	add	a,#0x20
      001CED F8               [12] 5332 	mov	r0,a
      001CEE E5*00            [12] 5333 	mov	a,_bp
      001CF0 24 FC            [12] 5334 	add	a,#0xfc
      001CF2 F9               [12] 5335 	mov	r1,a
      001CF3 E6               [12] 5336 	mov	a,@r0
      001CF4 F7               [12] 5337 	mov	@r1,a
      001CF5 08               [12] 5338 	inc	r0
      001CF6 E6               [12] 5339 	mov	a,@r0
      001CF7 09               [12] 5340 	inc	r1
      001CF8 F7               [12] 5341 	mov	@r1,a
                                   5342 ;	pff\source\pff.c:948: while (btr)	{									/* Repeat until all data transferred */
      001CF9                       5343 00140$:
      001CF9 E5*00            [12] 5344 	mov	a,_bp
      001CFB 24 24            [12] 5345 	add	a,#0x24
      001CFD F8               [12] 5346 	mov	r0,a
      001CFE E5*00            [12] 5347 	mov	a,_bp
      001D00 24 15            [12] 5348 	add	a,#0x15
      001D02 F9               [12] 5349 	mov	r1,a
      001D03 74 22            [12] 5350 	mov	a,#0x22
      001D05 26               [12] 5351 	add	a,@r0
      001D06 F7               [12] 5352 	mov	@r1,a
      001D07 E4               [12] 5353 	clr	a
      001D08 08               [12] 5354 	inc	r0
      001D09 36               [12] 5355 	addc	a,@r0
      001D0A 09               [12] 5356 	inc	r1
      001D0B F7               [12] 5357 	mov	@r1,a
      001D0C 08               [12] 5358 	inc	r0
      001D0D E6               [12] 5359 	mov	a,@r0
      001D0E 09               [12] 5360 	inc	r1
      001D0F F7               [12] 5361 	mov	@r1,a
      001D10 E5*00            [12] 5362 	mov	a,_bp
      001D12 24 24            [12] 5363 	add	a,#0x24
      001D14 F8               [12] 5364 	mov	r0,a
      001D15 E5*00            [12] 5365 	mov	a,_bp
      001D17 24 0A            [12] 5366 	add	a,#0x0a
      001D19 F9               [12] 5367 	mov	r1,a
      001D1A 74 1E            [12] 5368 	mov	a,#0x1e
      001D1C 26               [12] 5369 	add	a,@r0
      001D1D F7               [12] 5370 	mov	@r1,a
      001D1E E4               [12] 5371 	clr	a
      001D1F 08               [12] 5372 	inc	r0
      001D20 36               [12] 5373 	addc	a,@r0
      001D21 09               [12] 5374 	inc	r1
      001D22 F7               [12] 5375 	mov	@r1,a
      001D23 08               [12] 5376 	inc	r0
      001D24 E6               [12] 5377 	mov	a,@r0
      001D25 09               [12] 5378 	inc	r1
      001D26 F7               [12] 5379 	mov	@r1,a
      001D27 E5*00            [12] 5380 	mov	a,_bp
      001D29 24 24            [12] 5381 	add	a,#0x24
      001D2B F8               [12] 5382 	mov	r0,a
      001D2C E5*00            [12] 5383 	mov	a,_bp
      001D2E 24 04            [12] 5384 	add	a,#0x04
      001D30 F9               [12] 5385 	mov	r1,a
      001D31 74 02            [12] 5386 	mov	a,#0x02
      001D33 26               [12] 5387 	add	a,@r0
      001D34 F7               [12] 5388 	mov	@r1,a
      001D35 E4               [12] 5389 	clr	a
      001D36 08               [12] 5390 	inc	r0
      001D37 36               [12] 5391 	addc	a,@r0
      001D38 09               [12] 5392 	inc	r1
      001D39 F7               [12] 5393 	mov	@r1,a
      001D3A 08               [12] 5394 	inc	r0
      001D3B E6               [12] 5395 	mov	a,@r0
      001D3C 09               [12] 5396 	inc	r1
      001D3D F7               [12] 5397 	mov	@r1,a
      001D3E E5*00            [12] 5398 	mov	a,_bp
      001D40 24 24            [12] 5399 	add	a,#0x24
      001D42 F8               [12] 5400 	mov	r0,a
      001D43 E5*00            [12] 5401 	mov	a,_bp
      001D45 24 18            [12] 5402 	add	a,#0x18
      001D47 F9               [12] 5403 	mov	r1,a
      001D48 74 26            [12] 5404 	mov	a,#0x26
      001D4A 26               [12] 5405 	add	a,@r0
      001D4B F7               [12] 5406 	mov	@r1,a
      001D4C E4               [12] 5407 	clr	a
      001D4D 08               [12] 5408 	inc	r0
      001D4E 36               [12] 5409 	addc	a,@r0
      001D4F 09               [12] 5410 	inc	r1
      001D50 F7               [12] 5411 	mov	@r1,a
      001D51 08               [12] 5412 	inc	r0
      001D52 E6               [12] 5413 	mov	a,@r0
      001D53 09               [12] 5414 	inc	r1
      001D54 F7               [12] 5415 	mov	@r1,a
      001D55                       5416 00124$:
      001D55 E5*00            [12] 5417 	mov	a,_bp
      001D57 24 FC            [12] 5418 	add	a,#0xfc
      001D59 F8               [12] 5419 	mov	r0,a
      001D5A E6               [12] 5420 	mov	a,@r0
      001D5B 08               [12] 5421 	inc	r0
      001D5C 46               [12] 5422 	orl	a,@r0
      001D5D 70 03            [24] 5423 	jnz	00184$
      001D5F 02r20rD0         [24] 5424 	ljmp	00126$
      001D62                       5425 00184$:
                                   5426 ;	pff\source\pff.c:949: if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
      001D62 E5*00            [12] 5427 	mov	a,_bp
      001D64 24 07            [12] 5428 	add	a,#0x07
      001D66 F8               [12] 5429 	mov	r0,a
      001D67 86 82            [24] 5430 	mov	dpl,@r0
      001D69 08               [12] 5431 	inc	r0
      001D6A 86 83            [24] 5432 	mov	dph,@r0
      001D6C 08               [12] 5433 	inc	r0
      001D6D 86 F0            [24] 5434 	mov	b,@r0
      001D6F E5*00            [12] 5435 	mov	a,_bp
      001D71 24 11            [12] 5436 	add	a,#0x11
      001D73 F9               [12] 5437 	mov	r1,a
      001D74 12r00r00         [24] 5438 	lcall	__gptrget
      001D77 F7               [12] 5439 	mov	@r1,a
      001D78 A3               [24] 5440 	inc	dptr
      001D79 12r00r00         [24] 5441 	lcall	__gptrget
      001D7C 09               [12] 5442 	inc	r1
      001D7D F7               [12] 5443 	mov	@r1,a
      001D7E A3               [24] 5444 	inc	dptr
      001D7F 12r00r00         [24] 5445 	lcall	__gptrget
      001D82 09               [12] 5446 	inc	r1
      001D83 F7               [12] 5447 	mov	@r1,a
      001D84 A3               [24] 5448 	inc	dptr
      001D85 12r00r00         [24] 5449 	lcall	__gptrget
      001D88 09               [12] 5450 	inc	r1
      001D89 F7               [12] 5451 	mov	@r1,a
      001D8A E5*00            [12] 5452 	mov	a,_bp
      001D8C 24 11            [12] 5453 	add	a,#0x11
      001D8E F8               [12] 5454 	mov	r0,a
      001D8F E6               [12] 5455 	mov	a,@r0
      001D90 70 05            [24] 5456 	jnz	00185$
      001D92 08               [12] 5457 	inc	r0
      001D93 E6               [12] 5458 	mov	a,@r0
      001D94 30 E0 03         [24] 5459 	jnb	acc.0,00186$
      001D97                       5460 00185$:
      001D97 02r1Fr2F         [24] 5461 	ljmp	00117$
      001D9A                       5462 00186$:
                                   5463 ;	pff\source\pff.c:950: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
      001D9A E5*00            [12] 5464 	mov	a,_bp
      001D9C 24 11            [12] 5465 	add	a,#0x11
      001D9E F8               [12] 5466 	mov	r0,a
      001D9F 08               [12] 5467 	inc	r0
      001DA0 08               [12] 5468 	inc	r0
      001DA1 08               [12] 5469 	inc	r0
      001DA2 E6               [12] 5470 	mov	a,@r0
      001DA3 7F 00            [12] 5471 	mov	r7,#0x00
      001DA5 C3               [12] 5472 	clr	c
      001DA6 13               [12] 5473 	rrc	a
      001DA7 FC               [12] 5474 	mov	r4,a
      001DA8 18               [12] 5475 	dec	r0
      001DA9 E6               [12] 5476 	mov	a,@r0
      001DAA 13               [12] 5477 	rrc	a
      001DAB 18               [12] 5478 	dec	r0
      001DAC E6               [12] 5479 	mov	a,@r0
      001DAD 13               [12] 5480 	rrc	a
      001DAE FA               [12] 5481 	mov	r2,a
      001DAF E5*00            [12] 5482 	mov	a,_bp
      001DB1 24 04            [12] 5483 	add	a,#0x04
      001DB3 F8               [12] 5484 	mov	r0,a
      001DB4 86 82            [24] 5485 	mov	dpl,@r0
      001DB6 08               [12] 5486 	inc	r0
      001DB7 86 83            [24] 5487 	mov	dph,@r0
      001DB9 08               [12] 5488 	inc	r0
      001DBA 86 F0            [24] 5489 	mov	b,@r0
      001DBC 12r00r00         [24] 5490 	lcall	__gptrget
      001DBF FE               [12] 5491 	mov	r6,a
      001DC0 1E               [12] 5492 	dec	r6
      001DC1 EA               [12] 5493 	mov	a,r2
      001DC2 52 06            [12] 5494 	anl	ar6,a
                                   5495 ;	pff\source\pff.c:951: if (!cs) {								/* On the cluster boundary? */
      001DC4 EE               [12] 5496 	mov	a,r6
      001DC5 FB               [12] 5497 	mov	r3,a
      001DC6 60 03            [24] 5498 	jz	00187$
      001DC8 02r1Er97         [24] 5499 	ljmp	00113$
      001DCB                       5500 00187$:
                                   5501 ;	pff\source\pff.c:952: if (fs->fptr == 0) {				/* On the top of the file? */
      001DCB E5*00            [12] 5502 	mov	a,_bp
      001DCD 24 11            [12] 5503 	add	a,#0x11
      001DCF F8               [12] 5504 	mov	r0,a
      001DD0 E6               [12] 5505 	mov	a,@r0
      001DD1 08               [12] 5506 	inc	r0
      001DD2 46               [12] 5507 	orl	a,@r0
      001DD3 08               [12] 5508 	inc	r0
      001DD4 46               [12] 5509 	orl	a,@r0
      001DD5 08               [12] 5510 	inc	r0
      001DD6 46               [12] 5511 	orl	a,@r0
      001DD7 70 2A            [24] 5512 	jnz	00108$
                                   5513 ;	pff\source\pff.c:953: clst = fs->org_clust;
      001DD9 E5*00            [12] 5514 	mov	a,_bp
      001DDB 24 0A            [12] 5515 	add	a,#0x0a
      001DDD F8               [12] 5516 	mov	r0,a
      001DDE 86 82            [24] 5517 	mov	dpl,@r0
      001DE0 08               [12] 5518 	inc	r0
      001DE1 86 83            [24] 5519 	mov	dph,@r0
      001DE3 08               [12] 5520 	inc	r0
      001DE4 86 F0            [24] 5521 	mov	b,@r0
      001DE6 E5*00            [12] 5522 	mov	a,_bp
      001DE8 24 27            [12] 5523 	add	a,#0x27
      001DEA F9               [12] 5524 	mov	r1,a
      001DEB 12r00r00         [24] 5525 	lcall	__gptrget
      001DEE F7               [12] 5526 	mov	@r1,a
      001DEF A3               [24] 5527 	inc	dptr
      001DF0 12r00r00         [24] 5528 	lcall	__gptrget
      001DF3 09               [12] 5529 	inc	r1
      001DF4 F7               [12] 5530 	mov	@r1,a
      001DF5 A3               [24] 5531 	inc	dptr
      001DF6 12r00r00         [24] 5532 	lcall	__gptrget
      001DF9 09               [12] 5533 	inc	r1
      001DFA F7               [12] 5534 	mov	@r1,a
      001DFB A3               [24] 5535 	inc	dptr
      001DFC 12r00r00         [24] 5536 	lcall	__gptrget
      001DFF 09               [12] 5537 	inc	r1
      001E00 F7               [12] 5538 	mov	@r1,a
      001E01 80 43            [24] 5539 	sjmp	00109$
      001E03                       5540 00108$:
                                   5541 ;	pff\source\pff.c:955: clst = get_fat(fs->curr_clust);
      001E03 E5*00            [12] 5542 	mov	a,_bp
      001E05 24 15            [12] 5543 	add	a,#0x15
      001E07 F8               [12] 5544 	mov	r0,a
      001E08 86 82            [24] 5545 	mov	dpl,@r0
      001E0A 08               [12] 5546 	inc	r0
      001E0B 86 83            [24] 5547 	mov	dph,@r0
      001E0D 08               [12] 5548 	inc	r0
      001E0E 86 F0            [24] 5549 	mov	b,@r0
      001E10 12r00r00         [24] 5550 	lcall	__gptrget
      001E13 FC               [12] 5551 	mov	r4,a
      001E14 A3               [24] 5552 	inc	dptr
      001E15 12r00r00         [24] 5553 	lcall	__gptrget
      001E18 FD               [12] 5554 	mov	r5,a
      001E19 A3               [24] 5555 	inc	dptr
      001E1A 12r00r00         [24] 5556 	lcall	__gptrget
      001E1D FE               [12] 5557 	mov	r6,a
      001E1E A3               [24] 5558 	inc	dptr
      001E1F 12r00r00         [24] 5559 	lcall	__gptrget
      001E22 8C 82            [24] 5560 	mov	dpl,r4
      001E24 8D 83            [24] 5561 	mov	dph,r5
      001E26 8E F0            [24] 5562 	mov	b,r6
      001E28 C0 03            [24] 5563 	push	ar3
      001E2A 12r02r28         [24] 5564 	lcall	_get_fat
      001E2D AC 82            [24] 5565 	mov	r4,dpl
      001E2F AD 83            [24] 5566 	mov	r5,dph
      001E31 AE F0            [24] 5567 	mov	r6,b
      001E33 FF               [12] 5568 	mov	r7,a
      001E34 D0 03            [24] 5569 	pop	ar3
      001E36 E5*00            [12] 5570 	mov	a,_bp
      001E38 24 27            [12] 5571 	add	a,#0x27
      001E3A F8               [12] 5572 	mov	r0,a
      001E3B A6 04            [24] 5573 	mov	@r0,ar4
      001E3D 08               [12] 5574 	inc	r0
      001E3E A6 05            [24] 5575 	mov	@r0,ar5
      001E40 08               [12] 5576 	inc	r0
      001E41 A6 06            [24] 5577 	mov	@r0,ar6
      001E43 08               [12] 5578 	inc	r0
      001E44 A6 07            [24] 5579 	mov	@r0,ar7
                                   5580 ;	pff\source\pff.c:973: return FR_OK;
                                   5581 ;	pff\source\pff.c:955: clst = get_fat(fs->curr_clust);
      001E46                       5582 00109$:
                                   5583 ;	pff\source\pff.c:957: if (clst <= 1) ABORT(FR_DISK_ERR);
      001E46 E5*00            [12] 5584 	mov	a,_bp
      001E48 24 27            [12] 5585 	add	a,#0x27
      001E4A F8               [12] 5586 	mov	r0,a
      001E4B C3               [12] 5587 	clr	c
      001E4C 74 01            [12] 5588 	mov	a,#0x01
      001E4E 96               [12] 5589 	subb	a,@r0
      001E4F E4               [12] 5590 	clr	a
      001E50 08               [12] 5591 	inc	r0
      001E51 96               [12] 5592 	subb	a,@r0
      001E52 E4               [12] 5593 	clr	a
      001E53 08               [12] 5594 	inc	r0
      001E54 96               [12] 5595 	subb	a,@r0
      001E55 E4               [12] 5596 	clr	a
      001E56 08               [12] 5597 	inc	r0
      001E57 96               [12] 5598 	subb	a,@r0
      001E58 40 15            [24] 5599 	jc	00111$
      001E5A A8*00            [24] 5600 	mov	r0,_bp
      001E5C 08               [12] 5601 	inc	r0
      001E5D 86 82            [24] 5602 	mov	dpl,@r0
      001E5F 08               [12] 5603 	inc	r0
      001E60 86 83            [24] 5604 	mov	dph,@r0
      001E62 08               [12] 5605 	inc	r0
      001E63 86 F0            [24] 5606 	mov	b,@r0
      001E65 E4               [12] 5607 	clr	a
      001E66 12r00r00         [24] 5608 	lcall	__gptrput
      001E69 75 82 01         [24] 5609 	mov	dpl,#0x01
      001E6C 02r20rD3         [24] 5610 	ljmp	00127$
      001E6F                       5611 00111$:
                                   5612 ;	pff\source\pff.c:958: fs->curr_clust = clst;				/* Update current cluster */
      001E6F E5*00            [12] 5613 	mov	a,_bp
      001E71 24 15            [12] 5614 	add	a,#0x15
      001E73 F8               [12] 5615 	mov	r0,a
      001E74 86 82            [24] 5616 	mov	dpl,@r0
      001E76 08               [12] 5617 	inc	r0
      001E77 86 83            [24] 5618 	mov	dph,@r0
      001E79 08               [12] 5619 	inc	r0
      001E7A 86 F0            [24] 5620 	mov	b,@r0
      001E7C E5*00            [12] 5621 	mov	a,_bp
      001E7E 24 27            [12] 5622 	add	a,#0x27
      001E80 F9               [12] 5623 	mov	r1,a
      001E81 E7               [12] 5624 	mov	a,@r1
      001E82 12r00r00         [24] 5625 	lcall	__gptrput
      001E85 A3               [24] 5626 	inc	dptr
      001E86 09               [12] 5627 	inc	r1
      001E87 E7               [12] 5628 	mov	a,@r1
      001E88 12r00r00         [24] 5629 	lcall	__gptrput
      001E8B A3               [24] 5630 	inc	dptr
      001E8C 09               [12] 5631 	inc	r1
      001E8D E7               [12] 5632 	mov	a,@r1
      001E8E 12r00r00         [24] 5633 	lcall	__gptrput
      001E91 A3               [24] 5634 	inc	dptr
      001E92 09               [12] 5635 	inc	r1
      001E93 E7               [12] 5636 	mov	a,@r1
      001E94 12r00r00         [24] 5637 	lcall	__gptrput
      001E97                       5638 00113$:
                                   5639 ;	pff\source\pff.c:960: sect = clust2sect(fs->curr_clust);		/* Get current sector */
      001E97 E5*00            [12] 5640 	mov	a,_bp
      001E99 24 15            [12] 5641 	add	a,#0x15
      001E9B F8               [12] 5642 	mov	r0,a
      001E9C 86 82            [24] 5643 	mov	dpl,@r0
      001E9E 08               [12] 5644 	inc	r0
      001E9F 86 83            [24] 5645 	mov	dph,@r0
      001EA1 08               [12] 5646 	inc	r0
      001EA2 86 F0            [24] 5647 	mov	b,@r0
      001EA4 12r00r00         [24] 5648 	lcall	__gptrget
      001EA7 FC               [12] 5649 	mov	r4,a
      001EA8 A3               [24] 5650 	inc	dptr
      001EA9 12r00r00         [24] 5651 	lcall	__gptrget
      001EAC FD               [12] 5652 	mov	r5,a
      001EAD A3               [24] 5653 	inc	dptr
      001EAE 12r00r00         [24] 5654 	lcall	__gptrget
      001EB1 FE               [12] 5655 	mov	r6,a
      001EB2 A3               [24] 5656 	inc	dptr
      001EB3 12r00r00         [24] 5657 	lcall	__gptrget
      001EB6 8C 82            [24] 5658 	mov	dpl,r4
      001EB8 8D 83            [24] 5659 	mov	dph,r5
      001EBA 8E F0            [24] 5660 	mov	b,r6
      001EBC C0 03            [24] 5661 	push	ar3
      001EBE 12r03rC0         [24] 5662 	lcall	_clust2sect
      001EC1 AC 82            [24] 5663 	mov	r4,dpl
      001EC3 AD 83            [24] 5664 	mov	r5,dph
      001EC5 AE F0            [24] 5665 	mov	r6,b
      001EC7 FF               [12] 5666 	mov	r7,a
      001EC8 D0 03            [24] 5667 	pop	ar3
      001ECA E5*00            [12] 5668 	mov	a,_bp
      001ECC 24 11            [12] 5669 	add	a,#0x11
      001ECE F8               [12] 5670 	mov	r0,a
      001ECF A6 04            [24] 5671 	mov	@r0,ar4
      001ED1 08               [12] 5672 	inc	r0
      001ED2 A6 05            [24] 5673 	mov	@r0,ar5
      001ED4 08               [12] 5674 	inc	r0
      001ED5 A6 06            [24] 5675 	mov	@r0,ar6
      001ED7 08               [12] 5676 	inc	r0
      001ED8 A6 07            [24] 5677 	mov	@r0,ar7
                                   5678 ;	pff\source\pff.c:961: if (!sect) ABORT(FR_DISK_ERR);
      001EDA EC               [12] 5679 	mov	a,r4
      001EDB 4D               [12] 5680 	orl	a,r5
      001EDC 4E               [12] 5681 	orl	a,r6
      001EDD 4F               [12] 5682 	orl	a,r7
      001EDE 70 15            [24] 5683 	jnz	00115$
      001EE0 A8*00            [24] 5684 	mov	r0,_bp
      001EE2 08               [12] 5685 	inc	r0
      001EE3 86 82            [24] 5686 	mov	dpl,@r0
      001EE5 08               [12] 5687 	inc	r0
      001EE6 86 83            [24] 5688 	mov	dph,@r0
      001EE8 08               [12] 5689 	inc	r0
      001EE9 86 F0            [24] 5690 	mov	b,@r0
      001EEB E4               [12] 5691 	clr	a
      001EEC 12r00r00         [24] 5692 	lcall	__gptrput
      001EEF 75 82 01         [24] 5693 	mov	dpl,#0x01
      001EF2 02r20rD3         [24] 5694 	ljmp	00127$
      001EF5                       5695 00115$:
                                   5696 ;	pff\source\pff.c:962: fs->dsect = sect + cs;
      001EF5 8B 04            [24] 5697 	mov	ar4,r3
      001EF7 E4               [12] 5698 	clr	a
      001EF8 FD               [12] 5699 	mov	r5,a
      001EF9 FE               [12] 5700 	mov	r6,a
      001EFA FF               [12] 5701 	mov	r7,a
      001EFB E5*00            [12] 5702 	mov	a,_bp
      001EFD 24 11            [12] 5703 	add	a,#0x11
      001EFF F8               [12] 5704 	mov	r0,a
      001F00 EC               [12] 5705 	mov	a,r4
      001F01 26               [12] 5706 	add	a,@r0
      001F02 FC               [12] 5707 	mov	r4,a
      001F03 ED               [12] 5708 	mov	a,r5
      001F04 08               [12] 5709 	inc	r0
      001F05 36               [12] 5710 	addc	a,@r0
      001F06 FD               [12] 5711 	mov	r5,a
      001F07 EE               [12] 5712 	mov	a,r6
      001F08 08               [12] 5713 	inc	r0
      001F09 36               [12] 5714 	addc	a,@r0
      001F0A FE               [12] 5715 	mov	r6,a
      001F0B EF               [12] 5716 	mov	a,r7
      001F0C 08               [12] 5717 	inc	r0
      001F0D 36               [12] 5718 	addc	a,@r0
      001F0E FF               [12] 5719 	mov	r7,a
      001F0F E5*00            [12] 5720 	mov	a,_bp
      001F11 24 18            [12] 5721 	add	a,#0x18
      001F13 F8               [12] 5722 	mov	r0,a
      001F14 86 82            [24] 5723 	mov	dpl,@r0
      001F16 08               [12] 5724 	inc	r0
      001F17 86 83            [24] 5725 	mov	dph,@r0
      001F19 08               [12] 5726 	inc	r0
      001F1A 86 F0            [24] 5727 	mov	b,@r0
      001F1C EC               [12] 5728 	mov	a,r4
      001F1D 12r00r00         [24] 5729 	lcall	__gptrput
      001F20 A3               [24] 5730 	inc	dptr
      001F21 ED               [12] 5731 	mov	a,r5
      001F22 12r00r00         [24] 5732 	lcall	__gptrput
      001F25 A3               [24] 5733 	inc	dptr
      001F26 EE               [12] 5734 	mov	a,r6
      001F27 12r00r00         [24] 5735 	lcall	__gptrput
      001F2A A3               [24] 5736 	inc	dptr
      001F2B EF               [12] 5737 	mov	a,r7
      001F2C 12r00r00         [24] 5738 	lcall	__gptrput
                                   5739 ;	pff\source\pff.c:973: return FR_OK;
                                   5740 ;	pff\source\pff.c:962: fs->dsect = sect + cs;
      001F2F                       5741 00117$:
                                   5742 ;	pff\source\pff.c:964: rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
      001F2F E5*00            [12] 5743 	mov	a,_bp
      001F31 24 07            [12] 5744 	add	a,#0x07
      001F33 F8               [12] 5745 	mov	r0,a
      001F34 86 82            [24] 5746 	mov	dpl,@r0
      001F36 08               [12] 5747 	inc	r0
      001F37 86 83            [24] 5748 	mov	dph,@r0
      001F39 08               [12] 5749 	inc	r0
      001F3A 86 F0            [24] 5750 	mov	b,@r0
      001F3C 12r00r00         [24] 5751 	lcall	__gptrget
      001F3F FE               [12] 5752 	mov	r6,a
      001F40 A3               [24] 5753 	inc	dptr
      001F41 12r00r00         [24] 5754 	lcall	__gptrget
      001F44 FF               [12] 5755 	mov	r7,a
      001F45 53 07 01         [24] 5756 	anl	ar7,#0x01
      001F48 E5*00            [12] 5757 	mov	a,_bp
      001F4A 24 1E            [12] 5758 	add	a,#0x1e
      001F4C F8               [12] 5759 	mov	r0,a
      001F4D E4               [12] 5760 	clr	a
      001F4E C3               [12] 5761 	clr	c
      001F4F 9E               [12] 5762 	subb	a,r6
      001F50 F6               [12] 5763 	mov	@r0,a
      001F51 74 02            [12] 5764 	mov	a,#0x02
      001F53 9F               [12] 5765 	subb	a,r7
      001F54 08               [12] 5766 	inc	r0
      001F55 F6               [12] 5767 	mov	@r0,a
                                   5768 ;	pff\source\pff.c:965: if (rcnt > btr) rcnt = btr;
      001F56 E5*00            [12] 5769 	mov	a,_bp
      001F58 24 1E            [12] 5770 	add	a,#0x1e
      001F5A F8               [12] 5771 	mov	r0,a
      001F5B E5*00            [12] 5772 	mov	a,_bp
      001F5D 24 FC            [12] 5773 	add	a,#0xfc
      001F5F F9               [12] 5774 	mov	r1,a
      001F60 C3               [12] 5775 	clr	c
      001F61 E7               [12] 5776 	mov	a,@r1
      001F62 96               [12] 5777 	subb	a,@r0
      001F63 09               [12] 5778 	inc	r1
      001F64 E7               [12] 5779 	mov	a,@r1
      001F65 08               [12] 5780 	inc	r0
      001F66 96               [12] 5781 	subb	a,@r0
      001F67 50 10            [24] 5782 	jnc	00119$
      001F69 E5*00            [12] 5783 	mov	a,_bp
      001F6B 24 FC            [12] 5784 	add	a,#0xfc
      001F6D F8               [12] 5785 	mov	r0,a
      001F6E E5*00            [12] 5786 	mov	a,_bp
      001F70 24 1E            [12] 5787 	add	a,#0x1e
      001F72 F9               [12] 5788 	mov	r1,a
      001F73 E6               [12] 5789 	mov	a,@r0
      001F74 F7               [12] 5790 	mov	@r1,a
      001F75 08               [12] 5791 	inc	r0
      001F76 E6               [12] 5792 	mov	a,@r0
      001F77 09               [12] 5793 	inc	r1
      001F78 F7               [12] 5794 	mov	@r1,a
      001F79                       5795 00119$:
                                   5796 ;	pff\source\pff.c:966: dr = disk_readp(rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
      001F79 E5*00            [12] 5797 	mov	a,_bp
      001F7B 24 07            [12] 5798 	add	a,#0x07
      001F7D F8               [12] 5799 	mov	r0,a
      001F7E 86 82            [24] 5800 	mov	dpl,@r0
      001F80 08               [12] 5801 	inc	r0
      001F81 86 83            [24] 5802 	mov	dph,@r0
      001F83 08               [12] 5803 	inc	r0
      001F84 86 F0            [24] 5804 	mov	b,@r0
      001F86 12r00r00         [24] 5805 	lcall	__gptrget
      001F89 FC               [12] 5806 	mov	r4,a
      001F8A A3               [24] 5807 	inc	dptr
      001F8B 12r00r00         [24] 5808 	lcall	__gptrget
      001F8E FD               [12] 5809 	mov	r5,a
      001F8F 53 05 01         [24] 5810 	anl	ar5,#0x01
      001F92 E5*00            [12] 5811 	mov	a,_bp
      001F94 24 18            [12] 5812 	add	a,#0x18
      001F96 F8               [12] 5813 	mov	r0,a
      001F97 86 82            [24] 5814 	mov	dpl,@r0
      001F99 08               [12] 5815 	inc	r0
      001F9A 86 83            [24] 5816 	mov	dph,@r0
      001F9C 08               [12] 5817 	inc	r0
      001F9D 86 F0            [24] 5818 	mov	b,@r0
      001F9F 12r00r00         [24] 5819 	lcall	__gptrget
      001FA2 FA               [12] 5820 	mov	r2,a
      001FA3 A3               [24] 5821 	inc	dptr
      001FA4 12r00r00         [24] 5822 	lcall	__gptrget
      001FA7 FB               [12] 5823 	mov	r3,a
      001FA8 A3               [24] 5824 	inc	dptr
      001FA9 12r00r00         [24] 5825 	lcall	__gptrget
      001FAC FE               [12] 5826 	mov	r6,a
      001FAD A3               [24] 5827 	inc	dptr
      001FAE 12r00r00         [24] 5828 	lcall	__gptrget
      001FB1 FF               [12] 5829 	mov	r7,a
      001FB2 E5*00            [12] 5830 	mov	a,_bp
      001FB4 24 1E            [12] 5831 	add	a,#0x1e
      001FB6 F8               [12] 5832 	mov	r0,a
      001FB7 E6               [12] 5833 	mov	a,@r0
      001FB8 C0 E0            [24] 5834 	push	acc
      001FBA 08               [12] 5835 	inc	r0
      001FBB E6               [12] 5836 	mov	a,@r0
      001FBC C0 E0            [24] 5837 	push	acc
      001FBE C0 04            [24] 5838 	push	ar4
      001FC0 C0 05            [24] 5839 	push	ar5
      001FC2 C0 02            [24] 5840 	push	ar2
      001FC4 C0 03            [24] 5841 	push	ar3
      001FC6 C0 06            [24] 5842 	push	ar6
      001FC8 C0 07            [24] 5843 	push	ar7
      001FCA E5*00            [12] 5844 	mov	a,_bp
      001FCC 24 1B            [12] 5845 	add	a,#0x1b
      001FCE F8               [12] 5846 	mov	r0,a
      001FCF 86 82            [24] 5847 	mov	dpl,@r0
      001FD1 08               [12] 5848 	inc	r0
      001FD2 86 83            [24] 5849 	mov	dph,@r0
      001FD4 08               [12] 5850 	inc	r0
      001FD5 86 F0            [24] 5851 	mov	b,@r0
      001FD7 12r00r00         [24] 5852 	lcall	_disk_readp
      001FDA AF 82            [24] 5853 	mov	r7,dpl
      001FDC E5 81            [12] 5854 	mov	a,sp
      001FDE 24 F8            [12] 5855 	add	a,#0xf8
      001FE0 F5 81            [12] 5856 	mov	sp,a
                                   5857 ;	pff\source\pff.c:967: if (dr) ABORT(FR_DISK_ERR);
      001FE2 EF               [12] 5858 	mov	a,r7
      001FE3 60 15            [24] 5859 	jz	00121$
      001FE5 A8*00            [24] 5860 	mov	r0,_bp
      001FE7 08               [12] 5861 	inc	r0
      001FE8 86 82            [24] 5862 	mov	dpl,@r0
      001FEA 08               [12] 5863 	inc	r0
      001FEB 86 83            [24] 5864 	mov	dph,@r0
      001FED 08               [12] 5865 	inc	r0
      001FEE 86 F0            [24] 5866 	mov	b,@r0
      001FF0 E4               [12] 5867 	clr	a
      001FF1 12r00r00         [24] 5868 	lcall	__gptrput
      001FF4 75 82 01         [24] 5869 	mov	dpl,#0x01
      001FF7 02r20rD3         [24] 5870 	ljmp	00127$
      001FFA                       5871 00121$:
                                   5872 ;	pff\source\pff.c:968: fs->fptr += rcnt;							/* Advances file read pointer */
      001FFA E5*00            [12] 5873 	mov	a,_bp
      001FFC 24 07            [12] 5874 	add	a,#0x07
      001FFE F8               [12] 5875 	mov	r0,a
      001FFF 86 82            [24] 5876 	mov	dpl,@r0
      002001 08               [12] 5877 	inc	r0
      002002 86 83            [24] 5878 	mov	dph,@r0
      002004 08               [12] 5879 	inc	r0
      002005 86 F0            [24] 5880 	mov	b,@r0
      002007 E5*00            [12] 5881 	mov	a,_bp
      002009 24 11            [12] 5882 	add	a,#0x11
      00200B F9               [12] 5883 	mov	r1,a
      00200C 12r00r00         [24] 5884 	lcall	__gptrget
      00200F F7               [12] 5885 	mov	@r1,a
      002010 A3               [24] 5886 	inc	dptr
      002011 12r00r00         [24] 5887 	lcall	__gptrget
      002014 09               [12] 5888 	inc	r1
      002015 F7               [12] 5889 	mov	@r1,a
      002016 A3               [24] 5890 	inc	dptr
      002017 12r00r00         [24] 5891 	lcall	__gptrget
      00201A 09               [12] 5892 	inc	r1
      00201B F7               [12] 5893 	mov	@r1,a
      00201C A3               [24] 5894 	inc	dptr
      00201D 12r00r00         [24] 5895 	lcall	__gptrget
      002020 09               [12] 5896 	inc	r1
      002021 F7               [12] 5897 	mov	@r1,a
      002022 E5*00            [12] 5898 	mov	a,_bp
      002024 24 1E            [12] 5899 	add	a,#0x1e
      002026 F8               [12] 5900 	mov	r0,a
      002027 86 02            [24] 5901 	mov	ar2,@r0
      002029 08               [12] 5902 	inc	r0
      00202A 86 03            [24] 5903 	mov	ar3,@r0
      00202C E4               [12] 5904 	clr	a
      00202D FE               [12] 5905 	mov	r6,a
      00202E FF               [12] 5906 	mov	r7,a
      00202F E5*00            [12] 5907 	mov	a,_bp
      002031 24 11            [12] 5908 	add	a,#0x11
      002033 F8               [12] 5909 	mov	r0,a
      002034 EA               [12] 5910 	mov	a,r2
      002035 26               [12] 5911 	add	a,@r0
      002036 FA               [12] 5912 	mov	r2,a
      002037 EB               [12] 5913 	mov	a,r3
      002038 08               [12] 5914 	inc	r0
      002039 36               [12] 5915 	addc	a,@r0
      00203A FB               [12] 5916 	mov	r3,a
      00203B EE               [12] 5917 	mov	a,r6
      00203C 08               [12] 5918 	inc	r0
      00203D 36               [12] 5919 	addc	a,@r0
      00203E FE               [12] 5920 	mov	r6,a
      00203F EF               [12] 5921 	mov	a,r7
      002040 08               [12] 5922 	inc	r0
      002041 36               [12] 5923 	addc	a,@r0
      002042 FF               [12] 5924 	mov	r7,a
      002043 E5*00            [12] 5925 	mov	a,_bp
      002045 24 07            [12] 5926 	add	a,#0x07
      002047 F8               [12] 5927 	mov	r0,a
      002048 86 82            [24] 5928 	mov	dpl,@r0
      00204A 08               [12] 5929 	inc	r0
      00204B 86 83            [24] 5930 	mov	dph,@r0
      00204D 08               [12] 5931 	inc	r0
      00204E 86 F0            [24] 5932 	mov	b,@r0
      002050 EA               [12] 5933 	mov	a,r2
      002051 12r00r00         [24] 5934 	lcall	__gptrput
      002054 A3               [24] 5935 	inc	dptr
      002055 EB               [12] 5936 	mov	a,r3
      002056 12r00r00         [24] 5937 	lcall	__gptrput
      002059 A3               [24] 5938 	inc	dptr
      00205A EE               [12] 5939 	mov	a,r6
      00205B 12r00r00         [24] 5940 	lcall	__gptrput
      00205E A3               [24] 5941 	inc	dptr
      00205F EF               [12] 5942 	mov	a,r7
      002060 12r00r00         [24] 5943 	lcall	__gptrput
                                   5944 ;	pff\source\pff.c:969: btr -= rcnt; *br += rcnt;					/* Update read counter */
      002063 E5*00            [12] 5945 	mov	a,_bp
      002065 24 FC            [12] 5946 	add	a,#0xfc
      002067 F8               [12] 5947 	mov	r0,a
      002068 E5*00            [12] 5948 	mov	a,_bp
      00206A 24 1E            [12] 5949 	add	a,#0x1e
      00206C F9               [12] 5950 	mov	r1,a
      00206D E6               [12] 5951 	mov	a,@r0
      00206E C3               [12] 5952 	clr	c
      00206F 97               [12] 5953 	subb	a,@r1
      002070 F6               [12] 5954 	mov	@r0,a
      002071 08               [12] 5955 	inc	r0
      002072 E6               [12] 5956 	mov	a,@r0
      002073 09               [12] 5957 	inc	r1
      002074 97               [12] 5958 	subb	a,@r1
      002075 F6               [12] 5959 	mov	@r0,a
      002076 E5*00            [12] 5960 	mov	a,_bp
      002078 24 0E            [12] 5961 	add	a,#0x0e
      00207A F8               [12] 5962 	mov	r0,a
      00207B 86 82            [24] 5963 	mov	dpl,@r0
      00207D 08               [12] 5964 	inc	r0
      00207E 86 83            [24] 5965 	mov	dph,@r0
      002080 08               [12] 5966 	inc	r0
      002081 86 F0            [24] 5967 	mov	b,@r0
      002083 12r00r00         [24] 5968 	lcall	__gptrget
      002086 FE               [12] 5969 	mov	r6,a
      002087 A3               [24] 5970 	inc	dptr
      002088 12r00r00         [24] 5971 	lcall	__gptrget
      00208B FF               [12] 5972 	mov	r7,a
      00208C E5*00            [12] 5973 	mov	a,_bp
      00208E 24 1E            [12] 5974 	add	a,#0x1e
      002090 F8               [12] 5975 	mov	r0,a
      002091 E6               [12] 5976 	mov	a,@r0
      002092 2E               [12] 5977 	add	a,r6
      002093 FE               [12] 5978 	mov	r6,a
      002094 08               [12] 5979 	inc	r0
      002095 E6               [12] 5980 	mov	a,@r0
      002096 3F               [12] 5981 	addc	a,r7
      002097 FF               [12] 5982 	mov	r7,a
      002098 E5*00            [12] 5983 	mov	a,_bp
      00209A 24 0E            [12] 5984 	add	a,#0x0e
      00209C F8               [12] 5985 	mov	r0,a
      00209D 86 82            [24] 5986 	mov	dpl,@r0
      00209F 08               [12] 5987 	inc	r0
      0020A0 86 83            [24] 5988 	mov	dph,@r0
      0020A2 08               [12] 5989 	inc	r0
      0020A3 86 F0            [24] 5990 	mov	b,@r0
      0020A5 EE               [12] 5991 	mov	a,r6
      0020A6 12r00r00         [24] 5992 	lcall	__gptrput
      0020A9 A3               [24] 5993 	inc	dptr
      0020AA EF               [12] 5994 	mov	a,r7
      0020AB 12r00r00         [24] 5995 	lcall	__gptrput
                                   5996 ;	pff\source\pff.c:970: if (rbuff) rbuff += rcnt;					/* Advances the data pointer if destination is memory */
      0020AE E5*00            [12] 5997 	mov	a,_bp
      0020B0 24 1B            [12] 5998 	add	a,#0x1b
      0020B2 F8               [12] 5999 	mov	r0,a
      0020B3 E6               [12] 6000 	mov	a,@r0
      0020B4 08               [12] 6001 	inc	r0
      0020B5 46               [12] 6002 	orl	a,@r0
      0020B6 70 03            [24] 6003 	jnz	00193$
      0020B8 02r1Dr55         [24] 6004 	ljmp	00124$
      0020BB                       6005 00193$:
      0020BB E5*00            [12] 6006 	mov	a,_bp
      0020BD 24 1B            [12] 6007 	add	a,#0x1b
      0020BF F8               [12] 6008 	mov	r0,a
      0020C0 E5*00            [12] 6009 	mov	a,_bp
      0020C2 24 1E            [12] 6010 	add	a,#0x1e
      0020C4 F9               [12] 6011 	mov	r1,a
      0020C5 E7               [12] 6012 	mov	a,@r1
      0020C6 26               [12] 6013 	add	a,@r0
      0020C7 F6               [12] 6014 	mov	@r0,a
      0020C8 09               [12] 6015 	inc	r1
      0020C9 E7               [12] 6016 	mov	a,@r1
      0020CA 08               [12] 6017 	inc	r0
      0020CB 36               [12] 6018 	addc	a,@r0
      0020CC F6               [12] 6019 	mov	@r0,a
      0020CD 02r1Dr55         [24] 6020 	ljmp	00124$
      0020D0                       6021 00126$:
                                   6022 ;	pff\source\pff.c:973: return FR_OK;
      0020D0 75 82 00         [24] 6023 	mov	dpl,#0x00
      0020D3                       6024 00127$:
                                   6025 ;	pff\source\pff.c:974: }
      0020D3 85*00 81         [24] 6026 	mov	sp,_bp
      0020D6 D0*00            [24] 6027 	pop	_bp
      0020D8 22               [24] 6028 	ret
                                   6029 ;------------------------------------------------------------
                                   6030 ;Allocation info for local variables in function 'pf_opendir'
                                   6031 ;------------------------------------------------------------
                                   6032 ;path                      Allocated to stack - _bp -5
                                   6033 ;dj                        Allocated to stack - _bp +1
                                   6034 ;res                       Allocated to registers r4 
                                   6035 ;sp                        Allocated to stack - _bp +7
                                   6036 ;dir                       Allocated to stack - _bp +19
                                   6037 ;fs                        Allocated to registers 
                                   6038 ;sloc0                     Allocated to stack - _bp +4
                                   6039 ;------------------------------------------------------------
                                   6040 ;	pff\source\pff.c:1104: FRESULT pf_opendir (
                                   6041 ;	-----------------------------------------
                                   6042 ;	 function pf_opendir
                                   6043 ;	-----------------------------------------
      0020D9                       6044 _pf_opendir:
      0020D9 C0*00            [24] 6045 	push	_bp
      0020DB 85 81*00         [24] 6046 	mov	_bp,sp
      0020DE C0 82            [24] 6047 	push	dpl
      0020E0 C0 83            [24] 6048 	push	dph
      0020E2 C0 F0            [24] 6049 	push	b
      0020E4 E5 81            [12] 6050 	mov	a,sp
      0020E6 24 2F            [12] 6051 	add	a,#0x2f
      0020E8 F5 81            [12] 6052 	mov	sp,a
                                   6053 ;	pff\source\pff.c:1114: if (!fs) {				/* Check file system */
      0020EA 90r00r00         [24] 6054 	mov	dptr,#_FatFs
      0020ED E0               [24] 6055 	movx	a,@dptr
      0020EE F5 F0            [12] 6056 	mov	b,a
      0020F0 A3               [24] 6057 	inc	dptr
      0020F1 E0               [24] 6058 	movx	a,@dptr
      0020F2 45 F0            [12] 6059 	orl	a,b
      0020F4 70 05            [24] 6060 	jnz	00111$
                                   6061 ;	pff\source\pff.c:1115: res = FR_NOT_ENABLED;
      0020F6 7C 05            [12] 6062 	mov	r4,#0x05
      0020F8 02r21rE2         [24] 6063 	ljmp	00112$
      0020FB                       6064 00111$:
                                   6065 ;	pff\source\pff.c:1117: dj->fn = sp;
      0020FB A8*00            [24] 6066 	mov	r0,_bp
      0020FD 08               [12] 6067 	inc	r0
      0020FE 74 02            [12] 6068 	mov	a,#0x02
      002100 26               [12] 6069 	add	a,@r0
      002101 FC               [12] 6070 	mov	r4,a
      002102 E4               [12] 6071 	clr	a
      002103 08               [12] 6072 	inc	r0
      002104 36               [12] 6073 	addc	a,@r0
      002105 FB               [12] 6074 	mov	r3,a
      002106 08               [12] 6075 	inc	r0
      002107 86 02            [24] 6076 	mov	ar2,@r0
      002109 E5*00            [12] 6077 	mov	a,_bp
      00210B 24 07            [12] 6078 	add	a,#0x07
      00210D FD               [12] 6079 	mov	r5,a
      00210E 7E 00            [12] 6080 	mov	r6,#0x00
      002110 7F 40            [12] 6081 	mov	r7,#0x40
      002112 8C 82            [24] 6082 	mov	dpl,r4
      002114 8B 83            [24] 6083 	mov	dph,r3
      002116 8A F0            [24] 6084 	mov	b,r2
      002118 ED               [12] 6085 	mov	a,r5
      002119 12r00r00         [24] 6086 	lcall	__gptrput
      00211C A3               [24] 6087 	inc	dptr
      00211D EE               [12] 6088 	mov	a,r6
      00211E 12r00r00         [24] 6089 	lcall	__gptrput
      002121 A3               [24] 6090 	inc	dptr
      002122 EF               [12] 6091 	mov	a,r7
      002123 12r00r00         [24] 6092 	lcall	__gptrput
                                   6093 ;	pff\source\pff.c:1118: res = follow_path(dj, dir, path);		/* Follow the path to the directory */
      002126 E5*00            [12] 6094 	mov	a,_bp
      002128 24 13            [12] 6095 	add	a,#0x13
      00212A F9               [12] 6096 	mov	r1,a
      00212B FD               [12] 6097 	mov	r5,a
      00212C 7E 00            [12] 6098 	mov	r6,#0x00
      00212E 7F 40            [12] 6099 	mov	r7,#0x40
      002130 C0 01            [24] 6100 	push	ar1
      002132 E5*00            [12] 6101 	mov	a,_bp
      002134 24 FB            [12] 6102 	add	a,#0xfb
      002136 F8               [12] 6103 	mov	r0,a
      002137 E6               [12] 6104 	mov	a,@r0
      002138 C0 E0            [24] 6105 	push	acc
      00213A 08               [12] 6106 	inc	r0
      00213B E6               [12] 6107 	mov	a,@r0
      00213C C0 E0            [24] 6108 	push	acc
      00213E 08               [12] 6109 	inc	r0
      00213F E6               [12] 6110 	mov	a,@r0
      002140 C0 E0            [24] 6111 	push	acc
      002142 C0 05            [24] 6112 	push	ar5
      002144 C0 06            [24] 6113 	push	ar6
      002146 C0 07            [24] 6114 	push	ar7
      002148 A8*00            [24] 6115 	mov	r0,_bp
      00214A 08               [12] 6116 	inc	r0
      00214B 86 82            [24] 6117 	mov	dpl,@r0
      00214D 08               [12] 6118 	inc	r0
      00214E 86 83            [24] 6119 	mov	dph,@r0
      002150 08               [12] 6120 	inc	r0
      002151 86 F0            [24] 6121 	mov	b,@r0
      002153 12r11r1B         [24] 6122 	lcall	_follow_path
      002156 AF 82            [24] 6123 	mov	r7,dpl
      002158 E5 81            [12] 6124 	mov	a,sp
      00215A 24 FA            [12] 6125 	add	a,#0xfa
      00215C F5 81            [12] 6126 	mov	sp,a
      00215E D0 01            [24] 6127 	pop	ar1
      002160 8F 04            [24] 6128 	mov	ar4,r7
                                   6129 ;	pff\source\pff.c:1119: if (res == FR_OK) {						/* Follow completed */
      002162 EC               [12] 6130 	mov	a,r4
      002163 60 03            [24] 6131 	jz	00136$
      002165 02r21rE2         [24] 6132 	ljmp	00112$
      002168                       6133 00136$:
                                   6134 ;	pff\source\pff.c:1120: if (dir[0]) {						/* It is not the root dir */
      002168 E7               [12] 6135 	mov	a,@r1
      002169 60 62            [24] 6136 	jz	00105$
                                   6137 ;	pff\source\pff.c:1121: if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
      00216B 74 0B            [12] 6138 	mov	a,#0x0b
      00216D 29               [12] 6139 	add	a,r1
      00216E F8               [12] 6140 	mov	r0,a
      00216F E6               [12] 6141 	mov	a,@r0
      002170 FF               [12] 6142 	mov	r7,a
      002171 30 E4 57         [24] 6143 	jnb	acc.4,00102$
                                   6144 ;	pff\source\pff.c:1122: dj->sclust = get_clust(dir);
      002174 C0 04            [24] 6145 	push	ar4
      002176 A8*00            [24] 6146 	mov	r0,_bp
      002178 08               [12] 6147 	inc	r0
      002179 C0 01            [24] 6148 	push	ar1
      00217B E5*00            [12] 6149 	mov	a,_bp
      00217D 24 04            [12] 6150 	add	a,#0x04
      00217F F9               [12] 6151 	mov	r1,a
      002180 74 05            [12] 6152 	mov	a,#0x05
      002182 26               [12] 6153 	add	a,@r0
      002183 F7               [12] 6154 	mov	@r1,a
      002184 E4               [12] 6155 	clr	a
      002185 08               [12] 6156 	inc	r0
      002186 36               [12] 6157 	addc	a,@r0
      002187 09               [12] 6158 	inc	r1
      002188 F7               [12] 6159 	mov	@r1,a
      002189 08               [12] 6160 	inc	r0
      00218A E6               [12] 6161 	mov	a,@r0
      00218B 09               [12] 6162 	inc	r1
      00218C F7               [12] 6163 	mov	@r1,a
      00218D D0 01            [24] 6164 	pop	ar1
      00218F 89 03            [24] 6165 	mov	ar3,r1
      002191 8B 02            [24] 6166 	mov	ar2,r3
      002193 7B 00            [12] 6167 	mov	r3,#0x00
      002195 7C 40            [12] 6168 	mov	r4,#0x40
      002197 8A 82            [24] 6169 	mov	dpl,r2
      002199 8B 83            [24] 6170 	mov	dph,r3
      00219B 8C F0            [24] 6171 	mov	b,r4
      00219D 12r04rFB         [24] 6172 	lcall	_get_clust
      0021A0 AA 82            [24] 6173 	mov	r2,dpl
      0021A2 AB 83            [24] 6174 	mov	r3,dph
      0021A4 AC F0            [24] 6175 	mov	r4,b
      0021A6 FF               [12] 6176 	mov	r7,a
      0021A7 E5*00            [12] 6177 	mov	a,_bp
      0021A9 24 04            [12] 6178 	add	a,#0x04
      0021AB F8               [12] 6179 	mov	r0,a
      0021AC 86 82            [24] 6180 	mov	dpl,@r0
      0021AE 08               [12] 6181 	inc	r0
      0021AF 86 83            [24] 6182 	mov	dph,@r0
      0021B1 08               [12] 6183 	inc	r0
      0021B2 86 F0            [24] 6184 	mov	b,@r0
      0021B4 EA               [12] 6185 	mov	a,r2
      0021B5 12r00r00         [24] 6186 	lcall	__gptrput
      0021B8 A3               [24] 6187 	inc	dptr
      0021B9 EB               [12] 6188 	mov	a,r3
      0021BA 12r00r00         [24] 6189 	lcall	__gptrput
      0021BD A3               [24] 6190 	inc	dptr
      0021BE EC               [12] 6191 	mov	a,r4
      0021BF 12r00r00         [24] 6192 	lcall	__gptrput
      0021C2 A3               [24] 6193 	inc	dptr
      0021C3 EF               [12] 6194 	mov	a,r7
      0021C4 12r00r00         [24] 6195 	lcall	__gptrput
      0021C7 D0 04            [24] 6196 	pop	ar4
      0021C9 80 02            [24] 6197 	sjmp	00105$
      0021CB                       6198 00102$:
                                   6199 ;	pff\source\pff.c:1124: res = FR_NO_FILE;
      0021CB 7C 03            [12] 6200 	mov	r4,#0x03
      0021CD                       6201 00105$:
                                   6202 ;	pff\source\pff.c:1127: if (res == FR_OK) {
      0021CD EC               [12] 6203 	mov	a,r4
      0021CE 70 12            [24] 6204 	jnz	00112$
                                   6205 ;	pff\source\pff.c:1128: res = dir_rewind(dj);			/* Rewind dir */
      0021D0 A8*00            [24] 6206 	mov	r0,_bp
      0021D2 08               [12] 6207 	inc	r0
      0021D3 86 82            [24] 6208 	mov	dpl,@r0
      0021D5 08               [12] 6209 	inc	r0
      0021D6 86 83            [24] 6210 	mov	dph,@r0
      0021D8 08               [12] 6211 	inc	r0
      0021D9 86 F0            [24] 6212 	mov	b,@r0
      0021DB 12r05r7D         [24] 6213 	lcall	_dir_rewind
      0021DE AF 82            [24] 6214 	mov	r7,dpl
      0021E0 8F 04            [24] 6215 	mov	ar4,r7
      0021E2                       6216 00112$:
                                   6217 ;	pff\source\pff.c:1133: return res;
      0021E2 8C 82            [24] 6218 	mov	dpl,r4
                                   6219 ;	pff\source\pff.c:1134: }
      0021E4 85*00 81         [24] 6220 	mov	sp,_bp
      0021E7 D0*00            [24] 6221 	pop	_bp
      0021E9 22               [24] 6222 	ret
                                   6223 ;------------------------------------------------------------
                                   6224 ;Allocation info for local variables in function 'pf_readdir'
                                   6225 ;------------------------------------------------------------
                                   6226 ;fno                       Allocated to stack - _bp -5
                                   6227 ;dj                        Allocated to stack - _bp +1
                                   6228 ;res                       Allocated to registers r4 
                                   6229 ;sp                        Allocated to stack - _bp +4
                                   6230 ;dir                       Allocated to stack - _bp +16
                                   6231 ;fs                        Allocated to registers 
                                   6232 ;sloc0                     Allocated to stack - _bp +52
                                   6233 ;------------------------------------------------------------
                                   6234 ;	pff\source\pff.c:1143: FRESULT pf_readdir (
                                   6235 ;	-----------------------------------------
                                   6236 ;	 function pf_readdir
                                   6237 ;	-----------------------------------------
      0021EA                       6238 _pf_readdir:
      0021EA C0*00            [24] 6239 	push	_bp
      0021EC 85 81*00         [24] 6240 	mov	_bp,sp
      0021EF C0 82            [24] 6241 	push	dpl
      0021F1 C0 83            [24] 6242 	push	dph
      0021F3 C0 F0            [24] 6243 	push	b
      0021F5 E5 81            [12] 6244 	mov	a,sp
      0021F7 24 2C            [12] 6245 	add	a,#0x2c
      0021F9 F5 81            [12] 6246 	mov	sp,a
                                   6247 ;	pff\source\pff.c:1153: if (!fs) {				/* Check file system */
      0021FB 90r00r00         [24] 6248 	mov	dptr,#_FatFs
      0021FE E0               [24] 6249 	movx	a,@dptr
      0021FF F5 F0            [12] 6250 	mov	b,a
      002201 A3               [24] 6251 	inc	dptr
      002202 E0               [24] 6252 	movx	a,@dptr
      002203 45 F0            [12] 6253 	orl	a,b
      002205 70 05            [24] 6254 	jnz	00111$
                                   6255 ;	pff\source\pff.c:1154: res = FR_NOT_ENABLED;
      002207 7C 05            [12] 6256 	mov	r4,#0x05
      002209 02r22rCE         [24] 6257 	ljmp	00112$
      00220C                       6258 00111$:
                                   6259 ;	pff\source\pff.c:1156: dj->fn = sp;
      00220C A8*00            [24] 6260 	mov	r0,_bp
      00220E 08               [12] 6261 	inc	r0
      00220F 74 02            [12] 6262 	mov	a,#0x02
      002211 26               [12] 6263 	add	a,@r0
      002212 FC               [12] 6264 	mov	r4,a
      002213 E4               [12] 6265 	clr	a
      002214 08               [12] 6266 	inc	r0
      002215 36               [12] 6267 	addc	a,@r0
      002216 FB               [12] 6268 	mov	r3,a
      002217 08               [12] 6269 	inc	r0
      002218 86 02            [24] 6270 	mov	ar2,@r0
      00221A E5*00            [12] 6271 	mov	a,_bp
      00221C 24 04            [12] 6272 	add	a,#0x04
      00221E FD               [12] 6273 	mov	r5,a
      00221F 7E 00            [12] 6274 	mov	r6,#0x00
      002221 7F 40            [12] 6275 	mov	r7,#0x40
      002223 8C 82            [24] 6276 	mov	dpl,r4
      002225 8B 83            [24] 6277 	mov	dph,r3
      002227 8A F0            [24] 6278 	mov	b,r2
      002229 ED               [12] 6279 	mov	a,r5
      00222A 12r00r00         [24] 6280 	lcall	__gptrput
      00222D A3               [24] 6281 	inc	dptr
      00222E EE               [12] 6282 	mov	a,r6
      00222F 12r00r00         [24] 6283 	lcall	__gptrput
      002232 A3               [24] 6284 	inc	dptr
      002233 EF               [12] 6285 	mov	a,r7
      002234 12r00r00         [24] 6286 	lcall	__gptrput
                                   6287 ;	pff\source\pff.c:1157: if (!fno) {
      002237 E5*00            [12] 6288 	mov	a,_bp
      002239 24 FB            [12] 6289 	add	a,#0xfb
      00223B F8               [12] 6290 	mov	r0,a
      00223C E6               [12] 6291 	mov	a,@r0
      00223D 08               [12] 6292 	inc	r0
      00223E 46               [12] 6293 	orl	a,@r0
      00223F 70 15            [24] 6294 	jnz	00108$
                                   6295 ;	pff\source\pff.c:1158: res = dir_rewind(dj);
      002241 A8*00            [24] 6296 	mov	r0,_bp
      002243 08               [12] 6297 	inc	r0
      002244 86 82            [24] 6298 	mov	dpl,@r0
      002246 08               [12] 6299 	inc	r0
      002247 86 83            [24] 6300 	mov	dph,@r0
      002249 08               [12] 6301 	inc	r0
      00224A 86 F0            [24] 6302 	mov	b,@r0
      00224C 12r05r7D         [24] 6303 	lcall	_dir_rewind
      00224F AF 82            [24] 6304 	mov	r7,dpl
      002251 8F 04            [24] 6305 	mov	ar4,r7
      002253 02r22rCE         [24] 6306 	ljmp	00112$
      002256                       6307 00108$:
                                   6308 ;	pff\source\pff.c:1160: res = dir_read(dj, dir);	/* Get current directory item */
      002256 E5*00            [12] 6309 	mov	a,_bp
      002258 24 10            [12] 6310 	add	a,#0x10
      00225A FF               [12] 6311 	mov	r7,a
      00225B FB               [12] 6312 	mov	r3,a
      00225C 7D 00            [12] 6313 	mov	r5,#0x00
      00225E 7E 40            [12] 6314 	mov	r6,#0x40
      002260 C0 07            [24] 6315 	push	ar7
      002262 C0 03            [24] 6316 	push	ar3
      002264 C0 05            [24] 6317 	push	ar5
      002266 C0 06            [24] 6318 	push	ar6
      002268 A8*00            [24] 6319 	mov	r0,_bp
      00226A 08               [12] 6320 	inc	r0
      00226B 86 82            [24] 6321 	mov	dpl,@r0
      00226D 08               [12] 6322 	inc	r0
      00226E 86 83            [24] 6323 	mov	dph,@r0
      002270 08               [12] 6324 	inc	r0
      002271 86 F0            [24] 6325 	mov	b,@r0
      002273 12r0Br73         [24] 6326 	lcall	_dir_read
      002276 AE 82            [24] 6327 	mov	r6,dpl
      002278 15 81            [12] 6328 	dec	sp
      00227A 15 81            [12] 6329 	dec	sp
      00227C 15 81            [12] 6330 	dec	sp
      00227E D0 07            [24] 6331 	pop	ar7
      002280 8E 04            [24] 6332 	mov	ar4,r6
                                   6333 ;	pff\source\pff.c:1161: if (res == FR_NO_FILE) res = FR_OK;
      002282 BC 03 02         [24] 6334 	cjne	r4,#0x03,00102$
      002285 7C 00            [12] 6335 	mov	r4,#0x00
      002287                       6336 00102$:
                                   6337 ;	pff\source\pff.c:1162: if (res == FR_OK) {				/* A valid entry is found */
      002287 EC               [12] 6338 	mov	a,r4
                                   6339 ;	pff\source\pff.c:1163: get_fileinfo(dj, dir, fno);	/* Get the object information */
      002288 70 44            [24] 6340 	jnz	00112$
      00228A FE               [12] 6341 	mov	r6,a
      00228B 7D 40            [12] 6342 	mov	r5,#0x40
      00228D E5*00            [12] 6343 	mov	a,_bp
      00228F 24 FB            [12] 6344 	add	a,#0xfb
      002291 F8               [12] 6345 	mov	r0,a
      002292 E6               [12] 6346 	mov	a,@r0
      002293 C0 E0            [24] 6347 	push	acc
      002295 08               [12] 6348 	inc	r0
      002296 E6               [12] 6349 	mov	a,@r0
      002297 C0 E0            [24] 6350 	push	acc
      002299 08               [12] 6351 	inc	r0
      00229A E6               [12] 6352 	mov	a,@r0
      00229B C0 E0            [24] 6353 	push	acc
      00229D C0 07            [24] 6354 	push	ar7
      00229F C0 06            [24] 6355 	push	ar6
      0022A1 C0 05            [24] 6356 	push	ar5
      0022A3 A8*00            [24] 6357 	mov	r0,_bp
      0022A5 08               [12] 6358 	inc	r0
      0022A6 86 82            [24] 6359 	mov	dpl,@r0
      0022A8 08               [12] 6360 	inc	r0
      0022A9 86 83            [24] 6361 	mov	dph,@r0
      0022AB 08               [12] 6362 	inc	r0
      0022AC 86 F0            [24] 6363 	mov	b,@r0
      0022AE 12r0ErBF         [24] 6364 	lcall	_get_fileinfo
      0022B1 E5 81            [12] 6365 	mov	a,sp
      0022B3 24 FA            [12] 6366 	add	a,#0xfa
      0022B5 F5 81            [12] 6367 	mov	sp,a
                                   6368 ;	pff\source\pff.c:1164: res = dir_next(dj);			/* Increment read index for next */
      0022B7 A8*00            [24] 6369 	mov	r0,_bp
      0022B9 08               [12] 6370 	inc	r0
      0022BA 86 82            [24] 6371 	mov	dpl,@r0
      0022BC 08               [12] 6372 	inc	r0
      0022BD 86 83            [24] 6373 	mov	dph,@r0
      0022BF 08               [12] 6374 	inc	r0
      0022C0 86 F0            [24] 6375 	mov	b,@r0
      0022C2 12r07r05         [24] 6376 	lcall	_dir_next
      0022C5 AF 82            [24] 6377 	mov	r7,dpl
      0022C7 8F 04            [24] 6378 	mov	ar4,r7
                                   6379 ;	pff\source\pff.c:1165: if (res == FR_NO_FILE) res = FR_OK;
      0022C9 BC 03 02         [24] 6380 	cjne	r4,#0x03,00112$
      0022CC 7C 00            [12] 6381 	mov	r4,#0x00
      0022CE                       6382 00112$:
                                   6383 ;	pff\source\pff.c:1170: return res;
      0022CE 8C 82            [24] 6384 	mov	dpl,r4
                                   6385 ;	pff\source\pff.c:1171: }
      0022D0 85*00 81         [24] 6386 	mov	sp,_bp
      0022D3 D0*00            [24] 6387 	pop	_bp
      0022D5 22               [24] 6388 	ret
                                   6389 	.area CSEG    (CODE)
                                   6390 	.area CONST   (CODE)
                                   6391 	.area XINIT   (CODE)
                                   6392 	.area CABS    (ABS,CODE)
