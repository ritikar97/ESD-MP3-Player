
wav_player-beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ede8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800ef78  0800ef78  0001ef78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1b8  0800f1b8  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1b8  0800f1b8  0001f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1c0  0800f1c0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1c0  0800f1c0  0001f1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1c4  0800f1c4  0001f1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800f1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00001d78  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20001e38  20001e38  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ebf  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005392  00000000  00000000  00042faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00048348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001878  00000000  00000000  00049df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028143  00000000  00000000  0004b668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026926  00000000  00000000  000737ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d587e  00000000  00000000  0009a0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f94f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000730c  00000000  00000000  0016f9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef60 	.word	0x0800ef60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800ef60 	.word	0x0800ef60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <CS43_write_register>:
 * @param data: The one-byte data to be used
 * @note This function uses the ST I2C library to transfer
 * data in the master mode.
 */
static void CS43_write_register(uint8_t reg, uint8_t data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
    uint8_t wData[2];
    wData[0] = reg;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	733b      	strb	r3, [r7, #12]
    wData[1] = data;
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, wData,
 800058c:	f107 020c 	add.w	r2, r7, #12
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2302      	movs	r3, #2
 8000596:	2194      	movs	r1, #148	; 0x94
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <CS43_write_register+0x34>)
 800059a:	f004 f877 	bl	800468c <HAL_I2C_Master_Transmit>
    		2, TRANSFER_TIMEOUT);
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000dc 	.word	0x200000dc

080005ac <CS43_read_register>:
 * @return data: The one-byte I2C transfer data
 * @note This function uses the ST I2C library to transfer
 * data in the master, full-duplex mode.
 */
static uint8_t CS43_read_register(uint8_t reg)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t rData[2];
	uint8_t data;
	rData[0] = reg;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, rData, 1,
 80005ba:	f107 020c 	add.w	r2, r7, #12
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	2194      	movs	r1, #148	; 0x94
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <CS43_read_register+0x3c>)
 80005c8:	f004 f860 	bl	800468c <HAL_I2C_Master_Transmit>
			TRANSFER_TIMEOUT);
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, &data, 1,
 80005cc:	f107 020b 	add.w	r2, r7, #11
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	2194      	movs	r1, #148	; 0x94
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <CS43_read_register+0x3c>)
 80005da:	f004 f955 	bl	8004888 <HAL_I2C_Master_Receive>
			TRANSFER_TIMEOUT);
	return data;
 80005de:	7afb      	ldrb	r3, [r7, #11]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000dc 	.word	0x200000dc

080005ec <CS43_init>:
 * 12.Set the passthrough A&B volumes to maximum (+12dB)
 * 13.Set the default master volume to be 0dB
 */

void CS43_init(I2C_HandleTypeDef i2c_handle)
{
 80005ec:	b084      	sub	sp, #16
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b082      	sub	sp, #8
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	f107 0c10 	add.w	ip, r7, #16
 80005f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t data;
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005fc:	4b66      	ldr	r3, [pc, #408]	; (8000798 <CS43_init+0x1ac>)
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000604:	4b64      	ldr	r3, [pc, #400]	; (8000798 <CS43_init+0x1ac>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	4b63      	ldr	r3, [pc, #396]	; (8000798 <CS43_init+0x1ac>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000612:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	4860      	ldr	r0, [pc, #384]	; (800079c <CS43_init+0x1b0>)
 800061a:	f002 fa9d 	bl	8002b58 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800061e:	4b60      	ldr	r3, [pc, #384]	; (80007a0 <CS43_init+0x1b4>)
 8000620:	4618      	mov	r0, r3
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	2254      	movs	r2, #84	; 0x54
 8000628:	4619      	mov	r1, r3
 800062a:	f00e f823 	bl	800e674 <memcpy>
	//(2): Power down
	data = 0x01;
 800062e:	2301      	movs	r3, #1
 8000630:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(POWER_CONTROL1,data);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4619      	mov	r1, r3
 8000636:	2002      	movs	r0, #2
 8000638:	f7ff ff9c 	bl	8000574 <CS43_write_register>
	//(3): Enable Right and Left headphones
	data =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	71fb      	strb	r3, [r7, #7]
	data |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	71fb      	strb	r3, [r7, #7]
	data |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f043 030c 	orr.w	r3, r3, #12
 800064e:	71fb      	strb	r3, [r7, #7]
	data |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f043 0303 	orr.w	r3, r3, #3
 8000656:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(POWER_CONTROL2,data);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4619      	mov	r1, r3
 800065c:	2004      	movs	r0, #4
 800065e:	f7ff ff89 	bl	8000574 <CS43_write_register>
	//(4): Automatic clock detection
	data = (1 << 7);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(CLOCKING_CONTROL,data);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4619      	mov	r1, r3
 800066a:	2005      	movs	r0, #5
 800066c:	f7ff ff82 	bl	8000574 <CS43_write_register>
	//(5): Interface control 1
	data = CS43_read_register(INTERFACE_CONTROL1);
 8000670:	2006      	movs	r0, #6
 8000672:	f7ff ff9b 	bl	80005ac <CS43_read_register>
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	data &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	71fb      	strb	r3, [r7, #7]
	data &= ~(1 << 7);  // Slave
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000688:	71fb      	strb	r3, [r7, #7]
	data &= ~(1 << 6);  // Clock polarity: Not inverted
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000690:	71fb      	strb	r3, [r7, #7]
	data &= ~(1 << 4);  // No DSP mode
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f023 0310 	bic.w	r3, r3, #16
 8000698:	71fb      	strb	r3, [r7, #7]
	data &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f023 0304 	bic.w	r3, r3, #4
 80006a0:	71fb      	strb	r3, [r7, #7]
	data |= (1 << 2);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	71fb      	strb	r3, [r7, #7]

	data |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f043 0303 	orr.w	r3, r3, #3
 80006b0:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(INTERFACE_CONTROL1,data);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff ff5c 	bl	8000574 <CS43_write_register>
	//(6): Passthrough A settings
	data = CS43_read_register(PASSTHROUGH_A);
 80006bc:	2008      	movs	r0, #8
 80006be:	f7ff ff75 	bl	80005ac <CS43_read_register>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;      // Bits [4-7] are reserved
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f023 030f 	bic.w	r3, r3, #15
 80006cc:	71fb      	strb	r3, [r7, #7]
	data |=  (1 << 0); // Use AIN1A as source for passthrough
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PASSTHROUGH_A, data);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4619      	mov	r1, r3
 80006da:	2008      	movs	r0, #8
 80006dc:	f7ff ff4a 	bl	8000574 <CS43_write_register>
	//(7): Passthrough B settings
	data = CS43_read_register(PASSTHROUGH_B);
 80006e0:	2009      	movs	r0, #9
 80006e2:	f7ff ff63 	bl	80005ac <CS43_read_register>
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	data &= 0xF0;      // Bits [4-7] are reserved
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	71fb      	strb	r3, [r7, #7]
	data |=  (1 << 0); // Use AIN1B as source for passthrough
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PASSTHROUGH_B, data);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2009      	movs	r0, #9
 8000700:	f7ff ff38 	bl	8000574 <CS43_write_register>
	//(8): Miscellaneous register settings
	data = CS43_read_register(MISCELLANEOUS_CONTRLS);
 8000704:	200e      	movs	r0, #14
 8000706:	f7ff ff51 	bl	80005ac <CS43_read_register>
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	data = 0x02;
 800070e:	2302      	movs	r3, #2
 8000710:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(MISCELLANEOUS_CONTRLS, data);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	200e      	movs	r0, #14
 8000718:	f7ff ff2c 	bl	8000574 <CS43_write_register>

	// 9. Configure the analog gain to be 1.143
	data = 0xE0;
 800071c:	23e0      	movs	r3, #224	; 0xe0
 800071e:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PLAYBACK_CONTROL1, data);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4619      	mov	r1, r3
 8000724:	200d      	movs	r0, #13
 8000726:	f7ff ff25 	bl	8000574 <CS43_write_register>

	//(9): Unmute headphone and speaker
	data = CS43_read_register(PLAYBACK_CONTROL2);
 800072a:	200f      	movs	r0, #15
 800072c:	f7ff ff3e 	bl	80005ac <CS43_read_register>
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
	data = 0x00;
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PLAYBACK_CONTROL2,data);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4619      	mov	r1, r3
 800073c:	200f      	movs	r0, #15
 800073e:	f7ff ff19 	bl	8000574 <CS43_write_register>
	//(10): Set volume to default (+12dB)
	data = 0x18;
 8000742:	2318      	movs	r3, #24
 8000744:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PCM_VOLUME_A,data);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4619      	mov	r1, r3
 800074a:	201a      	movs	r0, #26
 800074c:	f7ff ff12 	bl	8000574 <CS43_write_register>
	CS43_write_register(PCM_VOLUME_B,data);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4619      	mov	r1, r3
 8000754:	201b      	movs	r0, #27
 8000756:	f7ff ff0d 	bl	8000574 <CS43_write_register>

	//(11): Set the passthrough volume to default (+12dB),
	data = 0x7F;
 800075a:	237f      	movs	r3, #127	; 0x7f
 800075c:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PASSTHROUGH_VOLUME_A,data);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4619      	mov	r1, r3
 8000762:	2014      	movs	r0, #20
 8000764:	f7ff ff06 	bl	8000574 <CS43_write_register>
	CS43_write_register(PASSTHROUGH_VOLUME_B,data);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4619      	mov	r1, r3
 800076c:	2015      	movs	r0, #21
 800076e:	f7ff ff01 	bl	8000574 <CS43_write_register>

	//(12): Maximize the master volume
	data = 0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(MASTER_A_VOL,data);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4619      	mov	r1, r3
 800077a:	2020      	movs	r0, #32
 800077c:	f7ff fefa 	bl	8000574 <CS43_write_register>
	CS43_write_register(MASTER_B_VOL,data);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	2021      	movs	r0, #33	; 0x21
 8000786:	f7ff fef5 	bl	8000574 <CS43_write_register>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000794:	b004      	add	sp, #16
 8000796:	4770      	bx	lr
 8000798:	20000198 	.word	0x20000198
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	200000dc 	.word	0x200000dc

080007a4 <CS43_set_volume>:
 * @param volume - The target volume level
 * @note The volume level is configured based on the
 * boundary check.
 */
void CS43_set_volume(uint8_t volume)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  /* Set the Master volume registers */
  if((volume >= 231) && (volume < 256)){
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2be6      	cmp	r3, #230	; 0xe6
 80007b2:	d903      	bls.n	80007bc <CS43_set_volume+0x18>
	  volume -= 231;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3319      	adds	r3, #25
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e002      	b.n	80007c2 <CS43_set_volume+0x1e>
  }
  else{
	  volume += 25;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3319      	adds	r3, #25
 80007c0:	71fb      	strb	r3, [r7, #7]
  }

  CS43_write_register(HEADPHONE_A_VOL, volume);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2022      	movs	r0, #34	; 0x22
 80007c8:	f7ff fed4 	bl	8000574 <CS43_write_register>
  CS43_write_register(HEADPHONE_B_VOL, volume);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2023      	movs	r0, #35	; 0x23
 80007d2:	f7ff fecf 	bl	8000574 <CS43_write_register>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <CS43_start>:
 * 3. Write ‘1’b to bit 7 in register 0x32.
 * 4. Write ‘0’b to bit 7 in register 0x32.
 * 5. Write 0x00 to register 0x00.
 */
void CS43_start(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
	uint8_t data;
	// Unmute the DAC’s and PWM outputs
	CS43_write_register(POWER_CONTROL2, 0xFF);
 80007e4:	21ff      	movs	r1, #255	; 0xff
 80007e6:	2004      	movs	r0, #4
 80007e8:	f7ff fec4 	bl	8000574 <CS43_write_register>
	CS43_write_register(HEADPHONE_A_VOL,0x00);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2022      	movs	r0, #34	; 0x22
 80007f0:	f7ff fec0 	bl	8000574 <CS43_write_register>
	CS43_write_register(HEADPHONE_B_VOL,0x00);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2023      	movs	r0, #35	; 0x23
 80007f8:	f7ff febc 	bl	8000574 <CS43_write_register>

	CS43_write_register(POWER_CONTROL2, 0xAF);
 80007fc:	21af      	movs	r1, #175	; 0xaf
 80007fe:	2004      	movs	r0, #4
 8000800:	f7ff feb8 	bl	8000574 <CS43_write_register>
	// Write 0x99 to register 0x00.
	CS43_write_register(CONFIG_00, 0x99);
 8000804:	2199      	movs	r1, #153	; 0x99
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff feb4 	bl	8000574 <CS43_write_register>
	// Write 0x80 to register 0x47.
	CS43_write_register(CONFIG_47, 0x80);
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	2047      	movs	r0, #71	; 0x47
 8000810:	f7ff feb0 	bl	8000574 <CS43_write_register>
	// Write '1'b to bit 7 in register 0x32.
	data = CS43_read_register(CONFIG_32);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f7ff fec9 	bl	80005ac <CS43_read_register>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
	data |= 0x80;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000824:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(CONFIG_32, data);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4619      	mov	r1, r3
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f7ff fea2 	bl	8000574 <CS43_write_register>
	// Write '0'b to bit 7 in register 0x32.
	data = CS43_read_register(CONFIG_32);
 8000830:	2032      	movs	r0, #50	; 0x32
 8000832:	f7ff febb 	bl	80005ac <CS43_read_register>
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	data &= ~(0x80);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000840:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(CONFIG_32, data);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4619      	mov	r1, r3
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f7ff fe94 	bl	8000574 <CS43_write_register>
	// Write 0x00 to register 0x00.
	CS43_write_register(CONFIG_00, 0x00);
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe90 	bl	8000574 <CS43_write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	CS43_write_register(POWER_CONTROL1, 0x9E);
 8000854:	219e      	movs	r1, #158	; 0x9e
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fe8c 	bl	8000574 <CS43_write_register>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <CS43_stop>:
 * 	1. Mute the DAC’s and PWM outputs.
 * 	2. Disable soft ramp and zero cross volume transitions.
 * 	3. Set the “Power Ctl 1” register (0x02) to 0x9F.
 */
void CS43_stop(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  // Mute the DAC’s and PWM outputs
  CS43_write_register(POWER_CONTROL2, 0xFF);
 8000868:	21ff      	movs	r1, #255	; 0xff
 800086a:	2004      	movs	r0, #4
 800086c:	f7ff fe82 	bl	8000574 <CS43_write_register>
  CS43_write_register(HEADPHONE_A_VOL,0x01);
 8000870:	2101      	movs	r1, #1
 8000872:	2022      	movs	r0, #34	; 0x22
 8000874:	f7ff fe7e 	bl	8000574 <CS43_write_register>
  CS43_write_register(HEADPHONE_B_VOL,0x01);
 8000878:	2101      	movs	r1, #1
 800087a:	2023      	movs	r0, #35	; 0x23
 800087c:	f7ff fe7a 	bl	8000574 <CS43_write_register>
  // Disable soft ramp and zero cross volume transitions.
  CS43_write_register(MISCELLANEOUS_CONTRLS, 0x04);
 8000880:	2104      	movs	r1, #4
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe76 	bl	8000574 <CS43_write_register>
  // Set the “Power Ctl 1” register (0x02) to 0x9F
  CS43_write_register(POWER_CONTROL1, 0x9F);
 8000888:	219f      	movs	r1, #159	; 0x9f
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff fe72 	bl	8000574 <CS43_write_register>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <delay_us>:
* Local Function Helper Definition
****************************************/

extern TIM_HandleTypeDef htim1;
static void delay_us(uint16_t us)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <delay_us+0x30>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 80008a6:	bf00      	nop
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <delay_us+0x30>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3f9      	bcc.n	80008a8 <delay_us+0x14>
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000240 	.word	0x20000240

080008c8 <lcd_write>:
 * @brief Send raw data to the LCD controller.
 * @param data: raw data to be sent, should be only 4-bit long
 * @param rs: the RS signal for data/cmd.
 */
static void lcd_write(char data, int rs)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
	// enable the LCD
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2108      	movs	r1, #8
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <lcd_write+0x98>)
 80008da:	f002 f93d 	bl	8002b58 <HAL_GPIO_WritePin>
	// set the delay between EN pin to be 60 uS to accommodate
	// the system clock
	delay_us(60);
 80008de:	203c      	movs	r0, #60	; 0x3c
 80008e0:	f7ff ffd8 	bl	8000894 <delay_us>

	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	2102      	movs	r1, #2
 80008ec:	481c      	ldr	r0, [pc, #112]	; (8000960 <lcd_write+0x98>)
 80008ee:	f002 f933 	bl	8002b58 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	// use D[7:4] to transfer data
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	08db      	lsrs	r3, r3, #3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	4817      	ldr	r0, [pc, #92]	; (8000960 <lcd_write+0x98>)
 8000904:	f002 f928 	bl	8002b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <lcd_write+0x98>)
 800091a:	f002 f91d 	bl	8002b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	2120      	movs	r1, #32
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <lcd_write+0x98>)
 8000930:	f002 f912 	bl	8002b58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	2110      	movs	r1, #16
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <lcd_write+0x98>)
 8000942:	f002 f909 	bl	8002b58 <HAL_GPIO_WritePin>

	// disable the LCD
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <lcd_write+0x98>)
 800094c:	f002 f904 	bl	8002b58 <HAL_GPIO_WritePin>
	delay_us(60);
 8000950:	203c      	movs	r0, #60	; 0x3c
 8000952:	f7ff ff9f 	bl	8000894 <delay_us>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <lcd_send_cmd>:
 * @brief Send commands to the LCD controller.
 * @param cmd: the command byte to be sent
 * @note RS must be 0 while sending command
 */
static void lcd_send_cmd (char cmd)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    /* send upper 4-bit first */
	lcd_write((cmd>>4)&0x0f,0);
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	091b      	lsrs	r3, r3, #4
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ffa6 	bl	80008c8 <lcd_write>
    /* send Lower 4-bit */
	lcd_write((cmd)&0x0f, 0);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ff9e 	bl	80008c8 <lcd_write>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <lcd_send_data>:
 * @brief Send data to the LCD controller.
 * @param cmd: the command byte to be sent
 * @note RS must be 1 while sending command
 */
static void lcd_send_data (char data)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	/* send upper 4-bit first */
	lcd_write((data>>4)&0x0f,1);
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff8e 	bl	80008c8 <lcd_write>
	/* send Lower 4-bit */
	lcd_write((data)&0x0f, 1);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff86 	bl	80008c8 <lcd_write>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <lcd_clear>:
/**
 * @brief Clear the LCD screen
 * @note Send 0x01 to clear the LCD screen
 */
void lcd_clear (void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff ffcb 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f001 f988 	bl	8001ce4 <HAL_Delay>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <lcd_update_cur>:
 * @brief Update the cursor position
 * @param row: the destination row number
 * @param col: the destination col number
 */
void lcd_update_cur(int row, int col)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	col |= (row == 0) ? 0x80 : 0xC0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <lcd_update_cur+0x14>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	e000      	b.n	80009ee <lcd_update_cur+0x16>
 80009ec:	23c0      	movs	r3, #192	; 0xc0
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	603b      	str	r3, [r7, #0]
    lcd_send_cmd(col);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffb3 	bl	8000964 <lcd_send_cmd>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <lcd_init>:
 * - clear the display
 * - set the cursor to be incremental and no shifting
 * - display on and blink the cursor
 */
void lcd_init (void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
	// reset the controller

	// wait for >40ms
	HAL_Delay(150);
 8000a0a:	2096      	movs	r0, #150	; 0x96
 8000a0c:	f001 f96a 	bl	8001ce4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a10:	2030      	movs	r0, #48	; 0x30
 8000a12:	f7ff ffa7 	bl	8000964 <lcd_send_cmd>
	// wait for >4.1ms
	HAL_Delay(15);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f001 f964 	bl	8001ce4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a1c:	2030      	movs	r0, #48	; 0x30
 8000a1e:	f7ff ffa1 	bl	8000964 <lcd_send_cmd>
	// wait for >100us
	HAL_Delay(5);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f001 f95e 	bl	8001ce4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000a28:	2030      	movs	r0, #48	; 0x30
 8000a2a:	f7ff ff9b 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(30);
 8000a2e:	201e      	movs	r0, #30
 8000a30:	f001 f958 	bl	8001ce4 <HAL_Delay>
	// 4bit mode
	lcd_send_cmd (0x20);
 8000a34:	2020      	movs	r0, #32
 8000a36:	f7ff ff95 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(30);
 8000a3a:	201e      	movs	r0, #30
 8000a3c:	f001 f952 	bl	8001ce4 <HAL_Delay>
	// initialize the LCD controller

	// DL = 0 (4 bit mode),
	// N = 1 (2 line display)
	// F = 0 (5x8 characters)
	lcd_send_cmd (0x28);
 8000a40:	2028      	movs	r0, #40	; 0x28
 8000a42:	f7ff ff8f 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(15);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f001 f94c 	bl	8001ce4 <HAL_Delay>
	// Display off control
	// D = 0
	// C = 0
	// B = 0
	lcd_send_cmd (0x08);
 8000a4c:	2008      	movs	r0, #8
 8000a4e:	f7ff ff89 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(15);
 8000a52:	200f      	movs	r0, #15
 8000a54:	f001 f946 	bl	8001ce4 <HAL_Delay>
	// clear display
	lcd_send_cmd (0x01);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff ff83 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(15);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f001 f940 	bl	8001ce4 <HAL_Delay>
	// Entry mode set
	// I/D = 1 (increment cursor)
	// S = 0 (no shift)
	lcd_send_cmd (0x06);
 8000a64:	2006      	movs	r0, #6
 8000a66:	f7ff ff7d 	bl	8000964 <lcd_send_cmd>
	HAL_Delay(15);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f001 f93a 	bl	8001ce4 <HAL_Delay>
	// Display on/off control
	// D = 1
	// C = 0
	// B = 0
	//(Cursor and blink, last two bits)
	lcd_send_cmd (0x0C);
 8000a70:	200c      	movs	r0, #12
 8000a72:	f7ff ff77 	bl	8000964 <lcd_send_cmd>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <lcd_write_string>:
/**
 * @brief Write a string to the LCD
 * @param str: the string to be displayed
 */
void lcd_write_string (char *str)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	while (*str){
 8000a82:	e006      	b.n	8000a92 <lcd_write_string+0x18>
		lcd_send_data(*str++);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff81 	bl	8000994 <lcd_send_data>
	while (*str){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f4      	bne.n	8000a84 <lcd_write_string+0xa>
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <display_song_info>:
volatile uint8_t volume = 200;
volatile uint8_t song_idx = DEFAULT_SONG_IDX;
volatile song_mov_t song_mov = CURR_SONG;

static void display_song_info(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
	lcd_clear();
 8000aaa:	f7ff ff8b 	bl	80009c4 <lcd_clear>
	HAL_Delay(500);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f001 f917 	bl	8001ce4 <HAL_Delay>
	lcd_update_cur(0, 0);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff ff8d 	bl	80009d8 <lcd_update_cur>
	char str[64];
	sprintf(str,"Song:%s", songs[song_idx]);
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <display_song_info+0x64>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <display_song_info+0x68>)
 8000ac8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000acc:	463b      	mov	r3, r7
 8000ace:	4910      	ldr	r1, [pc, #64]	; (8000b10 <display_song_info+0x6c>)
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00d fed5 	bl	800e880 <siprintf>
	lcd_write_string(str);
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffce 	bl	8000a7a <lcd_write_string>
	lcd_update_cur(1, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff ff79 	bl	80009d8 <lcd_update_cur>
	sprintf(str,"Volume(dB):%d", volume);
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <display_song_info+0x70>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	463b      	mov	r3, r7
 8000af0:	4909      	ldr	r1, [pc, #36]	; (8000b18 <display_song_info+0x74>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00d fec4 	bl	800e880 <siprintf>
	lcd_write_string(str);
 8000af8:	463b      	mov	r3, r7
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffbd 	bl	8000a7a <lcd_write_string>
}
 8000b00:	bf00      	nop
 8000b02:	3740      	adds	r7, #64	; 0x40
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000002d 	.word	0x2000002d
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	0800effc 	.word	0x0800effc
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	0800f004 	.word	0x0800f004

08000b1c <update_volume_display>:

static void update_volume_display(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
	char str[32];
	lcd_update_cur(1, 0);
 8000b22:	2100      	movs	r1, #0
 8000b24:	2001      	movs	r0, #1
 8000b26:	f7ff ff57 	bl	80009d8 <lcd_update_cur>
	sprintf(str,"Volume(dB):%d", volume);
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <update_volume_display+0x30>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	463b      	mov	r3, r7
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <update_volume_display+0x34>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00d fea2 	bl	800e880 <siprintf>
	lcd_write_string(str);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff9b 	bl	8000a7a <lcd_write_string>
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000002c 	.word	0x2000002c
 8000b50:	0800f004 	.word	0x0800f004

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b095      	sub	sp, #84	; 0x54
 8000b58:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f001 f851 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f919 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f000 fa77 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b66:	f000 fa55 	bl	8001014 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b6a:	f000 f9a7 	bl	8000ebc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b6e:	f000 f9d3 	bl	8000f18 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000b72:	f007 fd85 	bl	8008680 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000b76:	f00d fa31 	bl	800dfdc <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000b7a:	f000 f9fb 	bl	8000f74 <MX_TIM1_Init>
  MX_DAC_Init();
 8000b7e:	f000 f973 	bl	8000e68 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000b82:	4878      	ldr	r0, [pc, #480]	; (8000d64 <main+0x210>)
 8000b84:	f006 fab0 	bl	80070e8 <HAL_TIM_Base_Start>

  lcd_init ();
 8000b88:	f7ff ff3d 	bl	8000a06 <lcd_init>
  lcd_clear();
 8000b8c:	f7ff ff1a 	bl	80009c4 <lcd_clear>
  HAL_Delay(1000);
 8000b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b94:	f001 f8a6 	bl	8001ce4 <HAL_Delay>
  lcd_update_cur(0, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff1c 	bl	80009d8 <lcd_update_cur>
  lcd_write_string("MINI ");
 8000ba0:	4871      	ldr	r0, [pc, #452]	; (8000d68 <main+0x214>)
 8000ba2:	f7ff ff6a 	bl	8000a7a <lcd_write_string>
  lcd_write_string("WAV Player ");
 8000ba6:	4871      	ldr	r0, [pc, #452]	; (8000d6c <main+0x218>)
 8000ba8:	f7ff ff67 	bl	8000a7a <lcd_write_string>
  HAL_Delay(5000);
 8000bac:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bb0:	f001 f898 	bl	8001ce4 <HAL_Delay>
  lcd_clear();
 8000bb4:	f7ff ff06 	bl	80009c4 <lcd_clear>

  CS43_init(hi2c1);
 8000bb8:	4c6d      	ldr	r4, [pc, #436]	; (8000d70 <main+0x21c>)
 8000bba:	4668      	mov	r0, sp
 8000bbc:	f104 0310 	add.w	r3, r4, #16
 8000bc0:	2244      	movs	r2, #68	; 0x44
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f00d fd56 	bl	800e674 <memcpy>
 8000bc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bcc:	f7ff fd0e 	bl	80005ec <CS43_init>
 // audio_setHandle(&hi2s3);
  wavPlayer_reset();
 8000bd0:	f000 fea2 	bl	8001918 <wavPlayer_reset>

  bool isSdCardMounted = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71bb      	strb	r3, [r7, #6]
  bool start_song = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	717b      	strb	r3, [r7, #5]

  song_idx = DEFAULT_SONG_IDX;
 8000be0:	4b64      	ldr	r3, [pc, #400]	; (8000d74 <main+0x220>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000be6:	f00d fa1f 	bl	800e028 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000bea:	4b63      	ldr	r3, [pc, #396]	; (8000d78 <main+0x224>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d106      	bne.n	8000c00 <main+0xac>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf8:	4860      	ldr	r0, [pc, #384]	; (8000d7c <main+0x228>)
 8000bfa:	f001 ffad 	bl	8002b58 <HAL_GPIO_WritePin>
 8000bfe:	e009      	b.n	8000c14 <main+0xc0>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000c00:	4b5d      	ldr	r3, [pc, #372]	; (8000d78 <main+0x224>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d105      	bne.n	8000c14 <main+0xc0>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	485b      	ldr	r0, [pc, #364]	; (8000d7c <main+0x228>)
 8000c10:	f001 ffa2 	bl	8002b58 <HAL_GPIO_WritePin>
    }

    if(Appli_state == APPLICATION_READY)
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <main+0x224>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d1e4      	bne.n	8000be6 <main+0x92>
    {
    	if(!isSdCardMounted)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f083 0301 	eor.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <main+0xe2>
    	{
    		isSdCardMounted = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	71fb      	strb	r3, [r7, #7]
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4954      	ldr	r1, [pc, #336]	; (8000d80 <main+0x22c>)
 8000c30:	4854      	ldr	r0, [pc, #336]	; (8000d84 <main+0x230>)
 8000c32:	f00c fb83 	bl	800d33c <f_mount>
    	}

    	int button_pressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c36:	2101      	movs	r1, #1
 8000c38:	4853      	ldr	r0, [pc, #332]	; (8000d88 <main+0x234>)
 8000c3a:	f001 ff75 	bl	8002b28 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	603b      	str	r3, [r7, #0]
    	if(button_pressed){
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <main+0xf8>
    		start_song = 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	717b      	strb	r3, [r7, #5]
    	}

    	if(start_song)
 8000c4c:	797b      	ldrb	r3, [r7, #5]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0c9      	beq.n	8000be6 <main+0x92>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	4848      	ldr	r0, [pc, #288]	; (8000d7c <main+0x228>)
 8000c5a:	f001 ff7d 	bl	8002b58 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 8000c5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c62:	f001 f83f 	bl	8001ce4 <HAL_Delay>
    		if(wavPlayer_openFile(songs[song_idx])){
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <main+0x220>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <main+0x238>)
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fe67 	bl	8001948 <wavPlayer_openFile>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d052      	beq.n	8000d26 <main+0x1d2>
    			display_song_info();
 8000c80:	f7ff ff10 	bl	8000aa4 <display_song_info>
				wavPlayer_play();
 8000c84:	f000 fe8a 	bl	800199c <wavPlayer_play>
			}

    		while(!is_wavPlayer_finished_Playing())
 8000c88:	e04d      	b.n	8000d26 <main+0x1d2>
    		{
    			if((song_mov == PREV_SONG) || (song_mov == NEXT_SONG)){
 8000c8a:	4b41      	ldr	r3, [pc, #260]	; (8000d90 <main+0x23c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d004      	beq.n	8000c9e <main+0x14a>
 8000c94:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <main+0x23c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d116      	bne.n	8000ccc <main+0x178>
    				// reset song_mov
    				song_mov = CURR_SONG;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <main+0x23c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    				wavPlayer_stop();
 8000ca4:	f000 ff20 	bl	8001ae8 <wavPlayer_stop>
    				if(wavPlayer_openFile(songs[song_idx])){
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <main+0x220>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <main+0x238>)
 8000cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fe46 	bl	8001948 <wavPlayer_openFile>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d031      	beq.n	8000d26 <main+0x1d2>
    					display_song_info();
 8000cc2:	f7ff feef 	bl	8000aa4 <display_song_info>
    					wavPlayer_play();
 8000cc6:	f000 fe69 	bl	800199c <wavPlayer_play>
    				if(wavPlayer_openFile(songs[song_idx])){
 8000cca:	e02c      	b.n	8000d26 <main+0x1d2>
    				}
    			}
    			else{
    				wavPlayer_proceed();
 8000ccc:	f000 fe9c 	bl	8001a08 <wavPlayer_proceed>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	482d      	ldr	r0, [pc, #180]	; (8000d88 <main+0x234>)
 8000cd4:	f001 ff28 	bl	8002b28 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d023      	beq.n	8000d26 <main+0x1d2>
					{
						pauseResumeToggle ^= 1;
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	f083 0301 	eor.w	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bf14      	ite	ne
 8000cea:	2301      	movne	r3, #1
 8000cec:	2300      	moveq	r3, #0
 8000cee:	71bb      	strb	r3, [r7, #6]
						if(pauseResumeToggle)
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00b      	beq.n	8000d0e <main+0x1ba>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <main+0x228>)
 8000cfe:	f001 ff2b 	bl	8002b58 <HAL_GPIO_WritePin>
							wavPlayer_pause();
 8000d02:	f000 ff01 	bl	8001b08 <wavPlayer_pause>
							HAL_Delay(200);
 8000d06:	20c8      	movs	r0, #200	; 0xc8
 8000d08:	f000 ffec 	bl	8001ce4 <HAL_Delay>
 8000d0c:	e00b      	b.n	8000d26 <main+0x1d2>
						}
						else
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d14:	4819      	ldr	r0, [pc, #100]	; (8000d7c <main+0x228>)
 8000d16:	f001 ff1f 	bl	8002b58 <HAL_GPIO_WritePin>
							HAL_Delay(1000);
 8000d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1e:	f000 ffe1 	bl	8001ce4 <HAL_Delay>
							wavPlayer_resume();
 8000d22:	f000 fef7 	bl	8001b14 <wavPlayer_resume>
    		while(!is_wavPlayer_finished_Playing())
 8000d26:	f000 ff09 	bl	8001b3c <is_wavPlayer_finished_Playing>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f083 0301 	eor.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1a9      	bne.n	8000c8a <main+0x136>
					}
				}
    		}

    		/* increase the song index if there are pending songs available */
    		if(song_idx < NUM_SONGS){
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <main+0x220>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b0a      	cmp	r3, #10
 8000d3e:	d806      	bhi.n	8000d4e <main+0x1fa>
				 song_idx++;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <main+0x220>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <main+0x220>)
 8000d4c:	701a      	strb	r2, [r3, #0]
			 }

    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <main+0x228>)
 8000d56:	f001 feff 	bl	8002b58 <HAL_GPIO_WritePin>
    		HAL_Delay(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 ffc1 	bl	8001ce4 <HAL_Delay>
    MX_USB_HOST_Process();
 8000d62:	e740      	b.n	8000be6 <main+0x92>
 8000d64:	20000240 	.word	0x20000240
 8000d68:	0800f014 	.word	0x0800f014
 8000d6c:	0800f01c 	.word	0x0800f01c
 8000d70:	20000144 	.word	0x20000144
 8000d74:	2000002d 	.word	0x2000002d
 8000d78:	20001b20 	.word	0x20001b20
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	200014e0 	.word	0x200014e0
 8000d84:	200014e4 	.word	0x200014e4
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000288 	.word	0x20000288

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00d fc74 	bl	800e690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e04:	2308      	movs	r3, #8
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e12:	2307      	movs	r3, #7
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f005 fb24 	bl	8006468 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e26:	f000 fa7b 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2105      	movs	r1, #5
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fd85 	bl	8006958 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e54:	f000 fa64 	bl	8001320 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_DAC_Init+0x4c>)
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <MX_DAC_Init+0x50>)
 8000e7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_DAC_Init+0x4c>)
 8000e7e:	f001 f866 	bl	8001f4e <HAL_DAC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e88:	f000 fa4a 	bl	8001320 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2210      	movs	r2, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_DAC_Init+0x4c>)
 8000e9c:	f001 f879 	bl	8001f92 <HAL_DAC_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ea6:	f000 fa3b 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000130 	.word	0x20000130
 8000eb8:	40007400 	.word	0x40007400

08000ebc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ec2:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <MX_I2C1_Init+0x54>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_I2C1_Init+0x58>)
 8000eca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ede:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_I2C1_Init+0x50>)
 8000efa:	f003 fa83 	bl	8004404 <HAL_I2C_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f04:	f000 fa0c 	bl	8001320 <Error_Handler>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000144 	.word	0x20000144
 8000f10:	40005400 	.word	0x40005400
 8000f14:	000186a0 	.word	0x000186a0

08000f18 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <MX_I2S3_Init+0x58>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f40:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f44:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_I2S3_Init+0x54>)
 8000f5a:	f004 f9e9 	bl	8005330 <HAL_I2S_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000f64:	f000 f9dc 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000198 	.word	0x20000198
 8000f70:	40003c00 	.word	0x40003c00

08000f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM1_Init+0x98>)
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <MX_TIM1_Init+0x9c>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM1_Init+0x98>)
 8000f98:	2247      	movs	r2, #71	; 0x47
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM1_Init+0x98>)
 8000fa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_TIM1_Init+0x98>)
 8000fbe:	f006 f843 	bl	8007048 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fc8:	f000 f9aa 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM1_Init+0x98>)
 8000fda:	f006 f8ed 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fe4:	f000 f99c 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM1_Init+0x98>)
 8000ff6:	f006 fae1 	bl	80075bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001000:	f000 f98e 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000240 	.word	0x20000240
 8001010:	40010000 	.word	0x40010000

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_DMA_Init+0x3c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <MX_DMA_Init+0x3c>)
 8001024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_DMA_Init+0x3c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2010      	movs	r0, #16
 800103c:	f000 ff51 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001040:	2010      	movs	r0, #16
 8001042:	f000 ff6a 	bl	8001f1a <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b6b      	ldr	r3, [pc, #428]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a6a      	ldr	r2, [pc, #424]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b68      	ldr	r3, [pc, #416]	; (800121c <MX_GPIO_Init+0x1c8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b64      	ldr	r3, [pc, #400]	; (800121c <MX_GPIO_Init+0x1c8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a63      	ldr	r2, [pc, #396]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b61      	ldr	r3, [pc, #388]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b56      	ldr	r3, [pc, #344]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a55      	ldr	r2, [pc, #340]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b4f      	ldr	r3, [pc, #316]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a4e      	ldr	r2, [pc, #312]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b48      	ldr	r3, [pc, #288]	; (800121c <MX_GPIO_Init+0x1c8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a47      	ldr	r2, [pc, #284]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b45      	ldr	r3, [pc, #276]	; (800121c <MX_GPIO_Init+0x1c8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001112:	2200      	movs	r2, #0
 8001114:	21ff      	movs	r1, #255	; 0xff
 8001116:	4842      	ldr	r0, [pc, #264]	; (8001220 <MX_GPIO_Init+0x1cc>)
 8001118:	f001 fd1e 	bl	8002b58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	4840      	ldr	r0, [pc, #256]	; (8001224 <MX_GPIO_Init+0x1d0>)
 8001122:	f001 fd19 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001126:	2200      	movs	r2, #0
 8001128:	f24f 0110 	movw	r1, #61456	; 0xf010
 800112c:	483e      	ldr	r0, [pc, #248]	; (8001228 <MX_GPIO_Init+0x1d4>)
 800112e:	f001 fd13 	bl	8002b58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001132:	23ff      	movs	r3, #255	; 0xff
 8001134:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4835      	ldr	r0, [pc, #212]	; (8001220 <MX_GPIO_Init+0x1cc>)
 800114a:	f001 fb51 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	482f      	ldr	r0, [pc, #188]	; (8001224 <MX_GPIO_Init+0x1d0>)
 8001166:	f001 fb43 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	482b      	ldr	r0, [pc, #172]	; (800122c <MX_GPIO_Init+0x1d8>)
 800117e:	f001 fb37 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001182:	2310      	movs	r3, #16
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4823      	ldr	r0, [pc, #140]	; (8001224 <MX_GPIO_Init+0x1d0>)
 8001196:	f001 fb2b 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800119a:	231e      	movs	r3, #30
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a4:	2302      	movs	r3, #2
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4820      	ldr	r0, [pc, #128]	; (8001230 <MX_GPIO_Init+0x1dc>)
 80011b0:	f001 fb1e 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <MX_GPIO_Init+0x1d4>)
 80011ce:	f001 fb0f 	bl	80027f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2007      	movs	r0, #7
 80011d8:	f000 fe83 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011dc:	2007      	movs	r0, #7
 80011de:	f000 fe9c 	bl	8001f1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2008      	movs	r0, #8
 80011e8:	f000 fe7b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ec:	2008      	movs	r0, #8
 80011ee:	f000 fe94 	bl	8001f1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2009      	movs	r0, #9
 80011f8:	f000 fe73 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011fc:	2009      	movs	r0, #9
 80011fe:	f000 fe8c 	bl	8001f1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200a      	movs	r0, #10
 8001208:	f000 fe6b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800120c:	200a      	movs	r0, #10
 800120e:	f000 fe84 	bl	8001f1a <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	; 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40021000 	.word	0x40021000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800123e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001242:	4833      	ldr	r0, [pc, #204]	; (8001310 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001244:	f001 fca1 	bl	8002b8a <HAL_GPIO_TogglePin>
  for(uint32_t i = 0; i < 10000; i++);
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e002      	b.n	8001254 <HAL_GPIO_EXTI_Callback+0x20>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f242 720f 	movw	r2, #9999	; 0x270f
 800125a:	4293      	cmp	r3, r2
 800125c:	d9f7      	bls.n	800124e <HAL_GPIO_EXTI_Callback+0x1a>

  if(GPIO_Pin == GPIO_PIN_1)
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d114      	bne.n	800128e <HAL_GPIO_EXTI_Callback+0x5a>
  {

	  if(volume <= 250){
 8001264:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2bfa      	cmp	r3, #250	; 0xfa
 800126c:	d84c      	bhi.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
		  volume+= 5;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	3305      	adds	r3, #5
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 800127a:	701a      	strb	r2, [r3, #0]
		  wavPlayer_setVolume(volume);
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fc4c 	bl	8001b20 <wavPlayer_setVolume>
		  update_volume_display();
 8001288:	f7ff fc48 	bl	8000b1c <update_volume_display>
	  if(song_idx > 0){
		  song_idx--;
		  song_mov = PREV_SONG;
	  }
  }
}
 800128c:	e03c      	b.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_2)
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d114      	bne.n	80012be <HAL_GPIO_EXTI_Callback+0x8a>
	  if(volume > 5){
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b05      	cmp	r3, #5
 800129c:	d934      	bls.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
		  volume -= 5;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3b05      	subs	r3, #5
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 80012aa:	701a      	strb	r2, [r3, #0]
		  wavPlayer_setVolume(volume);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_GPIO_EXTI_Callback+0xe0>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fc34 	bl	8001b20 <wavPlayer_setVolume>
		  update_volume_display();
 80012b8:	f7ff fc30 	bl	8000b1c <update_volume_display>
}
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_3)
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d10f      	bne.n	80012e4 <HAL_GPIO_EXTI_Callback+0xb0>
	 if(song_idx < NUM_SONGS){
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d81c      	bhi.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
		 song_idx++;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012da:	701a      	strb	r2, [r3, #0]
		 song_mov = NEXT_SONG;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_GPIO_EXTI_Callback+0xe8>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	e011      	b.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_4)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d10e      	bne.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
	  if(song_idx > 0){
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d009      	beq.n	8001308 <HAL_GPIO_EXTI_Callback+0xd4>
		  song_idx--;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001300:	701a      	strb	r2, [r3, #0]
		  song_mov = PREV_SONG;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001304:	2202      	movs	r2, #2
 8001306:	701a      	strb	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40020c00 	.word	0x40020c00
 8001314:	2000002c 	.word	0x2000002c
 8001318:	2000002d 	.word	0x2000002d
 800131c:	20000288 	.word	0x20000288

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136a:	2007      	movs	r0, #7
 800136c:	f000 fdae 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_DAC_MspInit+0x7c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d127      	bne.n	80013ee <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_DAC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013d6:	2320      	movs	r3, #32
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_DAC_MspInit+0x84>)
 80013ea:	f001 fa01 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40007400 	.word	0x40007400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_I2C_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12c      	bne.n	8001480 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_I2C_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001442:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001454:	2304      	movs	r3, #4
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <HAL_I2C_MspInit+0x8c>)
 8001460:	f001 f9c6 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_I2C_MspInit+0x88>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_I2C_MspInit+0x88>)
 800146e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005400 	.word	0x40005400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020400 	.word	0x40020400

08001494 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_I2S_MspInit+0x164>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	f040 8095 	bne.w	80015f0 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014c6:	2301      	movs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80014ca:	f240 130f 	movw	r3, #271	; 0x10f
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80014d0:	2306      	movs	r3, #6
 80014d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fc49 	bl	8006d70 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80014e4:	f7ff ff1c 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153c:	2310      	movs	r3, #16
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154c:	2306      	movs	r3, #6
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <HAL_I2S_MspInit+0x16c>)
 8001558:	f001 f94a 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800155c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156e:	2306      	movs	r3, #6
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <HAL_I2S_MspInit+0x170>)
 800157a:	f001 f939 	bl	80027f0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_I2S_MspInit+0x178>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_I2S_MspInit+0x174>)
 800158c:	2240      	movs	r2, #64	; 0x40
 800158e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015be:	2204      	movs	r2, #4
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015d6:	f000 fd2b 	bl	8002030 <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80015e0:	f7ff fe9e 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3738      	adds	r7, #56	; 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40003c00 	.word	0x40003c00
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020800 	.word	0x40020800
 8001608:	200001e0 	.word	0x200001e0
 800160c:	40026088 	.word	0x40026088

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_TIM_Base_MspInit+0x3c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10d      	bne.n	800163e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_TIM_Base_MspInit+0x40>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_TIM_Base_MspInit+0x40>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_TIM_Base_MspInit+0x40>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40010000 	.word	0x40010000
 8001650:	40023800 	.word	0x40023800

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 fb00 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f001 fa87 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80016ba:	2004      	movs	r0, #4
 80016bc:	f001 fa80 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016c8:	2008      	movs	r0, #8
 80016ca:	f001 fa79 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016d6:	2010      	movs	r0, #16
 80016d8:	f001 fa72 	bl	8002bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA1_Stream5_IRQHandler+0x10>)
 80016e6:	f000 fe19 	bl	800231c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001e0 	.word	0x200001e0

080016f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <OTG_FS_IRQHandler+0x10>)
 80016fa:	f001 fce3 	bl	80030c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001b24 	.word	0x20001b24

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d207      	bcs.n	8001748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001738:	f00c ff62 	bl	800e600 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	220c      	movs	r2, #12
 8001740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e009      	b.n	800175c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <_sbrk+0x64>)
 8001758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20020000 	.word	0x20020000
 8001768:	00002000 	.word	0x00002000
 800176c:	2000028c 	.word	0x2000028c
 8001770:	20001e38 	.word	0x20001e38

08001774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <SystemInit+0x20>)
 800177a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SystemInit+0x20>)
 8001780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <get_I2S_freq_index>:
/***************************************
* Local Function Helper Definition
****************************************/

static int get_I2S_freq_index(uint32_t audioFreq)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	uint8_t freq_index = 0xFF;
 80017a0:	23ff      	movs	r3, #255	; 0xff
 80017a2:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for(i = 0; i < 8; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	73bb      	strb	r3, [r7, #14]
 80017a8:	e00b      	b.n	80017c2 <get_I2S_freq_index+0x2a>
	{
		if(I2SFreq[i] == audioFreq)
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <get_I2S_freq_index+0x40>)
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d101      	bne.n	80017bc <get_I2S_freq_index+0x24>
		{
			freq_index = i;
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < 8; i++)
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	3301      	adds	r3, #1
 80017c0:	73bb      	strb	r3, [r7, #14]
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	2b07      	cmp	r3, #7
 80017c6:	d9f0      	bls.n	80017aa <get_I2S_freq_index+0x12>
		}
	}

	return freq_index;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	0800f088 	.word	0x0800f088

080017dc <audio_clock_config>:
/**
 * @brief Audio Clock Config
 * @param audioFreq - The target audio frequency
 */
static void audio_clock_config(uint32_t audioFreq)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t freqindex = get_I2S_freq_index(audioFreq);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffd7 	bl	8001798 <get_I2S_freq_index>
 80017ea:	4603      	mov	r3, r0
 80017ec:	77fb      	strb	r3, [r7, #31]

  /* Enable PLL I2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fb9e 	bl	8006f34 <HAL_RCCEx_GetPeriphCLKConfig>
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017f8:	2301      	movs	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]

  // configure the clock source with the default values first
  rccclkinit.PLLI2S.PLLI2SN = PLLI2S_VCO_MUL_FACTOR;
 80017fc:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001800:	613b      	str	r3, [r7, #16]
  rccclkinit.PLLI2S.PLLI2SR = PLLI2S_CLK_DIV_FACTOR;
 8001802:	2303      	movs	r3, #3
 8001804:	617b      	str	r3, [r7, #20]

  /* Update the I2S clock config if there is a sampling frequency match*/
  if(freqindex != 0xFF)
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	2bff      	cmp	r3, #255	; 0xff
 800180a:	d009      	beq.n	8001820 <audio_clock_config+0x44>
  {
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <audio_clock_config+0x58>)
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <audio_clock_config+0x5c>)
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	617b      	str	r3, [r7, #20]
  }

  HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4618      	mov	r0, r3
 8001826:	f005 faa3 	bl	8006d70 <HAL_RCCEx_PeriphCLKConfig>
}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	0800f0a8 	.word	0x0800f0a8
 8001838:	0800f0c8 	.word	0x0800f0c8

0800183c <audio_adjust_freq>:

static bool audio_adjust_freq(uint32_t audioFreq)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	// disable the I2S block
	__HAL_I2S_DISABLE(i2sptr);
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <audio_adjust_freq+0x44>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <audio_adjust_freq+0x44>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	61da      	str	r2, [r3, #28]
	//update I2S peripheral sampling frequency
	i2sptr->Init.AudioFreq = samplingFreq;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <audio_adjust_freq+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a09      	ldr	r2, [pc, #36]	; (8001884 <audio_adjust_freq+0x48>)
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	615a      	str	r2, [r3, #20]
	// re-initialize the I2S peripehral
	if(HAL_I2S_Init(i2sptr) != HAL_OK){
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <audio_adjust_freq+0x44>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 fd62 	bl	8005330 <HAL_I2S_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <audio_adjust_freq+0x3a>
		return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <audio_adjust_freq+0x3c>
	}
	else{
		return true;
 8001876:	2301      	movs	r3, #1
	}
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000290 	.word	0x20000290
 8001884:	200014cc 	.word	0x200014cc

08001888 <audio_play>:


static void audio_play(uint16_t *paudioBuff, uint32_t len)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	//Start Codec
	CS43_start();
 8001892:	f7fe ffa4 	bl	80007de <CS43_start>
	//Start I2S DMA transfer
	HAL_I2S_Transmit_DMA(i2sptr,paudioBuff,
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <audio_play+0x38>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018a0:	d203      	bcs.n	80018aa <audio_play+0x22>
			  DMA_MAX(len/AUDIODATA_SIZE));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	085b      	lsrs	r3, r3, #1
	HAL_I2S_Transmit_DMA(i2sptr,paudioBuff,
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	e001      	b.n	80018ae <audio_play+0x26>
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	461a      	mov	r2, r3
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	f003 fe7d 	bl	80055b0 <HAL_I2S_Transmit_DMA>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000290 	.word	0x20000290

080018c4 <audio_stop>:

static void audio_stop()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	CS43_stop();
 80018c8:	f7fe ffcc 	bl	8000864 <CS43_stop>
	HAL_I2S_DMAStop(i2sptr);
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <audio_stop+0x18>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f004 f80b 	bl	80058ec <HAL_I2S_DMAStop>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000290 	.word	0x20000290

080018e0 <audio_pause>:

static void audio_pause()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	CS43_stop();
 80018e4:	f7fe ffbe 	bl	8000864 <CS43_stop>
	HAL_I2S_DMAPause(i2sptr);
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <audio_pause+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 ff07 	bl	8005700 <HAL_I2S_DMAPause>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000290 	.word	0x20000290

080018fc <audio_resume>:

static void audio_resume()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	CS43_start();
 8001900:	f7fe ff6d 	bl	80007de <CS43_start>
	HAL_I2S_DMAResume(i2sptr);
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <audio_resume+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 ff5b 	bl	80057c4 <HAL_I2S_DMAResume>
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000290 	.word	0x20000290

08001918 <wavPlayer_reset>:
 * @brief Reset the wav player module
 * @note All internal counters are cleared and the I2S pointer
 * is set if not.
 */
void wavPlayer_reset(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <wavPlayer_reset+0x20>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
  player_bytes_read = 0;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <wavPlayer_reset+0x24>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
  i2sptr = &hi2s3;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <wavPlayer_reset+0x28>)
 800192a:	4a06      	ldr	r2, [pc, #24]	; (8001944 <wavPlayer_reset+0x2c>)
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200014c8 	.word	0x200014c8
 800193c:	200014d0 	.word	0x200014d0
 8001940:	20000290 	.word	0x20000290
 8001944:	20000198 	.word	0x20000198

08001948 <wavPlayer_openFile>:
 * @brief Open the WAV file to play
 * @param filePath - The file path to be open
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_openFile(const char* filePath)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001954:	2201      	movs	r2, #1
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <wavPlayer_openFile+0x48>)
 800195a:	f00b fd35 	bl	800d3c8 <f_open>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <wavPlayer_openFile+0x20>
  {
    return false;
 8001964:	2300      	movs	r3, #0
 8001966:	e00e      	b.n	8001986 <wavPlayer_openFile+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	f107 010c 	add.w	r1, r7, #12
 8001970:	222c      	movs	r2, #44	; 0x2c
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <wavPlayer_openFile+0x48>)
 8001974:	f00b fee6 	bl	800d744 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <wavPlayer_openFile+0x4c>)
 800197c:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	4a05      	ldr	r2, [pc, #20]	; (8001998 <wavPlayer_openFile+0x50>)
 8001982:	6013      	str	r3, [r2, #0]
  return true;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	3738      	adds	r7, #56	; 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000294 	.word	0x20000294
 8001994:	200004c4 	.word	0x200004c4
 8001998:	200014cc 	.word	0x200014cc

0800199c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  is_song_finished = false;
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <wavPlayer_play+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  //configure the PLL clock frequency setting
  audio_clock_config(samplingFreq);
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <wavPlayer_play+0x54>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff16 	bl	80017dc <audio_clock_config>
  //update I2S peripheral sampling frequency
  audio_adjust_freq(samplingFreq);
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <wavPlayer_play+0x54>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff41 	bl	800183c <audio_adjust_freq>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80019ba:	2100      	movs	r1, #0
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <wavPlayer_play+0x58>)
 80019be:	f00c f8a8 	bl	800db12 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &player_bytes_read);
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <wavPlayer_play+0x5c>)
 80019c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <wavPlayer_play+0x60>)
 80019ca:	480a      	ldr	r0, [pc, #40]	; (80019f4 <wavPlayer_play+0x58>)
 80019cc:	f00b feba 	bl	800d744 <f_read>
  audioRemainSize = fileLength - player_bytes_read;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <wavPlayer_play+0x64>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <wavPlayer_play+0x5c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <wavPlayer_play+0x68>)
 80019dc:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audio_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 80019de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <wavPlayer_play+0x60>)
 80019e4:	f7ff ff50 	bl	8001888 <audio_play>

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200014d4 	.word	0x200014d4
 80019f0:	200014cc 	.word	0x200014cc
 80019f4:	20000294 	.word	0x20000294
 80019f8:	200014d0 	.word	0x200014d0
 80019fc:	200004c8 	.word	0x200004c8
 8001a00:	200004c4 	.word	0x200004c4
 8001a04:	200014c8 	.word	0x200014c8

08001a08 <wavPlayer_proceed>:

/**
 * @brief Process WAV
 */
void wavPlayer_proceed(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d858      	bhi.n	8001ac8 <wavPlayer_proceed+0xc0>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <wavPlayer_proceed+0x14>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001ac7 	.word	0x08001ac7
 8001a20:	08001a2d 	.word	0x08001a2d
 8001a24:	08001a6f 	.word	0x08001a6f
 8001a28:	08001ab1 	.word	0x08001ab1
  {
	  case PLAYER_CONTROL_Idle:
		break;

	  case PLAYER_CONTROL_HalfBuffer:
		player_bytes_read = 0;
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
		f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &player_bytes_read);
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3e:	4925      	ldr	r1, [pc, #148]	; (8001ad4 <wavPlayer_proceed+0xcc>)
 8001a40:	4825      	ldr	r0, [pc, #148]	; (8001ad8 <wavPlayer_proceed+0xd0>)
 8001a42:	f00b fe7f 	bl	800d744 <f_read>
		if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a4e:	d907      	bls.n	8001a60 <wavPlayer_proceed+0x58>
		{
		  audioRemainSize -= player_bytes_read;
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a20      	ldr	r2, [pc, #128]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a5c:	6013      	str	r3, [r2, #0]
		else
		{
		  audioRemainSize = 0;
		  playerControlSM = PLAYER_CONTROL_EndOfFile;
		}
		break;
 8001a5e:	e033      	b.n	8001ac8 <wavPlayer_proceed+0xc0>
		  audioRemainSize = 0;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
		  playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001a68:	2203      	movs	r2, #3
 8001a6a:	701a      	strb	r2, [r3, #0]
		break;
 8001a6c:	e02c      	b.n	8001ac8 <wavPlayer_proceed+0xc0>

	  case PLAYER_CONTROL_FullBuffer:
		player_bytes_read = 0;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
		f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2,
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a80:	4917      	ldr	r1, [pc, #92]	; (8001ae0 <wavPlayer_proceed+0xd8>)
 8001a82:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <wavPlayer_proceed+0xd0>)
 8001a84:	f00b fe5e 	bl	800d744 <f_read>
				&player_bytes_read);
		if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a90:	d907      	bls.n	8001aa2 <wavPlayer_proceed+0x9a>
		{
		  audioRemainSize -= player_bytes_read;
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <wavPlayer_proceed+0xc8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a0f      	ldr	r2, [pc, #60]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001a9e:	6013      	str	r3, [r2, #0]
		else
		{
		  audioRemainSize = 0;
		  playerControlSM = PLAYER_CONTROL_EndOfFile;
		}
		break;
 8001aa0:	e012      	b.n	8001ac8 <wavPlayer_proceed+0xc0>
		  audioRemainSize = 0;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <wavPlayer_proceed+0xd4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
		  playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001aaa:	2203      	movs	r2, #3
 8001aac:	701a      	strb	r2, [r3, #0]
		break;
 8001aae:	e00b      	b.n	8001ac8 <wavPlayer_proceed+0xc0>

	  case PLAYER_CONTROL_EndOfFile:
		wavPlayer_stop();
 8001ab0:	f000 f81a 	bl	8001ae8 <wavPlayer_stop>
		wavPlayer_reset();
 8001ab4:	f7ff ff30 	bl	8001918 <wavPlayer_reset>
		is_song_finished = true;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <wavPlayer_proceed+0xdc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <wavPlayer_proceed+0xc4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
		break;
 8001ac4:	e000      	b.n	8001ac8 <wavPlayer_proceed+0xc0>
		break;
 8001ac6:	bf00      	nop
	  }
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200014d5 	.word	0x200014d5
 8001ad0:	200014d0 	.word	0x200014d0
 8001ad4:	200004c8 	.word	0x200004c8
 8001ad8:	20000294 	.word	0x20000294
 8001adc:	200014c8 	.word	0x200014c8
 8001ae0:	20000cc8 	.word	0x20000cc8
 8001ae4:	200014d4 	.word	0x200014d4

08001ae8 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  audio_stop();
 8001aec:	f7ff feea 	bl	80018c4 <audio_stop>
  f_close(&wavFile);
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <wavPlayer_stop+0x18>)
 8001af2:	f00b ffe4 	bl	800dabe <f_close>
  is_song_finished = true;
 8001af6:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <wavPlayer_stop+0x1c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000294 	.word	0x20000294
 8001b04:	200014d4 	.word	0x200014d4

08001b08 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	audio_pause();
 8001b0c:	f7ff fee8 	bl	80018e0 <audio_pause>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <wavPlayer_resume>:

void wavPlayer_resume(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	audio_resume();
 8001b18:	f7ff fef0 	bl	80018fc <audio_resume>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <wavPlayer_setVolume>:

void wavPlayer_setVolume(uint8_t volume)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  CS43_set_volume(volume);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fe39 	bl	80007a4 <CS43_set_volume>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <is_wavPlayer_finished_Playing>:

/**
 * @brief isEndofFile reached
 */
bool is_wavPlayer_finished_Playing(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return is_song_finished;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <is_wavPlayer_finished_Playing+0x14>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200014d4 	.word	0x200014d4

08001b54 <HAL_I2S_TxCpltCallback>:


void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_I2S_TxCpltCallback+0x24>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d102      	bne.n	8001b6c <HAL_I2S_TxCpltCallback+0x18>
  {
	  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_I2S_TxCpltCallback+0x28>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40003c00 	.word	0x40003c00
 8001b7c:	200014d5 	.word	0x200014d5

08001b80 <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d102      	bne.n	8001b98 <HAL_I2S_TxHalfCpltCallback+0x18>
  {
	  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	701a      	strb	r2, [r3, #0]
  }
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40003c00 	.word	0x40003c00
 8001ba8:	200014d5 	.word	0x200014d5

08001bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc8:	4c0b      	ldr	r4, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd6:	f7ff fdcd 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bda:	f00c fd17 	bl	800e60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bde:	f7fe ffb9 	bl	8000b54 <main>
  bx  lr    
 8001be2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bec:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001bf0:	0800f1c8 	.word	0x0800f1c8
  ldr r2, =_sbss
 8001bf4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001bf8:	20001e38 	.word	0x20001e38

08001bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f94f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fb7a 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f967 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f92f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	20000038 	.word	0x20000038
 8001ca0:	20000034 	.word	0x20000034

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000038 	.word	0x20000038
 8001cc8:	200014d8 	.word	0x200014d8

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	200014d8 	.word	0x200014d8

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000038 	.word	0x20000038

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <__NVIC_EnableIRQ+0x38>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff29 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff3e 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff31 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e014      	b.n	8001f8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	791b      	ldrb	r3, [r3, #4]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fa03 	bl	800137c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b087      	sub	sp, #28
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	795b      	ldrb	r3, [r3, #5]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_DAC_ConfigChannel+0x18>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e03c      	b.n	8002024 <HAL_DAC_ConfigChannel+0x92>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6819      	ldr	r1, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	22c0      	movs	r2, #192	; 0xc0
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff fe46 	bl	8001ccc <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e099      	b.n	8002180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	e00f      	b.n	800208e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206e:	f7ff fe2d 	bl	8001ccc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b05      	cmp	r3, #5
 800207a:	d908      	bls.n	800208e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e078      	b.n	8002180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e8      	bne.n	800206e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_DMA_Init+0x158>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d107      	bne.n	80020f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4313      	orrs	r3, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0307 	bic.w	r3, r3, #7
 800210e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	2b04      	cmp	r3, #4
 8002120:	d117      	bne.n	8002152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fadf 	bl	80026f8 <DMA_CheckFifoParam>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800214e:	2301      	movs	r3, #1
 8002150:	e016      	b.n	8002180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa96 	bl	800268c <DMA_CalcBaseAndBitshift>
 8002160:	4603      	mov	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	223f      	movs	r2, #63	; 0x3f
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	f010803f 	.word	0xf010803f

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Start_IT+0x26>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e040      	b.n	8002234 <HAL_DMA_Start_IT+0xa8>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d12f      	bne.n	8002226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa28 	bl	8002630 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0216 	orr.w	r2, r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0208 	orr.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e005      	b.n	8002232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800222e:	2302      	movs	r3, #2
 8002230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002232:	7dfb      	ldrb	r3, [r7, #23]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800224a:	f7ff fd3f 	bl	8001ccc <HAL_GetTick>
 800224e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d008      	beq.n	800226e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e052      	b.n	8002314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0216 	bic.w	r2, r2, #22
 800227c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800228c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_DMA_Abort+0x62>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0208 	bic.w	r2, r2, #8
 80022ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022be:	e013      	b.n	80022e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c0:	f7ff fd04 	bl	8001ccc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d90c      	bls.n	80022e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e015      	b.n	8002314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e4      	bne.n	80022c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	223f      	movs	r2, #63	; 0x3f
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002328:	4b8e      	ldr	r3, [pc, #568]	; (8002564 <HAL_DMA_IRQHandler+0x248>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a8e      	ldr	r2, [pc, #568]	; (8002568 <HAL_DMA_IRQHandler+0x24c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2208      	movs	r2, #8
 8002348:	409a      	lsls	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01a      	beq.n	8002388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2208      	movs	r2, #8
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d012      	beq.n	80023be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2201      	movs	r2, #1
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	f043 0202 	orr.w	r2, r3, #2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2204      	movs	r2, #4
 80023c4:	409a      	lsls	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d012      	beq.n	80023f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2204      	movs	r2, #4
 80023e2:	409a      	lsls	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2210      	movs	r2, #16
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d043      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03c      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2210      	movs	r2, #16
 8002418:	409a      	lsls	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d018      	beq.n	800245e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d024      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e01f      	b.n	800248c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01b      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
 800245c:	e016      	b.n	800248c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0208 	bic.w	r2, r2, #8
 800247a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2220      	movs	r2, #32
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 808f 	beq.w	80025bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8087 	beq.w	80025bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2220      	movs	r2, #32
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d136      	bne.n	8002534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0216 	bic.w	r2, r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_DMA_IRQHandler+0x1da>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0208 	bic.w	r2, r2, #8
 8002504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	223f      	movs	r2, #63	; 0x3f
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002526:	2b00      	cmp	r3, #0
 8002528:	d07e      	beq.n	8002628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	4798      	blx	r3
        }
        return;
 8002532:	e079      	b.n	8002628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01d      	beq.n	800257e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	2b00      	cmp	r3, #0
 8002556:	d031      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
 8002560:	e02c      	b.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
 8002562:	bf00      	nop
 8002564:	20000030 	.word	0x20000030
 8002568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d023      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e01e      	b.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0210 	bic.w	r2, r2, #16
 800259a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d032      	beq.n	800262a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2205      	movs	r2, #5
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d307      	bcc.n	8002604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f2      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x2cc>
 8002602:	e000      	b.n	8002606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
 8002626:	e000      	b.n	800262a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002628:	bf00      	nop
    }
  }
}
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800264c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d108      	bne.n	8002670 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800266e:	e007      	b.n	8002680 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3b10      	subs	r3, #16
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <DMA_CalcBaseAndBitshift+0x64>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <DMA_CalcBaseAndBitshift+0x68>)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d909      	bls.n	80026ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	1d1a      	adds	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	659a      	str	r2, [r3, #88]	; 0x58
 80026cc:	e007      	b.n	80026de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d6:	f023 0303 	bic.w	r3, r3, #3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	aaaaaaab 	.word	0xaaaaaaab
 80026f4:	0800f0e8 	.word	0x0800f0e8

080026f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11f      	bne.n	8002752 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d856      	bhi.n	80027c6 <DMA_CheckFifoParam+0xce>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x28>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002731 	.word	0x08002731
 8002724:	08002743 	.word	0x08002743
 8002728:	08002731 	.word	0x08002731
 800272c:	080027c7 	.word	0x080027c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d046      	beq.n	80027ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002740:	e043      	b.n	80027ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800274a:	d140      	bne.n	80027ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e03d      	b.n	80027ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	d121      	bne.n	80027a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d837      	bhi.n	80027d2 <DMA_CheckFifoParam+0xda>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <DMA_CheckFifoParam+0x70>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002779 	.word	0x08002779
 800276c:	0800277f 	.word	0x0800277f
 8002770:	08002779 	.word	0x08002779
 8002774:	08002791 	.word	0x08002791
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e030      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d025      	beq.n	80027d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e022      	b.n	80027d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800279e:	e01c      	b.n	80027da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d903      	bls.n	80027ae <DMA_CheckFifoParam+0xb6>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ac:	e018      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
      break;
 80027b2:	e015      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00e      	beq.n	80027de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e00b      	b.n	80027de <DMA_CheckFifoParam+0xe6>
      break;
 80027c6:	bf00      	nop
 80027c8:	e00a      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e008      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e006      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e004      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e002      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
    }
  } 
  
  return status; 
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e16b      	b.n	8002ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 815a 	bne.w	8002ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	2b02      	cmp	r3, #2
 8002840:	d130      	bne.n	80028a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0201 	and.w	r2, r3, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d017      	beq.n	80028e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d123      	bne.n	8002934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	08da      	lsrs	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3208      	adds	r2, #8
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	08da      	lsrs	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3208      	adds	r2, #8
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b4 	beq.w	8002ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_GPIO_Init+0x30c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a5f      	ldr	r2, [pc, #380]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_GPIO_Init+0x30c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x314>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02b      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x318>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d025      	beq.n	8002a12 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x31c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d01f      	beq.n	8002a0e <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x320>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d019      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	; (8002b14 <HAL_GPIO_Init+0x324>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_GPIO_Init+0x216>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x328>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00d      	beq.n	8002a02 <HAL_GPIO_Init+0x212>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_GPIO_Init+0x32c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_GPIO_Init+0x20a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e00e      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e00c      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00a      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a02:	2305      	movs	r3, #5
 8002a04:	e008      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e004      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x228>
 8002a16:	2300      	movs	r3, #0
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f002 0203 	and.w	r2, r2, #3
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	4093      	lsls	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a28:	4935      	ldr	r1, [pc, #212]	; (8002b00 <HAL_GPIO_Init+0x310>)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5a:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a60:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8a:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	f67f ae90 	bls.w	800280c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40013800 	.word	0x40013800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40020400 	.word	0x40020400
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40021400 	.word	0x40021400
 8002b1c:	40021800 	.word	0x40021800
 8002b20:	40021c00 	.word	0x40021c00
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e001      	b.n	8002b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	041a      	lsls	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	400b      	ands	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fb28 	bl	8001234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b08f      	sub	sp, #60	; 0x3c
 8002bf4:	af0a      	add	r7, sp, #40	; 0x28
 8002bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e054      	b.n	8002cac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f00b fa3b 	bl	800e098 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d102      	bne.n	8002c3c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fda9 	bl	8007798 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	687e      	ldr	r6, [r7, #4]
 8002c4e:	466d      	mov	r5, sp
 8002c50:	f106 0410 	add.w	r4, r6, #16
 8002c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c64:	1d33      	adds	r3, r6, #4
 8002c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f004 fd23 	bl	80076b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 fda0 	bl	80077ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	687e      	ldr	r6, [r7, #4]
 8002c82:	466d      	mov	r5, sp
 8002c84:	f106 0410 	add.w	r4, r6, #16
 8002c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c98:	1d33      	adds	r3, r6, #4
 8002c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f004 ff29 	bl	8007af4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	70fb      	strb	r3, [r7, #3]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70bb      	strb	r3, [r7, #2]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_HCD_HC_Init+0x28>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e076      	b.n	8002dca <HAL_HCD_HC_Init+0x116>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	333d      	adds	r3, #61	; 0x3d
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3338      	adds	r3, #56	; 0x38
 8002d04:	787a      	ldrb	r2, [r7, #1]
 8002d06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3340      	adds	r3, #64	; 0x40
 8002d16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d18:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3339      	adds	r3, #57	; 0x39
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	333f      	adds	r3, #63	; 0x3f
 8002d3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	78ba      	ldrb	r2, [r7, #2]
 8002d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d48:	b2d0      	uxtb	r0, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	333a      	adds	r3, #58	; 0x3a
 8002d56:	4602      	mov	r2, r0
 8002d58:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da09      	bge.n	8002d76 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	333b      	adds	r3, #59	; 0x3b
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e008      	b.n	8002d88 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	333b      	adds	r3, #59	; 0x3b
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	333c      	adds	r3, #60	; 0x3c
 8002d96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d9a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	787c      	ldrb	r4, [r7, #1]
 8002da2:	78ba      	ldrb	r2, [r7, #2]
 8002da4:	78f9      	ldrb	r1, [r7, #3]
 8002da6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	4623      	mov	r3, r4
 8002db8:	f005 f822 	bl	8007e00 <USB_HC_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}

08002dd2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_HCD_HC_Halt+0x1e>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e00f      	b.n	8002e10 <HAL_HCD_HC_Halt+0x3e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f005 fa72 	bl	80082ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	70fb      	strb	r3, [r7, #3]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70bb      	strb	r3, [r7, #2]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	333b      	adds	r3, #59	; 0x3b
 8002e40:	78ba      	ldrb	r2, [r7, #2]
 8002e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	333f      	adds	r3, #63	; 0x3f
 8002e52:	787a      	ldrb	r2, [r7, #1]
 8002e54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e56:	7c3b      	ldrb	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d112      	bne.n	8002e82 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3342      	adds	r3, #66	; 0x42
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333d      	adds	r3, #61	; 0x3d
 8002e7c:	7f3a      	ldrb	r2, [r7, #28]
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e008      	b.n	8002e94 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3342      	adds	r3, #66	; 0x42
 8002e90:	2202      	movs	r2, #2
 8002e92:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	f200 80c6 	bhi.w	8003028 <HAL_HCD_HC_SubmitRequest+0x210>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08003015 	.word	0x08003015
 8002eac:	08002f19 	.word	0x08002f19
 8002eb0:	08002f97 	.word	0x08002f97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002eb4:	7c3b      	ldrb	r3, [r7, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	f040 80b8 	bne.w	800302c <HAL_HCD_HC_SubmitRequest+0x214>
 8002ebc:	78bb      	ldrb	r3, [r7, #2]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80b4 	bne.w	800302c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ec4:	8b3b      	ldrh	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3355      	adds	r3, #85	; 0x55
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3355      	adds	r3, #85	; 0x55
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3342      	adds	r3, #66	; 0x42
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f02:	e093      	b.n	800302c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3342      	adds	r3, #66	; 0x42
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]
      break;
 8002f16:	e089      	b.n	800302c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f18:	78bb      	ldrb	r3, [r7, #2]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11d      	bne.n	8002f5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3355      	adds	r3, #85	; 0x55
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3342      	adds	r3, #66	; 0x42
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f44:	e073      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3342      	adds	r3, #66	; 0x42
 8002f54:	2202      	movs	r2, #2
 8002f56:	701a      	strb	r2, [r3, #0]
      break;
 8002f58:	e069      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3354      	adds	r3, #84	; 0x54
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3342      	adds	r3, #66	; 0x42
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
      break;
 8002f80:	e055      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3342      	adds	r3, #66	; 0x42
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      break;
 8002f94:	e04b      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f96:	78bb      	ldrb	r3, [r7, #2]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11d      	bne.n	8002fd8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3355      	adds	r3, #85	; 0x55
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3342      	adds	r3, #66	; 0x42
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fc2:	e034      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3342      	adds	r3, #66	; 0x42
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
      break;
 8002fd6:	e02a      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3354      	adds	r3, #84	; 0x54
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3342      	adds	r3, #66	; 0x42
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
      break;
 8002ffe:	e016      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3342      	adds	r3, #66	; 0x42
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]
      break;
 8003012:	e00c      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3342      	adds	r3, #66	; 0x42
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      break;
 8003026:	e002      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800302c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3344      	adds	r3, #68	; 0x44
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	8b3a      	ldrh	r2, [r7, #24]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f303 	mul.w	r3, r0, r3
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	; 0x4c
 8003050:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3350      	adds	r3, #80	; 0x50
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3339      	adds	r3, #57	; 0x39
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3361      	adds	r3, #97	; 0x61
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	222c      	movs	r2, #44	; 0x2c
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	3338      	adds	r3, #56	; 0x38
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	18d1      	adds	r1, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	f004 ffc6 	bl	8008044 <USB_HC_StartXfer>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop

080030c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 fcc7 	bl	8007a6e <USB_GetMode>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	f040 80f6 	bne.w	80032d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f004 fcab 	bl	8007a48 <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80ec 	beq.w	80032d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fca2 	bl	8007a48 <USB_ReadInterrupts>
 8003104:	4603      	mov	r3, r0
 8003106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800310e:	d104      	bne.n	800311a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f004 fc92 	bl	8007a48 <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312e:	d104      	bne.n	800313a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003138:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f004 fc82 	bl	8007a48 <USB_ReadInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800314a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314e:	d104      	bne.n	800315a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003158:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fc72 	bl	8007a48 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d103      	bne.n	8003176 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2202      	movs	r2, #2
 8003174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f004 fc64 	bl	8007a48 <USB_ReadInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318a:	d11c      	bne.n	80031c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003194:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80031a6:	2110      	movs	r1, #16
 80031a8:	6938      	ldr	r0, [r7, #16]
 80031aa:	f004 fb53 	bl	8007854 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031ae:	6938      	ldr	r0, [r7, #16]
 80031b0:	f004 fb84 	bl	80078bc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fd5a 	bl	8007c74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f00a ffe7 	bl	800e194 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 fc3c 	bl	8007a48 <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031da:	d102      	bne.n	80031e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 f89e 	bl	800431e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fc2e 	bl	8007a48 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d106      	bne.n	8003204 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f00a ffb0 	bl	800e15c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2208      	movs	r2, #8
 8003202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f004 fc1d 	bl	8007a48 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d101      	bne.n	800321c <HAL_HCD_IRQHandler+0x158>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_HCD_IRQHandler+0x15a>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0210 	bic.w	r2, r2, #16
 8003230:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 ffa1 	bl	800417a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0210 	orr.w	r2, r2, #16
 8003246:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f004 fbfb 	bl	8007a48 <USB_ReadInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800325c:	d13a      	bne.n	80032d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f005 f830 	bl	80082c8 <USB_HC_ReadInterrupt>
 8003268:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e025      	b.n	80032bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d018      	beq.n	80032b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329a:	d106      	bne.n	80032aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8ab 	bl	80033fe <HCD_HC_IN_IRQHandler>
 80032a8:	e005      	b.n	80032b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fbf9 	bl	8003aa8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3d4      	bcc.n	8003270 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ce:	615a      	str	r2, [r3, #20]
 80032d0:	e000      	b.n	80032d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80032d2:	bf00      	nop
    }
  }
}
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_HCD_Start+0x16>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e013      	b.n	8003318 <HAL_HCD_Start+0x3e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fd1c 	bl	8007d3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f004 fa34 	bl	8007776 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_HCD_Stop+0x16>
 8003332:	2302      	movs	r3, #2
 8003334:	e00d      	b.n	8003352 <HAL_HCD_Stop+0x32>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 f90a 	bl	800855c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fcbe 	bl	8007ce8 <USB_ResetPort>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	781b      	ldrb	r3, [r3, #0]
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3350      	adds	r3, #80	; 0x50
 80033b8:	681b      	ldr	r3, [r3, #0]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f004 fd02 	bl	8007ddc <USB_GetCurrentFrame>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fcdd 	bl	8007dae <USB_GetHostSpeed>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d11a      	bne.n	8003464 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	461a      	mov	r2, r3
 800343c:	2304      	movs	r3, #4
 800343e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3361      	adds	r3, #97	; 0x61
 800344e:	2206      	movs	r2, #6
 8003450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f004 ff44 	bl	80082ea <USB_HC_Halt>
 8003462:	e0af      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d11b      	bne.n	80034b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3361      	adds	r3, #97	; 0x61
 800349e:	2207      	movs	r2, #7
 80034a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 ff1c 	bl	80082ea <USB_HC_Halt>
 80034b2:	e087      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d109      	bne.n	80034de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	461a      	mov	r2, r3
 80034d8:	2320      	movs	r3, #32
 80034da:	6093      	str	r3, [r2, #8]
 80034dc:	e072      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d11a      	bne.n	800352a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	2308      	movs	r3, #8
 8003504:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3361      	adds	r3, #97	; 0x61
 8003514:	2205      	movs	r2, #5
 8003516:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fee1 	bl	80082ea <USB_HC_Halt>
 8003528:	e04c      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d11b      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3361      	adds	r3, #97	; 0x61
 8003564:	2208      	movs	r2, #8
 8003566:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f004 feb9 	bl	80082ea <USB_HC_Halt>
 8003578:	e024      	b.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d119      	bne.n	80035c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	212c      	movs	r1, #44	; 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3361      	adds	r3, #97	; 0x61
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fe93 	bl	80082ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035da:	d112      	bne.n	8003602 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fe7f 	bl	80082ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003600:	e24e      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 80df 	bne.w	80037d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d019      	beq.n	8003656 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3348      	adds	r3, #72	; 0x48
 8003630:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	440b      	add	r3, r1
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	202c      	movs	r0, #44	; 0x2c
 800364c:	fb00 f303 	mul.w	r3, r0, r3
 8003650:	440b      	add	r3, r1
 8003652:	3350      	adds	r3, #80	; 0x50
 8003654:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3361      	adds	r3, #97	; 0x61
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	2301      	movs	r3, #1
 800368a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	333f      	adds	r3, #63	; 0x3f
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	333f      	adds	r3, #63	; 0x3f
 80036ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d111      	bne.n	80036d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 fe13 	bl	80082ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2310      	movs	r3, #16
 80036d4:	6093      	str	r3, [r2, #8]
 80036d6:	e03a      	b.n	800374e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333f      	adds	r3, #63	; 0x3f
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d009      	beq.n	8003700 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	333f      	adds	r3, #63	; 0x3f
 80036fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d126      	bne.n	800374e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	440a      	add	r2, r1
 8003716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800371e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3360      	adds	r3, #96	; 0x60
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	202c      	movs	r0, #44	; 0x2c
 800373c:	fb00 f303 	mul.w	r3, r0, r3
 8003740:	4413      	add	r3, r2
 8003742:	3360      	adds	r3, #96	; 0x60
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f00a fd31 	bl	800e1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d12b      	bne.n	80037ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	3348      	adds	r3, #72	; 0x48
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	202c      	movs	r0, #44	; 0x2c
 800376c:	fb00 f202 	mul.w	r2, r0, r2
 8003770:	440a      	add	r2, r1
 8003772:	3240      	adds	r2, #64	; 0x40
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	fbb3 f3f2 	udiv	r3, r3, r2
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 818e 	beq.w	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3354      	adds	r3, #84	; 0x54
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f083 0301 	eor.w	r3, r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	3354      	adds	r3, #84	; 0x54
 80037a8:	4602      	mov	r2, r0
 80037aa:	701a      	strb	r2, [r3, #0]
}
 80037ac:	e178      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	3354      	adds	r3, #84	; 0x54
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f083 0301 	eor.w	r3, r3, #1
 80037c2:	b2d8      	uxtb	r0, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3354      	adds	r3, #84	; 0x54
 80037d2:	4602      	mov	r2, r0
 80037d4:	701a      	strb	r2, [r3, #0]
}
 80037d6:	e163      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	f040 80f6 	bne.w	80039dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3361      	adds	r3, #97	; 0x61
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d109      	bne.n	8003818 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3360      	adds	r3, #96	; 0x60
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e0c9      	b.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	3361      	adds	r3, #97	; 0x61
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d109      	bne.n	8003840 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3360      	adds	r3, #96	; 0x60
 800383a:	2205      	movs	r2, #5
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e0b5      	b.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	212c      	movs	r1, #44	; 0x2c
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	3361      	adds	r3, #97	; 0x61
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d009      	beq.n	8003868 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3361      	adds	r3, #97	; 0x61
 8003862:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003864:	2b08      	cmp	r3, #8
 8003866:	d150      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	202c      	movs	r0, #44	; 0x2c
 8003880:	fb00 f303 	mul.w	r3, r0, r3
 8003884:	440b      	add	r3, r1
 8003886:	335c      	adds	r3, #92	; 0x5c
 8003888:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	335c      	adds	r3, #92	; 0x5c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d912      	bls.n	80038c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	335c      	adds	r3, #92	; 0x5c
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	2204      	movs	r2, #4
 80038c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038c2:	e073      	b.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3360      	adds	r3, #96	; 0x60
 80038d2:	2202      	movs	r2, #2
 80038d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003908:	e050      	b.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3361      	adds	r3, #97	; 0x61
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d122      	bne.n	8003964 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3360      	adds	r3, #96	; 0x60
 800392c:	2202      	movs	r2, #2
 800392e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003946:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e023      	b.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3361      	adds	r3, #97	; 0x61
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b07      	cmp	r3, #7
 8003976:	d119      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	335c      	adds	r3, #92	; 0x5c
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	202c      	movs	r0, #44	; 0x2c
 8003990:	fb00 f303 	mul.w	r3, r0, r3
 8003994:	440b      	add	r3, r1
 8003996:	335c      	adds	r3, #92	; 0x5c
 8003998:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3360      	adds	r3, #96	; 0x60
 80039a8:	2204      	movs	r2, #4
 80039aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	2302      	movs	r3, #2
 80039bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	b2d9      	uxtb	r1, r3
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	202c      	movs	r0, #44	; 0x2c
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f00a fbeb 	bl	800e1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039da:	e061      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d156      	bne.n	8003aa0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	333f      	adds	r3, #63	; 0x3f
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d111      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	335c      	adds	r3, #92	; 0x5c
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 fc61 	bl	80082ea <USB_HC_Halt>
 8003a28:	e031      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	333f      	adds	r3, #63	; 0x3f
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	212c      	movs	r1, #44	; 0x2c
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	333f      	adds	r3, #63	; 0x3f
 8003a4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d11d      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	335c      	adds	r3, #92	; 0x5c
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d110      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3361      	adds	r3, #97	; 0x61
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 fc2e 	bl	80082ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	6093      	str	r3, [r2, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11a      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3361      	adds	r3, #97	; 0x61
 8003af8:	2206      	movs	r2, #6
 8003afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 fbef 	bl	80082ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003b0c:	e331      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d12e      	bne.n	8003b82 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	2320      	movs	r3, #32
 8003b34:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	333d      	adds	r3, #61	; 0x3d
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	f040 8313 	bne.w	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	333d      	adds	r3, #61	; 0x3d
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3360      	adds	r3, #96	; 0x60
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fbb5 	bl	80082ea <USB_HC_Halt>
}
 8003b80:	e2f7      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d112      	bne.n	8003bc0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fb96 	bl	80082ea <USB_HC_Halt>
}
 8003bbe:	e2d8      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d140      	bne.n	8003c58 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	335c      	adds	r3, #92	; 0x5c
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d111      	bne.n	8003c22 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	333d      	adds	r3, #61	; 0x3d
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2340      	movs	r3, #64	; 0x40
 8003c20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2301      	movs	r3, #1
 8003c32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 fb4a 	bl	80082ea <USB_HC_Halt>
}
 8003c56:	e28c      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d12c      	bne.n	8003cc8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	3361      	adds	r3, #97	; 0x61
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	333d      	adds	r3, #61	; 0x3d
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	335c      	adds	r3, #92	; 0x5c
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fb1b 	bl	80082ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2340      	movs	r3, #64	; 0x40
 8003cc4:	6093      	str	r3, [r2, #8]
}
 8003cc6:	e254      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11a      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	461a      	mov	r2, r3
 8003cec:	2308      	movs	r3, #8
 8003cee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3361      	adds	r3, #97	; 0x61
 8003cfe:	2205      	movs	r2, #5
 8003d00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 faec 	bl	80082ea <USB_HC_Halt>
}
 8003d12:	e22e      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d140      	bne.n	8003dac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3361      	adds	r3, #97	; 0x61
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333d      	adds	r3, #61	; 0x3d
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d112      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	333c      	adds	r3, #60	; 0x3c
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	333d      	adds	r3, #61	; 0x3d
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 faa9 	bl	80082ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	2310      	movs	r3, #16
 8003da8:	6093      	str	r3, [r2, #8]
}
 8003daa:	e1e2      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d164      	bne.n	8003e8c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d111      	bne.n	8003dee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3361      	adds	r3, #97	; 0x61
 8003dd8:	2206      	movs	r2, #6
 8003dda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 fa7f 	bl	80082ea <USB_HC_Halt>
 8003dec:	e044      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	335c      	adds	r3, #92	; 0x5c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	202c      	movs	r0, #44	; 0x2c
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	335c      	adds	r3, #92	; 0x5c
 8003e0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	335c      	adds	r3, #92	; 0x5c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d920      	bls.n	8003e66 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	212c      	movs	r1, #44	; 0x2c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	335c      	adds	r3, #92	; 0x5c
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	3360      	adds	r3, #96	; 0x60
 8003e44:	2204      	movs	r2, #4
 8003e46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	b2d9      	uxtb	r1, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	202c      	movs	r0, #44	; 0x2c
 8003e52:	fb00 f303 	mul.w	r3, r0, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3360      	adds	r3, #96	; 0x60
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f00a f9a6 	bl	800e1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e64:	e008      	b.n	8003e78 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	3360      	adds	r3, #96	; 0x60
 8003e74:	2202      	movs	r2, #2
 8003e76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	6093      	str	r3, [r2, #8]
}
 8003e8a:	e172      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d11b      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3361      	adds	r3, #97	; 0x61
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 fa12 	bl	80082ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ed8:	6093      	str	r3, [r2, #8]
}
 8003eda:	e14a      	b.n	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f040 813f 	bne.w	8004172 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	3361      	adds	r3, #97	; 0x61
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d17d      	bne.n	8004004 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	3360      	adds	r3, #96	; 0x60
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	333f      	adds	r3, #63	; 0x3f
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d00a      	beq.n	8003f44 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	333f      	adds	r3, #63	; 0x3f
 8003f3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	f040 8100 	bne.w	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d113      	bne.n	8003f74 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3355      	adds	r3, #85	; 0x55
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f083 0301 	eor.w	r3, r3, #1
 8003f60:	b2d8      	uxtb	r0, r3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3355      	adds	r3, #85	; 0x55
 8003f70:	4602      	mov	r2, r0
 8003f72:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 80e3 	bne.w	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	334c      	adds	r3, #76	; 0x4c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80d8 	beq.w	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	334c      	adds	r3, #76	; 0x4c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	202c      	movs	r0, #44	; 0x2c
 8003faa:	fb00 f202 	mul.w	r2, r0, r2
 8003fae:	440a      	add	r2, r1
 8003fb0:	3240      	adds	r2, #64	; 0x40
 8003fb2:	8812      	ldrh	r2, [r2, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	202c      	movs	r0, #44	; 0x2c
 8003fbe:	fb00 f202 	mul.w	r2, r0, r2
 8003fc2:	440a      	add	r2, r1
 8003fc4:	3240      	adds	r2, #64	; 0x40
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b5 	beq.w	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3355      	adds	r3, #85	; 0x55
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	f083 0301 	eor.w	r3, r3, #1
 8003fee:	b2d8      	uxtb	r0, r3
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3355      	adds	r3, #85	; 0x55
 8003ffe:	4602      	mov	r2, r0
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e09f      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3361      	adds	r3, #97	; 0x61
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d109      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3360      	adds	r3, #96	; 0x60
 8004026:	2202      	movs	r2, #2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e08b      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3361      	adds	r3, #97	; 0x61
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d109      	bne.n	8004054 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3360      	adds	r3, #96	; 0x60
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e077      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3361      	adds	r3, #97	; 0x61
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d109      	bne.n	800407c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	2205      	movs	r2, #5
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e063      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3361      	adds	r3, #97	; 0x61
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b06      	cmp	r3, #6
 800408e:	d009      	beq.n	80040a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3361      	adds	r3, #97	; 0x61
 800409e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d14f      	bne.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	335c      	adds	r3, #92	; 0x5c
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	202c      	movs	r0, #44	; 0x2c
 80040bc:	fb00 f303 	mul.w	r3, r0, r3
 80040c0:	440b      	add	r3, r1
 80040c2:	335c      	adds	r3, #92	; 0x5c
 80040c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	212c      	movs	r1, #44	; 0x2c
 80040cc:	fb01 f303 	mul.w	r3, r1, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	335c      	adds	r3, #92	; 0x5c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d912      	bls.n	8004100 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	335c      	adds	r3, #92	; 0x5c
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3360      	adds	r3, #96	; 0x60
 80040fa:	2204      	movs	r2, #4
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e021      	b.n	8004144 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3360      	adds	r3, #96	; 0x60
 800410e:	2202      	movs	r2, #2
 8004110:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004128:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004130:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	461a      	mov	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2302      	movs	r3, #2
 8004154:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	202c      	movs	r0, #44	; 0x2c
 8004160:	fb00 f303 	mul.w	r3, r0, r3
 8004164:	4413      	add	r3, r2
 8004166:	3360      	adds	r3, #96	; 0x60
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f00a f81f 	bl	800e1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004172:	bf00      	nop
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08a      	sub	sp, #40	; 0x28
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	0c5b      	lsrs	r3, r3, #17
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d004      	beq.n	80041c0 <HCD_RXQLVL_IRQHandler+0x46>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	f000 80a9 	beq.w	8004310 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041be:	e0aa      	b.n	8004316 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80a6 	beq.w	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3344      	adds	r3, #68	; 0x44
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 809b 	beq.w	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3350      	adds	r3, #80	; 0x50
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	441a      	add	r2, r3
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	202c      	movs	r0, #44	; 0x2c
 80041f8:	fb00 f303 	mul.w	r3, r0, r3
 80041fc:	440b      	add	r3, r1
 80041fe:	334c      	adds	r3, #76	; 0x4c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d87a      	bhi.n	80042fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3344      	adds	r3, #68	; 0x44
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	b292      	uxth	r2, r2
 800421e:	4619      	mov	r1, r3
 8004220:	f003 fbba 	bl	8007998 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3344      	adds	r3, #68	; 0x44
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	441a      	add	r2, r3
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	202c      	movs	r0, #44	; 0x2c
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	440b      	add	r3, r1
 8004244:	3344      	adds	r3, #68	; 0x44
 8004246:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3350      	adds	r3, #80	; 0x50
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	441a      	add	r2, r3
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	202c      	movs	r0, #44	; 0x2c
 8004262:	fb00 f303 	mul.w	r3, r0, r3
 8004266:	440b      	add	r3, r1
 8004268:	3350      	adds	r3, #80	; 0x50
 800426a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	0cdb      	lsrs	r3, r3, #19
 800427c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004280:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3340      	adds	r3, #64	; 0x40
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4293      	cmp	r3, r2
 8004298:	d13c      	bne.n	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d039      	beq.n	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3354      	adds	r3, #84	; 0x54
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2d8      	uxtb	r0, r3
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3354      	adds	r3, #84	; 0x54
 80042f6:	4602      	mov	r2, r0
 80042f8:	701a      	strb	r2, [r3, #0]
      break;
 80042fa:	e00b      	b.n	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	212c      	movs	r1, #44	; 0x2c
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4413      	add	r3, r2
 8004308:	3360      	adds	r3, #96	; 0x60
 800430a:	2204      	movs	r2, #4
 800430c:	701a      	strb	r2, [r3, #0]
      break;
 800430e:	e001      	b.n	8004314 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004314:	bf00      	nop
  }
}
 8004316:	bf00      	nop
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800434a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	d10b      	bne.n	800436e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f009 ff09 	bl	800e178 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d132      	bne.n	80043de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d126      	bne.n	80043d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d113      	bne.n	80043ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439c:	d106      	bne.n	80043ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 fc65 	bl	8007c74 <USB_InitFSLSPClkSel>
 80043aa:	e011      	b.n	80043d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f003 fc5e 	bl	8007c74 <USB_InitFSLSPClkSel>
 80043b8:	e00a      	b.n	80043d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d106      	bne.n	80043d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043c8:	461a      	mov	r2, r3
 80043ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f009 fefb 	bl	800e1cc <HAL_HCD_PortEnabled_Callback>
 80043d6:	e002      	b.n	80043de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f009 ff05 	bl	800e1e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d103      	bne.n	80043f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f043 0320 	orr.w	r3, r3, #32
 80043ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e12b      	b.n	800466e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc ffea 	bl	8001404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004468:	f002 fc6e 	bl	8006d48 <HAL_RCC_GetPCLK1Freq>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a81      	ldr	r2, [pc, #516]	; (8004678 <HAL_I2C_Init+0x274>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d807      	bhi.n	8004488 <HAL_I2C_Init+0x84>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a80      	ldr	r2, [pc, #512]	; (800467c <HAL_I2C_Init+0x278>)
 800447c:	4293      	cmp	r3, r2
 800447e:	bf94      	ite	ls
 8004480:	2301      	movls	r3, #1
 8004482:	2300      	movhi	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e006      	b.n	8004496 <HAL_I2C_Init+0x92>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a7d      	ldr	r2, [pc, #500]	; (8004680 <HAL_I2C_Init+0x27c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	bf94      	ite	ls
 8004490:	2301      	movls	r3, #1
 8004492:	2300      	movhi	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e0e7      	b.n	800466e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a78      	ldr	r2, [pc, #480]	; (8004684 <HAL_I2C_Init+0x280>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0c9b      	lsrs	r3, r3, #18
 80044a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a6a      	ldr	r2, [pc, #424]	; (8004678 <HAL_I2C_Init+0x274>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d802      	bhi.n	80044d8 <HAL_I2C_Init+0xd4>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	e009      	b.n	80044ec <HAL_I2C_Init+0xe8>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	4a69      	ldr	r2, [pc, #420]	; (8004688 <HAL_I2C_Init+0x284>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	495c      	ldr	r1, [pc, #368]	; (8004678 <HAL_I2C_Init+0x274>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d819      	bhi.n	8004540 <HAL_I2C_Init+0x13c>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1e59      	subs	r1, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fbb1 f3f3 	udiv	r3, r1, r3
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004520:	400b      	ands	r3, r1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_I2C_Init+0x138>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1e59      	subs	r1, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fbb1 f3f3 	udiv	r3, r1, r3
 8004534:	3301      	adds	r3, #1
 8004536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453a:	e051      	b.n	80045e0 <HAL_I2C_Init+0x1dc>
 800453c:	2304      	movs	r3, #4
 800453e:	e04f      	b.n	80045e0 <HAL_I2C_Init+0x1dc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <HAL_I2C_Init+0x168>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1e58      	subs	r0, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	440b      	add	r3, r1
 8004556:	fbb0 f3f3 	udiv	r3, r0, r3
 800455a:	3301      	adds	r3, #1
 800455c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e012      	b.n	8004592 <HAL_I2C_Init+0x18e>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1e58      	subs	r0, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	0099      	lsls	r1, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004582:	3301      	adds	r3, #1
 8004584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Init+0x196>
 8004596:	2301      	movs	r3, #1
 8004598:	e022      	b.n	80045e0 <HAL_I2C_Init+0x1dc>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <HAL_I2C_Init+0x1bc>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1e58      	subs	r0, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	440b      	add	r3, r1
 80045b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Init+0x1dc>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e58      	subs	r0, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	0099      	lsls	r1, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	6809      	ldr	r1, [r1, #0]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800460e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6911      	ldr	r1, [r2, #16]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	4311      	orrs	r1, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695a      	ldr	r2, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	000186a0 	.word	0x000186a0
 800467c:	001e847f 	.word	0x001e847f
 8004680:	003d08ff 	.word	0x003d08ff
 8004684:	431bde83 	.word	0x431bde83
 8004688:	10624dd3 	.word	0x10624dd3

0800468c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	461a      	mov	r2, r3
 8004698:	460b      	mov	r3, r1
 800469a:	817b      	strh	r3, [r7, #10]
 800469c:	4613      	mov	r3, r2
 800469e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7fd fb14 	bl	8001ccc <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	f040 80e0 	bne.w	8004874 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2319      	movs	r3, #25
 80046ba:	2201      	movs	r2, #1
 80046bc:	4970      	ldr	r1, [pc, #448]	; (8004880 <HAL_I2C_Master_Transmit+0x1f4>)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fc58 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0d3      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_I2C_Master_Transmit+0x50>
 80046d8:	2302      	movs	r3, #2
 80046da:	e0cc      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d007      	beq.n	8004702 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004710:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2221      	movs	r2, #33	; 0x21
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2210      	movs	r2, #16
 800471e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	893a      	ldrh	r2, [r7, #8]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a50      	ldr	r2, [pc, #320]	; (8004884 <HAL_I2C_Master_Transmit+0x1f8>)
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004744:	8979      	ldrh	r1, [r7, #10]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	6a3a      	ldr	r2, [r7, #32]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fac2 	bl	8004cd4 <I2C_MasterRequestWrite>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e08d      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004770:	e066      	b.n	8004840 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fcd2 	bl	8005120 <I2C_WaitOnTXEFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b04      	cmp	r3, #4
 8004788:	d107      	bne.n	800479a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004798:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06b      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d11b      	bne.n	8004814 <HAL_I2C_Master_Transmit+0x188>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d017      	beq.n	8004814 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	6a39      	ldr	r1, [r7, #32]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 fcc2 	bl	80051a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00d      	beq.n	8004840 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	2b04      	cmp	r3, #4
 800482a:	d107      	bne.n	800483c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e01a      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004844:	2b00      	cmp	r3, #0
 8004846:	d194      	bne.n	8004772 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	00100002 	.word	0x00100002
 8004884:	ffff0000 	.word	0xffff0000

08004888 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	461a      	mov	r2, r3
 8004894:	460b      	mov	r3, r1
 8004896:	817b      	strh	r3, [r7, #10]
 8004898:	4613      	mov	r3, r2
 800489a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7fd fa16 	bl	8001ccc <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	f040 820b 	bne.w	8004cc6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2319      	movs	r3, #25
 80048b6:	2201      	movs	r2, #1
 80048b8:	497c      	ldr	r1, [pc, #496]	; (8004aac <HAL_I2C_Master_Receive+0x224>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fb5a 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e1fe      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2C_Master_Receive+0x50>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e1f7      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d007      	beq.n	80048fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2222      	movs	r2, #34	; 0x22
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2210      	movs	r2, #16
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	893a      	ldrh	r2, [r7, #8]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a5c      	ldr	r2, [pc, #368]	; (8004ab0 <HAL_I2C_Master_Receive+0x228>)
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa46 	bl	8004dd8 <I2C_MasterRequestRead>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1b8      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d113      	bne.n	8004986 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e18c      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	2b01      	cmp	r3, #1
 800498c:	d11b      	bne.n	80049c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e16c      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d11b      	bne.n	8004a06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	e14c      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a2c:	e138      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	f200 80f1 	bhi.w	8004c1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d123      	bne.n	8004a88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fbed 	bl	8005224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e139      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a86:	e10b      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d14e      	bne.n	8004b2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	2200      	movs	r2, #0
 8004a98:	4906      	ldr	r1, [pc, #24]	; (8004ab4 <HAL_I2C_Master_Receive+0x22c>)
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa6a 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e10e      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
 8004aaa:	bf00      	nop
 8004aac:	00100002 	.word	0x00100002
 8004ab0:	ffff0000 	.word	0xffff0000
 8004ab4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b2c:	e0b8      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	2200      	movs	r2, #0
 8004b36:	4966      	ldr	r1, [pc, #408]	; (8004cd0 <HAL_I2C_Master_Receive+0x448>)
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fa1b 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0bf      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2200      	movs	r2, #0
 8004b92:	494f      	ldr	r1, [pc, #316]	; (8004cd0 <HAL_I2C_Master_Receive+0x448>)
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f9ed 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e091      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c18:	e042      	b.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fb00 	bl	8005224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e04c      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d118      	bne.n	8004ca0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f47f aec2 	bne.w	8004a2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	; 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	00010004 	.word	0x00010004

08004cd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d006      	beq.n	8004cfe <I2C_MasterRequestWrite+0x2a>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <I2C_MasterRequestWrite+0x2a>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cfc:	d108      	bne.n	8004d10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e00b      	b.n	8004d28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b12      	cmp	r3, #18
 8004d16:	d107      	bne.n	8004d28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f91d 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d103      	bne.n	8004d58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e035      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d64:	d108      	bne.n	8004d78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d74:	611a      	str	r2, [r3, #16]
 8004d76:	e01b      	b.n	8004db0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d78:	897b      	ldrh	r3, [r7, #10]
 8004d7a:	11db      	asrs	r3, r3, #7
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0306 	and.w	r3, r3, #6
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f063 030f 	orn	r3, r3, #15
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	490e      	ldr	r1, [pc, #56]	; (8004dd0 <I2C_MasterRequestWrite+0xfc>)
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f943 	bl	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e010      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4907      	ldr	r1, [pc, #28]	; (8004dd4 <I2C_MasterRequestWrite+0x100>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f933 	bl	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	00010008 	.word	0x00010008
 8004dd4:	00010002 	.word	0x00010002

08004dd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d006      	beq.n	8004e12 <I2C_MasterRequestRead+0x3a>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d003      	beq.n	8004e12 <I2C_MasterRequestRead+0x3a>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e10:	d108      	bne.n	8004e24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e00b      	b.n	8004e3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b11      	cmp	r3, #17
 8004e2a:	d107      	bne.n	8004e3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f893 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e62:	d103      	bne.n	8004e6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e079      	b.n	8004f64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e78:	d108      	bne.n	8004e8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e7a:	897b      	ldrh	r3, [r7, #10]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	611a      	str	r2, [r3, #16]
 8004e8a:	e05f      	b.n	8004f4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	11db      	asrs	r3, r3, #7
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0306 	and.w	r3, r3, #6
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f063 030f 	orn	r3, r3, #15
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4930      	ldr	r1, [pc, #192]	; (8004f6c <I2C_MasterRequestRead+0x194>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8b9 	bl	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e054      	b.n	8004f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eba:	897b      	ldrh	r3, [r7, #10]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4929      	ldr	r1, [pc, #164]	; (8004f70 <I2C_MasterRequestRead+0x198>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f8a9 	bl	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e044      	b.n	8004f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f831 	bl	8004f74 <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f26:	d103      	bne.n	8004f30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e017      	b.n	8004f64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	11db      	asrs	r3, r3, #7
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f003 0306 	and.w	r3, r3, #6
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f063 030e 	orn	r3, r3, #14
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4907      	ldr	r1, [pc, #28]	; (8004f70 <I2C_MasterRequestRead+0x198>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f865 	bl	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	00010008 	.word	0x00010008
 8004f70:	00010002 	.word	0x00010002

08004f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f84:	e025      	b.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d021      	beq.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8e:	f7fc fe9d 	bl	8001ccc <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d302      	bcc.n	8004fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d116      	bne.n	8004fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e023      	b.n	800501a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10d      	bne.n	8004ff8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	e00c      	b.n	8005012 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	429a      	cmp	r2, r3
 8005016:	d0b6      	beq.n	8004f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005030:	e051      	b.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d123      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005050:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800505a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0204 	orr.w	r2, r3, #4
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e046      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d021      	beq.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fc fe1b 	bl	8001ccc <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d116      	bne.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e020      	b.n	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10c      	bne.n	80050fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	43da      	mvns	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4013      	ands	r3, r2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e00b      	b.n	8005112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	43da      	mvns	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4013      	ands	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d18d      	bne.n	8005032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800512c:	e02d      	b.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8ce 	bl	80052d0 <I2C_IsAcknowledgeFailed>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e02d      	b.n	800519a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d021      	beq.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fc fdc1 	bl	8001ccc <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d116      	bne.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	d1ca      	bne.n	800512e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051ae:	e02d      	b.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f88d 	bl	80052d0 <I2C_IsAcknowledgeFailed>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e02d      	b.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d021      	beq.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	f7fc fd80 	bl	8001ccc <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d302      	bcc.n	80051de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d116      	bne.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f043 0220 	orr.w	r2, r3, #32
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e007      	b.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b04      	cmp	r3, #4
 8005218:	d1ca      	bne.n	80051b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005230:	e042      	b.n	80052b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b10      	cmp	r3, #16
 800523e:	d119      	bne.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0210 	mvn.w	r2, #16
 8005248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e029      	b.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fc fd2a 	bl	8001ccc <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d116      	bne.n	80052b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e007      	b.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d1b5      	bne.n	8005232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e6:	d11b      	bne.n	8005320 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f043 0204 	orr.w	r2, r3, #4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e128      	b.n	8005594 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_I2S_Init+0x26c>)
 800535a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc f899 	bl	8001494 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005378:	f023 030f 	bic.w	r3, r3, #15
 800537c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2202      	movs	r2, #2
 8005384:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d060      	beq.n	8005450 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005396:	2310      	movs	r3, #16
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e001      	b.n	80053a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800539c:	2320      	movs	r3, #32
 800539e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d802      	bhi.n	80053ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f001 fdec 	bl	8006f8c <HAL_RCCEx_GetPeriphCLKFreq>
 80053b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053be:	d125      	bne.n	800540c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	3305      	adds	r3, #5
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	e01f      	b.n	800542a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	461a      	mov	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	3305      	adds	r3, #5
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e00e      	b.n	800542a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	fbb2 f2f3 	udiv	r2, r2, r3
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	461a      	mov	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	3305      	adds	r3, #5
 8005428:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <HAL_I2S_Init+0x270>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	08db      	lsrs	r3, r3, #3
 8005434:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e003      	b.n	8005458 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005450:	2302      	movs	r3, #2
 8005452:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d902      	bls.n	8005464 <HAL_I2S_Init+0x134>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2bff      	cmp	r3, #255	; 0xff
 8005462:	d907      	bls.n	8005474 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	f043 0210 	orr.w	r2, r3, #16
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e08f      	b.n	8005594 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	ea42 0103 	orr.w	r1, r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	430a      	orrs	r2, r1
 8005486:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005492:	f023 030f 	bic.w	r3, r3, #15
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6851      	ldr	r1, [r2, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6892      	ldr	r2, [r2, #8]
 800549e:	4311      	orrs	r1, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68d2      	ldr	r2, [r2, #12]
 80054a4:	4311      	orrs	r1, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6992      	ldr	r2, [r2, #24]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d161      	bne.n	8005584 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <HAL_I2S_Init+0x274>)
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a37      	ldr	r2, [pc, #220]	; (80055a8 <HAL_I2S_Init+0x278>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_I2S_Init+0x1a4>
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_I2S_Init+0x27c>)
 80054d2:	e001      	b.n	80054d8 <HAL_I2S_Init+0x1a8>
 80054d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	4932      	ldr	r1, [pc, #200]	; (80055a8 <HAL_I2S_Init+0x278>)
 80054e0:	428a      	cmp	r2, r1
 80054e2:	d101      	bne.n	80054e8 <HAL_I2S_Init+0x1b8>
 80054e4:	4a31      	ldr	r2, [pc, #196]	; (80055ac <HAL_I2S_Init+0x27c>)
 80054e6:	e001      	b.n	80054ec <HAL_I2S_Init+0x1bc>
 80054e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80054ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054f0:	f023 030f 	bic.w	r3, r3, #15
 80054f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <HAL_I2S_Init+0x278>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_I2S_Init+0x1d4>
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_I2S_Init+0x27c>)
 8005502:	e001      	b.n	8005508 <HAL_I2S_Init+0x1d8>
 8005504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005508:	2202      	movs	r2, #2
 800550a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <HAL_I2S_Init+0x278>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_I2S_Init+0x1ea>
 8005516:	4b25      	ldr	r3, [pc, #148]	; (80055ac <HAL_I2S_Init+0x27c>)
 8005518:	e001      	b.n	800551e <HAL_I2S_Init+0x1ee>
 800551a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552a:	d003      	beq.n	8005534 <HAL_I2S_Init+0x204>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e001      	b.n	8005540 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800554a:	4313      	orrs	r3, r2
 800554c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005554:	4313      	orrs	r3, r2
 8005556:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800555e:	4313      	orrs	r3, r2
 8005560:	b29a      	uxth	r2, r3
 8005562:	897b      	ldrh	r3, [r7, #10]
 8005564:	4313      	orrs	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800556c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <HAL_I2S_Init+0x278>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_I2S_Init+0x24c>
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <HAL_I2S_Init+0x27c>)
 800557a:	e001      	b.n	8005580 <HAL_I2S_Init+0x250>
 800557c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005580:	897a      	ldrh	r2, [r7, #10]
 8005582:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	08005e2d 	.word	0x08005e2d
 80055a0:	cccccccd 	.word	0xcccccccd
 80055a4:	08005fb5 	.word	0x08005fb5
 80055a8:	40003800 	.word	0x40003800
 80055ac:	40003400 	.word	0x40003400

080055b0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_I2S_Transmit_DMA+0x1a>
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e08e      	b.n	80056ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_I2S_Transmit_DMA+0x2e>
 80055da:	2302      	movs	r3, #2
 80055dc:	e086      	b.n	80056ec <HAL_I2S_Transmit_DMA+0x13c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d005      	beq.n	80055fe <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
 80055fc:	e076      	b.n	80056ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b03      	cmp	r3, #3
 8005622:	d002      	beq.n	800562a <HAL_I2S_Transmit_DMA+0x7a>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d10a      	bne.n	8005640 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563e:	e005      	b.n	800564c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <HAL_I2S_Transmit_DMA+0x144>)
 8005652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <HAL_I2S_Transmit_DMA+0x148>)
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	4a26      	ldr	r2, [pc, #152]	; (80056fc <HAL_I2S_Transmit_DMA+0x14c>)
 8005662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800566c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005674:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800567c:	f7fc fd86 	bl	800218c <HAL_DMA_Start_IT>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00f      	beq.n	80056a6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	f043 0208 	orr.w	r2, r3, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e022      	b.n	80056ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0202 	orr.w	r2, r2, #2
 80056e0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	08005d0b 	.word	0x08005d0b
 80056f8:	08005cc9 	.word	0x08005cc9
 80056fc:	08005d27 	.word	0x08005d27

08005700 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_I2S_DMAPause+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e04a      	b.n	80057ae <HAL_I2S_DMAPause+0xae>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b03      	cmp	r3, #3
 800572a:	d108      	bne.n	800573e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0202 	bic.w	r2, r2, #2
 800573a:	605a      	str	r2, [r3, #4]
 800573c:	e032      	b.n	80057a4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b04      	cmp	r3, #4
 8005748:	d108      	bne.n	800575c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e023      	b.n	80057a4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b05      	cmp	r3, #5
 8005766:	d11d      	bne.n	80057a4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0203 	bic.w	r2, r2, #3
 8005776:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <HAL_I2S_DMAPause+0xbc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_I2S_DMAPause+0x86>
 8005782:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <HAL_I2S_DMAPause+0xc0>)
 8005784:	e001      	b.n	800578a <HAL_I2S_DMAPause+0x8a>
 8005786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	490a      	ldr	r1, [pc, #40]	; (80057bc <HAL_I2S_DMAPause+0xbc>)
 8005792:	428b      	cmp	r3, r1
 8005794:	d101      	bne.n	800579a <HAL_I2S_DMAPause+0x9a>
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_I2S_DMAPause+0xc0>)
 8005798:	e001      	b.n	800579e <HAL_I2S_DMAPause+0x9e>
 800579a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800579e:	f022 0203 	bic.w	r2, r2, #3
 80057a2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40003800 	.word	0x40003800
 80057c0:	40003400 	.word	0x40003400

080057c4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2S_DMAResume+0x18>
 80057d8:	2302      	movs	r3, #2
 80057da:	e07d      	b.n	80058d8 <HAL_I2S_DMAResume+0x114>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d108      	bne.n	8005802 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0202 	orr.w	r2, r2, #2
 80057fe:	605a      	str	r2, [r3, #4]
 8005800:	e056      	b.n	80058b0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b04      	cmp	r3, #4
 800580c:	d108      	bne.n	8005820 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	e047      	b.n	80058b0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b05      	cmp	r3, #5
 800582a:	d141      	bne.n	80058b0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0203 	orr.w	r2, r2, #3
 800583a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a28      	ldr	r2, [pc, #160]	; (80058e4 <HAL_I2S_DMAResume+0x120>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_I2S_DMAResume+0x86>
 8005846:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_I2S_DMAResume+0x124>)
 8005848:	e001      	b.n	800584e <HAL_I2S_DMAResume+0x8a>
 800584a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4923      	ldr	r1, [pc, #140]	; (80058e4 <HAL_I2S_DMAResume+0x120>)
 8005856:	428b      	cmp	r3, r1
 8005858:	d101      	bne.n	800585e <HAL_I2S_DMAResume+0x9a>
 800585a:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_I2S_DMAResume+0x124>)
 800585c:	e001      	b.n	8005862 <HAL_I2S_DMAResume+0x9e>
 800585e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005862:	f042 0203 	orr.w	r2, r2, #3
 8005866:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_I2S_DMAResume+0x120>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_I2S_DMAResume+0xb2>
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_I2S_DMAResume+0x124>)
 8005874:	e001      	b.n	800587a <HAL_I2S_DMAResume+0xb6>
 8005876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	2b00      	cmp	r3, #0
 8005882:	d115      	bne.n	80058b0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <HAL_I2S_DMAResume+0x120>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <HAL_I2S_DMAResume+0xce>
 800588e:	4b16      	ldr	r3, [pc, #88]	; (80058e8 <HAL_I2S_DMAResume+0x124>)
 8005890:	e001      	b.n	8005896 <HAL_I2S_DMAResume+0xd2>
 8005892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4911      	ldr	r1, [pc, #68]	; (80058e4 <HAL_I2S_DMAResume+0x120>)
 800589e:	428b      	cmp	r3, r1
 80058a0:	d101      	bne.n	80058a6 <HAL_I2S_DMAResume+0xe2>
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_I2S_DMAResume+0x124>)
 80058a4:	e001      	b.n	80058aa <HAL_I2S_DMAResume+0xe6>
 80058a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058ae:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058cc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40003800 	.word	0x40003800
 80058e8:	40003400 	.word	0x40003400

080058ec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005900:	d004      	beq.n	800590c <HAL_I2S_DMAStop+0x20>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 80d1 	bne.w	8005aae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	4618      	mov	r0, r3
 800591a:	f7fc fc8f 	bl	800223c <HAL_DMA_Abort>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	f043 0208 	orr.w	r2, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005934:	2364      	movs	r3, #100	; 0x64
 8005936:	2201      	movs	r2, #1
 8005938:	2102      	movs	r1, #2
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb00 	bl	8005f40 <I2S_WaitFlagStateUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800595e:	2364      	movs	r3, #100	; 0x64
 8005960:	2200      	movs	r2, #0
 8005962:	2180      	movs	r1, #128	; 0x80
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 faeb 	bl	8005f40 <I2S_WaitFlagStateUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0202 	bic.w	r2, r2, #2
 80059b4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b05      	cmp	r3, #5
 80059c0:	f040 8165 	bne.w	8005c8e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fc fc33 	bl	800223c <HAL_DMA_Abort>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	f043 0208 	orr.w	r2, r3, #8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a8a      	ldr	r2, [pc, #552]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d101      	bne.n	80059fa <HAL_I2S_DMAStop+0x10e>
 80059f6:	4b8a      	ldr	r3, [pc, #552]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 80059f8:	e001      	b.n	80059fe <HAL_I2S_DMAStop+0x112>
 80059fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4985      	ldr	r1, [pc, #532]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a06:	428b      	cmp	r3, r1
 8005a08:	d101      	bne.n	8005a0e <HAL_I2S_DMAStop+0x122>
 8005a0a:	4b85      	ldr	r3, [pc, #532]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005a0c:	e001      	b.n	8005a12 <HAL_I2S_DMAStop+0x126>
 8005a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a7e      	ldr	r2, [pc, #504]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_I2S_DMAStop+0x13e>
 8005a26:	4b7e      	ldr	r3, [pc, #504]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005a28:	e001      	b.n	8005a2e <HAL_I2S_DMAStop+0x142>
 8005a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a79      	ldr	r2, [pc, #484]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2S_DMAStop+0x154>
 8005a3c:	4b78      	ldr	r3, [pc, #480]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005a3e:	e001      	b.n	8005a44 <HAL_I2S_DMAStop+0x158>
 8005a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a73      	ldr	r2, [pc, #460]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_I2S_DMAStop+0x16c>
 8005a54:	4b72      	ldr	r3, [pc, #456]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005a56:	e001      	b.n	8005a5c <HAL_I2S_DMAStop+0x170>
 8005a58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	496e      	ldr	r1, [pc, #440]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a64:	428b      	cmp	r3, r1
 8005a66:	d101      	bne.n	8005a6c <HAL_I2S_DMAStop+0x180>
 8005a68:	4b6d      	ldr	r3, [pc, #436]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005a6a:	e001      	b.n	8005a70 <HAL_I2S_DMAStop+0x184>
 8005a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005a96:	e0fa      	b.n	8005c8e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5f      	ldr	r2, [pc, #380]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2S_DMAStop+0x1ba>
 8005aa2:	4b5f      	ldr	r3, [pc, #380]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005aa4:	e001      	b.n	8005aaa <HAL_I2S_DMAStop+0x1be>
 8005aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aaa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005aac:	e0ef      	b.n	8005c8e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab6:	d005      	beq.n	8005ac4 <HAL_I2S_DMAStop+0x1d8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac0:	f040 80e5 	bne.w	8005c8e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fc fbb3 	bl	800223c <HAL_DMA_Abort>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	f043 0208 	orr.w	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	f040 809a 	bne.w	8005c2e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00f      	beq.n	8005b22 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fc fb98 	bl	800223c <HAL_DMA_Abort>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f043 0208 	orr.w	r2, r3, #8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005b22:	f7fc f8d3 	bl	8001ccc <HAL_GetTick>
 8005b26:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005b28:	e012      	b.n	8005b50 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005b2a:	f7fc f8cf 	bl	8001ccc <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b64      	cmp	r3, #100	; 0x64
 8005b36:	d90b      	bls.n	8005b50 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a31      	ldr	r2, [pc, #196]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_I2S_DMAStop+0x272>
 8005b5a:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005b5c:	e001      	b.n	8005b62 <HAL_I2S_DMAStop+0x276>
 8005b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d1de      	bne.n	8005b2a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005b6c:	e012      	b.n	8005b94 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005b6e:	f7fc f8ad 	bl	8001ccc <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b64      	cmp	r3, #100	; 0x64
 8005b7a:	d90b      	bls.n	8005b94 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	f043 0201 	orr.w	r2, r3, #1
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a20      	ldr	r2, [pc, #128]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2S_DMAStop+0x2b6>
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005ba0:	e001      	b.n	8005ba6 <HAL_I2S_DMAStop+0x2ba>
 8005ba2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d0de      	beq.n	8005b6e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2S_DMAStop+0x2d2>
 8005bba:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005bbc:	e001      	b.n	8005bc2 <HAL_I2S_DMAStop+0x2d6>
 8005bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4914      	ldr	r1, [pc, #80]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005bca:	428b      	cmp	r3, r1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2S_DMAStop+0x2e6>
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005bd0:	e001      	b.n	8005bd6 <HAL_I2S_DMAStop+0x2ea>
 8005bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d101      	bne.n	8005bee <HAL_I2S_DMAStop+0x302>
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005bec:	e001      	b.n	8005bf2 <HAL_I2S_DMAStop+0x306>
 8005bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a07      	ldr	r2, [pc, #28]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d101      	bne.n	8005c06 <HAL_I2S_DMAStop+0x31a>
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005c04:	e001      	b.n	8005c0a <HAL_I2S_DMAStop+0x31e>
 8005c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4902      	ldr	r1, [pc, #8]	; (8005c1c <HAL_I2S_DMAStop+0x330>)
 8005c12:	428b      	cmp	r3, r1
 8005c14:	d106      	bne.n	8005c24 <HAL_I2S_DMAStop+0x338>
 8005c16:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <HAL_I2S_DMAStop+0x334>)
 8005c18:	e006      	b.n	8005c28 <HAL_I2S_DMAStop+0x33c>
 8005c1a:	bf00      	nop
 8005c1c:	40003800 	.word	0x40003800
 8005c20:	40003400 	.word	0x40003400
 8005c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c28:	f022 0202 	bic.w	r2, r2, #2
 8005c2c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6c:	d10c      	bne.n	8005c88 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e002      	b.n	8005c8e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10e      	bne.n	8005cfc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0202 	bic.w	r2, r2, #2
 8005cec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7fb ff29 	bl	8001b54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7fb ff31 	bl	8001b80 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0203 	bic.w	r2, r2, #3
 8005d42:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	f043 0208 	orr.w	r2, r3, #8
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff ffa5 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	881a      	ldrh	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c9a      	adds	r2, r3, #2
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10e      	bne.n	8005dc6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005db6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fb fec7 	bl	8001b54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	b292      	uxth	r2, r2
 8005de2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	1c9a      	adds	r2, r3, #2
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff3e 	bl	8005ca0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e24:	bf00      	nop
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d13a      	bne.n	8005ebe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d109      	bne.n	8005e66 <I2S_IRQHandler+0x3a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d102      	bne.n	8005e66 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ffb4 	bl	8005dce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d126      	bne.n	8005ebe <I2S_IRQHandler+0x92>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d11f      	bne.n	8005ebe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e8c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb0:	f043 0202 	orr.w	r2, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fefb 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d136      	bne.n	8005f38 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d109      	bne.n	8005ee8 <I2S_IRQHandler+0xbc>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ede:	2b80      	cmp	r3, #128	; 0x80
 8005ee0:	d102      	bne.n	8005ee8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff45 	bl	8005d72 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d122      	bne.n	8005f38 <I2S_IRQHandler+0x10c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d11b      	bne.n	8005f38 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f0e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff febe 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f50:	f7fb febc 	bl	8001ccc <HAL_GetTick>
 8005f54:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005f56:	e018      	b.n	8005f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d014      	beq.n	8005f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005f60:	f7fb feb4 	bl	8001ccc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d902      	bls.n	8005f76 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e00f      	b.n	8005faa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1d7      	bne.n	8005f58 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a92      	ldr	r2, [pc, #584]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005fce:	4b92      	ldr	r3, [pc, #584]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fd0:	e001      	b.n	8005fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a8b      	ldr	r2, [pc, #556]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005fec:	4b8a      	ldr	r3, [pc, #552]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fee:	e001      	b.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006000:	d004      	beq.n	800600c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 8099 	bne.w	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b02      	cmp	r3, #2
 8006014:	d107      	bne.n	8006026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f925 	bl	8006270 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9c8 	bl	80063d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d13a      	bne.n	80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b00      	cmp	r3, #0
 8006052:	d035      	beq.n	80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a6e      	ldr	r2, [pc, #440]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d101      	bne.n	8006062 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800605e:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006060:	e001      	b.n	8006066 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4969      	ldr	r1, [pc, #420]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800606e:	428b      	cmp	r3, r1
 8006070:	d101      	bne.n	8006076 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006072:	4b69      	ldr	r3, [pc, #420]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006074:	e001      	b.n	800607a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800607a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800607e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800608e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fdfa 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	f040 80c3 	bne.w	8006252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80bd 	beq.w	8006252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a49      	ldr	r2, [pc, #292]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80060f2:	4b49      	ldr	r3, [pc, #292]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f4:	e001      	b.n	80060fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80060f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4944      	ldr	r1, [pc, #272]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006102:	428b      	cmp	r3, r1
 8006104:	d101      	bne.n	800610a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006106:	4b44      	ldr	r3, [pc, #272]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006108:	e001      	b.n	800610e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800610a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800610e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006112:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006114:	2300      	movs	r3, #0
 8006116:	60bb      	str	r3, [r7, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	f043 0204 	orr.w	r2, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff fdbc 	bl	8005cb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800613c:	e089      	b.n	8006252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d107      	bne.n	8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8be 	bl	80062d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d107      	bne.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8fd 	bl	800636c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d12f      	bne.n	80061dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d02a      	beq.n	80061dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006194:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80061a0:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061a2:	e001      	b.n	80061a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80061a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4919      	ldr	r1, [pc, #100]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061b0:	428b      	cmp	r3, r1
 80061b2:	d101      	bne.n	80061b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061b6:	e001      	b.n	80061bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80061b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	f043 0202 	orr.w	r2, r3, #2
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fd6c 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d136      	bne.n	8006254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d031      	beq.n	8006254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a07      	ldr	r2, [pc, #28]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061fc:	e001      	b.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80061fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4902      	ldr	r1, [pc, #8]	; (8006214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800620a:	428b      	cmp	r3, r1
 800620c:	d106      	bne.n	800621c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800620e:	4b02      	ldr	r3, [pc, #8]	; (8006218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006210:	e006      	b.n	8006220 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006212:	bf00      	nop
 8006214:	40003800 	.word	0x40003800
 8006218:	40003400 	.word	0x40003400
 800621c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006224:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006234:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	f043 0204 	orr.w	r2, r3, #4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fd32 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006250:	e000      	b.n	8006254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006252:	bf00      	nop
}
 8006254:	bf00      	nop
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	1c99      	adds	r1, r3, #2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6251      	str	r1, [r2, #36]	; 0x24
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d113      	bne.n	80062ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff ffc9 	bl	800625c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c99      	adds	r1, r3, #2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6251      	str	r1, [r2, #36]	; 0x24
 80062e6:	8819      	ldrh	r1, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <I2SEx_TxISR_I2SExt+0x90>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <I2SEx_TxISR_I2SExt+0x22>
 80062f2:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <I2SEx_TxISR_I2SExt+0x94>)
 80062f4:	e001      	b.n	80062fa <I2SEx_TxISR_I2SExt+0x26>
 80062f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fa:	460a      	mov	r2, r1
 80062fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d121      	bne.n	800635a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a12      	ldr	r2, [pc, #72]	; (8006364 <I2SEx_TxISR_I2SExt+0x90>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <I2SEx_TxISR_I2SExt+0x50>
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <I2SEx_TxISR_I2SExt+0x94>)
 8006322:	e001      	b.n	8006328 <I2SEx_TxISR_I2SExt+0x54>
 8006324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	490d      	ldr	r1, [pc, #52]	; (8006364 <I2SEx_TxISR_I2SExt+0x90>)
 8006330:	428b      	cmp	r3, r1
 8006332:	d101      	bne.n	8006338 <I2SEx_TxISR_I2SExt+0x64>
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <I2SEx_TxISR_I2SExt+0x94>)
 8006336:	e001      	b.n	800633c <I2SEx_TxISR_I2SExt+0x68>
 8006338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800633c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006340:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff81 	bl	800625c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40003800 	.word	0x40003800
 8006368:	40003400 	.word	0x40003400

0800636c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68d8      	ldr	r0, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	1c99      	adds	r1, r3, #2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006384:	b282      	uxth	r2, r0
 8006386:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d113      	bne.n	80063c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff ff4a 	bl	800625c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <I2SEx_RxISR_I2SExt+0x90>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d101      	bne.n	80063e6 <I2SEx_RxISR_I2SExt+0x16>
 80063e2:	4b20      	ldr	r3, [pc, #128]	; (8006464 <I2SEx_RxISR_I2SExt+0x94>)
 80063e4:	e001      	b.n	80063ea <I2SEx_RxISR_I2SExt+0x1a>
 80063e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ea:	68d8      	ldr	r0, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	1c99      	adds	r1, r3, #2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063f6:	b282      	uxth	r2, r0
 80063f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d121      	bne.n	8006456 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a12      	ldr	r2, [pc, #72]	; (8006460 <I2SEx_RxISR_I2SExt+0x90>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d101      	bne.n	8006420 <I2SEx_RxISR_I2SExt+0x50>
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <I2SEx_RxISR_I2SExt+0x94>)
 800641e:	e001      	b.n	8006424 <I2SEx_RxISR_I2SExt+0x54>
 8006420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	490d      	ldr	r1, [pc, #52]	; (8006460 <I2SEx_RxISR_I2SExt+0x90>)
 800642c:	428b      	cmp	r3, r1
 800642e:	d101      	bne.n	8006434 <I2SEx_RxISR_I2SExt+0x64>
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <I2SEx_RxISR_I2SExt+0x94>)
 8006432:	e001      	b.n	8006438 <I2SEx_RxISR_I2SExt+0x68>
 8006434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006438:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800643c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ff03 	bl	800625c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40003800 	.word	0x40003800
 8006464:	40003400 	.word	0x40003400

08006468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e267      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d075      	beq.n	8006572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006486:	4b88      	ldr	r3, [pc, #544]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b04      	cmp	r3, #4
 8006490:	d00c      	beq.n	80064ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006492:	4b85      	ldr	r3, [pc, #532]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800649a:	2b08      	cmp	r3, #8
 800649c:	d112      	bne.n	80064c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800649e:	4b82      	ldr	r3, [pc, #520]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	4b7e      	ldr	r3, [pc, #504]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05b      	beq.n	8006570 <HAL_RCC_OscConfig+0x108>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d157      	bne.n	8006570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e242      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064cc:	d106      	bne.n	80064dc <HAL_RCC_OscConfig+0x74>
 80064ce:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a75      	ldr	r2, [pc, #468]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e01d      	b.n	8006518 <HAL_RCC_OscConfig+0xb0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x98>
 80064e6:	4b70      	ldr	r3, [pc, #448]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6f      	ldr	r2, [pc, #444]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b6d      	ldr	r3, [pc, #436]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a6c      	ldr	r2, [pc, #432]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0xb0>
 8006500:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a68      	ldr	r2, [pc, #416]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b66      	ldr	r3, [pc, #408]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a65      	ldr	r2, [pc, #404]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fb fbd4 	bl	8001ccc <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006528:	f7fb fbd0 	bl	8001ccc <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e207      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	4b5b      	ldr	r3, [pc, #364]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0xc0>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fb fbc0 	bl	8001ccc <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006550:	f7fb fbbc 	bl	8001ccc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e1f3      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006562:	4b51      	ldr	r3, [pc, #324]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0xe8>
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d063      	beq.n	8006646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800657e:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800658a:	4b47      	ldr	r3, [pc, #284]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006592:	2b08      	cmp	r3, #8
 8006594:	d11c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006596:	4b44      	ldr	r3, [pc, #272]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d116      	bne.n	80065d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a2:	4b41      	ldr	r3, [pc, #260]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_RCC_OscConfig+0x152>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d001      	beq.n	80065ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e1c7      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ba:	4b3b      	ldr	r3, [pc, #236]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4937      	ldr	r1, [pc, #220]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ce:	e03a      	b.n	8006646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d020      	beq.n	800661a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065d8:	4b34      	ldr	r3, [pc, #208]	; (80066ac <HAL_RCC_OscConfig+0x244>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fb fb75 	bl	8001ccc <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e6:	f7fb fb71 	bl	8001ccc <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e1a8      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f8:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006604:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	4925      	ldr	r1, [pc, #148]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 8006614:	4313      	orrs	r3, r2
 8006616:	600b      	str	r3, [r1, #0]
 8006618:	e015      	b.n	8006646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <HAL_RCC_OscConfig+0x244>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006620:	f7fb fb54 	bl	8001ccc <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006628:	f7fb fb50 	bl	8001ccc <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e187      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d036      	beq.n	80066c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <HAL_RCC_OscConfig+0x248>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fb fb34 	bl	8001ccc <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006668:	f7fb fb30 	bl	8001ccc <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e167      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <HAL_RCC_OscConfig+0x240>)
 800667c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x200>
 8006686:	e01b      	b.n	80066c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCC_OscConfig+0x248>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668e:	f7fb fb1d 	bl	8001ccc <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006694:	e00e      	b.n	80066b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006696:	f7fb fb19 	bl	8001ccc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d907      	bls.n	80066b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e150      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
 80066a8:	40023800 	.word	0x40023800
 80066ac:	42470000 	.word	0x42470000
 80066b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b4:	4b88      	ldr	r3, [pc, #544]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80066b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ea      	bne.n	8006696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8097 	beq.w	80067fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066d2:	4b81      	ldr	r3, [pc, #516]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	4b7d      	ldr	r3, [pc, #500]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	4a7c      	ldr	r2, [pc, #496]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80066e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ec:	6413      	str	r3, [r2, #64]	; 0x40
 80066ee:	4b7a      	ldr	r3, [pc, #488]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fa:	2301      	movs	r3, #1
 80066fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fe:	4b77      	ldr	r3, [pc, #476]	; (80068dc <HAL_RCC_OscConfig+0x474>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d118      	bne.n	800673c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670a:	4b74      	ldr	r3, [pc, #464]	; (80068dc <HAL_RCC_OscConfig+0x474>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a73      	ldr	r2, [pc, #460]	; (80068dc <HAL_RCC_OscConfig+0x474>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006716:	f7fb fad9 	bl	8001ccc <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671e:	f7fb fad5 	bl	8001ccc <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e10c      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006730:	4b6a      	ldr	r3, [pc, #424]	; (80068dc <HAL_RCC_OscConfig+0x474>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <HAL_RCC_OscConfig+0x2ea>
 8006744:	4b64      	ldr	r3, [pc, #400]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a63      	ldr	r2, [pc, #396]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e01c      	b.n	800678c <HAL_RCC_OscConfig+0x324>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b05      	cmp	r3, #5
 8006758:	d10c      	bne.n	8006774 <HAL_RCC_OscConfig+0x30c>
 800675a:	4b5f      	ldr	r3, [pc, #380]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a5e      	ldr	r2, [pc, #376]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006760:	f043 0304 	orr.w	r3, r3, #4
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
 8006766:	4b5c      	ldr	r3, [pc, #368]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676a:	4a5b      	ldr	r2, [pc, #364]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6713      	str	r3, [r2, #112]	; 0x70
 8006772:	e00b      	b.n	800678c <HAL_RCC_OscConfig+0x324>
 8006774:	4b58      	ldr	r3, [pc, #352]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006778:	4a57      	ldr	r2, [pc, #348]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	6713      	str	r3, [r2, #112]	; 0x70
 8006780:	4b55      	ldr	r3, [pc, #340]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	4a54      	ldr	r2, [pc, #336]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006786:	f023 0304 	bic.w	r3, r3, #4
 800678a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006794:	f7fb fa9a 	bl	8001ccc <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679a:	e00a      	b.n	80067b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800679c:	f7fb fa96 	bl	8001ccc <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e0cb      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b2:	4b49      	ldr	r3, [pc, #292]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0ee      	beq.n	800679c <HAL_RCC_OscConfig+0x334>
 80067be:	e014      	b.n	80067ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c0:	f7fb fa84 	bl	8001ccc <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067c6:	e00a      	b.n	80067de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067c8:	f7fb fa80 	bl	8001ccc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e0b5      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067de:	4b3e      	ldr	r3, [pc, #248]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1ee      	bne.n	80067c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d105      	bne.n	80067fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f0:	4b39      	ldr	r3, [pc, #228]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	4a38      	ldr	r2, [pc, #224]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80067f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80a1 	beq.w	8006948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006806:	4b34      	ldr	r3, [pc, #208]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 030c 	and.w	r3, r3, #12
 800680e:	2b08      	cmp	r3, #8
 8006810:	d05c      	beq.n	80068cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d141      	bne.n	800689e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681a:	4b31      	ldr	r3, [pc, #196]	; (80068e0 <HAL_RCC_OscConfig+0x478>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fb fa54 	bl	8001ccc <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006828:	f7fb fa50 	bl	8001ccc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e087      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683a:	4b27      	ldr	r3, [pc, #156]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	019b      	lsls	r3, r3, #6
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	3b01      	subs	r3, #1
 8006860:	041b      	lsls	r3, r3, #16
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	061b      	lsls	r3, r3, #24
 800686a:	491b      	ldr	r1, [pc, #108]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <HAL_RCC_OscConfig+0x478>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006876:	f7fb fa29 	bl	8001ccc <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800687e:	f7fb fa25 	bl	8001ccc <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e05c      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <HAL_RCC_OscConfig+0x416>
 800689c:	e054      	b.n	8006948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <HAL_RCC_OscConfig+0x478>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7fb fa12 	bl	8001ccc <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ac:	f7fb fa0e 	bl	8001ccc <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e045      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068be:	4b06      	ldr	r3, [pc, #24]	; (80068d8 <HAL_RCC_OscConfig+0x470>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x444>
 80068ca:	e03d      	b.n	8006948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e038      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40007000 	.word	0x40007000
 80068e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <HAL_RCC_OscConfig+0x4ec>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d028      	beq.n	8006944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d121      	bne.n	8006944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d11a      	bne.n	8006944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800691a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800691c:	4293      	cmp	r3, r2
 800691e:	d111      	bne.n	8006944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	3b01      	subs	r3, #1
 800692e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006930:	429a      	cmp	r2, r3
 8006932:	d107      	bne.n	8006944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e000      	b.n	800694a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40023800 	.word	0x40023800

08006958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0cc      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800696c:	4b68      	ldr	r3, [pc, #416]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d90c      	bls.n	8006994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697a:	4b65      	ldr	r3, [pc, #404]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006982:	4b63      	ldr	r3, [pc, #396]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d001      	beq.n	8006994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0b8      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d020      	beq.n	80069e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069ac:	4b59      	ldr	r3, [pc, #356]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	4a58      	ldr	r2, [pc, #352]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069c4:	4b53      	ldr	r3, [pc, #332]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4a52      	ldr	r2, [pc, #328]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069d0:	4b50      	ldr	r3, [pc, #320]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	494d      	ldr	r1, [pc, #308]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d044      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d107      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069f6:	4b47      	ldr	r3, [pc, #284]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d119      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e07f      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d003      	beq.n	8006a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d107      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a16:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e06f      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a26:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e067      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a36:	4b37      	ldr	r3, [pc, #220]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f023 0203 	bic.w	r2, r3, #3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	4934      	ldr	r1, [pc, #208]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a48:	f7fb f940 	bl	8001ccc <HAL_GetTick>
 8006a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a50:	f7fb f93c 	bl	8001ccc <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e04f      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 020c 	and.w	r2, r3, #12
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d1eb      	bne.n	8006a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a78:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d20c      	bcs.n	8006aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8e:	4b20      	ldr	r3, [pc, #128]	; (8006b10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d001      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e032      	b.n	8006b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aac:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	4916      	ldr	r1, [pc, #88]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	490e      	ldr	r1, [pc, #56]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ade:	f000 f821 	bl	8006b24 <HAL_RCC_GetSysClockFreq>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	490a      	ldr	r1, [pc, #40]	; (8006b18 <HAL_RCC_ClockConfig+0x1c0>)
 8006af0:	5ccb      	ldrb	r3, [r1, r3]
 8006af2:	fa22 f303 	lsr.w	r3, r2, r3
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <HAL_RCC_ClockConfig+0x1c8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fb f8a0 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40023c00 	.word	0x40023c00
 8006b14:	40023800 	.word	0x40023800
 8006b18:	0800f070 	.word	0x0800f070
 8006b1c:	20000030 	.word	0x20000030
 8006b20:	20000034 	.word	0x20000034

08006b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b28:	b094      	sub	sp, #80	; 0x50
 8006b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b30:	2300      	movs	r3, #0
 8006b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b34:	2300      	movs	r3, #0
 8006b36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b3c:	4b79      	ldr	r3, [pc, #484]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 030c 	and.w	r3, r3, #12
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d00d      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0x40>
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	f200 80e1 	bhi.w	8006d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x34>
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b56:	e0db      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b58:	4b73      	ldr	r3, [pc, #460]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b5c:	e0db      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b5e:	4b73      	ldr	r3, [pc, #460]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b62:	e0d8      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b64:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b6e:	4b6d      	ldr	r3, [pc, #436]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d063      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b7a:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	099b      	lsrs	r3, r3, #6
 8006b80:	2200      	movs	r2, #0
 8006b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b96:	4622      	mov	r2, r4
 8006b98:	462b      	mov	r3, r5
 8006b9a:	f04f 0000 	mov.w	r0, #0
 8006b9e:	f04f 0100 	mov.w	r1, #0
 8006ba2:	0159      	lsls	r1, r3, #5
 8006ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ba8:	0150      	lsls	r0, r2, #5
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4621      	mov	r1, r4
 8006bb0:	1a51      	subs	r1, r2, r1
 8006bb2:	6139      	str	r1, [r7, #16]
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bc8:	4659      	mov	r1, fp
 8006bca:	018b      	lsls	r3, r1, #6
 8006bcc:	4651      	mov	r1, sl
 8006bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bd2:	4651      	mov	r1, sl
 8006bd4:	018a      	lsls	r2, r1, #6
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8006bdc:	4659      	mov	r1, fp
 8006bde:	eb63 0901 	sbc.w	r9, r3, r1
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bf6:	4690      	mov	r8, r2
 8006bf8:	4699      	mov	r9, r3
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	eb18 0303 	adds.w	r3, r8, r3
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	462b      	mov	r3, r5
 8006c04:	eb49 0303 	adc.w	r3, r9, r3
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c16:	4629      	mov	r1, r5
 8006c18:	024b      	lsls	r3, r1, #9
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c20:	4621      	mov	r1, r4
 8006c22:	024a      	lsls	r2, r1, #9
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c34:	f7f9 fb1c 	bl	8000270 <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c40:	e058      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c42:	4b38      	ldr	r3, [pc, #224]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
 8006c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	f04f 0000 	mov.w	r0, #0
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	0159      	lsls	r1, r3, #5
 8006c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c6e:	0150      	lsls	r0, r2, #5
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	4641      	mov	r1, r8
 8006c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c94:	ebb2 040a 	subs.w	r4, r2, sl
 8006c98:	eb63 050b 	sbc.w	r5, r3, fp
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	00eb      	lsls	r3, r5, #3
 8006ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006caa:	00e2      	lsls	r2, r4, #3
 8006cac:	4614      	mov	r4, r2
 8006cae:	461d      	mov	r5, r3
 8006cb0:	4643      	mov	r3, r8
 8006cb2:	18e3      	adds	r3, r4, r3
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	eb45 0303 	adc.w	r3, r5, r3
 8006cbc:	607b      	str	r3, [r7, #4]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cca:	4629      	mov	r1, r5
 8006ccc:	028b      	lsls	r3, r1, #10
 8006cce:	4621      	mov	r1, r4
 8006cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	028a      	lsls	r2, r1, #10
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	61fa      	str	r2, [r7, #28]
 8006ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ce8:	f7f9 fac2 	bl	8000270 <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	3301      	adds	r3, #1
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d0e:	e002      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3750      	adds	r7, #80	; 0x50
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d22:	bf00      	nop
 8006d24:	40023800 	.word	0x40023800
 8006d28:	00f42400 	.word	0x00f42400
 8006d2c:	007a1200 	.word	0x007a1200

08006d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d36:	681b      	ldr	r3, [r3, #0]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000030 	.word	0x20000030

08006d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d4c:	f7ff fff0 	bl	8006d30 <HAL_RCC_GetHCLKFreq>
 8006d50:	4602      	mov	r2, r0
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	0a9b      	lsrs	r3, r3, #10
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	4903      	ldr	r1, [pc, #12]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d5e:	5ccb      	ldrb	r3, [r1, r3]
 8006d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	0800f080 	.word	0x0800f080

08006d70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d035      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d98:	4b62      	ldr	r3, [pc, #392]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9e:	f7fa ff95 	bl	8001ccc <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	e008      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006da6:	f7fa ff91 	bl	8001ccc <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e0b0      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006db8:	4b5b      	ldr	r3, [pc, #364]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f0      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	019a      	lsls	r2, r3, #6
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	071b      	lsls	r3, r3, #28
 8006dd0:	4955      	ldr	r1, [pc, #340]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dd8:	4b52      	ldr	r3, [pc, #328]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dde:	f7fa ff75 	bl	8001ccc <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006de4:	e008      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006de6:	f7fa ff71 	bl	8001ccc <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e090      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006df8:	4b4b      	ldr	r3, [pc, #300]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8083 	beq.w	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	4b44      	ldr	r3, [pc, #272]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	4a43      	ldr	r2, [pc, #268]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e20:	6413      	str	r3, [r2, #64]	; 0x40
 8006e22:	4b41      	ldr	r3, [pc, #260]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a3e      	ldr	r2, [pc, #248]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e3a:	f7fa ff47 	bl	8001ccc <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e40:	e008      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e42:	f7fa ff43 	bl	8001ccc <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e062      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e54:	4b35      	ldr	r3, [pc, #212]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0f0      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e60:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d02f      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d028      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e7e:	4b2a      	ldr	r3, [pc, #168]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e88:	4b29      	ldr	r3, [pc, #164]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e8e:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e94:	4a24      	ldr	r2, [pc, #144]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e9a:	4b23      	ldr	r3, [pc, #140]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d114      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ea6:	f7fa ff11 	bl	8001ccc <HAL_GetTick>
 8006eaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eac:	e00a      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eae:	f7fa ff0d 	bl	8001ccc <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e02a      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec4:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ee      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006edc:	d10d      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef2:	490d      	ldr	r1, [pc, #52]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	608b      	str	r3, [r1, #8]
 8006ef8:	e005      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f04:	6093      	str	r3, [r2, #8]
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f12:	4905      	ldr	r1, [pc, #20]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	42470068 	.word	0x42470068
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	40007000 	.word	0x40007000
 8006f30:	42470e40 	.word	0x42470e40

08006f34 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2203      	movs	r2, #3
 8006f40:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006f42:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f48:	099b      	lsrs	r3, r3, #6
 8006f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f58:	0f1b      	lsrs	r3, r3, #28
 8006f5a:	f003 0207 	and.w	r2, r3, #7
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006f6a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40023800 	.word	0x40023800

08006f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d13e      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d12f      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fc0:	4b1e      	ldr	r3, [pc, #120]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006fc2:	617b      	str	r3, [r7, #20]
          break;
 8006fc4:	e02f      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd2:	d108      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fd4:	4b18      	ldr	r3, [pc, #96]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fdc:	4a18      	ldr	r2, [pc, #96]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e007      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fee:	4a15      	ldr	r2, [pc, #84]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006ff6:	4b10      	ldr	r3, [pc, #64]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007010:	0f1b      	lsrs	r3, r3, #28
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	fbb2 f3f3 	udiv	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
          break;
 800701e:	e002      	b.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	617b      	str	r3, [r7, #20]
          break;
 8007024:	bf00      	nop
        }
      }
      break;
 8007026:	bf00      	nop
    }
  }
  return frequency;
 8007028:	697b      	ldr	r3, [r7, #20]
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800
 800703c:	00bb8000 	.word	0x00bb8000
 8007040:	007a1200 	.word	0x007a1200
 8007044:	00f42400 	.word	0x00f42400

08007048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e041      	b.n	80070de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa face 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 f95e 	bl	8007348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d001      	beq.n	8007100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e046      	b.n	800718e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a23      	ldr	r2, [pc, #140]	; (800719c <HAL_TIM_Base_Start+0xb4>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d022      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711a:	d01d      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1f      	ldr	r2, [pc, #124]	; (80071a0 <HAL_TIM_Base_Start+0xb8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d018      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1e      	ldr	r2, [pc, #120]	; (80071a4 <HAL_TIM_Base_Start+0xbc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d013      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <HAL_TIM_Base_Start+0xc0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00e      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <HAL_TIM_Base_Start+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d009      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_TIM_Base_Start+0xc8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIM_Base_Start+0x70>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <HAL_TIM_Base_Start+0xcc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d111      	bne.n	800717c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b06      	cmp	r3, #6
 8007168:	d010      	beq.n	800718c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	e007      	b.n	800718c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40000400 	.word	0x40000400
 80071a4:	40000800 	.word	0x40000800
 80071a8:	40000c00 	.word	0x40000c00
 80071ac:	40010400 	.word	0x40010400
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40001800 	.word	0x40001800

080071b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_ConfigClockSource+0x1c>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0b4      	b.n	800733e <HAL_TIM_ConfigClockSource+0x186>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720c:	d03e      	beq.n	800728c <HAL_TIM_ConfigClockSource+0xd4>
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	f200 8087 	bhi.w	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	f000 8086 	beq.w	800732a <HAL_TIM_ConfigClockSource+0x172>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d87f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b70      	cmp	r3, #112	; 0x70
 8007226:	d01a      	beq.n	800725e <HAL_TIM_ConfigClockSource+0xa6>
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d87b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b60      	cmp	r3, #96	; 0x60
 800722e:	d050      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007230:	2b60      	cmp	r3, #96	; 0x60
 8007232:	d877      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b50      	cmp	r3, #80	; 0x50
 8007236:	d03c      	beq.n	80072b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007238:	2b50      	cmp	r3, #80	; 0x50
 800723a:	d873      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d058      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d86f      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d064      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d86b      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d060      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d867      	bhi.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d05c      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	2b10      	cmp	r3, #16
 800725a:	d05a      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x15a>
 800725c:	e062      	b.n	8007324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6899      	ldr	r1, [r3, #8]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f000 f985 	bl	800757c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	609a      	str	r2, [r3, #8]
      break;
 800728a:	e04f      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	6899      	ldr	r1, [r3, #8]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f000 f96e 	bl	800757c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ae:	609a      	str	r2, [r3, #8]
      break;
 80072b0:	e03c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6859      	ldr	r1, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 f8e2 	bl	8007488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2150      	movs	r1, #80	; 0x50
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 f93b 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 80072d0:	e02c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	461a      	mov	r2, r3
 80072e0:	f000 f901 	bl	80074e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2160      	movs	r1, #96	; 0x60
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f92b 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 80072f0:	e01c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6859      	ldr	r1, [r3, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	461a      	mov	r2, r3
 8007300:	f000 f8c2 	bl	8007488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2140      	movs	r1, #64	; 0x40
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f91b 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8007310:	e00c      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f000 f912 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8007322:	e003      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e000      	b.n	800732c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800732a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a40      	ldr	r2, [pc, #256]	; (800745c <TIM_Base_SetConfig+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d013      	beq.n	8007388 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007366:	d00f      	beq.n	8007388 <TIM_Base_SetConfig+0x40>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a3d      	ldr	r2, [pc, #244]	; (8007460 <TIM_Base_SetConfig+0x118>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00b      	beq.n	8007388 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a3c      	ldr	r2, [pc, #240]	; (8007464 <TIM_Base_SetConfig+0x11c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a3b      	ldr	r2, [pc, #236]	; (8007468 <TIM_Base_SetConfig+0x120>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d003      	beq.n	8007388 <TIM_Base_SetConfig+0x40>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a3a      	ldr	r2, [pc, #232]	; (800746c <TIM_Base_SetConfig+0x124>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d108      	bne.n	800739a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a2f      	ldr	r2, [pc, #188]	; (800745c <TIM_Base_SetConfig+0x114>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d02b      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a8:	d027      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2c      	ldr	r2, [pc, #176]	; (8007460 <TIM_Base_SetConfig+0x118>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d023      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a2b      	ldr	r2, [pc, #172]	; (8007464 <TIM_Base_SetConfig+0x11c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01f      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <TIM_Base_SetConfig+0x120>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01b      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a29      	ldr	r2, [pc, #164]	; (800746c <TIM_Base_SetConfig+0x124>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d017      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a28      	ldr	r2, [pc, #160]	; (8007470 <TIM_Base_SetConfig+0x128>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a27      	ldr	r2, [pc, #156]	; (8007474 <TIM_Base_SetConfig+0x12c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a26      	ldr	r2, [pc, #152]	; (8007478 <TIM_Base_SetConfig+0x130>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a25      	ldr	r2, [pc, #148]	; (800747c <TIM_Base_SetConfig+0x134>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a24      	ldr	r2, [pc, #144]	; (8007480 <TIM_Base_SetConfig+0x138>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a23      	ldr	r2, [pc, #140]	; (8007484 <TIM_Base_SetConfig+0x13c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d108      	bne.n	800740c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a0a      	ldr	r2, [pc, #40]	; (800745c <TIM_Base_SetConfig+0x114>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_Base_SetConfig+0xf8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <TIM_Base_SetConfig+0x124>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d103      	bne.n	8007448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	691a      	ldr	r2, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	615a      	str	r2, [r3, #20]
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40014400 	.word	0x40014400
 8007478:	40014800 	.word	0x40014800
 800747c:	40001800 	.word	0x40001800
 8007480:	40001c00 	.word	0x40001c00
 8007484:	40002000 	.word	0x40002000

08007488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 030a 	bic.w	r3, r3, #10
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	f023 0210 	bic.w	r2, r3, #16
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	f043 0307 	orr.w	r3, r3, #7
 8007568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	021a      	lsls	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	431a      	orrs	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075d0:	2302      	movs	r3, #2
 80075d2:	e05a      	b.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a21      	ldr	r2, [pc, #132]	; (8007698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007620:	d01d      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a17      	ldr	r2, [pc, #92]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10c      	bne.n	8007678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4313      	orrs	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40010400 	.word	0x40010400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40001800 	.word	0x40001800

080076b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076b4:	b084      	sub	sp, #16
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	f107 001c 	add.w	r0, r7, #28
 80076c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d122      	bne.n	8007712 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d105      	bne.n	8007706 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f9c0 	bl	8007a8c <USB_CoreReset>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	e01a      	b.n	8007748 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9b4 	bl	8007a8c <USB_CoreReset>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
 800773a:	e005      	b.n	8007748 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	2b01      	cmp	r3, #1
 800774c:	d10b      	bne.n	8007766 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f043 0206 	orr.w	r2, r3, #6
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f043 0220 	orr.w	r2, r3, #32
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007772:	b004      	add	sp, #16
 8007774:	4770      	bx	lr

08007776 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f043 0201 	orr.w	r2, r3, #1
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f023 0201 	bic.w	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d115      	bne.n	8007808 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077e8:	2001      	movs	r0, #1
 80077ea:	f7fa fa7b 	bl	8001ce4 <HAL_Delay>
      ms++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f93a 	bl	8007a6e <USB_GetMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d01e      	beq.n	800783e <USB_SetCurrentMode+0x84>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b31      	cmp	r3, #49	; 0x31
 8007804:	d9f0      	bls.n	80077e8 <USB_SetCurrentMode+0x2e>
 8007806:	e01a      	b.n	800783e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d115      	bne.n	800783a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800781a:	2001      	movs	r0, #1
 800781c:	f7fa fa62 	bl	8001ce4 <HAL_Delay>
      ms++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f921 	bl	8007a6e <USB_GetMode>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <USB_SetCurrentMode+0x84>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b31      	cmp	r3, #49	; 0x31
 8007836:	d9f0      	bls.n	800781a <USB_SetCurrentMode+0x60>
 8007838:	e001      	b.n	800783e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e005      	b.n	800784a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b32      	cmp	r3, #50	; 0x32
 8007842:	d101      	bne.n	8007848 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a13      	ldr	r2, [pc, #76]	; (80078b8 <USB_FlushTxFifo+0x64>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d901      	bls.n	8007874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e01b      	b.n	80078ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	daf2      	bge.n	8007862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	019b      	lsls	r3, r3, #6
 8007884:	f043 0220 	orr.w	r2, r3, #32
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3301      	adds	r3, #1
 8007890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <USB_FlushTxFifo+0x64>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d901      	bls.n	800789e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e006      	b.n	80078ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d0f0      	beq.n	800788c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	00030d40 	.word	0x00030d40

080078bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a11      	ldr	r2, [pc, #68]	; (8007918 <USB_FlushRxFifo+0x5c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e018      	b.n	800790c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	daf2      	bge.n	80078c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2210      	movs	r2, #16
 80078ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4a08      	ldr	r2, [pc, #32]	; (8007918 <USB_FlushRxFifo+0x5c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e006      	b.n	800790c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b10      	cmp	r3, #16
 8007908:	d0f0      	beq.n	80078ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	00030d40 	.word	0x00030d40

0800791c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	4613      	mov	r3, r2
 8007930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800793a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d123      	bne.n	800798a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007942:	88bb      	ldrh	r3, [r7, #4]
 8007944:	3303      	adds	r3, #3
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e018      	b.n	8007982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	031a      	lsls	r2, r3, #12
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	461a      	mov	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3301      	adds	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3301      	adds	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3301      	adds	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	3301      	adds	r3, #1
 800797a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	429a      	cmp	r2, r3
 8007988:	d3e2      	bcc.n	8007950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3724      	adds	r7, #36	; 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007998:	b480      	push	{r7}
 800799a:	b08b      	sub	sp, #44	; 0x2c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	089b      	lsrs	r3, r3, #2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e014      	b.n	80079ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	3301      	adds	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	3301      	adds	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	3301      	adds	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	3301      	adds	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e6      	bcc.n	80079c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a06:	461a      	mov	r2, r3
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	701a      	strb	r2, [r3, #0]
      i++;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	3301      	adds	r3, #1
 8007a26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a2e:	8bfb      	ldrh	r3, [r7, #30]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a34:	8bfb      	ldrh	r3, [r7, #30]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ea      	bne.n	8007a10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	372c      	adds	r7, #44	; 0x2c
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a60:	68fb      	ldr	r3, [r7, #12]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <USB_CoreReset+0x64>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d901      	bls.n	8007aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e01b      	b.n	8007ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	daf2      	bge.n	8007a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f043 0201 	orr.w	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <USB_CoreReset+0x64>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e006      	b.n	8007ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d0f0      	beq.n	8007ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	00030d40 	.word	0x00030d40

08007af4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007af4:	b084      	sub	sp, #16
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d018      	beq.n	8007b7c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10a      	bne.n	8007b66 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b5e:	f043 0304 	orr.w	r3, r3, #4
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e014      	b.n	8007b90 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b74:	f023 0304 	bic.w	r3, r3, #4
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e009      	b.n	8007b90 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b8a:	f023 0304 	bic.w	r3, r3, #4
 8007b8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b90:	2110      	movs	r1, #16
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fe5e 	bl	8007854 <USB_FlushTxFifo>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fe8a 	bl	80078bc <USB_FlushRxFifo>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e015      	b.n	8007be4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd8:	461a      	mov	r2, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3301      	adds	r3, #1
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d3e5      	bcc.n	8007bb8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <USB_HostInit+0x16c>)
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <USB_HostInit+0x170>)
 8007c18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007c1c:	e009      	b.n	8007c32 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2280      	movs	r2, #128	; 0x80
 8007c22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <USB_HostInit+0x174>)
 8007c28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a0f      	ldr	r2, [pc, #60]	; (8007c6c <USB_HostInit+0x178>)
 8007c2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f043 0210 	orr.w	r2, r3, #16
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <USB_HostInit+0x17c>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c5c:	b004      	add	sp, #16
 8007c5e:	4770      	bx	lr
 8007c60:	01000200 	.word	0x01000200
 8007c64:	00e00300 	.word	0x00e00300
 8007c68:	00600080 	.word	0x00600080
 8007c6c:	004000e0 	.word	0x004000e0
 8007c70:	a3200008 	.word	0xa3200008

08007c74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cac:	4313      	orrs	r3, r2
 8007cae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007cc2:	6053      	str	r3, [r2, #4]
 8007cc4:	e009      	b.n	8007cda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007cc6:	78fb      	ldrb	r3, [r7, #3]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d106      	bne.n	8007cda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007cd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007d18:	2064      	movs	r0, #100	; 0x64
 8007d1a:	f7f9 ffe3 	bl	8001ce4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d2c:	200a      	movs	r0, #10
 8007d2e:	f7f9 ffd9 	bl	8001ce4 <HAL_Delay>

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <USB_DriveVbus+0x44>
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d106      	bne.n	8007d80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8a:	d109      	bne.n	8007da0 <USB_DriveVbus+0x64>
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	0c5b      	lsrs	r3, r3, #17
 8007dcc:	f003 0303 	and.w	r3, r3, #3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	b29b      	uxth	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	4608      	mov	r0, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	70fb      	strb	r3, [r7, #3]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70bb      	strb	r3, [r7, #2]
 8007e16:	4613      	mov	r3, r2
 8007e18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f04f 33ff 	mov.w	r3, #4294967295
 8007e34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d87e      	bhi.n	8007f3c <USB_HC_Init+0x13c>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <USB_HC_Init+0x44>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007eff 	.word	0x08007eff
 8007e4c:	08007e55 	.word	0x08007e55
 8007e50:	08007ec1 	.word	0x08007ec1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e60:	461a      	mov	r2, r3
 8007e62:	f240 439d 	movw	r3, #1181	; 0x49d
 8007e66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	da10      	bge.n	8007e92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007e90:	e057      	b.n	8007f42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d051      	beq.n	8007f42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007e9e:	78fb      	ldrb	r3, [r7, #3]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ebc:	60d3      	str	r3, [r2, #12]
      break;
 8007ebe:	e040      	b.n	8007f42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f240 639d 	movw	r3, #1693	; 0x69d
 8007ed2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ed4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da34      	bge.n	8007f46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007efc:	e023      	b.n	8007f46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f240 2325 	movw	r3, #549	; 0x225
 8007f10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da17      	bge.n	8007f4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007f38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f3a:	e006      	b.n	8007f4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	77fb      	strb	r3, [r7, #31]
      break;
 8007f40:	e004      	b.n	8007f4c <USB_HC_Init+0x14c>
      break;
 8007f42:	bf00      	nop
 8007f44:	e002      	b.n	8007f4c <USB_HC_Init+0x14c>
      break;
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <USB_HC_Init+0x14c>
      break;
 8007f4a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f66:	f043 0302 	orr.w	r3, r3, #2
 8007f6a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f80:	6939      	ldr	r1, [r7, #16]
 8007f82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f86:	4313      	orrs	r3, r2
 8007f88:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da03      	bge.n	8007fa6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e001      	b.n	8007faa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff feff 	bl	8007dae <USB_GetHostSpeed>
 8007fb0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d106      	bne.n	8007fc8 <USB_HC_Init+0x1c8>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d003      	beq.n	8007fc8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fc4:	617b      	str	r3, [r7, #20]
 8007fc6:	e001      	b.n	8007fcc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fcc:	787b      	ldrb	r3, [r7, #1]
 8007fce:	059b      	lsls	r3, r3, #22
 8007fd0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fd4:	78bb      	ldrb	r3, [r7, #2]
 8007fd6:	02db      	lsls	r3, r3, #11
 8007fd8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fdc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fe2:	049b      	lsls	r3, r3, #18
 8007fe4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fe8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ff0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	0159      	lsls	r1, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008002:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008008:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800800a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800800e:	2b03      	cmp	r3, #3
 8008010:	d003      	beq.n	800801a <USB_HC_Init+0x21a>
 8008012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d10f      	bne.n	800803a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	440a      	add	r2, r1
 8008030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008038:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800803a:	7ffb      	ldrb	r3, [r7, #31]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08c      	sub	sp, #48	; 0x30
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800805c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008060:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d02d      	beq.n	80080ca <USB_HC_StartXfer+0x86>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d129      	bne.n	80080ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d117      	bne.n	80080ac <USB_HC_StartXfer+0x68>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	79db      	ldrb	r3, [r3, #7]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <USB_HC_StartXfer+0x48>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	79db      	ldrb	r3, [r3, #7]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d10f      	bne.n	80080ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	4413      	add	r3, r2
 8008094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <USB_HC_StartXfer+0x86>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	795b      	ldrb	r3, [r3, #5]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d107      	bne.n	80080ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	4619      	mov	r1, r3
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fa0f 	bl	80084e4 <USB_DoPing>
      return HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e0f8      	b.n	80082bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	8912      	ldrh	r2, [r2, #8]
 80080da:	4413      	add	r3, r2
 80080dc:	3b01      	subs	r3, #1
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	8912      	ldrh	r2, [r2, #8]
 80080e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80080e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80080e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080ea:	8b7b      	ldrh	r3, [r7, #26]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d90b      	bls.n	8008108 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80080f0:	8b7b      	ldrh	r3, [r7, #26]
 80080f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	8912      	ldrh	r2, [r2, #8]
 80080fa:	fb03 f202 	mul.w	r2, r3, r2
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	e001      	b.n	8008108 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008104:	2301      	movs	r3, #1
 8008106:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	78db      	ldrb	r3, [r3, #3]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	8912      	ldrh	r2, [r2, #8]
 8008116:	fb03 f202 	mul.w	r2, r3, r2
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	611a      	str	r2, [r3, #16]
 800811e:	e003      	b.n	8008128 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	695a      	ldr	r2, [r3, #20]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008132:	04d9      	lsls	r1, r3, #19
 8008134:	4b63      	ldr	r3, [pc, #396]	; (80082c4 <USB_HC_StartXfer+0x280>)
 8008136:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008138:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	7a9b      	ldrb	r3, [r3, #10]
 800813e:	075b      	lsls	r3, r3, #29
 8008140:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	0148      	lsls	r0, r1, #5
 8008148:	6a39      	ldr	r1, [r7, #32]
 800814a:	4401      	add	r1, r0
 800814c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008150:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008152:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	68d9      	ldr	r1, [r3, #12]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	460a      	mov	r2, r1
 800816c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf0c      	ite	eq
 800817e:	2301      	moveq	r3, #1
 8008180:	2300      	movne	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	6a3a      	ldr	r2, [r7, #32]
 800819a:	440a      	add	r2, r1
 800819c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	7e7b      	ldrb	r3, [r7, #25]
 80081b6:	075b      	lsls	r3, r3, #29
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	0148      	lsls	r0, r1, #5
 80081bc:	6a39      	ldr	r1, [r7, #32]
 80081be:	4401      	add	r1, r0
 80081c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80081c4:	4313      	orrs	r3, r2
 80081c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	78db      	ldrb	r3, [r3, #3]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	e003      	b.n	80081fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008200:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	461a      	mov	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e04e      	b.n	80082bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	78db      	ldrb	r3, [r3, #3]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d149      	bne.n	80082ba <USB_HC_StartXfer+0x276>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d045      	beq.n	80082ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	79db      	ldrb	r3, [r3, #7]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d830      	bhi.n	8008298 <USB_HC_StartXfer+0x254>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USB_HC_StartXfer+0x1f8>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008271 	.word	0x08008271
 8008244:	0800824d 	.word	0x0800824d
 8008248:	08008271 	.word	0x08008271
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	3303      	adds	r3, #3
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008256:	8afa      	ldrh	r2, [r7, #22]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	b29b      	uxth	r3, r3
 800825e:	429a      	cmp	r2, r3
 8008260:	d91c      	bls.n	800829c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f043 0220 	orr.w	r2, r3, #32
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	619a      	str	r2, [r3, #24]
        }
        break;
 800826e:	e015      	b.n	800829c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	3303      	adds	r3, #3
 8008276:	089b      	lsrs	r3, r3, #2
 8008278:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800827a:	8afa      	ldrh	r2, [r7, #22]
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	b29b      	uxth	r3, r3
 8008286:	429a      	cmp	r2, r3
 8008288:	d90a      	bls.n	80082a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	619a      	str	r2, [r3, #24]
        }
        break;
 8008296:	e003      	b.n	80082a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008298:	bf00      	nop
 800829a:	e002      	b.n	80082a2 <USB_HC_StartXfer+0x25e>
        break;
 800829c:	bf00      	nop
 800829e:	e000      	b.n	80082a2 <USB_HC_StartXfer+0x25e>
        break;
 80082a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	68d9      	ldr	r1, [r3, #12]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	785a      	ldrb	r2, [r3, #1]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2000      	movs	r0, #0
 80082b2:	9000      	str	r0, [sp, #0]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff fb31 	bl	800791c <USB_WritePacket>
  }

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3728      	adds	r7, #40	; 0x28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	1ff80000 	.word	0x1ff80000

080082c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	b29b      	uxth	r3, r3
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b089      	sub	sp, #36	; 0x24
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	0c9b      	lsrs	r3, r3, #18
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	0fdb      	lsrs	r3, r3, #31
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b20      	cmp	r3, #32
 8008338:	d104      	bne.n	8008344 <USB_HC_Halt+0x5a>
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	e0c8      	b.n	80084d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <USB_HC_Halt+0x66>
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d163      	bne.n	8008418 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	440a      	add	r2, r1
 8008366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800836a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800836e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 80ab 	bne.w	80084d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d133      	bne.n	80083f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083d6:	d81d      	bhi.n	8008414 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ee:	d0ec      	beq.n	80083ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083f0:	e070      	b.n	80084d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	440a      	add	r2, r1
 8008408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008410:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008412:	e05f      	b.n	80084d4 <USB_HC_Halt+0x1ea>
            break;
 8008414:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008416:	e05d      	b.n	80084d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	440a      	add	r2, r1
 800842e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008436:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d133      	bne.n	80084b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008466:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008486:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008494:	d81d      	bhi.n	80084d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4413      	add	r3, r2
 800849e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ac:	d0ec      	beq.n	8008488 <USB_HC_Halt+0x19e>
 80084ae:	e011      	b.n	80084d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	e000      	b.n	80084d4 <USB_HC_Halt+0x1ea>
          break;
 80084d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3724      	adds	r7, #36	; 0x24
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	04da      	lsls	r2, r3, #19
 8008500:	4b15      	ldr	r3, [pc, #84]	; (8008558 <USB_DoPing+0x74>)
 8008502:	4013      	ands	r3, r2
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	440a      	add	r2, r1
 800850c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008514:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800852c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008534:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	4413      	add	r3, r2
 800853e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008542:	461a      	mov	r2, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	1ff80000 	.word	0x1ff80000

0800855c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff f911 	bl	8007798 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008576:	2110      	movs	r1, #16
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff f96b 	bl	8007854 <USB_FlushTxFifo>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff f997 	bl	80078bc <USB_FlushRxFifo>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008598:	2300      	movs	r3, #0
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	e01f      	b.n	80085de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d2:	461a      	mov	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	3301      	adds	r3, #1
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b0f      	cmp	r3, #15
 80085e2:	d9dc      	bls.n	800859e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085e4:	2300      	movs	r3, #0
 80085e6:	61bb      	str	r3, [r7, #24]
 80085e8:	e034      	b.n	8008654 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008600:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008608:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008610:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4413      	add	r3, r2
 800861a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861e:	461a      	mov	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3301      	adds	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008630:	d80c      	bhi.n	800864c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	4413      	add	r3, r2
 800863a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008648:	d0ec      	beq.n	8008624 <USB_StopHost+0xc8>
 800864a:	e000      	b.n	800864e <USB_StopHost+0xf2>
        break;
 800864c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	3301      	adds	r3, #1
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2b0f      	cmp	r3, #15
 8008658:	d9c7      	bls.n	80085ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008660:	461a      	mov	r2, r3
 8008662:	f04f 33ff 	mov.w	r3, #4294967295
 8008666:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff f880 	bl	8007776 <USB_EnableGlobalInt>

  return ret;
 8008676:	7ffb      	ldrb	r3, [r7, #31]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008684:	4904      	ldr	r1, [pc, #16]	; (8008698 <MX_FATFS_Init+0x18>)
 8008686:	4805      	ldr	r0, [pc, #20]	; (800869c <MX_FATFS_Init+0x1c>)
 8008688:	f005 fc98 	bl	800dfbc <FATFS_LinkDriver>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <MX_FATFS_Init+0x20>)
 8008692:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008694:	bf00      	nop
 8008696:	bd80      	pop	{r7, pc}
 8008698:	200014e0 	.word	0x200014e0
 800869c:	0800f0f0 	.word	0x0800f0f0
 80086a0:	200014dc 	.word	0x200014dc

080086a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	4619      	mov	r1, r3
 80086de:	4808      	ldr	r0, [pc, #32]	; (8008700 <USBH_status+0x34>)
 80086e0:	f000 fe32 	bl	8009348 <USBH_MSC_UnitIsReady>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <USBH_status+0x24>
  {
    res = RES_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
 80086ee:	e001      	b.n	80086f4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20001748 	.word	0x20001748

08008704 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b094      	sub	sp, #80	; 0x50
 8008708:	af02      	add	r7, sp, #8
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800871a:	7bf9      	ldrb	r1, [r7, #15]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4813      	ldr	r0, [pc, #76]	; (8008774 <USBH_read+0x70>)
 8008726:	f000 fe59 	bl	80093dc <USBH_MSC_Read>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <USBH_read+0x34>
  {
    res = RES_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008736:	e017      	b.n	8008768 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008738:	f107 0210 	add.w	r2, r7, #16
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4619      	mov	r1, r3
 8008740:	480c      	ldr	r0, [pc, #48]	; (8008774 <USBH_read+0x70>)
 8008742:	f000 fe27 	bl	8009394 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008746:	7f7b      	ldrb	r3, [r7, #29]
 8008748:	2b3a      	cmp	r3, #58	; 0x3a
 800874a:	d005      	beq.n	8008758 <USBH_read+0x54>
 800874c:	2b3a      	cmp	r3, #58	; 0x3a
 800874e:	dc07      	bgt.n	8008760 <USBH_read+0x5c>
 8008750:	2b04      	cmp	r3, #4
 8008752:	d001      	beq.n	8008758 <USBH_read+0x54>
 8008754:	2b28      	cmp	r3, #40	; 0x28
 8008756:	d103      	bne.n	8008760 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008758:	2303      	movs	r3, #3
 800875a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800875e:	e003      	b.n	8008768 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008766:	bf00      	nop
    }
  }

  return res;
 8008768:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800876c:	4618      	mov	r0, r3
 800876e:	3748      	adds	r7, #72	; 0x48
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20001748 	.word	0x20001748

08008778 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b094      	sub	sp, #80	; 0x50
 800877c:	af02      	add	r7, sp, #8
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4603      	mov	r3, r0
 8008786:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800878e:	7bf9      	ldrb	r1, [r7, #15]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	4817      	ldr	r0, [pc, #92]	; (80087f8 <USBH_write+0x80>)
 800879a:	f000 fe88 	bl	80094ae <USBH_MSC_Write>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <USBH_write+0x34>
  {
    res = RES_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087aa:	e01f      	b.n	80087ec <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80087ac:	f107 0210 	add.w	r2, r7, #16
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	4619      	mov	r1, r3
 80087b4:	4810      	ldr	r0, [pc, #64]	; (80087f8 <USBH_write+0x80>)
 80087b6:	f000 fded 	bl	8009394 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80087ba:	7f7b      	ldrb	r3, [r7, #29]
 80087bc:	2b3a      	cmp	r3, #58	; 0x3a
 80087be:	d00d      	beq.n	80087dc <USBH_write+0x64>
 80087c0:	2b3a      	cmp	r3, #58	; 0x3a
 80087c2:	dc0f      	bgt.n	80087e4 <USBH_write+0x6c>
 80087c4:	2b28      	cmp	r3, #40	; 0x28
 80087c6:	d009      	beq.n	80087dc <USBH_write+0x64>
 80087c8:	2b28      	cmp	r3, #40	; 0x28
 80087ca:	dc0b      	bgt.n	80087e4 <USBH_write+0x6c>
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d005      	beq.n	80087dc <USBH_write+0x64>
 80087d0:	2b27      	cmp	r3, #39	; 0x27
 80087d2:	d107      	bne.n	80087e4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80087d4:	2302      	movs	r3, #2
 80087d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80087da:	e007      	b.n	80087ec <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80087dc:	2303      	movs	r3, #3
 80087de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80087e2:	e003      	b.n	80087ec <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80087ea:	bf00      	nop
    }
  }

  return res;
 80087ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3748      	adds	r7, #72	; 0x48
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20001748 	.word	0x20001748

080087fc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b090      	sub	sp, #64	; 0x40
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	603a      	str	r2, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
 8008808:	460b      	mov	r3, r1
 800880a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008812:	79bb      	ldrb	r3, [r7, #6]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d852      	bhi.n	80088be <USBH_ioctl+0xc2>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <USBH_ioctl+0x24>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008831 	.word	0x08008831
 8008824:	08008839 	.word	0x08008839
 8008828:	08008863 	.word	0x08008863
 800882c:	0800888f 	.word	0x0800888f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008836:	e045      	b.n	80088c4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008838:	f107 0208 	add.w	r2, r7, #8
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	4619      	mov	r1, r3
 8008840:	4823      	ldr	r0, [pc, #140]	; (80088d0 <USBH_ioctl+0xd4>)
 8008842:	f000 fda7 	bl	8009394 <USBH_MSC_GetLUNInfo>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008858:	e034      	b.n	80088c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008860:	e030      	b.n	80088c4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008862:	f107 0208 	add.w	r2, r7, #8
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	4619      	mov	r1, r3
 800886a:	4819      	ldr	r0, [pc, #100]	; (80088d0 <USBH_ioctl+0xd4>)
 800886c:	f000 fd92 	bl	8009394 <USBH_MSC_GetLUNInfo>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008876:	8a3b      	ldrh	r3, [r7, #16]
 8008878:	461a      	mov	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008884:	e01e      	b.n	80088c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800888c:	e01a      	b.n	80088c4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800888e:	f107 0208 	add.w	r2, r7, #8
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4619      	mov	r1, r3
 8008896:	480e      	ldr	r0, [pc, #56]	; (80088d0 <USBH_ioctl+0xd4>)
 8008898:	f000 fd7c 	bl	8009394 <USBH_MSC_GetLUNInfo>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80088a2:	8a3b      	ldrh	r3, [r7, #16]
 80088a4:	0a5b      	lsrs	r3, r3, #9
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80088b4:	e006      	b.n	80088c4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80088bc:	e002      	b.n	80088c4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80088be:	2304      	movs	r3, #4
 80088c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80088c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3740      	adds	r7, #64	; 0x40
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20001748 	.word	0x20001748

080088d4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80088d4:	b590      	push	{r4, r7, lr}
 80088d6:	b089      	sub	sp, #36	; 0x24
 80088d8:	af04      	add	r7, sp, #16
 80088da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e2:	7919      	ldrb	r1, [r3, #4]
 80088e4:	2350      	movs	r3, #80	; 0x50
 80088e6:	2206      	movs	r2, #6
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 fc6b 	bl	800a1c4 <USBH_FindInterface>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2bff      	cmp	r3, #255	; 0xff
 80088f6:	d002      	beq.n	80088fe <USBH_MSC_InterfaceInit+0x2a>
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d901      	bls.n	8008902 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	e106      	b.n	8008b10 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fc40 	bl	800a18c <USBH_SelectInterface>
 800890c:	4603      	mov	r3, r0
 800890e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008916:	2302      	movs	r3, #2
 8008918:	e0fa      	b.n	8008b10 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008920:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008924:	f005 fe96 	bl	800e654 <malloc>
 8008928:	4603      	mov	r3, r0
 800892a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800893c:	2302      	movs	r3, #2
 800893e:	e0e7      	b.n	8008b10 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008944:	2100      	movs	r1, #0
 8008946:	68b8      	ldr	r0, [r7, #8]
 8008948:	f005 fea2 	bl	800e690 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	211a      	movs	r1, #26
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	4413      	add	r3, r2
 8008958:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	b25b      	sxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	da16      	bge.n	8008992 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	211a      	movs	r1, #26
 800896a:	fb01 f303 	mul.w	r3, r1, r3
 800896e:	4413      	add	r3, r2
 8008970:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	211a      	movs	r1, #26
 8008980:	fb01 f303 	mul.w	r3, r1, r3
 8008984:	4413      	add	r3, r2
 8008986:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800898a:	881a      	ldrh	r2, [r3, #0]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	815a      	strh	r2, [r3, #10]
 8008990:	e015      	b.n	80089be <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	211a      	movs	r1, #26
 8008998:	fb01 f303 	mul.w	r3, r1, r3
 800899c:	4413      	add	r3, r2
 800899e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	211a      	movs	r1, #26
 80089ae:	fb01 f303 	mul.w	r3, r1, r3
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089b8:	881a      	ldrh	r2, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	211a      	movs	r1, #26
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da16      	bge.n	8008a04 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	211a      	movs	r1, #26
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	4413      	add	r3, r2
 80089e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	211a      	movs	r1, #26
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089fc:	881a      	ldrh	r2, [r3, #0]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	815a      	strh	r2, [r3, #10]
 8008a02:	e015      	b.n	8008a30 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	211a      	movs	r1, #26
 8008a0a:	fb01 f303 	mul.w	r3, r1, r3
 8008a0e:	4413      	add	r3, r2
 8008a10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a14:	781a      	ldrb	r2, [r3, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	211a      	movs	r1, #26
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008a2a:	881a      	ldrh	r2, [r3, #0]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	799b      	ldrb	r3, [r3, #6]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 fed6 	bl	800b7fa <USBH_AllocPipe>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	79db      	ldrb	r3, [r3, #7]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f002 fecc 	bl	800b7fa <USBH_AllocPipe>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fdc4 	bl	80095f8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	799b      	ldrb	r3, [r3, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01e      	beq.n	8008ab6 <USBH_MSC_InterfaceInit+0x1e2>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	891b      	ldrh	r3, [r3, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01a      	beq.n	8008ab6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	7959      	ldrb	r1, [r3, #5]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	7998      	ldrb	r0, [r3, #6]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	8912      	ldrh	r2, [r2, #8]
 8008a98:	9202      	str	r2, [sp, #8]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f002 fe79 	bl	800b79c <USBH_OpenPipe>
 8008aaa:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	79db      	ldrb	r3, [r3, #7]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d02c      	beq.n	8008b0e <USBH_MSC_InterfaceInit+0x23a>
 8008ab4:	e001      	b.n	8008aba <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e02a      	b.n	8008b10 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	895b      	ldrh	r3, [r3, #10]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d025      	beq.n	8008b0e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	7919      	ldrb	r1, [r3, #4]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	79d8      	ldrb	r0, [r3, #7]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	8952      	ldrh	r2, [r2, #10]
 8008ada:	9202      	str	r2, [sp, #8]
 8008adc:	2202      	movs	r2, #2
 8008ade:	9201      	str	r2, [sp, #4]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f002 fe58 	bl	800b79c <USBH_OpenPipe>
 8008aec:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	791b      	ldrb	r3, [r3, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f005 fceb 	bl	800e4d2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	795b      	ldrb	r3, [r3, #5]
 8008b00:	2200      	movs	r2, #0
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f005 fce4 	bl	800e4d2 <USBH_LL_SetToggle>

  return USBH_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e000      	b.n	8008b10 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008b0e:	2303      	movs	r3, #3
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd90      	pop	{r4, r7, pc}

08008b18 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	795b      	ldrb	r3, [r3, #5]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	795b      	ldrb	r3, [r3, #5]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f002 fe4e 	bl	800b7da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	795b      	ldrb	r3, [r3, #5]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 fe79 	bl	800b83c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00e      	beq.n	8008b76 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	791b      	ldrb	r3, [r3, #4]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f002 fe3b 	bl	800b7da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	791b      	ldrb	r3, [r3, #4]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f002 fe66 	bl	800b83c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f005 fd6a 	bl	800e664 <free>
    phost->pActiveClass->pData = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b96:	2200      	movs	r2, #0
 8008b98:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	7b9b      	ldrb	r3, [r3, #14]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d041      	beq.n	8008c46 <USBH_MSC_ClassRequest+0xa2>
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	dc4b      	bgt.n	8008c5e <USBH_MSC_ClassRequest+0xba>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <USBH_MSC_ClassRequest+0x2a>
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d147      	bne.n	8008c5e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fcf1 	bl	80095ba <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d104      	bne.n	8008bec <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d137      	bne.n	8008c62 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d804      	bhi.n	8008c04 <USBH_MSC_ClassRequest+0x60>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	e000      	b.n	8008c06 <USBH_MSC_ClassRequest+0x62>
 8008c04:	2202      	movs	r2, #2
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]
 8008c0e:	e014      	b.n	8008c3a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	2134      	movs	r1, #52	; 0x34
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3392      	adds	r3, #146	; 0x92
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	2134      	movs	r1, #52	; 0x34
 8008c28:	fb01 f303 	mul.w	r3, r1, r3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	33c1      	adds	r3, #193	; 0xc1
 8008c30:	2200      	movs	r2, #0
 8008c32:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	3301      	adds	r3, #1
 8008c38:	73bb      	strb	r3, [r7, #14]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	7bba      	ldrb	r2, [r7, #14]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3e5      	bcc.n	8008c10 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008c44:	e00d      	b.n	8008c62 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008c46:	2100      	movs	r1, #0
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f002 f888 	bl	800ad5e <USBH_ClrFeature>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d108      	bne.n	8008c66 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	7bda      	ldrb	r2, [r3, #15]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008c5c:	e003      	b.n	8008c66 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008c66:	bf00      	nop
  }

  return status;
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008c86:	2301      	movs	r3, #1
 8008c88:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	7b1b      	ldrb	r3, [r3, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <USBH_MSC_Process+0x2e>
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	f000 8271 	beq.w	8009182 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008ca0:	e272      	b.n	8009188 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	f080 824f 	bcs.w	8009152 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cba:	4619      	mov	r1, r3
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	2334      	movs	r3, #52	; 0x34
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3391      	adds	r3, #145	; 0x91
 8008cc8:	2201      	movs	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	2334      	movs	r3, #52	; 0x34
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	4413      	add	r3, r2
 8008cde:	3390      	adds	r3, #144	; 0x90
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b08      	cmp	r3, #8
 8008ce4:	f200 8243 	bhi.w	800916e <USBH_MSC_Process+0x4fa>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <USBH_MSC_Process+0x7c>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d15 	.word	0x08008d15
 8008cf4:	0800916f 	.word	0x0800916f
 8008cf8:	08008ddd 	.word	0x08008ddd
 8008cfc:	08008f61 	.word	0x08008f61
 8008d00:	08008d3b 	.word	0x08008d3b
 8008d04:	0800902d 	.word	0x0800902d
 8008d08:	0800916f 	.word	0x0800916f
 8008d0c:	0800916f 	.word	0x0800916f
 8008d10:	08009141 	.word	0x08009141
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	2334      	movs	r3, #52	; 0x34
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	3390      	adds	r3, #144	; 0x90
 8008d28:	2204      	movs	r2, #4
 8008d2a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008d38:	e222      	b.n	8009180 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d40:	b2d9      	uxtb	r1, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2334      	movs	r3, #52	; 0x34
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	3398      	adds	r3, #152	; 0x98
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	3307      	adds	r3, #7
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 ff6a 	bl	8009c34 <USBH_MSC_SCSI_Inquiry>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10b      	bne.n	8008d82 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d70:	4619      	mov	r1, r3
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	2334      	movs	r3, #52	; 0x34
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3390      	adds	r3, #144	; 0x90
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d10c      	bne.n	8008da2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d8e:	4619      	mov	r1, r3
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	2334      	movs	r3, #52	; 0x34
 8008d94:	fb01 f303 	mul.w	r3, r1, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	3390      	adds	r3, #144	; 0x90
 8008d9c:	2205      	movs	r2, #5
 8008d9e:	701a      	strb	r2, [r3, #0]
            break;
 8008da0:	e1e7      	b.n	8009172 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	f040 81e4 	bne.w	8009172 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008db0:	4619      	mov	r1, r3
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	2334      	movs	r3, #52	; 0x34
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	4413      	add	r3, r2
 8008dbc:	3390      	adds	r3, #144	; 0x90
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dc8:	4619      	mov	r1, r3
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	2334      	movs	r3, #52	; 0x34
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	3391      	adds	r3, #145	; 0x91
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	701a      	strb	r2, [r3, #0]
            break;
 8008dda:	e1ca      	b.n	8009172 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fe66 	bl	8009ab8 <USBH_MSC_SCSI_TestUnitReady>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d149      	bne.n	8008e8a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	2334      	movs	r3, #52	; 0x34
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	3392      	adds	r3, #146	; 0x92
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e16:	4619      	mov	r1, r3
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	2334      	movs	r3, #52	; 0x34
 8008e1c:	fb01 f303 	mul.w	r3, r1, r3
 8008e20:	4413      	add	r3, r2
 8008e22:	33c1      	adds	r3, #193	; 0xc1
 8008e24:	2201      	movs	r2, #1
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	e00b      	b.n	8008e42 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e30:	4619      	mov	r1, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	2334      	movs	r3, #52	; 0x34
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	33c1      	adds	r3, #193	; 0xc1
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e48:	4619      	mov	r1, r3
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	2334      	movs	r3, #52	; 0x34
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	3390      	adds	r3, #144	; 0x90
 8008e56:	2203      	movs	r2, #3
 8008e58:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e60:	4619      	mov	r1, r3
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	2334      	movs	r3, #52	; 0x34
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3391      	adds	r3, #145	; 0x91
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e78:	4619      	mov	r1, r3
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	2334      	movs	r3, #52	; 0x34
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	3392      	adds	r3, #146	; 0x92
 8008e86:	2200      	movs	r2, #0
 8008e88:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d14a      	bne.n	8008f26 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e96:	4619      	mov	r1, r3
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	2334      	movs	r3, #52	; 0x34
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3392      	adds	r3, #146	; 0x92
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d00c      	beq.n	8008ec4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	2334      	movs	r3, #52	; 0x34
 8008eb6:	fb01 f303 	mul.w	r3, r1, r3
 8008eba:	4413      	add	r3, r2
 8008ebc:	33c1      	adds	r3, #193	; 0xc1
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	e00b      	b.n	8008edc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	2334      	movs	r3, #52	; 0x34
 8008ed0:	fb01 f303 	mul.w	r3, r1, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	33c1      	adds	r3, #193	; 0xc1
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	2334      	movs	r3, #52	; 0x34
 8008ee8:	fb01 f303 	mul.w	r3, r1, r3
 8008eec:	4413      	add	r3, r2
 8008eee:	3390      	adds	r3, #144	; 0x90
 8008ef0:	2205      	movs	r2, #5
 8008ef2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008efa:	4619      	mov	r1, r3
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	2334      	movs	r3, #52	; 0x34
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	4413      	add	r3, r2
 8008f06:	3391      	adds	r3, #145	; 0x91
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f12:	4619      	mov	r1, r3
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	2334      	movs	r3, #52	; 0x34
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3392      	adds	r3, #146	; 0x92
 8008f20:	2202      	movs	r2, #2
 8008f22:	701a      	strb	r2, [r3, #0]
            break;
 8008f24:	e127      	b.n	8009176 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	f040 8124 	bne.w	8009176 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f34:	4619      	mov	r1, r3
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	2334      	movs	r3, #52	; 0x34
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	3390      	adds	r3, #144	; 0x90
 8008f42:	2201      	movs	r2, #1
 8008f44:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	2334      	movs	r3, #52	; 0x34
 8008f52:	fb01 f303 	mul.w	r3, r1, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	3391      	adds	r3, #145	; 0x91
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	701a      	strb	r2, [r3, #0]
            break;
 8008f5e:	e10a      	b.n	8009176 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f66:	b2d9      	uxtb	r1, r3
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2334      	movs	r3, #52	; 0x34
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
 8008f76:	3390      	adds	r3, #144	; 0x90
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fddc 	bl	8009b3e <USBH_MSC_SCSI_ReadCapacity>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d120      	bne.n	8008fd2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f96:	4619      	mov	r1, r3
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	2334      	movs	r3, #52	; 0x34
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3390      	adds	r3, #144	; 0x90
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fae:	4619      	mov	r1, r3
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	2334      	movs	r3, #52	; 0x34
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	3391      	adds	r3, #145	; 0x91
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008fd0:	e0d3      	b.n	800917a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d10c      	bne.n	8008ff2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fde:	4619      	mov	r1, r3
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	2334      	movs	r3, #52	; 0x34
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	3390      	adds	r3, #144	; 0x90
 8008fec:	2205      	movs	r2, #5
 8008fee:	701a      	strb	r2, [r3, #0]
            break;
 8008ff0:	e0c3      	b.n	800917a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	f040 80c0 	bne.w	800917a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009000:	4619      	mov	r1, r3
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	2334      	movs	r3, #52	; 0x34
 8009006:	fb01 f303 	mul.w	r3, r1, r3
 800900a:	4413      	add	r3, r2
 800900c:	3390      	adds	r3, #144	; 0x90
 800900e:	2201      	movs	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009018:	4619      	mov	r1, r3
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	2334      	movs	r3, #52	; 0x34
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	4413      	add	r3, r2
 8009024:	3391      	adds	r3, #145	; 0x91
 8009026:	2202      	movs	r2, #2
 8009028:	701a      	strb	r2, [r3, #0]
            break;
 800902a:	e0a6      	b.n	800917a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009032:	b2d9      	uxtb	r1, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800903a:	461a      	mov	r2, r3
 800903c:	2334      	movs	r3, #52	; 0x34
 800903e:	fb02 f303 	mul.w	r3, r2, r3
 8009042:	3398      	adds	r3, #152	; 0x98
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4413      	add	r3, r2
 8009048:	3304      	adds	r3, #4
 800904a:	461a      	mov	r2, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fe96 	bl	8009d7e <USBH_MSC_SCSI_RequestSense>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d145      	bne.n	80090e8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009062:	4619      	mov	r1, r3
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	2334      	movs	r3, #52	; 0x34
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	339c      	adds	r3, #156	; 0x9c
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b06      	cmp	r3, #6
 8009074:	d00c      	beq.n	8009090 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800907c:	4619      	mov	r1, r3
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	2334      	movs	r3, #52	; 0x34
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	4413      	add	r3, r2
 8009088:	339c      	adds	r3, #156	; 0x9c
 800908a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800908c:	2b02      	cmp	r3, #2
 800908e:	d117      	bne.n	80090c0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	f242 720f 	movw	r2, #9999	; 0x270f
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d80c      	bhi.n	80090c0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ac:	4619      	mov	r1, r3
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	2334      	movs	r3, #52	; 0x34
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	3390      	adds	r3, #144	; 0x90
 80090ba:	2202      	movs	r2, #2
 80090bc:	701a      	strb	r2, [r3, #0]
                  break;
 80090be:	e05f      	b.n	8009180 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c6:	4619      	mov	r1, r3
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	2334      	movs	r3, #52	; 0x34
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	4413      	add	r3, r2
 80090d2:	3390      	adds	r3, #144	; 0x90
 80090d4:	2201      	movs	r2, #1
 80090d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090de:	3301      	adds	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d10c      	bne.n	8009108 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f4:	4619      	mov	r1, r3
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	2334      	movs	r3, #52	; 0x34
 80090fa:	fb01 f303 	mul.w	r3, r1, r3
 80090fe:	4413      	add	r3, r2
 8009100:	3390      	adds	r3, #144	; 0x90
 8009102:	2208      	movs	r2, #8
 8009104:	701a      	strb	r2, [r3, #0]
            break;
 8009106:	e03a      	b.n	800917e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b04      	cmp	r3, #4
 800910c:	d137      	bne.n	800917e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009114:	4619      	mov	r1, r3
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	2334      	movs	r3, #52	; 0x34
 800911a:	fb01 f303 	mul.w	r3, r1, r3
 800911e:	4413      	add	r3, r2
 8009120:	3390      	adds	r3, #144	; 0x90
 8009122:	2201      	movs	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800912c:	4619      	mov	r1, r3
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	2334      	movs	r3, #52	; 0x34
 8009132:	fb01 f303 	mul.w	r3, r1, r3
 8009136:	4413      	add	r3, r2
 8009138:	3391      	adds	r3, #145	; 0x91
 800913a:	2202      	movs	r2, #2
 800913c:	701a      	strb	r2, [r3, #0]
            break;
 800913e:	e01e      	b.n	800917e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009146:	3301      	adds	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009150:	e016      	b.n	8009180 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2200      	movs	r2, #0
 8009156:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2201      	movs	r2, #1
 800915e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009166:	2102      	movs	r1, #2
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	4798      	blx	r3
      break;
 800916c:	e00c      	b.n	8009188 <USBH_MSC_Process+0x514>
            break;
 800916e:	bf00      	nop
 8009170:	e00a      	b.n	8009188 <USBH_MSC_Process+0x514>
            break;
 8009172:	bf00      	nop
 8009174:	e008      	b.n	8009188 <USBH_MSC_Process+0x514>
            break;
 8009176:	bf00      	nop
 8009178:	e006      	b.n	8009188 <USBH_MSC_Process+0x514>
            break;
 800917a:	bf00      	nop
 800917c:	e004      	b.n	8009188 <USBH_MSC_Process+0x514>
            break;
 800917e:	bf00      	nop
      break;
 8009180:	e002      	b.n	8009188 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
      break;
 8009186:	bf00      	nop
  }
  return error;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop

08009194 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b088      	sub	sp, #32
 80091ae:	af02      	add	r7, sp, #8
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80091c0:	2301      	movs	r3, #1
 80091c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80091c4:	2301      	movs	r3, #1
 80091c6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	2134      	movs	r1, #52	; 0x34
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	3390      	adds	r3, #144	; 0x90
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b07      	cmp	r3, #7
 80091da:	d03c      	beq.n	8009256 <USBH_MSC_RdWrProcess+0xac>
 80091dc:	2b07      	cmp	r3, #7
 80091de:	f300 80a7 	bgt.w	8009330 <USBH_MSC_RdWrProcess+0x186>
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d06c      	beq.n	80092c0 <USBH_MSC_RdWrProcess+0x116>
 80091e6:	2b06      	cmp	r3, #6
 80091e8:	f040 80a2 	bne.w	8009330 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80091ec:	78f9      	ldrb	r1, [r7, #3]
 80091ee:	2300      	movs	r3, #0
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	2300      	movs	r3, #0
 80091f4:	2200      	movs	r2, #0
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fea5 	bl	8009f46 <USBH_MSC_SCSI_Read>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2134      	movs	r1, #52	; 0x34
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	3390      	adds	r3, #144	; 0x90
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800921c:	e08a      	b.n	8009334 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d109      	bne.n	8009238 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	2134      	movs	r1, #52	; 0x34
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	4413      	add	r3, r2
 8009230:	3390      	adds	r3, #144	; 0x90
 8009232:	2205      	movs	r2, #5
 8009234:	701a      	strb	r2, [r3, #0]
      break;
 8009236:	e07d      	b.n	8009334 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b04      	cmp	r3, #4
 800923c:	d17a      	bne.n	8009334 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	2134      	movs	r1, #52	; 0x34
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	4413      	add	r3, r2
 800924a:	3390      	adds	r3, #144	; 0x90
 800924c:	2208      	movs	r2, #8
 800924e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009250:	2302      	movs	r3, #2
 8009252:	75fb      	strb	r3, [r7, #23]
      break;
 8009254:	e06e      	b.n	8009334 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009256:	78f9      	ldrb	r1, [r7, #3]
 8009258:	2300      	movs	r3, #0
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2300      	movs	r3, #0
 800925e:	2200      	movs	r2, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fe05 	bl	8009e70 <USBH_MSC_SCSI_Write>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	2134      	movs	r1, #52	; 0x34
 8009276:	fb01 f303 	mul.w	r3, r1, r3
 800927a:	4413      	add	r3, r2
 800927c:	3390      	adds	r3, #144	; 0x90
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009286:	e057      	b.n	8009338 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d109      	bne.n	80092a2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	2134      	movs	r1, #52	; 0x34
 8009294:	fb01 f303 	mul.w	r3, r1, r3
 8009298:	4413      	add	r3, r2
 800929a:	3390      	adds	r3, #144	; 0x90
 800929c:	2205      	movs	r2, #5
 800929e:	701a      	strb	r2, [r3, #0]
      break;
 80092a0:	e04a      	b.n	8009338 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d147      	bne.n	8009338 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	2134      	movs	r1, #52	; 0x34
 80092ae:	fb01 f303 	mul.w	r3, r1, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	3390      	adds	r3, #144	; 0x90
 80092b6:	2208      	movs	r2, #8
 80092b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80092ba:	2302      	movs	r3, #2
 80092bc:	75fb      	strb	r3, [r7, #23]
      break;
 80092be:	e03b      	b.n	8009338 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2234      	movs	r2, #52	; 0x34
 80092c4:	fb02 f303 	mul.w	r3, r2, r3
 80092c8:	3398      	adds	r3, #152	; 0x98
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4413      	add	r3, r2
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fd52 	bl	8009d7e <USBH_MSC_SCSI_RequestSense>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d113      	bne.n	800930c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	2134      	movs	r1, #52	; 0x34
 80092ea:	fb01 f303 	mul.w	r3, r1, r3
 80092ee:	4413      	add	r3, r2
 80092f0:	3390      	adds	r3, #144	; 0x90
 80092f2:	2201      	movs	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80092f6:	78fb      	ldrb	r3, [r7, #3]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	2134      	movs	r1, #52	; 0x34
 80092fc:	fb01 f303 	mul.w	r3, r1, r3
 8009300:	4413      	add	r3, r2
 8009302:	3391      	adds	r3, #145	; 0x91
 8009304:	2202      	movs	r2, #2
 8009306:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009308:	2302      	movs	r3, #2
 800930a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d014      	beq.n	800933c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b04      	cmp	r3, #4
 8009316:	d111      	bne.n	800933c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	2134      	movs	r1, #52	; 0x34
 800931e:	fb01 f303 	mul.w	r3, r1, r3
 8009322:	4413      	add	r3, r2
 8009324:	3390      	adds	r3, #144	; 0x90
 8009326:	2208      	movs	r2, #8
 8009328:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800932a:	2302      	movs	r3, #2
 800932c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800932e:	e005      	b.n	800933c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009330:	bf00      	nop
 8009332:	e004      	b.n	800933e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009334:	bf00      	nop
 8009336:	e002      	b.n	800933e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009338:	bf00      	nop
 800933a:	e000      	b.n	800933e <USBH_MSC_RdWrProcess+0x194>
      break;
 800933c:	bf00      	nop

  }
  return error;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d10c      	bne.n	8009382 <USBH_MSC_UnitIsReady+0x3a>
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	2134      	movs	r1, #52	; 0x34
 800936e:	fb01 f303 	mul.w	r3, r1, r3
 8009372:	4413      	add	r3, r2
 8009374:	3391      	adds	r3, #145	; 0x91
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
 8009380:	e001      	b.n	8009386 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	460b      	mov	r3, r1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b0b      	cmp	r3, #11
 80093b4:	d10d      	bne.n	80093d2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	2234      	movs	r2, #52	; 0x34
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
 80093be:	3390      	adds	r3, #144	; 0x90
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4413      	add	r3, r2
 80093c4:	2234      	movs	r2, #52	; 0x34
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f005 f953 	bl	800e674 <memcpy>
    return USBH_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e000      	b.n	80093d4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80093d2:	2302      	movs	r3, #2
  }
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	607a      	str	r2, [r7, #4]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	460b      	mov	r3, r1
 80093ea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00e      	beq.n	8009420 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009408:	2b0b      	cmp	r3, #11
 800940a:	d109      	bne.n	8009420 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	2134      	movs	r1, #52	; 0x34
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	3390      	adds	r3, #144	; 0x90
 800941a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800941c:	2b01      	cmp	r3, #1
 800941e:	d001      	beq.n	8009424 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	e040      	b.n	80094a6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2206      	movs	r2, #6
 8009428:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	2134      	movs	r1, #52	; 0x34
 8009430:	fb01 f303 	mul.w	r3, r1, r3
 8009434:	4413      	add	r3, r2
 8009436:	3390      	adds	r3, #144	; 0x90
 8009438:	2206      	movs	r2, #6
 800943a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	b29a      	uxth	r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009446:	7af9      	ldrb	r1, [r7, #11]
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fd78 	bl	8009f46 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800945c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800945e:	e016      	b.n	800948e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad2      	subs	r2, r2, r3
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009470:	fb01 f303 	mul.w	r3, r1, r3
 8009474:	429a      	cmp	r2, r3
 8009476:	d805      	bhi.n	8009484 <USBH_MSC_Read+0xa8>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2201      	movs	r2, #1
 8009488:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800948a:	2302      	movs	r3, #2
 800948c:	e00b      	b.n	80094a6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800948e:	7afb      	ldrb	r3, [r7, #11]
 8009490:	4619      	mov	r1, r3
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fe89 	bl	80091aa <USBH_MSC_RdWrProcess>
 8009498:	4603      	mov	r3, r0
 800949a:	2b01      	cmp	r3, #1
 800949c:	d0e0      	beq.n	8009460 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2201      	movs	r2, #1
 80094a2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b088      	sub	sp, #32
 80094b2:	af02      	add	r7, sp, #8
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	460b      	mov	r3, r1
 80094bc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80094da:	2b0b      	cmp	r3, #11
 80094dc:	d109      	bne.n	80094f2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	2134      	movs	r1, #52	; 0x34
 80094e4:	fb01 f303 	mul.w	r3, r1, r3
 80094e8:	4413      	add	r3, r2
 80094ea:	3390      	adds	r3, #144	; 0x90
 80094ec:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d001      	beq.n	80094f6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80094f2:	2302      	movs	r3, #2
 80094f4:	e040      	b.n	8009578 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2207      	movs	r2, #7
 80094fa:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	2134      	movs	r1, #52	; 0x34
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	4413      	add	r3, r2
 8009508:	3390      	adds	r3, #144	; 0x90
 800950a:	2207      	movs	r2, #7
 800950c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	b29a      	uxth	r2, r3
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009518:	7af9      	ldrb	r1, [r7, #11]
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fca4 	bl	8009e70 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800952e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009530:	e016      	b.n	8009560 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009542:	fb01 f303 	mul.w	r3, r1, r3
 8009546:	429a      	cmp	r2, r3
 8009548:	d805      	bhi.n	8009556 <USBH_MSC_Write+0xa8>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2201      	movs	r2, #1
 800955a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800955c:	2302      	movs	r3, #2
 800955e:	e00b      	b.n	8009578 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	4619      	mov	r1, r3
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fe20 	bl	80091aa <USBH_MSC_RdWrProcess>
 800956a:	4603      	mov	r3, r0
 800956c:	2b01      	cmp	r3, #1
 800956e:	d0e0      	beq.n	8009532 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2201      	movs	r2, #1
 8009574:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2221      	movs	r2, #33	; 0x21
 800958c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 fea4 	bl	800b2f8 <USBH_CtlReq>
 80095b0:	4603      	mov	r3, r0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	22a1      	movs	r2, #161	; 0xa1
 80095c8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	22fe      	movs	r2, #254	; 0xfe
 80095ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80095e2:	2201      	movs	r2, #1
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 fe86 	bl	800b2f8 <USBH_CtlReq>
 80095ec:	4603      	mov	r3, r0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4a09      	ldr	r2, [pc, #36]	; (8009634 <USBH_MSC_BOT_Init+0x3c>)
 800960e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a09      	ldr	r2, [pc, #36]	; (8009638 <USBH_MSC_BOT_Init+0x40>)
 8009614:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	43425355 	.word	0x43425355
 8009638:	20304050 	.word	0x20304050

0800963c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800964c:	2301      	movs	r3, #1
 800964e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009650:	2301      	movs	r3, #1
 8009652:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009654:	2300      	movs	r3, #0
 8009656:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800966c:	3b01      	subs	r3, #1
 800966e:	2b0a      	cmp	r3, #10
 8009670:	f200 819e 	bhi.w	80099b0 <USBH_MSC_BOT_Process+0x374>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <USBH_MSC_BOT_Process+0x40>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	080096a9 	.word	0x080096a9
 8009680:	080096d1 	.word	0x080096d1
 8009684:	0800973b 	.word	0x0800973b
 8009688:	08009759 	.word	0x08009759
 800968c:	080097dd 	.word	0x080097dd
 8009690:	080097ff 	.word	0x080097ff
 8009694:	08009897 	.word	0x08009897
 8009698:	080098b3 	.word	0x080098b3
 800969c:	08009905 	.word	0x08009905
 80096a0:	08009935 	.word	0x08009935
 80096a4:	08009997 	.word	0x08009997
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	795b      	ldrb	r3, [r3, #5]
 80096c2:	2201      	movs	r2, #1
 80096c4:	9200      	str	r2, [sp, #0]
 80096c6:	221f      	movs	r2, #31
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f002 f824 	bl	800b716 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80096ce:	e17e      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	795b      	ldrb	r3, [r3, #5]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f004 feda 	bl	800e490 <USBH_LL_GetURBState>
 80096dc:	4603      	mov	r3, r0
 80096de:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80096e0:	7d3b      	ldrb	r3, [r7, #20]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d118      	bne.n	8009718 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00f      	beq.n	800970e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80096f4:	b25b      	sxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da04      	bge.n	8009704 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2203      	movs	r2, #3
 80096fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009702:	e157      	b.n	80099b4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2205      	movs	r2, #5
 8009708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800970c:	e152      	b.n	80099b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	2207      	movs	r2, #7
 8009712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009716:	e14d      	b.n	80099b4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009718:	7d3b      	ldrb	r3, [r7, #20]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d104      	bne.n	8009728 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009726:	e145      	b.n	80099b4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009728:	7d3b      	ldrb	r3, [r7, #20]
 800972a:	2b05      	cmp	r3, #5
 800972c:	f040 8142 	bne.w	80099b4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	220a      	movs	r2, #10
 8009734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009738:	e13c      	b.n	80099b4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	895a      	ldrh	r2, [r3, #10]
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	791b      	ldrb	r3, [r3, #4]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f002 f809 	bl	800b760 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2204      	movs	r2, #4
 8009752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009756:	e13a      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	791b      	ldrb	r3, [r3, #4]
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f004 fe96 	bl	800e490 <USBH_LL_GetURBState>
 8009764:	4603      	mov	r3, r0
 8009766:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009768:	7d3b      	ldrb	r3, [r7, #20]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d12d      	bne.n	80097ca <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	8952      	ldrh	r2, [r2, #10]
 8009776:	4293      	cmp	r3, r2
 8009778:	d910      	bls.n	800979c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	8952      	ldrh	r2, [r2, #10]
 8009784:	441a      	add	r2, r3
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	8952      	ldrh	r2, [r2, #10]
 8009794:	1a9a      	subs	r2, r3, r2
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	65da      	str	r2, [r3, #92]	; 0x5c
 800979a:	e002      	b.n	80097a2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	2200      	movs	r2, #0
 80097a0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	895a      	ldrh	r2, [r3, #10]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	791b      	ldrb	r3, [r3, #4]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 ffd1 	bl	800b760 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80097be:	e0fb      	b.n	80099b8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2207      	movs	r2, #7
 80097c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097c8:	e0f6      	b.n	80099b8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80097ca:	7d3b      	ldrb	r3, [r7, #20]
 80097cc:	2b05      	cmp	r3, #5
 80097ce:	f040 80f3 	bne.w	80099b8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2209      	movs	r2, #9
 80097d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097da:	e0ed      	b.n	80099b8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	891a      	ldrh	r2, [r3, #8]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	795b      	ldrb	r3, [r3, #5]
 80097ea:	2001      	movs	r0, #1
 80097ec:	9000      	str	r0, [sp, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f001 ff91 	bl	800b716 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	2206      	movs	r2, #6
 80097f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097fc:	e0e7      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	795b      	ldrb	r3, [r3, #5]
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f004 fe43 	bl	800e490 <USBH_LL_GetURBState>
 800980a:	4603      	mov	r3, r0
 800980c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800980e:	7d3b      	ldrb	r3, [r7, #20]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d12f      	bne.n	8009874 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	8912      	ldrh	r2, [r2, #8]
 800981c:	4293      	cmp	r3, r2
 800981e:	d910      	bls.n	8009842 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	8912      	ldrh	r2, [r2, #8]
 800982a:	441a      	add	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	8912      	ldrh	r2, [r2, #8]
 800983a:	1a9a      	subs	r2, r3, r2
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009840:	e002      	b.n	8009848 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2200      	movs	r2, #0
 8009846:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	891a      	ldrh	r2, [r3, #8]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	795b      	ldrb	r3, [r3, #5]
 800985e:	2001      	movs	r0, #1
 8009860:	9000      	str	r0, [sp, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 ff57 	bl	800b716 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009868:	e0a8      	b.n	80099bc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2207      	movs	r2, #7
 800986e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009872:	e0a3      	b.n	80099bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009874:	7d3b      	ldrb	r3, [r7, #20]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d104      	bne.n	8009884 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2205      	movs	r2, #5
 800987e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009882:	e09b      	b.n	80099bc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009884:	7d3b      	ldrb	r3, [r7, #20]
 8009886:	2b05      	cmp	r3, #5
 8009888:	f040 8098 	bne.w	80099bc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	220a      	movs	r2, #10
 8009890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009894:	e092      	b.n	80099bc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	220d      	movs	r2, #13
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 ff5c 	bl	800b760 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2208      	movs	r2, #8
 80098ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098b0:	e08d      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	791b      	ldrb	r3, [r3, #4]
 80098b6:	4619      	mov	r1, r3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f004 fde9 	bl	800e490 <USBH_LL_GetURBState>
 80098be:	4603      	mov	r3, r0
 80098c0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80098c2:	7d3b      	ldrb	r3, [r7, #20]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d115      	bne.n	80098f4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f8a9 	bl	8009a30 <USBH_MSC_DecodeCSW>
 80098de:	4603      	mov	r3, r0
 80098e0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80098e2:	7d7b      	ldrb	r3, [r7, #21]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80098e8:	2300      	movs	r3, #0
 80098ea:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80098ec:	e068      	b.n	80099c0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80098ee:	2302      	movs	r3, #2
 80098f0:	75fb      	strb	r3, [r7, #23]
      break;
 80098f2:	e065      	b.n	80099c0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80098f4:	7d3b      	ldrb	r3, [r7, #20]
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	d162      	bne.n	80099c0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2209      	movs	r2, #9
 80098fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009902:	e05d      	b.n	80099c0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	2200      	movs	r2, #0
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f864 	bl	80099d8 <USBH_MSC_BOT_Abort>
 8009910:	4603      	mov	r3, r0
 8009912:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009914:	7dbb      	ldrb	r3, [r7, #22]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2207      	movs	r2, #7
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009922:	e04f      	b.n	80099c4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009924:	7dbb      	ldrb	r3, [r7, #22]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d14c      	bne.n	80099c4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	220b      	movs	r2, #11
 800992e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009932:	e047      	b.n	80099c4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	2201      	movs	r2, #1
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f84c 	bl	80099d8 <USBH_MSC_BOT_Abort>
 8009940:	4603      	mov	r3, r0
 8009942:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d11d      	bne.n	8009986 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	795b      	ldrb	r3, [r3, #5]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f004 fdee 	bl	800e532 <USBH_LL_GetToggle>
 8009956:	4603      	mov	r3, r0
 8009958:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	7959      	ldrb	r1, [r3, #5]
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	f1c3 0301 	rsb	r3, r3, #1
 8009964:	b2db      	uxtb	r3, r3
 8009966:	461a      	mov	r2, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f004 fdb2 	bl	800e4d2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	791b      	ldrb	r3, [r3, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f004 fdab 	bl	800e4d2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2209      	movs	r2, #9
 8009980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009984:	e020      	b.n	80099c8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009986:	7dbb      	ldrb	r3, [r7, #22]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d11d      	bne.n	80099c8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	220b      	movs	r2, #11
 8009990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009994:	e018      	b.n	80099c8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fdf2 	bl	8009580 <USBH_MSC_BOT_REQ_Reset>
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d112      	bne.n	80099cc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80099ae:	e00d      	b.n	80099cc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80099b0:	bf00      	nop
 80099b2:	e00c      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099b4:	bf00      	nop
 80099b6:	e00a      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099b8:	bf00      	nop
 80099ba:	e008      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099bc:	bf00      	nop
 80099be:	e006      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099c0:	bf00      	nop
 80099c2:	e004      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <USBH_MSC_BOT_Process+0x392>
      break;
 80099cc:	bf00      	nop
  }
  return status;
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	70fb      	strb	r3, [r7, #3]
 80099e4:	4613      	mov	r3, r2
 80099e6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80099e8:	2302      	movs	r3, #2
 80099ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80099f6:	78bb      	ldrb	r3, [r7, #2]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <USBH_MSC_BOT_Abort+0x2a>
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d009      	beq.n	8009a14 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009a00:	e011      	b.n	8009a26 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	79db      	ldrb	r3, [r3, #7]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 f9a8 	bl	800ad5e <USBH_ClrFeature>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	73fb      	strb	r3, [r7, #15]
      break;
 8009a12:	e008      	b.n	8009a26 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	799b      	ldrb	r3, [r3, #6]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 f99f 	bl	800ad5e <USBH_ClrFeature>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
      break;
 8009a24:	bf00      	nop
  }
  return status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	791b      	ldrb	r3, [r3, #4]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f004 fc8d 	bl	800e36c <USBH_LL_GetLastXferSize>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b0d      	cmp	r3, #13
 8009a56:	d002      	beq.n	8009a5e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	73fb      	strb	r3, [r7, #15]
 8009a5c:	e024      	b.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a62:	4a14      	ldr	r2, [pc, #80]	; (8009ab4 <USBH_MSC_DecodeCSW+0x84>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d11d      	bne.n	8009aa4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d119      	bne.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d102      	bne.n	8009a84 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
 8009a82:	e011      	b.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d102      	bne.n	8009a94 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	e009      	b.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d104      	bne.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	73fb      	strb	r3, [r7, #15]
 8009aa2:	e001      	b.n	8009aa8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	53425355 	.word	0x53425355

08009ab8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d002      	beq.n	8009ae2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d021      	beq.n	8009b24 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ae0:	e028      	b.n	8009b34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	220a      	movs	r2, #10
 8009af4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3363      	adds	r3, #99	; 0x63
 8009afc:	2210      	movs	r2, #16
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f004 fdc5 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	73fb      	strb	r3, [r7, #15]
      break;
 8009b22:	e007      	b.n	8009b34 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7ff fd87 	bl	800963c <USBH_MSC_BOT_Process>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	73fb      	strb	r3, [r7, #15]
      break;
 8009b32:	bf00      	nop
  }

  return error;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	460b      	mov	r3, r1
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b56:	69db      	ldr	r3, [r3, #28]
 8009b58:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d002      	beq.n	8009b6a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d027      	beq.n	8009bb8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009b68:	e05f      	b.n	8009c2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2280      	movs	r2, #128	; 0x80
 8009b74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	220a      	movs	r2, #10
 8009b7c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	3363      	adds	r3, #99	; 0x63
 8009b84:	2210      	movs	r2, #16
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f004 fd81 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	2225      	movs	r2, #37	; 0x25
 8009b92:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f103 0210 	add.w	r2, r3, #16
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb6:	e038      	b.n	8009c2a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff fd3d 	bl	800963c <USBH_MSC_BOT_Process>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d12d      	bne.n	8009c28 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd2:	3303      	adds	r3, #3
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bde:	3302      	adds	r3, #2
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	021b      	lsls	r3, r3, #8
 8009be4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bec:	3301      	adds	r3, #1
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009bf2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	061b      	lsls	r3, r3, #24
 8009bfe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c16:	3306      	adds	r3, #6
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	809a      	strh	r2, [r3, #4]
      break;
 8009c28:	bf00      	nop
  }

  return error;
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3718      	adds	r7, #24
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d002      	beq.n	8009c60 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d03d      	beq.n	8009cda <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009c5e:	e089      	b.n	8009d74 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2224      	movs	r2, #36	; 0x24
 8009c64:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2280      	movs	r2, #128	; 0x80
 8009c6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	220a      	movs	r2, #10
 8009c72:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3363      	adds	r3, #99	; 0x63
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f004 fd06 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2212      	movs	r2, #18
 8009c88:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	015b      	lsls	r3, r3, #5
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	2224      	movs	r2, #36	; 0x24
 8009cac:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f103 0210 	add.w	r2, r3, #16
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd8:	e04c      	b.n	8009d74 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fcac 	bl	800963c <USBH_MSC_BOT_Process>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d141      	bne.n	8009d72 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009cee:	2222      	movs	r2, #34	; 0x22
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f004 fccc 	bl	800e690 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f003 031f 	and.w	r3, r3, #31
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	095b      	lsrs	r3, r3, #5
 8009d14:	b2da      	uxtb	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d20:	3301      	adds	r3, #1
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	b25b      	sxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	da03      	bge.n	8009d32 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	709a      	strb	r2, [r3, #2]
 8009d30:	e002      	b.n	8009d38 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	1cd8      	adds	r0, r3, #3
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d42:	3308      	adds	r3, #8
 8009d44:	2208      	movs	r2, #8
 8009d46:	4619      	mov	r1, r3
 8009d48:	f004 fc94 	bl	800e674 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f103 000c 	add.w	r0, r3, #12
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d58:	3310      	adds	r3, #16
 8009d5a:	2210      	movs	r2, #16
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	f004 fc89 	bl	800e674 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	331d      	adds	r3, #29
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009d6c:	3220      	adds	r2, #32
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	601a      	str	r2, [r3, #0]
      break;
 8009d72:	bf00      	nop
  }

  return error;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b086      	sub	sp, #24
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	60f8      	str	r0, [r7, #12]
 8009d86:	460b      	mov	r3, r1
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d002      	beq.n	8009daa <USBH_MSC_SCSI_RequestSense+0x2c>
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d03d      	beq.n	8009e24 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009da8:	e05d      	b.n	8009e66 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	220e      	movs	r2, #14
 8009dae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2280      	movs	r2, #128	; 0x80
 8009db4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	220a      	movs	r2, #10
 8009dbc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3363      	adds	r3, #99	; 0x63
 8009dc4:	2210      	movs	r2, #16
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f004 fc61 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	015b      	lsls	r3, r3, #5
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	220e      	movs	r2, #14
 8009df6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f103 0210 	add.w	r2, r3, #16
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
      break;
 8009e22:	e020      	b.n	8009e66 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e24:	7afb      	ldrb	r3, [r7, #11]
 8009e26:	4619      	mov	r1, r3
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff fc07 	bl	800963c <USBH_MSC_BOT_Process>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d115      	bne.n	8009e64 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3e:	3302      	adds	r3, #2
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	f003 030f 	and.w	r3, r3, #15
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e52:	7b1a      	ldrb	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e5e:	7b5a      	ldrb	r2, [r3, #13]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	709a      	strb	r2, [r3, #2]
      break;
 8009e64:	bf00      	nop
  }

  return error;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e80:	2302      	movs	r3, #2
 8009e82:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d002      	beq.n	8009e9e <USBH_MSC_SCSI_Write+0x2e>
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d047      	beq.n	8009f2c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e9c:	e04e      	b.n	8009f3c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	fb03 f202 	mul.w	r2, r3, r2
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	220a      	movs	r2, #10
 8009ebc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	3363      	adds	r3, #99	; 0x63
 8009ec4:	2210      	movs	r2, #16
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f004 fbe1 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	222a      	movs	r2, #42	; 0x2a
 8009ed2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009ede:	79ba      	ldrb	r2, [r7, #6]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ee6:	797a      	ldrb	r2, [r7, #5]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009eee:	1d3b      	adds	r3, r7, #4
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ef8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009f02:	f107 0320 	add.w	r3, r7, #32
 8009f06:	781a      	ldrb	r2, [r3, #0]
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f26:	2301      	movs	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2a:	e007      	b.n	8009f3c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fb83 	bl	800963c <USBH_MSC_BOT_Process>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3a:	bf00      	nop
  }

  return error;
 8009f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b086      	sub	sp, #24
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	603b      	str	r3, [r7, #0]
 8009f52:	460b      	mov	r3, r1
 8009f54:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f56:	2302      	movs	r3, #2
 8009f58:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d002      	beq.n	8009f74 <USBH_MSC_SCSI_Read+0x2e>
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d047      	beq.n	800a002 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009f72:	e04e      	b.n	800a012 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	fb03 f202 	mul.w	r2, r3, r2
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2280      	movs	r2, #128	; 0x80
 8009f8a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	220a      	movs	r2, #10
 8009f92:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	3363      	adds	r3, #99	; 0x63
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f004 fb76 	bl	800e690 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2228      	movs	r2, #40	; 0x28
 8009fa8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009fac:	79fa      	ldrb	r2, [r7, #7]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009fb4:	79ba      	ldrb	r2, [r7, #6]
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009fbc:	797a      	ldrb	r2, [r7, #5]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009fc4:	1d3b      	adds	r3, r7, #4
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009fce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009fd8:	f107 0320 	add.w	r3, r7, #32
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	75fb      	strb	r3, [r7, #23]
      break;
 800a000:	e007      	b.n	800a012 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	4619      	mov	r1, r3
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fb18 	bl	800963c <USBH_MSC_BOT_Process>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]
      break;
 800a010:	bf00      	nop
  }

  return error;
 800a012:	7dfb      	ldrb	r3, [r7, #23]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3718      	adds	r7, #24
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a030:	2302      	movs	r3, #2
 800a032:	e029      	b.n	800a088 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	79fa      	ldrb	r2, [r7, #7]
 800a038:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f81f 	bl	800a090 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f004 f8bf 	bl	800e204 <USBH_LL_Init>

  return USBH_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	e009      	b.n	800a0b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	33e0      	adds	r3, #224	; 0xe0
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b0f      	cmp	r3, #15
 800a0ba:	d9f2      	bls.n	800a0a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e009      	b.n	800a0d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0dc:	d3f1      	bcc.n	800a0c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2240      	movs	r2, #64	; 0x40
 800a102:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d016      	beq.n	800a17a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10e      	bne.n	800a174 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a15c:	1c59      	adds	r1, r3, #1
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	33de      	adds	r3, #222	; 0xde
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
 800a172:	e004      	b.n	800a17e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a174:	2302      	movs	r3, #2
 800a176:	73fb      	strb	r3, [r7, #15]
 800a178:	e001      	b.n	800a17e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a17a:	2302      	movs	r3, #2
 800a17c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d204      	bcs.n	800a1b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a1b0:	e001      	b.n	800a1b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	70fb      	strb	r3, [r7, #3]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70bb      	strb	r3, [r7, #2]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a1ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a1ee:	e025      	b.n	800a23c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	221a      	movs	r2, #26
 800a1f4:	fb02 f303 	mul.w	r3, r2, r3
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	3302      	adds	r3, #2
 800a200:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	795b      	ldrb	r3, [r3, #5]
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d002      	beq.n	800a212 <USBH_FindInterface+0x4e>
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	2bff      	cmp	r3, #255	; 0xff
 800a210:	d111      	bne.n	800a236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a216:	78ba      	ldrb	r2, [r7, #2]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d002      	beq.n	800a222 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a21c:	78bb      	ldrb	r3, [r7, #2]
 800a21e:	2bff      	cmp	r3, #255	; 0xff
 800a220:	d109      	bne.n	800a236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a226:	787a      	ldrb	r2, [r7, #1]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d002      	beq.n	800a232 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a22c:	787b      	ldrb	r3, [r7, #1]
 800a22e:	2bff      	cmp	r3, #255	; 0xff
 800a230:	d101      	bne.n	800a236 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	e006      	b.n	800a244 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	3301      	adds	r3, #1
 800a23a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d9d6      	bls.n	800a1f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a242:	23ff      	movs	r3, #255	; 0xff
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f004 f80f 	bl	800e27c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a25e:	2101      	movs	r1, #1
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f004 f928 	bl	800e4b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af04      	add	r7, sp, #16
 800a276:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a278:	2302      	movs	r3, #2
 800a27a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d102      	bne.n	800a292 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2203      	movs	r2, #3
 800a290:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b0b      	cmp	r3, #11
 800a29a:	f200 81be 	bhi.w	800a61a <USBH_Process+0x3aa>
 800a29e:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <USBH_Process+0x34>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a2d5 	.word	0x0800a2d5
 800a2a8:	0800a307 	.word	0x0800a307
 800a2ac:	0800a36f 	.word	0x0800a36f
 800a2b0:	0800a5b5 	.word	0x0800a5b5
 800a2b4:	0800a61b 	.word	0x0800a61b
 800a2b8:	0800a413 	.word	0x0800a413
 800a2bc:	0800a55b 	.word	0x0800a55b
 800a2c0:	0800a449 	.word	0x0800a449
 800a2c4:	0800a469 	.word	0x0800a469
 800a2c8:	0800a489 	.word	0x0800a489
 800a2cc:	0800a4cd 	.word	0x0800a4cd
 800a2d0:	0800a59d 	.word	0x0800a59d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 819e 	beq.w	800a61e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a2e8:	20c8      	movs	r0, #200	; 0xc8
 800a2ea:	f004 f952 	bl	800e592 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f004 f821 	bl	800e336 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a304:	e18b      	b.n	800a61e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d107      	bne.n	800a320 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a31e:	e18d      	b.n	800a63c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a32a:	d914      	bls.n	800a356 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a332:	3301      	adds	r3, #1
 800a334:	b2da      	uxtb	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a342:	2b03      	cmp	r3, #3
 800a344:	d903      	bls.n	800a34e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	220d      	movs	r2, #13
 800a34a:	701a      	strb	r2, [r3, #0]
      break;
 800a34c:	e176      	b.n	800a63c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
      break;
 800a354:	e172      	b.n	800a63c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a35c:	f103 020a 	add.w	r2, r3, #10
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a366:	200a      	movs	r0, #10
 800a368:	f004 f913 	bl	800e592 <USBH_Delay>
      break;
 800a36c:	e166      	b.n	800a63c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a37e:	2104      	movs	r1, #4
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a384:	2064      	movs	r0, #100	; 0x64
 800a386:	f004 f904 	bl	800e592 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f003 ffac 	bl	800e2e8 <USBH_LL_GetSpeed>
 800a390:	4603      	mov	r3, r0
 800a392:	461a      	mov	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2205      	movs	r2, #5
 800a39e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fa29 	bl	800b7fa <USBH_AllocPipe>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a3b0:	2180      	movs	r1, #128	; 0x80
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f001 fa21 	bl	800b7fa <USBH_AllocPipe>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7919      	ldrb	r1, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a3d4:	b292      	uxth	r2, r2
 800a3d6:	9202      	str	r2, [sp, #8]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	9201      	str	r2, [sp, #4]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2280      	movs	r2, #128	; 0x80
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 f9da 	bl	800b79c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	7959      	ldrb	r1, [r3, #5]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a3fc:	b292      	uxth	r2, r2
 800a3fe:	9202      	str	r2, [sp, #8]
 800a400:	2200      	movs	r2, #0
 800a402:	9201      	str	r2, [sp, #4]
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	4603      	mov	r3, r0
 800a408:	2200      	movs	r2, #0
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f001 f9c6 	bl	800b79c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a410:	e114      	b.n	800a63c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f918 	bl	800a648 <USBH_HandleEnum>
 800a418:	4603      	mov	r3, r0
 800a41a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 80fe 	bne.w	800a622 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a434:	2b01      	cmp	r3, #1
 800a436:	d103      	bne.n	800a440 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2208      	movs	r2, #8
 800a43c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a43e:	e0f0      	b.n	800a622 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2207      	movs	r2, #7
 800a444:	701a      	strb	r2, [r3, #0]
      break;
 800a446:	e0ec      	b.n	800a622 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80e9 	beq.w	800a626 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a45a:	2101      	movs	r1, #1
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2208      	movs	r2, #8
 800a464:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a466:	e0de      	b.n	800a626 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fc2c 	bl	800acd0 <USBH_SetCfg>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 80d5 	bne.w	800a62a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2209      	movs	r2, #9
 800a484:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a486:	e0d0      	b.n	800a62a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b00      	cmp	r3, #0
 800a494:	d016      	beq.n	800a4c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a496:	2101      	movs	r1, #1
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fc3c 	bl	800ad16 <USBH_SetFeature>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4b0:	e0bd      	b.n	800a62e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	f040 80b9 	bne.w	800a62e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	220a      	movs	r2, #10
 800a4c0:	701a      	strb	r2, [r3, #0]
      break;
 800a4c2:	e0b4      	b.n	800a62e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	220a      	movs	r2, #10
 800a4c8:	701a      	strb	r2, [r3, #0]
      break;
 800a4ca:	e0b0      	b.n	800a62e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 80ad 	beq.w	800a632 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
 800a4e4:	e016      	b.n	800a514 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a4e6:	7bfa      	ldrb	r2, [r7, #15]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	32de      	adds	r2, #222	; 0xde
 800a4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f0:	791a      	ldrb	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d108      	bne.n	800a50e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a4fc:	7bfa      	ldrb	r2, [r7, #15]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	32de      	adds	r2, #222	; 0xde
 800a502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a50c:	e005      	b.n	800a51a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	3301      	adds	r3, #1
 800a512:	73fb      	strb	r3, [r7, #15]
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0e5      	beq.n	800a4e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d016      	beq.n	800a552 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2206      	movs	r2, #6
 800a53a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a542:	2103      	movs	r1, #3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a548:	e073      	b.n	800a632 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	220d      	movs	r2, #13
 800a54e:	701a      	strb	r2, [r3, #0]
      break;
 800a550:	e06f      	b.n	800a632 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	220d      	movs	r2, #13
 800a556:	701a      	strb	r2, [r3, #0]
      break;
 800a558:	e06b      	b.n	800a632 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d017      	beq.n	800a594 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	4798      	blx	r3
 800a570:	4603      	mov	r3, r0
 800a572:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a574:	7bbb      	ldrb	r3, [r7, #14]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d103      	bne.n	800a584 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	220b      	movs	r2, #11
 800a580:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a582:	e058      	b.n	800a636 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d154      	bne.n	800a636 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	220d      	movs	r2, #13
 800a590:	701a      	strb	r2, [r3, #0]
      break;
 800a592:	e050      	b.n	800a636 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	220d      	movs	r2, #13
 800a598:	701a      	strb	r2, [r3, #0]
      break;
 800a59a:	e04c      	b.n	800a636 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d049      	beq.n	800a63a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	4798      	blx	r3
      }
      break;
 800a5b2:	e042      	b.n	800a63a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fd67 	bl	800a090 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5f0:	2105      	movs	r1, #5
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d107      	bne.n	800a612 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fe20 	bl	800a250 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a610:	e014      	b.n	800a63c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f003 fe32 	bl	800e27c <USBH_LL_Start>
      break;
 800a618:	e010      	b.n	800a63c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a61a:	bf00      	nop
 800a61c:	e00e      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a61e:	bf00      	nop
 800a620:	e00c      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a622:	bf00      	nop
 800a624:	e00a      	b.n	800a63c <USBH_Process+0x3cc>
    break;
 800a626:	bf00      	nop
 800a628:	e008      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a62a:	bf00      	nop
 800a62c:	e006      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a62e:	bf00      	nop
 800a630:	e004      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a632:	bf00      	nop
 800a634:	e002      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a636:	bf00      	nop
 800a638:	e000      	b.n	800a63c <USBH_Process+0x3cc>
      break;
 800a63a:	bf00      	nop
  }
  return USBH_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop

0800a648 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b088      	sub	sp, #32
 800a64c:	af04      	add	r7, sp, #16
 800a64e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a650:	2301      	movs	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a654:	2301      	movs	r3, #1
 800a656:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	2b07      	cmp	r3, #7
 800a65e:	f200 81c1 	bhi.w	800a9e4 <USBH_HandleEnum+0x39c>
 800a662:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <USBH_HandleEnum+0x20>)
 800a664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a668:	0800a689 	.word	0x0800a689
 800a66c:	0800a747 	.word	0x0800a747
 800a670:	0800a7b1 	.word	0x0800a7b1
 800a674:	0800a83f 	.word	0x0800a83f
 800a678:	0800a8a9 	.word	0x0800a8a9
 800a67c:	0800a919 	.word	0x0800a919
 800a680:	0800a95f 	.word	0x0800a95f
 800a684:	0800a9a5 	.word	0x0800a9a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a688:	2108      	movs	r1, #8
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa50 	bl	800ab30 <USBH_Get_DevDesc>
 800a690:	4603      	mov	r3, r0
 800a692:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d130      	bne.n	800a6fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	7919      	ldrb	r1, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a6be:	b292      	uxth	r2, r2
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	9201      	str	r2, [sp, #4]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2280      	movs	r2, #128	; 0x80
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f001 f865 	bl	800b79c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7959      	ldrb	r1, [r3, #5]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	9201      	str	r2, [sp, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 f851 	bl	800b79c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a6fa:	e175      	b.n	800a9e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	f040 8172 	bne.w	800a9e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a70a:	3301      	adds	r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d903      	bls.n	800a726 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	220d      	movs	r2, #13
 800a722:	701a      	strb	r2, [r3, #0]
      break;
 800a724:	e160      	b.n	800a9e8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	795b      	ldrb	r3, [r3, #5]
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 f885 	bl	800b83c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	791b      	ldrb	r3, [r3, #4]
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f87f 	bl	800b83c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
      break;
 800a744:	e150      	b.n	800a9e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a746:	2112      	movs	r1, #18
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f9f1 	bl	800ab30 <USBH_Get_DevDesc>
 800a74e:	4603      	mov	r3, r0
 800a750:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a752:	7bbb      	ldrb	r3, [r7, #14]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d103      	bne.n	800a760 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2202      	movs	r2, #2
 800a75c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a75e:	e145      	b.n	800a9ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	2b03      	cmp	r3, #3
 800a764:	f040 8142 	bne.w	800a9ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a76e:	3301      	adds	r3, #1
 800a770:	b2da      	uxtb	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d903      	bls.n	800a78a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	220d      	movs	r2, #13
 800a786:	701a      	strb	r2, [r3, #0]
      break;
 800a788:	e130      	b.n	800a9ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	795b      	ldrb	r3, [r3, #5]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 f853 	bl	800b83c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f84d 	bl	800b83c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
      break;
 800a7ae:	e11d      	b.n	800a9ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fa68 	bl	800ac88 <USBH_SetAddress>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d132      	bne.n	800a828 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a7c2:	2002      	movs	r0, #2
 800a7c4:	f003 fee5 	bl	800e592 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7919      	ldrb	r1, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a7ea:	b292      	uxth	r2, r2
 800a7ec:	9202      	str	r2, [sp, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2280      	movs	r2, #128	; 0x80
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 ffcf 	bl	800b79c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	7959      	ldrb	r1, [r3, #5]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a812:	b292      	uxth	r2, r2
 800a814:	9202      	str	r2, [sp, #8]
 800a816:	2200      	movs	r2, #0
 800a818:	9201      	str	r2, [sp, #4]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	4603      	mov	r3, r0
 800a81e:	2200      	movs	r2, #0
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 ffbb 	bl	800b79c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a826:	e0e3      	b.n	800a9f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	f040 80e0 	bne.w	800a9f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	220d      	movs	r2, #13
 800a834:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	705a      	strb	r2, [r3, #1]
      break;
 800a83c:	e0d8      	b.n	800a9f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a83e:	2109      	movs	r1, #9
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f99d 	bl	800ab80 <USBH_Get_CfgDesc>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d103      	bne.n	800a858 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2204      	movs	r2, #4
 800a854:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a856:	e0cd      	b.n	800a9f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	f040 80ca 	bne.w	800a9f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a866:	3301      	adds	r3, #1
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a876:	2b03      	cmp	r3, #3
 800a878:	d903      	bls.n	800a882 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	220d      	movs	r2, #13
 800a87e:	701a      	strb	r2, [r3, #0]
      break;
 800a880:	e0b8      	b.n	800a9f4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	795b      	ldrb	r3, [r3, #5]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 ffd7 	bl	800b83c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	791b      	ldrb	r3, [r3, #4]
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 ffd1 	bl	800b83c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
      break;
 800a8a6:	e0a5      	b.n	800a9f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f965 	bl	800ab80 <USBH_Get_CfgDesc>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8ba:	7bbb      	ldrb	r3, [r7, #14]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d103      	bne.n	800a8c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8c6:	e097      	b.n	800a9f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	f040 8094 	bne.w	800a9f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d903      	bls.n	800a8f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	220d      	movs	r2, #13
 800a8ee:	701a      	strb	r2, [r3, #0]
      break;
 800a8f0:	e082      	b.n	800a9f8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	795b      	ldrb	r3, [r3, #5]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 ff9f 	bl	800b83c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	791b      	ldrb	r3, [r3, #4]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 ff99 	bl	800b83c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
      break;
 800a916:	e06f      	b.n	800a9f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d019      	beq.n	800a956 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a92e:	23ff      	movs	r3, #255	; 0xff
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f949 	bl	800abc8 <USBH_Get_StringDesc>
 800a936:	4603      	mov	r3, r0
 800a938:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d103      	bne.n	800a948 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2206      	movs	r2, #6
 800a944:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a946:	e059      	b.n	800a9fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d156      	bne.n	800a9fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2206      	movs	r2, #6
 800a952:	705a      	strb	r2, [r3, #1]
      break;
 800a954:	e052      	b.n	800a9fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2206      	movs	r2, #6
 800a95a:	705a      	strb	r2, [r3, #1]
      break;
 800a95c:	e04e      	b.n	800a9fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a964:	2b00      	cmp	r3, #0
 800a966:	d019      	beq.n	800a99c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a974:	23ff      	movs	r3, #255	; 0xff
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f926 	bl	800abc8 <USBH_Get_StringDesc>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2207      	movs	r2, #7
 800a98a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a98c:	e038      	b.n	800aa00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a98e:	7bbb      	ldrb	r3, [r7, #14]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d135      	bne.n	800aa00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2207      	movs	r2, #7
 800a998:	705a      	strb	r2, [r3, #1]
      break;
 800a99a:	e031      	b.n	800aa00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2207      	movs	r2, #7
 800a9a0:	705a      	strb	r2, [r3, #1]
      break;
 800a9a2:	e02d      	b.n	800aa00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d017      	beq.n	800a9de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a9ba:	23ff      	movs	r3, #255	; 0xff
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f903 	bl	800abc8 <USBH_Get_StringDesc>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d102      	bne.n	800a9d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a9d0:	e018      	b.n	800aa04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d115      	bne.n	800aa04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
      break;
 800a9dc:	e012      	b.n	800aa04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e2:	e00f      	b.n	800aa04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a9e4:	bf00      	nop
 800a9e6:	e00e      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9e8:	bf00      	nop
 800a9ea:	e00c      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9ec:	bf00      	nop
 800a9ee:	e00a      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9f0:	bf00      	nop
 800a9f2:	e008      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9f4:	bf00      	nop
 800a9f6:	e006      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9f8:	bf00      	nop
 800a9fa:	e004      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800a9fc:	bf00      	nop
 800a9fe:	e002      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800aa00:	bf00      	nop
 800aa02:	e000      	b.n	800aa06 <USBH_HandleEnum+0x3be>
      break;
 800aa04:	bf00      	nop
  }
  return Status;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	683a      	ldr	r2, [r7, #0]
 800aa1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f804 	bl	800aa52 <USBH_HandleSof>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b082      	sub	sp, #8
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b0b      	cmp	r3, #11
 800aa62:	d10a      	bne.n	800aa7a <USBH_HandleSof+0x28>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
  }
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800aa92:	bf00      	nop
}
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aaae:	bf00      	nop
}
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f003 fbd2 	bl	800e2b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	791b      	ldrb	r3, [r3, #4]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fe91 	bl	800b83c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fe8b 	bl	800b83c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f864 	bl	800ac1e <USBH_GetDescriptor>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10a      	bne.n	800ab76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	b292      	uxth	r2, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	f000 f918 	bl	800ada6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	331c      	adds	r3, #28
 800ab90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ab92:	887b      	ldrh	r3, [r7, #2]
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f83d 	bl	800ac1e <USBH_GetDescriptor>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d107      	bne.n	800abbe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800abae:	887b      	ldrh	r3, [r7, #2]
 800abb0:	461a      	mov	r2, r3
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f987 	bl	800aec8 <USBH_ParseCfgDesc>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	461a      	mov	r2, r3
 800abd4:	460b      	mov	r3, r1
 800abd6:	72fb      	strb	r3, [r7, #11]
 800abd8:	4613      	mov	r3, r2
 800abda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800abe4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800abec:	893b      	ldrh	r3, [r7, #8]
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	460b      	mov	r3, r1
 800abf2:	2100      	movs	r1, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 f812 	bl	800ac1e <USBH_GetDescriptor>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac0a:	893a      	ldrh	r2, [r7, #8]
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fb24 	bl	800b25c <USBH_ParseStringDesc>
  }

  return status;
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b084      	sub	sp, #16
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	607b      	str	r3, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	72fb      	strb	r3, [r7, #11]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	789b      	ldrb	r3, [r3, #2]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d11c      	bne.n	800ac72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2206      	movs	r2, #6
 800ac48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	893a      	ldrh	r2, [r7, #8]
 800ac4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ac50:	893b      	ldrh	r3, [r7, #8]
 800ac52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac5a:	d104      	bne.n	800ac66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f240 4209 	movw	r2, #1033	; 0x409
 800ac62:	829a      	strh	r2, [r3, #20]
 800ac64:	e002      	b.n	800ac6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8b3a      	ldrh	r2, [r7, #24]
 800ac70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ac72:	8b3b      	ldrh	r3, [r7, #24]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 fb3d 	bl	800b2f8 <USBH_CtlReq>
 800ac7e:	4603      	mov	r3, r0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	789b      	ldrb	r3, [r3, #2]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d10f      	bne.n	800acbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2205      	movs	r2, #5
 800aca6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	b29a      	uxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800acbc:	2200      	movs	r2, #0
 800acbe:	2100      	movs	r1, #0
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb19 	bl	800b2f8 <USBH_CtlReq>
 800acc6:	4603      	mov	r3, r0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	789b      	ldrb	r3, [r3, #2]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d10e      	bne.n	800ad02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2209      	movs	r2, #9
 800acee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	887a      	ldrh	r2, [r7, #2]
 800acf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad02:	2200      	movs	r2, #0
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 faf6 	bl	800b2f8 <USBH_CtlReq>
 800ad0c:	4603      	mov	r3, r0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	789b      	ldrb	r3, [r3, #2]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d10f      	bne.n	800ad4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2203      	movs	r2, #3
 800ad34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ad36:	78fb      	ldrb	r3, [r7, #3]
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fad2 	bl	800b2f8 <USBH_CtlReq>
 800ad54:	4603      	mov	r3, r0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	789b      	ldrb	r3, [r3, #2]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d10f      	bne.n	800ad92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2202      	movs	r2, #2
 800ad76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ad92:	2200      	movs	r2, #0
 800ad94:	2100      	movs	r1, #0
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 faae 	bl	800b2f8 <USBH_CtlReq>
 800ad9c:	4603      	mov	r3, r0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	781a      	ldrb	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	785a      	ldrb	r2, [r3, #1]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	3302      	adds	r3, #2
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	3303      	adds	r3, #3
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	021b      	lsls	r3, r3, #8
 800add6:	b29b      	uxth	r3, r3
 800add8:	4313      	orrs	r3, r2
 800adda:	b29a      	uxth	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	791a      	ldrb	r2, [r3, #4]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	795a      	ldrb	r2, [r3, #5]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	799a      	ldrb	r2, [r3, #6]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	79da      	ldrb	r2, [r3, #7]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	79db      	ldrb	r3, [r3, #7]
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	dc11      	bgt.n	800ae2c <USBH_ParseDevDesc+0x86>
 800ae08:	2b08      	cmp	r3, #8
 800ae0a:	db16      	blt.n	800ae3a <USBH_ParseDevDesc+0x94>
 800ae0c:	3b08      	subs	r3, #8
 800ae0e:	2201      	movs	r2, #1
 800ae10:	fa02 f303 	lsl.w	r3, r2, r3
 800ae14:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ae18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bf14      	ite	ne
 800ae20:	2301      	movne	r3, #1
 800ae22:	2300      	moveq	r3, #0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <USBH_ParseDevDesc+0x8a>
 800ae2a:	e006      	b.n	800ae3a <USBH_ParseDevDesc+0x94>
 800ae2c:	2b40      	cmp	r3, #64	; 0x40
 800ae2e:	d104      	bne.n	800ae3a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	79da      	ldrb	r2, [r3, #7]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	71da      	strb	r2, [r3, #7]
      break;
 800ae38:	e003      	b.n	800ae42 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2240      	movs	r2, #64	; 0x40
 800ae3e:	71da      	strb	r2, [r3, #7]
      break;
 800ae40:	bf00      	nop
  }

  if (length > 8U)
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	2b08      	cmp	r3, #8
 800ae46:	d939      	bls.n	800aebc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	3309      	adds	r3, #9
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	330a      	adds	r3, #10
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	330b      	adds	r3, #11
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	021b      	lsls	r3, r3, #8
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	330c      	adds	r3, #12
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	330d      	adds	r3, #13
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	021b      	lsls	r3, r3, #8
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	7b9a      	ldrb	r2, [r3, #14]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	7bda      	ldrb	r2, [r3, #15]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	7c1a      	ldrb	r2, [r3, #16]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	7c5a      	ldrb	r2, [r3, #17]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	745a      	strb	r2, [r3, #17]
  }
}
 800aebc:	bf00      	nop
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08c      	sub	sp, #48	; 0x30
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aedc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aee8:	2300      	movs	r3, #0
 800aeea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	781a      	ldrb	r2, [r3, #0]
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	785a      	ldrb	r2, [r3, #1]
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	3302      	adds	r3, #2
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b29a      	uxth	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	3303      	adds	r3, #3
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b29b      	uxth	r3, r3
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b29b      	uxth	r3, r3
 800af20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af24:	bf28      	it	cs
 800af26:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	791a      	ldrb	r2, [r3, #4]
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	795a      	ldrb	r2, [r3, #5]
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	799a      	ldrb	r2, [r3, #6]
 800af44:	6a3b      	ldr	r3, [r7, #32]
 800af46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	79da      	ldrb	r2, [r3, #7]
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	7a1a      	ldrb	r2, [r3, #8]
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d002      	beq.n	800af66 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	2209      	movs	r2, #9
 800af64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800af66:	88fb      	ldrh	r3, [r7, #6]
 800af68:	2b09      	cmp	r3, #9
 800af6a:	f240 809d 	bls.w	800b0a8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800af6e:	2309      	movs	r3, #9
 800af70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800af72:	2300      	movs	r3, #0
 800af74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af76:	e081      	b.n	800b07c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af78:	f107 0316 	add.w	r3, r7, #22
 800af7c:	4619      	mov	r1, r3
 800af7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af80:	f000 f99f 	bl	800b2c2 <USBH_GetNextDesc>
 800af84:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d176      	bne.n	800b07c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b09      	cmp	r3, #9
 800af94:	d002      	beq.n	800af9c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af98:	2209      	movs	r2, #9
 800af9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800af9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afa0:	221a      	movs	r2, #26
 800afa2:	fb02 f303 	mul.w	r3, r2, r3
 800afa6:	3308      	adds	r3, #8
 800afa8:	6a3a      	ldr	r2, [r7, #32]
 800afaa:	4413      	add	r3, r2
 800afac:	3302      	adds	r3, #2
 800afae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800afb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afb2:	69f8      	ldr	r0, [r7, #28]
 800afb4:	f000 f87e 	bl	800b0b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800afc2:	e043      	b.n	800b04c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800afc4:	f107 0316 	add.w	r3, r7, #22
 800afc8:	4619      	mov	r1, r3
 800afca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afcc:	f000 f979 	bl	800b2c2 <USBH_GetNextDesc>
 800afd0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	d138      	bne.n	800b04c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	795b      	ldrb	r3, [r3, #5]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d10f      	bne.n	800b002 <USBH_ParseCfgDesc+0x13a>
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	799b      	ldrb	r3, [r3, #6]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d10b      	bne.n	800b002 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	79db      	ldrb	r3, [r3, #7]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10f      	bne.n	800b012 <USBH_ParseCfgDesc+0x14a>
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b09      	cmp	r3, #9
 800aff8:	d00b      	beq.n	800b012 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	2209      	movs	r2, #9
 800affe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b000:	e007      	b.n	800b012 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2b07      	cmp	r3, #7
 800b008:	d004      	beq.n	800b014 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	2207      	movs	r2, #7
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e000      	b.n	800b014 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b012:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b018:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b01c:	3201      	adds	r2, #1
 800b01e:	00d2      	lsls	r2, r2, #3
 800b020:	211a      	movs	r1, #26
 800b022:	fb01 f303 	mul.w	r3, r1, r3
 800b026:	4413      	add	r3, r2
 800b028:	3308      	adds	r3, #8
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	4413      	add	r3, r2
 800b02e:	3304      	adds	r3, #4
 800b030:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b034:	69b9      	ldr	r1, [r7, #24]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f000 f86b 	bl	800b112 <USBH_ParseEPDesc>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b046:	3301      	adds	r3, #1
 800b048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	791b      	ldrb	r3, [r3, #4]
 800b050:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b054:	429a      	cmp	r2, r3
 800b056:	d204      	bcs.n	800b062 <USBH_ParseCfgDesc+0x19a>
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	885a      	ldrh	r2, [r3, #2]
 800b05c:	8afb      	ldrh	r3, [r7, #22]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d8b0      	bhi.n	800afc4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	791b      	ldrb	r3, [r3, #4]
 800b066:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d201      	bcs.n	800b072 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b06e:	2303      	movs	r3, #3
 800b070:	e01c      	b.n	800b0ac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b076:	3301      	adds	r3, #1
 800b078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b080:	2b01      	cmp	r3, #1
 800b082:	d805      	bhi.n	800b090 <USBH_ParseCfgDesc+0x1c8>
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	885a      	ldrh	r2, [r3, #2]
 800b088:	8afb      	ldrh	r3, [r7, #22]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	f63f af74 	bhi.w	800af78 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	791b      	ldrb	r3, [r3, #4]
 800b094:	2b02      	cmp	r3, #2
 800b096:	bf28      	it	cs
 800b098:	2302      	movcs	r3, #2
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d201      	bcs.n	800b0a8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e001      	b.n	800b0ac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3730      	adds	r7, #48	; 0x30
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781a      	ldrb	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	785a      	ldrb	r2, [r3, #1]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	789a      	ldrb	r2, [r3, #2]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	78da      	ldrb	r2, [r3, #3]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	791a      	ldrb	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	795a      	ldrb	r2, [r3, #5]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	799a      	ldrb	r2, [r3, #6]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	79da      	ldrb	r2, [r3, #7]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	7a1a      	ldrb	r2, [r3, #8]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	721a      	strb	r2, [r3, #8]
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b112:	b480      	push	{r7}
 800b114:	b087      	sub	sp, #28
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	785a      	ldrb	r2, [r3, #1]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	789a      	ldrb	r2, [r3, #2]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	78da      	ldrb	r2, [r3, #3]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3304      	adds	r3, #4
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3305      	adds	r3, #5
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b29b      	uxth	r3, r3
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	b29b      	uxth	r3, r3
 800b156:	4313      	orrs	r3, r2
 800b158:	b29a      	uxth	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	799a      	ldrb	r2, [r3, #6]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	889b      	ldrh	r3, [r3, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b16e:	2303      	movs	r3, #3
 800b170:	75fb      	strb	r3, [r7, #23]
 800b172:	e033      	b.n	800b1dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	889b      	ldrh	r3, [r3, #4]
 800b178:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	b29a      	uxth	r2, r3
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	889b      	ldrh	r3, [r3, #4]
 800b18a:	b21a      	sxth	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	b299      	uxth	r1, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3305      	adds	r3, #5
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	021b      	lsls	r3, r3, #8
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d110      	bne.n	800b1ce <USBH_ParseEPDesc+0xbc>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	b299      	uxth	r1, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3305      	adds	r3, #5
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	b21b      	sxth	r3, r3
 800b1c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1ca:	b21b      	sxth	r3, r3
 800b1cc:	e001      	b.n	800b1d2 <USBH_ParseEPDesc+0xc0>
 800b1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b21b      	sxth	r3, r3
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d116      	bne.n	800b214 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	78db      	ldrb	r3, [r3, #3]
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d005      	beq.n	800b1fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	78db      	ldrb	r3, [r3, #3]
 800b1f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b1fa:	2b03      	cmp	r3, #3
 800b1fc:	d127      	bne.n	800b24e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	799b      	ldrb	r3, [r3, #6]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <USBH_ParseEPDesc+0xfc>
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	799b      	ldrb	r3, [r3, #6]
 800b20a:	2b10      	cmp	r3, #16
 800b20c:	d91f      	bls.n	800b24e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b20e:	2303      	movs	r3, #3
 800b210:	75fb      	strb	r3, [r7, #23]
 800b212:	e01c      	b.n	800b24e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	78db      	ldrb	r3, [r3, #3]
 800b218:	f003 0303 	and.w	r3, r3, #3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d10a      	bne.n	800b236 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	799b      	ldrb	r3, [r3, #6]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <USBH_ParseEPDesc+0x11e>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	799b      	ldrb	r3, [r3, #6]
 800b22c:	2b10      	cmp	r3, #16
 800b22e:	d90e      	bls.n	800b24e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b230:	2303      	movs	r3, #3
 800b232:	75fb      	strb	r3, [r7, #23]
 800b234:	e00b      	b.n	800b24e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	78db      	ldrb	r3, [r3, #3]
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d105      	bne.n	800b24e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	799b      	ldrb	r3, [r3, #6]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b24a:	2303      	movs	r3, #3
 800b24c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b250:	4618      	mov	r0, r3
 800b252:	371c      	adds	r7, #28
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	4613      	mov	r3, r2
 800b268:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2b03      	cmp	r3, #3
 800b272:	d120      	bne.n	800b2b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	1e9a      	subs	r2, r3, #2
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	4293      	cmp	r3, r2
 800b27e:	bf28      	it	cs
 800b280:	4613      	movcs	r3, r2
 800b282:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3302      	adds	r3, #2
 800b288:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b28a:	2300      	movs	r3, #0
 800b28c:	82fb      	strh	r3, [r7, #22]
 800b28e:	e00b      	b.n	800b2a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b290:	8afb      	ldrh	r3, [r7, #22]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	781a      	ldrb	r2, [r3, #0]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b2a2:	8afb      	ldrh	r3, [r7, #22]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	82fb      	strh	r3, [r7, #22]
 800b2a8:	8afa      	ldrh	r2, [r7, #22]
 800b2aa:	8abb      	ldrh	r3, [r7, #20]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3ef      	bcc.n	800b290 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b085      	sub	sp, #20
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	881a      	ldrh	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	4613      	mov	r3, r2
 800b304:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b306:	2301      	movs	r3, #1
 800b308:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	789b      	ldrb	r3, [r3, #2]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d002      	beq.n	800b318 <USBH_CtlReq+0x20>
 800b312:	2b02      	cmp	r3, #2
 800b314:	d00f      	beq.n	800b336 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b316:	e027      	b.n	800b368 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	88fa      	ldrh	r2, [r7, #6]
 800b322:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2201      	movs	r2, #1
 800b328:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2202      	movs	r2, #2
 800b32e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b330:	2301      	movs	r3, #1
 800b332:	75fb      	strb	r3, [r7, #23]
      break;
 800b334:	e018      	b.n	800b368 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 f81c 	bl	800b374 <USBH_HandleControl>
 800b33c:	4603      	mov	r3, r0
 800b33e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <USBH_CtlReq+0x54>
 800b346:	7dfb      	ldrb	r3, [r7, #23]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d106      	bne.n	800b35a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	761a      	strb	r2, [r3, #24]
      break;
 800b358:	e005      	b.n	800b366 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d102      	bne.n	800b366 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	709a      	strb	r2, [r3, #2]
      break;
 800b366:	bf00      	nop
  }
  return status;
 800b368:	7dfb      	ldrb	r3, [r7, #23]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af02      	add	r7, sp, #8
 800b37a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b37c:	2301      	movs	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b380:	2300      	movs	r3, #0
 800b382:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	7e1b      	ldrb	r3, [r3, #24]
 800b388:	3b01      	subs	r3, #1
 800b38a:	2b0a      	cmp	r3, #10
 800b38c:	f200 8156 	bhi.w	800b63c <USBH_HandleControl+0x2c8>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <USBH_HandleControl+0x24>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3c5 	.word	0x0800b3c5
 800b39c:	0800b3df 	.word	0x0800b3df
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b46f 	.word	0x0800b46f
 800b3a8:	0800b4a7 	.word	0x0800b4a7
 800b3ac:	0800b4d1 	.word	0x0800b4d1
 800b3b0:	0800b523 	.word	0x0800b523
 800b3b4:	0800b545 	.word	0x0800b545
 800b3b8:	0800b581 	.word	0x0800b581
 800b3bc:	0800b5a7 	.word	0x0800b5a7
 800b3c0:	0800b5e5 	.word	0x0800b5e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f103 0110 	add.w	r1, r3, #16
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	795b      	ldrb	r3, [r3, #5]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f943 	bl	800b65c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	761a      	strb	r2, [r3, #24]
      break;
 800b3dc:	e139      	b.n	800b652 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	795b      	ldrb	r3, [r3, #5]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f003 f853 	bl	800e490 <USBH_LL_GetURBState>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d11e      	bne.n	800b432 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7c1b      	ldrb	r3, [r3, #16]
 800b3f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8adb      	ldrh	r3, [r3, #22]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00a      	beq.n	800b41c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b406:	7b7b      	ldrb	r3, [r7, #13]
 800b408:	2b80      	cmp	r3, #128	; 0x80
 800b40a:	d103      	bne.n	800b414 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2203      	movs	r2, #3
 800b410:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b412:	e115      	b.n	800b640 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2205      	movs	r2, #5
 800b418:	761a      	strb	r2, [r3, #24]
      break;
 800b41a:	e111      	b.n	800b640 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b41c:	7b7b      	ldrb	r3, [r7, #13]
 800b41e:	2b80      	cmp	r3, #128	; 0x80
 800b420:	d103      	bne.n	800b42a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2209      	movs	r2, #9
 800b426:	761a      	strb	r2, [r3, #24]
      break;
 800b428:	e10a      	b.n	800b640 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2207      	movs	r2, #7
 800b42e:	761a      	strb	r2, [r3, #24]
      break;
 800b430:	e106      	b.n	800b640 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	2b04      	cmp	r3, #4
 800b436:	d003      	beq.n	800b440 <USBH_HandleControl+0xcc>
 800b438:	7bbb      	ldrb	r3, [r7, #14]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	f040 8100 	bne.w	800b640 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	220b      	movs	r2, #11
 800b444:	761a      	strb	r2, [r3, #24]
      break;
 800b446:	e0fb      	b.n	800b640 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b44e:	b29a      	uxth	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6899      	ldr	r1, [r3, #8]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	899a      	ldrh	r2, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	791b      	ldrb	r3, [r3, #4]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f93a 	bl	800b6da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2204      	movs	r2, #4
 800b46a:	761a      	strb	r2, [r3, #24]
      break;
 800b46c:	e0f1      	b.n	800b652 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	791b      	ldrb	r3, [r3, #4]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f003 f80b 	bl	800e490 <USBH_LL_GetURBState>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d102      	bne.n	800b48a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2209      	movs	r2, #9
 800b488:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	2b05      	cmp	r3, #5
 800b48e:	d102      	bne.n	800b496 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b490:	2303      	movs	r3, #3
 800b492:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b494:	e0d6      	b.n	800b644 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b04      	cmp	r3, #4
 800b49a:	f040 80d3 	bne.w	800b644 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	220b      	movs	r2, #11
 800b4a2:	761a      	strb	r2, [r3, #24]
      break;
 800b4a4:	e0ce      	b.n	800b644 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6899      	ldr	r1, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	899a      	ldrh	r2, [r3, #12]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	795b      	ldrb	r3, [r3, #5]
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	9000      	str	r0, [sp, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8ea 	bl	800b690 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2206      	movs	r2, #6
 800b4cc:	761a      	strb	r2, [r3, #24]
      break;
 800b4ce:	e0c0      	b.n	800b652 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	795b      	ldrb	r3, [r3, #5]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f002 ffda 	bl	800e490 <USBH_LL_GetURBState>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d103      	bne.n	800b4ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2207      	movs	r2, #7
 800b4ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4ec:	e0ac      	b.n	800b648 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b05      	cmp	r3, #5
 800b4f2:	d105      	bne.n	800b500 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	220c      	movs	r2, #12
 800b4f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fe:	e0a3      	b.n	800b648 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d103      	bne.n	800b50e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2205      	movs	r2, #5
 800b50a:	761a      	strb	r2, [r3, #24]
      break;
 800b50c:	e09c      	b.n	800b648 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b04      	cmp	r3, #4
 800b512:	f040 8099 	bne.w	800b648 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	220b      	movs	r2, #11
 800b51a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b51c:	2302      	movs	r3, #2
 800b51e:	73fb      	strb	r3, [r7, #15]
      break;
 800b520:	e092      	b.n	800b648 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	791b      	ldrb	r3, [r3, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f8d5 	bl	800b6da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2208      	movs	r2, #8
 800b540:	761a      	strb	r2, [r3, #24]

      break;
 800b542:	e086      	b.n	800b652 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	791b      	ldrb	r3, [r3, #4]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 ffa0 	bl	800e490 <USBH_LL_GetURBState>
 800b550:	4603      	mov	r3, r0
 800b552:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d105      	bne.n	800b566 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220d      	movs	r2, #13
 800b55e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b564:	e072      	b.n	800b64c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b04      	cmp	r3, #4
 800b56a:	d103      	bne.n	800b574 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	220b      	movs	r2, #11
 800b570:	761a      	strb	r2, [r3, #24]
      break;
 800b572:	e06b      	b.n	800b64c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2b05      	cmp	r3, #5
 800b578:	d168      	bne.n	800b64c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b57a:	2303      	movs	r3, #3
 800b57c:	73fb      	strb	r3, [r7, #15]
      break;
 800b57e:	e065      	b.n	800b64c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	795b      	ldrb	r3, [r3, #5]
 800b584:	2201      	movs	r2, #1
 800b586:	9200      	str	r2, [sp, #0]
 800b588:	2200      	movs	r2, #0
 800b58a:	2100      	movs	r1, #0
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f87f 	bl	800b690 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	761a      	strb	r2, [r3, #24]
      break;
 800b5a4:	e055      	b.n	800b652 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	795b      	ldrb	r3, [r3, #5]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f002 ff6f 	bl	800e490 <USBH_LL_GetURBState>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d105      	bne.n	800b5c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	220d      	movs	r2, #13
 800b5c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5c6:	e043      	b.n	800b650 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d103      	bne.n	800b5d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2209      	movs	r2, #9
 800b5d2:	761a      	strb	r2, [r3, #24]
      break;
 800b5d4:	e03c      	b.n	800b650 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d139      	bne.n	800b650 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	220b      	movs	r2, #11
 800b5e0:	761a      	strb	r2, [r3, #24]
      break;
 800b5e2:	e035      	b.n	800b650 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	7e5b      	ldrb	r3, [r3, #25]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	765a      	strb	r2, [r3, #25]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7e5b      	ldrb	r3, [r3, #25]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d806      	bhi.n	800b606 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b604:	e025      	b.n	800b652 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b60c:	2106      	movs	r1, #6
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	795b      	ldrb	r3, [r3, #5]
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f90c 	bl	800b83c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	791b      	ldrb	r3, [r3, #4]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f906 	bl	800b83c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b636:	2302      	movs	r3, #2
 800b638:	73fb      	strb	r3, [r7, #15]
      break;
 800b63a:	e00a      	b.n	800b652 <USBH_HandleControl+0x2de>

    default:
      break;
 800b63c:	bf00      	nop
 800b63e:	e008      	b.n	800b652 <USBH_HandleControl+0x2de>
      break;
 800b640:	bf00      	nop
 800b642:	e006      	b.n	800b652 <USBH_HandleControl+0x2de>
      break;
 800b644:	bf00      	nop
 800b646:	e004      	b.n	800b652 <USBH_HandleControl+0x2de>
      break;
 800b648:	bf00      	nop
 800b64a:	e002      	b.n	800b652 <USBH_HandleControl+0x2de>
      break;
 800b64c:	bf00      	nop
 800b64e:	e000      	b.n	800b652 <USBH_HandleControl+0x2de>
      break;
 800b650:	bf00      	nop
  }

  return status;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af04      	add	r7, sp, #16
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b66a:	79f9      	ldrb	r1, [r7, #7]
 800b66c:	2300      	movs	r3, #0
 800b66e:	9303      	str	r3, [sp, #12]
 800b670:	2308      	movs	r3, #8
 800b672:	9302      	str	r3, [sp, #8]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	9301      	str	r3, [sp, #4]
 800b678:	2300      	movs	r3, #0
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f002 fed4 	bl	800e42e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af04      	add	r7, sp, #16
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	4611      	mov	r1, r2
 800b69c:	461a      	mov	r2, r3
 800b69e:	460b      	mov	r3, r1
 800b6a0:	80fb      	strh	r3, [r7, #6]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6b4:	7979      	ldrb	r1, [r7, #5]
 800b6b6:	7e3b      	ldrb	r3, [r7, #24]
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f002 feaf 	bl	800e42e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b088      	sub	sp, #32
 800b6de:	af04      	add	r7, sp, #16
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	80fb      	strh	r3, [r7, #6]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6f0:	7979      	ldrb	r1, [r7, #5]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	88fb      	ldrh	r3, [r7, #6]
 800b6f8:	9302      	str	r3, [sp, #8]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	2301      	movs	r3, #1
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	2300      	movs	r3, #0
 800b704:	2201      	movs	r2, #1
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f002 fe91 	bl	800e42e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b70c:	2300      	movs	r3, #0

}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b088      	sub	sp, #32
 800b71a:	af04      	add	r7, sp, #16
 800b71c:	60f8      	str	r0, [r7, #12]
 800b71e:	60b9      	str	r1, [r7, #8]
 800b720:	4611      	mov	r1, r2
 800b722:	461a      	mov	r2, r3
 800b724:	460b      	mov	r3, r1
 800b726:	80fb      	strh	r3, [r7, #6]
 800b728:	4613      	mov	r3, r2
 800b72a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b73a:	7979      	ldrb	r1, [r7, #5]
 800b73c:	7e3b      	ldrb	r3, [r7, #24]
 800b73e:	9303      	str	r3, [sp, #12]
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	9302      	str	r3, [sp, #8]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	2301      	movs	r3, #1
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	2302      	movs	r3, #2
 800b74e:	2200      	movs	r2, #0
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f002 fe6c 	bl	800e42e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af04      	add	r7, sp, #16
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4611      	mov	r1, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	460b      	mov	r3, r1
 800b770:	80fb      	strh	r3, [r7, #6]
 800b772:	4613      	mov	r3, r2
 800b774:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b776:	7979      	ldrb	r1, [r7, #5]
 800b778:	2300      	movs	r3, #0
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	9302      	str	r3, [sp, #8]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	2301      	movs	r3, #1
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2302      	movs	r3, #2
 800b78a:	2201      	movs	r2, #1
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f002 fe4e 	bl	800e42e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af04      	add	r7, sp, #16
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	70fb      	strb	r3, [r7, #3]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70bb      	strb	r3, [r7, #2]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b7b6:	7878      	ldrb	r0, [r7, #1]
 800b7b8:	78ba      	ldrb	r2, [r7, #2]
 800b7ba:	78f9      	ldrb	r1, [r7, #3]
 800b7bc:	8b3b      	ldrh	r3, [r7, #24]
 800b7be:	9302      	str	r3, [sp, #8]
 800b7c0:	7d3b      	ldrb	r3, [r7, #20]
 800b7c2:	9301      	str	r3, [sp, #4]
 800b7c4:	7c3b      	ldrb	r3, [r7, #16]
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f002 fde1 	bl	800e392 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b082      	sub	sp, #8
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f002 fe00 	bl	800e3f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f836 	bl	800b878 <USBH_GetFreePipe>
 800b80c:	4603      	mov	r3, r0
 800b80e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b810:	89fb      	ldrh	r3, [r7, #14]
 800b812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b816:	4293      	cmp	r3, r2
 800b818:	d00a      	beq.n	800b830 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b81a:	78fa      	ldrb	r2, [r7, #3]
 800b81c:	89fb      	ldrh	r3, [r7, #14]
 800b81e:	f003 030f 	and.w	r3, r3, #15
 800b822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	33e0      	adds	r3, #224	; 0xe0
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	440b      	add	r3, r1
 800b82e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	b2db      	uxtb	r3, r3
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	2b0f      	cmp	r3, #15
 800b84c:	d80d      	bhi.n	800b86a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	33e0      	adds	r3, #224	; 0xe0
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	78fb      	ldrb	r3, [r7, #3]
 800b85c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b860:	6879      	ldr	r1, [r7, #4]
 800b862:	33e0      	adds	r3, #224	; 0xe0
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	440b      	add	r3, r1
 800b868:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b880:	2300      	movs	r3, #0
 800b882:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
 800b888:	e00f      	b.n	800b8aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	33e0      	adds	r3, #224	; 0xe0
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d102      	bne.n	800b8a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	e007      	b.n	800b8b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	73fb      	strb	r3, [r7, #15]
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
 800b8ac:	2b0f      	cmp	r3, #15
 800b8ae:	d9ec      	bls.n	800b88a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b8b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3714      	adds	r7, #20
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	4a08      	ldr	r2, [pc, #32]	; (800b8f0 <disk_status+0x30>)
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	79fa      	ldrb	r2, [r7, #7]
 800b8d8:	4905      	ldr	r1, [pc, #20]	; (800b8f0 <disk_status+0x30>)
 800b8da:	440a      	add	r2, r1
 800b8dc:	7a12      	ldrb	r2, [r2, #8]
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4798      	blx	r3
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	2000173c 	.word	0x2000173c

0800b8f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	4a0d      	ldr	r2, [pc, #52]	; (800b93c <disk_initialize+0x48>)
 800b906:	5cd3      	ldrb	r3, [r2, r3]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d111      	bne.n	800b930 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	4a0b      	ldr	r2, [pc, #44]	; (800b93c <disk_initialize+0x48>)
 800b910:	2101      	movs	r1, #1
 800b912:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	4a09      	ldr	r2, [pc, #36]	; (800b93c <disk_initialize+0x48>)
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	79fa      	ldrb	r2, [r7, #7]
 800b922:	4906      	ldr	r1, [pc, #24]	; (800b93c <disk_initialize+0x48>)
 800b924:	440a      	add	r2, r1
 800b926:	7a12      	ldrb	r2, [r2, #8]
 800b928:	4610      	mov	r0, r2
 800b92a:	4798      	blx	r3
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b930:	7bfb      	ldrb	r3, [r7, #15]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000173c 	.word	0x2000173c

0800b940 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	4a0a      	ldr	r2, [pc, #40]	; (800b97c <disk_read+0x3c>)
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4413      	add	r3, r2
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	689c      	ldr	r4, [r3, #8]
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4a07      	ldr	r2, [pc, #28]	; (800b97c <disk_read+0x3c>)
 800b960:	4413      	add	r3, r2
 800b962:	7a18      	ldrb	r0, [r3, #8]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	47a0      	blx	r4
 800b96c:	4603      	mov	r3, r0
 800b96e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b970:	7dfb      	ldrb	r3, [r7, #23]
}
 800b972:	4618      	mov	r0, r3
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	bd90      	pop	{r4, r7, pc}
 800b97a:	bf00      	nop
 800b97c:	2000173c 	.word	0x2000173c

0800b980 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b087      	sub	sp, #28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60b9      	str	r1, [r7, #8]
 800b988:	607a      	str	r2, [r7, #4]
 800b98a:	603b      	str	r3, [r7, #0]
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <disk_write+0x3c>)
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	68dc      	ldr	r4, [r3, #12]
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	4a07      	ldr	r2, [pc, #28]	; (800b9bc <disk_write+0x3c>)
 800b9a0:	4413      	add	r3, r2
 800b9a2:	7a18      	ldrb	r0, [r3, #8]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	68b9      	ldr	r1, [r7, #8]
 800b9aa:	47a0      	blx	r4
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd90      	pop	{r4, r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	2000173c 	.word	0x2000173c

0800b9c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	603a      	str	r2, [r7, #0]
 800b9ca:	71fb      	strb	r3, [r7, #7]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	4a09      	ldr	r2, [pc, #36]	; (800b9f8 <disk_ioctl+0x38>)
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	79fa      	ldrb	r2, [r7, #7]
 800b9de:	4906      	ldr	r1, [pc, #24]	; (800b9f8 <disk_ioctl+0x38>)
 800b9e0:	440a      	add	r2, r1
 800b9e2:	7a10      	ldrb	r0, [r2, #8]
 800b9e4:	79b9      	ldrb	r1, [r7, #6]
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	4798      	blx	r3
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	2000173c 	.word	0x2000173c

0800b9fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba0c:	89fb      	ldrh	r3, [r7, #14]
 800ba0e:	021b      	lsls	r3, r3, #8
 800ba10:	b21a      	sxth	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	b21b      	sxth	r3, r3
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3303      	adds	r3, #3
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	3202      	adds	r2, #2
 800ba44:	7812      	ldrb	r2, [r2, #0]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	3201      	adds	r2, #1
 800ba52:	7812      	ldrb	r2, [r2, #0]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	7812      	ldrb	r2, [r2, #0]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba64:	68fb      	ldr	r3, [r7, #12]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	887a      	ldrh	r2, [r7, #2]
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]
 800ba8a:	887b      	ldrh	r3, [r7, #2]
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	607a      	str	r2, [r7, #4]
 800ba96:	887a      	ldrh	r2, [r7, #2]
 800ba98:	b2d2      	uxtb	r2, r2
 800ba9a:	701a      	strb	r2, [r3, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	b2d2      	uxtb	r2, r2
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	0a1b      	lsrs	r3, r3, #8
 800bac2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	b2d2      	uxtb	r2, r2
 800bace:	701a      	strb	r2, [r3, #0]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	0a1b      	lsrs	r3, r3, #8
 800bad4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	0a1b      	lsrs	r3, r3, #8
 800bae6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	607a      	str	r2, [r7, #4]
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00d      	beq.n	800bb36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	1c53      	adds	r3, r2, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	1c59      	adds	r1, r3, #1
 800bb24:	6179      	str	r1, [r7, #20]
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	607b      	str	r3, [r7, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1f1      	bne.n	800bb1a <mem_cpy+0x1a>
	}
}
 800bb36:	bf00      	nop
 800bb38:	371c      	adds	r7, #28
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb42:	b480      	push	{r7}
 800bb44:	b087      	sub	sp, #28
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	617a      	str	r2, [r7, #20]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	b2d2      	uxtb	r2, r2
 800bb5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	607b      	str	r3, [r7, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1f3      	bne.n	800bb52 <mem_set+0x10>
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb78:	b480      	push	{r7}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	61fb      	str	r3, [r7, #28]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	61fa      	str	r2, [r7, #28]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	61ba      	str	r2, [r7, #24]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	1acb      	subs	r3, r1, r3
 800bba4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	607b      	str	r3, [r7, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <mem_cmp+0x40>
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0eb      	beq.n	800bb90 <mem_cmp+0x18>

	return r;
 800bbb8:	697b      	ldr	r3, [r7, #20]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3724      	adds	r7, #36	; 0x24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bbd0:	e002      	b.n	800bbd8 <chk_chr+0x12>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	607b      	str	r3, [r7, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <chk_chr+0x26>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d1f2      	bne.n	800bbd2 <chk_chr+0xc>
	return *str;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	781b      	ldrb	r3, [r3, #0]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc06:	2300      	movs	r3, #0
 800bc08:	60bb      	str	r3, [r7, #8]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	e029      	b.n	800bc64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc10:	4a27      	ldr	r2, [pc, #156]	; (800bcb0 <chk_lock+0xb4>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	4413      	add	r3, r2
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d01d      	beq.n	800bc5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc1e:	4a24      	ldr	r2, [pc, #144]	; (800bcb0 <chk_lock+0xb4>)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	011b      	lsls	r3, r3, #4
 800bc24:	4413      	add	r3, r2
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d116      	bne.n	800bc5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc30:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <chk_lock+0xb4>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	4413      	add	r3, r2
 800bc38:	3304      	adds	r3, #4
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d10c      	bne.n	800bc5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc44:	4a1a      	ldr	r2, [pc, #104]	; (800bcb0 <chk_lock+0xb4>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	4413      	add	r3, r2
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d102      	bne.n	800bc5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc58:	e007      	b.n	800bc6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d9d2      	bls.n	800bc10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d109      	bne.n	800bc84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d102      	bne.n	800bc7c <chk_lock+0x80>
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d101      	bne.n	800bc80 <chk_lock+0x84>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e010      	b.n	800bca2 <chk_lock+0xa6>
 800bc80:	2312      	movs	r3, #18
 800bc82:	e00e      	b.n	800bca2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d108      	bne.n	800bc9c <chk_lock+0xa0>
 800bc8a:	4a09      	ldr	r2, [pc, #36]	; (800bcb0 <chk_lock+0xb4>)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	011b      	lsls	r3, r3, #4
 800bc90:	4413      	add	r3, r2
 800bc92:	330c      	adds	r3, #12
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9a:	d101      	bne.n	800bca0 <chk_lock+0xa4>
 800bc9c:	2310      	movs	r3, #16
 800bc9e:	e000      	b.n	800bca2 <chk_lock+0xa6>
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	2000171c 	.word	0x2000171c

0800bcb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	e002      	b.n	800bcc6 <enq_lock+0x12>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	607b      	str	r3, [r7, #4]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d806      	bhi.n	800bcda <enq_lock+0x26>
 800bccc:	4a09      	ldr	r2, [pc, #36]	; (800bcf4 <enq_lock+0x40>)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	4413      	add	r3, r2
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1f2      	bne.n	800bcc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	bf14      	ite	ne
 800bce0:	2301      	movne	r3, #1
 800bce2:	2300      	moveq	r3, #0
 800bce4:	b2db      	uxtb	r3, r3
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	2000171c 	.word	0x2000171c

0800bcf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	e01f      	b.n	800bd48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd08:	4a41      	ldr	r2, [pc, #260]	; (800be10 <inc_lock+0x118>)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	011b      	lsls	r3, r3, #4
 800bd0e:	4413      	add	r3, r2
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d113      	bne.n	800bd42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd1a:	4a3d      	ldr	r2, [pc, #244]	; (800be10 <inc_lock+0x118>)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4413      	add	r3, r2
 800bd22:	3304      	adds	r3, #4
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d109      	bne.n	800bd42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd2e:	4a38      	ldr	r2, [pc, #224]	; (800be10 <inc_lock+0x118>)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	3308      	adds	r3, #8
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d006      	beq.n	800bd50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d9dc      	bls.n	800bd08 <inc_lock+0x10>
 800bd4e:	e000      	b.n	800bd52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d132      	bne.n	800bdbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]
 800bd5c:	e002      	b.n	800bd64 <inc_lock+0x6c>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3301      	adds	r3, #1
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d806      	bhi.n	800bd78 <inc_lock+0x80>
 800bd6a:	4a29      	ldr	r2, [pc, #164]	; (800be10 <inc_lock+0x118>)
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	011b      	lsls	r3, r3, #4
 800bd70:	4413      	add	r3, r2
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1f2      	bne.n	800bd5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d101      	bne.n	800bd82 <inc_lock+0x8a>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e040      	b.n	800be04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	4922      	ldr	r1, [pc, #136]	; (800be10 <inc_lock+0x118>)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	011b      	lsls	r3, r3, #4
 800bd8c:	440b      	add	r3, r1
 800bd8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	491e      	ldr	r1, [pc, #120]	; (800be10 <inc_lock+0x118>)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	011b      	lsls	r3, r3, #4
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	695a      	ldr	r2, [r3, #20]
 800bda4:	491a      	ldr	r1, [pc, #104]	; (800be10 <inc_lock+0x118>)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	011b      	lsls	r3, r3, #4
 800bdaa:	440b      	add	r3, r1
 800bdac:	3308      	adds	r3, #8
 800bdae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bdb0:	4a17      	ldr	r2, [pc, #92]	; (800be10 <inc_lock+0x118>)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	011b      	lsls	r3, r3, #4
 800bdb6:	4413      	add	r3, r2
 800bdb8:	330c      	adds	r3, #12
 800bdba:	2200      	movs	r2, #0
 800bdbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d009      	beq.n	800bdd8 <inc_lock+0xe0>
 800bdc4:	4a12      	ldr	r2, [pc, #72]	; (800be10 <inc_lock+0x118>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	4413      	add	r3, r2
 800bdcc:	330c      	adds	r3, #12
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <inc_lock+0xe0>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e015      	b.n	800be04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d108      	bne.n	800bdf0 <inc_lock+0xf8>
 800bdde:	4a0c      	ldr	r2, [pc, #48]	; (800be10 <inc_lock+0x118>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	4413      	add	r3, r2
 800bde6:	330c      	adds	r3, #12
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	e001      	b.n	800bdf4 <inc_lock+0xfc>
 800bdf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdf4:	4906      	ldr	r1, [pc, #24]	; (800be10 <inc_lock+0x118>)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	011b      	lsls	r3, r3, #4
 800bdfa:	440b      	add	r3, r1
 800bdfc:	330c      	adds	r3, #12
 800bdfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3301      	adds	r3, #1
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	2000171c 	.word	0x2000171c

0800be14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3b01      	subs	r3, #1
 800be20:	607b      	str	r3, [r7, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d825      	bhi.n	800be74 <dec_lock+0x60>
		n = Files[i].ctr;
 800be28:	4a17      	ldr	r2, [pc, #92]	; (800be88 <dec_lock+0x74>)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	4413      	add	r3, r2
 800be30:	330c      	adds	r3, #12
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be36:	89fb      	ldrh	r3, [r7, #14]
 800be38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be3c:	d101      	bne.n	800be42 <dec_lock+0x2e>
 800be3e:	2300      	movs	r3, #0
 800be40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be42:	89fb      	ldrh	r3, [r7, #14]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <dec_lock+0x3a>
 800be48:	89fb      	ldrh	r3, [r7, #14]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be4e:	4a0e      	ldr	r2, [pc, #56]	; (800be88 <dec_lock+0x74>)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	4413      	add	r3, r2
 800be56:	330c      	adds	r3, #12
 800be58:	89fa      	ldrh	r2, [r7, #14]
 800be5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d105      	bne.n	800be6e <dec_lock+0x5a>
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <dec_lock+0x74>)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	011b      	lsls	r3, r3, #4
 800be68:	4413      	add	r3, r2
 800be6a:	2200      	movs	r2, #0
 800be6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	737b      	strb	r3, [r7, #13]
 800be72:	e001      	b.n	800be78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be74:	2302      	movs	r3, #2
 800be76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be78:	7b7b      	ldrb	r3, [r7, #13]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	2000171c 	.word	0x2000171c

0800be8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	e010      	b.n	800bebc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800be9a:	4a0d      	ldr	r2, [pc, #52]	; (800bed0 <clear_lock+0x44>)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	4413      	add	r3, r2
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d105      	bne.n	800beb6 <clear_lock+0x2a>
 800beaa:	4a09      	ldr	r2, [pc, #36]	; (800bed0 <clear_lock+0x44>)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	011b      	lsls	r3, r3, #4
 800beb0:	4413      	add	r3, r2
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d9eb      	bls.n	800be9a <clear_lock+0xe>
	}
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	2000171c 	.word	0x2000171c

0800bed4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	78db      	ldrb	r3, [r3, #3]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d034      	beq.n	800bf52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7858      	ldrb	r0, [r3, #1]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bef8:	2301      	movs	r3, #1
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	f7ff fd40 	bl	800b980 <disk_write>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	73fb      	strb	r3, [r7, #15]
 800bf0a:	e022      	b.n	800bf52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	1ad2      	subs	r2, r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d217      	bcs.n	800bf52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	789b      	ldrb	r3, [r3, #2]
 800bf26:	613b      	str	r3, [r7, #16]
 800bf28:	e010      	b.n	800bf4c <sync_window+0x78>
					wsect += fs->fsize;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4413      	add	r3, r2
 800bf32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7858      	ldrb	r0, [r3, #1]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf3e:	2301      	movs	r3, #1
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	f7ff fd1d 	bl	800b980 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d8eb      	bhi.n	800bf2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf66:	2300      	movs	r3, #0
 800bf68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d01b      	beq.n	800bfac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff ffad 	bl	800bed4 <sync_window>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d113      	bne.n	800bfac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7858      	ldrb	r0, [r3, #1]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf8e:	2301      	movs	r3, #1
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	f7ff fcd5 	bl	800b940 <disk_read>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bf9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ff87 	bl	800bed4 <sync_window>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d158      	bne.n	800c082 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	2b03      	cmp	r3, #3
 800bfd6:	d148      	bne.n	800c06a <sync_fs+0xb2>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	791b      	ldrb	r3, [r3, #4]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d144      	bne.n	800c06a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3330      	adds	r3, #48	; 0x30
 800bfe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff fda9 	bl	800bb42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3330      	adds	r3, #48	; 0x30
 800bff4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bff8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff fd38 	bl	800ba72 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3330      	adds	r3, #48	; 0x30
 800c006:	4921      	ldr	r1, [pc, #132]	; (800c08c <sync_fs+0xd4>)
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fd4d 	bl	800baa8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3330      	adds	r3, #48	; 0x30
 800c012:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c016:	491e      	ldr	r1, [pc, #120]	; (800c090 <sync_fs+0xd8>)
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff fd45 	bl	800baa8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3330      	adds	r3, #48	; 0x30
 800c022:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7ff fd3b 	bl	800baa8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3330      	adds	r3, #48	; 0x30
 800c036:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7ff fd31 	bl	800baa8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	69db      	ldr	r3, [r3, #28]
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	7858      	ldrb	r0, [r3, #1]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	2301      	movs	r3, #1
 800c060:	f7ff fc8e 	bl	800b980 <disk_write>
			fs->fsi_flag = 0;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	785b      	ldrb	r3, [r3, #1]
 800c06e:	2200      	movs	r2, #0
 800c070:	2100      	movs	r1, #0
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff fca4 	bl	800b9c0 <disk_ioctl>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <sync_fs+0xca>
 800c07e:	2301      	movs	r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c082:	7bfb      	ldrb	r3, [r7, #15]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	41615252 	.word	0x41615252
 800c090:	61417272 	.word	0x61417272

0800c094 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	3b02      	subs	r3, #2
 800c0a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	3b02      	subs	r3, #2
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d301      	bcc.n	800c0b4 <clust2sect+0x20>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	e008      	b.n	800c0c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	895b      	ldrh	r3, [r3, #10]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	fb03 f202 	mul.w	r2, r3, r2
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0c4:	4413      	add	r3, r2
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b086      	sub	sp, #24
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
 800c0da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d904      	bls.n	800c0f2 <get_fat+0x20>
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d302      	bcc.n	800c0f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	e08f      	b.n	800c218 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	2b03      	cmp	r3, #3
 800c104:	d062      	beq.n	800c1cc <get_fat+0xfa>
 800c106:	2b03      	cmp	r3, #3
 800c108:	dc7c      	bgt.n	800c204 <get_fat+0x132>
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d002      	beq.n	800c114 <get_fat+0x42>
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d042      	beq.n	800c198 <get_fat+0xc6>
 800c112:	e077      	b.n	800c204 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	085b      	lsrs	r3, r3, #1
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6a1a      	ldr	r2, [r3, #32]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	0a5b      	lsrs	r3, r3, #9
 800c12a:	4413      	add	r3, r2
 800c12c:	4619      	mov	r1, r3
 800c12e:	6938      	ldr	r0, [r7, #16]
 800c130:	f7ff ff14 	bl	800bf5c <move_window>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d167      	bne.n	800c20a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	1c5a      	adds	r2, r3, #1
 800c13e:	60fa      	str	r2, [r7, #12]
 800c140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c14c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	0a5b      	lsrs	r3, r3, #9
 800c156:	4413      	add	r3, r2
 800c158:	4619      	mov	r1, r3
 800c15a:	6938      	ldr	r0, [r7, #16]
 800c15c:	f7ff fefe 	bl	800bf5c <move_window>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d153      	bne.n	800c20e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4413      	add	r3, r2
 800c170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c174:	021b      	lsls	r3, r3, #8
 800c176:	461a      	mov	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <get_fat+0xbc>
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	091b      	lsrs	r3, r3, #4
 800c18c:	e002      	b.n	800c194 <get_fat+0xc2>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c194:	617b      	str	r3, [r7, #20]
			break;
 800c196:	e03f      	b.n	800c218 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6a1a      	ldr	r2, [r3, #32]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	0a1b      	lsrs	r3, r3, #8
 800c1a0:	4413      	add	r3, r2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6938      	ldr	r0, [r7, #16]
 800c1a6:	f7ff fed9 	bl	800bf5c <move_window>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d130      	bne.n	800c212 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	005b      	lsls	r3, r3, #1
 800c1ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1be:	4413      	add	r3, r2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff fc1b 	bl	800b9fc <ld_word>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	617b      	str	r3, [r7, #20]
			break;
 800c1ca:	e025      	b.n	800c218 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	6a1a      	ldr	r2, [r3, #32]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	09db      	lsrs	r3, r3, #7
 800c1d4:	4413      	add	r3, r2
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6938      	ldr	r0, [r7, #16]
 800c1da:	f7ff febf 	bl	800bf5c <move_window>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d118      	bne.n	800c216 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1f2:	4413      	add	r3, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff fc19 	bl	800ba2c <ld_dword>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c200:	617b      	str	r3, [r7, #20]
			break;
 800c202:	e009      	b.n	800c218 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c204:	2301      	movs	r3, #1
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e006      	b.n	800c218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c20a:	bf00      	nop
 800c20c:	e004      	b.n	800c218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c20e:	bf00      	nop
 800c210:	e002      	b.n	800c218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c212:	bf00      	nop
 800c214:	e000      	b.n	800c218 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c216:	bf00      	nop
		}
	}

	return val;
 800c218:	697b      	ldr	r3, [r7, #20]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c222:	b590      	push	{r4, r7, lr}
 800c224:	b089      	sub	sp, #36	; 0x24
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	60b9      	str	r1, [r7, #8]
 800c22c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c22e:	2302      	movs	r3, #2
 800c230:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2b01      	cmp	r3, #1
 800c236:	f240 80d2 	bls.w	800c3de <put_fat+0x1bc>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	429a      	cmp	r2, r3
 800c242:	f080 80cc 	bcs.w	800c3de <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	f000 8096 	beq.w	800c37c <put_fat+0x15a>
 800c250:	2b03      	cmp	r3, #3
 800c252:	f300 80cd 	bgt.w	800c3f0 <put_fat+0x1ce>
 800c256:	2b01      	cmp	r3, #1
 800c258:	d002      	beq.n	800c260 <put_fat+0x3e>
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d06e      	beq.n	800c33c <put_fat+0x11a>
 800c25e:	e0c7      	b.n	800c3f0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	61bb      	str	r3, [r7, #24]
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	085b      	lsrs	r3, r3, #1
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	4413      	add	r3, r2
 800c26c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6a1a      	ldr	r2, [r3, #32]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	0a5b      	lsrs	r3, r3, #9
 800c276:	4413      	add	r3, r2
 800c278:	4619      	mov	r1, r3
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fe6e 	bl	800bf5c <move_window>
 800c280:	4603      	mov	r3, r0
 800c282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c284:	7ffb      	ldrb	r3, [r7, #31]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 80ab 	bne.w	800c3e2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	1c59      	adds	r1, r3, #1
 800c296:	61b9      	str	r1, [r7, #24]
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	4413      	add	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00d      	beq.n	800c2c6 <put_fat+0xa4>
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	f003 030f 	and.w	r3, r3, #15
 800c2b4:	b25a      	sxtb	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	b25b      	sxtb	r3, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	b25b      	sxtb	r3, r3
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	e001      	b.n	800c2ca <put_fat+0xa8>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1a      	ldr	r2, [r3, #32]
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	0a5b      	lsrs	r3, r3, #9
 800c2dc:	4413      	add	r3, r2
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7ff fe3b 	bl	800bf5c <move_window>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2ea:	7ffb      	ldrb	r3, [r7, #31]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d17a      	bne.n	800c3e6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fc:	4413      	add	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <put_fat+0xf0>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	091b      	lsrs	r3, r3, #4
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	e00e      	b.n	800c330 <put_fat+0x10e>
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	b25b      	sxtb	r3, r3
 800c318:	f023 030f 	bic.w	r3, r3, #15
 800c31c:	b25a      	sxtb	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	0a1b      	lsrs	r3, r3, #8
 800c322:	b25b      	sxtb	r3, r3
 800c324:	f003 030f 	and.w	r3, r3, #15
 800c328:	b25b      	sxtb	r3, r3
 800c32a:	4313      	orrs	r3, r2
 800c32c:	b25b      	sxtb	r3, r3
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	70da      	strb	r2, [r3, #3]
			break;
 800c33a:	e059      	b.n	800c3f0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6a1a      	ldr	r2, [r3, #32]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	0a1b      	lsrs	r3, r3, #8
 800c344:	4413      	add	r3, r2
 800c346:	4619      	mov	r1, r3
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f7ff fe07 	bl	800bf5c <move_window>
 800c34e:	4603      	mov	r3, r0
 800c350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c352:	7ffb      	ldrb	r3, [r7, #31]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d148      	bne.n	800c3ea <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c366:	4413      	add	r3, r2
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	b292      	uxth	r2, r2
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff fb7f 	bl	800ba72 <st_word>
			fs->wflag = 1;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	70da      	strb	r2, [r3, #3]
			break;
 800c37a:	e039      	b.n	800c3f0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6a1a      	ldr	r2, [r3, #32]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	09db      	lsrs	r3, r3, #7
 800c384:	4413      	add	r3, r2
 800c386:	4619      	mov	r1, r3
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fde7 	bl	800bf5c <move_window>
 800c38e:	4603      	mov	r3, r0
 800c390:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c392:	7ffb      	ldrb	r3, [r7, #31]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d12a      	bne.n	800c3ee <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3ac:	4413      	add	r3, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff fb3c 	bl	800ba2c <ld_dword>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3ba:	4323      	orrs	r3, r4
 800c3bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3cc:	4413      	add	r3, r2
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff fb69 	bl	800baa8 <st_dword>
			fs->wflag = 1;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	70da      	strb	r2, [r3, #3]
			break;
 800c3dc:	e008      	b.n	800c3f0 <put_fat+0x1ce>
		}
	}
 800c3de:	bf00      	nop
 800c3e0:	e006      	b.n	800c3f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3e2:	bf00      	nop
 800c3e4:	e004      	b.n	800c3f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3e6:	bf00      	nop
 800c3e8:	e002      	b.n	800c3f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3ea:	bf00      	nop
 800c3ec:	e000      	b.n	800c3f0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c3ee:	bf00      	nop
	return res;
 800c3f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3724      	adds	r7, #36	; 0x24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd90      	pop	{r4, r7, pc}

0800c3fa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b088      	sub	sp, #32
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d904      	bls.n	800c420 <remove_chain+0x26>
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d301      	bcc.n	800c424 <remove_chain+0x2a>
 800c420:	2302      	movs	r3, #2
 800c422:	e04b      	b.n	800c4bc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00c      	beq.n	800c444 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c42a:	f04f 32ff 	mov.w	r2, #4294967295
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	69b8      	ldr	r0, [r7, #24]
 800c432:	f7ff fef6 	bl	800c222 <put_fat>
 800c436:	4603      	mov	r3, r0
 800c438:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c43a:	7ffb      	ldrb	r3, [r7, #31]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <remove_chain+0x4a>
 800c440:	7ffb      	ldrb	r3, [r7, #31]
 800c442:	e03b      	b.n	800c4bc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c444:	68b9      	ldr	r1, [r7, #8]
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f7ff fe43 	bl	800c0d2 <get_fat>
 800c44c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d031      	beq.n	800c4b8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <remove_chain+0x64>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e02e      	b.n	800c4bc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c464:	d101      	bne.n	800c46a <remove_chain+0x70>
 800c466:	2301      	movs	r3, #1
 800c468:	e028      	b.n	800c4bc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c46a:	2200      	movs	r2, #0
 800c46c:	68b9      	ldr	r1, [r7, #8]
 800c46e:	69b8      	ldr	r0, [r7, #24]
 800c470:	f7ff fed7 	bl	800c222 <put_fat>
 800c474:	4603      	mov	r3, r0
 800c476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c478:	7ffb      	ldrb	r3, [r7, #31]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <remove_chain+0x88>
 800c47e:	7ffb      	ldrb	r3, [r7, #31]
 800c480:	e01c      	b.n	800c4bc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	691a      	ldr	r2, [r3, #16]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	3b02      	subs	r3, #2
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d20b      	bcs.n	800c4a8 <remove_chain+0xae>
			fs->free_clst++;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	791b      	ldrb	r3, [r3, #4]
 800c49e:	f043 0301 	orr.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	695b      	ldr	r3, [r3, #20]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d3c6      	bcc.n	800c444 <remove_chain+0x4a>
 800c4b6:	e000      	b.n	800c4ba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4b8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3720      	adds	r7, #32
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10d      	bne.n	800c4f6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <create_chain+0x2c>
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d31b      	bcc.n	800c528 <create_chain+0x64>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	61bb      	str	r3, [r7, #24]
 800c4f4:	e018      	b.n	800c528 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff fdea 	bl	800c0d2 <get_fat>
 800c4fe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d801      	bhi.n	800c50a <create_chain+0x46>
 800c506:	2301      	movs	r3, #1
 800c508:	e070      	b.n	800c5ec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c510:	d101      	bne.n	800c516 <create_chain+0x52>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	e06a      	b.n	800c5ec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d201      	bcs.n	800c524 <create_chain+0x60>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	e063      	b.n	800c5ec <create_chain+0x128>
		scl = clst;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	3301      	adds	r3, #1
 800c530:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d307      	bcc.n	800c54c <create_chain+0x88>
				ncl = 2;
 800c53c:	2302      	movs	r3, #2
 800c53e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	429a      	cmp	r2, r3
 800c546:	d901      	bls.n	800c54c <create_chain+0x88>
 800c548:	2300      	movs	r3, #0
 800c54a:	e04f      	b.n	800c5ec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c54c:	69f9      	ldr	r1, [r7, #28]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fdbf 	bl	800c0d2 <get_fat>
 800c554:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00e      	beq.n	800c57a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d003      	beq.n	800c56a <create_chain+0xa6>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d101      	bne.n	800c56e <create_chain+0xaa>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	e03e      	b.n	800c5ec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	429a      	cmp	r2, r3
 800c574:	d1da      	bne.n	800c52c <create_chain+0x68>
 800c576:	2300      	movs	r3, #0
 800c578:	e038      	b.n	800c5ec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c57a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c57c:	f04f 32ff 	mov.w	r2, #4294967295
 800c580:	69f9      	ldr	r1, [r7, #28]
 800c582:	6938      	ldr	r0, [r7, #16]
 800c584:	f7ff fe4d 	bl	800c222 <put_fat>
 800c588:	4603      	mov	r3, r0
 800c58a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <create_chain+0xe2>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d006      	beq.n	800c5a6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c598:	69fa      	ldr	r2, [r7, #28]
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6938      	ldr	r0, [r7, #16]
 800c59e:	f7ff fe40 	bl	800c222 <put_fat>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d116      	bne.n	800c5da <create_chain+0x116>
		fs->last_clst = ncl;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	691a      	ldr	r2, [r3, #16]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	3b02      	subs	r3, #2
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d804      	bhi.n	800c5ca <create_chain+0x106>
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	1e5a      	subs	r2, r3, #1
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	791b      	ldrb	r3, [r3, #4]
 800c5ce:	f043 0301 	orr.w	r3, r3, #1
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	711a      	strb	r2, [r3, #4]
 800c5d8:	e007      	b.n	800c5ea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5da:	7dfb      	ldrb	r3, [r7, #23]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d102      	bne.n	800c5e6 <create_chain+0x122>
 800c5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e4:	e000      	b.n	800c5e8 <create_chain+0x124>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5ea:	69fb      	ldr	r3, [r7, #28]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c608:	3304      	adds	r3, #4
 800c60a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	0a5b      	lsrs	r3, r3, #9
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	8952      	ldrh	r2, [r2, #10]
 800c614:	fbb3 f3f2 	udiv	r3, r3, r2
 800c618:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	1d1a      	adds	r2, r3, #4
 800c61e:	613a      	str	r2, [r7, #16]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <clmt_clust+0x3a>
 800c62a:	2300      	movs	r3, #0
 800c62c:	e010      	b.n	800c650 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	429a      	cmp	r2, r3
 800c634:	d307      	bcc.n	800c646 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	3304      	adds	r3, #4
 800c642:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c644:	e7e9      	b.n	800c61a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c646:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	4413      	add	r3, r2
}
 800c650:	4618      	mov	r0, r3
 800c652:	371c      	adds	r7, #28
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c672:	d204      	bcs.n	800c67e <dir_sdi+0x22>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	f003 031f 	and.w	r3, r3, #31
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c67e:	2302      	movs	r3, #2
 800c680:	e063      	b.n	800c74a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <dir_sdi+0x46>
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d902      	bls.n	800c6a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10c      	bne.n	800c6c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	095b      	lsrs	r3, r3, #5
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	8912      	ldrh	r2, [r2, #8]
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d301      	bcc.n	800c6b8 <dir_sdi+0x5c>
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e048      	b.n	800c74a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	61da      	str	r2, [r3, #28]
 800c6c0:	e029      	b.n	800c716 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	895b      	ldrh	r3, [r3, #10]
 800c6c6:	025b      	lsls	r3, r3, #9
 800c6c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6ca:	e019      	b.n	800c700 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6979      	ldr	r1, [r7, #20]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7ff fcfe 	bl	800c0d2 <get_fat>
 800c6d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6de:	d101      	bne.n	800c6e4 <dir_sdi+0x88>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e032      	b.n	800c74a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d904      	bls.n	800c6f4 <dir_sdi+0x98>
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d301      	bcc.n	800c6f8 <dir_sdi+0x9c>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e028      	b.n	800c74a <dir_sdi+0xee>
			ofs -= csz;
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	429a      	cmp	r2, r3
 800c706:	d2e1      	bcs.n	800c6cc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c708:	6979      	ldr	r1, [r7, #20]
 800c70a:	6938      	ldr	r0, [r7, #16]
 800c70c:	f7ff fcc2 	bl	800c094 <clust2sect>
 800c710:	4602      	mov	r2, r0
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <dir_sdi+0xcc>
 800c724:	2302      	movs	r3, #2
 800c726:	e010      	b.n	800c74a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	69da      	ldr	r2, [r3, #28]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	0a5b      	lsrs	r3, r3, #9
 800c730:	441a      	add	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c742:	441a      	add	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b086      	sub	sp, #24
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	3320      	adds	r3, #32
 800c768:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <dir_next+0x28>
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c778:	d301      	bcc.n	800c77e <dir_next+0x2c>
 800c77a:	2304      	movs	r3, #4
 800c77c:	e0aa      	b.n	800c8d4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 8098 	bne.w	800c8ba <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10b      	bne.n	800c7b4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	095b      	lsrs	r3, r3, #5
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	8912      	ldrh	r2, [r2, #8]
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	f0c0 8088 	bcc.w	800c8ba <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	61da      	str	r2, [r3, #28]
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	e08f      	b.n	800c8d4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	0a5b      	lsrs	r3, r3, #9
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	8952      	ldrh	r2, [r2, #10]
 800c7bc:	3a01      	subs	r2, #1
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d17a      	bne.n	800c8ba <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7ff fc80 	bl	800c0d2 <get_fat>
 800c7d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d801      	bhi.n	800c7de <dir_next+0x8c>
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e07a      	b.n	800c8d4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e4:	d101      	bne.n	800c7ea <dir_next+0x98>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e074      	b.n	800c8d4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d358      	bcc.n	800c8a6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d104      	bne.n	800c804 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	61da      	str	r2, [r3, #28]
 800c800:	2304      	movs	r3, #4
 800c802:	e067      	b.n	800c8d4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7ff fe59 	bl	800c4c4 <create_chain>
 800c812:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <dir_next+0xcc>
 800c81a:	2307      	movs	r3, #7
 800c81c:	e05a      	b.n	800c8d4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d101      	bne.n	800c828 <dir_next+0xd6>
 800c824:	2302      	movs	r3, #2
 800c826:	e055      	b.n	800c8d4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d101      	bne.n	800c834 <dir_next+0xe2>
 800c830:	2301      	movs	r3, #1
 800c832:	e04f      	b.n	800c8d4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fb4d 	bl	800bed4 <sync_window>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <dir_next+0xf2>
 800c840:	2301      	movs	r3, #1
 800c842:	e047      	b.n	800c8d4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3330      	adds	r3, #48	; 0x30
 800c848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f7ff f977 	bl	800bb42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c854:	2300      	movs	r3, #0
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	6979      	ldr	r1, [r7, #20]
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff fc1a 	bl	800c094 <clust2sect>
 800c860:	4602      	mov	r2, r0
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	62da      	str	r2, [r3, #44]	; 0x2c
 800c866:	e012      	b.n	800c88e <dir_next+0x13c>
						fs->wflag = 1;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2201      	movs	r2, #1
 800c86c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f7ff fb30 	bl	800bed4 <sync_window>
 800c874:	4603      	mov	r3, r0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <dir_next+0x12c>
 800c87a:	2301      	movs	r3, #1
 800c87c:	e02a      	b.n	800c8d4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3301      	adds	r3, #1
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	895b      	ldrh	r3, [r3, #10]
 800c892:	461a      	mov	r2, r3
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	4293      	cmp	r3, r2
 800c898:	d3e6      	bcc.n	800c868 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	1ad2      	subs	r2, r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8ac:	6979      	ldr	r1, [r7, #20]
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fbf0 	bl	800c094 <clust2sect>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8cc:	441a      	add	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff feb4 	bl	800c65c <dir_sdi>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d12b      	bne.n	800c956 <dir_alloc+0x7a>
		n = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	69db      	ldr	r3, [r3, #28]
 800c906:	4619      	mov	r1, r3
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7ff fb27 	bl	800bf5c <move_window>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d11d      	bne.n	800c954 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2be5      	cmp	r3, #229	; 0xe5
 800c920:	d004      	beq.n	800c92c <dir_alloc+0x50>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d107      	bne.n	800c93c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	3301      	adds	r3, #1
 800c930:	613b      	str	r3, [r7, #16]
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	429a      	cmp	r2, r3
 800c938:	d102      	bne.n	800c940 <dir_alloc+0x64>
 800c93a:	e00c      	b.n	800c956 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c940:	2101      	movs	r1, #1
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff ff05 	bl	800c752 <dir_next>
 800c948:	4603      	mov	r3, r0
 800c94a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0d7      	beq.n	800c902 <dir_alloc+0x26>
 800c952:	e000      	b.n	800c956 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c954:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d101      	bne.n	800c960 <dir_alloc+0x84>
 800c95c:	2307      	movs	r3, #7
 800c95e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c960:	7dfb      	ldrb	r3, [r7, #23]
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	331a      	adds	r3, #26
 800c978:	4618      	mov	r0, r3
 800c97a:	f7ff f83f 	bl	800b9fc <ld_word>
 800c97e:	4603      	mov	r3, r0
 800c980:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b03      	cmp	r3, #3
 800c988:	d109      	bne.n	800c99e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	3314      	adds	r3, #20
 800c98e:	4618      	mov	r0, r3
 800c990:	f7ff f834 	bl	800b9fc <ld_word>
 800c994:	4603      	mov	r3, r0
 800c996:	041b      	lsls	r3, r3, #16
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c99e:	68fb      	ldr	r3, [r7, #12]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	331a      	adds	r3, #26
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	b292      	uxth	r2, r2
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff f857 	bl	800ba72 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d109      	bne.n	800c9e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	f103 0214 	add.w	r2, r3, #20
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	0c1b      	lsrs	r3, r3, #16
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7ff f849 	bl	800ba72 <st_word>
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff fe2f 	bl	800c65c <dir_sdi>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <dir_find+0x24>
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	e03e      	b.n	800ca8a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6938      	ldr	r0, [r7, #16]
 800ca14:	f7ff faa2 	bl	800bf5c <move_window>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d12f      	bne.n	800ca82 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <dir_find+0x4e>
 800ca30:	2304      	movs	r3, #4
 800ca32:	75fb      	strb	r3, [r7, #23]
 800ca34:	e028      	b.n	800ca88 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	330b      	adds	r3, #11
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	330b      	adds	r3, #11
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	f003 0308 	and.w	r3, r3, #8
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10a      	bne.n	800ca6e <dir_find+0x86>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a18      	ldr	r0, [r3, #32]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3324      	adds	r3, #36	; 0x24
 800ca60:	220b      	movs	r2, #11
 800ca62:	4619      	mov	r1, r3
 800ca64:	f7ff f888 	bl	800bb78 <mem_cmp>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00b      	beq.n	800ca86 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca6e:	2100      	movs	r1, #0
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe6e 	bl	800c752 <dir_next>
 800ca76:	4603      	mov	r3, r0
 800ca78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d0c5      	beq.n	800ca0c <dir_find+0x24>
 800ca80:	e002      	b.n	800ca88 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca82:	bf00      	nop
 800ca84:	e000      	b.n	800ca88 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca86:	bf00      	nop

	return res;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800caa0:	2101      	movs	r1, #1
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff ff1a 	bl	800c8dc <dir_alloc>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d11c      	bne.n	800caec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	4619      	mov	r1, r3
 800cab8:	68b8      	ldr	r0, [r7, #8]
 800caba:	f7ff fa4f 	bl	800bf5c <move_window>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d111      	bne.n	800caec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	2220      	movs	r2, #32
 800cace:	2100      	movs	r1, #0
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff f836 	bl	800bb42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a18      	ldr	r0, [r3, #32]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3324      	adds	r3, #36	; 0x24
 800cade:	220b      	movs	r2, #11
 800cae0:	4619      	mov	r1, r3
 800cae2:	f7ff f80d 	bl	800bb00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2201      	movs	r2, #1
 800caea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800caec:	7bfb      	ldrb	r3, [r7, #15]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
	...

0800caf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b088      	sub	sp, #32
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	60fb      	str	r3, [r7, #12]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	3324      	adds	r3, #36	; 0x24
 800cb0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb0e:	220b      	movs	r2, #11
 800cb10:	2120      	movs	r1, #32
 800cb12:	68b8      	ldr	r0, [r7, #8]
 800cb14:	f7ff f815 	bl	800bb42 <mem_set>
	si = i = 0; ni = 8;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	613b      	str	r3, [r7, #16]
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	61fb      	str	r3, [r7, #28]
 800cb20:	2308      	movs	r3, #8
 800cb22:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	1c5a      	adds	r2, r3, #1
 800cb28:	61fa      	str	r2, [r7, #28]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb32:	7efb      	ldrb	r3, [r7, #27]
 800cb34:	2b20      	cmp	r3, #32
 800cb36:	d94e      	bls.n	800cbd6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb38:	7efb      	ldrb	r3, [r7, #27]
 800cb3a:	2b2f      	cmp	r3, #47	; 0x2f
 800cb3c:	d006      	beq.n	800cb4c <create_name+0x54>
 800cb3e:	7efb      	ldrb	r3, [r7, #27]
 800cb40:	2b5c      	cmp	r3, #92	; 0x5c
 800cb42:	d110      	bne.n	800cb66 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb44:	e002      	b.n	800cb4c <create_name+0x54>
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	61fb      	str	r3, [r7, #28]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	4413      	add	r3, r2
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b2f      	cmp	r3, #47	; 0x2f
 800cb56:	d0f6      	beq.n	800cb46 <create_name+0x4e>
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b5c      	cmp	r3, #92	; 0x5c
 800cb62:	d0f0      	beq.n	800cb46 <create_name+0x4e>
			break;
 800cb64:	e038      	b.n	800cbd8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb66:	7efb      	ldrb	r3, [r7, #27]
 800cb68:	2b2e      	cmp	r3, #46	; 0x2e
 800cb6a:	d003      	beq.n	800cb74 <create_name+0x7c>
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d30c      	bcc.n	800cb8e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2b0b      	cmp	r3, #11
 800cb78:	d002      	beq.n	800cb80 <create_name+0x88>
 800cb7a:	7efb      	ldrb	r3, [r7, #27]
 800cb7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb7e:	d001      	beq.n	800cb84 <create_name+0x8c>
 800cb80:	2306      	movs	r3, #6
 800cb82:	e044      	b.n	800cc0e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb84:	2308      	movs	r3, #8
 800cb86:	613b      	str	r3, [r7, #16]
 800cb88:	230b      	movs	r3, #11
 800cb8a:	617b      	str	r3, [r7, #20]
			continue;
 800cb8c:	e022      	b.n	800cbd4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da04      	bge.n	800cba0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cb96:	7efb      	ldrb	r3, [r7, #27]
 800cb98:	3b80      	subs	r3, #128	; 0x80
 800cb9a:	4a1f      	ldr	r2, [pc, #124]	; (800cc18 <create_name+0x120>)
 800cb9c:	5cd3      	ldrb	r3, [r2, r3]
 800cb9e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cba0:	7efb      	ldrb	r3, [r7, #27]
 800cba2:	4619      	mov	r1, r3
 800cba4:	481d      	ldr	r0, [pc, #116]	; (800cc1c <create_name+0x124>)
 800cba6:	f7ff f80e 	bl	800bbc6 <chk_chr>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <create_name+0xbc>
 800cbb0:	2306      	movs	r3, #6
 800cbb2:	e02c      	b.n	800cc0e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cbb4:	7efb      	ldrb	r3, [r7, #27]
 800cbb6:	2b60      	cmp	r3, #96	; 0x60
 800cbb8:	d905      	bls.n	800cbc6 <create_name+0xce>
 800cbba:	7efb      	ldrb	r3, [r7, #27]
 800cbbc:	2b7a      	cmp	r3, #122	; 0x7a
 800cbbe:	d802      	bhi.n	800cbc6 <create_name+0xce>
 800cbc0:	7efb      	ldrb	r3, [r7, #27]
 800cbc2:	3b20      	subs	r3, #32
 800cbc4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	613a      	str	r2, [r7, #16]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	7efa      	ldrb	r2, [r7, #27]
 800cbd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cbd4:	e7a6      	b.n	800cb24 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbd6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	441a      	add	r2, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <create_name+0xf4>
 800cbe8:	2306      	movs	r3, #6
 800cbea:	e010      	b.n	800cc0e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2be5      	cmp	r3, #229	; 0xe5
 800cbf2:	d102      	bne.n	800cbfa <create_name+0x102>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2205      	movs	r2, #5
 800cbf8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cbfa:	7efb      	ldrb	r3, [r7, #27]
 800cbfc:	2b20      	cmp	r3, #32
 800cbfe:	d801      	bhi.n	800cc04 <create_name+0x10c>
 800cc00:	2204      	movs	r2, #4
 800cc02:	e000      	b.n	800cc06 <create_name+0x10e>
 800cc04:	2200      	movs	r2, #0
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	330b      	adds	r3, #11
 800cc0a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc0c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3720      	adds	r7, #32
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	0800f104 	.word	0x0800f104
 800cc1c:	0800f02c 	.word	0x0800f02c

0800cc20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc34:	e002      	b.n	800cc3c <follow_path+0x1c>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b2f      	cmp	r3, #47	; 0x2f
 800cc42:	d0f8      	beq.n	800cc36 <follow_path+0x16>
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b5c      	cmp	r3, #92	; 0x5c
 800cc4a:	d0f4      	beq.n	800cc36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b1f      	cmp	r3, #31
 800cc58:	d80a      	bhi.n	800cc70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2280      	movs	r2, #128	; 0x80
 800cc5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc62:	2100      	movs	r1, #0
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fcf9 	bl	800c65c <dir_sdi>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75fb      	strb	r3, [r7, #23]
 800cc6e:	e043      	b.n	800ccf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc70:	463b      	mov	r3, r7
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff ff3f 	bl	800caf8 <create_name>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d134      	bne.n	800ccee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff feaf 	bl	800c9e8 <dir_find>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00a      	beq.n	800ccb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d127      	bne.n	800ccf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cca2:	7afb      	ldrb	r3, [r7, #11]
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d122      	bne.n	800ccf2 <follow_path+0xd2>
 800ccac:	2305      	movs	r3, #5
 800ccae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccb0:	e01f      	b.n	800ccf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccb2:	7afb      	ldrb	r3, [r7, #11]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d11c      	bne.n	800ccf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	799b      	ldrb	r3, [r3, #6]
 800ccc0:	f003 0310 	and.w	r3, r3, #16
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccc8:	2305      	movs	r3, #5
 800ccca:	75fb      	strb	r3, [r7, #23]
 800cccc:	e014      	b.n	800ccf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccdc:	4413      	add	r3, r2
 800ccde:	4619      	mov	r1, r3
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7ff fe42 	bl	800c96a <ld_clust>
 800cce6:	4602      	mov	r2, r0
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccec:	e7c0      	b.n	800cc70 <follow_path+0x50>
			if (res != FR_OK) break;
 800ccee:	bf00      	nop
 800ccf0:	e002      	b.n	800ccf8 <follow_path+0xd8>
				break;
 800ccf2:	bf00      	nop
 800ccf4:	e000      	b.n	800ccf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccf6:	bf00      	nop
			}
		}
	}

	return res;
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3718      	adds	r7, #24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b087      	sub	sp, #28
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d031      	beq.n	800cd7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	e002      	b.n	800cd26 <get_ldnumber+0x24>
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	3301      	adds	r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	d903      	bls.n	800cd36 <get_ldnumber+0x34>
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b3a      	cmp	r3, #58	; 0x3a
 800cd34:	d1f4      	bne.n	800cd20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b3a      	cmp	r3, #58	; 0x3a
 800cd3c:	d11c      	bne.n	800cd78 <get_ldnumber+0x76>
			tp = *path;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	60fa      	str	r2, [r7, #12]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	3b30      	subs	r3, #48	; 0x30
 800cd4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	2b09      	cmp	r3, #9
 800cd54:	d80e      	bhi.n	800cd74 <get_ldnumber+0x72>
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d10a      	bne.n	800cd74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d107      	bne.n	800cd74 <get_ldnumber+0x72>
					vol = (int)i;
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	e002      	b.n	800cd7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd78:	2300      	movs	r3, #0
 800cd7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd7c:	693b      	ldr	r3, [r7, #16]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	70da      	strb	r2, [r3, #3]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cda2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff f8d8 	bl	800bf5c <move_window>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <check_fs+0x2a>
 800cdb2:	2304      	movs	r3, #4
 800cdb4:	e038      	b.n	800ce28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	3330      	adds	r3, #48	; 0x30
 800cdba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe fe1c 	bl	800b9fc <ld_word>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d001      	beq.n	800cdd4 <check_fs+0x48>
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e029      	b.n	800ce28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdda:	2be9      	cmp	r3, #233	; 0xe9
 800cddc:	d009      	beq.n	800cdf2 <check_fs+0x66>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cde4:	2beb      	cmp	r3, #235	; 0xeb
 800cde6:	d11e      	bne.n	800ce26 <check_fs+0x9a>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cdee:	2b90      	cmp	r3, #144	; 0x90
 800cdf0:	d119      	bne.n	800ce26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3330      	adds	r3, #48	; 0x30
 800cdf6:	3336      	adds	r3, #54	; 0x36
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe fe17 	bl	800ba2c <ld_dword>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce04:	4a0a      	ldr	r2, [pc, #40]	; (800ce30 <check_fs+0xa4>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d101      	bne.n	800ce0e <check_fs+0x82>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	e00c      	b.n	800ce28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3330      	adds	r3, #48	; 0x30
 800ce12:	3352      	adds	r3, #82	; 0x52
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe fe09 	bl	800ba2c <ld_dword>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	4a05      	ldr	r2, [pc, #20]	; (800ce34 <check_fs+0xa8>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d101      	bne.n	800ce26 <check_fs+0x9a>
 800ce22:	2300      	movs	r3, #0
 800ce24:	e000      	b.n	800ce28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce26:	2302      	movs	r3, #2
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	00544146 	.word	0x00544146
 800ce34:	33544146 	.word	0x33544146

0800ce38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b096      	sub	sp, #88	; 0x58
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f7ff ff58 	bl	800cd02 <get_ldnumber>
 800ce52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da01      	bge.n	800ce5e <find_volume+0x26>
 800ce5a:	230b      	movs	r3, #11
 800ce5c:	e22d      	b.n	800d2ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce5e:	4aa1      	ldr	r2, [pc, #644]	; (800d0e4 <find_volume+0x2ac>)
 800ce60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <find_volume+0x3a>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	e223      	b.n	800d2ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce78:	79fb      	ldrb	r3, [r7, #7]
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d01a      	beq.n	800cebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	785b      	ldrb	r3, [r3, #1]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fd17 	bl	800b8c0 <disk_status>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ce98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10c      	bne.n	800cebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d007      	beq.n	800ceba <find_volume+0x82>
 800ceaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceae:	f003 0304 	and.w	r3, r3, #4
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ceb6:	230a      	movs	r3, #10
 800ceb8:	e1ff      	b.n	800d2ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ceba:	2300      	movs	r3, #0
 800cebc:	e1fd      	b.n	800d2ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	2200      	movs	r2, #0
 800cec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	785b      	ldrb	r3, [r3, #1]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fd0f 	bl	800b8f4 <disk_initialize>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cedc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cee0:	f003 0301 	and.w	r3, r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cee8:	2303      	movs	r3, #3
 800ceea:	e1e6      	b.n	800d2ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d007      	beq.n	800cf02 <find_volume+0xca>
 800cef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cefe:	230a      	movs	r3, #10
 800cf00:	e1db      	b.n	800d2ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf0a:	f7ff ff3f 	bl	800cd8c <check_fs>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d149      	bne.n	800cfb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf20:	e01e      	b.n	800cf60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf30:	4413      	add	r3, r2
 800cf32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	3304      	adds	r3, #4
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d006      	beq.n	800cf4c <find_volume+0x114>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	3308      	adds	r3, #8
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fd72 	bl	800ba2c <ld_dword>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	e000      	b.n	800cf4e <find_volume+0x116>
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	3358      	adds	r3, #88	; 0x58
 800cf54:	443b      	add	r3, r7
 800cf56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d9dd      	bls.n	800cf22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf66:	2300      	movs	r3, #0
 800cf68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <find_volume+0x13e>
 800cf70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf72:	3b01      	subs	r3, #1
 800cf74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	3358      	adds	r3, #88	; 0x58
 800cf7c:	443b      	add	r3, r7
 800cf7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d005      	beq.n	800cf96 <find_volume+0x15e>
 800cf8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf8e:	f7ff fefd 	bl	800cd8c <check_fs>
 800cf92:	4603      	mov	r3, r0
 800cf94:	e000      	b.n	800cf98 <find_volume+0x160>
 800cf96:	2303      	movs	r3, #3
 800cf98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d905      	bls.n	800cfb0 <find_volume+0x178>
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	643b      	str	r3, [r7, #64]	; 0x40
 800cfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d9e2      	bls.n	800cf76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d101      	bne.n	800cfbc <find_volume+0x184>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e17e      	b.n	800d2ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cfbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d901      	bls.n	800cfc8 <find_volume+0x190>
 800cfc4:	230d      	movs	r3, #13
 800cfc6:	e178      	b.n	800d2ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	3330      	adds	r3, #48	; 0x30
 800cfcc:	330b      	adds	r3, #11
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fe fd14 	bl	800b9fc <ld_word>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfda:	d001      	beq.n	800cfe0 <find_volume+0x1a8>
 800cfdc:	230d      	movs	r3, #13
 800cfde:	e16c      	b.n	800d2ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	3330      	adds	r3, #48	; 0x30
 800cfe4:	3316      	adds	r3, #22
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fe fd08 	bl	800b9fc <ld_word>
 800cfec:	4603      	mov	r3, r0
 800cfee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <find_volume+0x1cc>
 800cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff8:	3330      	adds	r3, #48	; 0x30
 800cffa:	3324      	adds	r3, #36	; 0x24
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fd15 	bl	800ba2c <ld_dword>
 800d002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d008:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	789b      	ldrb	r3, [r3, #2]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d005      	beq.n	800d028 <find_volume+0x1f0>
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	789b      	ldrb	r3, [r3, #2]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d001      	beq.n	800d028 <find_volume+0x1f0>
 800d024:	230d      	movs	r3, #13
 800d026:	e148      	b.n	800d2ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	789b      	ldrb	r3, [r3, #2]
 800d02c:	461a      	mov	r2, r3
 800d02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d030:	fb02 f303 	mul.w	r3, r2, r3
 800d034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	895b      	ldrh	r3, [r3, #10]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d008      	beq.n	800d05c <find_volume+0x224>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	895b      	ldrh	r3, [r3, #10]
 800d04e:	461a      	mov	r2, r3
 800d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	3b01      	subs	r3, #1
 800d056:	4013      	ands	r3, r2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <find_volume+0x228>
 800d05c:	230d      	movs	r3, #13
 800d05e:	e12c      	b.n	800d2ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	3330      	adds	r3, #48	; 0x30
 800d064:	3311      	adds	r3, #17
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe fcc8 	bl	800b9fc <ld_word>
 800d06c:	4603      	mov	r3, r0
 800d06e:	461a      	mov	r2, r3
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	891b      	ldrh	r3, [r3, #8]
 800d078:	f003 030f 	and.w	r3, r3, #15
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <find_volume+0x24e>
 800d082:	230d      	movs	r3, #13
 800d084:	e119      	b.n	800d2ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d088:	3330      	adds	r3, #48	; 0x30
 800d08a:	3313      	adds	r3, #19
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7fe fcb5 	bl	800b9fc <ld_word>
 800d092:	4603      	mov	r3, r0
 800d094:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <find_volume+0x272>
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	3330      	adds	r3, #48	; 0x30
 800d0a0:	3320      	adds	r3, #32
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fcc2 	bl	800ba2c <ld_dword>
 800d0a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	3330      	adds	r3, #48	; 0x30
 800d0ae:	330e      	adds	r3, #14
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fca3 	bl	800b9fc <ld_word>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <find_volume+0x28c>
 800d0c0:	230d      	movs	r3, #13
 800d0c2:	e0fa      	b.n	800d2ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d0c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0c8:	4413      	add	r3, r2
 800d0ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0cc:	8912      	ldrh	r2, [r2, #8]
 800d0ce:	0912      	lsrs	r2, r2, #4
 800d0d0:	b292      	uxth	r2, r2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d204      	bcs.n	800d0e8 <find_volume+0x2b0>
 800d0de:	230d      	movs	r3, #13
 800d0e0:	e0eb      	b.n	800d2ba <find_volume+0x482>
 800d0e2:	bf00      	nop
 800d0e4:	20001714 	.word	0x20001714
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0f0:	8952      	ldrh	r2, [r2, #10]
 800d0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <find_volume+0x2ca>
 800d0fe:	230d      	movs	r3, #13
 800d100:	e0db      	b.n	800d2ba <find_volume+0x482>
		fmt = FS_FAT32;
 800d102:	2303      	movs	r3, #3
 800d104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d10e:	4293      	cmp	r3, r2
 800d110:	d802      	bhi.n	800d118 <find_volume+0x2e0>
 800d112:	2302      	movs	r3, #2
 800d114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d11e:	4293      	cmp	r3, r2
 800d120:	d802      	bhi.n	800d128 <find_volume+0x2f0>
 800d122:	2301      	movs	r3, #1
 800d124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	1c9a      	adds	r2, r3, #2
 800d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d134:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d136:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d13a:	441a      	add	r2, r3
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	441a      	add	r2, r3
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d14a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d11e      	bne.n	800d190 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	3330      	adds	r3, #48	; 0x30
 800d156:	332a      	adds	r3, #42	; 0x2a
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe fc4f 	bl	800b9fc <ld_word>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <find_volume+0x330>
 800d164:	230d      	movs	r3, #13
 800d166:	e0a8      	b.n	800d2ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16a:	891b      	ldrh	r3, [r3, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <find_volume+0x33c>
 800d170:	230d      	movs	r3, #13
 800d172:	e0a2      	b.n	800d2ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d176:	3330      	adds	r3, #48	; 0x30
 800d178:	332c      	adds	r3, #44	; 0x2c
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fc56 	bl	800ba2c <ld_dword>
 800d180:	4602      	mov	r2, r0
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	695b      	ldr	r3, [r3, #20]
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	647b      	str	r3, [r7, #68]	; 0x44
 800d18e:	e01f      	b.n	800d1d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d192:	891b      	ldrh	r3, [r3, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <find_volume+0x364>
 800d198:	230d      	movs	r3, #13
 800d19a:	e08e      	b.n	800d2ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	6a1a      	ldr	r2, [r3, #32]
 800d1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1a2:	441a      	add	r2, r3
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d1a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d103      	bne.n	800d1b8 <find_volume+0x380>
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	e00a      	b.n	800d1ce <find_volume+0x396>
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	695a      	ldr	r2, [r3, #20]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	4413      	add	r3, r2
 800d1c2:	085a      	lsrs	r2, r3, #1
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d1ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	699a      	ldr	r2, [r3, #24]
 800d1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d1da:	0a5b      	lsrs	r3, r3, #9
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d201      	bcs.n	800d1e4 <find_volume+0x3ac>
 800d1e0:	230d      	movs	r3, #13
 800d1e2:	e06a      	b.n	800d2ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ea:	611a      	str	r2, [r3, #16]
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	691a      	ldr	r2, [r3, #16]
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	2280      	movs	r2, #128	; 0x80
 800d1f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d1fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d149      	bne.n	800d296 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	3330      	adds	r3, #48	; 0x30
 800d206:	3330      	adds	r3, #48	; 0x30
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe fbf7 	bl	800b9fc <ld_word>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b01      	cmp	r3, #1
 800d212:	d140      	bne.n	800d296 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d216:	3301      	adds	r3, #1
 800d218:	4619      	mov	r1, r3
 800d21a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d21c:	f7fe fe9e 	bl	800bf5c <move_window>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d137      	bne.n	800d296 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	2200      	movs	r2, #0
 800d22a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22e:	3330      	adds	r3, #48	; 0x30
 800d230:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe fbe1 	bl	800b9fc <ld_word>
 800d23a:	4603      	mov	r3, r0
 800d23c:	461a      	mov	r2, r3
 800d23e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d242:	429a      	cmp	r2, r3
 800d244:	d127      	bne.n	800d296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	3330      	adds	r3, #48	; 0x30
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fbee 	bl	800ba2c <ld_dword>
 800d250:	4603      	mov	r3, r0
 800d252:	4a1c      	ldr	r2, [pc, #112]	; (800d2c4 <find_volume+0x48c>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d11e      	bne.n	800d296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	3330      	adds	r3, #48	; 0x30
 800d25c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d260:	4618      	mov	r0, r3
 800d262:	f7fe fbe3 	bl	800ba2c <ld_dword>
 800d266:	4603      	mov	r3, r0
 800d268:	4a17      	ldr	r2, [pc, #92]	; (800d2c8 <find_volume+0x490>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d113      	bne.n	800d296 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	3330      	adds	r3, #48	; 0x30
 800d272:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fbd8 	bl	800ba2c <ld_dword>
 800d27c:	4602      	mov	r2, r0
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	3330      	adds	r3, #48	; 0x30
 800d286:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fe fbce 	bl	800ba2c <ld_dword>
 800d290:	4602      	mov	r2, r0
 800d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d294:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d298:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d29c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d29e:	4b0b      	ldr	r3, [pc, #44]	; (800d2cc <find_volume+0x494>)
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	4b09      	ldr	r3, [pc, #36]	; (800d2cc <find_volume+0x494>)
 800d2a8:	801a      	strh	r2, [r3, #0]
 800d2aa:	4b08      	ldr	r3, [pc, #32]	; (800d2cc <find_volume+0x494>)
 800d2ac:	881a      	ldrh	r2, [r3, #0]
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d2b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2b4:	f7fe fdea 	bl	800be8c <clear_lock>
#endif
	return FR_OK;
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3758      	adds	r7, #88	; 0x58
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	41615252 	.word	0x41615252
 800d2c8:	61417272 	.word	0x61417272
 800d2cc:	20001718 	.word	0x20001718

0800d2d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2da:	2309      	movs	r3, #9
 800d2dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01c      	beq.n	800d31e <validate+0x4e>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d018      	beq.n	800d31e <validate+0x4e>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d013      	beq.n	800d31e <validate+0x4e>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	889a      	ldrh	r2, [r3, #4]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	88db      	ldrh	r3, [r3, #6]
 800d300:	429a      	cmp	r2, r3
 800d302:	d10c      	bne.n	800d31e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	785b      	ldrb	r3, [r3, #1]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe fad8 	bl	800b8c0 <disk_status>
 800d310:	4603      	mov	r3, r0
 800d312:	f003 0301 	and.w	r3, r3, #1
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <validate+0x4e>
			res = FR_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <validate+0x5a>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	e000      	b.n	800d32c <validate+0x5c>
 800d32a:	2300      	movs	r3, #0
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	6013      	str	r3, [r2, #0]
	return res;
 800d330:	7bfb      	ldrb	r3, [r7, #15]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	4613      	mov	r3, r2
 800d348:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d34e:	f107 0310 	add.w	r3, r7, #16
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff fcd5 	bl	800cd02 <get_ldnumber>
 800d358:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	da01      	bge.n	800d364 <f_mount+0x28>
 800d360:	230b      	movs	r3, #11
 800d362:	e02b      	b.n	800d3bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d364:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <f_mount+0x88>)
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d36c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d374:	69b8      	ldr	r0, [r7, #24]
 800d376:	f7fe fd89 	bl	800be8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	2200      	movs	r2, #0
 800d37e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	490d      	ldr	r1, [pc, #52]	; (800d3c4 <f_mount+0x88>)
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <f_mount+0x66>
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d001      	beq.n	800d3a6 <f_mount+0x6a>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e00a      	b.n	800d3bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d3a6:	f107 010c 	add.w	r1, r7, #12
 800d3aa:	f107 0308 	add.w	r3, r7, #8
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff fd41 	bl	800ce38 <find_volume>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3720      	adds	r7, #32
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20001714 	.word	0x20001714

0800d3c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b098      	sub	sp, #96	; 0x60
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <f_open+0x18>
 800d3dc:	2309      	movs	r3, #9
 800d3de:	e1ad      	b.n	800d73c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3e8:	79fa      	ldrb	r2, [r7, #7]
 800d3ea:	f107 0110 	add.w	r1, r7, #16
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff fd20 	bl	800ce38 <find_volume>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d3fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d402:	2b00      	cmp	r3, #0
 800d404:	f040 8191 	bne.w	800d72a <f_open+0x362>
		dj.obj.fs = fs;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	f107 0314 	add.w	r3, r7, #20
 800d412:	4611      	mov	r1, r2
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff fc03 	bl	800cc20 <follow_path>
 800d41a:	4603      	mov	r3, r0
 800d41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d424:	2b00      	cmp	r3, #0
 800d426:	d11a      	bne.n	800d45e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d428:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d42c:	b25b      	sxtb	r3, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da03      	bge.n	800d43a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d432:	2306      	movs	r3, #6
 800d434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d438:	e011      	b.n	800d45e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	f023 0301 	bic.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	bf14      	ite	ne
 800d444:	2301      	movne	r3, #1
 800d446:	2300      	moveq	r3, #0
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	461a      	mov	r2, r3
 800d44c:	f107 0314 	add.w	r3, r7, #20
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fbd2 	bl	800bbfc <chk_lock>
 800d458:	4603      	mov	r3, r0
 800d45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	f003 031c 	and.w	r3, r3, #28
 800d464:	2b00      	cmp	r3, #0
 800d466:	d07f      	beq.n	800d568 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d017      	beq.n	800d4a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d474:	2b04      	cmp	r3, #4
 800d476:	d10e      	bne.n	800d496 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d478:	f7fe fc1c 	bl	800bcb4 <enq_lock>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d006      	beq.n	800d490 <f_open+0xc8>
 800d482:	f107 0314 	add.w	r3, r7, #20
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff fb03 	bl	800ca92 <dir_register>
 800d48c:	4603      	mov	r3, r0
 800d48e:	e000      	b.n	800d492 <f_open+0xca>
 800d490:	2312      	movs	r3, #18
 800d492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	f043 0308 	orr.w	r3, r3, #8
 800d49c:	71fb      	strb	r3, [r7, #7]
 800d49e:	e010      	b.n	800d4c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d4a0:	7ebb      	ldrb	r3, [r7, #26]
 800d4a2:	f003 0311 	and.w	r3, r3, #17
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d003      	beq.n	800d4b2 <f_open+0xea>
					res = FR_DENIED;
 800d4aa:	2307      	movs	r3, #7
 800d4ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4b0:	e007      	b.n	800d4c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	f003 0304 	and.w	r3, r3, #4
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <f_open+0xfa>
 800d4bc:	2308      	movs	r3, #8
 800d4be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d168      	bne.n	800d59c <f_open+0x1d4>
 800d4ca:	79fb      	ldrb	r3, [r7, #7]
 800d4cc:	f003 0308 	and.w	r3, r3, #8
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d063      	beq.n	800d59c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d4d4:	f7fb f8e6 	bl	80086a4 <get_fattime>
 800d4d8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4dc:	330e      	adds	r3, #14
 800d4de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fae1 	bl	800baa8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	3316      	adds	r3, #22
 800d4ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fe fadb 	bl	800baa8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f4:	330b      	adds	r3, #11
 800d4f6:	2220      	movs	r2, #32
 800d4f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4fe:	4611      	mov	r1, r2
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fa32 	bl	800c96a <ld_clust>
 800d506:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d50c:	2200      	movs	r2, #0
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fa4a 	bl	800c9a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d516:	331c      	adds	r3, #28
 800d518:	2100      	movs	r1, #0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fac4 	bl	800baa8 <st_dword>
					fs->wflag = 1;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2201      	movs	r2, #1
 800d524:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d037      	beq.n	800d59c <f_open+0x1d4>
						dw = fs->winsect;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d530:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d532:	f107 0314 	add.w	r3, r7, #20
 800d536:	2200      	movs	r2, #0
 800d538:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe ff5d 	bl	800c3fa <remove_chain>
 800d540:	4603      	mov	r3, r0
 800d542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d126      	bne.n	800d59c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d552:	4618      	mov	r0, r3
 800d554:	f7fe fd02 	bl	800bf5c <move_window>
 800d558:	4603      	mov	r3, r0
 800d55a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d562:	3a01      	subs	r2, #1
 800d564:	60da      	str	r2, [r3, #12]
 800d566:	e019      	b.n	800d59c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d115      	bne.n	800d59c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d570:	7ebb      	ldrb	r3, [r7, #26]
 800d572:	f003 0310 	and.w	r3, r3, #16
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d57a:	2304      	movs	r3, #4
 800d57c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d580:	e00c      	b.n	800d59c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d582:	79fb      	ldrb	r3, [r7, #7]
 800d584:	f003 0302 	and.w	r3, r3, #2
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <f_open+0x1d4>
 800d58c:	7ebb      	ldrb	r3, [r7, #26]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <f_open+0x1d4>
						res = FR_DENIED;
 800d596:	2307      	movs	r3, #7
 800d598:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d59c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d128      	bne.n	800d5f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	f003 0308 	and.w	r3, r3, #8
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	f023 0301 	bic.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bf14      	ite	ne
 800d5ce:	2301      	movne	r3, #1
 800d5d0:	2300      	moveq	r3, #0
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	f107 0314 	add.w	r3, r7, #20
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fb8b 	bl	800bcf8 <inc_lock>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <f_open+0x22e>
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f040 8095 	bne.w	800d72a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d604:	4611      	mov	r1, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f7ff f9af 	bl	800c96a <ld_clust>
 800d60c:	4602      	mov	r2, r0
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d614:	331c      	adds	r3, #28
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fa08 	bl	800ba2c <ld_dword>
 800d61c:	4602      	mov	r2, r0
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	88da      	ldrh	r2, [r3, #6]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	79fa      	ldrb	r2, [r7, #7]
 800d63a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2200      	movs	r2, #0
 800d640:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3330      	adds	r3, #48	; 0x30
 800d652:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d656:	2100      	movs	r1, #0
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fa72 	bl	800bb42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	f003 0320 	and.w	r3, r3, #32
 800d664:	2b00      	cmp	r3, #0
 800d666:	d060      	beq.n	800d72a <f_open+0x362>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d05c      	beq.n	800d72a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	895b      	ldrh	r3, [r3, #10]
 800d67c:	025b      	lsls	r3, r3, #9
 800d67e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	657b      	str	r3, [r7, #84]	; 0x54
 800d68c:	e016      	b.n	800d6bc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fd1d 	bl	800c0d2 <get_fat>
 800d698:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d802      	bhi.n	800d6a6 <f_open+0x2de>
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d6a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ac:	d102      	bne.n	800d6b4 <f_open+0x2ec>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	657b      	str	r3, [r7, #84]	; 0x54
 800d6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d103      	bne.n	800d6cc <f_open+0x304>
 800d6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d8e0      	bhi.n	800d68e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d127      	bne.n	800d72a <f_open+0x362>
 800d6da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d022      	beq.n	800d72a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fcd3 	bl	800c094 <clust2sect>
 800d6ee:	6478      	str	r0, [r7, #68]	; 0x44
 800d6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d103      	bne.n	800d6fe <f_open+0x336>
						res = FR_INT_ERR;
 800d6f6:	2302      	movs	r3, #2
 800d6f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6fc:	e015      	b.n	800d72a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d700:	0a5a      	lsrs	r2, r3, #9
 800d702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d704:	441a      	add	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	7858      	ldrb	r0, [r3, #1]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6a1a      	ldr	r2, [r3, #32]
 800d718:	2301      	movs	r3, #1
 800d71a:	f7fe f911 	bl	800b940 <disk_read>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d002      	beq.n	800d72a <f_open+0x362>
 800d724:	2301      	movs	r3, #1
 800d726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d72a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <f_open+0x370>
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d738:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3760      	adds	r7, #96	; 0x60
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08e      	sub	sp, #56	; 0x38
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2200      	movs	r2, #0
 800d75a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f107 0214 	add.w	r2, r7, #20
 800d762:	4611      	mov	r1, r2
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fdb3 	bl	800d2d0 <validate>
 800d76a:	4603      	mov	r3, r0
 800d76c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d774:	2b00      	cmp	r3, #0
 800d776:	d107      	bne.n	800d788 <f_read+0x44>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	7d5b      	ldrb	r3, [r3, #21]
 800d77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <f_read+0x4a>
 800d788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d78c:	e115      	b.n	800d9ba <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	7d1b      	ldrb	r3, [r3, #20]
 800d792:	f003 0301 	and.w	r3, r3, #1
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <f_read+0x5a>
 800d79a:	2307      	movs	r3, #7
 800d79c:	e10d      	b.n	800d9ba <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	68da      	ldr	r2, [r3, #12]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	f240 80fe 	bls.w	800d9b0 <f_read+0x26c>
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d7b8:	e0fa      	b.n	800d9b0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f040 80c6 	bne.w	800d954 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	0a5b      	lsrs	r3, r3, #9
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	8952      	ldrh	r2, [r2, #10]
 800d7d2:	3a01      	subs	r2, #1
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d12f      	bne.n	800d83e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	699b      	ldr	r3, [r3, #24]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d103      	bne.n	800d7ee <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	633b      	str	r3, [r7, #48]	; 0x30
 800d7ec:	e013      	b.n	800d816 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d007      	beq.n	800d806 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7fe fef9 	bl	800c5f4 <clmt_clust>
 800d802:	6338      	str	r0, [r7, #48]	; 0x30
 800d804:	e007      	b.n	800d816 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	69db      	ldr	r3, [r3, #28]
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f7fe fc5f 	bl	800c0d2 <get_fat>
 800d814:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d804      	bhi.n	800d826 <f_read+0xe2>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2202      	movs	r2, #2
 800d820:	755a      	strb	r2, [r3, #21]
 800d822:	2302      	movs	r3, #2
 800d824:	e0c9      	b.n	800d9ba <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d82c:	d104      	bne.n	800d838 <f_read+0xf4>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	755a      	strb	r2, [r3, #21]
 800d834:	2301      	movs	r3, #1
 800d836:	e0c0      	b.n	800d9ba <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d83c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	69db      	ldr	r3, [r3, #28]
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7fe fc24 	bl	800c094 <clust2sect>
 800d84c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <f_read+0x11a>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2202      	movs	r2, #2
 800d858:	755a      	strb	r2, [r3, #21]
 800d85a:	2302      	movs	r3, #2
 800d85c:	e0ad      	b.n	800d9ba <f_read+0x276>
			sect += csect;
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	4413      	add	r3, r2
 800d864:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	0a5b      	lsrs	r3, r3, #9
 800d86a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d039      	beq.n	800d8e6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d872:	69fa      	ldr	r2, [r7, #28]
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	4413      	add	r3, r2
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	8952      	ldrh	r2, [r2, #10]
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d905      	bls.n	800d88c <f_read+0x148>
					cc = fs->csize - csect;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	895b      	ldrh	r3, [r3, #10]
 800d884:	461a      	mov	r2, r3
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	7858      	ldrb	r0, [r3, #1]
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d892:	69ba      	ldr	r2, [r7, #24]
 800d894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d896:	f7fe f853 	bl	800b940 <disk_read>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d004      	beq.n	800d8aa <f_read+0x166>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	755a      	strb	r2, [r3, #21]
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e087      	b.n	800d9ba <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	7d1b      	ldrb	r3, [r3, #20]
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	da14      	bge.n	800d8de <f_read+0x19a>
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	6a1a      	ldr	r2, [r3, #32]
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d90d      	bls.n	800d8de <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a1a      	ldr	r2, [r3, #32]
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	025b      	lsls	r3, r3, #9
 800d8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ce:	18d0      	adds	r0, r2, r3
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3330      	adds	r3, #48	; 0x30
 800d8d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8d8:	4619      	mov	r1, r3
 800d8da:	f7fe f911 	bl	800bb00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	025b      	lsls	r3, r3, #9
 800d8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d8e4:	e050      	b.n	800d988 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	69ba      	ldr	r2, [r7, #24]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d02e      	beq.n	800d94e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	7d1b      	ldrb	r3, [r3, #20]
 800d8f4:	b25b      	sxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	da18      	bge.n	800d92c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	7858      	ldrb	r0, [r3, #1]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a1a      	ldr	r2, [r3, #32]
 800d908:	2301      	movs	r3, #1
 800d90a:	f7fe f839 	bl	800b980 <disk_write>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <f_read+0x1da>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2201      	movs	r2, #1
 800d918:	755a      	strb	r2, [r3, #21]
 800d91a:	2301      	movs	r3, #1
 800d91c:	e04d      	b.n	800d9ba <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	7d1b      	ldrb	r3, [r3, #20]
 800d922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d926:	b2da      	uxtb	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	7858      	ldrb	r0, [r3, #1]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d936:	2301      	movs	r3, #1
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	f7fe f801 	bl	800b940 <disk_read>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d004      	beq.n	800d94e <f_read+0x20a>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2201      	movs	r2, #1
 800d948:	755a      	strb	r2, [r3, #21]
 800d94a:	2301      	movs	r3, #1
 800d94c:	e035      	b.n	800d9ba <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	69ba      	ldr	r2, [r7, #24]
 800d952:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	429a      	cmp	r2, r3
 800d968:	d901      	bls.n	800d96e <f_read+0x22a>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d97c:	4413      	add	r3, r2
 800d97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d980:	4619      	mov	r1, r3
 800d982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d984:	f7fe f8bc 	bl	800bb00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	4413      	add	r3, r2
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	699a      	ldr	r2, [r3, #24]
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	441a      	add	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	619a      	str	r2, [r3, #24]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	441a      	add	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f47f af01 	bne.w	800d7ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3738      	adds	r7, #56	; 0x38
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b086      	sub	sp, #24
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f107 0208 	add.w	r2, r7, #8
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fc7c 	bl	800d2d0 <validate>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d168      	bne.n	800dab4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d062      	beq.n	800dab4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	7d1b      	ldrb	r3, [r3, #20]
 800d9f2:	b25b      	sxtb	r3, r3
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	da15      	bge.n	800da24 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	7858      	ldrb	r0, [r3, #1]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1a      	ldr	r2, [r3, #32]
 800da06:	2301      	movs	r3, #1
 800da08:	f7fd ffba 	bl	800b980 <disk_write>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d001      	beq.n	800da16 <f_sync+0x54>
 800da12:	2301      	movs	r3, #1
 800da14:	e04f      	b.n	800dab6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7d1b      	ldrb	r3, [r3, #20]
 800da1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da24:	f7fa fe3e 	bl	80086a4 <get_fattime>
 800da28:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da30:	4619      	mov	r1, r3
 800da32:	4610      	mov	r0, r2
 800da34:	f7fe fa92 	bl	800bf5c <move_window>
 800da38:	4603      	mov	r3, r0
 800da3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d138      	bne.n	800dab4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	330b      	adds	r3, #11
 800da4c:	781a      	ldrb	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	330b      	adds	r3, #11
 800da52:	f042 0220 	orr.w	r2, r2, #32
 800da56:	b2d2      	uxtb	r2, r2
 800da58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6818      	ldr	r0, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	461a      	mov	r2, r3
 800da64:	68f9      	ldr	r1, [r7, #12]
 800da66:	f7fe ff9f 	bl	800c9a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f103 021c 	add.w	r2, r3, #28
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	4619      	mov	r1, r3
 800da76:	4610      	mov	r0, r2
 800da78:	f7fe f816 	bl	800baa8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	3316      	adds	r3, #22
 800da80:	6939      	ldr	r1, [r7, #16]
 800da82:	4618      	mov	r0, r3
 800da84:	f7fe f810 	bl	800baa8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	3312      	adds	r3, #18
 800da8c:	2100      	movs	r1, #0
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fd ffef 	bl	800ba72 <st_word>
					fs->wflag = 1;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2201      	movs	r2, #1
 800da98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fa8b 	bl	800bfb8 <sync_fs>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	7d1b      	ldrb	r3, [r3, #20]
 800daaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7ff ff7b 	bl	800d9c2 <f_sync>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d118      	bne.n	800db08 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f107 0208 	add.w	r2, r7, #8
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff fbf6 	bl	800d2d0 <validate>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10c      	bne.n	800db08 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe f98e 	bl	800be14 <dec_lock>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d102      	bne.n	800db08 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db08:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b090      	sub	sp, #64	; 0x40
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f107 0208 	add.w	r2, r7, #8
 800db22:	4611      	mov	r1, r2
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff fbd3 	bl	800d2d0 <validate>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800db30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <f_lseek+0x2e>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7d5b      	ldrb	r3, [r3, #21]
 800db3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800db40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <f_lseek+0x3c>
 800db48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db4c:	e1e6      	b.n	800df1c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db52:	2b00      	cmp	r3, #0
 800db54:	f000 80d1 	beq.w	800dcfa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db5e:	d15a      	bne.n	800dc16 <f_lseek+0x104>
			tbl = fp->cltbl;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	627a      	str	r2, [r7, #36]	; 0x24
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	2302      	movs	r3, #2
 800db72:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d03a      	beq.n	800dbf6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	613b      	str	r3, [r7, #16]
 800db84:	2300      	movs	r3, #0
 800db86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	3302      	adds	r3, #2
 800db8c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	60fb      	str	r3, [r7, #12]
 800db92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db94:	3301      	adds	r3, #1
 800db96:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fa98 	bl	800c0d2 <get_fat>
 800dba2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d804      	bhi.n	800dbb4 <f_lseek+0xa2>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2202      	movs	r2, #2
 800dbae:	755a      	strb	r2, [r3, #21]
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e1b3      	b.n	800df1c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbba:	d104      	bne.n	800dbc6 <f_lseek+0xb4>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	755a      	strb	r2, [r3, #21]
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e1aa      	b.n	800df1c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d0de      	beq.n	800db8e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dbd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d809      	bhi.n	800dbec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	627a      	str	r2, [r7, #36]	; 0x24
 800dbde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	1d1a      	adds	r2, r3, #4
 800dbe6:	627a      	str	r2, [r7, #36]	; 0x24
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d3c4      	bcc.n	800db80 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbfc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dbfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d803      	bhi.n	800dc0e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc08:	2200      	movs	r2, #0
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	e184      	b.n	800df18 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dc0e:	2311      	movs	r3, #17
 800dc10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc14:	e180      	b.n	800df18 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d902      	bls.n	800dc26 <f_lseek+0x114>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 8172 	beq.w	800df18 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	3b01      	subs	r3, #1
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7fe fcda 	bl	800c5f4 <clmt_clust>
 800dc40:	4602      	mov	r2, r0
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	69db      	ldr	r3, [r3, #28]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f7fe fa20 	bl	800c094 <clust2sect>
 800dc54:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d104      	bne.n	800dc66 <f_lseek+0x154>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	755a      	strb	r2, [r3, #21]
 800dc62:	2302      	movs	r3, #2
 800dc64:	e15a      	b.n	800df1c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	0a5b      	lsrs	r3, r3, #9
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	8952      	ldrh	r2, [r2, #10]
 800dc70:	3a01      	subs	r2, #1
 800dc72:	4013      	ands	r3, r2
 800dc74:	69ba      	ldr	r2, [r7, #24]
 800dc76:	4413      	add	r3, r2
 800dc78:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 8148 	beq.w	800df18 <f_lseek+0x406>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	f000 8142 	beq.w	800df18 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	b25b      	sxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	da18      	bge.n	800dcd0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	7858      	ldrb	r0, [r3, #1]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6a1a      	ldr	r2, [r3, #32]
 800dcac:	2301      	movs	r3, #1
 800dcae:	f7fd fe67 	bl	800b980 <disk_write>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <f_lseek+0x1b0>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	755a      	strb	r2, [r3, #21]
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e12c      	b.n	800df1c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	7d1b      	ldrb	r3, [r3, #20]
 800dcc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	7858      	ldrb	r0, [r3, #1]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dcda:	2301      	movs	r3, #1
 800dcdc:	69ba      	ldr	r2, [r7, #24]
 800dcde:	f7fd fe2f 	bl	800b940 <disk_read>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d004      	beq.n	800dcf2 <f_lseek+0x1e0>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	755a      	strb	r2, [r3, #21]
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e114      	b.n	800df1c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	621a      	str	r2, [r3, #32]
 800dcf8:	e10e      	b.n	800df18 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d908      	bls.n	800dd16 <f_lseek+0x204>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	7d1b      	ldrb	r3, [r3, #20]
 800dd08:	f003 0302 	and.w	r3, r3, #2
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd24:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 80a7 	beq.w	800de7c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	895b      	ldrh	r3, [r3, #10]
 800dd32:	025b      	lsls	r3, r3, #9
 800dd34:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01b      	beq.n	800dd74 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	1e5a      	subs	r2, r3, #1
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	1e59      	subs	r1, r3, #1
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d30f      	bcc.n	800dd74 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	1e5a      	subs	r2, r3, #1
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	425b      	negs	r3, r3
 800dd5c:	401a      	ands	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	69db      	ldr	r3, [r3, #28]
 800dd70:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd72:	e022      	b.n	800ddba <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d119      	bne.n	800ddb4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2100      	movs	r1, #0
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fe fb9d 	bl	800c4c4 <create_chain>
 800dd8a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d104      	bne.n	800dd9c <f_lseek+0x28a>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2202      	movs	r2, #2
 800dd96:	755a      	strb	r2, [r3, #21]
 800dd98:	2302      	movs	r3, #2
 800dd9a:	e0bf      	b.n	800df1c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda2:	d104      	bne.n	800ddae <f_lseek+0x29c>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	755a      	strb	r2, [r3, #21]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e0b6      	b.n	800df1c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddb2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddb8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d05d      	beq.n	800de7c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ddc0:	e03a      	b.n	800de38 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	603b      	str	r3, [r7, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	699a      	ldr	r2, [r3, #24]
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	441a      	add	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	7d1b      	ldrb	r3, [r3, #20]
 800ddda:	f003 0302 	and.w	r3, r3, #2
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00b      	beq.n	800ddfa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fb6c 	bl	800c4c4 <create_chain>
 800ddec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ddee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d108      	bne.n	800de06 <f_lseek+0x2f4>
							ofs = 0; break;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	603b      	str	r3, [r7, #0]
 800ddf8:	e022      	b.n	800de40 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fe f967 	bl	800c0d2 <get_fat>
 800de04:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0c:	d104      	bne.n	800de18 <f_lseek+0x306>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	755a      	strb	r2, [r3, #21]
 800de14:	2301      	movs	r3, #1
 800de16:	e081      	b.n	800df1c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d904      	bls.n	800de28 <f_lseek+0x316>
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	695b      	ldr	r3, [r3, #20]
 800de22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de24:	429a      	cmp	r2, r3
 800de26:	d304      	bcc.n	800de32 <f_lseek+0x320>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2202      	movs	r2, #2
 800de2c:	755a      	strb	r2, [r3, #21]
 800de2e:	2302      	movs	r3, #2
 800de30:	e074      	b.n	800df1c <f_lseek+0x40a>
					fp->clust = clst;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de36:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800de38:	683a      	ldr	r2, [r7, #0]
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d8c0      	bhi.n	800ddc2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	699a      	ldr	r2, [r3, #24]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	441a      	add	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de52:	2b00      	cmp	r3, #0
 800de54:	d012      	beq.n	800de7c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe f91a 	bl	800c094 <clust2sect>
 800de60:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	2b00      	cmp	r3, #0
 800de66:	d104      	bne.n	800de72 <f_lseek+0x360>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2202      	movs	r2, #2
 800de6c:	755a      	strb	r2, [r3, #21]
 800de6e:	2302      	movs	r3, #2
 800de70:	e054      	b.n	800df1c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	0a5b      	lsrs	r3, r3, #9
 800de76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de78:	4413      	add	r3, r2
 800de7a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	699a      	ldr	r2, [r3, #24]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	429a      	cmp	r2, r3
 800de86:	d90a      	bls.n	800de9e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699a      	ldr	r2, [r3, #24]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7d1b      	ldrb	r3, [r3, #20]
 800de94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d036      	beq.n	800df18 <f_lseek+0x406>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d031      	beq.n	800df18 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7d1b      	ldrb	r3, [r3, #20]
 800deb8:	b25b      	sxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	da18      	bge.n	800def0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	7858      	ldrb	r0, [r3, #1]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1a      	ldr	r2, [r3, #32]
 800decc:	2301      	movs	r3, #1
 800dece:	f7fd fd57 	bl	800b980 <disk_write>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <f_lseek+0x3d0>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	755a      	strb	r2, [r3, #21]
 800dede:	2301      	movs	r3, #1
 800dee0:	e01c      	b.n	800df1c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	7d1b      	ldrb	r3, [r3, #20]
 800dee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	7858      	ldrb	r0, [r3, #1]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800defa:	2301      	movs	r3, #1
 800defc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800defe:	f7fd fd1f 	bl	800b940 <disk_read>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d004      	beq.n	800df12 <f_lseek+0x400>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	755a      	strb	r2, [r3, #21]
 800df0e:	2301      	movs	r3, #1
 800df10:	e004      	b.n	800df1c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df16:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800df18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3740      	adds	r7, #64	; 0x40
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df24:	b480      	push	{r7}
 800df26:	b087      	sub	sp, #28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4613      	mov	r3, r2
 800df30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df32:	2301      	movs	r3, #1
 800df34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df3a:	4b1f      	ldr	r3, [pc, #124]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df3c:	7a5b      	ldrb	r3, [r3, #9]
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d131      	bne.n	800dfa8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df44:	4b1c      	ldr	r3, [pc, #112]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df46:	7a5b      	ldrb	r3, [r3, #9]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	461a      	mov	r2, r3
 800df4c:	4b1a      	ldr	r3, [pc, #104]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df4e:	2100      	movs	r1, #0
 800df50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df52:	4b19      	ldr	r3, [pc, #100]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df54:	7a5b      	ldrb	r3, [r3, #9]
 800df56:	b2db      	uxtb	r3, r3
 800df58:	4a17      	ldr	r2, [pc, #92]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df62:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df64:	7a5b      	ldrb	r3, [r3, #9]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	461a      	mov	r2, r3
 800df6a:	4b13      	ldr	r3, [pc, #76]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df6c:	4413      	add	r3, r2
 800df6e:	79fa      	ldrb	r2, [r7, #7]
 800df70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df72:	4b11      	ldr	r3, [pc, #68]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df74:	7a5b      	ldrb	r3, [r3, #9]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	b2d1      	uxtb	r1, r2
 800df7c:	4a0e      	ldr	r2, [pc, #56]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df7e:	7251      	strb	r1, [r2, #9]
 800df80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df82:	7dbb      	ldrb	r3, [r7, #22]
 800df84:	3330      	adds	r3, #48	; 0x30
 800df86:	b2da      	uxtb	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3301      	adds	r3, #1
 800df90:	223a      	movs	r2, #58	; 0x3a
 800df92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3302      	adds	r3, #2
 800df98:	222f      	movs	r2, #47	; 0x2f
 800df9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	3303      	adds	r3, #3
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	371c      	adds	r7, #28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	2000173c 	.word	0x2000173c

0800dfbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff ffaa 	bl	800df24 <FATFS_LinkDriverEx>
 800dfd0:	4603      	mov	r3, r0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	490e      	ldr	r1, [pc, #56]	; (800e01c <MX_USB_HOST_Init+0x40>)
 800dfe4:	480e      	ldr	r0, [pc, #56]	; (800e020 <MX_USB_HOST_Init+0x44>)
 800dfe6:	f7fc f819 	bl	800a01c <USBH_Init>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dff0:	f7f3 f996 	bl	8001320 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800dff4:	490b      	ldr	r1, [pc, #44]	; (800e024 <MX_USB_HOST_Init+0x48>)
 800dff6:	480a      	ldr	r0, [pc, #40]	; (800e020 <MX_USB_HOST_Init+0x44>)
 800dff8:	f7fc f89e 	bl	800a138 <USBH_RegisterClass>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e002:	f7f3 f98d 	bl	8001320 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e006:	4806      	ldr	r0, [pc, #24]	; (800e020 <MX_USB_HOST_Init+0x44>)
 800e008:	f7fc f922 	bl	800a250 <USBH_Start>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e012:	f7f3 f985 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e016:	bf00      	nop
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	0800e03d 	.word	0x0800e03d
 800e020:	20001748 	.word	0x20001748
 800e024:	2000003c 	.word	0x2000003c

0800e028 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e02c:	4802      	ldr	r0, [pc, #8]	; (800e038 <MX_USB_HOST_Process+0x10>)
 800e02e:	f7fc f91f 	bl	800a270 <USBH_Process>
}
 800e032:	bf00      	nop
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	20001748 	.word	0x20001748

0800e03c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	460b      	mov	r3, r1
 800e046:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	3b01      	subs	r3, #1
 800e04c:	2b04      	cmp	r3, #4
 800e04e:	d819      	bhi.n	800e084 <USBH_UserProcess+0x48>
 800e050:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <USBH_UserProcess+0x1c>)
 800e052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e056:	bf00      	nop
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	0800e075 	.word	0x0800e075
 800e060:	0800e085 	.word	0x0800e085
 800e064:	0800e07d 	.word	0x0800e07d
 800e068:	0800e06d 	.word	0x0800e06d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <USBH_UserProcess+0x58>)
 800e06e:	2203      	movs	r2, #3
 800e070:	701a      	strb	r2, [r3, #0]
  break;
 800e072:	e008      	b.n	800e086 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e074:	4b07      	ldr	r3, [pc, #28]	; (800e094 <USBH_UserProcess+0x58>)
 800e076:	2202      	movs	r2, #2
 800e078:	701a      	strb	r2, [r3, #0]
  break;
 800e07a:	e004      	b.n	800e086 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e07c:	4b05      	ldr	r3, [pc, #20]	; (800e094 <USBH_UserProcess+0x58>)
 800e07e:	2201      	movs	r2, #1
 800e080:	701a      	strb	r2, [r3, #0]
  break;
 800e082:	e000      	b.n	800e086 <USBH_UserProcess+0x4a>

  default:
  break;
 800e084:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e086:	bf00      	nop
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	20001b20 	.word	0x20001b20

0800e098 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b08a      	sub	sp, #40	; 0x28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0a0:	f107 0314 	add.w	r3, r7, #20
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	605a      	str	r2, [r3, #4]
 800e0aa:	609a      	str	r2, [r3, #8]
 800e0ac:	60da      	str	r2, [r3, #12]
 800e0ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0b8:	d147      	bne.n	800e14a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	613b      	str	r3, [r7, #16]
 800e0be:	4b25      	ldr	r3, [pc, #148]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c2:	4a24      	ldr	r2, [pc, #144]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e0c4:	f043 0301 	orr.w	r3, r3, #1
 800e0c8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0ca:	4b22      	ldr	r3, [pc, #136]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	613b      	str	r3, [r7, #16]
 800e0d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e0d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0e4:	f107 0314 	add.w	r3, r7, #20
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	481b      	ldr	r0, [pc, #108]	; (800e158 <HAL_HCD_MspInit+0xc0>)
 800e0ec:	f7f4 fb80 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e0f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e0f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0fe:	2303      	movs	r3, #3
 800e100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e102:	230a      	movs	r3, #10
 800e104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e106:	f107 0314 	add.w	r3, r7, #20
 800e10a:	4619      	mov	r1, r3
 800e10c:	4812      	ldr	r0, [pc, #72]	; (800e158 <HAL_HCD_MspInit+0xc0>)
 800e10e:	f7f4 fb6f 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e112:	4b10      	ldr	r3, [pc, #64]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e116:	4a0f      	ldr	r2, [pc, #60]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e11c:	6353      	str	r3, [r2, #52]	; 0x34
 800e11e:	2300      	movs	r3, #0
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e126:	4a0b      	ldr	r2, [pc, #44]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e12c:	6453      	str	r3, [r2, #68]	; 0x44
 800e12e:	4b09      	ldr	r3, [pc, #36]	; (800e154 <HAL_HCD_MspInit+0xbc>)
 800e130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e13a:	2200      	movs	r2, #0
 800e13c:	2100      	movs	r1, #0
 800e13e:	2043      	movs	r0, #67	; 0x43
 800e140:	f7f3 fecf 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e144:	2043      	movs	r0, #67	; 0x43
 800e146:	f7f3 fee8 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e14a:	bf00      	nop
 800e14c:	3728      	adds	r7, #40	; 0x28
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	40023800 	.word	0x40023800
 800e158:	40020000 	.word	0x40020000

0800e15c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fc fc5f 	bl	800aa2e <USBH_LL_IncTimer>
}
 800e170:	bf00      	nop
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e186:	4618      	mov	r0, r3
 800e188:	f7fc fc97 	bl	800aaba <USBH_LL_Connect>
}
 800e18c:	bf00      	nop
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fc fca0 	bl	800aae8 <USBH_LL_Disconnect>
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fc fc51 	bl	800aa82 <USBH_LL_PortEnabled>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fc fc51 	bl	800aa9e <USBH_LL_PortDisabled>
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e212:	2b01      	cmp	r3, #1
 800e214:	d12a      	bne.n	800e26c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e216:	4a18      	ldr	r2, [pc, #96]	; (800e278 <USBH_LL_Init+0x74>)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a15      	ldr	r2, [pc, #84]	; (800e278 <USBH_LL_Init+0x74>)
 800e222:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e226:	4b14      	ldr	r3, [pc, #80]	; (800e278 <USBH_LL_Init+0x74>)
 800e228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e22c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e22e:	4b12      	ldr	r3, [pc, #72]	; (800e278 <USBH_LL_Init+0x74>)
 800e230:	2208      	movs	r2, #8
 800e232:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e234:	4b10      	ldr	r3, [pc, #64]	; (800e278 <USBH_LL_Init+0x74>)
 800e236:	2201      	movs	r2, #1
 800e238:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e23a:	4b0f      	ldr	r3, [pc, #60]	; (800e278 <USBH_LL_Init+0x74>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e240:	4b0d      	ldr	r3, [pc, #52]	; (800e278 <USBH_LL_Init+0x74>)
 800e242:	2202      	movs	r2, #2
 800e244:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e246:	4b0c      	ldr	r3, [pc, #48]	; (800e278 <USBH_LL_Init+0x74>)
 800e248:	2200      	movs	r2, #0
 800e24a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e24c:	480a      	ldr	r0, [pc, #40]	; (800e278 <USBH_LL_Init+0x74>)
 800e24e:	f7f4 fccf 	bl	8002bf0 <HAL_HCD_Init>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e258:	f7f3 f862 	bl	8001320 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e25c:	4806      	ldr	r0, [pc, #24]	; (800e278 <USBH_LL_Init+0x74>)
 800e25e:	f7f5 f8b2 	bl	80033c6 <HAL_HCD_GetCurrentFrame>
 800e262:	4603      	mov	r3, r0
 800e264:	4619      	mov	r1, r3
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7fc fbd2 	bl	800aa10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20001b24 	.word	0x20001b24

0800e27c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e284:	2300      	movs	r3, #0
 800e286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e292:	4618      	mov	r0, r3
 800e294:	f7f5 f821 	bl	80032da <HAL_HCD_Start>
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f982 	bl	800e5a8 <USBH_Get_USB_Status>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b084      	sub	sp, #16
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7f5 f829 	bl	8003320 <HAL_HCD_Stop>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 f967 	bl	800e5a8 <USBH_Get_USB_Status>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7f5 f871 	bl	80033e2 <HAL_HCD_GetCurrentSpeed>
 800e300:	4603      	mov	r3, r0
 800e302:	2b02      	cmp	r3, #2
 800e304:	d00c      	beq.n	800e320 <USBH_LL_GetSpeed+0x38>
 800e306:	2b02      	cmp	r3, #2
 800e308:	d80d      	bhi.n	800e326 <USBH_LL_GetSpeed+0x3e>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <USBH_LL_GetSpeed+0x2c>
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d003      	beq.n	800e31a <USBH_LL_GetSpeed+0x32>
 800e312:	e008      	b.n	800e326 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e314:	2300      	movs	r3, #0
 800e316:	73fb      	strb	r3, [r7, #15]
    break;
 800e318:	e008      	b.n	800e32c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e31a:	2301      	movs	r3, #1
 800e31c:	73fb      	strb	r3, [r7, #15]
    break;
 800e31e:	e005      	b.n	800e32c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e320:	2302      	movs	r3, #2
 800e322:	73fb      	strb	r3, [r7, #15]
    break;
 800e324:	e002      	b.n	800e32c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e326:	2301      	movs	r3, #1
 800e328:	73fb      	strb	r3, [r7, #15]
    break;
 800e32a:	bf00      	nop
  }
  return  speed;
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f5 f804 	bl	800335a <HAL_HCD_ResetPort>
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	4618      	mov	r0, r3
 800e35a:	f000 f925 	bl	800e5a8 <USBH_Get_USB_Status>
 800e35e:	4603      	mov	r3, r0
 800e360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e362:	7bbb      	ldrb	r3, [r7, #14]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e37e:	78fa      	ldrb	r2, [r7, #3]
 800e380:	4611      	mov	r1, r2
 800e382:	4618      	mov	r0, r3
 800e384:	f7f5 f80b 	bl	800339e <HAL_HCD_HC_GetXferCount>
 800e388:	4603      	mov	r3, r0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e392:	b590      	push	{r4, r7, lr}
 800e394:	b089      	sub	sp, #36	; 0x24
 800e396:	af04      	add	r7, sp, #16
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	4608      	mov	r0, r1
 800e39c:	4611      	mov	r1, r2
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	70fb      	strb	r3, [r7, #3]
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	70bb      	strb	r3, [r7, #2]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e3ba:	787c      	ldrb	r4, [r7, #1]
 800e3bc:	78ba      	ldrb	r2, [r7, #2]
 800e3be:	78f9      	ldrb	r1, [r7, #3]
 800e3c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3c2:	9302      	str	r3, [sp, #8]
 800e3c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	4623      	mov	r3, r4
 800e3d2:	f7f4 fc6f 	bl	8002cb4 <HAL_HCD_HC_Init>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3da:	7bfb      	ldrb	r3, [r7, #15]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 f8e3 	bl	800e5a8 <USBH_Get_USB_Status>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd90      	pop	{r4, r7, pc}

0800e3f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e400:	2300      	movs	r3, #0
 800e402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e40a:	78fa      	ldrb	r2, [r7, #3]
 800e40c:	4611      	mov	r1, r2
 800e40e:	4618      	mov	r0, r3
 800e410:	f7f4 fcdf 	bl	8002dd2 <HAL_HCD_HC_Halt>
 800e414:	4603      	mov	r3, r0
 800e416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f000 f8c4 	bl	800e5a8 <USBH_Get_USB_Status>
 800e420:	4603      	mov	r3, r0
 800e422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e424:	7bbb      	ldrb	r3, [r7, #14]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e42e:	b590      	push	{r4, r7, lr}
 800e430:	b089      	sub	sp, #36	; 0x24
 800e432:	af04      	add	r7, sp, #16
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	4608      	mov	r0, r1
 800e438:	4611      	mov	r1, r2
 800e43a:	461a      	mov	r2, r3
 800e43c:	4603      	mov	r3, r0
 800e43e:	70fb      	strb	r3, [r7, #3]
 800e440:	460b      	mov	r3, r1
 800e442:	70bb      	strb	r3, [r7, #2]
 800e444:	4613      	mov	r3, r2
 800e446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e448:	2300      	movs	r3, #0
 800e44a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e456:	787c      	ldrb	r4, [r7, #1]
 800e458:	78ba      	ldrb	r2, [r7, #2]
 800e45a:	78f9      	ldrb	r1, [r7, #3]
 800e45c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e460:	9303      	str	r3, [sp, #12]
 800e462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	4623      	mov	r3, r4
 800e472:	f7f4 fcd1 	bl	8002e18 <HAL_HCD_HC_SubmitRequest>
 800e476:	4603      	mov	r3, r0
 800e478:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e47a:	7bfb      	ldrb	r3, [r7, #15]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f893 	bl	800e5a8 <USBH_Get_USB_Status>
 800e482:	4603      	mov	r3, r0
 800e484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e486:	7bbb      	ldrb	r3, [r7, #14]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3714      	adds	r7, #20
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd90      	pop	{r4, r7, pc}

0800e490 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4a2:	78fa      	ldrb	r2, [r7, #3]
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7f4 ff65 	bl	8003376 <HAL_HCD_HC_GetURBState>
 800e4ac:	4603      	mov	r3, r0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e4c2:	20c8      	movs	r0, #200	; 0xc8
 800e4c4:	f7f3 fc0e 	bl	8001ce4 <HAL_Delay>
  return USBH_OK;
 800e4c8:	2300      	movs	r3, #0
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b085      	sub	sp, #20
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	70fb      	strb	r3, [r7, #3]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4e8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e4ea:	78fb      	ldrb	r3, [r7, #3]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	212c      	movs	r1, #44	; 0x2c
 800e4f0:	fb01 f303 	mul.w	r3, r1, r3
 800e4f4:	4413      	add	r3, r2
 800e4f6:	333b      	adds	r3, #59	; 0x3b
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d009      	beq.n	800e512 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	212c      	movs	r1, #44	; 0x2c
 800e504:	fb01 f303 	mul.w	r3, r1, r3
 800e508:	4413      	add	r3, r2
 800e50a:	3354      	adds	r3, #84	; 0x54
 800e50c:	78ba      	ldrb	r2, [r7, #2]
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	e008      	b.n	800e524 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e512:	78fb      	ldrb	r3, [r7, #3]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	212c      	movs	r1, #44	; 0x2c
 800e518:	fb01 f303 	mul.w	r3, r1, r3
 800e51c:	4413      	add	r3, r2
 800e51e:	3355      	adds	r3, #85	; 0x55
 800e520:	78ba      	ldrb	r2, [r7, #2]
 800e522:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e532:	b480      	push	{r7}
 800e534:	b085      	sub	sp, #20
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e548:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e54a:	78fb      	ldrb	r3, [r7, #3]
 800e54c:	68ba      	ldr	r2, [r7, #8]
 800e54e:	212c      	movs	r1, #44	; 0x2c
 800e550:	fb01 f303 	mul.w	r3, r1, r3
 800e554:	4413      	add	r3, r2
 800e556:	333b      	adds	r3, #59	; 0x3b
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d009      	beq.n	800e572 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	212c      	movs	r1, #44	; 0x2c
 800e564:	fb01 f303 	mul.w	r3, r1, r3
 800e568:	4413      	add	r3, r2
 800e56a:	3354      	adds	r3, #84	; 0x54
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	73fb      	strb	r3, [r7, #15]
 800e570:	e008      	b.n	800e584 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e572:	78fb      	ldrb	r3, [r7, #3]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	212c      	movs	r1, #44	; 0x2c
 800e578:	fb01 f303 	mul.w	r3, r1, r3
 800e57c:	4413      	add	r3, r2
 800e57e:	3355      	adds	r3, #85	; 0x55
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e584:	7bfb      	ldrb	r3, [r7, #15]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr

0800e592 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b082      	sub	sp, #8
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7f3 fba2 	bl	8001ce4 <HAL_Delay>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5b6:	79fb      	ldrb	r3, [r7, #7]
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d817      	bhi.n	800e5ec <USBH_Get_USB_Status+0x44>
 800e5bc:	a201      	add	r2, pc, #4	; (adr r2, 800e5c4 <USBH_Get_USB_Status+0x1c>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e5d5 	.word	0x0800e5d5
 800e5c8:	0800e5db 	.word	0x0800e5db
 800e5cc:	0800e5e1 	.word	0x0800e5e1
 800e5d0:	0800e5e7 	.word	0x0800e5e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5d8:	e00b      	b.n	800e5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e5da:	2302      	movs	r3, #2
 800e5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e5de:	e008      	b.n	800e5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e4:	e005      	b.n	800e5f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e5e6:	2302      	movs	r3, #2
 800e5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ea:	e002      	b.n	800e5f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f0:	bf00      	nop
  }
  return usb_status;
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3714      	adds	r7, #20
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <__errno>:
 800e600:	4b01      	ldr	r3, [pc, #4]	; (800e608 <__errno+0x8>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	2000005c 	.word	0x2000005c

0800e60c <__libc_init_array>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	4d0d      	ldr	r5, [pc, #52]	; (800e644 <__libc_init_array+0x38>)
 800e610:	4c0d      	ldr	r4, [pc, #52]	; (800e648 <__libc_init_array+0x3c>)
 800e612:	1b64      	subs	r4, r4, r5
 800e614:	10a4      	asrs	r4, r4, #2
 800e616:	2600      	movs	r6, #0
 800e618:	42a6      	cmp	r6, r4
 800e61a:	d109      	bne.n	800e630 <__libc_init_array+0x24>
 800e61c:	4d0b      	ldr	r5, [pc, #44]	; (800e64c <__libc_init_array+0x40>)
 800e61e:	4c0c      	ldr	r4, [pc, #48]	; (800e650 <__libc_init_array+0x44>)
 800e620:	f000 fc9e 	bl	800ef60 <_init>
 800e624:	1b64      	subs	r4, r4, r5
 800e626:	10a4      	asrs	r4, r4, #2
 800e628:	2600      	movs	r6, #0
 800e62a:	42a6      	cmp	r6, r4
 800e62c:	d105      	bne.n	800e63a <__libc_init_array+0x2e>
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	f855 3b04 	ldr.w	r3, [r5], #4
 800e634:	4798      	blx	r3
 800e636:	3601      	adds	r6, #1
 800e638:	e7ee      	b.n	800e618 <__libc_init_array+0xc>
 800e63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e63e:	4798      	blx	r3
 800e640:	3601      	adds	r6, #1
 800e642:	e7f2      	b.n	800e62a <__libc_init_array+0x1e>
 800e644:	0800f1c0 	.word	0x0800f1c0
 800e648:	0800f1c0 	.word	0x0800f1c0
 800e64c:	0800f1c0 	.word	0x0800f1c0
 800e650:	0800f1c4 	.word	0x0800f1c4

0800e654 <malloc>:
 800e654:	4b02      	ldr	r3, [pc, #8]	; (800e660 <malloc+0xc>)
 800e656:	4601      	mov	r1, r0
 800e658:	6818      	ldr	r0, [r3, #0]
 800e65a:	f000 b88d 	b.w	800e778 <_malloc_r>
 800e65e:	bf00      	nop
 800e660:	2000005c 	.word	0x2000005c

0800e664 <free>:
 800e664:	4b02      	ldr	r3, [pc, #8]	; (800e670 <free+0xc>)
 800e666:	4601      	mov	r1, r0
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	f000 b819 	b.w	800e6a0 <_free_r>
 800e66e:	bf00      	nop
 800e670:	2000005c 	.word	0x2000005c

0800e674 <memcpy>:
 800e674:	440a      	add	r2, r1
 800e676:	4291      	cmp	r1, r2
 800e678:	f100 33ff 	add.w	r3, r0, #4294967295
 800e67c:	d100      	bne.n	800e680 <memcpy+0xc>
 800e67e:	4770      	bx	lr
 800e680:	b510      	push	{r4, lr}
 800e682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e68a:	4291      	cmp	r1, r2
 800e68c:	d1f9      	bne.n	800e682 <memcpy+0xe>
 800e68e:	bd10      	pop	{r4, pc}

0800e690 <memset>:
 800e690:	4402      	add	r2, r0
 800e692:	4603      	mov	r3, r0
 800e694:	4293      	cmp	r3, r2
 800e696:	d100      	bne.n	800e69a <memset+0xa>
 800e698:	4770      	bx	lr
 800e69a:	f803 1b01 	strb.w	r1, [r3], #1
 800e69e:	e7f9      	b.n	800e694 <memset+0x4>

0800e6a0 <_free_r>:
 800e6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	d044      	beq.n	800e730 <_free_r+0x90>
 800e6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6aa:	9001      	str	r0, [sp, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f1a1 0404 	sub.w	r4, r1, #4
 800e6b2:	bfb8      	it	lt
 800e6b4:	18e4      	addlt	r4, r4, r3
 800e6b6:	f000 f903 	bl	800e8c0 <__malloc_lock>
 800e6ba:	4a1e      	ldr	r2, [pc, #120]	; (800e734 <_free_r+0x94>)
 800e6bc:	9801      	ldr	r0, [sp, #4]
 800e6be:	6813      	ldr	r3, [r2, #0]
 800e6c0:	b933      	cbnz	r3, 800e6d0 <_free_r+0x30>
 800e6c2:	6063      	str	r3, [r4, #4]
 800e6c4:	6014      	str	r4, [r2, #0]
 800e6c6:	b003      	add	sp, #12
 800e6c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6cc:	f000 b8fe 	b.w	800e8cc <__malloc_unlock>
 800e6d0:	42a3      	cmp	r3, r4
 800e6d2:	d908      	bls.n	800e6e6 <_free_r+0x46>
 800e6d4:	6825      	ldr	r5, [r4, #0]
 800e6d6:	1961      	adds	r1, r4, r5
 800e6d8:	428b      	cmp	r3, r1
 800e6da:	bf01      	itttt	eq
 800e6dc:	6819      	ldreq	r1, [r3, #0]
 800e6de:	685b      	ldreq	r3, [r3, #4]
 800e6e0:	1949      	addeq	r1, r1, r5
 800e6e2:	6021      	streq	r1, [r4, #0]
 800e6e4:	e7ed      	b.n	800e6c2 <_free_r+0x22>
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	b10b      	cbz	r3, 800e6f0 <_free_r+0x50>
 800e6ec:	42a3      	cmp	r3, r4
 800e6ee:	d9fa      	bls.n	800e6e6 <_free_r+0x46>
 800e6f0:	6811      	ldr	r1, [r2, #0]
 800e6f2:	1855      	adds	r5, r2, r1
 800e6f4:	42a5      	cmp	r5, r4
 800e6f6:	d10b      	bne.n	800e710 <_free_r+0x70>
 800e6f8:	6824      	ldr	r4, [r4, #0]
 800e6fa:	4421      	add	r1, r4
 800e6fc:	1854      	adds	r4, r2, r1
 800e6fe:	42a3      	cmp	r3, r4
 800e700:	6011      	str	r1, [r2, #0]
 800e702:	d1e0      	bne.n	800e6c6 <_free_r+0x26>
 800e704:	681c      	ldr	r4, [r3, #0]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	6053      	str	r3, [r2, #4]
 800e70a:	4421      	add	r1, r4
 800e70c:	6011      	str	r1, [r2, #0]
 800e70e:	e7da      	b.n	800e6c6 <_free_r+0x26>
 800e710:	d902      	bls.n	800e718 <_free_r+0x78>
 800e712:	230c      	movs	r3, #12
 800e714:	6003      	str	r3, [r0, #0]
 800e716:	e7d6      	b.n	800e6c6 <_free_r+0x26>
 800e718:	6825      	ldr	r5, [r4, #0]
 800e71a:	1961      	adds	r1, r4, r5
 800e71c:	428b      	cmp	r3, r1
 800e71e:	bf04      	itt	eq
 800e720:	6819      	ldreq	r1, [r3, #0]
 800e722:	685b      	ldreq	r3, [r3, #4]
 800e724:	6063      	str	r3, [r4, #4]
 800e726:	bf04      	itt	eq
 800e728:	1949      	addeq	r1, r1, r5
 800e72a:	6021      	streq	r1, [r4, #0]
 800e72c:	6054      	str	r4, [r2, #4]
 800e72e:	e7ca      	b.n	800e6c6 <_free_r+0x26>
 800e730:	b003      	add	sp, #12
 800e732:	bd30      	pop	{r4, r5, pc}
 800e734:	20001e28 	.word	0x20001e28

0800e738 <sbrk_aligned>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	4e0e      	ldr	r6, [pc, #56]	; (800e774 <sbrk_aligned+0x3c>)
 800e73c:	460c      	mov	r4, r1
 800e73e:	6831      	ldr	r1, [r6, #0]
 800e740:	4605      	mov	r5, r0
 800e742:	b911      	cbnz	r1, 800e74a <sbrk_aligned+0x12>
 800e744:	f000 f88c 	bl	800e860 <_sbrk_r>
 800e748:	6030      	str	r0, [r6, #0]
 800e74a:	4621      	mov	r1, r4
 800e74c:	4628      	mov	r0, r5
 800e74e:	f000 f887 	bl	800e860 <_sbrk_r>
 800e752:	1c43      	adds	r3, r0, #1
 800e754:	d00a      	beq.n	800e76c <sbrk_aligned+0x34>
 800e756:	1cc4      	adds	r4, r0, #3
 800e758:	f024 0403 	bic.w	r4, r4, #3
 800e75c:	42a0      	cmp	r0, r4
 800e75e:	d007      	beq.n	800e770 <sbrk_aligned+0x38>
 800e760:	1a21      	subs	r1, r4, r0
 800e762:	4628      	mov	r0, r5
 800e764:	f000 f87c 	bl	800e860 <_sbrk_r>
 800e768:	3001      	adds	r0, #1
 800e76a:	d101      	bne.n	800e770 <sbrk_aligned+0x38>
 800e76c:	f04f 34ff 	mov.w	r4, #4294967295
 800e770:	4620      	mov	r0, r4
 800e772:	bd70      	pop	{r4, r5, r6, pc}
 800e774:	20001e2c 	.word	0x20001e2c

0800e778 <_malloc_r>:
 800e778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e77c:	1ccd      	adds	r5, r1, #3
 800e77e:	f025 0503 	bic.w	r5, r5, #3
 800e782:	3508      	adds	r5, #8
 800e784:	2d0c      	cmp	r5, #12
 800e786:	bf38      	it	cc
 800e788:	250c      	movcc	r5, #12
 800e78a:	2d00      	cmp	r5, #0
 800e78c:	4607      	mov	r7, r0
 800e78e:	db01      	blt.n	800e794 <_malloc_r+0x1c>
 800e790:	42a9      	cmp	r1, r5
 800e792:	d905      	bls.n	800e7a0 <_malloc_r+0x28>
 800e794:	230c      	movs	r3, #12
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	2600      	movs	r6, #0
 800e79a:	4630      	mov	r0, r6
 800e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a0:	4e2e      	ldr	r6, [pc, #184]	; (800e85c <_malloc_r+0xe4>)
 800e7a2:	f000 f88d 	bl	800e8c0 <__malloc_lock>
 800e7a6:	6833      	ldr	r3, [r6, #0]
 800e7a8:	461c      	mov	r4, r3
 800e7aa:	bb34      	cbnz	r4, 800e7fa <_malloc_r+0x82>
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7ff ffc2 	bl	800e738 <sbrk_aligned>
 800e7b4:	1c43      	adds	r3, r0, #1
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	d14d      	bne.n	800e856 <_malloc_r+0xde>
 800e7ba:	6834      	ldr	r4, [r6, #0]
 800e7bc:	4626      	mov	r6, r4
 800e7be:	2e00      	cmp	r6, #0
 800e7c0:	d140      	bne.n	800e844 <_malloc_r+0xcc>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	eb04 0803 	add.w	r8, r4, r3
 800e7cc:	f000 f848 	bl	800e860 <_sbrk_r>
 800e7d0:	4580      	cmp	r8, r0
 800e7d2:	d13a      	bne.n	800e84a <_malloc_r+0xd2>
 800e7d4:	6821      	ldr	r1, [r4, #0]
 800e7d6:	3503      	adds	r5, #3
 800e7d8:	1a6d      	subs	r5, r5, r1
 800e7da:	f025 0503 	bic.w	r5, r5, #3
 800e7de:	3508      	adds	r5, #8
 800e7e0:	2d0c      	cmp	r5, #12
 800e7e2:	bf38      	it	cc
 800e7e4:	250c      	movcc	r5, #12
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f7ff ffa5 	bl	800e738 <sbrk_aligned>
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d02b      	beq.n	800e84a <_malloc_r+0xd2>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	442b      	add	r3, r5
 800e7f6:	6023      	str	r3, [r4, #0]
 800e7f8:	e00e      	b.n	800e818 <_malloc_r+0xa0>
 800e7fa:	6822      	ldr	r2, [r4, #0]
 800e7fc:	1b52      	subs	r2, r2, r5
 800e7fe:	d41e      	bmi.n	800e83e <_malloc_r+0xc6>
 800e800:	2a0b      	cmp	r2, #11
 800e802:	d916      	bls.n	800e832 <_malloc_r+0xba>
 800e804:	1961      	adds	r1, r4, r5
 800e806:	42a3      	cmp	r3, r4
 800e808:	6025      	str	r5, [r4, #0]
 800e80a:	bf18      	it	ne
 800e80c:	6059      	strne	r1, [r3, #4]
 800e80e:	6863      	ldr	r3, [r4, #4]
 800e810:	bf08      	it	eq
 800e812:	6031      	streq	r1, [r6, #0]
 800e814:	5162      	str	r2, [r4, r5]
 800e816:	604b      	str	r3, [r1, #4]
 800e818:	4638      	mov	r0, r7
 800e81a:	f104 060b 	add.w	r6, r4, #11
 800e81e:	f000 f855 	bl	800e8cc <__malloc_unlock>
 800e822:	f026 0607 	bic.w	r6, r6, #7
 800e826:	1d23      	adds	r3, r4, #4
 800e828:	1af2      	subs	r2, r6, r3
 800e82a:	d0b6      	beq.n	800e79a <_malloc_r+0x22>
 800e82c:	1b9b      	subs	r3, r3, r6
 800e82e:	50a3      	str	r3, [r4, r2]
 800e830:	e7b3      	b.n	800e79a <_malloc_r+0x22>
 800e832:	6862      	ldr	r2, [r4, #4]
 800e834:	42a3      	cmp	r3, r4
 800e836:	bf0c      	ite	eq
 800e838:	6032      	streq	r2, [r6, #0]
 800e83a:	605a      	strne	r2, [r3, #4]
 800e83c:	e7ec      	b.n	800e818 <_malloc_r+0xa0>
 800e83e:	4623      	mov	r3, r4
 800e840:	6864      	ldr	r4, [r4, #4]
 800e842:	e7b2      	b.n	800e7aa <_malloc_r+0x32>
 800e844:	4634      	mov	r4, r6
 800e846:	6876      	ldr	r6, [r6, #4]
 800e848:	e7b9      	b.n	800e7be <_malloc_r+0x46>
 800e84a:	230c      	movs	r3, #12
 800e84c:	603b      	str	r3, [r7, #0]
 800e84e:	4638      	mov	r0, r7
 800e850:	f000 f83c 	bl	800e8cc <__malloc_unlock>
 800e854:	e7a1      	b.n	800e79a <_malloc_r+0x22>
 800e856:	6025      	str	r5, [r4, #0]
 800e858:	e7de      	b.n	800e818 <_malloc_r+0xa0>
 800e85a:	bf00      	nop
 800e85c:	20001e28 	.word	0x20001e28

0800e860 <_sbrk_r>:
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	4d06      	ldr	r5, [pc, #24]	; (800e87c <_sbrk_r+0x1c>)
 800e864:	2300      	movs	r3, #0
 800e866:	4604      	mov	r4, r0
 800e868:	4608      	mov	r0, r1
 800e86a:	602b      	str	r3, [r5, #0]
 800e86c:	f7f2 ff4c 	bl	8001708 <_sbrk>
 800e870:	1c43      	adds	r3, r0, #1
 800e872:	d102      	bne.n	800e87a <_sbrk_r+0x1a>
 800e874:	682b      	ldr	r3, [r5, #0]
 800e876:	b103      	cbz	r3, 800e87a <_sbrk_r+0x1a>
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	bd38      	pop	{r3, r4, r5, pc}
 800e87c:	20001e30 	.word	0x20001e30

0800e880 <siprintf>:
 800e880:	b40e      	push	{r1, r2, r3}
 800e882:	b500      	push	{lr}
 800e884:	b09c      	sub	sp, #112	; 0x70
 800e886:	ab1d      	add	r3, sp, #116	; 0x74
 800e888:	9002      	str	r0, [sp, #8]
 800e88a:	9006      	str	r0, [sp, #24]
 800e88c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e890:	4809      	ldr	r0, [pc, #36]	; (800e8b8 <siprintf+0x38>)
 800e892:	9107      	str	r1, [sp, #28]
 800e894:	9104      	str	r1, [sp, #16]
 800e896:	4909      	ldr	r1, [pc, #36]	; (800e8bc <siprintf+0x3c>)
 800e898:	f853 2b04 	ldr.w	r2, [r3], #4
 800e89c:	9105      	str	r1, [sp, #20]
 800e89e:	6800      	ldr	r0, [r0, #0]
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	a902      	add	r1, sp, #8
 800e8a4:	f000 f874 	bl	800e990 <_svfiprintf_r>
 800e8a8:	9b02      	ldr	r3, [sp, #8]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
 800e8ae:	b01c      	add	sp, #112	; 0x70
 800e8b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8b4:	b003      	add	sp, #12
 800e8b6:	4770      	bx	lr
 800e8b8:	2000005c 	.word	0x2000005c
 800e8bc:	ffff0208 	.word	0xffff0208

0800e8c0 <__malloc_lock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	; (800e8c8 <__malloc_lock+0x8>)
 800e8c2:	f000 baf9 	b.w	800eeb8 <__retarget_lock_acquire_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	20001e34 	.word	0x20001e34

0800e8cc <__malloc_unlock>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	; (800e8d4 <__malloc_unlock+0x8>)
 800e8ce:	f000 baf4 	b.w	800eeba <__retarget_lock_release_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	20001e34 	.word	0x20001e34

0800e8d8 <__ssputs_r>:
 800e8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8dc:	688e      	ldr	r6, [r1, #8]
 800e8de:	429e      	cmp	r6, r3
 800e8e0:	4682      	mov	sl, r0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4690      	mov	r8, r2
 800e8e6:	461f      	mov	r7, r3
 800e8e8:	d838      	bhi.n	800e95c <__ssputs_r+0x84>
 800e8ea:	898a      	ldrh	r2, [r1, #12]
 800e8ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8f0:	d032      	beq.n	800e958 <__ssputs_r+0x80>
 800e8f2:	6825      	ldr	r5, [r4, #0]
 800e8f4:	6909      	ldr	r1, [r1, #16]
 800e8f6:	eba5 0901 	sub.w	r9, r5, r1
 800e8fa:	6965      	ldr	r5, [r4, #20]
 800e8fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e904:	3301      	adds	r3, #1
 800e906:	444b      	add	r3, r9
 800e908:	106d      	asrs	r5, r5, #1
 800e90a:	429d      	cmp	r5, r3
 800e90c:	bf38      	it	cc
 800e90e:	461d      	movcc	r5, r3
 800e910:	0553      	lsls	r3, r2, #21
 800e912:	d531      	bpl.n	800e978 <__ssputs_r+0xa0>
 800e914:	4629      	mov	r1, r5
 800e916:	f7ff ff2f 	bl	800e778 <_malloc_r>
 800e91a:	4606      	mov	r6, r0
 800e91c:	b950      	cbnz	r0, 800e934 <__ssputs_r+0x5c>
 800e91e:	230c      	movs	r3, #12
 800e920:	f8ca 3000 	str.w	r3, [sl]
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e92a:	81a3      	strh	r3, [r4, #12]
 800e92c:	f04f 30ff 	mov.w	r0, #4294967295
 800e930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	464a      	mov	r2, r9
 800e938:	f7ff fe9c 	bl	800e674 <memcpy>
 800e93c:	89a3      	ldrh	r3, [r4, #12]
 800e93e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e946:	81a3      	strh	r3, [r4, #12]
 800e948:	6126      	str	r6, [r4, #16]
 800e94a:	6165      	str	r5, [r4, #20]
 800e94c:	444e      	add	r6, r9
 800e94e:	eba5 0509 	sub.w	r5, r5, r9
 800e952:	6026      	str	r6, [r4, #0]
 800e954:	60a5      	str	r5, [r4, #8]
 800e956:	463e      	mov	r6, r7
 800e958:	42be      	cmp	r6, r7
 800e95a:	d900      	bls.n	800e95e <__ssputs_r+0x86>
 800e95c:	463e      	mov	r6, r7
 800e95e:	6820      	ldr	r0, [r4, #0]
 800e960:	4632      	mov	r2, r6
 800e962:	4641      	mov	r1, r8
 800e964:	f000 faaa 	bl	800eebc <memmove>
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	1b9b      	subs	r3, r3, r6
 800e96c:	60a3      	str	r3, [r4, #8]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	4433      	add	r3, r6
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	2000      	movs	r0, #0
 800e976:	e7db      	b.n	800e930 <__ssputs_r+0x58>
 800e978:	462a      	mov	r2, r5
 800e97a:	f000 fab9 	bl	800eef0 <_realloc_r>
 800e97e:	4606      	mov	r6, r0
 800e980:	2800      	cmp	r0, #0
 800e982:	d1e1      	bne.n	800e948 <__ssputs_r+0x70>
 800e984:	6921      	ldr	r1, [r4, #16]
 800e986:	4650      	mov	r0, sl
 800e988:	f7ff fe8a 	bl	800e6a0 <_free_r>
 800e98c:	e7c7      	b.n	800e91e <__ssputs_r+0x46>
	...

0800e990 <_svfiprintf_r>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	4698      	mov	r8, r3
 800e996:	898b      	ldrh	r3, [r1, #12]
 800e998:	061b      	lsls	r3, r3, #24
 800e99a:	b09d      	sub	sp, #116	; 0x74
 800e99c:	4607      	mov	r7, r0
 800e99e:	460d      	mov	r5, r1
 800e9a0:	4614      	mov	r4, r2
 800e9a2:	d50e      	bpl.n	800e9c2 <_svfiprintf_r+0x32>
 800e9a4:	690b      	ldr	r3, [r1, #16]
 800e9a6:	b963      	cbnz	r3, 800e9c2 <_svfiprintf_r+0x32>
 800e9a8:	2140      	movs	r1, #64	; 0x40
 800e9aa:	f7ff fee5 	bl	800e778 <_malloc_r>
 800e9ae:	6028      	str	r0, [r5, #0]
 800e9b0:	6128      	str	r0, [r5, #16]
 800e9b2:	b920      	cbnz	r0, 800e9be <_svfiprintf_r+0x2e>
 800e9b4:	230c      	movs	r3, #12
 800e9b6:	603b      	str	r3, [r7, #0]
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	e0d1      	b.n	800eb62 <_svfiprintf_r+0x1d2>
 800e9be:	2340      	movs	r3, #64	; 0x40
 800e9c0:	616b      	str	r3, [r5, #20]
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9c6:	2320      	movs	r3, #32
 800e9c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9d0:	2330      	movs	r3, #48	; 0x30
 800e9d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb7c <_svfiprintf_r+0x1ec>
 800e9d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9da:	f04f 0901 	mov.w	r9, #1
 800e9de:	4623      	mov	r3, r4
 800e9e0:	469a      	mov	sl, r3
 800e9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9e6:	b10a      	cbz	r2, 800e9ec <_svfiprintf_r+0x5c>
 800e9e8:	2a25      	cmp	r2, #37	; 0x25
 800e9ea:	d1f9      	bne.n	800e9e0 <_svfiprintf_r+0x50>
 800e9ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e9f0:	d00b      	beq.n	800ea0a <_svfiprintf_r+0x7a>
 800e9f2:	465b      	mov	r3, fp
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	f7ff ff6d 	bl	800e8d8 <__ssputs_r>
 800e9fe:	3001      	adds	r0, #1
 800ea00:	f000 80aa 	beq.w	800eb58 <_svfiprintf_r+0x1c8>
 800ea04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea06:	445a      	add	r2, fp
 800ea08:	9209      	str	r2, [sp, #36]	; 0x24
 800ea0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f000 80a2 	beq.w	800eb58 <_svfiprintf_r+0x1c8>
 800ea14:	2300      	movs	r3, #0
 800ea16:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea1e:	f10a 0a01 	add.w	sl, sl, #1
 800ea22:	9304      	str	r3, [sp, #16]
 800ea24:	9307      	str	r3, [sp, #28]
 800ea26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea2c:	4654      	mov	r4, sl
 800ea2e:	2205      	movs	r2, #5
 800ea30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea34:	4851      	ldr	r0, [pc, #324]	; (800eb7c <_svfiprintf_r+0x1ec>)
 800ea36:	f7f1 fbcb 	bl	80001d0 <memchr>
 800ea3a:	9a04      	ldr	r2, [sp, #16]
 800ea3c:	b9d8      	cbnz	r0, 800ea76 <_svfiprintf_r+0xe6>
 800ea3e:	06d0      	lsls	r0, r2, #27
 800ea40:	bf44      	itt	mi
 800ea42:	2320      	movmi	r3, #32
 800ea44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea48:	0711      	lsls	r1, r2, #28
 800ea4a:	bf44      	itt	mi
 800ea4c:	232b      	movmi	r3, #43	; 0x2b
 800ea4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea52:	f89a 3000 	ldrb.w	r3, [sl]
 800ea56:	2b2a      	cmp	r3, #42	; 0x2a
 800ea58:	d015      	beq.n	800ea86 <_svfiprintf_r+0xf6>
 800ea5a:	9a07      	ldr	r2, [sp, #28]
 800ea5c:	4654      	mov	r4, sl
 800ea5e:	2000      	movs	r0, #0
 800ea60:	f04f 0c0a 	mov.w	ip, #10
 800ea64:	4621      	mov	r1, r4
 800ea66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea6a:	3b30      	subs	r3, #48	; 0x30
 800ea6c:	2b09      	cmp	r3, #9
 800ea6e:	d94e      	bls.n	800eb0e <_svfiprintf_r+0x17e>
 800ea70:	b1b0      	cbz	r0, 800eaa0 <_svfiprintf_r+0x110>
 800ea72:	9207      	str	r2, [sp, #28]
 800ea74:	e014      	b.n	800eaa0 <_svfiprintf_r+0x110>
 800ea76:	eba0 0308 	sub.w	r3, r0, r8
 800ea7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	9304      	str	r3, [sp, #16]
 800ea82:	46a2      	mov	sl, r4
 800ea84:	e7d2      	b.n	800ea2c <_svfiprintf_r+0x9c>
 800ea86:	9b03      	ldr	r3, [sp, #12]
 800ea88:	1d19      	adds	r1, r3, #4
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	9103      	str	r1, [sp, #12]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bfbb      	ittet	lt
 800ea92:	425b      	neglt	r3, r3
 800ea94:	f042 0202 	orrlt.w	r2, r2, #2
 800ea98:	9307      	strge	r3, [sp, #28]
 800ea9a:	9307      	strlt	r3, [sp, #28]
 800ea9c:	bfb8      	it	lt
 800ea9e:	9204      	strlt	r2, [sp, #16]
 800eaa0:	7823      	ldrb	r3, [r4, #0]
 800eaa2:	2b2e      	cmp	r3, #46	; 0x2e
 800eaa4:	d10c      	bne.n	800eac0 <_svfiprintf_r+0x130>
 800eaa6:	7863      	ldrb	r3, [r4, #1]
 800eaa8:	2b2a      	cmp	r3, #42	; 0x2a
 800eaaa:	d135      	bne.n	800eb18 <_svfiprintf_r+0x188>
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	1d1a      	adds	r2, r3, #4
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	9203      	str	r2, [sp, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bfb8      	it	lt
 800eab8:	f04f 33ff 	movlt.w	r3, #4294967295
 800eabc:	3402      	adds	r4, #2
 800eabe:	9305      	str	r3, [sp, #20]
 800eac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb8c <_svfiprintf_r+0x1fc>
 800eac4:	7821      	ldrb	r1, [r4, #0]
 800eac6:	2203      	movs	r2, #3
 800eac8:	4650      	mov	r0, sl
 800eaca:	f7f1 fb81 	bl	80001d0 <memchr>
 800eace:	b140      	cbz	r0, 800eae2 <_svfiprintf_r+0x152>
 800ead0:	2340      	movs	r3, #64	; 0x40
 800ead2:	eba0 000a 	sub.w	r0, r0, sl
 800ead6:	fa03 f000 	lsl.w	r0, r3, r0
 800eada:	9b04      	ldr	r3, [sp, #16]
 800eadc:	4303      	orrs	r3, r0
 800eade:	3401      	adds	r4, #1
 800eae0:	9304      	str	r3, [sp, #16]
 800eae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eae6:	4826      	ldr	r0, [pc, #152]	; (800eb80 <_svfiprintf_r+0x1f0>)
 800eae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eaec:	2206      	movs	r2, #6
 800eaee:	f7f1 fb6f 	bl	80001d0 <memchr>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d038      	beq.n	800eb68 <_svfiprintf_r+0x1d8>
 800eaf6:	4b23      	ldr	r3, [pc, #140]	; (800eb84 <_svfiprintf_r+0x1f4>)
 800eaf8:	bb1b      	cbnz	r3, 800eb42 <_svfiprintf_r+0x1b2>
 800eafa:	9b03      	ldr	r3, [sp, #12]
 800eafc:	3307      	adds	r3, #7
 800eafe:	f023 0307 	bic.w	r3, r3, #7
 800eb02:	3308      	adds	r3, #8
 800eb04:	9303      	str	r3, [sp, #12]
 800eb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb08:	4433      	add	r3, r6
 800eb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb0c:	e767      	b.n	800e9de <_svfiprintf_r+0x4e>
 800eb0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb12:	460c      	mov	r4, r1
 800eb14:	2001      	movs	r0, #1
 800eb16:	e7a5      	b.n	800ea64 <_svfiprintf_r+0xd4>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	3401      	adds	r4, #1
 800eb1c:	9305      	str	r3, [sp, #20]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	f04f 0c0a 	mov.w	ip, #10
 800eb24:	4620      	mov	r0, r4
 800eb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb2a:	3a30      	subs	r2, #48	; 0x30
 800eb2c:	2a09      	cmp	r2, #9
 800eb2e:	d903      	bls.n	800eb38 <_svfiprintf_r+0x1a8>
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d0c5      	beq.n	800eac0 <_svfiprintf_r+0x130>
 800eb34:	9105      	str	r1, [sp, #20]
 800eb36:	e7c3      	b.n	800eac0 <_svfiprintf_r+0x130>
 800eb38:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e7f0      	b.n	800eb24 <_svfiprintf_r+0x194>
 800eb42:	ab03      	add	r3, sp, #12
 800eb44:	9300      	str	r3, [sp, #0]
 800eb46:	462a      	mov	r2, r5
 800eb48:	4b0f      	ldr	r3, [pc, #60]	; (800eb88 <_svfiprintf_r+0x1f8>)
 800eb4a:	a904      	add	r1, sp, #16
 800eb4c:	4638      	mov	r0, r7
 800eb4e:	f3af 8000 	nop.w
 800eb52:	1c42      	adds	r2, r0, #1
 800eb54:	4606      	mov	r6, r0
 800eb56:	d1d6      	bne.n	800eb06 <_svfiprintf_r+0x176>
 800eb58:	89ab      	ldrh	r3, [r5, #12]
 800eb5a:	065b      	lsls	r3, r3, #25
 800eb5c:	f53f af2c 	bmi.w	800e9b8 <_svfiprintf_r+0x28>
 800eb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb62:	b01d      	add	sp, #116	; 0x74
 800eb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb68:	ab03      	add	r3, sp, #12
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	462a      	mov	r2, r5
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <_svfiprintf_r+0x1f8>)
 800eb70:	a904      	add	r1, sp, #16
 800eb72:	4638      	mov	r0, r7
 800eb74:	f000 f87a 	bl	800ec6c <_printf_i>
 800eb78:	e7eb      	b.n	800eb52 <_svfiprintf_r+0x1c2>
 800eb7a:	bf00      	nop
 800eb7c:	0800f184 	.word	0x0800f184
 800eb80:	0800f18e 	.word	0x0800f18e
 800eb84:	00000000 	.word	0x00000000
 800eb88:	0800e8d9 	.word	0x0800e8d9
 800eb8c:	0800f18a 	.word	0x0800f18a

0800eb90 <_printf_common>:
 800eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb94:	4616      	mov	r6, r2
 800eb96:	4699      	mov	r9, r3
 800eb98:	688a      	ldr	r2, [r1, #8]
 800eb9a:	690b      	ldr	r3, [r1, #16]
 800eb9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eba0:	4293      	cmp	r3, r2
 800eba2:	bfb8      	it	lt
 800eba4:	4613      	movlt	r3, r2
 800eba6:	6033      	str	r3, [r6, #0]
 800eba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebac:	4607      	mov	r7, r0
 800ebae:	460c      	mov	r4, r1
 800ebb0:	b10a      	cbz	r2, 800ebb6 <_printf_common+0x26>
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	6033      	str	r3, [r6, #0]
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	0699      	lsls	r1, r3, #26
 800ebba:	bf42      	ittt	mi
 800ebbc:	6833      	ldrmi	r3, [r6, #0]
 800ebbe:	3302      	addmi	r3, #2
 800ebc0:	6033      	strmi	r3, [r6, #0]
 800ebc2:	6825      	ldr	r5, [r4, #0]
 800ebc4:	f015 0506 	ands.w	r5, r5, #6
 800ebc8:	d106      	bne.n	800ebd8 <_printf_common+0x48>
 800ebca:	f104 0a19 	add.w	sl, r4, #25
 800ebce:	68e3      	ldr	r3, [r4, #12]
 800ebd0:	6832      	ldr	r2, [r6, #0]
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	42ab      	cmp	r3, r5
 800ebd6:	dc26      	bgt.n	800ec26 <_printf_common+0x96>
 800ebd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebdc:	1e13      	subs	r3, r2, #0
 800ebde:	6822      	ldr	r2, [r4, #0]
 800ebe0:	bf18      	it	ne
 800ebe2:	2301      	movne	r3, #1
 800ebe4:	0692      	lsls	r2, r2, #26
 800ebe6:	d42b      	bmi.n	800ec40 <_printf_common+0xb0>
 800ebe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebec:	4649      	mov	r1, r9
 800ebee:	4638      	mov	r0, r7
 800ebf0:	47c0      	blx	r8
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	d01e      	beq.n	800ec34 <_printf_common+0xa4>
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	68e5      	ldr	r5, [r4, #12]
 800ebfa:	6832      	ldr	r2, [r6, #0]
 800ebfc:	f003 0306 	and.w	r3, r3, #6
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	bf08      	it	eq
 800ec04:	1aad      	subeq	r5, r5, r2
 800ec06:	68a3      	ldr	r3, [r4, #8]
 800ec08:	6922      	ldr	r2, [r4, #16]
 800ec0a:	bf0c      	ite	eq
 800ec0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec10:	2500      	movne	r5, #0
 800ec12:	4293      	cmp	r3, r2
 800ec14:	bfc4      	itt	gt
 800ec16:	1a9b      	subgt	r3, r3, r2
 800ec18:	18ed      	addgt	r5, r5, r3
 800ec1a:	2600      	movs	r6, #0
 800ec1c:	341a      	adds	r4, #26
 800ec1e:	42b5      	cmp	r5, r6
 800ec20:	d11a      	bne.n	800ec58 <_printf_common+0xc8>
 800ec22:	2000      	movs	r0, #0
 800ec24:	e008      	b.n	800ec38 <_printf_common+0xa8>
 800ec26:	2301      	movs	r3, #1
 800ec28:	4652      	mov	r2, sl
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	4638      	mov	r0, r7
 800ec2e:	47c0      	blx	r8
 800ec30:	3001      	adds	r0, #1
 800ec32:	d103      	bne.n	800ec3c <_printf_common+0xac>
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3c:	3501      	adds	r5, #1
 800ec3e:	e7c6      	b.n	800ebce <_printf_common+0x3e>
 800ec40:	18e1      	adds	r1, r4, r3
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	2030      	movs	r0, #48	; 0x30
 800ec46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec4a:	4422      	add	r2, r4
 800ec4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec54:	3302      	adds	r3, #2
 800ec56:	e7c7      	b.n	800ebe8 <_printf_common+0x58>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	4638      	mov	r0, r7
 800ec60:	47c0      	blx	r8
 800ec62:	3001      	adds	r0, #1
 800ec64:	d0e6      	beq.n	800ec34 <_printf_common+0xa4>
 800ec66:	3601      	adds	r6, #1
 800ec68:	e7d9      	b.n	800ec1e <_printf_common+0x8e>
	...

0800ec6c <_printf_i>:
 800ec6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec70:	7e0f      	ldrb	r7, [r1, #24]
 800ec72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec74:	2f78      	cmp	r7, #120	; 0x78
 800ec76:	4691      	mov	r9, r2
 800ec78:	4680      	mov	r8, r0
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	469a      	mov	sl, r3
 800ec7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec82:	d807      	bhi.n	800ec94 <_printf_i+0x28>
 800ec84:	2f62      	cmp	r7, #98	; 0x62
 800ec86:	d80a      	bhi.n	800ec9e <_printf_i+0x32>
 800ec88:	2f00      	cmp	r7, #0
 800ec8a:	f000 80d8 	beq.w	800ee3e <_printf_i+0x1d2>
 800ec8e:	2f58      	cmp	r7, #88	; 0x58
 800ec90:	f000 80a3 	beq.w	800edda <_printf_i+0x16e>
 800ec94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec9c:	e03a      	b.n	800ed14 <_printf_i+0xa8>
 800ec9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eca2:	2b15      	cmp	r3, #21
 800eca4:	d8f6      	bhi.n	800ec94 <_printf_i+0x28>
 800eca6:	a101      	add	r1, pc, #4	; (adr r1, 800ecac <_printf_i+0x40>)
 800eca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecac:	0800ed05 	.word	0x0800ed05
 800ecb0:	0800ed19 	.word	0x0800ed19
 800ecb4:	0800ec95 	.word	0x0800ec95
 800ecb8:	0800ec95 	.word	0x0800ec95
 800ecbc:	0800ec95 	.word	0x0800ec95
 800ecc0:	0800ec95 	.word	0x0800ec95
 800ecc4:	0800ed19 	.word	0x0800ed19
 800ecc8:	0800ec95 	.word	0x0800ec95
 800eccc:	0800ec95 	.word	0x0800ec95
 800ecd0:	0800ec95 	.word	0x0800ec95
 800ecd4:	0800ec95 	.word	0x0800ec95
 800ecd8:	0800ee25 	.word	0x0800ee25
 800ecdc:	0800ed49 	.word	0x0800ed49
 800ece0:	0800ee07 	.word	0x0800ee07
 800ece4:	0800ec95 	.word	0x0800ec95
 800ece8:	0800ec95 	.word	0x0800ec95
 800ecec:	0800ee47 	.word	0x0800ee47
 800ecf0:	0800ec95 	.word	0x0800ec95
 800ecf4:	0800ed49 	.word	0x0800ed49
 800ecf8:	0800ec95 	.word	0x0800ec95
 800ecfc:	0800ec95 	.word	0x0800ec95
 800ed00:	0800ee0f 	.word	0x0800ee0f
 800ed04:	682b      	ldr	r3, [r5, #0]
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	602a      	str	r2, [r5, #0]
 800ed0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed14:	2301      	movs	r3, #1
 800ed16:	e0a3      	b.n	800ee60 <_printf_i+0x1f4>
 800ed18:	6820      	ldr	r0, [r4, #0]
 800ed1a:	6829      	ldr	r1, [r5, #0]
 800ed1c:	0606      	lsls	r6, r0, #24
 800ed1e:	f101 0304 	add.w	r3, r1, #4
 800ed22:	d50a      	bpl.n	800ed3a <_printf_i+0xce>
 800ed24:	680e      	ldr	r6, [r1, #0]
 800ed26:	602b      	str	r3, [r5, #0]
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	da03      	bge.n	800ed34 <_printf_i+0xc8>
 800ed2c:	232d      	movs	r3, #45	; 0x2d
 800ed2e:	4276      	negs	r6, r6
 800ed30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed34:	485e      	ldr	r0, [pc, #376]	; (800eeb0 <_printf_i+0x244>)
 800ed36:	230a      	movs	r3, #10
 800ed38:	e019      	b.n	800ed6e <_printf_i+0x102>
 800ed3a:	680e      	ldr	r6, [r1, #0]
 800ed3c:	602b      	str	r3, [r5, #0]
 800ed3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed42:	bf18      	it	ne
 800ed44:	b236      	sxthne	r6, r6
 800ed46:	e7ef      	b.n	800ed28 <_printf_i+0xbc>
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	6820      	ldr	r0, [r4, #0]
 800ed4c:	1d19      	adds	r1, r3, #4
 800ed4e:	6029      	str	r1, [r5, #0]
 800ed50:	0601      	lsls	r1, r0, #24
 800ed52:	d501      	bpl.n	800ed58 <_printf_i+0xec>
 800ed54:	681e      	ldr	r6, [r3, #0]
 800ed56:	e002      	b.n	800ed5e <_printf_i+0xf2>
 800ed58:	0646      	lsls	r6, r0, #25
 800ed5a:	d5fb      	bpl.n	800ed54 <_printf_i+0xe8>
 800ed5c:	881e      	ldrh	r6, [r3, #0]
 800ed5e:	4854      	ldr	r0, [pc, #336]	; (800eeb0 <_printf_i+0x244>)
 800ed60:	2f6f      	cmp	r7, #111	; 0x6f
 800ed62:	bf0c      	ite	eq
 800ed64:	2308      	moveq	r3, #8
 800ed66:	230a      	movne	r3, #10
 800ed68:	2100      	movs	r1, #0
 800ed6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed6e:	6865      	ldr	r5, [r4, #4]
 800ed70:	60a5      	str	r5, [r4, #8]
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	bfa2      	ittt	ge
 800ed76:	6821      	ldrge	r1, [r4, #0]
 800ed78:	f021 0104 	bicge.w	r1, r1, #4
 800ed7c:	6021      	strge	r1, [r4, #0]
 800ed7e:	b90e      	cbnz	r6, 800ed84 <_printf_i+0x118>
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	d04d      	beq.n	800ee20 <_printf_i+0x1b4>
 800ed84:	4615      	mov	r5, r2
 800ed86:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed8a:	fb03 6711 	mls	r7, r3, r1, r6
 800ed8e:	5dc7      	ldrb	r7, [r0, r7]
 800ed90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed94:	4637      	mov	r7, r6
 800ed96:	42bb      	cmp	r3, r7
 800ed98:	460e      	mov	r6, r1
 800ed9a:	d9f4      	bls.n	800ed86 <_printf_i+0x11a>
 800ed9c:	2b08      	cmp	r3, #8
 800ed9e:	d10b      	bne.n	800edb8 <_printf_i+0x14c>
 800eda0:	6823      	ldr	r3, [r4, #0]
 800eda2:	07de      	lsls	r6, r3, #31
 800eda4:	d508      	bpl.n	800edb8 <_printf_i+0x14c>
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	6861      	ldr	r1, [r4, #4]
 800edaa:	4299      	cmp	r1, r3
 800edac:	bfde      	ittt	le
 800edae:	2330      	movle	r3, #48	; 0x30
 800edb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800edb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edb8:	1b52      	subs	r2, r2, r5
 800edba:	6122      	str	r2, [r4, #16]
 800edbc:	f8cd a000 	str.w	sl, [sp]
 800edc0:	464b      	mov	r3, r9
 800edc2:	aa03      	add	r2, sp, #12
 800edc4:	4621      	mov	r1, r4
 800edc6:	4640      	mov	r0, r8
 800edc8:	f7ff fee2 	bl	800eb90 <_printf_common>
 800edcc:	3001      	adds	r0, #1
 800edce:	d14c      	bne.n	800ee6a <_printf_i+0x1fe>
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	b004      	add	sp, #16
 800edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edda:	4835      	ldr	r0, [pc, #212]	; (800eeb0 <_printf_i+0x244>)
 800eddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ede0:	6829      	ldr	r1, [r5, #0]
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ede8:	6029      	str	r1, [r5, #0]
 800edea:	061d      	lsls	r5, r3, #24
 800edec:	d514      	bpl.n	800ee18 <_printf_i+0x1ac>
 800edee:	07df      	lsls	r7, r3, #31
 800edf0:	bf44      	itt	mi
 800edf2:	f043 0320 	orrmi.w	r3, r3, #32
 800edf6:	6023      	strmi	r3, [r4, #0]
 800edf8:	b91e      	cbnz	r6, 800ee02 <_printf_i+0x196>
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	f023 0320 	bic.w	r3, r3, #32
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	2310      	movs	r3, #16
 800ee04:	e7b0      	b.n	800ed68 <_printf_i+0xfc>
 800ee06:	6823      	ldr	r3, [r4, #0]
 800ee08:	f043 0320 	orr.w	r3, r3, #32
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	2378      	movs	r3, #120	; 0x78
 800ee10:	4828      	ldr	r0, [pc, #160]	; (800eeb4 <_printf_i+0x248>)
 800ee12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee16:	e7e3      	b.n	800ede0 <_printf_i+0x174>
 800ee18:	0659      	lsls	r1, r3, #25
 800ee1a:	bf48      	it	mi
 800ee1c:	b2b6      	uxthmi	r6, r6
 800ee1e:	e7e6      	b.n	800edee <_printf_i+0x182>
 800ee20:	4615      	mov	r5, r2
 800ee22:	e7bb      	b.n	800ed9c <_printf_i+0x130>
 800ee24:	682b      	ldr	r3, [r5, #0]
 800ee26:	6826      	ldr	r6, [r4, #0]
 800ee28:	6961      	ldr	r1, [r4, #20]
 800ee2a:	1d18      	adds	r0, r3, #4
 800ee2c:	6028      	str	r0, [r5, #0]
 800ee2e:	0635      	lsls	r5, r6, #24
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	d501      	bpl.n	800ee38 <_printf_i+0x1cc>
 800ee34:	6019      	str	r1, [r3, #0]
 800ee36:	e002      	b.n	800ee3e <_printf_i+0x1d2>
 800ee38:	0670      	lsls	r0, r6, #25
 800ee3a:	d5fb      	bpl.n	800ee34 <_printf_i+0x1c8>
 800ee3c:	8019      	strh	r1, [r3, #0]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6123      	str	r3, [r4, #16]
 800ee42:	4615      	mov	r5, r2
 800ee44:	e7ba      	b.n	800edbc <_printf_i+0x150>
 800ee46:	682b      	ldr	r3, [r5, #0]
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	602a      	str	r2, [r5, #0]
 800ee4c:	681d      	ldr	r5, [r3, #0]
 800ee4e:	6862      	ldr	r2, [r4, #4]
 800ee50:	2100      	movs	r1, #0
 800ee52:	4628      	mov	r0, r5
 800ee54:	f7f1 f9bc 	bl	80001d0 <memchr>
 800ee58:	b108      	cbz	r0, 800ee5e <_printf_i+0x1f2>
 800ee5a:	1b40      	subs	r0, r0, r5
 800ee5c:	6060      	str	r0, [r4, #4]
 800ee5e:	6863      	ldr	r3, [r4, #4]
 800ee60:	6123      	str	r3, [r4, #16]
 800ee62:	2300      	movs	r3, #0
 800ee64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee68:	e7a8      	b.n	800edbc <_printf_i+0x150>
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	462a      	mov	r2, r5
 800ee6e:	4649      	mov	r1, r9
 800ee70:	4640      	mov	r0, r8
 800ee72:	47d0      	blx	sl
 800ee74:	3001      	adds	r0, #1
 800ee76:	d0ab      	beq.n	800edd0 <_printf_i+0x164>
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	079b      	lsls	r3, r3, #30
 800ee7c:	d413      	bmi.n	800eea6 <_printf_i+0x23a>
 800ee7e:	68e0      	ldr	r0, [r4, #12]
 800ee80:	9b03      	ldr	r3, [sp, #12]
 800ee82:	4298      	cmp	r0, r3
 800ee84:	bfb8      	it	lt
 800ee86:	4618      	movlt	r0, r3
 800ee88:	e7a4      	b.n	800edd4 <_printf_i+0x168>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	4649      	mov	r1, r9
 800ee90:	4640      	mov	r0, r8
 800ee92:	47d0      	blx	sl
 800ee94:	3001      	adds	r0, #1
 800ee96:	d09b      	beq.n	800edd0 <_printf_i+0x164>
 800ee98:	3501      	adds	r5, #1
 800ee9a:	68e3      	ldr	r3, [r4, #12]
 800ee9c:	9903      	ldr	r1, [sp, #12]
 800ee9e:	1a5b      	subs	r3, r3, r1
 800eea0:	42ab      	cmp	r3, r5
 800eea2:	dcf2      	bgt.n	800ee8a <_printf_i+0x21e>
 800eea4:	e7eb      	b.n	800ee7e <_printf_i+0x212>
 800eea6:	2500      	movs	r5, #0
 800eea8:	f104 0619 	add.w	r6, r4, #25
 800eeac:	e7f5      	b.n	800ee9a <_printf_i+0x22e>
 800eeae:	bf00      	nop
 800eeb0:	0800f195 	.word	0x0800f195
 800eeb4:	0800f1a6 	.word	0x0800f1a6

0800eeb8 <__retarget_lock_acquire_recursive>:
 800eeb8:	4770      	bx	lr

0800eeba <__retarget_lock_release_recursive>:
 800eeba:	4770      	bx	lr

0800eebc <memmove>:
 800eebc:	4288      	cmp	r0, r1
 800eebe:	b510      	push	{r4, lr}
 800eec0:	eb01 0402 	add.w	r4, r1, r2
 800eec4:	d902      	bls.n	800eecc <memmove+0x10>
 800eec6:	4284      	cmp	r4, r0
 800eec8:	4623      	mov	r3, r4
 800eeca:	d807      	bhi.n	800eedc <memmove+0x20>
 800eecc:	1e43      	subs	r3, r0, #1
 800eece:	42a1      	cmp	r1, r4
 800eed0:	d008      	beq.n	800eee4 <memmove+0x28>
 800eed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eeda:	e7f8      	b.n	800eece <memmove+0x12>
 800eedc:	4402      	add	r2, r0
 800eede:	4601      	mov	r1, r0
 800eee0:	428a      	cmp	r2, r1
 800eee2:	d100      	bne.n	800eee6 <memmove+0x2a>
 800eee4:	bd10      	pop	{r4, pc}
 800eee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eeea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eeee:	e7f7      	b.n	800eee0 <memmove+0x24>

0800eef0 <_realloc_r>:
 800eef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef4:	4680      	mov	r8, r0
 800eef6:	4614      	mov	r4, r2
 800eef8:	460e      	mov	r6, r1
 800eefa:	b921      	cbnz	r1, 800ef06 <_realloc_r+0x16>
 800eefc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef00:	4611      	mov	r1, r2
 800ef02:	f7ff bc39 	b.w	800e778 <_malloc_r>
 800ef06:	b92a      	cbnz	r2, 800ef14 <_realloc_r+0x24>
 800ef08:	f7ff fbca 	bl	800e6a0 <_free_r>
 800ef0c:	4625      	mov	r5, r4
 800ef0e:	4628      	mov	r0, r5
 800ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef14:	f000 f81b 	bl	800ef4e <_malloc_usable_size_r>
 800ef18:	4284      	cmp	r4, r0
 800ef1a:	4607      	mov	r7, r0
 800ef1c:	d802      	bhi.n	800ef24 <_realloc_r+0x34>
 800ef1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef22:	d812      	bhi.n	800ef4a <_realloc_r+0x5a>
 800ef24:	4621      	mov	r1, r4
 800ef26:	4640      	mov	r0, r8
 800ef28:	f7ff fc26 	bl	800e778 <_malloc_r>
 800ef2c:	4605      	mov	r5, r0
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0ed      	beq.n	800ef0e <_realloc_r+0x1e>
 800ef32:	42bc      	cmp	r4, r7
 800ef34:	4622      	mov	r2, r4
 800ef36:	4631      	mov	r1, r6
 800ef38:	bf28      	it	cs
 800ef3a:	463a      	movcs	r2, r7
 800ef3c:	f7ff fb9a 	bl	800e674 <memcpy>
 800ef40:	4631      	mov	r1, r6
 800ef42:	4640      	mov	r0, r8
 800ef44:	f7ff fbac 	bl	800e6a0 <_free_r>
 800ef48:	e7e1      	b.n	800ef0e <_realloc_r+0x1e>
 800ef4a:	4635      	mov	r5, r6
 800ef4c:	e7df      	b.n	800ef0e <_realloc_r+0x1e>

0800ef4e <_malloc_usable_size_r>:
 800ef4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef52:	1f18      	subs	r0, r3, #4
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfbc      	itt	lt
 800ef58:	580b      	ldrlt	r3, [r1, r0]
 800ef5a:	18c0      	addlt	r0, r0, r3
 800ef5c:	4770      	bx	lr
	...

0800ef60 <_init>:
 800ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef62:	bf00      	nop
 800ef64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef66:	bc08      	pop	{r3}
 800ef68:	469e      	mov	lr, r3
 800ef6a:	4770      	bx	lr

0800ef6c <_fini>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	bf00      	nop
 800ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef72:	bc08      	pop	{r3}
 800ef74:	469e      	mov	lr, r3
 800ef76:	4770      	bx	lr
