
wav_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800f174  0800f174  0001f174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f360  0800f360  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f360  0800f360  0001f360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f368  0800f368  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f368  0800f368  0001f368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f36c  0800f36c  0001f36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800f370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00001d78  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20001e1c  20001e1c  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002315b  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005446  00000000  00000000  0004322f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00048678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c0  00000000  00000000  0004a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283a4  00000000  00000000  0004ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000270ae  00000000  00000000  00073ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5938  00000000  00000000  0009ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001707c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000742c  00000000  00000000  00170814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f15c 	.word	0x0800f15c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800f15c 	.word	0x0800f15c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	2194      	movs	r1, #148	; 0x94
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <write_register+0x30>)
 8000598:	f004 f976 	bl	8004888 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000c0 	.word	0x200000c0

080005a8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005b8:	f107 020c 	add.w	r2, r7, #12
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2194      	movs	r1, #148	; 0x94
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <read_register+0x3c>)
 80005c6:	f004 f95f 	bl	8004888 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2301      	movs	r3, #1
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	2194      	movs	r1, #148	; 0x94
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <read_register+0x3c>)
 80005d6:	f004 fa55 	bl	8004a84 <HAL_I2C_Master_Receive>
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000c0 	.word	0x200000c0

080005e8 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005e8:	b084      	sub	sp, #16
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	f107 0c10 	add.w	ip, r7, #16
 80005f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005f8:	4b7b      	ldr	r3, [pc, #492]	; (80007e8 <CS43_Init+0x200>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000600:	4b79      	ldr	r3, [pc, #484]	; (80007e8 <CS43_Init+0x200>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	69da      	ldr	r2, [r3, #28]
 8000606:	4b78      	ldr	r3, [pc, #480]	; (80007e8 <CS43_Init+0x200>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060e:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	4875      	ldr	r0, [pc, #468]	; (80007ec <CS43_Init+0x204>)
 8000616:	f002 fb9d 	bl	8002d54 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800061a:	4b75      	ldr	r3, [pc, #468]	; (80007f0 <CS43_Init+0x208>)
 800061c:	4618      	mov	r0, r3
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2254      	movs	r2, #84	; 0x54
 8000624:	4619      	mov	r1, r3
 8000626:	f00e f923 	bl	800e870 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800062a:	2301      	movs	r3, #1
 800062c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff9e 	bl	8000574 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	b2db      	uxtb	r3, r3
 8000644:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	f043 030c 	orr.w	r3, r3, #12
 800064c:	b2db      	uxtb	r3, r3
 800064e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	f043 0303 	orr.w	r3, r3, #3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	3301      	adds	r3, #1
 800065e:	4619      	mov	r1, r3
 8000660:	2004      	movs	r0, #4
 8000662:	f7ff ff87 	bl	8000574 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	3301      	adds	r3, #1
 800066e:	4619      	mov	r1, r3
 8000670:	2005      	movs	r0, #5
 8000672:	f7ff ff7f 	bl	8000574 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	2006      	movs	r0, #6
 800067c:	f7ff ff94 	bl	80005a8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000680:	797b      	ldrb	r3, [r7, #5]
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	b2db      	uxtb	r3, r3
 8000688:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	f023 0310 	bic.w	r3, r3, #16
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	f023 0304 	bic.w	r3, r3, #4
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	f043 0303 	orr.w	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	3301      	adds	r3, #1
 80006ca:	4619      	mov	r1, r3
 80006cc:	2006      	movs	r0, #6
 80006ce:	f7ff ff51 	bl	8000574 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	3301      	adds	r3, #1
 80006d6:	4619      	mov	r1, r3
 80006d8:	2008      	movs	r0, #8
 80006da:	f7ff ff65 	bl	80005a8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	f023 030f 	bic.w	r3, r3, #15
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	2008      	movs	r0, #8
 80006fa:	f7ff ff3b 	bl	8000574 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	2009      	movs	r0, #9
 8000706:	f7ff ff4f 	bl	80005a8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	b2db      	uxtb	r3, r3
 8000712:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2009      	movs	r0, #9
 8000726:	f7ff ff25 	bl	8000574 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	3301      	adds	r3, #1
 800072e:	4619      	mov	r1, r3
 8000730:	200e      	movs	r0, #14
 8000732:	f7ff ff39 	bl	80005a8 <read_register>
	if(outputMode == MODE_ANALOG)
 8000736:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800073a:	2b03      	cmp	r3, #3
 800073c:	d119      	bne.n	8000772 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800073e:	797b      	ldrb	r3, [r7, #5]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000748:	797b      	ldrb	r3, [r7, #5]
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	b2db      	uxtb	r3, r3
 8000750:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000752:	797b      	ldrb	r3, [r7, #5]
 8000754:	f023 0320 	bic.w	r3, r3, #32
 8000758:	b2db      	uxtb	r3, r3
 800075a:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	f023 0310 	bic.w	r3, r3, #16
 8000762:	b2db      	uxtb	r3, r3
 8000764:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000766:	797b      	ldrb	r3, [r7, #5]
 8000768:	f023 0308 	bic.w	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	717b      	strb	r3, [r7, #5]
 8000770:	e005      	b.n	800077e <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 8000772:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 800077a:	2302      	movs	r3, #2
 800077c:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	3301      	adds	r3, #1
 8000782:	4619      	mov	r1, r3
 8000784:	200e      	movs	r0, #14
 8000786:	f7ff fef5 	bl	8000574 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	3301      	adds	r3, #1
 800078e:	4619      	mov	r1, r3
 8000790:	200f      	movs	r0, #15
 8000792:	f7ff ff09 	bl	80005a8 <read_register>
	iData[1] = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200f      	movs	r0, #15
 80007a2:	f7ff fee7 	bl	8000574 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	3301      	adds	r3, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	2014      	movs	r0, #20
 80007b2:	f7ff fedf 	bl	8000574 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	2015      	movs	r0, #21
 80007be:	f7ff fed9 	bl	8000574 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	3301      	adds	r3, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	201a      	movs	r0, #26
 80007ca:	f7ff fed3 	bl	8000574 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	3301      	adds	r3, #1
 80007d2:	4619      	mov	r1, r3
 80007d4:	201b      	movs	r0, #27
 80007d6:	f7ff fecd 	bl	8000574 <write_register>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr
 80007e8:	200013c4 	.word	0x200013c4
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000c0 	.word	0x200000c0

080007f4 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b03      	cmp	r3, #3
 8000802:	d82b      	bhi.n	800085c <CS43_Enable_RightLeft+0x68>
 8000804:	a201      	add	r2, pc, #4	; (adr r2, 800080c <CS43_Enable_RightLeft+0x18>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	0800081d 	.word	0x0800081d
 8000810:	0800082d 	.word	0x0800082d
 8000814:	0800083d 	.word	0x0800083d
 8000818:	0800084d 	.word	0x0800084d
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800081c:	23c0      	movs	r3, #192	; 0xc0
 800081e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000820:	7b7b      	ldrb	r3, [r7, #13]
 8000822:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000826:	b2db      	uxtb	r3, r3
 8000828:	737b      	strb	r3, [r7, #13]
			break;
 800082a:	e018      	b.n	800085e <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000830:	7b7b      	ldrb	r3, [r7, #13]
 8000832:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000836:	b2db      	uxtb	r3, r3
 8000838:	737b      	strb	r3, [r7, #13]
			break;
 800083a:	e010      	b.n	800085e <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800083c:	23c0      	movs	r3, #192	; 0xc0
 800083e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000840:	7b7b      	ldrb	r3, [r7, #13]
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	b2db      	uxtb	r3, r3
 8000848:	737b      	strb	r3, [r7, #13]
			break;
 800084a:	e008      	b.n	800085e <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000850:	7b7b      	ldrb	r3, [r7, #13]
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	b2db      	uxtb	r3, r3
 8000858:	737b      	strb	r3, [r7, #13]
			break;
 800085a:	e000      	b.n	800085e <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 800085c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800085e:	7b7b      	ldrb	r3, [r7, #13]
 8000860:	f043 030c 	orr.w	r3, r3, #12
 8000864:	b2db      	uxtb	r3, r3
 8000866:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000868:	7b7b      	ldrb	r3, [r7, #13]
 800086a:	f043 0303 	orr.w	r3, r3, #3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	3301      	adds	r3, #1
 8000878:	4619      	mov	r1, r3
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe7a 	bl	8000574 <write_register>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3319      	adds	r3, #25
 8000896:	b2db      	uxtb	r3, r3
 8000898:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	3301      	adds	r3, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	2020      	movs	r0, #32
 80008a4:	f7ff fe66 	bl	8000574 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	3301      	adds	r3, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	2021      	movs	r0, #33	; 0x21
 80008b2:	f7ff fe5f 	bl	8000574 <write_register>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b084      	sub	sp, #16
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d019      	beq.n	8000902 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ce:	23ff      	movs	r3, #255	; 0xff
 80008d0:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	3301      	adds	r3, #1
 80008d8:	4619      	mov	r1, r3
 80008da:	2004      	movs	r0, #4
 80008dc:	f7ff fe4a 	bl	8000574 <write_register>
    iData[1] = 0x01;
 80008e0:	2301      	movs	r3, #1
 80008e2:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	3301      	adds	r3, #1
 80008ea:	4619      	mov	r1, r3
 80008ec:	2022      	movs	r0, #34	; 0x22
 80008ee:	f7ff fe41 	bl	8000574 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	3301      	adds	r3, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	2023      	movs	r0, #35	; 0x23
 80008fc:	f7ff fe3a 	bl	8000574 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000900:	e018      	b.n	8000934 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000902:	2300      	movs	r3, #0
 8000904:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	3301      	adds	r3, #1
 800090c:	4619      	mov	r1, r3
 800090e:	2022      	movs	r0, #34	; 0x22
 8000910:	f7ff fe30 	bl	8000574 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	3301      	adds	r3, #1
 800091a:	4619      	mov	r1, r3
 800091c:	2023      	movs	r0, #35	; 0x23
 800091e:	f7ff fe29 	bl	8000574 <write_register>
    iData[1] = 0xAF;
 8000922:	23af      	movs	r3, #175	; 0xaf
 8000924:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	3301      	adds	r3, #1
 800092c:	4619      	mov	r1, r3
 800092e:	2004      	movs	r0, #4
 8000930:	f7ff fe20 	bl	8000574 <write_register>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff ffbb 	bl	80008be <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000948:	2399      	movs	r3, #153	; 0x99
 800094a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	3301      	adds	r3, #1
 8000950:	4619      	mov	r1, r3
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff fe0e 	bl	8000574 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	3301      	adds	r3, #1
 8000960:	4619      	mov	r1, r3
 8000962:	2047      	movs	r0, #71	; 0x47
 8000964:	f7ff fe06 	bl	8000574 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	3301      	adds	r3, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2032      	movs	r0, #50	; 0x32
 8000970:	f7ff fe1a 	bl	80005a8 <read_register>
	iData[1] |= 0x80;
 8000974:	797b      	ldrb	r3, [r7, #5]
 8000976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800097a:	b2db      	uxtb	r3, r3
 800097c:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	3301      	adds	r3, #1
 8000982:	4619      	mov	r1, r3
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f7ff fdf5 	bl	8000574 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	3301      	adds	r3, #1
 800098e:	4619      	mov	r1, r3
 8000990:	2032      	movs	r0, #50	; 0x32
 8000992:	f7ff fe09 	bl	80005a8 <read_register>
	iData[1] &= ~(0x80);
 8000996:	797b      	ldrb	r3, [r7, #5]
 8000998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800099c:	b2db      	uxtb	r3, r3
 800099e:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	3301      	adds	r3, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	2032      	movs	r0, #50	; 0x32
 80009a8:	f7ff fde4 	bl	8000574 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009ac:	2300      	movs	r3, #0
 80009ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	3301      	adds	r3, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff fddc 	bl	8000574 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009bc:	239e      	movs	r3, #158	; 0x9e
 80009be:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	3301      	adds	r3, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	2002      	movs	r0, #2
 80009c8:	f7ff fdd4 	bl	8000574 <write_register>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <CS43_Stop>:

void CS43_Stop(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff ff6f 	bl	80008be <CS43_SetMute>
  iData[1] = 0x04;
 80009e0:	2304      	movs	r3, #4
 80009e2:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	3301      	adds	r3, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	200e      	movs	r0, #14
 80009ec:	f7ff fdc2 	bl	8000574 <write_register>
	iData[1] = 0x9F;
 80009f0:	239f      	movs	r3, #159	; 0x9f
 80009f2:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	3301      	adds	r3, #1
 80009f8:	4619      	mov	r1, r3
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff fdba 	bl	8000574 <write_register>
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a10:	2300      	movs	r3, #0
 8000a12:	77fb      	strb	r3, [r7, #31]
 8000a14:	23ff      	movs	r3, #255	; 0xff
 8000a16:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
 8000a1c:	e00b      	b.n	8000a36 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <audioI2S_pllClockConfig+0x8c>)
 8000a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d101      	bne.n	8000a30 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000a30:	7ffb      	ldrb	r3, [r7, #31]
 8000a32:	3301      	adds	r3, #1
 8000a34:	77fb      	strb	r3, [r7, #31]
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d9f0      	bls.n	8000a1e <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4618      	mov	r0, r3
 8000a42:	f006 fb75 	bl	8007130 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a46:	7fbb      	ldrb	r3, [r7, #30]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d111      	bne.n	8000a74 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a54:	7fbb      	ldrb	r3, [r7, #30]
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <audioI2S_pllClockConfig+0x90>)
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a5e:	7fbb      	ldrb	r3, [r7, #30]
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <audioI2S_pllClockConfig+0x94>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 fa7d 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a72:	e00b      	b.n	8000a8c <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a78:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a7c:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 fa70 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0800f218 	.word	0x0800f218
 8000a98:	0800f238 	.word	0x0800f238
 8000a9c:	0800f258 	.word	0x0800f258

08000aa0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <I2S3_freqUpdate+0x84>)
 8000aae:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ac2:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fd11 	bl	800552c <HAL_I2S_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e000      	b.n	8000b16 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b14:	2301      	movs	r3, #1
  }
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000114 	.word	0x20000114
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <audioI2S_setHandle+0x1c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000114 	.word	0x20000114

08000b48 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff59 	bl	8000a08 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <I2S3_freqUpdate>
  return true;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b72:	f7ff fee3 	bl	800093c <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <audioI2S_play+0x38>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b80:	d203      	bcs.n	8000b8a <audioI2S_play+0x22>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	e001      	b.n	8000b8e <audioI2S_play+0x26>
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f004 fe0b 	bl	80057ac <HAL_I2S_Transmit_DMA>
  return true;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000114 	.word	0x20000114

08000ba4 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000ba8:	f7ff ff14 	bl	80009d4 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <audioI2S_pause+0x18>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 fea3 	bl	80058fc <HAL_I2S_DMAPause>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000114 	.word	0x20000114

08000bc0 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  CS43_Start();
 8000bc4:	f7ff feba 	bl	800093c <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <audioI2S_resume+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fef7 	bl	80059c0 <HAL_I2S_DMAResume>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000114 	.word	0x20000114

08000bdc <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000be0:	f7ff fef8 	bl	80009d4 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <audioI2S_stop+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 ff7d 	bl	8005ae8 <HAL_I2S_DMAStop>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000114 	.word	0x20000114

08000bf8 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_I2S_TxCpltCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000c0a:	f000 f92d 	bl	8000e68 <audioI2S_fullTransfer_Callback>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40003c00 	.word	0x40003c00

08000c1c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000c2e:	f000 f90f 	bl	8000e50 <audioI2S_halfTransfer_Callback>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40003c00 	.word	0x40003c00

08000c40 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <wavPlayer_reset+0x1c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <wavPlayer_reset+0x20>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000134c 	.word	0x2000134c
 8000c60:	20001354 	.word	0x20001354

08000c64 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000c70:	2201      	movs	r2, #1
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <wavPlayer_fileSelect+0x48>)
 8000c76:	f00c fca5 	bl	800d5c4 <f_open>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000c80:	2300      	movs	r3, #0
 8000c82:	e00e      	b.n	8000ca2 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	f107 010c 	add.w	r1, r7, #12
 8000c8c:	222c      	movs	r2, #44	; 0x2c
 8000c8e:	4807      	ldr	r0, [pc, #28]	; (8000cac <wavPlayer_fileSelect+0x48>)
 8000c90:	f00c fe56 	bl	800d940 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <wavPlayer_fileSelect+0x4c>)
 8000c98:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <wavPlayer_fileSelect+0x50>)
 8000c9e:	6013      	str	r3, [r2, #0]
  return true;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3738      	adds	r7, #56	; 0x38
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000348 	.word	0x20000348
 8000cb4:	20001350 	.word	0x20001350

08000cb8 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  isFinished = false;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <wavPlayer_play+0x48>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <wavPlayer_play+0x4c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff3e 	bl	8000b48 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <wavPlayer_play+0x50>)
 8000cd0:	f00d f81d 	bl	800dd0e <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <wavPlayer_play+0x54>)
 8000cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <wavPlayer_play+0x58>)
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <wavPlayer_play+0x50>)
 8000cde:	f00c fe2f 	bl	800d940 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <wavPlayer_play+0x5c>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <wavPlayer_play+0x54>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <wavPlayer_play+0x60>)
 8000cee:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <wavPlayer_play+0x58>)
 8000cf6:	f7ff ff37 	bl	8000b68 <audioI2S_play>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001358 	.word	0x20001358
 8000d04:	20001350 	.word	0x20001350
 8000d08:	20000118 	.word	0x20000118
 8000d0c:	20001354 	.word	0x20001354
 8000d10:	2000034c 	.word	0x2000034c
 8000d14:	20000348 	.word	0x20000348
 8000d18:	2000134c 	.word	0x2000134c

08000d1c <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <wavPlayer_process+0xc8>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d859      	bhi.n	8000dde <wavPlayer_process+0xc2>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <wavPlayer_process+0x14>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000ddd 	.word	0x08000ddd
 8000d34:	08000d41 	.word	0x08000d41
 8000d38:	08000d83 	.word	0x08000d83
 8000d3c:	08000dc5 	.word	0x08000dc5
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <wavPlayer_process+0xcc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <wavPlayer_process+0xc8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <wavPlayer_process+0xcc>)
 8000d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d52:	4926      	ldr	r1, [pc, #152]	; (8000dec <wavPlayer_process+0xd0>)
 8000d54:	4826      	ldr	r0, [pc, #152]	; (8000df0 <wavPlayer_process+0xd4>)
 8000d56:	f00c fdf3 	bl	800d940 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <wavPlayer_process+0xd8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d62:	d907      	bls.n	8000d74 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <wavPlayer_process+0xd8>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <wavPlayer_process+0xcc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <wavPlayer_process+0xd8>)
 8000d70:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d72:	e034      	b.n	8000dde <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <wavPlayer_process+0xd8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <wavPlayer_process+0xc8>)
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	701a      	strb	r2, [r3, #0]
    break;
 8000d80:	e02d      	b.n	8000dde <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <wavPlayer_process+0xcc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <wavPlayer_process+0xc8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <wavPlayer_process+0xcc>)
 8000d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d94:	4918      	ldr	r1, [pc, #96]	; (8000df8 <wavPlayer_process+0xdc>)
 8000d96:	4816      	ldr	r0, [pc, #88]	; (8000df0 <wavPlayer_process+0xd4>)
 8000d98:	f00c fdd2 	bl	800d940 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <wavPlayer_process+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da4:	d907      	bls.n	8000db6 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <wavPlayer_process+0xd8>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <wavPlayer_process+0xcc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <wavPlayer_process+0xd8>)
 8000db2:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000db4:	e013      	b.n	8000dde <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <wavPlayer_process+0xd8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <wavPlayer_process+0xc8>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	701a      	strb	r2, [r3, #0]
    break;
 8000dc2:	e00c      	b.n	8000dde <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <wavPlayer_process+0xd4>)
 8000dc6:	f00c ff78 	bl	800dcba <f_close>
    wavPlayer_reset();
 8000dca:	f7ff ff39 	bl	8000c40 <wavPlayer_reset>
    isFinished = true;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <wavPlayer_process+0xe0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <wavPlayer_process+0xc8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
    break;
 8000dda:	e000      	b.n	8000dde <wavPlayer_process+0xc2>
    break;
 8000ddc:	bf00      	nop
  }
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20001359 	.word	0x20001359
 8000de8:	20001354 	.word	0x20001354
 8000dec:	2000034c 	.word	0x2000034c
 8000df0:	20000118 	.word	0x20000118
 8000df4:	2000134c 	.word	0x2000134c
 8000df8:	20000b4c 	.word	0x20000b4c
 8000dfc:	20001358 	.word	0x20001358

08000e00 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000e04:	f7ff feea 	bl	8000bdc <audioI2S_stop>
  f_close(&wavFile);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <wavPlayer_stop+0x18>)
 8000e0a:	f00c ff56 	bl	800dcba <f_close>
  isFinished = true;
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <wavPlayer_stop+0x1c>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000118 	.word	0x20000118
 8000e1c:	20001358 	.word	0x20001358

08000e20 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000e24:	f7ff febe 	bl	8000ba4 <audioI2S_pause>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000e30:	f7ff fec6 	bl	8000bc0 <audioI2S_resume>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return isFinished;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <wavPlayer_isFinished+0x14>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20001358 	.word	0x20001358

08000e50 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <audioI2S_halfTransfer_Callback+0x14>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20001359 	.word	0x20001359

08000e68 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <audioI2S_fullTransfer_Callback+0x14>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20001359 	.word	0x20001359

08000e80 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <delay+0x30>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000e92:	bf00      	nop
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <delay+0x30>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3f9      	bcc.n	8000e94 <delay+0x14>
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2000146c 	.word	0x2000146c

08000eb4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4820      	ldr	r0, [pc, #128]	; (8000f4c <send_to_lcd+0x98>)
 8000eca:	f001 ff43 	bl	8002d54 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	481b      	ldr	r0, [pc, #108]	; (8000f4c <send_to_lcd+0x98>)
 8000ee0:	f001 ff38 	bl	8002d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4815      	ldr	r0, [pc, #84]	; (8000f4c <send_to_lcd+0x98>)
 8000ef6:	f001 ff2d 	bl	8002d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <send_to_lcd+0x98>)
 8000f0c:	f001 ff22 	bl	8002d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <send_to_lcd+0x98>)
 8000f1e:	f001 ff19 	bl	8002d54 <HAL_GPIO_WritePin>
	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2108      	movs	r1, #8
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <send_to_lcd+0x98>)
 8000f28:	f001 ff14 	bl	8002d54 <HAL_GPIO_WritePin>
    delay (60);
 8000f2c:	203c      	movs	r0, #60	; 0x3c
 8000f2e:	f7ff ffa7 	bl	8000e80 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2108      	movs	r1, #8
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <send_to_lcd+0x98>)
 8000f38:	f001 ff0c 	bl	8002d54 <HAL_GPIO_WritePin>
	delay (60);
 8000f3c:	203c      	movs	r0, #60	; 0x3c
 8000f3e:	f7ff ff9f 	bl	8000e80 <delay>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ffa5 	bl	8000eb4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	73fb      	strb	r3, [r7, #15]
   	send_to_lcd(datatosend, 0);
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff9c 	bl	8000eb4 <send_to_lcd>

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff8b 	bl	8000eb4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff82 	bl	8000eb4 <send_to_lcd>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <lcd_clear>:

void lcd_clear (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff ffc7 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(10);
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f000 ff8c 	bl	8001ee0 <HAL_Delay>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <lcd_put_cur+0x18>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <lcd_put_cur+0x22>
 8000fe2:	e009      	b.n	8000ff8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fea:	603b      	str	r3, [r7, #0]
            break;
 8000fec:	e004      	b.n	8000ff8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ff4:	603b      	str	r3, [r7, #0]
            break;
 8000ff6:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffa7 	bl	8000f50 <lcd_send_cmd>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <lcd_init>:

void lcd_init (void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
	// 4 bit initialisation

	HAL_Delay(150);  // wait for >40ms
 800100e:	2096      	movs	r0, #150	; 0x96
 8001010:	f000 ff66 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f7ff ff9b 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 800101a:	200f      	movs	r0, #15
 800101c:	f000 ff60 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f7ff ff95 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >100us
 8001026:	2005      	movs	r0, #5
 8001028:	f000 ff5a 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800102c:	2030      	movs	r0, #48	; 0x30
 800102e:	f7ff ff8f 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(30);
 8001032:	201e      	movs	r0, #30
 8001034:	f000 ff54 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001038:	2020      	movs	r0, #32
 800103a:	f7ff ff89 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(30);
 800103e:	201e      	movs	r0, #30
 8001040:	f000 ff4e 	bl	8001ee0 <HAL_Delay>


  // display initialization
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001044:	2028      	movs	r0, #40	; 0x28
 8001046:	f7ff ff83 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(15);
 800104a:	200f      	movs	r0, #15
 800104c:	f000 ff48 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff ff7d 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(15);
 8001056:	200f      	movs	r0, #15
 8001058:	f000 ff42 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff77 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(15);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 ff3c 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001068:	2006      	movs	r0, #6
 800106a:	f7ff ff71 	bl	8000f50 <lcd_send_cmd>
	HAL_Delay(15);
 800106e:	200f      	movs	r0, #15
 8001070:	f000 ff36 	bl	8001ee0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001074:	200c      	movs	r0, #12
 8001076:	f7ff ff6b 	bl	8000f50 <lcd_send_cmd>

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <lcd_send_string>:

}
*/

void lcd_send_string (char *str)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001086:	e006      	b.n	8001096 <lcd_send_string+0x18>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff77 	bl	8000f84 <lcd_send_data>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <lcd_send_string+0xa>
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <display_song_info>:
volatile uint8_t volume = 200;
volatile uint8_t song_idx = DEFAULT_SONG_IDX;
volatile song_mov_t song_mov = CURR_SONG;

static void display_song_info(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
	lcd_clear();
 80010ae:	f7ff ff83 	bl	8000fb8 <lcd_clear>
	HAL_Delay(500);
 80010b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b6:	f000 ff13 	bl	8001ee0 <HAL_Delay>
	lcd_put_cur(0, 0);
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ff85 	bl	8000fcc <lcd_put_cur>
	char str[64];
	sprintf(str,"Song:%s", songs[song_idx]);
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <display_song_info+0x64>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <display_song_info+0x68>)
 80010cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010d0:	463b      	mov	r3, r7
 80010d2:	4910      	ldr	r1, [pc, #64]	; (8001114 <display_song_info+0x6c>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00d fcd1 	bl	800ea7c <siprintf>
	lcd_send_string(str);
 80010da:	463b      	mov	r3, r7
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffce 	bl	800107e <lcd_send_string>
	lcd_put_cur(1, 0);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ff71 	bl	8000fcc <lcd_put_cur>
	sprintf(str,"Volume(dB):%d", volume);
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <display_song_info+0x70>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	463b      	mov	r3, r7
 80010f4:	4909      	ldr	r1, [pc, #36]	; (800111c <display_song_info+0x74>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00d fcc0 	bl	800ea7c <siprintf>
	lcd_send_string(str);
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ffbd 	bl	800107e <lcd_send_string>
}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	; 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000011 	.word	0x20000011
 8001110:	20000000 	.word	0x20000000
 8001114:	0800f1a4 	.word	0x0800f1a4
 8001118:	20000010 	.word	0x20000010
 800111c:	0800f1ac 	.word	0x0800f1ac

08001120 <update_volume_display>:

static void update_volume_display(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
	char str[32];
	lcd_put_cur(1, 0);
 8001126:	2100      	movs	r1, #0
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ff4f 	bl	8000fcc <lcd_put_cur>
	sprintf(str,"Volume(dB):%d", volume);
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <update_volume_display+0x30>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	463b      	mov	r3, r7
 8001138:	4906      	ldr	r1, [pc, #24]	; (8001154 <update_volume_display+0x34>)
 800113a:	4618      	mov	r0, r3
 800113c:	f00d fc9e 	bl	800ea7c <siprintf>
	lcd_send_string(str);
 8001140:	463b      	mov	r3, r7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff9b 	bl	800107e <lcd_send_string>
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000010 	.word	0x20000010
 8001154:	0800f1ac 	.word	0x0800f1ac

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b095      	sub	sp, #84	; 0x54
 800115c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 fe4d 	bl	8001dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f91f 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f000 fa7d 	bl	8001664 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f000 fa5b 	bl	8001624 <MX_DMA_Init>
  MX_I2C1_Init();
 800116e:	f000 f9ad 	bl	80014cc <MX_I2C1_Init>
  MX_I2S3_Init();
 8001172:	f000 f9d9 	bl	8001528 <MX_I2S3_Init>
  MX_FATFS_Init();
 8001176:	f007 fb81 	bl	800887c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800117a:	f00d f82d 	bl	800e1d8 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 800117e:	f000 fa01 	bl	8001584 <MX_TIM1_Init>
  MX_DAC_Init();
 8001182:	f000 f979 	bl	8001478 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8001186:	4879      	ldr	r0, [pc, #484]	; (800136c <main+0x214>)
 8001188:	f006 f8ac 	bl	80072e4 <HAL_TIM_Base_Start>

  lcd_init ();
 800118c:	f7ff ff3d 	bl	800100a <lcd_init>
  lcd_clear();
 8001190:	f7ff ff12 	bl	8000fb8 <lcd_clear>
  HAL_Delay(1000);
 8001194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001198:	f000 fea2 	bl	8001ee0 <HAL_Delay>
  lcd_put_cur(0, 0);
 800119c:	2100      	movs	r1, #0
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff14 	bl	8000fcc <lcd_put_cur>
  lcd_send_string("MINI ");
 80011a4:	4872      	ldr	r0, [pc, #456]	; (8001370 <main+0x218>)
 80011a6:	f7ff ff6a 	bl	800107e <lcd_send_string>
  lcd_send_string("MP3 Player ");
 80011aa:	4872      	ldr	r0, [pc, #456]	; (8001374 <main+0x21c>)
 80011ac:	f7ff ff67 	bl	800107e <lcd_send_string>
  HAL_Delay(5000);
 80011b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80011b4:	f000 fe94 	bl	8001ee0 <HAL_Delay>
  lcd_clear();
 80011b8:	f7ff fefe 	bl	8000fb8 <lcd_clear>

  CS43_Init(hi2c1, MODE_I2S);
 80011bc:	4c6e      	ldr	r4, [pc, #440]	; (8001378 <main+0x220>)
 80011be:	2300      	movs	r3, #0
 80011c0:	9311      	str	r3, [sp, #68]	; 0x44
 80011c2:	4668      	mov	r0, sp
 80011c4:	f104 0310 	add.w	r3, r4, #16
 80011c8:	2244      	movs	r2, #68	; 0x44
 80011ca:	4619      	mov	r1, r3
 80011cc:	f00d fb50 	bl	800e870 <memcpy>
 80011d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d4:	f7ff fa08 	bl	80005e8 <CS43_Init>
  CS43_SetVolume(volume);
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <main+0x224>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb52 	bl	8000888 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff fb05 	bl	80007f4 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 80011ea:	4865      	ldr	r0, [pc, #404]	; (8001380 <main+0x228>)
 80011ec:	f7ff fc9c 	bl	8000b28 <audioI2S_setHandle>

  bool isSdCardMounted = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71bb      	strb	r3, [r7, #6]

  song_idx = DEFAULT_SONG_IDX;
 80011f8:	4b62      	ldr	r3, [pc, #392]	; (8001384 <main+0x22c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011fe:	f00d f811 	bl	800e224 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8001202:	4b61      	ldr	r3, [pc, #388]	; (8001388 <main+0x230>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <main+0xc0>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	485e      	ldr	r0, [pc, #376]	; (800138c <main+0x234>)
 8001212:	f001 fd9f 	bl	8002d54 <HAL_GPIO_WritePin>
 8001216:	e009      	b.n	800122c <main+0xd4>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <main+0x230>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d105      	bne.n	800122c <main+0xd4>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4859      	ldr	r0, [pc, #356]	; (800138c <main+0x234>)
 8001228:	f001 fd94 	bl	8002d54 <HAL_GPIO_WritePin>
    }

    if(Appli_state == APPLICATION_READY)
 800122c:	4b56      	ldr	r3, [pc, #344]	; (8001388 <main+0x230>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d1e4      	bne.n	80011fe <main+0xa6>
    {
    	if(!isSdCardMounted)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <main+0xf6>
    	{
    		isSdCardMounted = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	4952      	ldr	r1, [pc, #328]	; (8001390 <main+0x238>)
 8001248:	4852      	ldr	r0, [pc, #328]	; (8001394 <main+0x23c>)
 800124a:	f00c f975 	bl	800d538 <f_mount>
    	}

    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800124e:	2101      	movs	r1, #1
 8001250:	4851      	ldr	r0, [pc, #324]	; (8001398 <main+0x240>)
 8001252:	f001 fd67 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0d0      	beq.n	80011fe <main+0xa6>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001262:	484a      	ldr	r0, [pc, #296]	; (800138c <main+0x234>)
 8001264:	f001 fd76 	bl	8002d54 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 8001268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126c:	f000 fe38 	bl	8001ee0 <HAL_Delay>
    		if(wavPlayer_fileSelect(songs[song_idx])){
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <main+0x22c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <main+0x244>)
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fcf0 	bl	8000c64 <wavPlayer_fileSelect>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d05c      	beq.n	8001344 <main+0x1ec>
    			display_song_info();
 800128a:	f7ff ff0d 	bl	80010a8 <display_song_info>
				wavPlayer_play();
 800128e:	f7ff fd13 	bl	8000cb8 <wavPlayer_play>
			}

    		while(!wavPlayer_isFinished())
 8001292:	e057      	b.n	8001344 <main+0x1ec>
    		{
    			if((song_mov == PREV_SONG) || (song_mov == NEXT_SONG)){
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <main+0x248>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d004      	beq.n	80012a8 <main+0x150>
 800129e:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <main+0x248>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d116      	bne.n	80012d6 <main+0x17e>
    				// reset song_mov
    				song_mov = CURR_SONG;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <main+0x248>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
    				wavPlayer_stop();
 80012ae:	f7ff fda7 	bl	8000e00 <wavPlayer_stop>
    				if(wavPlayer_fileSelect(songs[song_idx])){
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <main+0x22c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <main+0x244>)
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fccf 	bl	8000c64 <wavPlayer_fileSelect>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d03b      	beq.n	8001344 <main+0x1ec>
    					display_song_info();
 80012cc:	f7ff feec 	bl	80010a8 <display_song_info>
    					wavPlayer_play();
 80012d0:	f7ff fcf2 	bl	8000cb8 <wavPlayer_play>
    				if(wavPlayer_fileSelect(songs[song_idx])){
 80012d4:	e036      	b.n	8001344 <main+0x1ec>
    				}
    			}
    			else{
					wavPlayer_process();
 80012d6:	f7ff fd21 	bl	8000d1c <wavPlayer_process>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80012da:	2101      	movs	r1, #1
 80012dc:	482e      	ldr	r0, [pc, #184]	; (8001398 <main+0x240>)
 80012de:	f001 fd21 	bl	8002d24 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02d      	beq.n	8001344 <main+0x1ec>
					{
						pauseResumeToggle ^= 1;
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	71bb      	strb	r3, [r7, #6]
						if(pauseResumeToggle)
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <main+0x1c0>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001306:	4821      	ldr	r0, [pc, #132]	; (800138c <main+0x234>)
 8001308:	f001 fd24 	bl	8002d54 <HAL_GPIO_WritePin>
							wavPlayer_pause();
 800130c:	f7ff fd88 	bl	8000e20 <wavPlayer_pause>
							HAL_Delay(200);
 8001310:	20c8      	movs	r0, #200	; 0xc8
 8001312:	f000 fde5 	bl	8001ee0 <HAL_Delay>
 8001316:	e015      	b.n	8001344 <main+0x1ec>
						}
						else
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <main+0x234>)
 8001320:	f001 fd18 	bl	8002d54 <HAL_GPIO_WritePin>
							HAL_Delay(1000);
 8001324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001328:	f000 fdda 	bl	8001ee0 <HAL_Delay>
							if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800132c:	2101      	movs	r1, #1
 800132e:	481a      	ldr	r0, [pc, #104]	; (8001398 <main+0x240>)
 8001330:	f001 fcf8 	bl	8002d24 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <main+0x1e8>
							{
								wavPlayer_stop();
 800133a:	f7ff fd61 	bl	8000e00 <wavPlayer_stop>
 800133e:	e001      	b.n	8001344 <main+0x1ec>
							}
							else
							{
								wavPlayer_resume();
 8001340:	f7ff fd74 	bl	8000e2c <wavPlayer_resume>
    		while(!wavPlayer_isFinished())
 8001344:	f7ff fd78 	bl	8000e38 <wavPlayer_isFinished>
 8001348:	4603      	mov	r3, r0
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d19f      	bne.n	8001294 <main+0x13c>
							}
						}
					}
				}
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <main+0x234>)
 800135c:	f001 fcfa 	bl	8002d54 <HAL_GPIO_WritePin>
    		HAL_Delay(1000);
 8001360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001364:	f000 fdbc 	bl	8001ee0 <HAL_Delay>
    MX_USB_HOST_Process();
 8001368:	e749      	b.n	80011fe <main+0xa6>
 800136a:	bf00      	nop
 800136c:	2000146c 	.word	0x2000146c
 8001370:	0800f1bc 	.word	0x0800f1bc
 8001374:	0800f1c4 	.word	0x0800f1c4
 8001378:	20001370 	.word	0x20001370
 800137c:	20000010 	.word	0x20000010
 8001380:	200013c4 	.word	0x200013c4
 8001384:	20000011 	.word	0x20000011
 8001388:	20001b04 	.word	0x20001b04
 800138c:	40020c00 	.word	0x40020c00
 8001390:	200014c4 	.word	0x200014c4
 8001394:	200014c8 	.word	0x200014c8
 8001398:	40020000 	.word	0x40020000
 800139c:	20000000 	.word	0x20000000
 80013a0:	200014b4 	.word	0x200014b4

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	; 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00d fa6a 	bl	800e88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <SystemClock_Config+0xcc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a27      	ldr	r2, [pc, #156]	; (8001470 <SystemClock_Config+0xcc>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <SystemClock_Config+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <SystemClock_Config+0xd0>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001414:	2308      	movs	r3, #8
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001418:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001422:	2307      	movs	r3, #7
 8001424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f91a 	bl	8006664 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001436:	f000 fa7b 	bl	8001930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2302      	movs	r3, #2
 8001440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001446:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001450:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2105      	movs	r1, #5
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fb7b 	bl	8006b54 <HAL_RCC_ClockConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001464:	f000 fa64 	bl	8001930 <Error_Handler>
  }
}
 8001468:	bf00      	nop
 800146a:	3750      	adds	r7, #80	; 0x50
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_DAC_Init+0x4c>)
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <MX_DAC_Init+0x50>)
 800148a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_DAC_Init+0x4c>)
 800148e:	f000 fe5c 	bl	800214a <HAL_DAC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001498:	f000 fa4a 	bl	8001930 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2210      	movs	r2, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_DAC_Init+0x4c>)
 80014ac:	f000 fe6f 	bl	800218e <HAL_DAC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014b6:	f000 fa3b 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000135c 	.word	0x2000135c
 80014c8:	40007400 	.word	0x40007400

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_I2C1_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_I2C1_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_I2C1_Init+0x50>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_I2C1_Init+0x58>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_I2C1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_I2C1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x50>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_I2C1_Init+0x50>)
 800150a:	f003 f879 	bl	8004600 <HAL_I2C_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 fa0c 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20001370 	.word	0x20001370
 8001520:	40005400 	.word	0x40005400
 8001524:	000186a0 	.word	0x000186a0

08001528 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_I2S3_Init+0x54>)
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <MX_I2S3_Init+0x58>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2S3_Init+0x54>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_I2S3_Init+0x54>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_I2S3_Init+0x54>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_I2S3_Init+0x54>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_I2S3_Init+0x54>)
 8001550:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001554:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_I2S3_Init+0x54>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_I2S3_Init+0x54>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_I2S3_Init+0x54>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_I2S3_Init+0x54>)
 800156a:	f003 ffdf 	bl	800552c <HAL_I2S_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001574:	f000 f9dc 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200013c4 	.word	0x200013c4
 8001580:	40003c00 	.word	0x40003c00

08001584 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM1_Init+0x98>)
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <MX_TIM1_Init+0x9c>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM1_Init+0x98>)
 80015a8:	2247      	movs	r2, #71	; 0x47
 80015aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM1_Init+0x98>)
 80015b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_TIM1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM1_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_TIM1_Init+0x98>)
 80015ce:	f005 fe39 	bl	8007244 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 f9aa 	bl	8001930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM1_Init+0x98>)
 80015ea:	f005 fee3 	bl	80073b4 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015f4:	f000 f99c 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM1_Init+0x98>)
 8001606:	f006 f8d7 	bl	80077b8 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001610:	f000 f98e 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000146c 	.word	0x2000146c
 8001620:	40010000 	.word	0x40010000

08001624 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_DMA_Init+0x3c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <MX_DMA_Init+0x3c>)
 8001634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_DMA_Init+0x3c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2010      	movs	r0, #16
 800164c:	f000 fd47 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001650:	2010      	movs	r0, #16
 8001652:	f000 fd60 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	; 0x30
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <MX_GPIO_Init+0x1c8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a6a      	ldr	r2, [pc, #424]	; (800182c <MX_GPIO_Init+0x1c8>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b68      	ldr	r3, [pc, #416]	; (800182c <MX_GPIO_Init+0x1c8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <MX_GPIO_Init+0x1c8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a63      	ldr	r2, [pc, #396]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b5d      	ldr	r3, [pc, #372]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a5c      	ldr	r2, [pc, #368]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b56      	ldr	r3, [pc, #344]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b53      	ldr	r3, [pc, #332]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b4f      	ldr	r3, [pc, #316]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a4e      	ldr	r2, [pc, #312]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b4c      	ldr	r3, [pc, #304]	; (800182c <MX_GPIO_Init+0x1c8>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <MX_GPIO_Init+0x1c8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a47      	ldr	r2, [pc, #284]	; (800182c <MX_GPIO_Init+0x1c8>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b45      	ldr	r3, [pc, #276]	; (800182c <MX_GPIO_Init+0x1c8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001722:	2200      	movs	r2, #0
 8001724:	21ff      	movs	r1, #255	; 0xff
 8001726:	4842      	ldr	r0, [pc, #264]	; (8001830 <MX_GPIO_Init+0x1cc>)
 8001728:	f001 fb14 	bl	8002d54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2101      	movs	r1, #1
 8001730:	4840      	ldr	r0, [pc, #256]	; (8001834 <MX_GPIO_Init+0x1d0>)
 8001732:	f001 fb0f 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001736:	2200      	movs	r2, #0
 8001738:	f24f 0110 	movw	r1, #61456	; 0xf010
 800173c:	483e      	ldr	r0, [pc, #248]	; (8001838 <MX_GPIO_Init+0x1d4>)
 800173e:	f001 fb09 	bl	8002d54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001742:	23ff      	movs	r3, #255	; 0xff
 8001744:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4835      	ldr	r0, [pc, #212]	; (8001830 <MX_GPIO_Init+0x1cc>)
 800175a:	f001 f947 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800175e:	2301      	movs	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	482f      	ldr	r0, [pc, #188]	; (8001834 <MX_GPIO_Init+0x1d0>)
 8001776:	f001 f939 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800177a:	2301      	movs	r3, #1
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	482b      	ldr	r0, [pc, #172]	; (800183c <MX_GPIO_Init+0x1d8>)
 800178e:	f001 f92d 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001792:	2310      	movs	r3, #16
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4823      	ldr	r0, [pc, #140]	; (8001834 <MX_GPIO_Init+0x1d0>)
 80017a6:	f001 f921 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80017aa:	231e      	movs	r3, #30
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b4:	2302      	movs	r3, #2
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4820      	ldr	r0, [pc, #128]	; (8001840 <MX_GPIO_Init+0x1dc>)
 80017c0:	f001 f914 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80017c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80017c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <MX_GPIO_Init+0x1d4>)
 80017de:	f001 f905 	bl	80029ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2007      	movs	r0, #7
 80017e8:	f000 fc79 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017ec:	2007      	movs	r0, #7
 80017ee:	f000 fc92 	bl	8002116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2008      	movs	r0, #8
 80017f8:	f000 fc71 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017fc:	2008      	movs	r0, #8
 80017fe:	f000 fc8a 	bl	8002116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2009      	movs	r0, #9
 8001808:	f000 fc69 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800180c:	2009      	movs	r0, #9
 800180e:	f000 fc82 	bl	8002116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	200a      	movs	r0, #10
 8001818:	f000 fc61 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800181c:	200a      	movs	r0, #10
 800181e:	f000 fc7a 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40021000 	.word	0x40021000
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800184e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001852:	4833      	ldr	r0, [pc, #204]	; (8001920 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001854:	f001 fa97 	bl	8002d86 <HAL_GPIO_TogglePin>
  for(uint32_t i = 0; i < 10000; i++);
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e002      	b.n	8001864 <HAL_GPIO_EXTI_Callback+0x20>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f242 720f 	movw	r2, #9999	; 0x270f
 800186a:	4293      	cmp	r3, r2
 800186c:	d9f7      	bls.n	800185e <HAL_GPIO_EXTI_Callback+0x1a>

  if(GPIO_Pin == GPIO_PIN_1)
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d114      	bne.n	800189e <HAL_GPIO_EXTI_Callback+0x5a>
  {
	  if(volume < 215){
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2bd6      	cmp	r3, #214	; 0xd6
 800187c:	d84c      	bhi.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
		  volume+= 10;
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	330a      	adds	r3, #10
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b26      	ldr	r3, [pc, #152]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 800188a:	701a      	strb	r2, [r3, #0]
		  CS43_SetVolume(volume);
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fff8 	bl	8000888 <CS43_SetVolume>
		  update_volume_display();
 8001898:	f7ff fc42 	bl	8001120 <update_volume_display>
	  if(song_idx > 0){
		  song_idx--;
		  song_mov = PREV_SONG;
	  }
  }
}
 800189c:	e03c      	b.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_2)
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d114      	bne.n	80018ce <HAL_GPIO_EXTI_Callback+0x8a>
	  if(volume > 10){
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d934      	bls.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
		  volume-= 10;
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3b0a      	subs	r3, #10
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018ba:	701a      	strb	r2, [r3, #0]
		  CS43_SetVolume(volume);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe ffe0 	bl	8000888 <CS43_SetVolume>
		  update_volume_display();
 80018c8:	f7ff fc2a 	bl	8001120 <update_volume_display>
}
 80018cc:	e024      	b.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_3)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d10f      	bne.n	80018f4 <HAL_GPIO_EXTI_Callback+0xb0>
	 if(song_idx < NUM_SONGS){
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d81c      	bhi.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
		 song_idx++;
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018ea:	701a      	strb	r2, [r3, #0]
		 song_mov = NEXT_SONG;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_GPIO_EXTI_Callback+0xe8>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
}
 80018f2:	e011      	b.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_4)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d10e      	bne.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
	  if(song_idx > 0){
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_GPIO_EXTI_Callback+0xd4>
		  song_idx--;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001910:	701a      	strb	r2, [r3, #0]
		  song_mov = PREV_SONG;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020c00 	.word	0x40020c00
 8001924:	20000010 	.word	0x20000010
 8001928:	20000011 	.word	0x20000011
 800192c:	200014b4 	.word	0x200014b4

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	e7fe      	b.n	8001938 <Error_Handler+0x8>
	...

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_MspInit+0x4c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_MspInit+0x4c>)
 800194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001950:	6453      	str	r3, [r2, #68]	; 0x44
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_MspInit+0x4c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a08      	ldr	r2, [pc, #32]	; (8001988 <HAL_MspInit+0x4c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800197a:	2007      	movs	r0, #7
 800197c:	f000 fba4 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_DAC_MspInit+0x7c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d127      	bne.n	80019fe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_DAC_MspInit+0x80>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019e6:	2320      	movs	r3, #32
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ea:	2303      	movs	r3, #3
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_DAC_MspInit+0x84>)
 80019fa:	f000 fff7 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40007400 	.word	0x40007400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_I2C_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12c      	bne.n	8001a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a64:	2304      	movs	r3, #4
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HAL_I2C_MspInit+0x8c>)
 8001a70:	f000 ffbc 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_I2S_MspInit+0x164>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	f040 8095 	bne.w	8001c00 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001ada:	f240 130f 	movw	r3, #271	; 0x10f
 8001ade:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fa3f 	bl	8006f6c <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001af4:	f7ff ff1c 	bl	8001930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a42      	ldr	r2, [pc, #264]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <HAL_I2S_MspInit+0x168>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	482a      	ldr	r0, [pc, #168]	; (8001c10 <HAL_I2S_MspInit+0x16c>)
 8001b68:	f000 ff40 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001b6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	4822      	ldr	r0, [pc, #136]	; (8001c14 <HAL_I2S_MspInit+0x170>)
 8001b8a:	f000 ff2f 	bl	80029ec <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_I2S_MspInit+0x178>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001be6:	f000 fb21 	bl	800222c <HAL_DMA_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001bf0:	f7ff fe9e 	bl	8001930 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_I2S_MspInit+0x174>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3738      	adds	r7, #56	; 0x38
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40003c00 	.word	0x40003c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020800 	.word	0x40020800
 8001c18:	2000140c 	.word	0x2000140c
 8001c1c:	40026088 	.word	0x40026088

08001c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_TIM_Base_MspInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10d      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800

08001c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler+0x4>

08001c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler+0x4>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb0:	f000 f8f6 	bl	8001ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f001 f87d 	bl	8002dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cca:	2004      	movs	r0, #4
 8001ccc:	f001 f876 	bl	8002dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001cd8:	2008      	movs	r0, #8
 8001cda:	f001 f86f 	bl	8002dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ce6:	2010      	movs	r0, #16
 8001ce8:	f001 f868 	bl	8002dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA1_Stream5_IRQHandler+0x10>)
 8001cf6:	f000 fc0f 	bl	8002518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000140c 	.word	0x2000140c

08001d04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <OTG_FS_IRQHandler+0x10>)
 8001d0a:	f001 fad9 	bl	80032c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20001b08 	.word	0x20001b08

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f00c fd58 	bl	800e7fc <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20020000 	.word	0x20020000
 8001d78:	00002000 	.word	0x00002000
 8001d7c:	200014b8 	.word	0x200014b8
 8001d80:	20001e20 	.word	0x20001e20

08001d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dae:	490e      	ldr	r1, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc4:	4c0b      	ldr	r4, [pc, #44]	; (8001df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff ffd7 	bl	8001d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f00c fd17 	bl	800e808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7ff f9bd 	bl	8001158 <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001dec:	0800f370 	.word	0x0800f370
  ldr r2, =_sbss
 8001df0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001df4:	20001e1c 	.word	0x20001e1c

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <HAL_Init+0x40>)
 8001e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <HAL_Init+0x40>)
 8001e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_Init+0x40>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f94f 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 f808 	bl	8001e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e30:	f7ff fd84 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00

08001e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x54>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x58>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f967 	bl	8002132 <HAL_SYSTICK_Config>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00e      	b.n	8001e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d80a      	bhi.n	8001e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f92f 	bl	80020de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e80:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <HAL_InitTick+0x5c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000014 	.word	0x20000014
 8001e98:	2000001c 	.word	0x2000001c
 8001e9c:	20000018 	.word	0x20000018

08001ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_IncTick+0x24>)
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	2000001c 	.word	0x2000001c
 8001ec4:	200014bc 	.word	0x200014bc

08001ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_GetTick+0x14>)
 8001ece:	681b      	ldr	r3, [r3, #0]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	200014bc 	.word	0x200014bc

08001ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff ffee 	bl	8001ec8 <HAL_GetTick>
 8001eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d005      	beq.n	8001f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_Delay+0x44>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f06:	bf00      	nop
 8001f08:	f7ff ffde 	bl	8001ec8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d8f7      	bhi.n	8001f08 <HAL_Delay+0x28>
  {
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000001c 	.word	0x2000001c

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f7ff ff8e 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff29 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff3e 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff8e 	bl	800201c <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff31 	bl	8001f8c <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffa2 	bl	8002084 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e014      	b.n	8002186 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d105      	bne.n	8002172 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fc0d 	bl	800198c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800218e:	b480      	push	{r7}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	795b      	ldrb	r3, [r3, #5]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_DAC_ConfigChannel+0x18>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e03c      	b.n	8002220 <HAL_DAC_ConfigChannel+0x92>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2201      	movs	r2, #1
 80021aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2202      	movs	r2, #2
 80021b0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	22c0      	movs	r2, #192	; 0xc0
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fe46 	bl	8001ec8 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e099      	b.n	800237c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002268:	e00f      	b.n	800228a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226a:	f7ff fe2d 	bl	8001ec8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b05      	cmp	r3, #5
 8002276:	d908      	bls.n	800228a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e078      	b.n	800237c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e8      	bne.n	800226a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_DMA_Init+0x158>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4313      	orrs	r3, r2
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0307 	bic.w	r3, r3, #7
 800230a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b04      	cmp	r3, #4
 800231c:	d117      	bne.n	800234e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fadf 	bl	80028f4 <DMA_CheckFifoParam>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800234a:	2301      	movs	r3, #1
 800234c:	e016      	b.n	800237c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa96 	bl	8002888 <DMA_CalcBaseAndBitshift>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	223f      	movs	r2, #63	; 0x3f
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f010803f 	.word	0xf010803f

08002388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_DMA_Start_IT+0x26>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e040      	b.n	8002430 <HAL_DMA_Start_IT+0xa8>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d12f      	bne.n	8002422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fa28 	bl	800282c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	223f      	movs	r2, #63	; 0x3f
 80023e2:	409a      	lsls	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0216 	orr.w	r2, r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0208 	orr.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e005      	b.n	800242e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff fd3f 	bl	8001ec8 <HAL_GetTick>
 800244a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e052      	b.n	8002510 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0216 	bic.w	r2, r2, #22
 8002478:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_DMA_Abort+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0208 	bic.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	e013      	b.n	80024e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024bc:	f7ff fd04 	bl	8001ec8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d90c      	bls.n	80024e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2203      	movs	r2, #3
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e015      	b.n	8002510 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e4      	bne.n	80024bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	223f      	movs	r2, #63	; 0x3f
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002524:	4b8e      	ldr	r3, [pc, #568]	; (8002760 <HAL_DMA_IRQHandler+0x248>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a8e      	ldr	r2, [pc, #568]	; (8002764 <HAL_DMA_IRQHandler+0x24c>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0a9b      	lsrs	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2208      	movs	r2, #8
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2208      	movs	r2, #8
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2201      	movs	r2, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2204      	movs	r2, #4
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2204      	movs	r2, #4
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2210      	movs	r2, #16
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d043      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2210      	movs	r2, #16
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e01f      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e016      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0208 	bic.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	2220      	movs	r2, #32
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 808f 	beq.w	80027b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8087 	beq.w	80027b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2220      	movs	r2, #32
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d136      	bne.n	8002730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0216 	bic.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x1da>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0208 	bic.w	r2, r2, #8
 8002700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	223f      	movs	r2, #63	; 0x3f
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07e      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
        }
        return;
 800272e:	e079      	b.n	8002824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01d      	beq.n	800277a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	2b00      	cmp	r3, #0
 8002752:	d031      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e02c      	b.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
 800275e:	bf00      	nop
 8002760:	20000014 	.word	0x20000014
 8002764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	e01e      	b.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0210 	bic.w	r2, r2, #16
 8002796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d032      	beq.n	8002826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2205      	movs	r2, #5
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3301      	adds	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d307      	bcc.n	8002800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f2      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x2cc>
 80027fe:	e000      	b.n	8002802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e000      	b.n	8002826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002824:	bf00      	nop
    }
  }
}
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d108      	bne.n	800286c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800286a:	e007      	b.n	800287c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3b10      	subs	r3, #16
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <DMA_CalcBaseAndBitshift+0x64>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <DMA_CalcBaseAndBitshift+0x68>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d909      	bls.n	80028ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	1d1a      	adds	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	; 0x58
 80028c8:	e007      	b.n	80028da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	aaaaaaab 	.word	0xaaaaaaab
 80028f0:	0800f290 	.word	0x0800f290

080028f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11f      	bne.n	800294e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d856      	bhi.n	80029c2 <DMA_CheckFifoParam+0xce>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <DMA_CheckFifoParam+0x28>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	0800293f 	.word	0x0800293f
 8002924:	0800292d 	.word	0x0800292d
 8002928:	080029c3 	.word	0x080029c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d046      	beq.n	80029c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293c:	e043      	b.n	80029c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002946:	d140      	bne.n	80029ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294c:	e03d      	b.n	80029ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	d121      	bne.n	800299c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d837      	bhi.n	80029ce <DMA_CheckFifoParam+0xda>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <DMA_CheckFifoParam+0x70>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002975 	.word	0x08002975
 8002968:	0800297b 	.word	0x0800297b
 800296c:	08002975 	.word	0x08002975
 8002970:	0800298d 	.word	0x0800298d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e030      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d025      	beq.n	80029d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298a:	e022      	b.n	80029d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002994:	d11f      	bne.n	80029d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800299a:	e01c      	b.n	80029d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d903      	bls.n	80029aa <DMA_CheckFifoParam+0xb6>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d003      	beq.n	80029b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029a8:	e018      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      break;
 80029ae:	e015      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e00b      	b.n	80029da <DMA_CheckFifoParam+0xe6>
      break;
 80029c2:	bf00      	nop
 80029c4:	e00a      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029c6:	bf00      	nop
 80029c8:	e008      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029ca:	bf00      	nop
 80029cc:	e006      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029ce:	bf00      	nop
 80029d0:	e004      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e002      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;   
 80029d6:	bf00      	nop
 80029d8:	e000      	b.n	80029dc <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
    }
  } 
  
  return status; 
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e16b      	b.n	8002ce0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 815a 	bne.w	8002cda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d005      	beq.n	8002a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d130      	bne.n	8002aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	2203      	movs	r2, #3
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 0201 	and.w	r2, r3, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d017      	beq.n	8002adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d123      	bne.n	8002b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80b4 	beq.w	8002cda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a5f      	ldr	r2, [pc, #380]	; (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_GPIO_Init+0x30c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8e:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_GPIO_Init+0x310>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_GPIO_Init+0x314>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d02b      	beq.n	8002c12 <HAL_GPIO_Init+0x226>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a51      	ldr	r2, [pc, #324]	; (8002d04 <HAL_GPIO_Init+0x318>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d025      	beq.n	8002c0e <HAL_GPIO_Init+0x222>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_GPIO_Init+0x31c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x21e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4f      	ldr	r2, [pc, #316]	; (8002d0c <HAL_GPIO_Init+0x320>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x21a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <HAL_GPIO_Init+0x324>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x216>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4d      	ldr	r2, [pc, #308]	; (8002d14 <HAL_GPIO_Init+0x328>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x212>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <HAL_GPIO_Init+0x32c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x20a>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00e      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	e00c      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	e00a      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x228>
 8002c12:	2300      	movs	r3, #0
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c24:	4935      	ldr	r1, [pc, #212]	; (8002cfc <HAL_GPIO_Init+0x310>)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd4:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	f67f ae90 	bls.w	8002a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40021400 	.word	0x40021400
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40021c00 	.word	0x40021c00
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	041a      	lsls	r2, r3, #16
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	400b      	ands	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fd32 	bl	8001844 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b08f      	sub	sp, #60	; 0x3c
 8002df0:	af0a      	add	r7, sp, #40	; 0x28
 8002df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e054      	b.n	8002ea8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f00b fa3b 	bl	800e294 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2203      	movs	r2, #3
 8002e22:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 fda9 	bl	8007994 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	687e      	ldr	r6, [r7, #4]
 8002e4a:	466d      	mov	r5, sp
 8002e4c:	f106 0410 	add.w	r4, r6, #16
 8002e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e60:	1d33      	adds	r3, r6, #4
 8002e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e64:	6838      	ldr	r0, [r7, #0]
 8002e66:	f004 fd23 	bl	80078b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 fda0 	bl	80079b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	687e      	ldr	r6, [r7, #4]
 8002e7e:	466d      	mov	r5, sp
 8002e80:	f106 0410 	add.w	r4, r6, #16
 8002e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e94:	1d33      	adds	r3, r6, #4
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	6838      	ldr	r0, [r7, #0]
 8002e9a:	f004 ff29 	bl	8007cf0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eb0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	70fb      	strb	r3, [r7, #3]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70bb      	strb	r3, [r7, #2]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_HCD_HC_Init+0x28>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e076      	b.n	8002fc6 <HAL_HCD_HC_Init+0x116>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	333d      	adds	r3, #61	; 0x3d
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3338      	adds	r3, #56	; 0x38
 8002f00:	787a      	ldrb	r2, [r7, #1]
 8002f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3340      	adds	r3, #64	; 0x40
 8002f12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f14:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3339      	adds	r3, #57	; 0x39
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	333f      	adds	r3, #63	; 0x3f
 8002f36:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	78ba      	ldrb	r2, [r7, #2]
 8002f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f44:	b2d0      	uxtb	r0, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	333a      	adds	r3, #58	; 0x3a
 8002f52:	4602      	mov	r2, r0
 8002f54:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da09      	bge.n	8002f72 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	333b      	adds	r3, #59	; 0x3b
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e008      	b.n	8002f84 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	333b      	adds	r3, #59	; 0x3b
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	333c      	adds	r3, #60	; 0x3c
 8002f92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f96:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	787c      	ldrb	r4, [r7, #1]
 8002f9e:	78ba      	ldrb	r2, [r7, #2]
 8002fa0:	78f9      	ldrb	r1, [r7, #3]
 8002fa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fa4:	9302      	str	r3, [sp, #8]
 8002fa6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	f005 f822 	bl	8007ffc <USB_HC_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd90      	pop	{r4, r7, pc}

08002fce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_HCD_HC_Halt+0x1e>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00f      	b.n	800300c <HAL_HCD_HC_Halt+0x3e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 fa72 	bl	80084e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	70fb      	strb	r3, [r7, #3]
 8003026:	460b      	mov	r3, r1
 8003028:	70bb      	strb	r3, [r7, #2]
 800302a:	4613      	mov	r3, r2
 800302c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	333b      	adds	r3, #59	; 0x3b
 800303c:	78ba      	ldrb	r2, [r7, #2]
 800303e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	333f      	adds	r3, #63	; 0x3f
 800304e:	787a      	ldrb	r2, [r7, #1]
 8003050:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003052:	7c3b      	ldrb	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d112      	bne.n	800307e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3342      	adds	r3, #66	; 0x42
 8003066:	2203      	movs	r2, #3
 8003068:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	333d      	adds	r3, #61	; 0x3d
 8003078:	7f3a      	ldrb	r2, [r7, #28]
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e008      	b.n	8003090 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3342      	adds	r3, #66	; 0x42
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b03      	cmp	r3, #3
 8003094:	f200 80c6 	bhi.w	8003224 <HAL_HCD_HC_SubmitRequest+0x210>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	08003211 	.word	0x08003211
 80030a8:	08003115 	.word	0x08003115
 80030ac:	08003193 	.word	0x08003193
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030b0:	7c3b      	ldrb	r3, [r7, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	f040 80b8 	bne.w	8003228 <HAL_HCD_HC_SubmitRequest+0x214>
 80030b8:	78bb      	ldrb	r3, [r7, #2]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 80b4 	bne.w	8003228 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80030c0:	8b3b      	ldrh	r3, [r7, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3355      	adds	r3, #85	; 0x55
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3355      	adds	r3, #85	; 0x55
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3342      	adds	r3, #66	; 0x42
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030fe:	e093      	b.n	8003228 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3342      	adds	r3, #66	; 0x42
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
      break;
 8003112:	e089      	b.n	8003228 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003114:	78bb      	ldrb	r3, [r7, #2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11d      	bne.n	8003156 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3355      	adds	r3, #85	; 0x55
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3342      	adds	r3, #66	; 0x42
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003140:	e073      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3342      	adds	r3, #66	; 0x42
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
      break;
 8003154:	e069      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3354      	adds	r3, #84	; 0x54
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3342      	adds	r3, #66	; 0x42
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
      break;
 800317c:	e055      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3342      	adds	r3, #66	; 0x42
 800318c:	2202      	movs	r2, #2
 800318e:	701a      	strb	r2, [r3, #0]
      break;
 8003190:	e04b      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003192:	78bb      	ldrb	r3, [r7, #2]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d11d      	bne.n	80031d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3355      	adds	r3, #85	; 0x55
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3342      	adds	r3, #66	; 0x42
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031be:	e034      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3342      	adds	r3, #66	; 0x42
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
      break;
 80031d2:	e02a      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3354      	adds	r3, #84	; 0x54
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3342      	adds	r3, #66	; 0x42
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
      break;
 80031fa:	e016      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3342      	adds	r3, #66	; 0x42
 800320a:	2202      	movs	r2, #2
 800320c:	701a      	strb	r2, [r3, #0]
      break;
 800320e:	e00c      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3342      	adds	r3, #66	; 0x42
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	e002      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003228:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3344      	adds	r3, #68	; 0x44
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	8b3a      	ldrh	r2, [r7, #24]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	202c      	movs	r0, #44	; 0x2c
 8003244:	fb00 f303 	mul.w	r3, r0, r3
 8003248:	440b      	add	r3, r1
 800324a:	334c      	adds	r3, #76	; 0x4c
 800324c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3360      	adds	r3, #96	; 0x60
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3350      	adds	r3, #80	; 0x50
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3339      	adds	r3, #57	; 0x39
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	222c      	movs	r2, #44	; 0x2c
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	3338      	adds	r3, #56	; 0x38
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	18d1      	adds	r1, r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	f004 ffc6 	bl	8008240 <USB_HC_StartXfer>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop

080032c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fcc7 	bl	8007c6a <USB_GetMode>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 80f6 	bne.w	80034d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fcab 	bl	8007c44 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80ec 	beq.w	80034ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 fca2 	bl	8007c44 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330a:	d104      	bne.n	8003316 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003314:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fc92 	bl	8007c44 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332a:	d104      	bne.n	8003336 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f004 fc82 	bl	8007c44 <USB_ReadInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800334a:	d104      	bne.n	8003356 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f004 fc72 	bl	8007c44 <USB_ReadInterrupts>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d103      	bne.n	8003372 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fc64 	bl	8007c44 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003386:	d11c      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003390:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80033a2:	2110      	movs	r1, #16
 80033a4:	6938      	ldr	r0, [r7, #16]
 80033a6:	f004 fb53 	bl	8007a50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80033aa:	6938      	ldr	r0, [r7, #16]
 80033ac:	f004 fb84 	bl	8007ab8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 fd5a 	bl	8007e70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f00a ffe7 	bl	800e390 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fc3c 	bl	8007c44 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d6:	d102      	bne.n	80033de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f001 f89e 	bl	800451a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fc2e 	bl	8007c44 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d106      	bne.n	8003400 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f00a ffb0 	bl	800e358 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2208      	movs	r2, #8
 80033fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fc1d 	bl	8007c44 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d101      	bne.n	8003418 <HAL_HCD_IRQHandler+0x158>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_HCD_IRQHandler+0x15a>
 8003418:	2300      	movs	r3, #0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0210 	bic.w	r2, r2, #16
 800342c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 ffa1 	bl	8004376 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0210 	orr.w	r2, r2, #16
 8003442:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 fbfb 	bl	8007c44 <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003458:	d13a      	bne.n	80034d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f005 f830 	bl	80084c4 <USB_HC_ReadInterrupt>
 8003464:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e025      	b.n	80034b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d018      	beq.n	80034b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d106      	bne.n	80034a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8ab 	bl	80035fa <HCD_HC_IN_IRQHandler>
 80034a4:	e005      	b.n	80034b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fbf9 	bl	8003ca4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3d4      	bcc.n	800346c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	e000      	b.n	80034d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80034ce:	bf00      	nop
    }
  }
}
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_HCD_Start+0x16>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e013      	b.n	8003514 <HAL_HCD_Start+0x3e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fd1c 	bl	8007f38 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f004 fa34 	bl	8007972 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_HCD_Stop+0x16>
 800352e:	2302      	movs	r3, #2
 8003530:	e00d      	b.n	800354e <HAL_HCD_Stop+0x32>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f005 f90a 	bl	8008758 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fcbe 	bl	8007ee4 <USB_ResetPort>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3360      	adds	r3, #96	; 0x60
 800358c:	781b      	ldrb	r3, [r3, #0]
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3350      	adds	r3, #80	; 0x50
 80035b4:	681b      	ldr	r3, [r3, #0]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fd02 	bl	8007fd8 <USB_GetCurrentFrame>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fcdd 	bl	8007faa <USB_GetHostSpeed>
 80035f0:	4603      	mov	r3, r0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d11a      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2304      	movs	r3, #4
 800363a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3361      	adds	r3, #97	; 0x61
 800364a:	2206      	movs	r2, #6
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f004 ff44 	bl	80084e6 <USB_HC_Halt>
 800365e:	e0af      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d11b      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3361      	adds	r3, #97	; 0x61
 800369a:	2207      	movs	r2, #7
 800369c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 ff1c 	bl	80084e6 <USB_HC_Halt>
 80036ae:	e087      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d109      	bne.n	80036da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	461a      	mov	r2, r3
 80036d4:	2320      	movs	r3, #32
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e072      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d11a      	bne.n	8003726 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	461a      	mov	r2, r3
 80036fe:	2308      	movs	r3, #8
 8003700:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	3361      	adds	r3, #97	; 0x61
 8003710:	2205      	movs	r2, #5
 8003712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f004 fee1 	bl	80084e6 <USB_HC_Halt>
 8003724:	e04c      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	d11b      	bne.n	8003776 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	3361      	adds	r3, #97	; 0x61
 8003760:	2208      	movs	r2, #8
 8003762:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f004 feb9 	bl	80084e6 <USB_HC_Halt>
 8003774:	e024      	b.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d119      	bne.n	80037c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	461a      	mov	r2, r3
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3361      	adds	r3, #97	; 0x61
 80037ac:	2206      	movs	r2, #6
 80037ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fe93 	bl	80084e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d6:	d112      	bne.n	80037fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 fe7f 	bl	80084e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80037fc:	e24e      	b.n	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 80df 	bne.w	80039d4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3348      	adds	r3, #72	; 0x48
 800382c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	0159      	lsls	r1, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	440b      	add	r3, r1
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003840:	1ad2      	subs	r2, r2, r3
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	202c      	movs	r0, #44	; 0x2c
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	440b      	add	r3, r1
 800384e:	3350      	adds	r3, #80	; 0x50
 8003850:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3361      	adds	r3, #97	; 0x61
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	335c      	adds	r3, #92	; 0x5c
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	2301      	movs	r3, #1
 8003886:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	333f      	adds	r3, #63	; 0x3f
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	333f      	adds	r3, #63	; 0x3f
 80038aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d111      	bne.n	80038d4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fe13 	bl	80084e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	2310      	movs	r3, #16
 80038d0:	6093      	str	r3, [r2, #8]
 80038d2:	e03a      	b.n	800394a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	333f      	adds	r3, #63	; 0x3f
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d009      	beq.n	80038fc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	333f      	adds	r3, #63	; 0x3f
 80038f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d126      	bne.n	800394a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	0151      	lsls	r1, r2, #5
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	440a      	add	r2, r1
 8003912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800391a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3360      	adds	r3, #96	; 0x60
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	b2d9      	uxtb	r1, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	202c      	movs	r0, #44	; 0x2c
 8003938:	fb00 f303 	mul.w	r3, r0, r3
 800393c:	4413      	add	r3, r2
 800393e:	3360      	adds	r3, #96	; 0x60
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f00a fd31 	bl	800e3ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d12b      	bne.n	80039aa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	3348      	adds	r3, #72	; 0x48
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	202c      	movs	r0, #44	; 0x2c
 8003968:	fb00 f202 	mul.w	r2, r0, r2
 800396c:	440a      	add	r2, r1
 800396e:	3240      	adds	r2, #64	; 0x40
 8003970:	8812      	ldrh	r2, [r2, #0]
 8003972:	fbb3 f3f2 	udiv	r3, r3, r2
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 818e 	beq.w	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3354      	adds	r3, #84	; 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f083 0301 	eor.w	r3, r3, #1
 8003994:	b2d8      	uxtb	r0, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	212c      	movs	r1, #44	; 0x2c
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3354      	adds	r3, #84	; 0x54
 80039a4:	4602      	mov	r2, r0
 80039a6:	701a      	strb	r2, [r3, #0]
}
 80039a8:	e178      	b.n	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	3354      	adds	r3, #84	; 0x54
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2d8      	uxtb	r0, r3
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3354      	adds	r3, #84	; 0x54
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]
}
 80039d2:	e163      	b.n	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	f040 80f6 	bne.w	8003bd8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3361      	adds	r3, #97	; 0x61
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d109      	bne.n	8003a14 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3360      	adds	r3, #96	; 0x60
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e0c9      	b.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3361      	adds	r3, #97	; 0x61
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d109      	bne.n	8003a3c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3360      	adds	r3, #96	; 0x60
 8003a36:	2205      	movs	r2, #5
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	e0b5      	b.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3361      	adds	r3, #97	; 0x61
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d009      	beq.n	8003a64 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3361      	adds	r3, #97	; 0x61
 8003a5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d150      	bne.n	8003b06 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	335c      	adds	r3, #92	; 0x5c
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	202c      	movs	r0, #44	; 0x2c
 8003a7c:	fb00 f303 	mul.w	r3, r0, r3
 8003a80:	440b      	add	r3, r1
 8003a82:	335c      	adds	r3, #92	; 0x5c
 8003a84:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	335c      	adds	r3, #92	; 0x5c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d912      	bls.n	8003ac0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	335c      	adds	r3, #92	; 0x5c
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3360      	adds	r3, #96	; 0x60
 8003aba:	2204      	movs	r2, #4
 8003abc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003abe:	e073      	b.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3360      	adds	r3, #96	; 0x60
 8003ace:	2202      	movs	r2, #2
 8003ad0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ae8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003af0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b04:	e050      	b.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3361      	adds	r3, #97	; 0x61
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d122      	bne.n	8003b60 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3360      	adds	r3, #96	; 0x60
 8003b28:	2202      	movs	r2, #2
 8003b2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e023      	b.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3361      	adds	r3, #97	; 0x61
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d119      	bne.n	8003ba8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	335c      	adds	r3, #92	; 0x5c
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	202c      	movs	r0, #44	; 0x2c
 8003b8c:	fb00 f303 	mul.w	r3, r0, r3
 8003b90:	440b      	add	r3, r1
 8003b92:	335c      	adds	r3, #92	; 0x5c
 8003b94:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3360      	adds	r3, #96	; 0x60
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	b2d9      	uxtb	r1, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	202c      	movs	r0, #44	; 0x2c
 8003bc4:	fb00 f303 	mul.w	r3, r0, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3360      	adds	r3, #96	; 0x60
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f00a fbeb 	bl	800e3ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bd6:	e061      	b.n	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d156      	bne.n	8003c9c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	333f      	adds	r3, #63	; 0x3f
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d111      	bne.n	8003c26 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	335c      	adds	r3, #92	; 0x5c
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fc61 	bl	80084e6 <USB_HC_Halt>
 8003c24:	e031      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	333f      	adds	r3, #63	; 0x3f
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	333f      	adds	r3, #63	; 0x3f
 8003c48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d11d      	bne.n	8003c8a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	335c      	adds	r3, #92	; 0x5c
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d110      	bne.n	8003c8a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3361      	adds	r3, #97	; 0x61
 8003c76:	2203      	movs	r2, #3
 8003c78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fc2e 	bl	80084e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c96:	461a      	mov	r2, r3
 8003c98:	2310      	movs	r3, #16
 8003c9a:	6093      	str	r3, [r2, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d11a      	bne.n	8003d0a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3361      	adds	r3, #97	; 0x61
 8003cf4:	2206      	movs	r2, #6
 8003cf6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fbef 	bl	80084e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003d08:	e331      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d12e      	bne.n	8003d7e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2320      	movs	r3, #32
 8003d30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	333d      	adds	r3, #61	; 0x3d
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f040 8313 	bne.w	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	333d      	adds	r3, #61	; 0x3d
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3360      	adds	r3, #96	; 0x60
 8003d68:	2202      	movs	r2, #2
 8003d6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fbb5 	bl	80084e6 <USB_HC_Halt>
}
 8003d7c:	e2f7      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d112      	bne.n	8003dbc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	461a      	mov	r2, r3
 8003da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 fb96 	bl	80084e6 <USB_HC_Halt>
}
 8003dba:	e2d8      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d140      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	335c      	adds	r3, #92	; 0x5c
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d111      	bne.n	8003e1e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	333d      	adds	r3, #61	; 0x3d
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2340      	movs	r3, #64	; 0x40
 8003e1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3361      	adds	r3, #97	; 0x61
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 fb4a 	bl	80084e6 <USB_HC_Halt>
}
 8003e52:	e28c      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d12c      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3361      	adds	r3, #97	; 0x61
 8003e78:	2204      	movs	r2, #4
 8003e7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	333d      	adds	r3, #61	; 0x3d
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	335c      	adds	r3, #92	; 0x5c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 fb1b 	bl	80084e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	6093      	str	r3, [r2, #8]
}
 8003ec2:	e254      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d11a      	bne.n	8003f10 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2308      	movs	r3, #8
 8003eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3361      	adds	r3, #97	; 0x61
 8003efa:	2205      	movs	r2, #5
 8003efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 faec 	bl	80084e6 <USB_HC_Halt>
}
 8003f0e:	e22e      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d140      	bne.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	335c      	adds	r3, #92	; 0x5c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3361      	adds	r3, #97	; 0x61
 8003f46:	2203      	movs	r2, #3
 8003f48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	333d      	adds	r3, #61	; 0x3d
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d112      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	333c      	adds	r3, #60	; 0x3c
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	333d      	adds	r3, #61	; 0x3d
 8003f80:	2201      	movs	r2, #1
 8003f82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 faa9 	bl	80084e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	6093      	str	r3, [r2, #8]
}
 8003fa6:	e1e2      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d164      	bne.n	8004088 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d111      	bne.n	8003fea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3361      	adds	r3, #97	; 0x61
 8003fd4:	2206      	movs	r2, #6
 8003fd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f004 fa7f 	bl	80084e6 <USB_HC_Halt>
 8003fe8:	e044      	b.n	8004074 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	202c      	movs	r0, #44	; 0x2c
 8004002:	fb00 f303 	mul.w	r3, r0, r3
 8004006:	440b      	add	r3, r1
 8004008:	335c      	adds	r3, #92	; 0x5c
 800400a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	335c      	adds	r3, #92	; 0x5c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d920      	bls.n	8004062 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	335c      	adds	r3, #92	; 0x5c
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3360      	adds	r3, #96	; 0x60
 8004040:	2204      	movs	r2, #4
 8004042:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	202c      	movs	r0, #44	; 0x2c
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	4413      	add	r3, r2
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f00a f9a6 	bl	800e3ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8004060:	e008      	b.n	8004074 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	3360      	adds	r3, #96	; 0x60
 8004070:	2202      	movs	r2, #2
 8004072:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	461a      	mov	r2, r3
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	6093      	str	r3, [r2, #8]
}
 8004086:	e172      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d11b      	bne.n	80040d8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	212c      	movs	r1, #44	; 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3361      	adds	r3, #97	; 0x61
 80040ae:	2208      	movs	r2, #8
 80040b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 fa12 	bl	80084e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	461a      	mov	r2, r3
 80040d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d4:	6093      	str	r3, [r2, #8]
}
 80040d6:	e14a      	b.n	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	f040 813f 	bne.w	800436e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3361      	adds	r3, #97	; 0x61
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d17d      	bne.n	8004200 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3360      	adds	r3, #96	; 0x60
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	333f      	adds	r3, #63	; 0x3f
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d00a      	beq.n	8004140 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	333f      	adds	r3, #63	; 0x3f
 8004138:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	f040 8100 	bne.w	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3355      	adds	r3, #85	; 0x55
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2d8      	uxtb	r0, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	3355      	adds	r3, #85	; 0x55
 800416c:	4602      	mov	r2, r0
 800416e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80e3 	bne.w	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	334c      	adds	r3, #76	; 0x4c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 80d8 	beq.w	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	334c      	adds	r3, #76	; 0x4c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	202c      	movs	r0, #44	; 0x2c
 80041a6:	fb00 f202 	mul.w	r2, r0, r2
 80041aa:	440a      	add	r2, r1
 80041ac:	3240      	adds	r2, #64	; 0x40
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	202c      	movs	r0, #44	; 0x2c
 80041ba:	fb00 f202 	mul.w	r2, r0, r2
 80041be:	440a      	add	r2, r1
 80041c0:	3240      	adds	r2, #64	; 0x40
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80b5 	beq.w	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	212c      	movs	r1, #44	; 0x2c
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	3355      	adds	r3, #85	; 0x55
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2d8      	uxtb	r0, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3355      	adds	r3, #85	; 0x55
 80041fa:	4602      	mov	r2, r0
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e09f      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3361      	adds	r3, #97	; 0x61
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d109      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3360      	adds	r3, #96	; 0x60
 8004222:	2202      	movs	r2, #2
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e08b      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3361      	adds	r3, #97	; 0x61
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d109      	bne.n	8004250 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3360      	adds	r3, #96	; 0x60
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e077      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3361      	adds	r3, #97	; 0x61
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d109      	bne.n	8004278 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3360      	adds	r3, #96	; 0x60
 8004272:	2205      	movs	r2, #5
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e063      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3361      	adds	r3, #97	; 0x61
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b06      	cmp	r3, #6
 800428a:	d009      	beq.n	80042a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3361      	adds	r3, #97	; 0x61
 800429a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800429c:	2b08      	cmp	r3, #8
 800429e:	d14f      	bne.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	335c      	adds	r3, #92	; 0x5c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	202c      	movs	r0, #44	; 0x2c
 80042b8:	fb00 f303 	mul.w	r3, r0, r3
 80042bc:	440b      	add	r3, r1
 80042be:	335c      	adds	r3, #92	; 0x5c
 80042c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	335c      	adds	r3, #92	; 0x5c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d912      	bls.n	80042fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	212c      	movs	r1, #44	; 0x2c
 80042dc:	fb01 f303 	mul.w	r3, r1, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	335c      	adds	r3, #92	; 0x5c
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3360      	adds	r3, #96	; 0x60
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e021      	b.n	8004340 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	212c      	movs	r1, #44	; 0x2c
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	4413      	add	r3, r2
 8004308:	3360      	adds	r3, #96	; 0x60
 800430a:	2202      	movs	r2, #2
 800430c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004324:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800432c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	4413      	add	r3, r2
 8004336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433a:	461a      	mov	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	461a      	mov	r2, r3
 800434e:	2302      	movs	r3, #2
 8004350:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	b2d9      	uxtb	r1, r3
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	202c      	movs	r0, #44	; 0x2c
 800435c:	fb00 f303 	mul.w	r3, r0, r3
 8004360:	4413      	add	r3, r2
 8004362:	3360      	adds	r3, #96	; 0x60
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f00a f81f 	bl	800e3ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800436e:	bf00      	nop
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	; 0x28
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	0c5b      	lsrs	r3, r3, #17
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d004      	beq.n	80043bc <HCD_RXQLVL_IRQHandler+0x46>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	f000 80a9 	beq.w	800450c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043ba:	e0aa      	b.n	8004512 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a6 	beq.w	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3344      	adds	r3, #68	; 0x44
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 809b 	beq.w	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	212c      	movs	r1, #44	; 0x2c
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	3350      	adds	r3, #80	; 0x50
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	441a      	add	r2, r3
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	202c      	movs	r0, #44	; 0x2c
 80043f4:	fb00 f303 	mul.w	r3, r0, r3
 80043f8:	440b      	add	r3, r1
 80043fa:	334c      	adds	r3, #76	; 0x4c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d87a      	bhi.n	80044f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	3344      	adds	r3, #68	; 0x44
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	b292      	uxth	r2, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f003 fbba 	bl	8007b94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	3344      	adds	r3, #68	; 0x44
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	441a      	add	r2, r3
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	202c      	movs	r0, #44	; 0x2c
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	440b      	add	r3, r1
 8004440:	3344      	adds	r3, #68	; 0x44
 8004442:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3350      	adds	r3, #80	; 0x50
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	441a      	add	r2, r3
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	202c      	movs	r0, #44	; 0x2c
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	440b      	add	r3, r1
 8004464:	3350      	adds	r3, #80	; 0x50
 8004466:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	0cdb      	lsrs	r3, r3, #19
 8004478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	3340      	adds	r3, #64	; 0x40
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4293      	cmp	r3, r2
 8004494:	d13c      	bne.n	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d039      	beq.n	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	3354      	adds	r3, #84	; 0x54
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	f083 0301 	eor.w	r3, r3, #1
 80044e2:	b2d8      	uxtb	r0, r3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3354      	adds	r3, #84	; 0x54
 80044f2:	4602      	mov	r2, r0
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	e00b      	b.n	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3360      	adds	r3, #96	; 0x60
 8004506:	2204      	movs	r2, #4
 8004508:	701a      	strb	r2, [r3, #0]
      break;
 800450a:	e001      	b.n	8004510 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004510:	bf00      	nop
  }
}
 8004512:	bf00      	nop
 8004514:	3728      	adds	r7, #40	; 0x28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004546:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d10b      	bne.n	800456a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d102      	bne.n	8004562 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f009 ff09 	bl	800e374 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d132      	bne.n	80045da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f043 0308 	orr.w	r3, r3, #8
 800457a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b04      	cmp	r3, #4
 8004584:	d126      	bne.n	80045d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d113      	bne.n	80045b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004598:	d106      	bne.n	80045a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 fc65 	bl	8007e70 <USB_InitFSLSPClkSel>
 80045a6:	e011      	b.n	80045cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fc5e 	bl	8007e70 <USB_InitFSLSPClkSel>
 80045b4:	e00a      	b.n	80045cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c4:	461a      	mov	r2, r3
 80045c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f009 fefb 	bl	800e3c8 <HAL_HCD_PortEnabled_Callback>
 80045d2:	e002      	b.n	80045da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f009 ff05 	bl	800e3e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d103      	bne.n	80045ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f043 0320 	orr.w	r3, r3, #32
 80045ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045f2:	461a      	mov	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6013      	str	r3, [r2, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e12b      	b.n	800486a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd f9f4 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004664:	f002 fc6e 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8004668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4a81      	ldr	r2, [pc, #516]	; (8004874 <HAL_I2C_Init+0x274>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d807      	bhi.n	8004684 <HAL_I2C_Init+0x84>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a80      	ldr	r2, [pc, #512]	; (8004878 <HAL_I2C_Init+0x278>)
 8004678:	4293      	cmp	r3, r2
 800467a:	bf94      	ite	ls
 800467c:	2301      	movls	r3, #1
 800467e:	2300      	movhi	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e006      	b.n	8004692 <HAL_I2C_Init+0x92>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a7d      	ldr	r2, [pc, #500]	; (800487c <HAL_I2C_Init+0x27c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0e7      	b.n	800486a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a78      	ldr	r2, [pc, #480]	; (8004880 <HAL_I2C_Init+0x280>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	0c9b      	lsrs	r3, r3, #18
 80046a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a6a      	ldr	r2, [pc, #424]	; (8004874 <HAL_I2C_Init+0x274>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d802      	bhi.n	80046d4 <HAL_I2C_Init+0xd4>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3301      	adds	r3, #1
 80046d2:	e009      	b.n	80046e8 <HAL_I2C_Init+0xe8>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	4a69      	ldr	r2, [pc, #420]	; (8004884 <HAL_I2C_Init+0x284>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	3301      	adds	r3, #1
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	495c      	ldr	r1, [pc, #368]	; (8004874 <HAL_I2C_Init+0x274>)
 8004704:	428b      	cmp	r3, r1
 8004706:	d819      	bhi.n	800473c <HAL_I2C_Init+0x13c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1e59      	subs	r1, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fbb1 f3f3 	udiv	r3, r1, r3
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800471c:	400b      	ands	r3, r1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_I2C_Init+0x138>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1e59      	subs	r1, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004730:	3301      	adds	r3, #1
 8004732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004736:	e051      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 8004738:	2304      	movs	r3, #4
 800473a:	e04f      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d111      	bne.n	8004768 <HAL_I2C_Init+0x168>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1e58      	subs	r0, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	440b      	add	r3, r1
 8004752:	fbb0 f3f3 	udiv	r3, r0, r3
 8004756:	3301      	adds	r3, #1
 8004758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e012      	b.n	800478e <HAL_I2C_Init+0x18e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1e58      	subs	r0, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	0099      	lsls	r1, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	fbb0 f3f3 	udiv	r3, r0, r3
 800477e:	3301      	adds	r3, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Init+0x196>
 8004792:	2301      	movs	r3, #1
 8004794:	e022      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10e      	bne.n	80047bc <HAL_I2C_Init+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1e58      	subs	r0, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	440b      	add	r3, r1
 80047ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	e00f      	b.n	80047dc <HAL_I2C_Init+0x1dc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	0099      	lsls	r1, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	6809      	ldr	r1, [r1, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800480a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6911      	ldr	r1, [r2, #16]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	000186a0 	.word	0x000186a0
 8004878:	001e847f 	.word	0x001e847f
 800487c:	003d08ff 	.word	0x003d08ff
 8004880:	431bde83 	.word	0x431bde83
 8004884:	10624dd3 	.word	0x10624dd3

08004888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	461a      	mov	r2, r3
 8004894:	460b      	mov	r3, r1
 8004896:	817b      	strh	r3, [r7, #10]
 8004898:	4613      	mov	r3, r2
 800489a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7fd fb14 	bl	8001ec8 <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	f040 80e0 	bne.w	8004a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2319      	movs	r3, #25
 80048b6:	2201      	movs	r2, #1
 80048b8:	4970      	ldr	r1, [pc, #448]	; (8004a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fc58 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0d3      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2C_Master_Transmit+0x50>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e0cc      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d007      	beq.n	80048fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800490c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2221      	movs	r2, #33	; 0x21
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2210      	movs	r2, #16
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	893a      	ldrh	r2, [r7, #8]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a50      	ldr	r2, [pc, #320]	; (8004a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fac2 	bl	8004ed0 <I2C_MasterRequestWrite>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e08d      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800496c:	e066      	b.n	8004a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fcd2 	bl	800531c <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d11b      	bne.n	8004a10 <HAL_I2C_Master_Transmit+0x188>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	6a39      	ldr	r1, [r7, #32]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fcc2 	bl	800539e <I2C_WaitOnBTFFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d107      	bne.n	8004a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e01a      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d194      	bne.n	800496e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	00100002 	.word	0x00100002
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
 8004a94:	4613      	mov	r3, r2
 8004a96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a98:	f7fd fa16 	bl	8001ec8 <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	f040 820b 	bne.w	8004ec2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2319      	movs	r3, #25
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	497c      	ldr	r1, [pc, #496]	; (8004ca8 <HAL_I2C_Master_Receive+0x224>)
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fb5a 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e1fe      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_I2C_Master_Receive+0x50>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e1f7      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d007      	beq.n	8004afa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0201 	orr.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2222      	movs	r2, #34	; 0x22
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2210      	movs	r2, #16
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	893a      	ldrh	r2, [r7, #8]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a5c      	ldr	r2, [pc, #368]	; (8004cac <HAL_I2C_Master_Receive+0x228>)
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b3c:	8979      	ldrh	r1, [r7, #10]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa46 	bl	8004fd4 <I2C_MasterRequestRead>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1b8      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d113      	bne.n	8004b82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e18c      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d11b      	bne.n	8004bc2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e16c      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d11b      	bne.n	8004c02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	e14c      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c28:	e138      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	f200 80f1 	bhi.w	8004e16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d123      	bne.n	8004c84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fbed 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e139      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c82:	e10b      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d14e      	bne.n	8004d2a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	2200      	movs	r2, #0
 8004c94:	4906      	ldr	r1, [pc, #24]	; (8004cb0 <HAL_I2C_Master_Receive+0x22c>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fa6a 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e10e      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
 8004ca6:	bf00      	nop
 8004ca8:	00100002 	.word	0x00100002
 8004cac:	ffff0000 	.word	0xffff0000
 8004cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d28:	e0b8      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	4966      	ldr	r1, [pc, #408]	; (8004ecc <HAL_I2C_Master_Receive+0x448>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fa1b 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0bf      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	494f      	ldr	r1, [pc, #316]	; (8004ecc <HAL_I2C_Master_Receive+0x448>)
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f9ed 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e091      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e14:	e042      	b.n	8004e9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fb00 	bl	8005420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e04c      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d118      	bne.n	8004e9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f aec2 	bne.w	8004c2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3728      	adds	r7, #40	; 0x28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00010004 	.word	0x00010004

08004ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d006      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d003      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e00b      	b.n	8004f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	2b12      	cmp	r3, #18
 8004f12:	d107      	bne.n	8004f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f91d 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e035      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d108      	bne.n	8004f74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f62:	897b      	ldrh	r3, [r7, #10]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f70:	611a      	str	r2, [r3, #16]
 8004f72:	e01b      	b.n	8004fac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f74:	897b      	ldrh	r3, [r7, #10]
 8004f76:	11db      	asrs	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f063 030f 	orn	r3, r3, #15
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <I2C_MasterRequestWrite+0xfc>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f943 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e010      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4907      	ldr	r1, [pc, #28]	; (8004fd0 <I2C_MasterRequestWrite+0x100>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f933 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010008 	.word	0x00010008
 8004fd0:	00010002 	.word	0x00010002

08004fd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d006      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800500c:	d108      	bne.n	8005020 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e00b      	b.n	8005038 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b11      	cmp	r3, #17
 8005026:	d107      	bne.n	8005038 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f893 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d103      	bne.n	8005068 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e079      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e05f      	b.n	8005148 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005088:	897b      	ldrh	r3, [r7, #10]
 800508a:	11db      	asrs	r3, r3, #7
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f063 030f 	orn	r3, r3, #15
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <I2C_MasterRequestRead+0x194>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f8b9 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e054      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4929      	ldr	r1, [pc, #164]	; (800516c <I2C_MasterRequestRead+0x198>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f8a9 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e044      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f831 	bl	8005170 <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d103      	bne.n	800512c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e017      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005130:	897b      	ldrh	r3, [r7, #10]
 8005132:	11db      	asrs	r3, r3, #7
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f063 030e 	orn	r3, r3, #14
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <I2C_MasterRequestRead+0x198>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f865 	bl	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	00010008 	.word	0x00010008
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005180:	e025      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fc fe9d 	bl	8001ec8 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e023      	b.n	8005216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10d      	bne.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	e00c      	b.n	800520e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	43da      	mvns	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d0b6      	beq.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800522c:	e051      	b.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d123      	bne.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f043 0204 	orr.w	r2, r3, #4
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e046      	b.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d021      	beq.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fc fe1b 	bl	8001ec8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e020      	b.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10c      	bne.n	80052f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	43da      	mvns	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	e00b      	b.n	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d18d      	bne.n	800522e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005328:	e02d      	b.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8ce 	bl	80054cc <I2C_IsAcknowledgeFailed>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e02d      	b.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d021      	beq.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005342:	f7fc fdc1 	bl	8001ec8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d302      	bcc.n	8005358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e007      	b.n	8005396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d1ca      	bne.n	800532a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053aa:	e02d      	b.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f88d 	bl	80054cc <I2C_IsAcknowledgeFailed>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e02d      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d021      	beq.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c4:	f7fc fd80 	bl	8001ec8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d302      	bcc.n	80053da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d116      	bne.n	8005408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e007      	b.n	8005418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d1ca      	bne.n	80053ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800542c:	e042      	b.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b10      	cmp	r3, #16
 800543a:	d119      	bne.n	8005470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0210 	mvn.w	r2, #16
 8005444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e029      	b.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fc fd2a 	bl	8001ec8 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d1b5      	bne.n	800542e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d11b      	bne.n	800551c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e128      	b.n	8005790 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a90      	ldr	r2, [pc, #576]	; (8005798 <HAL_I2S_Init+0x26c>)
 8005556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc faa3 	bl	8001aa4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005574:	f023 030f 	bic.w	r3, r3, #15
 8005578:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2202      	movs	r2, #2
 8005580:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d060      	beq.n	800564c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005592:	2310      	movs	r3, #16
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e001      	b.n	800559c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005598:	2320      	movs	r3, #32
 800559a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d802      	bhi.n	80055aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f001 fdec 	bl	8007188 <HAL_RCCEx_GetPeriphCLKFreq>
 80055b0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ba:	d125      	bne.n	8005608 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	3305      	adds	r3, #5
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e01f      	b.n	8005626 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	3305      	adds	r3, #5
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e00e      	b.n	8005626 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	3305      	adds	r3, #5
 8005624:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4a5c      	ldr	r2, [pc, #368]	; (800579c <HAL_I2S_Init+0x270>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	08db      	lsrs	r3, r3, #3
 8005630:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e003      	b.n	8005654 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800564c:	2302      	movs	r3, #2
 800564e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d902      	bls.n	8005660 <HAL_I2S_Init+0x134>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	d907      	bls.n	8005670 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f043 0210 	orr.w	r2, r3, #16
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e08f      	b.n	8005790 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	ea42 0103 	orr.w	r1, r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	430a      	orrs	r2, r1
 8005682:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800568e:	f023 030f 	bic.w	r3, r3, #15
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6851      	ldr	r1, [r2, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6892      	ldr	r2, [r2, #8]
 800569a:	4311      	orrs	r1, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68d2      	ldr	r2, [r2, #12]
 80056a0:	4311      	orrs	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6992      	ldr	r2, [r2, #24]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d161      	bne.n	8005780 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_I2S_Init+0x274>)
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <HAL_I2S_Init+0x278>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d101      	bne.n	80056d0 <HAL_I2S_Init+0x1a4>
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <HAL_I2S_Init+0x27c>)
 80056ce:	e001      	b.n	80056d4 <HAL_I2S_Init+0x1a8>
 80056d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	4932      	ldr	r1, [pc, #200]	; (80057a4 <HAL_I2S_Init+0x278>)
 80056dc:	428a      	cmp	r2, r1
 80056de:	d101      	bne.n	80056e4 <HAL_I2S_Init+0x1b8>
 80056e0:	4a31      	ldr	r2, [pc, #196]	; (80057a8 <HAL_I2S_Init+0x27c>)
 80056e2:	e001      	b.n	80056e8 <HAL_I2S_Init+0x1bc>
 80056e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80056e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056ec:	f023 030f 	bic.w	r3, r3, #15
 80056f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <HAL_I2S_Init+0x278>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d101      	bne.n	8005700 <HAL_I2S_Init+0x1d4>
 80056fc:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_I2S_Init+0x27c>)
 80056fe:	e001      	b.n	8005704 <HAL_I2S_Init+0x1d8>
 8005700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005704:	2202      	movs	r2, #2
 8005706:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_I2S_Init+0x278>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_I2S_Init+0x1ea>
 8005712:	4b25      	ldr	r3, [pc, #148]	; (80057a8 <HAL_I2S_Init+0x27c>)
 8005714:	e001      	b.n	800571a <HAL_I2S_Init+0x1ee>
 8005716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005726:	d003      	beq.n	8005730 <HAL_I2S_Init+0x204>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d103      	bne.n	8005738 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e001      	b.n	800573c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005746:	4313      	orrs	r3, r2
 8005748:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005750:	4313      	orrs	r3, r2
 8005752:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800575a:	4313      	orrs	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	4313      	orrs	r3, r2
 8005762:	b29b      	uxth	r3, r3
 8005764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005768:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <HAL_I2S_Init+0x278>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <HAL_I2S_Init+0x24c>
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <HAL_I2S_Init+0x27c>)
 8005776:	e001      	b.n	800577c <HAL_I2S_Init+0x250>
 8005778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800577c:	897a      	ldrh	r2, [r7, #10]
 800577e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	08006029 	.word	0x08006029
 800579c:	cccccccd 	.word	0xcccccccd
 80057a0:	080061b1 	.word	0x080061b1
 80057a4:	40003800 	.word	0x40003800
 80057a8:	40003400 	.word	0x40003400

080057ac <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_I2S_Transmit_DMA+0x1a>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e08e      	b.n	80058e8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_I2S_Transmit_DMA+0x2e>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e086      	b.n	80058e8 <HAL_I2S_Transmit_DMA+0x13c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d005      	beq.n	80057fa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
 80057f8:	e076      	b.n	80058e8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d002      	beq.n	8005826 <HAL_I2S_Transmit_DMA+0x7a>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b05      	cmp	r3, #5
 8005824:	d10a      	bne.n	800583c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	855a      	strh	r2, [r3, #42]	; 0x2a
 800583a:	e005      	b.n	8005848 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <HAL_I2S_Transmit_DMA+0x144>)
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <HAL_I2S_Transmit_DMA+0x148>)
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <HAL_I2S_Transmit_DMA+0x14c>)
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005868:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005870:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005876:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005878:	f7fc fd86 	bl	8002388 <HAL_DMA_Start_IT>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00f      	beq.n	80058a2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f043 0208 	orr.w	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e022      	b.n	80058e8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d107      	bne.n	80058c0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058be:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0202 	orr.w	r2, r2, #2
 80058dc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	08005f07 	.word	0x08005f07
 80058f4:	08005ec5 	.word	0x08005ec5
 80058f8:	08005f23 	.word	0x08005f23

080058fc <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_I2S_DMAPause+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e04a      	b.n	80059aa <HAL_I2S_DMAPause+0xae>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b03      	cmp	r3, #3
 8005926:	d108      	bne.n	800593a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0202 	bic.w	r2, r2, #2
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	e032      	b.n	80059a0 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b04      	cmp	r3, #4
 8005944:	d108      	bne.n	8005958 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	e023      	b.n	80059a0 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b05      	cmp	r3, #5
 8005962:	d11d      	bne.n	80059a0 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0203 	bic.w	r2, r2, #3
 8005972:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <HAL_I2S_DMAPause+0xbc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d101      	bne.n	8005982 <HAL_I2S_DMAPause+0x86>
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_I2S_DMAPause+0xc0>)
 8005980:	e001      	b.n	8005986 <HAL_I2S_DMAPause+0x8a>
 8005982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	490a      	ldr	r1, [pc, #40]	; (80059b8 <HAL_I2S_DMAPause+0xbc>)
 800598e:	428b      	cmp	r3, r1
 8005990:	d101      	bne.n	8005996 <HAL_I2S_DMAPause+0x9a>
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_I2S_DMAPause+0xc0>)
 8005994:	e001      	b.n	800599a <HAL_I2S_DMAPause+0x9e>
 8005996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800599a:	f022 0203 	bic.w	r2, r2, #3
 800599e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40003800 	.word	0x40003800
 80059bc:	40003400 	.word	0x40003400

080059c0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_I2S_DMAResume+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e07d      	b.n	8005ad4 <HAL_I2S_DMAResume+0x114>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d108      	bne.n	80059fe <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0202 	orr.w	r2, r2, #2
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	e056      	b.n	8005aac <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d108      	bne.n	8005a1c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	e047      	b.n	8005aac <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d141      	bne.n	8005aac <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0203 	orr.w	r2, r2, #3
 8005a36:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <HAL_I2S_DMAResume+0x120>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_I2S_DMAResume+0x86>
 8005a42:	4b28      	ldr	r3, [pc, #160]	; (8005ae4 <HAL_I2S_DMAResume+0x124>)
 8005a44:	e001      	b.n	8005a4a <HAL_I2S_DMAResume+0x8a>
 8005a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4923      	ldr	r1, [pc, #140]	; (8005ae0 <HAL_I2S_DMAResume+0x120>)
 8005a52:	428b      	cmp	r3, r1
 8005a54:	d101      	bne.n	8005a5a <HAL_I2S_DMAResume+0x9a>
 8005a56:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <HAL_I2S_DMAResume+0x124>)
 8005a58:	e001      	b.n	8005a5e <HAL_I2S_DMAResume+0x9e>
 8005a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a5e:	f042 0203 	orr.w	r2, r2, #3
 8005a62:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <HAL_I2S_DMAResume+0x120>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2S_DMAResume+0xb2>
 8005a6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_I2S_DMAResume+0x124>)
 8005a70:	e001      	b.n	8005a76 <HAL_I2S_DMAResume+0xb6>
 8005a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d115      	bne.n	8005aac <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_I2S_DMAResume+0x120>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_I2S_DMAResume+0xce>
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <HAL_I2S_DMAResume+0x124>)
 8005a8c:	e001      	b.n	8005a92 <HAL_I2S_DMAResume+0xd2>
 8005a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4911      	ldr	r1, [pc, #68]	; (8005ae0 <HAL_I2S_DMAResume+0x120>)
 8005a9a:	428b      	cmp	r3, r1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2S_DMAResume+0xe2>
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_I2S_DMAResume+0x124>)
 8005aa0:	e001      	b.n	8005aa6 <HAL_I2S_DMAResume+0xe6>
 8005aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aaa:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d107      	bne.n	8005aca <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40003800 	.word	0x40003800
 8005ae4:	40003400 	.word	0x40003400

08005ae8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d004      	beq.n	8005b08 <HAL_I2S_DMAStop+0x20>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 80d1 	bne.w	8005caa <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00f      	beq.n	8005b30 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fc fc8f 	bl	8002438 <HAL_DMA_Abort>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	f043 0208 	orr.w	r2, r3, #8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005b30:	2364      	movs	r3, #100	; 0x64
 8005b32:	2201      	movs	r2, #1
 8005b34:	2102      	movs	r1, #2
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb00 	bl	800613c <I2S_WaitFlagStateUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005b5a:	2364      	movs	r3, #100	; 0x64
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2180      	movs	r1, #128	; 0x80
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 faeb 	bl	800613c <I2S_WaitFlagStateUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0202 	bic.w	r2, r2, #2
 8005bb0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	f040 8165 	bne.w	8005e8a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fc fc33 	bl	8002438 <HAL_DMA_Abort>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bdc:	f043 0208 	orr.w	r2, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a8a      	ldr	r2, [pc, #552]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2S_DMAStop+0x10e>
 8005bf2:	4b8a      	ldr	r3, [pc, #552]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005bf4:	e001      	b.n	8005bfa <HAL_I2S_DMAStop+0x112>
 8005bf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4985      	ldr	r1, [pc, #532]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c02:	428b      	cmp	r3, r1
 8005c04:	d101      	bne.n	8005c0a <HAL_I2S_DMAStop+0x122>
 8005c06:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005c08:	e001      	b.n	8005c0e <HAL_I2S_DMAStop+0x126>
 8005c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c12:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a7e      	ldr	r2, [pc, #504]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d101      	bne.n	8005c26 <HAL_I2S_DMAStop+0x13e>
 8005c22:	4b7e      	ldr	r3, [pc, #504]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005c24:	e001      	b.n	8005c2a <HAL_I2S_DMAStop+0x142>
 8005c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a79      	ldr	r2, [pc, #484]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d101      	bne.n	8005c3c <HAL_I2S_DMAStop+0x154>
 8005c38:	4b78      	ldr	r3, [pc, #480]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005c3a:	e001      	b.n	8005c40 <HAL_I2S_DMAStop+0x158>
 8005c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <HAL_I2S_DMAStop+0x16c>
 8005c50:	4b72      	ldr	r3, [pc, #456]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005c52:	e001      	b.n	8005c58 <HAL_I2S_DMAStop+0x170>
 8005c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	496e      	ldr	r1, [pc, #440]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c60:	428b      	cmp	r3, r1
 8005c62:	d101      	bne.n	8005c68 <HAL_I2S_DMAStop+0x180>
 8005c64:	4b6d      	ldr	r3, [pc, #436]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005c66:	e001      	b.n	8005c6c <HAL_I2S_DMAStop+0x184>
 8005c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c92:	e0fa      	b.n	8005e8a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a5f      	ldr	r2, [pc, #380]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_I2S_DMAStop+0x1ba>
 8005c9e:	4b5f      	ldr	r3, [pc, #380]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005ca0:	e001      	b.n	8005ca6 <HAL_I2S_DMAStop+0x1be>
 8005ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ca6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ca8:	e0ef      	b.n	8005e8a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb2:	d005      	beq.n	8005cc0 <HAL_I2S_DMAStop+0x1d8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	f040 80e5 	bne.w	8005e8a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00f      	beq.n	8005ce8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fc fbb3 	bl	8002438 <HAL_DMA_Abort>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cdc:	f043 0208 	orr.w	r2, r3, #8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	f040 809a 	bne.w	8005e2a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00f      	beq.n	8005d1e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fc fb98 	bl	8002438 <HAL_DMA_Abort>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f043 0208 	orr.w	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005d1e:	f7fc f8d3 	bl	8001ec8 <HAL_GetTick>
 8005d22:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d24:	e012      	b.n	8005d4c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005d26:	f7fc f8cf 	bl	8001ec8 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b64      	cmp	r3, #100	; 0x64
 8005d32:	d90b      	bls.n	8005d4c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	f043 0201 	orr.w	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a31      	ldr	r2, [pc, #196]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <HAL_I2S_DMAStop+0x272>
 8005d56:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005d58:	e001      	b.n	8005d5e <HAL_I2S_DMAStop+0x276>
 8005d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d1de      	bne.n	8005d26 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005d68:	e012      	b.n	8005d90 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005d6a:	f7fc f8ad 	bl	8001ec8 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b64      	cmp	r3, #100	; 0x64
 8005d76:	d90b      	bls.n	8005d90 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7c:	f043 0201 	orr.w	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a20      	ldr	r2, [pc, #128]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_I2S_DMAStop+0x2b6>
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005d9c:	e001      	b.n	8005da2 <HAL_I2S_DMAStop+0x2ba>
 8005d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da8:	2b80      	cmp	r3, #128	; 0x80
 8005daa:	d0de      	beq.n	8005d6a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <HAL_I2S_DMAStop+0x2d2>
 8005db6:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005db8:	e001      	b.n	8005dbe <HAL_I2S_DMAStop+0x2d6>
 8005dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4914      	ldr	r1, [pc, #80]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	d101      	bne.n	8005dce <HAL_I2S_DMAStop+0x2e6>
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005dcc:	e001      	b.n	8005dd2 <HAL_I2S_DMAStop+0x2ea>
 8005dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_I2S_DMAStop+0x302>
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005de8:	e001      	b.n	8005dee <HAL_I2S_DMAStop+0x306>
 8005dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a07      	ldr	r2, [pc, #28]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2S_DMAStop+0x31a>
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005e00:	e001      	b.n	8005e06 <HAL_I2S_DMAStop+0x31e>
 8005e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4902      	ldr	r1, [pc, #8]	; (8005e18 <HAL_I2S_DMAStop+0x330>)
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	d106      	bne.n	8005e20 <HAL_I2S_DMAStop+0x338>
 8005e12:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <HAL_I2S_DMAStop+0x334>)
 8005e14:	e006      	b.n	8005e24 <HAL_I2S_DMAStop+0x33c>
 8005e16:	bf00      	nop
 8005e18:	40003800 	.word	0x40003800
 8005e1c:	40003400 	.word	0x40003400
 8005e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e24:	f022 0202 	bic.w	r2, r2, #2
 8005e28:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e68:	d10c      	bne.n	8005e84 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e002      	b.n	8005e8a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10e      	bne.n	8005ef8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0202 	bic.w	r2, r2, #2
 8005ee8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7fa fe7d 	bl	8000bf8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7fa fe81 	bl	8000c1c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0203 	bic.w	r2, r2, #3
 8005f3e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	f043 0208 	orr.w	r2, r3, #8
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ffa5 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10e      	bne.n	8005fc2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fb2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fa fe1b 	bl	8000bf8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	b292      	uxth	r2, r2
 8005fde:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	1c9a      	adds	r2, r3, #2
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10e      	bne.n	8006020 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006010:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ff3e 	bl	8005e9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b04      	cmp	r3, #4
 8006042:	d13a      	bne.n	80060ba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	d109      	bne.n	8006062 <I2S_IRQHandler+0x3a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d102      	bne.n	8006062 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ffb4 	bl	8005fca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d126      	bne.n	80060ba <I2S_IRQHandler+0x92>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b20      	cmp	r3, #32
 8006078:	d11f      	bne.n	80060ba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006088:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	f043 0202 	orr.w	r2, r3, #2
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fefb 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d136      	bne.n	8006134 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d109      	bne.n	80060e4 <I2S_IRQHandler+0xbc>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b80      	cmp	r3, #128	; 0x80
 80060dc:	d102      	bne.n	80060e4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff ff45 	bl	8005f6e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d122      	bne.n	8006134 <I2S_IRQHandler+0x10c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d11b      	bne.n	8006134 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800610a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	f043 0204 	orr.w	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff febe 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006134:	bf00      	nop
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800614c:	f7fb febc 	bl	8001ec8 <HAL_GetTick>
 8006150:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006152:	e018      	b.n	8006186 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d014      	beq.n	8006186 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800615c:	f7fb feb4 	bl	8001ec8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d902      	bls.n	8006172 <I2S_WaitFlagStateUntilTimeout+0x36>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e00f      	b.n	80061a6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d1d7      	bne.n	8006154 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a92      	ldr	r2, [pc, #584]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80061ca:	4b92      	ldr	r3, [pc, #584]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061cc:	e001      	b.n	80061d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80061ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a8b      	ldr	r2, [pc, #556]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d101      	bne.n	80061ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80061e8:	4b8a      	ldr	r3, [pc, #552]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061ea:	e001      	b.n	80061f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80061ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	d004      	beq.n	8006208 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 8099 	bne.w	800633a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d107      	bne.n	8006222 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f925 	bl	800646c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d107      	bne.n	800623c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9c8 	bl	80065cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d13a      	bne.n	80062bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d035      	beq.n	80062bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a6e      	ldr	r2, [pc, #440]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800625a:	4b6e      	ldr	r3, [pc, #440]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800625c:	e001      	b.n	8006262 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800625e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4969      	ldr	r1, [pc, #420]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800626a:	428b      	cmp	r3, r1
 800626c:	d101      	bne.n	8006272 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800626e:	4b69      	ldr	r3, [pc, #420]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006270:	e001      	b.n	8006276 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800627a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800628a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f043 0202 	orr.w	r2, r3, #2
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff fdfa 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	f040 80c3 	bne.w	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80bd 	beq.w	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a49      	ldr	r2, [pc, #292]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80062ee:	4b49      	ldr	r3, [pc, #292]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062f0:	e001      	b.n	80062f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80062f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4944      	ldr	r1, [pc, #272]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062fe:	428b      	cmp	r3, r1
 8006300:	d101      	bne.n	8006306 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006302:	4b44      	ldr	r3, [pc, #272]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006304:	e001      	b.n	800630a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800630a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800630e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006310:	2300      	movs	r3, #0
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	f043 0204 	orr.w	r2, r3, #4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fdbc 	bl	8005eb0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006338:	e089      	b.n	800644e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b02      	cmp	r3, #2
 8006342:	d107      	bne.n	8006354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8be 	bl	80064d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8fd 	bl	8006568 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d12f      	bne.n	80063d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02a      	beq.n	80063d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006390:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800639e:	e001      	b.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80063a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4919      	ldr	r1, [pc, #100]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063ac:	428b      	cmp	r3, r1
 80063ae:	d101      	bne.n	80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063b0:	4b18      	ldr	r3, [pc, #96]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063b2:	e001      	b.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	f043 0202 	orr.w	r2, r3, #2
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fd6c 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d136      	bne.n	8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d031      	beq.n	8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a07      	ldr	r2, [pc, #28]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d101      	bne.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80063f6:	4b07      	ldr	r3, [pc, #28]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063f8:	e001      	b.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80063fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4902      	ldr	r1, [pc, #8]	; (8006410 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006406:	428b      	cmp	r3, r1
 8006408:	d106      	bne.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800640a:	4b02      	ldr	r3, [pc, #8]	; (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800640c:	e006      	b.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800640e:	bf00      	nop
 8006410:	40003800 	.word	0x40003800
 8006414:	40003400 	.word	0x40003400
 8006418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006420:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006430:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	f043 0204 	orr.w	r2, r3, #4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fd32 	bl	8005eb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800644c:	e000      	b.n	8006450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800644e:	bf00      	nop
}
 8006450:	bf00      	nop
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	1c99      	adds	r1, r3, #2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6251      	str	r1, [r2, #36]	; 0x24
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d113      	bne.n	80064c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ffc9 	bl	8006458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	1c99      	adds	r1, r3, #2
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6251      	str	r1, [r2, #36]	; 0x24
 80064e2:	8819      	ldrh	r1, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <I2SEx_TxISR_I2SExt+0x90>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <I2SEx_TxISR_I2SExt+0x22>
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <I2SEx_TxISR_I2SExt+0x94>)
 80064f0:	e001      	b.n	80064f6 <I2SEx_TxISR_I2SExt+0x26>
 80064f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f6:	460a      	mov	r2, r1
 80064f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d121      	bne.n	8006556 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a12      	ldr	r2, [pc, #72]	; (8006560 <I2SEx_TxISR_I2SExt+0x90>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <I2SEx_TxISR_I2SExt+0x50>
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <I2SEx_TxISR_I2SExt+0x94>)
 800651e:	e001      	b.n	8006524 <I2SEx_TxISR_I2SExt+0x54>
 8006520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	490d      	ldr	r1, [pc, #52]	; (8006560 <I2SEx_TxISR_I2SExt+0x90>)
 800652c:	428b      	cmp	r3, r1
 800652e:	d101      	bne.n	8006534 <I2SEx_TxISR_I2SExt+0x64>
 8006530:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <I2SEx_TxISR_I2SExt+0x94>)
 8006532:	e001      	b.n	8006538 <I2SEx_TxISR_I2SExt+0x68>
 8006534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800653c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff81 	bl	8006458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40003800 	.word	0x40003800
 8006564:	40003400 	.word	0x40003400

08006568 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68d8      	ldr	r0, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	1c99      	adds	r1, r3, #2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006580:	b282      	uxth	r2, r0
 8006582:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d113      	bne.n	80065c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff ff4a 	bl	8006458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a20      	ldr	r2, [pc, #128]	; (800665c <I2SEx_RxISR_I2SExt+0x90>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d101      	bne.n	80065e2 <I2SEx_RxISR_I2SExt+0x16>
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <I2SEx_RxISR_I2SExt+0x94>)
 80065e0:	e001      	b.n	80065e6 <I2SEx_RxISR_I2SExt+0x1a>
 80065e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e6:	68d8      	ldr	r0, [r3, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	1c99      	adds	r1, r3, #2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80065f2:	b282      	uxth	r2, r0
 80065f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d121      	bne.n	8006652 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <I2SEx_RxISR_I2SExt+0x90>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <I2SEx_RxISR_I2SExt+0x50>
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <I2SEx_RxISR_I2SExt+0x94>)
 800661a:	e001      	b.n	8006620 <I2SEx_RxISR_I2SExt+0x54>
 800661c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	490d      	ldr	r1, [pc, #52]	; (800665c <I2SEx_RxISR_I2SExt+0x90>)
 8006628:	428b      	cmp	r3, r1
 800662a:	d101      	bne.n	8006630 <I2SEx_RxISR_I2SExt+0x64>
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <I2SEx_RxISR_I2SExt+0x94>)
 800662e:	e001      	b.n	8006634 <I2SEx_RxISR_I2SExt+0x68>
 8006630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006634:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006638:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff ff03 	bl	8006458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40003800 	.word	0x40003800
 8006660:	40003400 	.word	0x40003400

08006664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e267      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d075      	beq.n	800676e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006682:	4b88      	ldr	r3, [pc, #544]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b04      	cmp	r3, #4
 800668c:	d00c      	beq.n	80066a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668e:	4b85      	ldr	r3, [pc, #532]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006696:	2b08      	cmp	r3, #8
 8006698:	d112      	bne.n	80066c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669a:	4b82      	ldr	r3, [pc, #520]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a6:	d10b      	bne.n	80066c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a8:	4b7e      	ldr	r3, [pc, #504]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d05b      	beq.n	800676c <HAL_RCC_OscConfig+0x108>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d157      	bne.n	800676c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e242      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d106      	bne.n	80066d8 <HAL_RCC_OscConfig+0x74>
 80066ca:	4b76      	ldr	r3, [pc, #472]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a75      	ldr	r2, [pc, #468]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e01d      	b.n	8006714 <HAL_RCC_OscConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e0:	d10c      	bne.n	80066fc <HAL_RCC_OscConfig+0x98>
 80066e2:	4b70      	ldr	r3, [pc, #448]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6f      	ldr	r2, [pc, #444]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b6d      	ldr	r3, [pc, #436]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a6c      	ldr	r2, [pc, #432]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e00b      	b.n	8006714 <HAL_RCC_OscConfig+0xb0>
 80066fc:	4b69      	ldr	r3, [pc, #420]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a68      	ldr	r2, [pc, #416]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	4b66      	ldr	r3, [pc, #408]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a65      	ldr	r2, [pc, #404]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 800670e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671c:	f7fb fbd4 	bl	8001ec8 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006724:	f7fb fbd0 	bl	8001ec8 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b64      	cmp	r3, #100	; 0x64
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e207      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b5b      	ldr	r3, [pc, #364]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0xc0>
 8006742:	e014      	b.n	800676e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fb fbc0 	bl	8001ec8 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800674c:	f7fb fbbc 	bl	8001ec8 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b64      	cmp	r3, #100	; 0x64
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e1f3      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675e:	4b51      	ldr	r3, [pc, #324]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f0      	bne.n	800674c <HAL_RCC_OscConfig+0xe8>
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d063      	beq.n	8006842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800677a:	4b4a      	ldr	r3, [pc, #296]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006786:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800678e:	2b08      	cmp	r3, #8
 8006790:	d11c      	bne.n	80067cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006792:	4b44      	ldr	r3, [pc, #272]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d116      	bne.n	80067cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800679e:	4b41      	ldr	r3, [pc, #260]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_RCC_OscConfig+0x152>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d001      	beq.n	80067b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e1c7      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b6:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4937      	ldr	r1, [pc, #220]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ca:	e03a      	b.n	8006842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d020      	beq.n	8006816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d4:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <HAL_RCC_OscConfig+0x244>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067da:	f7fb fb75 	bl	8001ec8 <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e0:	e008      	b.n	80067f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e2:	f7fb fb71 	bl	8001ec8 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e1a8      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f0      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4925      	ldr	r1, [pc, #148]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006810:	4313      	orrs	r3, r2
 8006812:	600b      	str	r3, [r1, #0]
 8006814:	e015      	b.n	8006842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <HAL_RCC_OscConfig+0x244>)
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fb fb54 	bl	8001ec8 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006824:	f7fb fb50 	bl	8001ec8 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e187      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006836:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d036      	beq.n	80068bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <HAL_RCC_OscConfig+0x248>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fb fb34 	bl	8001ec8 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006864:	f7fb fb30 	bl	8001ec8 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e167      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_OscConfig+0x240>)
 8006878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCC_OscConfig+0x200>
 8006882:	e01b      	b.n	80068bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <HAL_RCC_OscConfig+0x248>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688a:	f7fb fb1d 	bl	8001ec8 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006890:	e00e      	b.n	80068b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006892:	f7fb fb19 	bl	8001ec8 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d907      	bls.n	80068b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e150      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
 80068a4:	40023800 	.word	0x40023800
 80068a8:	42470000 	.word	0x42470000
 80068ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b0:	4b88      	ldr	r3, [pc, #544]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1ea      	bne.n	8006892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8097 	beq.w	80069f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ce:	4b81      	ldr	r3, [pc, #516]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10f      	bne.n	80068fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	4b7d      	ldr	r3, [pc, #500]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	4a7c      	ldr	r2, [pc, #496]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e8:	6413      	str	r3, [r2, #64]	; 0x40
 80068ea:	4b7a      	ldr	r3, [pc, #488]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f2:	60bb      	str	r3, [r7, #8]
 80068f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068f6:	2301      	movs	r3, #1
 80068f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068fa:	4b77      	ldr	r3, [pc, #476]	; (8006ad8 <HAL_RCC_OscConfig+0x474>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d118      	bne.n	8006938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006906:	4b74      	ldr	r3, [pc, #464]	; (8006ad8 <HAL_RCC_OscConfig+0x474>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a73      	ldr	r2, [pc, #460]	; (8006ad8 <HAL_RCC_OscConfig+0x474>)
 800690c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006912:	f7fb fad9 	bl	8001ec8 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691a:	f7fb fad5 	bl	8001ec8 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e10c      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	4b6a      	ldr	r3, [pc, #424]	; (8006ad8 <HAL_RCC_OscConfig+0x474>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d106      	bne.n	800694e <HAL_RCC_OscConfig+0x2ea>
 8006940:	4b64      	ldr	r3, [pc, #400]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	4a63      	ldr	r2, [pc, #396]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	6713      	str	r3, [r2, #112]	; 0x70
 800694c:	e01c      	b.n	8006988 <HAL_RCC_OscConfig+0x324>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b05      	cmp	r3, #5
 8006954:	d10c      	bne.n	8006970 <HAL_RCC_OscConfig+0x30c>
 8006956:	4b5f      	ldr	r3, [pc, #380]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	6713      	str	r3, [r2, #112]	; 0x70
 8006962:	4b5c      	ldr	r3, [pc, #368]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4a5b      	ldr	r2, [pc, #364]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	6713      	str	r3, [r2, #112]	; 0x70
 800696e:	e00b      	b.n	8006988 <HAL_RCC_OscConfig+0x324>
 8006970:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a57      	ldr	r2, [pc, #348]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	4b55      	ldr	r3, [pc, #340]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a54      	ldr	r2, [pc, #336]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006982:	f023 0304 	bic.w	r3, r3, #4
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fb fa9a 	bl	8001ec8 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006996:	e00a      	b.n	80069ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006998:	f7fb fa96 	bl	8001ec8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e0cb      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ae:	4b49      	ldr	r3, [pc, #292]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ee      	beq.n	8006998 <HAL_RCC_OscConfig+0x334>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069bc:	f7fb fa84 	bl	8001ec8 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c2:	e00a      	b.n	80069da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c4:	f7fb fa80 	bl	8001ec8 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e0b5      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069da:	4b3e      	ldr	r3, [pc, #248]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1ee      	bne.n	80069c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d105      	bne.n	80069f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ec:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	4a38      	ldr	r2, [pc, #224]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 80069f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80a1 	beq.w	8006b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a02:	4b34      	ldr	r3, [pc, #208]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f003 030c 	and.w	r3, r3, #12
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d05c      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d141      	bne.n	8006a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a16:	4b31      	ldr	r3, [pc, #196]	; (8006adc <HAL_RCC_OscConfig+0x478>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1c:	f7fb fa54 	bl	8001ec8 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a24:	f7fb fa50 	bl	8001ec8 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e087      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	4b27      	ldr	r3, [pc, #156]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f0      	bne.n	8006a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69da      	ldr	r2, [r3, #28]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	085b      	lsrs	r3, r3, #1
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	061b      	lsls	r3, r3, #24
 8006a66:	491b      	ldr	r1, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_RCC_OscConfig+0x478>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a72:	f7fb fa29 	bl	8001ec8 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a7a:	f7fb fa25 	bl	8001ec8 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e05c      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a8c:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x416>
 8006a98:	e054      	b.n	8006b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a9a:	4b10      	ldr	r3, [pc, #64]	; (8006adc <HAL_RCC_OscConfig+0x478>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa0:	f7fb fa12 	bl	8001ec8 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa8:	f7fb fa0e 	bl	8001ec8 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e045      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_RCC_OscConfig+0x470>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x444>
 8006ac6:	e03d      	b.n	8006b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e038      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	40007000 	.word	0x40007000
 8006adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <HAL_RCC_OscConfig+0x4ec>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d028      	beq.n	8006b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d121      	bne.n	8006b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d11a      	bne.n	8006b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d111      	bne.n	8006b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d107      	bne.n	8006b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40023800 	.word	0x40023800

08006b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0cc      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b68:	4b68      	ldr	r3, [pc, #416]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d90c      	bls.n	8006b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	4b65      	ldr	r3, [pc, #404]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b63      	ldr	r3, [pc, #396]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0b8      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d020      	beq.n	8006bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ba8:	4b59      	ldr	r3, [pc, #356]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	4a58      	ldr	r2, [pc, #352]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc0:	4b53      	ldr	r3, [pc, #332]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a52      	ldr	r2, [pc, #328]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bcc:	4b50      	ldr	r3, [pc, #320]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	494d      	ldr	r1, [pc, #308]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d044      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d119      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e07f      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d003      	beq.n	8006c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d107      	bne.n	8006c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c12:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e06f      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c22:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e067      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c32:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f023 0203 	bic.w	r2, r3, #3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4934      	ldr	r1, [pc, #208]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c44:	f7fb f940 	bl	8001ec8 <HAL_GetTick>
 8006c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4c:	f7fb f93c 	bl	8001ec8 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e04f      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c62:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 020c 	and.w	r2, r3, #12
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d1eb      	bne.n	8006c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c74:	4b25      	ldr	r3, [pc, #148]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d20c      	bcs.n	8006c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c82:	4b22      	ldr	r3, [pc, #136]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8a:	4b20      	ldr	r3, [pc, #128]	; (8006d0c <HAL_RCC_ClockConfig+0x1b8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e032      	b.n	8006d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca8:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4916      	ldr	r1, [pc, #88]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	490e      	ldr	r1, [pc, #56]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cda:	f000 f821 	bl	8006d20 <HAL_RCC_GetSysClockFreq>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	490a      	ldr	r1, [pc, #40]	; (8006d14 <HAL_RCC_ClockConfig+0x1c0>)
 8006cec:	5ccb      	ldrb	r3, [r1, r3]
 8006cee:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf2:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cf6:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <HAL_RCC_ClockConfig+0x1c8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fb f8a0 	bl	8001e40 <HAL_InitTick>

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40023c00 	.word	0x40023c00
 8006d10:	40023800 	.word	0x40023800
 8006d14:	0800f278 	.word	0x0800f278
 8006d18:	20000014 	.word	0x20000014
 8006d1c:	20000018 	.word	0x20000018

08006d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d24:	b094      	sub	sp, #80	; 0x50
 8006d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d30:	2300      	movs	r3, #0
 8006d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d38:	4b79      	ldr	r3, [pc, #484]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d00d      	beq.n	8006d60 <HAL_RCC_GetSysClockFreq+0x40>
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	f200 80e1 	bhi.w	8006f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0x34>
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d003      	beq.n	8006d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d52:	e0db      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4b73      	ldr	r3, [pc, #460]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d58:	e0db      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d5a:	4b73      	ldr	r3, [pc, #460]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d5e:	e0d8      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d60:	4b6f      	ldr	r3, [pc, #444]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d063      	beq.n	8006e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d76:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	099b      	lsrs	r3, r3, #6
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d92:	4622      	mov	r2, r4
 8006d94:	462b      	mov	r3, r5
 8006d96:	f04f 0000 	mov.w	r0, #0
 8006d9a:	f04f 0100 	mov.w	r1, #0
 8006d9e:	0159      	lsls	r1, r3, #5
 8006da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da4:	0150      	lsls	r0, r2, #5
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4621      	mov	r1, r4
 8006dac:	1a51      	subs	r1, r2, r1
 8006dae:	6139      	str	r1, [r7, #16]
 8006db0:	4629      	mov	r1, r5
 8006db2:	eb63 0301 	sbc.w	r3, r3, r1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	018b      	lsls	r3, r1, #6
 8006dc8:	4651      	mov	r1, sl
 8006dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dce:	4651      	mov	r1, sl
 8006dd0:	018a      	lsls	r2, r1, #6
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8006dd8:	4659      	mov	r1, fp
 8006dda:	eb63 0901 	sbc.w	r9, r3, r1
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df2:	4690      	mov	r8, r2
 8006df4:	4699      	mov	r9, r3
 8006df6:	4623      	mov	r3, r4
 8006df8:	eb18 0303 	adds.w	r3, r8, r3
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	462b      	mov	r3, r5
 8006e00:	eb49 0303 	adc.w	r3, r9, r3
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e12:	4629      	mov	r1, r5
 8006e14:	024b      	lsls	r3, r1, #9
 8006e16:	4621      	mov	r1, r4
 8006e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	024a      	lsls	r2, r1, #9
 8006e20:	4610      	mov	r0, r2
 8006e22:	4619      	mov	r1, r3
 8006e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e26:	2200      	movs	r2, #0
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e30:	f7f9 fa1e 	bl	8000270 <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4613      	mov	r3, r2
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3c:	e058      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3e:	4b38      	ldr	r3, [pc, #224]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	099b      	lsrs	r3, r3, #6
 8006e44:	2200      	movs	r2, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	4611      	mov	r1, r2
 8006e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e4e:	623b      	str	r3, [r7, #32]
 8006e50:	2300      	movs	r3, #0
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
 8006e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	f04f 0000 	mov.w	r0, #0
 8006e60:	f04f 0100 	mov.w	r1, #0
 8006e64:	0159      	lsls	r1, r3, #5
 8006e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e6a:	0150      	lsls	r0, r2, #5
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4641      	mov	r1, r8
 8006e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e76:	4649      	mov	r1, r9
 8006e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e90:	ebb2 040a 	subs.w	r4, r2, sl
 8006e94:	eb63 050b 	sbc.w	r5, r3, fp
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	00eb      	lsls	r3, r5, #3
 8006ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ea6:	00e2      	lsls	r2, r4, #3
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	4643      	mov	r3, r8
 8006eae:	18e3      	adds	r3, r4, r3
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	eb45 0303 	adc.w	r3, r5, r3
 8006eb8:	607b      	str	r3, [r7, #4]
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	028b      	lsls	r3, r1, #10
 8006eca:	4621      	mov	r1, r4
 8006ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	028a      	lsls	r2, r1, #10
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eda:	2200      	movs	r2, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	61fa      	str	r2, [r7, #28]
 8006ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ee4:	f7f9 f9c4 	bl	8000270 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4613      	mov	r3, r2
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	3301      	adds	r3, #1
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f0a:	e002      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3750      	adds	r7, #80	; 0x50
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	00f42400 	.word	0x00f42400
 8006f28:	007a1200 	.word	0x007a1200

08006f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f30:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f32:	681b      	ldr	r3, [r3, #0]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000014 	.word	0x20000014

08006f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f48:	f7ff fff0 	bl	8006f2c <HAL_RCC_GetHCLKFreq>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	0a9b      	lsrs	r3, r3, #10
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	4903      	ldr	r1, [pc, #12]	; (8006f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f5a:	5ccb      	ldrb	r3, [r1, r3]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40023800 	.word	0x40023800
 8006f68:	0800f288 	.word	0x0800f288

08006f6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d105      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d035      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f94:	4b62      	ldr	r3, [pc, #392]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f9a:	f7fa ff95 	bl	8001ec8 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fa2:	f7fa ff91 	bl	8001ec8 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d901      	bls.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e0b0      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb4:	4b5b      	ldr	r3, [pc, #364]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f0      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	071b      	lsls	r3, r3, #28
 8006fcc:	4955      	ldr	r1, [pc, #340]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fd4:	4b52      	ldr	r3, [pc, #328]	; (8007120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fda:	f7fa ff75 	bl	8001ec8 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fe2:	f7fa ff71 	bl	8001ec8 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e090      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8083 	beq.w	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	4b44      	ldr	r3, [pc, #272]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	4a43      	ldr	r2, [pc, #268]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701c:	6413      	str	r3, [r2, #64]	; 0x40
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800702a:	4b3f      	ldr	r3, [pc, #252]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3e      	ldr	r2, [pc, #248]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007034:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007036:	f7fa ff47 	bl	8001ec8 <HAL_GetTick>
 800703a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800703c:	e008      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800703e:	f7fa ff43 	bl	8001ec8 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e062      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007050:	4b35      	ldr	r3, [pc, #212]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800705c:	4b31      	ldr	r3, [pc, #196]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007064:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02f      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d028      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800707a:	4b2a      	ldr	r3, [pc, #168]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007084:	4b29      	ldr	r3, [pc, #164]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007086:	2201      	movs	r2, #1
 8007088:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800708a:	4b28      	ldr	r3, [pc, #160]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007090:	4a24      	ldr	r2, [pc, #144]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007096:	4b23      	ldr	r3, [pc, #140]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d114      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070a2:	f7fa ff11 	bl	8001ec8 <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a8:	e00a      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070aa:	f7fa ff0d 	bl	8001ec8 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e02a      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c0:	4b18      	ldr	r3, [pc, #96]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0ee      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d8:	d10d      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ee:	490d      	ldr	r1, [pc, #52]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	608b      	str	r3, [r1, #8]
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007100:	6093      	str	r3, [r2, #8]
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800710e:	4905      	ldr	r1, [pc, #20]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007110:	4313      	orrs	r3, r2
 8007112:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	42470068 	.word	0x42470068
 8007124:	40023800 	.word	0x40023800
 8007128:	40007000 	.word	0x40007000
 800712c:	42470e40 	.word	0x42470e40

08007130 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2203      	movs	r2, #3
 800713c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007144:	099b      	lsrs	r3, r3, #6
 8007146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800714e:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007154:	0f1b      	lsrs	r3, r3, #28
 8007156:	f003 0207 	and.w	r2, r3, #7
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007166:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40023800 	.word	0x40023800

08007188 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d13e      	bne.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80071a6:	4b23      	ldr	r3, [pc, #140]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d12f      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071bc:	4b1e      	ldr	r3, [pc, #120]	; (8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071be:	617b      	str	r3, [r7, #20]
          break;
 80071c0:	e02f      	b.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ce:	d108      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071d0:	4b18      	ldr	r3, [pc, #96]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d8:	4a18      	ldr	r2, [pc, #96]	; (800723c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	e007      	b.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071e2:	4b14      	ldr	r3, [pc, #80]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f8:	099b      	lsrs	r3, r3, #6
 80071fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720c:	0f1b      	lsrs	r3, r3, #28
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	617b      	str	r3, [r7, #20]
          break;
 800721a:	e002      	b.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
          break;
 8007220:	bf00      	nop
        }
      }
      break;
 8007222:	bf00      	nop
    }
  }
  return frequency;
 8007224:	697b      	ldr	r3, [r7, #20]
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	00bb8000 	.word	0x00bb8000
 800723c:	007a1200 	.word	0x007a1200
 8007240:	00f42400 	.word	0x00f42400

08007244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e041      	b.n	80072da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fa fcd8 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f000 f95e 	bl	8007544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d001      	beq.n	80072fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e046      	b.n	800738a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a23      	ldr	r2, [pc, #140]	; (8007398 <HAL_TIM_Base_Start+0xb4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d022      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007316:	d01d      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1f      	ldr	r2, [pc, #124]	; (800739c <HAL_TIM_Base_Start+0xb8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d018      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <HAL_TIM_Base_Start+0xbc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1c      	ldr	r2, [pc, #112]	; (80073a4 <HAL_TIM_Base_Start+0xc0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00e      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <HAL_TIM_Base_Start+0xc4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d009      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a19      	ldr	r2, [pc, #100]	; (80073ac <HAL_TIM_Base_Start+0xc8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIM_Base_Start+0x70>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <HAL_TIM_Base_Start+0xcc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d111      	bne.n	8007378 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b06      	cmp	r3, #6
 8007364:	d010      	beq.n	8007388 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007376:	e007      	b.n	8007388 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40010400 	.word	0x40010400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40001800 	.word	0x40001800

080073b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_TIM_ConfigClockSource+0x1c>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e0b4      	b.n	800753a <HAL_TIM_ConfigClockSource+0x186>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d03e      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0xd4>
 800740a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740e:	f200 8087 	bhi.w	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	f000 8086 	beq.w	8007526 <HAL_TIM_ConfigClockSource+0x172>
 800741a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741e:	d87f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007420:	2b70      	cmp	r3, #112	; 0x70
 8007422:	d01a      	beq.n	800745a <HAL_TIM_ConfigClockSource+0xa6>
 8007424:	2b70      	cmp	r3, #112	; 0x70
 8007426:	d87b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007428:	2b60      	cmp	r3, #96	; 0x60
 800742a:	d050      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0x11a>
 800742c:	2b60      	cmp	r3, #96	; 0x60
 800742e:	d877      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007430:	2b50      	cmp	r3, #80	; 0x50
 8007432:	d03c      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0xfa>
 8007434:	2b50      	cmp	r3, #80	; 0x50
 8007436:	d873      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d058      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0x13a>
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d86f      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007440:	2b30      	cmp	r3, #48	; 0x30
 8007442:	d064      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 8007444:	2b30      	cmp	r3, #48	; 0x30
 8007446:	d86b      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007448:	2b20      	cmp	r3, #32
 800744a:	d060      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 800744c:	2b20      	cmp	r3, #32
 800744e:	d867      	bhi.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d05c      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 8007454:	2b10      	cmp	r3, #16
 8007456:	d05a      	beq.n	800750e <HAL_TIM_ConfigClockSource+0x15a>
 8007458:	e062      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f000 f985 	bl	8007778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800747c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	609a      	str	r2, [r3, #8]
      break;
 8007486:	e04f      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f000 f96e 	bl	8007778 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074aa:	609a      	str	r2, [r3, #8]
      break;
 80074ac:	e03c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6859      	ldr	r1, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	461a      	mov	r2, r3
 80074bc:	f000 f8e2 	bl	8007684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2150      	movs	r1, #80	; 0x50
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 f93b 	bl	8007742 <TIM_ITRx_SetConfig>
      break;
 80074cc:	e02c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	461a      	mov	r2, r3
 80074dc:	f000 f901 	bl	80076e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2160      	movs	r1, #96	; 0x60
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f92b 	bl	8007742 <TIM_ITRx_SetConfig>
      break;
 80074ec:	e01c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f000 f8c2 	bl	8007684 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2140      	movs	r1, #64	; 0x40
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f91b 	bl	8007742 <TIM_ITRx_SetConfig>
      break;
 800750c:	e00c      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f000 f912 	bl	8007742 <TIM_ITRx_SetConfig>
      break;
 800751e:	e003      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e000      	b.n	8007528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a40      	ldr	r2, [pc, #256]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d00f      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3d      	ldr	r2, [pc, #244]	; (800765c <TIM_Base_SetConfig+0x118>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00b      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3c      	ldr	r2, [pc, #240]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d007      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <TIM_Base_SetConfig+0x120>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d108      	bne.n	8007596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <TIM_Base_SetConfig+0x114>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a4:	d027      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a2c      	ldr	r2, [pc, #176]	; (800765c <TIM_Base_SetConfig+0x118>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d023      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2b      	ldr	r2, [pc, #172]	; (8007660 <TIM_Base_SetConfig+0x11c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <TIM_Base_SetConfig+0x120>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a29      	ldr	r2, [pc, #164]	; (8007668 <TIM_Base_SetConfig+0x124>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d017      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a28      	ldr	r2, [pc, #160]	; (800766c <TIM_Base_SetConfig+0x128>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <TIM_Base_SetConfig+0x12c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a26      	ldr	r2, [pc, #152]	; (8007674 <TIM_Base_SetConfig+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a25      	ldr	r2, [pc, #148]	; (8007678 <TIM_Base_SetConfig+0x134>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a24      	ldr	r2, [pc, #144]	; (800767c <TIM_Base_SetConfig+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a23      	ldr	r2, [pc, #140]	; (8007680 <TIM_Base_SetConfig+0x13c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d108      	bne.n	8007608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <TIM_Base_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d003      	beq.n	800763c <TIM_Base_SetConfig+0xf8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0c      	ldr	r2, [pc, #48]	; (8007668 <TIM_Base_SetConfig+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d103      	bne.n	8007644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	615a      	str	r2, [r3, #20]
}
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40010000 	.word	0x40010000
 800765c:	40000400 	.word	0x40000400
 8007660:	40000800 	.word	0x40000800
 8007664:	40000c00 	.word	0x40000c00
 8007668:	40010400 	.word	0x40010400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800
 8007678:	40001800 	.word	0x40001800
 800767c:	40001c00 	.word	0x40001c00
 8007680:	40002000 	.word	0x40002000

08007684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f023 0201 	bic.w	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f023 030a 	bic.w	r3, r3, #10
 80076c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b087      	sub	sp, #28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0210 	bic.w	r2, r3, #16
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800770c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	031b      	lsls	r3, r3, #12
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800771e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	f043 0307 	orr.w	r3, r3, #7
 8007764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	609a      	str	r2, [r3, #8]
}
 800776c:	bf00      	nop
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	021a      	lsls	r2, r3, #8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	431a      	orrs	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4313      	orrs	r3, r2
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	609a      	str	r2, [r3, #8]
}
 80077ac:	bf00      	nop
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e05a      	b.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a21      	ldr	r2, [pc, #132]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d022      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781c:	d01d      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d018      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1b      	ldr	r2, [pc, #108]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1a      	ldr	r2, [pc, #104]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00e      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d009      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d004      	beq.n	800785a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a15      	ldr	r2, [pc, #84]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d10c      	bne.n	8007874 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4313      	orrs	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40010000 	.word	0x40010000
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800
 80078a0:	40000c00 	.word	0x40000c00
 80078a4:	40010400 	.word	0x40010400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40001800 	.word	0x40001800

080078b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b0:	b084      	sub	sp, #16
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	f107 001c 	add.w	r0, r7, #28
 80078be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d122      	bne.n	800790e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d105      	bne.n	8007902 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f9c0 	bl	8007c88 <USB_CoreReset>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	e01a      	b.n	8007944 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9b4 	bl	8007c88 <USB_CoreReset>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38
 8007936:	e005      	b.n	8007944 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	2b01      	cmp	r3, #1
 8007948:	d10b      	bne.n	8007962 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f043 0206 	orr.w	r2, r3, #6
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f043 0220 	orr.w	r2, r3, #32
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800796e:	b004      	add	sp, #16
 8007970:	4770      	bx	lr

08007972 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f023 0201 	bic.w	r2, r3, #1
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d115      	bne.n	8007a04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7fa fa7b 	bl	8001ee0 <HAL_Delay>
      ms++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f93a 	bl	8007c6a <USB_GetMode>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d01e      	beq.n	8007a3a <USB_SetCurrentMode+0x84>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b31      	cmp	r3, #49	; 0x31
 8007a00:	d9f0      	bls.n	80079e4 <USB_SetCurrentMode+0x2e>
 8007a02:	e01a      	b.n	8007a3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d115      	bne.n	8007a36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a16:	2001      	movs	r0, #1
 8007a18:	f7fa fa62 	bl	8001ee0 <HAL_Delay>
      ms++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f921 	bl	8007c6a <USB_GetMode>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <USB_SetCurrentMode+0x84>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b31      	cmp	r3, #49	; 0x31
 8007a32:	d9f0      	bls.n	8007a16 <USB_SetCurrentMode+0x60>
 8007a34:	e001      	b.n	8007a3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e005      	b.n	8007a46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b32      	cmp	r3, #50	; 0x32
 8007a3e:	d101      	bne.n	8007a44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <USB_FlushTxFifo+0x64>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d901      	bls.n	8007a70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e01b      	b.n	8007aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	daf2      	bge.n	8007a5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	019b      	lsls	r3, r3, #6
 8007a80:	f043 0220 	orr.w	r2, r3, #32
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4a08      	ldr	r2, [pc, #32]	; (8007ab4 <USB_FlushTxFifo+0x64>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d901      	bls.n	8007a9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e006      	b.n	8007aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d0f0      	beq.n	8007a88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	00030d40 	.word	0x00030d40

08007ab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4a11      	ldr	r2, [pc, #68]	; (8007b14 <USB_FlushRxFifo+0x5c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e018      	b.n	8007b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	daf2      	bge.n	8007ac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <USB_FlushRxFifo+0x5c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d901      	bls.n	8007afa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e006      	b.n	8007b08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b10      	cmp	r3, #16
 8007b04:	d0f0      	beq.n	8007ae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	00030d40 	.word	0x00030d40

08007b18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b089      	sub	sp, #36	; 0x24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	460b      	mov	r3, r1
 8007b28:	71fb      	strb	r3, [r7, #7]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d123      	bne.n	8007b86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b3e:	88bb      	ldrh	r3, [r7, #4]
 8007b40:	3303      	adds	r3, #3
 8007b42:	089b      	lsrs	r3, r3, #2
 8007b44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b46:	2300      	movs	r3, #0
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	e018      	b.n	8007b7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	031a      	lsls	r2, r3, #12
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b58:	461a      	mov	r2, r3
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	3301      	adds	r3, #1
 8007b76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d3e2      	bcc.n	8007b4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3724      	adds	r7, #36	; 0x24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b08b      	sub	sp, #44	; 0x2c
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bba:	2300      	movs	r3, #0
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	e014      	b.n	8007bea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	3301      	adds	r3, #1
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	3301      	adds	r3, #1
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	3301      	adds	r3, #1
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d3e6      	bcc.n	8007bc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bf2:	8bfb      	ldrh	r3, [r7, #30]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01e      	beq.n	8007c36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c02:	461a      	mov	r2, r3
 8007c04:	f107 0310 	add.w	r3, r7, #16
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	fa22 f303 	lsr.w	r3, r2, r3
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	701a      	strb	r2, [r3, #0]
      i++;
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	3301      	adds	r3, #1
 8007c22:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	3301      	adds	r3, #1
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c2a:	8bfb      	ldrh	r3, [r7, #30]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c30:	8bfb      	ldrh	r3, [r7, #30]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1ea      	bne.n	8007c0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	372c      	adds	r7, #44	; 0x2c
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f003 0301 	and.w	r3, r3, #1
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <USB_CoreReset+0x64>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e01b      	b.n	8007cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	daf2      	bge.n	8007c94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f043 0201 	orr.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a09      	ldr	r2, [pc, #36]	; (8007cec <USB_CoreReset+0x64>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e006      	b.n	8007cde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d0f0      	beq.n	8007cbe <USB_CoreReset+0x36>

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	00030d40 	.word	0x00030d40

08007cf0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d10:	461a      	mov	r2, r3
 8007d12:	2300      	movs	r3, #0
 8007d14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d018      	beq.n	8007d78 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10a      	bne.n	8007d62 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d5a:	f043 0304 	orr.w	r3, r3, #4
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e014      	b.n	8007d8c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d70:	f023 0304 	bic.w	r3, r3, #4
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e009      	b.n	8007d8c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d86:	f023 0304 	bic.w	r3, r3, #4
 8007d8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d8c:	2110      	movs	r1, #16
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff fe5e 	bl	8007a50 <USB_FlushTxFifo>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fe8a 	bl	8007ab8 <USB_FlushRxFifo>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e015      	b.n	8007de0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d3e5      	bcc.n	8007db4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f04f 32ff 	mov.w	r2, #4294967295
 8007df4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <USB_HostInit+0x16c>)
 8007e0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <USB_HostInit+0x170>)
 8007e14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e18:	e009      	b.n	8007e2e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <USB_HostInit+0x174>)
 8007e24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a0f      	ldr	r2, [pc, #60]	; (8007e68 <USB_HostInit+0x178>)
 8007e2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <USB_HostInit+0x17c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e58:	b004      	add	sp, #16
 8007e5a:	4770      	bx	lr
 8007e5c:	01000200 	.word	0x01000200
 8007e60:	00e00300 	.word	0x00e00300
 8007e64:	00600080 	.word	0x00600080
 8007e68:	004000e0 	.word	0x004000e0
 8007e6c:	a3200008 	.word	0xa3200008

08007e70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ebe:	6053      	str	r3, [r2, #4]
 8007ec0:	e009      	b.n	8007ed6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d106      	bne.n	8007ed6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ed4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f12:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f14:	2064      	movs	r0, #100	; 0x64
 8007f16:	f7f9 ffe3 	bl	8001ee0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f26:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f28:	200a      	movs	r0, #10
 8007f2a:	f7f9 ffd9 	bl	8001ee0 <HAL_Delay>

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <USB_DriveVbus+0x44>
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d106      	bne.n	8007f7c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f7a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	d109      	bne.n	8007f9c <USB_DriveVbus+0x64>
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f9a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	0c5b      	lsrs	r3, r3, #17
 8007fc8:	f003 0303 	and.w	r3, r3, #3
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	b29b      	uxth	r3, r3
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	4603      	mov	r3, r0
 800800c:	70fb      	strb	r3, [r7, #3]
 800800e:	460b      	mov	r3, r1
 8008010:	70bb      	strb	r3, [r7, #2]
 8008012:	4613      	mov	r3, r2
 8008014:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802a:	461a      	mov	r2, r3
 800802c:	f04f 33ff 	mov.w	r3, #4294967295
 8008030:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008036:	2b03      	cmp	r3, #3
 8008038:	d87e      	bhi.n	8008138 <USB_HC_Init+0x13c>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USB_HC_Init+0x44>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008051 	.word	0x08008051
 8008044:	080080fb 	.word	0x080080fb
 8008048:	08008051 	.word	0x08008051
 800804c:	080080bd 	.word	0x080080bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805c:	461a      	mov	r2, r3
 800805e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008062:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008064:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	da10      	bge.n	800808e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	440a      	add	r2, r1
 8008082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800808a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800808c:	e057      	b.n	800813e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d051      	beq.n	800813e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080b8:	60d3      	str	r3, [r2, #12]
      break;
 80080ba:	e040      	b.n	800813e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c8:	461a      	mov	r2, r3
 80080ca:	f240 639d 	movw	r3, #1693	; 0x69d
 80080ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	da34      	bge.n	8008142 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080f8:	e023      	b.n	8008142 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	4413      	add	r3, r2
 8008102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008106:	461a      	mov	r2, r3
 8008108:	f240 2325 	movw	r3, #549	; 0x225
 800810c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800810e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da17      	bge.n	8008146 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	78fa      	ldrb	r2, [r7, #3]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008130:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008134:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008136:	e006      	b.n	8008146 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	77fb      	strb	r3, [r7, #31]
      break;
 800813c:	e004      	b.n	8008148 <USB_HC_Init+0x14c>
      break;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <USB_HC_Init+0x14c>
      break;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <USB_HC_Init+0x14c>
      break;
 8008146:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	440a      	add	r2, r1
 800815e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008162:	f043 0302 	orr.w	r3, r3, #2
 8008166:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	2101      	movs	r1, #1
 8008178:	fa01 f303 	lsl.w	r3, r1, r3
 800817c:	6939      	ldr	r1, [r7, #16]
 800817e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008182:	4313      	orrs	r3, r2
 8008184:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008192:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008196:	2b00      	cmp	r3, #0
 8008198:	da03      	bge.n	80081a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800819a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	e001      	b.n	80081a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff feff 	bl	8007faa <USB_GetHostSpeed>
 80081ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d106      	bne.n	80081c4 <USB_HC_Init+0x1c8>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d003      	beq.n	80081c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	e001      	b.n	80081c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081c8:	787b      	ldrb	r3, [r7, #1]
 80081ca:	059b      	lsls	r3, r3, #22
 80081cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081d0:	78bb      	ldrb	r3, [r7, #2]
 80081d2:	02db      	lsls	r3, r3, #11
 80081d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081de:	049b      	lsls	r3, r3, #18
 80081e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80081e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	0159      	lsls	r1, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	440b      	add	r3, r1
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008204:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820a:	2b03      	cmp	r3, #3
 800820c:	d003      	beq.n	8008216 <USB_HC_Init+0x21a>
 800820e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10f      	bne.n	8008236 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	440a      	add	r2, r1
 800822c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008234:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008236:	7ffb      	ldrb	r3, [r7, #31]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	; 0x30
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800825c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02d      	beq.n	80082c6 <USB_HC_StartXfer+0x86>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d129      	bne.n	80082c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d117      	bne.n	80082a8 <USB_HC_StartXfer+0x68>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	79db      	ldrb	r3, [r3, #7]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <USB_HC_StartXfer+0x48>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	79db      	ldrb	r3, [r3, #7]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d10f      	bne.n	80082a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <USB_HC_StartXfer+0x86>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	795b      	ldrb	r3, [r3, #5]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d107      	bne.n	80082c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fa0f 	bl	80086e0 <USB_DoPing>
      return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e0f8      	b.n	80084b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d018      	beq.n	8008300 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	8912      	ldrh	r2, [r2, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	3b01      	subs	r3, #1
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	8912      	ldrh	r2, [r2, #8]
 80082de:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80082e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082e6:	8b7b      	ldrh	r3, [r7, #26]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d90b      	bls.n	8008304 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80082ec:	8b7b      	ldrh	r3, [r7, #26]
 80082ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	8912      	ldrh	r2, [r2, #8]
 80082f6:	fb03 f202 	mul.w	r2, r3, r2
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	611a      	str	r2, [r3, #16]
 80082fe:	e001      	b.n	8008304 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008300:	2301      	movs	r3, #1
 8008302:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	78db      	ldrb	r3, [r3, #3]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d007      	beq.n	800831c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800830c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	8912      	ldrh	r2, [r2, #8]
 8008312:	fb03 f202 	mul.w	r2, r3, r2
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	611a      	str	r2, [r3, #16]
 800831a:	e003      	b.n	8008324 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800832c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800832e:	04d9      	lsls	r1, r3, #19
 8008330:	4b63      	ldr	r3, [pc, #396]	; (80084c0 <USB_HC_StartXfer+0x280>)
 8008332:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008334:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	7a9b      	ldrb	r3, [r3, #10]
 800833a:	075b      	lsls	r3, r3, #29
 800833c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	0148      	lsls	r0, r1, #5
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	4401      	add	r1, r0
 8008348:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800834c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800834e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	68d9      	ldr	r1, [r3, #12]
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008366:	460a      	mov	r2, r1
 8008368:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	bf0c      	ite	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	2300      	movne	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	4413      	add	r3, r2
 800838a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	6a3a      	ldr	r2, [r7, #32]
 8008396:	440a      	add	r2, r1
 8008398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800839c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	7e7b      	ldrb	r3, [r7, #25]
 80083b2:	075b      	lsls	r3, r3, #29
 80083b4:	69f9      	ldr	r1, [r7, #28]
 80083b6:	0148      	lsls	r0, r1, #5
 80083b8:	6a39      	ldr	r1, [r7, #32]
 80083ba:	4401      	add	r1, r0
 80083bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083c0:	4313      	orrs	r3, r2
 80083c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	78db      	ldrb	r3, [r3, #3]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	e003      	b.n	80083f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840a:	461a      	mov	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	e04e      	b.n	80084b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	78db      	ldrb	r3, [r3, #3]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d149      	bne.n	80084b6 <USB_HC_StartXfer+0x276>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d045      	beq.n	80084b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	79db      	ldrb	r3, [r3, #7]
 800842e:	2b03      	cmp	r3, #3
 8008430:	d830      	bhi.n	8008494 <USB_HC_StartXfer+0x254>
 8008432:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <USB_HC_StartXfer+0x1f8>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008449 	.word	0x08008449
 800843c:	0800846d 	.word	0x0800846d
 8008440:	08008449 	.word	0x08008449
 8008444:	0800846d 	.word	0x0800846d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	3303      	adds	r3, #3
 800844e:	089b      	lsrs	r3, r3, #2
 8008450:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008452:	8afa      	ldrh	r2, [r7, #22]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	b29b      	uxth	r3, r3
 800845a:	429a      	cmp	r2, r3
 800845c:	d91c      	bls.n	8008498 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f043 0220 	orr.w	r2, r3, #32
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	619a      	str	r2, [r3, #24]
        }
        break;
 800846a:	e015      	b.n	8008498 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	3303      	adds	r3, #3
 8008472:	089b      	lsrs	r3, r3, #2
 8008474:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008476:	8afa      	ldrh	r2, [r7, #22]
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	b29b      	uxth	r3, r3
 8008482:	429a      	cmp	r2, r3
 8008484:	d90a      	bls.n	800849c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	619a      	str	r2, [r3, #24]
        }
        break;
 8008492:	e003      	b.n	800849c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008494:	bf00      	nop
 8008496:	e002      	b.n	800849e <USB_HC_StartXfer+0x25e>
        break;
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <USB_HC_StartXfer+0x25e>
        break;
 800849c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	68d9      	ldr	r1, [r3, #12]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	785a      	ldrb	r2, [r3, #1]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2000      	movs	r0, #0
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7ff fb31 	bl	8007b18 <USB_WritePacket>
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3728      	adds	r7, #40	; 0x28
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	1ff80000 	.word	0x1ff80000

080084c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	b29b      	uxth	r3, r3
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b089      	sub	sp, #36	; 0x24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	0c9b      	lsrs	r3, r3, #18
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	0fdb      	lsrs	r3, r3, #31
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b20      	cmp	r3, #32
 8008534:	d104      	bne.n	8008540 <USB_HC_Halt+0x5a>
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	e0c8      	b.n	80086d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <USB_HC_Halt+0x66>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d163      	bne.n	8008614 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	4413      	add	r3, r2
 8008554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	69fa      	ldr	r2, [r7, #28]
 8008560:	440a      	add	r2, r1
 8008562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800856a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	f040 80ab 	bne.w	80086d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d133      	bne.n	80085ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	440a      	add	r2, r1
 800859c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085d2:	d81d      	bhi.n	8008610 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ea:	d0ec      	beq.n	80085c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085ec:	e070      	b.n	80086d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	440a      	add	r2, r1
 8008604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800860c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800860e:	e05f      	b.n	80086d0 <USB_HC_Halt+0x1ea>
            break;
 8008610:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008612:	e05d      	b.n	80086d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	440a      	add	r2, r1
 800862a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800862e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008632:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d133      	bne.n	80086ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	015a      	lsls	r2, r3, #5
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	4413      	add	r3, r2
 800864c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	0151      	lsls	r1, r2, #5
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	440a      	add	r2, r1
 800865a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800865e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008662:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	0151      	lsls	r1, r2, #5
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	440a      	add	r2, r1
 800867a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800867e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008682:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3301      	adds	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008690:	d81d      	bhi.n	80086ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a8:	d0ec      	beq.n	8008684 <USB_HC_Halt+0x19e>
 80086aa:	e011      	b.n	80086d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	0151      	lsls	r1, r2, #5
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	440a      	add	r2, r1
 80086c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e000      	b.n	80086d0 <USB_HC_Halt+0x1ea>
          break;
 80086ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3724      	adds	r7, #36	; 0x24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086f4:	2301      	movs	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	04da      	lsls	r2, r3, #19
 80086fc:	4b15      	ldr	r3, [pc, #84]	; (8008754 <USB_DoPing+0x74>)
 80086fe:	4013      	ands	r3, r2
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	440a      	add	r2, r1
 8008708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008710:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008728:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008730:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873e:	461a      	mov	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	1ff80000 	.word	0x1ff80000

08008758 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff f911 	bl	8007994 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008772:	2110      	movs	r1, #16
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff f96b 	bl	8007a50 <USB_FlushTxFifo>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff f997 	bl	8007ab8 <USB_FlushRxFifo>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008794:	2300      	movs	r3, #0
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	e01f      	b.n	80087da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ce:	461a      	mov	r2, r3
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	3301      	adds	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b0f      	cmp	r3, #15
 80087de:	d9dc      	bls.n	800879a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
 80087e4:	e034      	b.n	8008850 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008804:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800880c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	4413      	add	r3, r2
 8008816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881a:	461a      	mov	r2, r3
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800882c:	d80c      	bhi.n	8008848 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008844:	d0ec      	beq.n	8008820 <USB_StopHost+0xc8>
 8008846:	e000      	b.n	800884a <USB_StopHost+0xf2>
        break;
 8008848:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	3301      	adds	r3, #1
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b0f      	cmp	r3, #15
 8008854:	d9c7      	bls.n	80087e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885c:	461a      	mov	r2, r3
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
 8008862:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff f880 	bl	8007972 <USB_EnableGlobalInt>

  return ret;
 8008872:	7ffb      	ldrb	r3, [r7, #31]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008880:	4904      	ldr	r1, [pc, #16]	; (8008894 <MX_FATFS_Init+0x18>)
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <MX_FATFS_Init+0x1c>)
 8008884:	f005 fc98 	bl	800e1b8 <FATFS_LinkDriver>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	4b03      	ldr	r3, [pc, #12]	; (800889c <MX_FATFS_Init+0x20>)
 800888e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008890:	bf00      	nop
 8008892:	bd80      	pop	{r7, pc}
 8008894:	200014c4 	.word	0x200014c4
 8008898:	0800f298 	.word	0x0800f298
 800889c:	200014c0 	.word	0x200014c0

080088a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	4619      	mov	r1, r3
 80088da:	4808      	ldr	r0, [pc, #32]	; (80088fc <USBH_status+0x34>)
 80088dc:	f000 fe32 	bl	8009544 <USBH_MSC_UnitIsReady>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <USBH_status+0x24>
  {
    res = RES_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
 80088ea:	e001      	b.n	80088f0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	2000172c 	.word	0x2000172c

08008900 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b094      	sub	sp, #80	; 0x50
 8008904:	af02      	add	r7, sp, #8
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008916:	7bf9      	ldrb	r1, [r7, #15]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4813      	ldr	r0, [pc, #76]	; (8008970 <USBH_read+0x70>)
 8008922:	f000 fe59 	bl	80095d8 <USBH_MSC_Read>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d103      	bne.n	8008934 <USBH_read+0x34>
  {
    res = RES_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008932:	e017      	b.n	8008964 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008934:	f107 0210 	add.w	r2, r7, #16
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4619      	mov	r1, r3
 800893c:	480c      	ldr	r0, [pc, #48]	; (8008970 <USBH_read+0x70>)
 800893e:	f000 fe27 	bl	8009590 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008942:	7f7b      	ldrb	r3, [r7, #29]
 8008944:	2b3a      	cmp	r3, #58	; 0x3a
 8008946:	d005      	beq.n	8008954 <USBH_read+0x54>
 8008948:	2b3a      	cmp	r3, #58	; 0x3a
 800894a:	dc07      	bgt.n	800895c <USBH_read+0x5c>
 800894c:	2b04      	cmp	r3, #4
 800894e:	d001      	beq.n	8008954 <USBH_read+0x54>
 8008950:	2b28      	cmp	r3, #40	; 0x28
 8008952:	d103      	bne.n	800895c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008954:	2303      	movs	r3, #3
 8008956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800895a:	e003      	b.n	8008964 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008962:	bf00      	nop
    }
  }

  return res;
 8008964:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008968:	4618      	mov	r0, r3
 800896a:	3748      	adds	r7, #72	; 0x48
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	2000172c 	.word	0x2000172c

08008974 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b094      	sub	sp, #80	; 0x50
 8008978:	af02      	add	r7, sp, #8
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800898a:	7bf9      	ldrb	r1, [r7, #15]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	4817      	ldr	r0, [pc, #92]	; (80089f4 <USBH_write+0x80>)
 8008996:	f000 fe88 	bl	80096aa <USBH_MSC_Write>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d103      	bne.n	80089a8 <USBH_write+0x34>
  {
    res = RES_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089a6:	e01f      	b.n	80089e8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089a8:	f107 0210 	add.w	r2, r7, #16
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4619      	mov	r1, r3
 80089b0:	4810      	ldr	r0, [pc, #64]	; (80089f4 <USBH_write+0x80>)
 80089b2:	f000 fded 	bl	8009590 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80089b6:	7f7b      	ldrb	r3, [r7, #29]
 80089b8:	2b3a      	cmp	r3, #58	; 0x3a
 80089ba:	d00d      	beq.n	80089d8 <USBH_write+0x64>
 80089bc:	2b3a      	cmp	r3, #58	; 0x3a
 80089be:	dc0f      	bgt.n	80089e0 <USBH_write+0x6c>
 80089c0:	2b28      	cmp	r3, #40	; 0x28
 80089c2:	d009      	beq.n	80089d8 <USBH_write+0x64>
 80089c4:	2b28      	cmp	r3, #40	; 0x28
 80089c6:	dc0b      	bgt.n	80089e0 <USBH_write+0x6c>
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d005      	beq.n	80089d8 <USBH_write+0x64>
 80089cc:	2b27      	cmp	r3, #39	; 0x27
 80089ce:	d107      	bne.n	80089e0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80089d0:	2302      	movs	r3, #2
 80089d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089d6:	e007      	b.n	80089e8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80089d8:	2303      	movs	r3, #3
 80089da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089de:	e003      	b.n	80089e8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089e6:	bf00      	nop
    }
  }

  return res;
 80089e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3748      	adds	r7, #72	; 0x48
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000172c 	.word	0x2000172c

080089f8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b090      	sub	sp, #64	; 0x40
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	603a      	str	r2, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
 8008a04:	460b      	mov	r3, r1
 8008a06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008a0e:	79bb      	ldrb	r3, [r7, #6]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d852      	bhi.n	8008aba <USBH_ioctl+0xc2>
 8008a14:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <USBH_ioctl+0x24>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a35 	.word	0x08008a35
 8008a24:	08008a5f 	.word	0x08008a5f
 8008a28:	08008a8b 	.word	0x08008a8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a32:	e045      	b.n	8008ac0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a34:	f107 0208 	add.w	r2, r7, #8
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4823      	ldr	r0, [pc, #140]	; (8008acc <USBH_ioctl+0xd4>)
 8008a3e:	f000 fda7 	bl	8009590 <USBH_MSC_GetLUNInfo>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a54:	e034      	b.n	8008ac0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a5c:	e030      	b.n	8008ac0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a5e:	f107 0208 	add.w	r2, r7, #8
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	4619      	mov	r1, r3
 8008a66:	4819      	ldr	r0, [pc, #100]	; (8008acc <USBH_ioctl+0xd4>)
 8008a68:	f000 fd92 	bl	8009590 <USBH_MSC_GetLUNInfo>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d107      	bne.n	8008a82 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008a72:	8a3b      	ldrh	r3, [r7, #16]
 8008a74:	461a      	mov	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a80:	e01e      	b.n	8008ac0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a88:	e01a      	b.n	8008ac0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a8a:	f107 0208 	add.w	r2, r7, #8
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	4619      	mov	r1, r3
 8008a92:	480e      	ldr	r0, [pc, #56]	; (8008acc <USBH_ioctl+0xd4>)
 8008a94:	f000 fd7c 	bl	8009590 <USBH_MSC_GetLUNInfo>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008a9e:	8a3b      	ldrh	r3, [r7, #16]
 8008aa0:	0a5b      	lsrs	r3, r3, #9
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ab0:	e006      	b.n	8008ac0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ab8:	e002      	b.n	8008ac0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008aba:	2304      	movs	r3, #4
 8008abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3740      	adds	r7, #64	; 0x40
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	2000172c 	.word	0x2000172c

08008ad0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b089      	sub	sp, #36	; 0x24
 8008ad4:	af04      	add	r7, sp, #16
 8008ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ade:	7919      	ldrb	r1, [r3, #4]
 8008ae0:	2350      	movs	r3, #80	; 0x50
 8008ae2:	2206      	movs	r2, #6
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fc6b 	bl	800a3c0 <USBH_FindInterface>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2bff      	cmp	r3, #255	; 0xff
 8008af2:	d002      	beq.n	8008afa <USBH_MSC_InterfaceInit+0x2a>
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d901      	bls.n	8008afe <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e106      	b.n	8008d0c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fc40 	bl	800a388 <USBH_SelectInterface>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0fa      	b.n	8008d0c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008b1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b20:	f005 fe96 	bl	800e850 <malloc>
 8008b24:	4603      	mov	r3, r0
 8008b26:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e0e7      	b.n	8008d0c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b40:	2100      	movs	r1, #0
 8008b42:	68b8      	ldr	r0, [r7, #8]
 8008b44:	f005 fea2 	bl	800e88c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	211a      	movs	r1, #26
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	b25b      	sxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da16      	bge.n	8008b8e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	211a      	movs	r1, #26
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	211a      	movs	r1, #26
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	815a      	strh	r2, [r3, #10]
 8008b8c:	e015      	b.n	8008bba <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	211a      	movs	r1, #26
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	4413      	add	r3, r2
 8008b9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	211a      	movs	r1, #26
 8008baa:	fb01 f303 	mul.w	r3, r1, r3
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bb4:	881a      	ldrh	r2, [r3, #0]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	211a      	movs	r1, #26
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	b25b      	sxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da16      	bge.n	8008c00 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	211a      	movs	r1, #26
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008be2:	781a      	ldrb	r2, [r3, #0]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	211a      	movs	r1, #26
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bf8:	881a      	ldrh	r2, [r3, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	815a      	strh	r2, [r3, #10]
 8008bfe:	e015      	b.n	8008c2c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	211a      	movs	r1, #26
 8008c06:	fb01 f303 	mul.w	r3, r1, r3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	211a      	movs	r1, #26
 8008c1c:	fb01 f303 	mul.w	r3, r1, r3
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c26:	881a      	ldrh	r2, [r3, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	799b      	ldrb	r3, [r3, #6]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f002 fed6 	bl	800b9f6 <USBH_AllocPipe>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	79db      	ldrb	r3, [r3, #7]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f002 fecc 	bl	800b9f6 <USBH_AllocPipe>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fdc4 	bl	80097f4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	799b      	ldrb	r3, [r3, #6]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01e      	beq.n	8008cb2 <USBH_MSC_InterfaceInit+0x1e2>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	891b      	ldrh	r3, [r3, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01a      	beq.n	8008cb2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	7959      	ldrb	r1, [r3, #5]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	7998      	ldrb	r0, [r3, #6]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	8912      	ldrh	r2, [r2, #8]
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	2202      	movs	r2, #2
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 fe79 	bl	800b998 <USBH_OpenPipe>
 8008ca6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	79db      	ldrb	r3, [r3, #7]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02c      	beq.n	8008d0a <USBH_MSC_InterfaceInit+0x23a>
 8008cb0:	e001      	b.n	8008cb6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e02a      	b.n	8008d0c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	895b      	ldrh	r3, [r3, #10]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d025      	beq.n	8008d0a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	7919      	ldrb	r1, [r3, #4]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	79d8      	ldrb	r0, [r3, #7]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	8952      	ldrh	r2, [r2, #10]
 8008cd6:	9202      	str	r2, [sp, #8]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	9201      	str	r2, [sp, #4]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	4623      	mov	r3, r4
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f002 fe58 	bl	800b998 <USBH_OpenPipe>
 8008ce8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	791b      	ldrb	r3, [r3, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f005 fceb 	bl	800e6ce <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	795b      	ldrb	r3, [r3, #5]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f005 fce4 	bl	800e6ce <USBH_LL_SetToggle>

  return USBH_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008d0a:	2303      	movs	r3, #3
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd90      	pop	{r4, r7, pc}

08008d14 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	795b      	ldrb	r3, [r3, #5]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	795b      	ldrb	r3, [r3, #5]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 fe4e 	bl	800b9d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	795b      	ldrb	r3, [r3, #5]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f002 fe79 	bl	800ba38 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00e      	beq.n	8008d72 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	791b      	ldrb	r3, [r3, #4]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 fe3b 	bl	800b9d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	791b      	ldrb	r3, [r3, #4]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f002 fe66 	bl	800ba38 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f005 fd6a 	bl	800e860 <free>
    phost->pActiveClass->pData = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d92:	2200      	movs	r2, #0
 8008d94:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008db2:	2301      	movs	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	7b9b      	ldrb	r3, [r3, #14]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d041      	beq.n	8008e42 <USBH_MSC_ClassRequest+0xa2>
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	dc4b      	bgt.n	8008e5a <USBH_MSC_ClassRequest+0xba>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <USBH_MSC_ClassRequest+0x2a>
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d147      	bne.n	8008e5a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fcf1 	bl	80097b6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d104      	bne.n	8008de8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d137      	bne.n	8008e5e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d804      	bhi.n	8008e00 <USBH_MSC_ClassRequest+0x60>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	e000      	b.n	8008e02 <USBH_MSC_ClassRequest+0x62>
 8008e00:	2202      	movs	r2, #2
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]
 8008e0a:	e014      	b.n	8008e36 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	2134      	movs	r1, #52	; 0x34
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	3392      	adds	r3, #146	; 0x92
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	2134      	movs	r1, #52	; 0x34
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	4413      	add	r3, r2
 8008e2a:	33c1      	adds	r3, #193	; 0xc1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	3301      	adds	r3, #1
 8008e34:	73bb      	strb	r3, [r7, #14]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	7bba      	ldrb	r2, [r7, #14]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d3e5      	bcc.n	8008e0c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008e40:	e00d      	b.n	8008e5e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e42:	2100      	movs	r1, #0
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f002 f888 	bl	800af5a <USBH_ClrFeature>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d108      	bne.n	8008e62 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	7bda      	ldrb	r2, [r3, #15]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008e58:	e003      	b.n	8008e62 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e002      	b.n	8008e64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008e62:	bf00      	nop
  }

  return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7e:	69db      	ldr	r3, [r3, #28]
 8008e80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	7b1b      	ldrb	r3, [r3, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <USBH_MSC_Process+0x2e>
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	f000 8271 	beq.w	800937e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008e9c:	e272      	b.n	8009384 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f080 824f 	bcs.w	800934e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	2334      	movs	r3, #52	; 0x34
 8008ebc:	fb01 f303 	mul.w	r3, r1, r3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3391      	adds	r3, #145	; 0x91
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ece:	4619      	mov	r1, r3
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	2334      	movs	r3, #52	; 0x34
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	3390      	adds	r3, #144	; 0x90
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	f200 8243 	bhi.w	800936a <USBH_MSC_Process+0x4fa>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <USBH_MSC_Process+0x7c>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	0800936b 	.word	0x0800936b
 8008ef4:	08008fd9 	.word	0x08008fd9
 8008ef8:	0800915d 	.word	0x0800915d
 8008efc:	08008f37 	.word	0x08008f37
 8008f00:	08009229 	.word	0x08009229
 8008f04:	0800936b 	.word	0x0800936b
 8008f08:	0800936b 	.word	0x0800936b
 8008f0c:	0800933d 	.word	0x0800933d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f16:	4619      	mov	r1, r3
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	2334      	movs	r3, #52	; 0x34
 8008f1c:	fb01 f303 	mul.w	r3, r1, r3
 8008f20:	4413      	add	r3, r2
 8008f22:	3390      	adds	r3, #144	; 0x90
 8008f24:	2204      	movs	r2, #4
 8008f26:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f34:	e222      	b.n	800937c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f3c:	b2d9      	uxtb	r1, r3
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f44:	461a      	mov	r2, r3
 8008f46:	2334      	movs	r3, #52	; 0x34
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
 8008f4c:	3398      	adds	r3, #152	; 0x98
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4413      	add	r3, r2
 8008f52:	3307      	adds	r3, #7
 8008f54:	461a      	mov	r2, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 ff6a 	bl	8009e30 <USBH_MSC_SCSI_Inquiry>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	2334      	movs	r3, #52	; 0x34
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	3390      	adds	r3, #144	; 0x90
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d10c      	bne.n	8008f9e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	2334      	movs	r3, #52	; 0x34
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	3390      	adds	r3, #144	; 0x90
 8008f98:	2205      	movs	r2, #5
 8008f9a:	701a      	strb	r2, [r3, #0]
            break;
 8008f9c:	e1e7      	b.n	800936e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	f040 81e4 	bne.w	800936e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fac:	4619      	mov	r1, r3
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	2334      	movs	r3, #52	; 0x34
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3390      	adds	r3, #144	; 0x90
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	2334      	movs	r3, #52	; 0x34
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	3391      	adds	r3, #145	; 0x91
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	701a      	strb	r2, [r3, #0]
            break;
 8008fd6:	e1ca      	b.n	800936e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fe66 	bl	8009cb4 <USBH_MSC_SCSI_TestUnitReady>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d149      	bne.n	8009086 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	2334      	movs	r3, #52	; 0x34
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	3392      	adds	r3, #146	; 0x92
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00c      	beq.n	8009026 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009012:	4619      	mov	r1, r3
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	2334      	movs	r3, #52	; 0x34
 8009018:	fb01 f303 	mul.w	r3, r1, r3
 800901c:	4413      	add	r3, r2
 800901e:	33c1      	adds	r3, #193	; 0xc1
 8009020:	2201      	movs	r2, #1
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	e00b      	b.n	800903e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800902c:	4619      	mov	r1, r3
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	2334      	movs	r3, #52	; 0x34
 8009032:	fb01 f303 	mul.w	r3, r1, r3
 8009036:	4413      	add	r3, r2
 8009038:	33c1      	adds	r3, #193	; 0xc1
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009044:	4619      	mov	r1, r3
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	2334      	movs	r3, #52	; 0x34
 800904a:	fb01 f303 	mul.w	r3, r1, r3
 800904e:	4413      	add	r3, r2
 8009050:	3390      	adds	r3, #144	; 0x90
 8009052:	2203      	movs	r2, #3
 8009054:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800905c:	4619      	mov	r1, r3
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	2334      	movs	r3, #52	; 0x34
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	3391      	adds	r3, #145	; 0x91
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009074:	4619      	mov	r1, r3
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	2334      	movs	r3, #52	; 0x34
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	3392      	adds	r3, #146	; 0x92
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d14a      	bne.n	8009122 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009092:	4619      	mov	r1, r3
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	2334      	movs	r3, #52	; 0x34
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	4413      	add	r3, r2
 800909e:	3392      	adds	r3, #146	; 0x92
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d00c      	beq.n	80090c0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090ac:	4619      	mov	r1, r3
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	2334      	movs	r3, #52	; 0x34
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	4413      	add	r3, r2
 80090b8:	33c1      	adds	r3, #193	; 0xc1
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e00b      	b.n	80090d8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c6:	4619      	mov	r1, r3
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	2334      	movs	r3, #52	; 0x34
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	4413      	add	r3, r2
 80090d2:	33c1      	adds	r3, #193	; 0xc1
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090de:	4619      	mov	r1, r3
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	2334      	movs	r3, #52	; 0x34
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	3390      	adds	r3, #144	; 0x90
 80090ec:	2205      	movs	r2, #5
 80090ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f6:	4619      	mov	r1, r3
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	2334      	movs	r3, #52	; 0x34
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	4413      	add	r3, r2
 8009102:	3391      	adds	r3, #145	; 0x91
 8009104:	2201      	movs	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910e:	4619      	mov	r1, r3
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	2334      	movs	r3, #52	; 0x34
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	4413      	add	r3, r2
 800911a:	3392      	adds	r3, #146	; 0x92
 800911c:	2202      	movs	r2, #2
 800911e:	701a      	strb	r2, [r3, #0]
            break;
 8009120:	e127      	b.n	8009372 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b04      	cmp	r3, #4
 8009126:	f040 8124 	bne.w	8009372 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009130:	4619      	mov	r1, r3
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	2334      	movs	r3, #52	; 0x34
 8009136:	fb01 f303 	mul.w	r3, r1, r3
 800913a:	4413      	add	r3, r2
 800913c:	3390      	adds	r3, #144	; 0x90
 800913e:	2201      	movs	r2, #1
 8009140:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009148:	4619      	mov	r1, r3
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	2334      	movs	r3, #52	; 0x34
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	4413      	add	r3, r2
 8009154:	3391      	adds	r3, #145	; 0x91
 8009156:	2202      	movs	r2, #2
 8009158:	701a      	strb	r2, [r3, #0]
            break;
 800915a:	e10a      	b.n	8009372 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009162:	b2d9      	uxtb	r1, r3
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916a:	461a      	mov	r2, r3
 800916c:	2334      	movs	r3, #52	; 0x34
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	3390      	adds	r3, #144	; 0x90
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	461a      	mov	r2, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fddc 	bl	8009d3a <USBH_MSC_SCSI_ReadCapacity>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d120      	bne.n	80091ce <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009192:	4619      	mov	r1, r3
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	2334      	movs	r3, #52	; 0x34
 8009198:	fb01 f303 	mul.w	r3, r1, r3
 800919c:	4413      	add	r3, r2
 800919e:	3390      	adds	r3, #144	; 0x90
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091aa:	4619      	mov	r1, r3
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	2334      	movs	r3, #52	; 0x34
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	3391      	adds	r3, #145	; 0x91
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c2:	3301      	adds	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80091cc:	e0d3      	b.n	8009376 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d10c      	bne.n	80091ee <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091da:	4619      	mov	r1, r3
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	2334      	movs	r3, #52	; 0x34
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	3390      	adds	r3, #144	; 0x90
 80091e8:	2205      	movs	r2, #5
 80091ea:	701a      	strb	r2, [r3, #0]
            break;
 80091ec:	e0c3      	b.n	8009376 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	f040 80c0 	bne.w	8009376 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091fc:	4619      	mov	r1, r3
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	2334      	movs	r3, #52	; 0x34
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	3390      	adds	r3, #144	; 0x90
 800920a:	2201      	movs	r2, #1
 800920c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009214:	4619      	mov	r1, r3
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	2334      	movs	r3, #52	; 0x34
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	3391      	adds	r3, #145	; 0x91
 8009222:	2202      	movs	r2, #2
 8009224:	701a      	strb	r2, [r3, #0]
            break;
 8009226:	e0a6      	b.n	8009376 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922e:	b2d9      	uxtb	r1, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009236:	461a      	mov	r2, r3
 8009238:	2334      	movs	r3, #52	; 0x34
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	3398      	adds	r3, #152	; 0x98
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4413      	add	r3, r2
 8009244:	3304      	adds	r3, #4
 8009246:	461a      	mov	r2, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fe96 	bl	8009f7a <USBH_MSC_SCSI_RequestSense>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d145      	bne.n	80092e4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800925e:	4619      	mov	r1, r3
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	2334      	movs	r3, #52	; 0x34
 8009264:	fb01 f303 	mul.w	r3, r1, r3
 8009268:	4413      	add	r3, r2
 800926a:	339c      	adds	r3, #156	; 0x9c
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	2b06      	cmp	r3, #6
 8009270:	d00c      	beq.n	800928c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009278:	4619      	mov	r1, r3
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	2334      	movs	r3, #52	; 0x34
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	4413      	add	r3, r2
 8009284:	339c      	adds	r3, #156	; 0x9c
 8009286:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009288:	2b02      	cmp	r3, #2
 800928a:	d117      	bne.n	80092bc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f242 720f 	movw	r2, #9999	; 0x270f
 800929e:	4293      	cmp	r3, r2
 80092a0:	d80c      	bhi.n	80092bc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a8:	4619      	mov	r1, r3
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	2334      	movs	r3, #52	; 0x34
 80092ae:	fb01 f303 	mul.w	r3, r1, r3
 80092b2:	4413      	add	r3, r2
 80092b4:	3390      	adds	r3, #144	; 0x90
 80092b6:	2202      	movs	r2, #2
 80092b8:	701a      	strb	r2, [r3, #0]
                  break;
 80092ba:	e05f      	b.n	800937c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c2:	4619      	mov	r1, r3
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	2334      	movs	r3, #52	; 0x34
 80092c8:	fb01 f303 	mul.w	r3, r1, r3
 80092cc:	4413      	add	r3, r2
 80092ce:	3390      	adds	r3, #144	; 0x90
 80092d0:	2201      	movs	r2, #1
 80092d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092da:	3301      	adds	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d10c      	bne.n	8009304 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f0:	4619      	mov	r1, r3
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	2334      	movs	r3, #52	; 0x34
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	3390      	adds	r3, #144	; 0x90
 80092fe:	2208      	movs	r2, #8
 8009300:	701a      	strb	r2, [r3, #0]
            break;
 8009302:	e03a      	b.n	800937a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d137      	bne.n	800937a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009310:	4619      	mov	r1, r3
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	2334      	movs	r3, #52	; 0x34
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	3390      	adds	r3, #144	; 0x90
 800931e:	2201      	movs	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	4413      	add	r3, r2
 8009334:	3391      	adds	r3, #145	; 0x91
 8009336:	2202      	movs	r2, #2
 8009338:	701a      	strb	r2, [r3, #0]
            break;
 800933a:	e01e      	b.n	800937a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009342:	3301      	adds	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800934c:	e016      	b.n	800937c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2200      	movs	r2, #0
 8009352:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2201      	movs	r2, #1
 800935a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009362:	2102      	movs	r1, #2
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
      break;
 8009368:	e00c      	b.n	8009384 <USBH_MSC_Process+0x514>
            break;
 800936a:	bf00      	nop
 800936c:	e00a      	b.n	8009384 <USBH_MSC_Process+0x514>
            break;
 800936e:	bf00      	nop
 8009370:	e008      	b.n	8009384 <USBH_MSC_Process+0x514>
            break;
 8009372:	bf00      	nop
 8009374:	e006      	b.n	8009384 <USBH_MSC_Process+0x514>
            break;
 8009376:	bf00      	nop
 8009378:	e004      	b.n	8009384 <USBH_MSC_Process+0x514>
            break;
 800937a:	bf00      	nop
      break;
 800937c:	e002      	b.n	8009384 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]
      break;
 8009382:	bf00      	nop
  }
  return error;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop

08009390 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b088      	sub	sp, #32
 80093aa:	af02      	add	r7, sp, #8
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80093c0:	2301      	movs	r3, #1
 80093c2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	2134      	movs	r1, #52	; 0x34
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	4413      	add	r3, r2
 80093d0:	3390      	adds	r3, #144	; 0x90
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	2b07      	cmp	r3, #7
 80093d6:	d03c      	beq.n	8009452 <USBH_MSC_RdWrProcess+0xac>
 80093d8:	2b07      	cmp	r3, #7
 80093da:	f300 80a7 	bgt.w	800952c <USBH_MSC_RdWrProcess+0x186>
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d06c      	beq.n	80094bc <USBH_MSC_RdWrProcess+0x116>
 80093e2:	2b06      	cmp	r3, #6
 80093e4:	f040 80a2 	bne.w	800952c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80093e8:	78f9      	ldrb	r1, [r7, #3]
 80093ea:	2300      	movs	r3, #0
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fea5 	bl	800a142 <USBH_MSC_SCSI_Read>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	2134      	movs	r1, #52	; 0x34
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	4413      	add	r3, r2
 800940e:	3390      	adds	r3, #144	; 0x90
 8009410:	2201      	movs	r2, #1
 8009412:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009418:	e08a      	b.n	8009530 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d109      	bne.n	8009434 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	2134      	movs	r1, #52	; 0x34
 8009426:	fb01 f303 	mul.w	r3, r1, r3
 800942a:	4413      	add	r3, r2
 800942c:	3390      	adds	r3, #144	; 0x90
 800942e:	2205      	movs	r2, #5
 8009430:	701a      	strb	r2, [r3, #0]
      break;
 8009432:	e07d      	b.n	8009530 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	2b04      	cmp	r3, #4
 8009438:	d17a      	bne.n	8009530 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	2134      	movs	r1, #52	; 0x34
 8009440:	fb01 f303 	mul.w	r3, r1, r3
 8009444:	4413      	add	r3, r2
 8009446:	3390      	adds	r3, #144	; 0x90
 8009448:	2208      	movs	r2, #8
 800944a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800944c:	2302      	movs	r3, #2
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e06e      	b.n	8009530 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009452:	78f9      	ldrb	r1, [r7, #3]
 8009454:	2300      	movs	r3, #0
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fe05 	bl	800a06c <USBH_MSC_SCSI_Write>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	2134      	movs	r1, #52	; 0x34
 8009472:	fb01 f303 	mul.w	r3, r1, r3
 8009476:	4413      	add	r3, r2
 8009478:	3390      	adds	r3, #144	; 0x90
 800947a:	2201      	movs	r2, #1
 800947c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009482:	e057      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	2b02      	cmp	r3, #2
 8009488:	d109      	bne.n	800949e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800948a:	78fb      	ldrb	r3, [r7, #3]
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	2134      	movs	r1, #52	; 0x34
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	3390      	adds	r3, #144	; 0x90
 8009498:	2205      	movs	r2, #5
 800949a:	701a      	strb	r2, [r3, #0]
      break;
 800949c:	e04a      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d147      	bne.n	8009534 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	2134      	movs	r1, #52	; 0x34
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3390      	adds	r3, #144	; 0x90
 80094b2:	2208      	movs	r2, #8
 80094b4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094b6:	2302      	movs	r3, #2
 80094b8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ba:	e03b      	b.n	8009534 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	2234      	movs	r2, #52	; 0x34
 80094c0:	fb02 f303 	mul.w	r3, r2, r3
 80094c4:	3398      	adds	r3, #152	; 0x98
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	1d1a      	adds	r2, r3, #4
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fd52 	bl	8009f7a <USBH_MSC_SCSI_RequestSense>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d113      	bne.n	8009508 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	2134      	movs	r1, #52	; 0x34
 80094e6:	fb01 f303 	mul.w	r3, r1, r3
 80094ea:	4413      	add	r3, r2
 80094ec:	3390      	adds	r3, #144	; 0x90
 80094ee:	2201      	movs	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	2134      	movs	r1, #52	; 0x34
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	4413      	add	r3, r2
 80094fe:	3391      	adds	r3, #145	; 0x91
 8009500:	2202      	movs	r2, #2
 8009502:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009504:	2302      	movs	r3, #2
 8009506:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d014      	beq.n	8009538 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b04      	cmp	r3, #4
 8009512:	d111      	bne.n	8009538 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	2134      	movs	r1, #52	; 0x34
 800951a:	fb01 f303 	mul.w	r3, r1, r3
 800951e:	4413      	add	r3, r2
 8009520:	3390      	adds	r3, #144	; 0x90
 8009522:	2208      	movs	r2, #8
 8009524:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009526:	2302      	movs	r3, #2
 8009528:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800952a:	e005      	b.n	8009538 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800952c:	bf00      	nop
 800952e:	e004      	b.n	800953a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009530:	bf00      	nop
 8009532:	e002      	b.n	800953a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009538:	bf00      	nop

  }
  return error;
 800953a:	7dfb      	ldrb	r3, [r7, #23]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b0b      	cmp	r3, #11
 8009562:	d10c      	bne.n	800957e <USBH_MSC_UnitIsReady+0x3a>
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	2134      	movs	r1, #52	; 0x34
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	3391      	adds	r3, #145	; 0x91
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009578:	2301      	movs	r3, #1
 800957a:	73fb      	strb	r3, [r7, #15]
 800957c:	e001      	b.n	8009582 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	460b      	mov	r3, r1
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b0b      	cmp	r3, #11
 80095b0:	d10d      	bne.n	80095ce <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	2234      	movs	r2, #52	; 0x34
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
 80095ba:	3390      	adds	r3, #144	; 0x90
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	4413      	add	r3, r2
 80095c0:	2234      	movs	r2, #52	; 0x34
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f005 f953 	bl	800e870 <memcpy>
    return USBH_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e000      	b.n	80095d0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095ce:	2302      	movs	r3, #2
  }
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af02      	add	r7, sp, #8
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	460b      	mov	r3, r1
 80095e6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00e      	beq.n	800961c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009604:	2b0b      	cmp	r3, #11
 8009606:	d109      	bne.n	800961c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	2134      	movs	r1, #52	; 0x34
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	4413      	add	r3, r2
 8009614:	3390      	adds	r3, #144	; 0x90
 8009616:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009618:	2b01      	cmp	r3, #1
 800961a:	d001      	beq.n	8009620 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	e040      	b.n	80096a2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2206      	movs	r2, #6
 8009624:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	2134      	movs	r1, #52	; 0x34
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	4413      	add	r3, r2
 8009632:	3390      	adds	r3, #144	; 0x90
 8009634:	2206      	movs	r2, #6
 8009636:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	b29a      	uxth	r2, r3
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009642:	7af9      	ldrb	r1, [r7, #11]
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fd78 	bl	800a142 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009658:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800965a:	e016      	b.n	800968a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	f242 7110 	movw	r1, #10000	; 0x2710
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	429a      	cmp	r2, r3
 8009672:	d805      	bhi.n	8009680 <USBH_MSC_Read+0xa8>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2201      	movs	r2, #1
 8009684:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	e00b      	b.n	80096a2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	4619      	mov	r1, r3
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff fe89 	bl	80093a6 <USBH_MSC_RdWrProcess>
 8009694:	4603      	mov	r3, r0
 8009696:	2b01      	cmp	r3, #1
 8009698:	d0e0      	beq.n	800965c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2201      	movs	r2, #1
 800969e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b088      	sub	sp, #32
 80096ae:	af02      	add	r7, sp, #8
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
 80096b6:	460b      	mov	r3, r1
 80096b8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00e      	beq.n	80096ee <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096d6:	2b0b      	cmp	r3, #11
 80096d8:	d109      	bne.n	80096ee <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	2134      	movs	r1, #52	; 0x34
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	4413      	add	r3, r2
 80096e6:	3390      	adds	r3, #144	; 0x90
 80096e8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d001      	beq.n	80096f2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80096ee:	2302      	movs	r3, #2
 80096f0:	e040      	b.n	8009774 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2207      	movs	r2, #7
 80096f6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	2134      	movs	r1, #52	; 0x34
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	4413      	add	r3, r2
 8009704:	3390      	adds	r3, #144	; 0x90
 8009706:	2207      	movs	r2, #7
 8009708:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800970a:	7afb      	ldrb	r3, [r7, #11]
 800970c:	b29a      	uxth	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009714:	7af9      	ldrb	r1, [r7, #11]
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fca4 	bl	800a06c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800972a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800972c:	e016      	b.n	800975c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	f242 7110 	movw	r1, #10000	; 0x2710
 800973e:	fb01 f303 	mul.w	r3, r1, r3
 8009742:	429a      	cmp	r2, r3
 8009744:	d805      	bhi.n	8009752 <USBH_MSC_Write+0xa8>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d104      	bne.n	800975c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2201      	movs	r2, #1
 8009756:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009758:	2302      	movs	r3, #2
 800975a:	e00b      	b.n	8009774 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	4619      	mov	r1, r3
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f7ff fe20 	bl	80093a6 <USBH_MSC_RdWrProcess>
 8009766:	4603      	mov	r3, r0
 8009768:	2b01      	cmp	r3, #1
 800976a:	d0e0      	beq.n	800972e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2201      	movs	r2, #1
 8009770:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3718      	adds	r7, #24
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2221      	movs	r2, #33	; 0x21
 8009788:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	22ff      	movs	r2, #255	; 0xff
 800978e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80097a2:	2200      	movs	r2, #0
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fea4 	bl	800b4f4 <USBH_CtlReq>
 80097ac:	4603      	mov	r3, r0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	22a1      	movs	r2, #161	; 0xa1
 80097c4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	22fe      	movs	r2, #254	; 0xfe
 80097ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80097de:	2201      	movs	r2, #1
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 fe86 	bl	800b4f4 <USBH_CtlReq>
 80097e8:	4603      	mov	r3, r0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a09      	ldr	r2, [pc, #36]	; (8009830 <USBH_MSC_BOT_Init+0x3c>)
 800980a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a09      	ldr	r2, [pc, #36]	; (8009834 <USBH_MSC_BOT_Init+0x40>)
 8009810:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	43425355 	.word	0x43425355
 8009834:	20304050 	.word	0x20304050

08009838 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af02      	add	r7, sp, #8
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009844:	2301      	movs	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009848:	2301      	movs	r3, #1
 800984a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800984c:	2301      	movs	r3, #1
 800984e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009850:	2300      	movs	r3, #0
 8009852:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009868:	3b01      	subs	r3, #1
 800986a:	2b0a      	cmp	r3, #10
 800986c:	f200 819e 	bhi.w	8009bac <USBH_MSC_BOT_Process+0x374>
 8009870:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <USBH_MSC_BOT_Process+0x40>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098a5 	.word	0x080098a5
 800987c:	080098cd 	.word	0x080098cd
 8009880:	08009937 	.word	0x08009937
 8009884:	08009955 	.word	0x08009955
 8009888:	080099d9 	.word	0x080099d9
 800988c:	080099fb 	.word	0x080099fb
 8009890:	08009a93 	.word	0x08009a93
 8009894:	08009aaf 	.word	0x08009aaf
 8009898:	08009b01 	.word	0x08009b01
 800989c:	08009b31 	.word	0x08009b31
 80098a0:	08009b93 	.word	0x08009b93
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	795b      	ldrb	r3, [r3, #5]
 80098be:	2201      	movs	r2, #1
 80098c0:	9200      	str	r2, [sp, #0]
 80098c2:	221f      	movs	r2, #31
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f002 f824 	bl	800b912 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098ca:	e17e      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	795b      	ldrb	r3, [r3, #5]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f004 feda 	bl	800e68c <USBH_LL_GetURBState>
 80098d8:	4603      	mov	r3, r0
 80098da:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098dc:	7d3b      	ldrb	r3, [r7, #20]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d118      	bne.n	8009914 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00f      	beq.n	800990a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098f0:	b25b      	sxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da04      	bge.n	8009900 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2203      	movs	r2, #3
 80098fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098fe:	e157      	b.n	8009bb0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2205      	movs	r2, #5
 8009904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009908:	e152      	b.n	8009bb0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2207      	movs	r2, #7
 800990e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009912:	e14d      	b.n	8009bb0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009914:	7d3b      	ldrb	r3, [r7, #20]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d104      	bne.n	8009924 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009922:	e145      	b.n	8009bb0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009924:	7d3b      	ldrb	r3, [r7, #20]
 8009926:	2b05      	cmp	r3, #5
 8009928:	f040 8142 	bne.w	8009bb0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	220a      	movs	r2, #10
 8009930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009934:	e13c      	b.n	8009bb0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	895a      	ldrh	r2, [r3, #10]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	791b      	ldrb	r3, [r3, #4]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f002 f809 	bl	800b95c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2204      	movs	r2, #4
 800994e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009952:	e13a      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	791b      	ldrb	r3, [r3, #4]
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f004 fe96 	bl	800e68c <USBH_LL_GetURBState>
 8009960:	4603      	mov	r3, r0
 8009962:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009964:	7d3b      	ldrb	r3, [r7, #20]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d12d      	bne.n	80099c6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	8952      	ldrh	r2, [r2, #10]
 8009972:	4293      	cmp	r3, r2
 8009974:	d910      	bls.n	8009998 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	8952      	ldrh	r2, [r2, #10]
 8009980:	441a      	add	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	8952      	ldrh	r2, [r2, #10]
 8009990:	1a9a      	subs	r2, r3, r2
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	65da      	str	r2, [r3, #92]	; 0x5c
 8009996:	e002      	b.n	800999e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	2200      	movs	r2, #0
 800999c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	895a      	ldrh	r2, [r3, #10]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	791b      	ldrb	r3, [r3, #4]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 ffd1 	bl	800b95c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80099ba:	e0fb      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2207      	movs	r2, #7
 80099c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099c4:	e0f6      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80099c6:	7d3b      	ldrb	r3, [r7, #20]
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	f040 80f3 	bne.w	8009bb4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2209      	movs	r2, #9
 80099d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099d6:	e0ed      	b.n	8009bb4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	891a      	ldrh	r2, [r3, #8]
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	795b      	ldrb	r3, [r3, #5]
 80099e6:	2001      	movs	r0, #1
 80099e8:	9000      	str	r0, [sp, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 ff91 	bl	800b912 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2206      	movs	r2, #6
 80099f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099f8:	e0e7      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	795b      	ldrb	r3, [r3, #5]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f004 fe43 	bl	800e68c <USBH_LL_GetURBState>
 8009a06:	4603      	mov	r3, r0
 8009a08:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a0a:	7d3b      	ldrb	r3, [r7, #20]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d12f      	bne.n	8009a70 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	8912      	ldrh	r2, [r2, #8]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d910      	bls.n	8009a3e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	8912      	ldrh	r2, [r2, #8]
 8009a26:	441a      	add	r2, r3
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	8912      	ldrh	r2, [r2, #8]
 8009a36:	1a9a      	subs	r2, r3, r2
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a3c:	e002      	b.n	8009a44 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2200      	movs	r2, #0
 8009a42:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	891a      	ldrh	r2, [r3, #8]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	795b      	ldrb	r3, [r3, #5]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	9000      	str	r0, [sp, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 ff57 	bl	800b912 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009a64:	e0a8      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2207      	movs	r2, #7
 8009a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a6e:	e0a3      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a70:	7d3b      	ldrb	r3, [r7, #20]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d104      	bne.n	8009a80 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2205      	movs	r2, #5
 8009a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a7e:	e09b      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009a80:	7d3b      	ldrb	r3, [r7, #20]
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	f040 8098 	bne.w	8009bb8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a90:	e092      	b.n	8009bb8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	791b      	ldrb	r3, [r3, #4]
 8009a9c:	220d      	movs	r2, #13
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 ff5c 	bl	800b95c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aac:	e08d      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	791b      	ldrb	r3, [r3, #4]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f004 fde9 	bl	800e68c <USBH_LL_GetURBState>
 8009aba:	4603      	mov	r3, r0
 8009abc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009abe:	7d3b      	ldrb	r3, [r7, #20]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d115      	bne.n	8009af0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f8a9 	bl	8009c2c <USBH_MSC_DecodeCSW>
 8009ada:	4603      	mov	r3, r0
 8009adc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009ade:	7d7b      	ldrb	r3, [r7, #21]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ae8:	e068      	b.n	8009bbc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009aea:	2302      	movs	r3, #2
 8009aec:	75fb      	strb	r3, [r7, #23]
      break;
 8009aee:	e065      	b.n	8009bbc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009af0:	7d3b      	ldrb	r3, [r7, #20]
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	d162      	bne.n	8009bbc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2209      	movs	r2, #9
 8009afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009afe:	e05d      	b.n	8009bbc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	2200      	movs	r2, #0
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f864 	bl	8009bd4 <USBH_MSC_BOT_Abort>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b10:	7dbb      	ldrb	r3, [r7, #22]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2207      	movs	r2, #7
 8009b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009b1e:	e04f      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009b20:	7dbb      	ldrb	r3, [r7, #22]
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d14c      	bne.n	8009bc0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	220b      	movs	r2, #11
 8009b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b2e:	e047      	b.n	8009bc0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	2201      	movs	r2, #1
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f84c 	bl	8009bd4 <USBH_MSC_BOT_Abort>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b40:	7dbb      	ldrb	r3, [r7, #22]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d11d      	bne.n	8009b82 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	795b      	ldrb	r3, [r3, #5]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f004 fdee 	bl	800e72e <USBH_LL_GetToggle>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	7959      	ldrb	r1, [r3, #5]
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	f1c3 0301 	rsb	r3, r3, #1
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f004 fdb2 	bl	800e6ce <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f004 fdab 	bl	800e6ce <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2209      	movs	r2, #9
 8009b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009b80:	e020      	b.n	8009bc4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009b82:	7dbb      	ldrb	r3, [r7, #22]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d11d      	bne.n	8009bc4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	220b      	movs	r2, #11
 8009b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b90:	e018      	b.n	8009bc4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff fdf2 	bl	800977c <USBH_MSC_BOT_REQ_Reset>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d112      	bne.n	8009bc8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009baa:	e00d      	b.n	8009bc8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009bac:	bf00      	nop
 8009bae:	e00c      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bb0:	bf00      	nop
 8009bb2:	e00a      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bb4:	bf00      	nop
 8009bb6:	e008      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bb8:	bf00      	nop
 8009bba:	e006      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e004      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <USBH_MSC_BOT_Process+0x392>
      break;
 8009bc8:	bf00      	nop
  }
  return status;
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	70fb      	strb	r3, [r7, #3]
 8009be0:	4613      	mov	r3, r2
 8009be2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009be4:	2302      	movs	r3, #2
 8009be6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009bf2:	78bb      	ldrb	r3, [r7, #2]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <USBH_MSC_BOT_Abort+0x2a>
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d009      	beq.n	8009c10 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009bfc:	e011      	b.n	8009c22 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	79db      	ldrb	r3, [r3, #7]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 f9a8 	bl	800af5a <USBH_ClrFeature>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c0e:	e008      	b.n	8009c22 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	799b      	ldrb	r3, [r3, #6]
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 f99f 	bl	800af5a <USBH_ClrFeature>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c20:	bf00      	nop
  }
  return status;
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	791b      	ldrb	r3, [r3, #4]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f004 fc8d 	bl	800e568 <USBH_LL_GetLastXferSize>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b0d      	cmp	r3, #13
 8009c52:	d002      	beq.n	8009c5a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009c54:	2302      	movs	r3, #2
 8009c56:	73fb      	strb	r3, [r7, #15]
 8009c58:	e024      	b.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c5e:	4a14      	ldr	r2, [pc, #80]	; (8009cb0 <USBH_MSC_DecodeCSW+0x84>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d11d      	bne.n	8009ca0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d119      	bne.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d102      	bne.n	8009c80 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
 8009c7e:	e011      	b.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d102      	bne.n	8009c90 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	73fb      	strb	r3, [r7, #15]
 8009c8e:	e009      	b.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d104      	bne.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	73fb      	strb	r3, [r7, #15]
 8009c9e:	e001      	b.n	8009ca4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	53425355 	.word	0x53425355

08009cb4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d002      	beq.n	8009cde <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d021      	beq.n	8009d20 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009cdc:	e028      	b.n	8009d30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	220a      	movs	r2, #10
 8009cf0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	3363      	adds	r3, #99	; 0x63
 8009cf8:	2210      	movs	r2, #16
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f004 fdc5 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2202      	movs	r2, #2
 8009d16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1e:	e007      	b.n	8009d30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fd87 	bl	8009838 <USBH_MSC_BOT_Process>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2e:	bf00      	nop
  }

  return error;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b086      	sub	sp, #24
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	460b      	mov	r3, r1
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d002      	beq.n	8009d66 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d027      	beq.n	8009db4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009d64:	e05f      	b.n	8009e26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2280      	movs	r2, #128	; 0x80
 8009d70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	220a      	movs	r2, #10
 8009d78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	3363      	adds	r3, #99	; 0x63
 8009d80:	2210      	movs	r2, #16
 8009d82:	2100      	movs	r1, #0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f004 fd81 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2225      	movs	r2, #37	; 0x25
 8009d8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f103 0210 	add.w	r2, r3, #16
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009dae:	2301      	movs	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]
      break;
 8009db2:	e038      	b.n	8009e26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	4619      	mov	r1, r3
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7ff fd3d 	bl	8009838 <USBH_MSC_BOT_Process>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d12d      	bne.n	8009e24 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dce:	3303      	adds	r3, #3
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dda:	3302      	adds	r3, #2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de8:	3301      	adds	r3, #1
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dee:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	061b      	lsls	r3, r3, #24
 8009dfa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e06:	3307      	adds	r3, #7
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e12:	3306      	adds	r3, #6
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	809a      	strh	r2, [r3, #4]
      break;
 8009e24:	bf00      	nop
  }

  return error;
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d002      	beq.n	8009e5c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d03d      	beq.n	8009ed6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009e5a:	e089      	b.n	8009f70 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2224      	movs	r2, #36	; 0x24
 8009e60:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2280      	movs	r2, #128	; 0x80
 8009e66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	220a      	movs	r2, #10
 8009e6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3363      	adds	r3, #99	; 0x63
 8009e76:	220a      	movs	r2, #10
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f004 fd06 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2212      	movs	r2, #18
 8009e84:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009e88:	7afb      	ldrb	r3, [r7, #11]
 8009e8a:	015b      	lsls	r3, r3, #5
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2224      	movs	r2, #36	; 0x24
 8009ea8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f103 0210 	add.w	r2, r3, #16
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed4:	e04c      	b.n	8009f70 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fcac 	bl	8009838 <USBH_MSC_BOT_Process>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d141      	bne.n	8009f6e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009eea:	2222      	movs	r2, #34	; 0x22
 8009eec:	2100      	movs	r1, #0
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f004 fccc 	bl	800e88c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	095b      	lsrs	r3, r3, #5
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	da03      	bge.n	8009f2e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	709a      	strb	r2, [r3, #2]
 8009f2c:	e002      	b.n	8009f34 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	1cd8      	adds	r0, r3, #3
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f3e:	3308      	adds	r3, #8
 8009f40:	2208      	movs	r2, #8
 8009f42:	4619      	mov	r1, r3
 8009f44:	f004 fc94 	bl	800e870 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f103 000c 	add.w	r0, r3, #12
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f54:	3310      	adds	r3, #16
 8009f56:	2210      	movs	r2, #16
 8009f58:	4619      	mov	r1, r3
 8009f5a:	f004 fc89 	bl	800e870 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	331d      	adds	r3, #29
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009f68:	3220      	adds	r2, #32
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	601a      	str	r2, [r3, #0]
      break;
 8009f6e:	bf00      	nop
  }

  return error;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	460b      	mov	r3, r1
 8009f84:	607a      	str	r2, [r7, #4]
 8009f86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d002      	beq.n	8009fa6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d03d      	beq.n	800a020 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009fa4:	e05d      	b.n	800a062 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	220e      	movs	r2, #14
 8009faa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2280      	movs	r2, #128	; 0x80
 8009fb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	3363      	adds	r3, #99	; 0x63
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f004 fc61 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2203      	movs	r2, #3
 8009fce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	015b      	lsls	r3, r3, #5
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	220e      	movs	r2, #14
 8009ff2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f103 0210 	add.w	r2, r3, #16
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
      break;
 800a01e:	e020      	b.n	800a062 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	4619      	mov	r1, r3
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fc07 	bl	8009838 <USBH_MSC_BOT_Process>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d115      	bne.n	800a060 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03a:	3302      	adds	r3, #2
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	b2da      	uxtb	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04e:	7b1a      	ldrb	r2, [r3, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05a:	7b5a      	ldrb	r2, [r3, #13]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	709a      	strb	r2, [r3, #2]
      break;
 800a060:	bf00      	nop
  }

  return error;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	460b      	mov	r3, r1
 800a07a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a07c:	2302      	movs	r3, #2
 800a07e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a090:	2b01      	cmp	r3, #1
 800a092:	d002      	beq.n	800a09a <USBH_MSC_SCSI_Write+0x2e>
 800a094:	2b02      	cmp	r3, #2
 800a096:	d047      	beq.n	800a128 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a098:	e04e      	b.n	800a138 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	fb03 f202 	mul.w	r2, r3, r2
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	3363      	adds	r3, #99	; 0x63
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f004 fbe1 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	222a      	movs	r2, #42	; 0x2a
 800a0ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0d2:	79fa      	ldrb	r2, [r7, #7]
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0da:	79ba      	ldrb	r2, [r7, #6]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a0e2:	797a      	ldrb	r2, [r7, #5]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a0ea:	1d3b      	adds	r3, r7, #4
 800a0ec:	781a      	ldrb	r2, [r3, #0]
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a0f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a0fe:	f107 0320 	add.w	r3, r7, #32
 800a102:	781a      	ldrb	r2, [r3, #0]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2202      	movs	r2, #2
 800a116:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
      break;
 800a126:	e007      	b.n	800a138 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	4619      	mov	r1, r3
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7ff fb83 	bl	8009838 <USBH_MSC_BOT_Process>
 800a132:	4603      	mov	r3, r0
 800a134:	75fb      	strb	r3, [r7, #23]
      break;
 800a136:	bf00      	nop
  }

  return error;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
 800a14e:	460b      	mov	r3, r1
 800a150:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a152:	2302      	movs	r3, #2
 800a154:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a166:	2b01      	cmp	r3, #1
 800a168:	d002      	beq.n	800a170 <USBH_MSC_SCSI_Read+0x2e>
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d047      	beq.n	800a1fe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a16e:	e04e      	b.n	800a20e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a176:	461a      	mov	r2, r3
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	fb03 f202 	mul.w	r2, r3, r2
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2280      	movs	r2, #128	; 0x80
 800a186:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	220a      	movs	r2, #10
 800a18e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	3363      	adds	r3, #99	; 0x63
 800a196:	2210      	movs	r2, #16
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f004 fb76 	bl	800e88c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2228      	movs	r2, #40	; 0x28
 800a1a4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a1a8:	79fa      	ldrb	r2, [r7, #7]
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a1b0:	79ba      	ldrb	r2, [r7, #6]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a1b8:	797a      	ldrb	r2, [r7, #5]
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a1c0:	1d3b      	adds	r3, r7, #4
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a1ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a1d4:	f107 0320 	add.w	r3, r7, #32
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fc:	e007      	b.n	800a20e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	4619      	mov	r1, r3
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fb18 	bl	8009838 <USBH_MSC_BOT_Process>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
      break;
 800a20c:	bf00      	nop
  }

  return error;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a22c:	2302      	movs	r3, #2
 800a22e:	e029      	b.n	800a284 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	79fa      	ldrb	r2, [r7, #7]
 800a234:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f81f 	bl	800a28c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f004 f8bf 	bl	800e400 <USBH_LL_Init>

  return USBH_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	e009      	b.n	800a2b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	33e0      	adds	r3, #224	; 0xe0
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b0f      	cmp	r3, #15
 800a2b6:	d9f2      	bls.n	800a29e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e009      	b.n	800a2d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d8:	d3f1      	bcc.n	800a2be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2240      	movs	r2, #64	; 0x40
 800a2fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d016      	beq.n	800a376 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10e      	bne.n	800a370 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a358:	1c59      	adds	r1, r3, #1
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	33de      	adds	r3, #222	; 0xde
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	e004      	b.n	800a37a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a370:	2302      	movs	r3, #2
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e001      	b.n	800a37a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	460b      	mov	r3, r1
 800a392:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a39e:	78fa      	ldrb	r2, [r7, #3]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d204      	bcs.n	800a3ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3ac:	e001      	b.n	800a3b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	70fb      	strb	r3, [r7, #3]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70bb      	strb	r3, [r7, #2]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3ea:	e025      	b.n	800a438 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	221a      	movs	r2, #26
 800a3f0:	fb02 f303 	mul.w	r3, r2, r3
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3302      	adds	r3, #2
 800a3fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	795b      	ldrb	r3, [r3, #5]
 800a402:	78fa      	ldrb	r2, [r7, #3]
 800a404:	429a      	cmp	r2, r3
 800a406:	d002      	beq.n	800a40e <USBH_FindInterface+0x4e>
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	2bff      	cmp	r3, #255	; 0xff
 800a40c:	d111      	bne.n	800a432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a412:	78ba      	ldrb	r2, [r7, #2]
 800a414:	429a      	cmp	r2, r3
 800a416:	d002      	beq.n	800a41e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a418:	78bb      	ldrb	r3, [r7, #2]
 800a41a:	2bff      	cmp	r3, #255	; 0xff
 800a41c:	d109      	bne.n	800a432 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a422:	787a      	ldrb	r2, [r7, #1]
 800a424:	429a      	cmp	r2, r3
 800a426:	d002      	beq.n	800a42e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a428:	787b      	ldrb	r3, [r7, #1]
 800a42a:	2bff      	cmp	r3, #255	; 0xff
 800a42c:	d101      	bne.n	800a432 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	e006      	b.n	800a440 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	3301      	adds	r3, #1
 800a436:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d9d6      	bls.n	800a3ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a43e:	23ff      	movs	r3, #255	; 0xff
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f004 f80f 	bl	800e478 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a45a:	2101      	movs	r1, #1
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f004 f928 	bl	800e6b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af04      	add	r7, sp, #16
 800a472:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a474:	2302      	movs	r3, #2
 800a476:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b01      	cmp	r3, #1
 800a486:	d102      	bne.n	800a48e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2203      	movs	r2, #3
 800a48c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b0b      	cmp	r3, #11
 800a496:	f200 81be 	bhi.w	800a816 <USBH_Process+0x3aa>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <USBH_Process+0x34>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4d1 	.word	0x0800a4d1
 800a4a4:	0800a503 	.word	0x0800a503
 800a4a8:	0800a56b 	.word	0x0800a56b
 800a4ac:	0800a7b1 	.word	0x0800a7b1
 800a4b0:	0800a817 	.word	0x0800a817
 800a4b4:	0800a60f 	.word	0x0800a60f
 800a4b8:	0800a757 	.word	0x0800a757
 800a4bc:	0800a645 	.word	0x0800a645
 800a4c0:	0800a665 	.word	0x0800a665
 800a4c4:	0800a685 	.word	0x0800a685
 800a4c8:	0800a6c9 	.word	0x0800a6c9
 800a4cc:	0800a799 	.word	0x0800a799
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 819e 	beq.w	800a81a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4e4:	20c8      	movs	r0, #200	; 0xc8
 800a4e6:	f004 f952 	bl	800e78e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f004 f821 	bl	800e532 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a500:	e18b      	b.n	800a81a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d107      	bne.n	800a51c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a51a:	e18d      	b.n	800a838 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a526:	d914      	bls.n	800a552 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a52e:	3301      	adds	r3, #1
 800a530:	b2da      	uxtb	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d903      	bls.n	800a54a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	220d      	movs	r2, #13
 800a546:	701a      	strb	r2, [r3, #0]
      break;
 800a548:	e176      	b.n	800a838 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
      break;
 800a550:	e172      	b.n	800a838 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a558:	f103 020a 	add.w	r2, r3, #10
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a562:	200a      	movs	r0, #10
 800a564:	f004 f913 	bl	800e78e <USBH_Delay>
      break;
 800a568:	e166      	b.n	800a838 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d005      	beq.n	800a580 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a57a:	2104      	movs	r1, #4
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a580:	2064      	movs	r0, #100	; 0x64
 800a582:	f004 f904 	bl	800e78e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f003 ffac 	bl	800e4e4 <USBH_LL_GetSpeed>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2205      	movs	r2, #5
 800a59a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a59c:	2100      	movs	r1, #0
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fa29 	bl	800b9f6 <USBH_AllocPipe>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5ac:	2180      	movs	r1, #128	; 0x80
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 fa21 	bl	800b9f6 <USBH_AllocPipe>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7919      	ldrb	r1, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5d0:	b292      	uxth	r2, r2
 800a5d2:	9202      	str	r2, [sp, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	9201      	str	r2, [sp, #4]
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2280      	movs	r2, #128	; 0x80
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 f9da 	bl	800b998 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7959      	ldrb	r1, [r3, #5]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5f8:	b292      	uxth	r2, r2
 800a5fa:	9202      	str	r2, [sp, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	9201      	str	r2, [sp, #4]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4603      	mov	r3, r0
 800a604:	2200      	movs	r2, #0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 f9c6 	bl	800b998 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a60c:	e114      	b.n	800a838 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f918 	bl	800a844 <USBH_HandleEnum>
 800a614:	4603      	mov	r3, r0
 800a616:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f040 80fe 	bne.w	800a81e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a630:	2b01      	cmp	r3, #1
 800a632:	d103      	bne.n	800a63c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2208      	movs	r2, #8
 800a638:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a63a:	e0f0      	b.n	800a81e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2207      	movs	r2, #7
 800a640:	701a      	strb	r2, [r3, #0]
      break;
 800a642:	e0ec      	b.n	800a81e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80e9 	beq.w	800a822 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a656:	2101      	movs	r1, #1
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2208      	movs	r2, #8
 800a660:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a662:	e0de      	b.n	800a822 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fc2c 	bl	800aecc <USBH_SetCfg>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	f040 80d5 	bne.w	800a826 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2209      	movs	r2, #9
 800a680:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a682:	e0d0      	b.n	800a826 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d016      	beq.n	800a6c0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a692:	2101      	movs	r1, #1
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc3c 	bl	800af12 <USBH_SetFeature>
 800a69a:	4603      	mov	r3, r0
 800a69c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d103      	bne.n	800a6ae <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	220a      	movs	r2, #10
 800a6aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6ac:	e0bd      	b.n	800a82a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 80b9 	bne.w	800a82a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	701a      	strb	r2, [r3, #0]
      break;
 800a6be:	e0b4      	b.n	800a82a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220a      	movs	r2, #10
 800a6c4:	701a      	strb	r2, [r3, #0]
      break;
 800a6c6:	e0b0      	b.n	800a82a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 80ad 	beq.w	800a82e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
 800a6e0:	e016      	b.n	800a710 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6e2:	7bfa      	ldrb	r2, [r7, #15]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	32de      	adds	r2, #222	; 0xde
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	791a      	ldrb	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d108      	bne.n	800a70a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6f8:	7bfa      	ldrb	r2, [r7, #15]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	32de      	adds	r2, #222	; 0xde
 800a6fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a708:	e005      	b.n	800a716 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	3301      	adds	r3, #1
 800a70e:	73fb      	strb	r3, [r7, #15]
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0e5      	beq.n	800a6e2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d016      	beq.n	800a74e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2206      	movs	r2, #6
 800a736:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a73e:	2103      	movs	r1, #3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a744:	e073      	b.n	800a82e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	220d      	movs	r2, #13
 800a74a:	701a      	strb	r2, [r3, #0]
      break;
 800a74c:	e06f      	b.n	800a82e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	220d      	movs	r2, #13
 800a752:	701a      	strb	r2, [r3, #0]
      break;
 800a754:	e06b      	b.n	800a82e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d017      	beq.n	800a790 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
 800a76c:	4603      	mov	r3, r0
 800a76e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	220b      	movs	r2, #11
 800a77c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a77e:	e058      	b.n	800a832 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b02      	cmp	r3, #2
 800a786:	d154      	bne.n	800a832 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	220d      	movs	r2, #13
 800a78c:	701a      	strb	r2, [r3, #0]
      break;
 800a78e:	e050      	b.n	800a832 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	220d      	movs	r2, #13
 800a794:	701a      	strb	r2, [r3, #0]
      break;
 800a796:	e04c      	b.n	800a832 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d049      	beq.n	800a836 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
      }
      break;
 800a7ae:	e042      	b.n	800a836 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff fd67 	bl	800a28c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ec:	2105      	movs	r1, #5
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d107      	bne.n	800a80e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7ff fe20 	bl	800a44c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a80c:	e014      	b.n	800a838 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f003 fe32 	bl	800e478 <USBH_LL_Start>
      break;
 800a814:	e010      	b.n	800a838 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a816:	bf00      	nop
 800a818:	e00e      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a81a:	bf00      	nop
 800a81c:	e00c      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a81e:	bf00      	nop
 800a820:	e00a      	b.n	800a838 <USBH_Process+0x3cc>
    break;
 800a822:	bf00      	nop
 800a824:	e008      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a826:	bf00      	nop
 800a828:	e006      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a82a:	bf00      	nop
 800a82c:	e004      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a82e:	bf00      	nop
 800a830:	e002      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a832:	bf00      	nop
 800a834:	e000      	b.n	800a838 <USBH_Process+0x3cc>
      break;
 800a836:	bf00      	nop
  }
  return USBH_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop

0800a844 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b088      	sub	sp, #32
 800a848:	af04      	add	r7, sp, #16
 800a84a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a850:	2301      	movs	r3, #1
 800a852:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	2b07      	cmp	r3, #7
 800a85a:	f200 81c1 	bhi.w	800abe0 <USBH_HandleEnum+0x39c>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <USBH_HandleEnum+0x20>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a943 	.word	0x0800a943
 800a86c:	0800a9ad 	.word	0x0800a9ad
 800a870:	0800aa3b 	.word	0x0800aa3b
 800a874:	0800aaa5 	.word	0x0800aaa5
 800a878:	0800ab15 	.word	0x0800ab15
 800a87c:	0800ab5b 	.word	0x0800ab5b
 800a880:	0800aba1 	.word	0x0800aba1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a884:	2108      	movs	r1, #8
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fa50 	bl	800ad2c <USBH_Get_DevDesc>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d130      	bne.n	800a8f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7919      	ldrb	r1, [r3, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	9202      	str	r2, [sp, #8]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	9201      	str	r2, [sp, #4]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2280      	movs	r2, #128	; 0x80
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 f865 	bl	800b998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	7959      	ldrb	r1, [r3, #5]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8e2:	b292      	uxth	r2, r2
 800a8e4:	9202      	str	r2, [sp, #8]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	9201      	str	r2, [sp, #4]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 f851 	bl	800b998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8f6:	e175      	b.n	800abe4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	f040 8172 	bne.w	800abe4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a906:	3301      	adds	r3, #1
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a916:	2b03      	cmp	r3, #3
 800a918:	d903      	bls.n	800a922 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	220d      	movs	r2, #13
 800a91e:	701a      	strb	r2, [r3, #0]
      break;
 800a920:	e160      	b.n	800abe4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	795b      	ldrb	r3, [r3, #5]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f001 f885 	bl	800ba38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	791b      	ldrb	r3, [r3, #4]
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f001 f87f 	bl	800ba38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	701a      	strb	r2, [r3, #0]
      break;
 800a940:	e150      	b.n	800abe4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a942:	2112      	movs	r1, #18
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f9f1 	bl	800ad2c <USBH_Get_DevDesc>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d103      	bne.n	800a95c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a95a:	e145      	b.n	800abe8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b03      	cmp	r3, #3
 800a960:	f040 8142 	bne.w	800abe8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a96a:	3301      	adds	r3, #1
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d903      	bls.n	800a986 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	220d      	movs	r2, #13
 800a982:	701a      	strb	r2, [r3, #0]
      break;
 800a984:	e130      	b.n	800abe8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	795b      	ldrb	r3, [r3, #5]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 f853 	bl	800ba38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	791b      	ldrb	r3, [r3, #4]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f84d 	bl	800ba38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
      break;
 800a9aa:	e11d      	b.n	800abe8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fa68 	bl	800ae84 <USBH_SetAddress>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d132      	bne.n	800aa24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a9be:	2002      	movs	r0, #2
 800a9c0:	f003 fee5 	bl	800e78e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7919      	ldrb	r1, [r3, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9e6:	b292      	uxth	r2, r2
 800a9e8:	9202      	str	r2, [sp, #8]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	9201      	str	r2, [sp, #4]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2280      	movs	r2, #128	; 0x80
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 ffcf 	bl	800b998 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7959      	ldrb	r1, [r3, #5]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa0e:	b292      	uxth	r2, r2
 800aa10:	9202      	str	r2, [sp, #8]
 800aa12:	2200      	movs	r2, #0
 800aa14:	9201      	str	r2, [sp, #4]
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 ffbb 	bl	800b998 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa22:	e0e3      	b.n	800abec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	f040 80e0 	bne.w	800abec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	220d      	movs	r2, #13
 800aa30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	705a      	strb	r2, [r3, #1]
      break;
 800aa38:	e0d8      	b.n	800abec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa3a:	2109      	movs	r1, #9
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f99d 	bl	800ad7c <USBH_Get_CfgDesc>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2204      	movs	r2, #4
 800aa50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa52:	e0cd      	b.n	800abf0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	f040 80ca 	bne.w	800abf0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa62:	3301      	adds	r3, #1
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d903      	bls.n	800aa7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	220d      	movs	r2, #13
 800aa7a:	701a      	strb	r2, [r3, #0]
      break;
 800aa7c:	e0b8      	b.n	800abf0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	795b      	ldrb	r3, [r3, #5]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 ffd7 	bl	800ba38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	791b      	ldrb	r3, [r3, #4]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 ffd1 	bl	800ba38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]
      break;
 800aaa2:	e0a5      	b.n	800abf0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f965 	bl	800ad7c <USBH_Get_CfgDesc>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2205      	movs	r2, #5
 800aac0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aac2:	e097      	b.n	800abf4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	f040 8094 	bne.w	800abf4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	d903      	bls.n	800aaee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	220d      	movs	r2, #13
 800aaea:	701a      	strb	r2, [r3, #0]
      break;
 800aaec:	e082      	b.n	800abf4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	795b      	ldrb	r3, [r3, #5]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 ff9f 	bl	800ba38 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	791b      	ldrb	r3, [r3, #4]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 ff99 	bl	800ba38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e06f      	b.n	800abf4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d019      	beq.n	800ab52 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab2a:	23ff      	movs	r3, #255	; 0xff
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f949 	bl	800adc4 <USBH_Get_StringDesc>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2206      	movs	r2, #6
 800ab40:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab42:	e059      	b.n	800abf8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d156      	bne.n	800abf8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	705a      	strb	r2, [r3, #1]
      break;
 800ab50:	e052      	b.n	800abf8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2206      	movs	r2, #6
 800ab56:	705a      	strb	r2, [r3, #1]
      break;
 800ab58:	e04e      	b.n	800abf8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d019      	beq.n	800ab98 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab70:	23ff      	movs	r3, #255	; 0xff
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f926 	bl	800adc4 <USBH_Get_StringDesc>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2207      	movs	r2, #7
 800ab86:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab88:	e038      	b.n	800abfc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d135      	bne.n	800abfc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2207      	movs	r2, #7
 800ab94:	705a      	strb	r2, [r3, #1]
      break;
 800ab96:	e031      	b.n	800abfc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2207      	movs	r2, #7
 800ab9c:	705a      	strb	r2, [r3, #1]
      break;
 800ab9e:	e02d      	b.n	800abfc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d017      	beq.n	800abda <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abb6:	23ff      	movs	r3, #255	; 0xff
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f903 	bl	800adc4 <USBH_Get_StringDesc>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abcc:	e018      	b.n	800ac00 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d115      	bne.n	800ac00 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
      break;
 800abd8:	e012      	b.n	800ac00 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]
      break;
 800abde:	e00f      	b.n	800ac00 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800abe0:	bf00      	nop
 800abe2:	e00e      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abe4:	bf00      	nop
 800abe6:	e00c      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abe8:	bf00      	nop
 800abea:	e00a      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abec:	bf00      	nop
 800abee:	e008      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abf0:	bf00      	nop
 800abf2:	e006      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abf4:	bf00      	nop
 800abf6:	e004      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abf8:	bf00      	nop
 800abfa:	e002      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800abfc:	bf00      	nop
 800abfe:	e000      	b.n	800ac02 <USBH_HandleEnum+0x3be>
      break;
 800ac00:	bf00      	nop
  }
  return Status;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f804 	bl	800ac4e <USBH_HandleSof>
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b0b      	cmp	r3, #11
 800ac5e:	d10a      	bne.n	800ac76 <USBH_HandleSof+0x28>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	4798      	blx	r3
  }
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ac8e:	bf00      	nop
}
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800acaa:	bf00      	nop
}
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f003 fbd2 	bl	800e4ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	791b      	ldrb	r3, [r3, #4]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fe91 	bl	800ba38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	795b      	ldrb	r3, [r3, #5]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fe8b 	bl	800ba38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ad3e:	78fb      	ldrb	r3, [r7, #3]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	4613      	mov	r3, r2
 800ad46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f864 	bl	800ae1a <USBH_GetDescriptor>
 800ad52:	4603      	mov	r3, r0
 800ad54:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad68:	78fa      	ldrb	r2, [r7, #3]
 800ad6a:	b292      	uxth	r2, r2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	f000 f918 	bl	800afa2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af02      	add	r7, sp, #8
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	331c      	adds	r3, #28
 800ad8c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad8e:	887b      	ldrh	r3, [r7, #2]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad98:	2100      	movs	r1, #0
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f83d 	bl	800ae1a <USBH_GetDescriptor>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d107      	bne.n	800adba <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adaa:	887b      	ldrh	r3, [r7, #2]
 800adac:	461a      	mov	r2, r3
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f987 	bl	800b0c4 <USBH_ParseCfgDesc>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b088      	sub	sp, #32
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	607a      	str	r2, [r7, #4]
 800adce:	461a      	mov	r2, r3
 800add0:	460b      	mov	r3, r1
 800add2:	72fb      	strb	r3, [r7, #11]
 800add4:	4613      	mov	r3, r2
 800add6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	b29b      	uxth	r3, r3
 800addc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ade0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ade8:	893b      	ldrh	r3, [r7, #8]
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	460b      	mov	r3, r1
 800adee:	2100      	movs	r1, #0
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 f812 	bl	800ae1a <USBH_GetDescriptor>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d107      	bne.n	800ae10 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae06:	893a      	ldrh	r2, [r7, #8]
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fb24 	bl	800b458 <USBH_ParseStringDesc>
  }

  return status;
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	72fb      	strb	r3, [r7, #11]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	789b      	ldrb	r3, [r3, #2]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d11c      	bne.n	800ae6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2206      	movs	r2, #6
 800ae44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	893a      	ldrh	r2, [r7, #8]
 800ae4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae4c:	893b      	ldrh	r3, [r7, #8]
 800ae4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae56:	d104      	bne.n	800ae62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f240 4209 	movw	r2, #1033	; 0x409
 800ae5e:	829a      	strh	r2, [r3, #20]
 800ae60:	e002      	b.n	800ae68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	8b3a      	ldrh	r2, [r7, #24]
 800ae6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae6e:	8b3b      	ldrh	r3, [r7, #24]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 fb3d 	bl	800b4f4 <USBH_CtlReq>
 800ae7a:	4603      	mov	r3, r0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	789b      	ldrb	r3, [r3, #2]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d10f      	bne.n	800aeb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2205      	movs	r2, #5
 800aea2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aea4:	78fb      	ldrb	r3, [r7, #3]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fb19 	bl	800b4f4 <USBH_CtlReq>
 800aec2:	4603      	mov	r3, r0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	789b      	ldrb	r3, [r3, #2]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d10e      	bne.n	800aefe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2209      	movs	r2, #9
 800aeea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	887a      	ldrh	r2, [r7, #2]
 800aef0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aefe:	2200      	movs	r2, #0
 800af00:	2100      	movs	r1, #0
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 faf6 	bl	800b4f4 <USBH_CtlReq>
 800af08:	4603      	mov	r3, r0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	789b      	ldrb	r3, [r3, #2]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10f      	bne.n	800af46 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2203      	movs	r2, #3
 800af30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af32:	78fb      	ldrb	r3, [r7, #3]
 800af34:	b29a      	uxth	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fad2 	bl	800b4f4 <USBH_CtlReq>
 800af50:	4603      	mov	r3, r0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	789b      	ldrb	r3, [r3, #2]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d10f      	bne.n	800af8e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2202      	movs	r2, #2
 800af72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800af8e:	2200      	movs	r2, #0
 800af90:	2100      	movs	r1, #0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 faae 	bl	800b4f4 <USBH_CtlReq>
 800af98:	4603      	mov	r3, r0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	4613      	mov	r3, r2
 800afae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	785a      	ldrb	r2, [r3, #1]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3302      	adds	r3, #2
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	3303      	adds	r3, #3
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	4313      	orrs	r3, r2
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	791a      	ldrb	r2, [r3, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	795a      	ldrb	r2, [r3, #5]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	799a      	ldrb	r2, [r3, #6]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	79da      	ldrb	r2, [r3, #7]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	79db      	ldrb	r3, [r3, #7]
 800b000:	2b20      	cmp	r3, #32
 800b002:	dc11      	bgt.n	800b028 <USBH_ParseDevDesc+0x86>
 800b004:	2b08      	cmp	r3, #8
 800b006:	db16      	blt.n	800b036 <USBH_ParseDevDesc+0x94>
 800b008:	3b08      	subs	r3, #8
 800b00a:	2201      	movs	r2, #1
 800b00c:	fa02 f303 	lsl.w	r3, r2, r3
 800b010:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bf14      	ite	ne
 800b01c:	2301      	movne	r3, #1
 800b01e:	2300      	moveq	r3, #0
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <USBH_ParseDevDesc+0x8a>
 800b026:	e006      	b.n	800b036 <USBH_ParseDevDesc+0x94>
 800b028:	2b40      	cmp	r3, #64	; 0x40
 800b02a:	d104      	bne.n	800b036 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	79da      	ldrb	r2, [r3, #7]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	71da      	strb	r2, [r3, #7]
      break;
 800b034:	e003      	b.n	800b03e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2240      	movs	r2, #64	; 0x40
 800b03a:	71da      	strb	r2, [r3, #7]
      break;
 800b03c:	bf00      	nop
  }

  if (length > 8U)
 800b03e:	88fb      	ldrh	r3, [r7, #6]
 800b040:	2b08      	cmp	r3, #8
 800b042:	d939      	bls.n	800b0b8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3308      	adds	r3, #8
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	3309      	adds	r3, #9
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b29b      	uxth	r3, r3
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	b29b      	uxth	r3, r3
 800b058:	4313      	orrs	r3, r2
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	330a      	adds	r3, #10
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	b29a      	uxth	r2, r3
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	330b      	adds	r3, #11
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	021b      	lsls	r3, r3, #8
 800b072:	b29b      	uxth	r3, r3
 800b074:	4313      	orrs	r3, r2
 800b076:	b29a      	uxth	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	330c      	adds	r3, #12
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b29a      	uxth	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	330d      	adds	r3, #13
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	b29b      	uxth	r3, r3
 800b090:	4313      	orrs	r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	7b9a      	ldrb	r2, [r3, #14]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	7bda      	ldrb	r2, [r3, #15]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	7c1a      	ldrb	r2, [r3, #16]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	7c5a      	ldrb	r2, [r3, #17]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	745a      	strb	r2, [r3, #17]
  }
}
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08c      	sub	sp, #48	; 0x30
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b0d8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	781a      	ldrb	r2, [r3, #0]
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	785a      	ldrb	r2, [r3, #1]
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3302      	adds	r3, #2
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3303      	adds	r3, #3
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	b29b      	uxth	r3, r3
 800b118:	4313      	orrs	r3, r2
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b120:	bf28      	it	cs
 800b122:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b126:	b29a      	uxth	r2, r3
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	791a      	ldrb	r2, [r3, #4]
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	795a      	ldrb	r2, [r3, #5]
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	799a      	ldrb	r2, [r3, #6]
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	79da      	ldrb	r2, [r3, #7]
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	7a1a      	ldrb	r2, [r3, #8]
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	2b09      	cmp	r3, #9
 800b15a:	d002      	beq.n	800b162 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	2209      	movs	r2, #9
 800b160:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b162:	88fb      	ldrh	r3, [r7, #6]
 800b164:	2b09      	cmp	r3, #9
 800b166:	f240 809d 	bls.w	800b2a4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b16a:	2309      	movs	r3, #9
 800b16c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b172:	e081      	b.n	800b278 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b174:	f107 0316 	add.w	r3, r7, #22
 800b178:	4619      	mov	r1, r3
 800b17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17c:	f000 f99f 	bl	800b4be <USBH_GetNextDesc>
 800b180:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	2b04      	cmp	r3, #4
 800b188:	d176      	bne.n	800b278 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b09      	cmp	r3, #9
 800b190:	d002      	beq.n	800b198 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	2209      	movs	r2, #9
 800b196:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b19c:	221a      	movs	r2, #26
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	6a3a      	ldr	r2, [r7, #32]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ae:	69f8      	ldr	r0, [r7, #28]
 800b1b0:	f000 f87e 	bl	800b2b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1be:	e043      	b.n	800b248 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1c0:	f107 0316 	add.w	r3, r7, #22
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c8:	f000 f979 	bl	800b4be <USBH_GetNextDesc>
 800b1cc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	d138      	bne.n	800b248 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	795b      	ldrb	r3, [r3, #5]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d10f      	bne.n	800b1fe <USBH_ParseCfgDesc+0x13a>
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	799b      	ldrb	r3, [r3, #6]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d10b      	bne.n	800b1fe <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	79db      	ldrb	r3, [r3, #7]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10f      	bne.n	800b20e <USBH_ParseCfgDesc+0x14a>
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b09      	cmp	r3, #9
 800b1f4:	d00b      	beq.n	800b20e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	2209      	movs	r2, #9
 800b1fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1fc:	e007      	b.n	800b20e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b07      	cmp	r3, #7
 800b204:	d004      	beq.n	800b210 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	2207      	movs	r2, #7
 800b20a:	701a      	strb	r2, [r3, #0]
 800b20c:	e000      	b.n	800b210 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b20e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b214:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b218:	3201      	adds	r2, #1
 800b21a:	00d2      	lsls	r2, r2, #3
 800b21c:	211a      	movs	r1, #26
 800b21e:	fb01 f303 	mul.w	r3, r1, r3
 800b222:	4413      	add	r3, r2
 800b224:	3308      	adds	r3, #8
 800b226:	6a3a      	ldr	r2, [r7, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	3304      	adds	r3, #4
 800b22c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b22e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b230:	69b9      	ldr	r1, [r7, #24]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f86b 	bl	800b30e <USBH_ParseEPDesc>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b23e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b242:	3301      	adds	r3, #1
 800b244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	791b      	ldrb	r3, [r3, #4]
 800b24c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b250:	429a      	cmp	r2, r3
 800b252:	d204      	bcs.n	800b25e <USBH_ParseCfgDesc+0x19a>
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	885a      	ldrh	r2, [r3, #2]
 800b258:	8afb      	ldrh	r3, [r7, #22]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d8b0      	bhi.n	800b1c0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	791b      	ldrb	r3, [r3, #4]
 800b262:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b266:	429a      	cmp	r2, r3
 800b268:	d201      	bcs.n	800b26e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e01c      	b.n	800b2a8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b26e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b272:	3301      	adds	r3, #1
 800b274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d805      	bhi.n	800b28c <USBH_ParseCfgDesc+0x1c8>
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	885a      	ldrh	r2, [r3, #2]
 800b284:	8afb      	ldrh	r3, [r7, #22]
 800b286:	429a      	cmp	r2, r3
 800b288:	f63f af74 	bhi.w	800b174 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	791b      	ldrb	r3, [r3, #4]
 800b290:	2b02      	cmp	r3, #2
 800b292:	bf28      	it	cs
 800b294:	2302      	movcs	r3, #2
 800b296:	b2db      	uxtb	r3, r3
 800b298:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d201      	bcs.n	800b2a4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e001      	b.n	800b2a8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b2a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3730      	adds	r7, #48	; 0x30
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	785a      	ldrb	r2, [r3, #1]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	789a      	ldrb	r2, [r3, #2]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	78da      	ldrb	r2, [r3, #3]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	791a      	ldrb	r2, [r3, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	795a      	ldrb	r2, [r3, #5]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	799a      	ldrb	r2, [r3, #6]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	79da      	ldrb	r2, [r3, #7]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	7a1a      	ldrb	r2, [r3, #8]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	721a      	strb	r2, [r3, #8]
}
 800b302:	bf00      	nop
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	785a      	ldrb	r2, [r3, #1]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	789a      	ldrb	r2, [r3, #2]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	78da      	ldrb	r2, [r3, #3]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3304      	adds	r3, #4
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	b29a      	uxth	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3305      	adds	r3, #5
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	b29b      	uxth	r3, r3
 800b352:	4313      	orrs	r3, r2
 800b354:	b29a      	uxth	r2, r3
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	799a      	ldrb	r2, [r3, #6]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	889b      	ldrh	r3, [r3, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b36a:	2303      	movs	r3, #3
 800b36c:	75fb      	strb	r3, [r7, #23]
 800b36e:	e033      	b.n	800b3d8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	889b      	ldrh	r3, [r3, #4]
 800b374:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b378:	f023 0307 	bic.w	r3, r3, #7
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	889b      	ldrh	r3, [r3, #4]
 800b386:	b21a      	sxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3304      	adds	r3, #4
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b299      	uxth	r1, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3305      	adds	r3, #5
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	b29b      	uxth	r3, r3
 800b398:	021b      	lsls	r3, r3, #8
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	430b      	orrs	r3, r1
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d110      	bne.n	800b3ca <USBH_ParseEPDesc+0xbc>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	b299      	uxth	r1, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3305      	adds	r3, #5
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	021b      	lsls	r3, r3, #8
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	b21b      	sxth	r3, r3
 800b3c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	e001      	b.n	800b3ce <USBH_ParseEPDesc+0xc0>
 800b3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	b21b      	sxth	r3, r3
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d116      	bne.n	800b410 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	78db      	ldrb	r3, [r3, #3]
 800b3e6:	f003 0303 	and.w	r3, r3, #3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d005      	beq.n	800b3fa <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	78db      	ldrb	r3, [r3, #3]
 800b3f2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d127      	bne.n	800b44a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	799b      	ldrb	r3, [r3, #6]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <USBH_ParseEPDesc+0xfc>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	799b      	ldrb	r3, [r3, #6]
 800b406:	2b10      	cmp	r3, #16
 800b408:	d91f      	bls.n	800b44a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b40a:	2303      	movs	r3, #3
 800b40c:	75fb      	strb	r3, [r7, #23]
 800b40e:	e01c      	b.n	800b44a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	78db      	ldrb	r3, [r3, #3]
 800b414:	f003 0303 	and.w	r3, r3, #3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d10a      	bne.n	800b432 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	799b      	ldrb	r3, [r3, #6]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <USBH_ParseEPDesc+0x11e>
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	799b      	ldrb	r3, [r3, #6]
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d90e      	bls.n	800b44a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b42c:	2303      	movs	r3, #3
 800b42e:	75fb      	strb	r3, [r7, #23]
 800b430:	e00b      	b.n	800b44a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	78db      	ldrb	r3, [r3, #3]
 800b436:	f003 0303 	and.w	r3, r3, #3
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d105      	bne.n	800b44a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	799b      	ldrb	r3, [r3, #6]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	371c      	adds	r7, #28
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	4613      	mov	r3, r2
 800b464:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d120      	bne.n	800b4b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	1e9a      	subs	r2, r3, #2
 800b476:	88fb      	ldrh	r3, [r7, #6]
 800b478:	4293      	cmp	r3, r2
 800b47a:	bf28      	it	cs
 800b47c:	4613      	movcs	r3, r2
 800b47e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3302      	adds	r3, #2
 800b484:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b486:	2300      	movs	r3, #0
 800b488:	82fb      	strh	r3, [r7, #22]
 800b48a:	e00b      	b.n	800b4a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b48c:	8afb      	ldrh	r3, [r7, #22]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	4413      	add	r3, r2
 800b492:	781a      	ldrb	r2, [r3, #0]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b49e:	8afb      	ldrh	r3, [r7, #22]
 800b4a0:	3302      	adds	r3, #2
 800b4a2:	82fb      	strh	r3, [r7, #22]
 800b4a4:	8afa      	ldrh	r2, [r7, #22]
 800b4a6:	8abb      	ldrh	r3, [r7, #20]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d3ef      	bcc.n	800b48c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	371c      	adds	r7, #28
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	881a      	ldrh	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	4413      	add	r3, r2
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	4613      	mov	r3, r2
 800b500:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b502:	2301      	movs	r3, #1
 800b504:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	789b      	ldrb	r3, [r3, #2]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d002      	beq.n	800b514 <USBH_CtlReq+0x20>
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d00f      	beq.n	800b532 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b512:	e027      	b.n	800b564 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	88fa      	ldrh	r2, [r7, #6]
 800b51e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2202      	movs	r2, #2
 800b52a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b52c:	2301      	movs	r3, #1
 800b52e:	75fb      	strb	r3, [r7, #23]
      break;
 800b530:	e018      	b.n	800b564 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 f81c 	bl	800b570 <USBH_HandleControl>
 800b538:	4603      	mov	r3, r0
 800b53a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b53c:	7dfb      	ldrb	r3, [r7, #23]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <USBH_CtlReq+0x54>
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b03      	cmp	r3, #3
 800b546:	d106      	bne.n	800b556 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	761a      	strb	r2, [r3, #24]
      break;
 800b554:	e005      	b.n	800b562 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b556:	7dfb      	ldrb	r3, [r7, #23]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d102      	bne.n	800b562 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	709a      	strb	r2, [r3, #2]
      break;
 800b562:	bf00      	nop
  }
  return status;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
	...

0800b570 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af02      	add	r7, sp, #8
 800b576:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b578:	2301      	movs	r3, #1
 800b57a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7e1b      	ldrb	r3, [r3, #24]
 800b584:	3b01      	subs	r3, #1
 800b586:	2b0a      	cmp	r3, #10
 800b588:	f200 8156 	bhi.w	800b838 <USBH_HandleControl+0x2c8>
 800b58c:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <USBH_HandleControl+0x24>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b5c1 	.word	0x0800b5c1
 800b598:	0800b5db 	.word	0x0800b5db
 800b59c:	0800b645 	.word	0x0800b645
 800b5a0:	0800b66b 	.word	0x0800b66b
 800b5a4:	0800b6a3 	.word	0x0800b6a3
 800b5a8:	0800b6cd 	.word	0x0800b6cd
 800b5ac:	0800b71f 	.word	0x0800b71f
 800b5b0:	0800b741 	.word	0x0800b741
 800b5b4:	0800b77d 	.word	0x0800b77d
 800b5b8:	0800b7a3 	.word	0x0800b7a3
 800b5bc:	0800b7e1 	.word	0x0800b7e1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f103 0110 	add.w	r1, r3, #16
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f943 	bl	800b858 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	761a      	strb	r2, [r3, #24]
      break;
 800b5d8:	e139      	b.n	800b84e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	795b      	ldrb	r3, [r3, #5]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f003 f853 	bl	800e68c <USBH_LL_GetURBState>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5ea:	7bbb      	ldrb	r3, [r7, #14]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d11e      	bne.n	800b62e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7c1b      	ldrb	r3, [r3, #16]
 800b5f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8adb      	ldrh	r3, [r3, #22]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b602:	7b7b      	ldrb	r3, [r7, #13]
 800b604:	2b80      	cmp	r3, #128	; 0x80
 800b606:	d103      	bne.n	800b610 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2203      	movs	r2, #3
 800b60c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b60e:	e115      	b.n	800b83c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2205      	movs	r2, #5
 800b614:	761a      	strb	r2, [r3, #24]
      break;
 800b616:	e111      	b.n	800b83c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b618:	7b7b      	ldrb	r3, [r7, #13]
 800b61a:	2b80      	cmp	r3, #128	; 0x80
 800b61c:	d103      	bne.n	800b626 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2209      	movs	r2, #9
 800b622:	761a      	strb	r2, [r3, #24]
      break;
 800b624:	e10a      	b.n	800b83c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2207      	movs	r2, #7
 800b62a:	761a      	strb	r2, [r3, #24]
      break;
 800b62c:	e106      	b.n	800b83c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b62e:	7bbb      	ldrb	r3, [r7, #14]
 800b630:	2b04      	cmp	r3, #4
 800b632:	d003      	beq.n	800b63c <USBH_HandleControl+0xcc>
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	2b02      	cmp	r3, #2
 800b638:	f040 8100 	bne.w	800b83c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	220b      	movs	r2, #11
 800b640:	761a      	strb	r2, [r3, #24]
      break;
 800b642:	e0fb      	b.n	800b83c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6899      	ldr	r1, [r3, #8]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	899a      	ldrh	r2, [r3, #12]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	791b      	ldrb	r3, [r3, #4]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f93a 	bl	800b8d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2204      	movs	r2, #4
 800b666:	761a      	strb	r2, [r3, #24]
      break;
 800b668:	e0f1      	b.n	800b84e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f003 f80b 	bl	800e68c <USBH_LL_GetURBState>
 800b676:	4603      	mov	r3, r0
 800b678:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b67a:	7bbb      	ldrb	r3, [r7, #14]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d102      	bne.n	800b686 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2209      	movs	r2, #9
 800b684:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b05      	cmp	r3, #5
 800b68a:	d102      	bne.n	800b692 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b68c:	2303      	movs	r3, #3
 800b68e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b690:	e0d6      	b.n	800b840 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	2b04      	cmp	r3, #4
 800b696:	f040 80d3 	bne.w	800b840 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	220b      	movs	r2, #11
 800b69e:	761a      	strb	r2, [r3, #24]
      break;
 800b6a0:	e0ce      	b.n	800b840 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6899      	ldr	r1, [r3, #8]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	899a      	ldrh	r2, [r3, #12]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	795b      	ldrb	r3, [r3, #5]
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	9000      	str	r0, [sp, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f8ea 	bl	800b88c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2206      	movs	r2, #6
 800b6c8:	761a      	strb	r2, [r3, #24]
      break;
 800b6ca:	e0c0      	b.n	800b84e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	795b      	ldrb	r3, [r3, #5]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f002 ffda 	bl	800e68c <USBH_LL_GetURBState>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b6dc:	7bbb      	ldrb	r3, [r7, #14]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d103      	bne.n	800b6ea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2207      	movs	r2, #7
 800b6e6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6e8:	e0ac      	b.n	800b844 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	2b05      	cmp	r3, #5
 800b6ee:	d105      	bne.n	800b6fc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	220c      	movs	r2, #12
 800b6f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6fa:	e0a3      	b.n	800b844 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6fc:	7bbb      	ldrb	r3, [r7, #14]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d103      	bne.n	800b70a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2205      	movs	r2, #5
 800b706:	761a      	strb	r2, [r3, #24]
      break;
 800b708:	e09c      	b.n	800b844 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b04      	cmp	r3, #4
 800b70e:	f040 8099 	bne.w	800b844 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	220b      	movs	r2, #11
 800b716:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b718:	2302      	movs	r3, #2
 800b71a:	73fb      	strb	r3, [r7, #15]
      break;
 800b71c:	e092      	b.n	800b844 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	791b      	ldrb	r3, [r3, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f8d5 	bl	800b8d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2208      	movs	r2, #8
 800b73c:	761a      	strb	r2, [r3, #24]

      break;
 800b73e:	e086      	b.n	800b84e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	791b      	ldrb	r3, [r3, #4]
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f002 ffa0 	bl	800e68c <USBH_LL_GetURBState>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d105      	bne.n	800b762 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	220d      	movs	r2, #13
 800b75a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b760:	e072      	b.n	800b848 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b04      	cmp	r3, #4
 800b766:	d103      	bne.n	800b770 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	220b      	movs	r2, #11
 800b76c:	761a      	strb	r2, [r3, #24]
      break;
 800b76e:	e06b      	b.n	800b848 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b05      	cmp	r3, #5
 800b774:	d168      	bne.n	800b848 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b776:	2303      	movs	r3, #3
 800b778:	73fb      	strb	r3, [r7, #15]
      break;
 800b77a:	e065      	b.n	800b848 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	795b      	ldrb	r3, [r3, #5]
 800b780:	2201      	movs	r2, #1
 800b782:	9200      	str	r2, [sp, #0]
 800b784:	2200      	movs	r2, #0
 800b786:	2100      	movs	r1, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f87f 	bl	800b88c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b794:	b29a      	uxth	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	220a      	movs	r2, #10
 800b79e:	761a      	strb	r2, [r3, #24]
      break;
 800b7a0:	e055      	b.n	800b84e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	795b      	ldrb	r3, [r3, #5]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f002 ff6f 	bl	800e68c <USBH_LL_GetURBState>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7b2:	7bbb      	ldrb	r3, [r7, #14]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d105      	bne.n	800b7c4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	220d      	movs	r2, #13
 800b7c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b7c2:	e043      	b.n	800b84c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d103      	bne.n	800b7d2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2209      	movs	r2, #9
 800b7ce:	761a      	strb	r2, [r3, #24]
      break;
 800b7d0:	e03c      	b.n	800b84c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d139      	bne.n	800b84c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	220b      	movs	r2, #11
 800b7dc:	761a      	strb	r2, [r3, #24]
      break;
 800b7de:	e035      	b.n	800b84c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	7e5b      	ldrb	r3, [r3, #25]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	765a      	strb	r2, [r3, #25]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7e5b      	ldrb	r3, [r3, #25]
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d806      	bhi.n	800b802 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b800:	e025      	b.n	800b84e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b808:	2106      	movs	r1, #6
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	795b      	ldrb	r3, [r3, #5]
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f90c 	bl	800ba38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	791b      	ldrb	r3, [r3, #4]
 800b824:	4619      	mov	r1, r3
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f906 	bl	800ba38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b832:	2302      	movs	r3, #2
 800b834:	73fb      	strb	r3, [r7, #15]
      break;
 800b836:	e00a      	b.n	800b84e <USBH_HandleControl+0x2de>

    default:
      break;
 800b838:	bf00      	nop
 800b83a:	e008      	b.n	800b84e <USBH_HandleControl+0x2de>
      break;
 800b83c:	bf00      	nop
 800b83e:	e006      	b.n	800b84e <USBH_HandleControl+0x2de>
      break;
 800b840:	bf00      	nop
 800b842:	e004      	b.n	800b84e <USBH_HandleControl+0x2de>
      break;
 800b844:	bf00      	nop
 800b846:	e002      	b.n	800b84e <USBH_HandleControl+0x2de>
      break;
 800b848:	bf00      	nop
 800b84a:	e000      	b.n	800b84e <USBH_HandleControl+0x2de>
      break;
 800b84c:	bf00      	nop
  }

  return status;
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b088      	sub	sp, #32
 800b85c:	af04      	add	r7, sp, #16
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b866:	79f9      	ldrb	r1, [r7, #7]
 800b868:	2300      	movs	r3, #0
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	2308      	movs	r3, #8
 800b86e:	9302      	str	r3, [sp, #8]
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	2300      	movs	r3, #0
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2300      	movs	r3, #0
 800b87a:	2200      	movs	r2, #0
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f002 fed4 	bl	800e62a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af04      	add	r7, sp, #16
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4611      	mov	r1, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	460b      	mov	r3, r1
 800b89c:	80fb      	strh	r3, [r7, #6]
 800b89e:	4613      	mov	r3, r2
 800b8a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8b0:	7979      	ldrb	r1, [r7, #5]
 800b8b2:	7e3b      	ldrb	r3, [r7, #24]
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	2301      	movs	r3, #1
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f002 feaf 	bl	800e62a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b088      	sub	sp, #32
 800b8da:	af04      	add	r7, sp, #16
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	80fb      	strh	r3, [r7, #6]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8ec:	7979      	ldrb	r1, [r7, #5]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9303      	str	r3, [sp, #12]
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	9302      	str	r3, [sp, #8]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	2201      	movs	r2, #1
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f002 fe91 	bl	800e62a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b908:	2300      	movs	r3, #0

}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b088      	sub	sp, #32
 800b916:	af04      	add	r7, sp, #16
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	4611      	mov	r1, r2
 800b91e:	461a      	mov	r2, r3
 800b920:	460b      	mov	r3, r1
 800b922:	80fb      	strh	r3, [r7, #6]
 800b924:	4613      	mov	r3, r2
 800b926:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b932:	2300      	movs	r3, #0
 800b934:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b936:	7979      	ldrb	r1, [r7, #5]
 800b938:	7e3b      	ldrb	r3, [r7, #24]
 800b93a:	9303      	str	r3, [sp, #12]
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	9302      	str	r3, [sp, #8]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	2301      	movs	r3, #1
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	2302      	movs	r3, #2
 800b94a:	2200      	movs	r2, #0
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f002 fe6c 	bl	800e62a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af04      	add	r7, sp, #16
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	4611      	mov	r1, r2
 800b968:	461a      	mov	r2, r3
 800b96a:	460b      	mov	r3, r1
 800b96c:	80fb      	strh	r3, [r7, #6]
 800b96e:	4613      	mov	r3, r2
 800b970:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b972:	7979      	ldrb	r1, [r7, #5]
 800b974:	2300      	movs	r3, #0
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	88fb      	ldrh	r3, [r7, #6]
 800b97a:	9302      	str	r3, [sp, #8]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	2301      	movs	r3, #1
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2302      	movs	r3, #2
 800b986:	2201      	movs	r2, #1
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f002 fe4e 	bl	800e62a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af04      	add	r7, sp, #16
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	70fb      	strb	r3, [r7, #3]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70bb      	strb	r3, [r7, #2]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9b2:	7878      	ldrb	r0, [r7, #1]
 800b9b4:	78ba      	ldrb	r2, [r7, #2]
 800b9b6:	78f9      	ldrb	r1, [r7, #3]
 800b9b8:	8b3b      	ldrh	r3, [r7, #24]
 800b9ba:	9302      	str	r3, [sp, #8]
 800b9bc:	7d3b      	ldrb	r3, [r7, #20]
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	7c3b      	ldrb	r3, [r7, #16]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f002 fde1 	bl	800e58e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f002 fe00 	bl	800e5ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f836 	bl	800ba74 <USBH_GetFreePipe>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba0c:	89fb      	ldrh	r3, [r7, #14]
 800ba0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d00a      	beq.n	800ba2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	33e0      	adds	r3, #224	; 0xe0
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	440b      	add	r3, r1
 800ba2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	b2db      	uxtb	r3, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	2b0f      	cmp	r3, #15
 800ba48:	d80d      	bhi.n	800ba66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	33e0      	adds	r3, #224	; 0xe0
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	78fb      	ldrb	r3, [r7, #3]
 800ba58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	33e0      	adds	r3, #224	; 0xe0
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	440b      	add	r3, r1
 800ba64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
 800ba84:	e00f      	b.n	800baa6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	33e0      	adds	r3, #224	; 0xe0
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d102      	bne.n	800baa0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	e007      	b.n	800bab0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	3301      	adds	r3, #1
 800baa4:	73fb      	strb	r3, [r7, #15]
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	2b0f      	cmp	r3, #15
 800baaa:	d9ec      	bls.n	800ba86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800baac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	4a08      	ldr	r2, [pc, #32]	; (800baec <disk_status+0x30>)
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	79fa      	ldrb	r2, [r7, #7]
 800bad4:	4905      	ldr	r1, [pc, #20]	; (800baec <disk_status+0x30>)
 800bad6:	440a      	add	r2, r1
 800bad8:	7a12      	ldrb	r2, [r2, #8]
 800bada:	4610      	mov	r0, r2
 800badc:	4798      	blx	r3
 800bade:	4603      	mov	r3, r0
 800bae0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20001720 	.word	0x20001720

0800baf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	4a0d      	ldr	r2, [pc, #52]	; (800bb38 <disk_initialize+0x48>)
 800bb02:	5cd3      	ldrb	r3, [r2, r3]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d111      	bne.n	800bb2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb08:	79fb      	ldrb	r3, [r7, #7]
 800bb0a:	4a0b      	ldr	r2, [pc, #44]	; (800bb38 <disk_initialize+0x48>)
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	4a09      	ldr	r2, [pc, #36]	; (800bb38 <disk_initialize+0x48>)
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	79fa      	ldrb	r2, [r7, #7]
 800bb1e:	4906      	ldr	r1, [pc, #24]	; (800bb38 <disk_initialize+0x48>)
 800bb20:	440a      	add	r2, r1
 800bb22:	7a12      	ldrb	r2, [r2, #8]
 800bb24:	4610      	mov	r0, r2
 800bb26:	4798      	blx	r3
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20001720 	.word	0x20001720

0800bb3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <disk_read+0x3c>)
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	689c      	ldr	r4, [r3, #8]
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
 800bb5a:	4a07      	ldr	r2, [pc, #28]	; (800bb78 <disk_read+0x3c>)
 800bb5c:	4413      	add	r3, r2
 800bb5e:	7a18      	ldrb	r0, [r3, #8]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	68b9      	ldr	r1, [r7, #8]
 800bb66:	47a0      	blx	r4
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd90      	pop	{r4, r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20001720 	.word	0x20001720

0800bb7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb7c:	b590      	push	{r4, r7, lr}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	607a      	str	r2, [r7, #4]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	4a0a      	ldr	r2, [pc, #40]	; (800bbb8 <disk_write+0x3c>)
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	68dc      	ldr	r4, [r3, #12]
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	4a07      	ldr	r2, [pc, #28]	; (800bbb8 <disk_write+0x3c>)
 800bb9c:	4413      	add	r3, r2
 800bb9e:	7a18      	ldrb	r0, [r3, #8]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	47a0      	blx	r4
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd90      	pop	{r4, r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20001720 	.word	0x20001720

0800bbbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	603a      	str	r2, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	4a09      	ldr	r2, [pc, #36]	; (800bbf4 <disk_ioctl+0x38>)
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	79fa      	ldrb	r2, [r7, #7]
 800bbda:	4906      	ldr	r1, [pc, #24]	; (800bbf4 <disk_ioctl+0x38>)
 800bbdc:	440a      	add	r2, r1
 800bbde:	7a10      	ldrb	r0, [r2, #8]
 800bbe0:	79b9      	ldrb	r1, [r7, #6]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	4798      	blx	r3
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20001720 	.word	0x20001720

0800bbf8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3301      	adds	r3, #1
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc08:	89fb      	ldrh	r3, [r7, #14]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	b21a      	sxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	b21b      	sxth	r3, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b21b      	sxth	r3, r3
 800bc18:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc1a:	89fb      	ldrh	r3, [r7, #14]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3303      	adds	r3, #3
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	021b      	lsls	r3, r3, #8
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	3202      	adds	r2, #2
 800bc40:	7812      	ldrb	r2, [r2, #0]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	021b      	lsls	r3, r3, #8
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	7812      	ldrb	r2, [r2, #0]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc60:	68fb      	ldr	r3, [r7, #12]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	460b      	mov	r3, r1
 800bc78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	887a      	ldrh	r2, [r7, #2]
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	887b      	ldrh	r3, [r7, #2]
 800bc88:	0a1b      	lsrs	r3, r3, #8
 800bc8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	607a      	str	r2, [r7, #4]
 800bc92:	887a      	ldrh	r2, [r7, #2]
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	701a      	strb	r2, [r3, #0]
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	0a1b      	lsrs	r3, r3, #8
 800bcbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	607a      	str	r2, [r7, #4]
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	b2d2      	uxtb	r2, r2
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	1c5a      	adds	r2, r3, #1
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	0a1b      	lsrs	r3, r3, #8
 800bce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	607a      	str	r2, [r7, #4]
 800bcea:	683a      	ldr	r2, [r7, #0]
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	701a      	strb	r2, [r3, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	1c53      	adds	r3, r2, #1
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	1c59      	adds	r1, r3, #1
 800bd20:	6179      	str	r1, [r7, #20]
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	607b      	str	r3, [r7, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1f1      	bne.n	800bd16 <mem_cpy+0x1a>
	}
}
 800bd32:	bf00      	nop
 800bd34:	371c      	adds	r7, #28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd3e:	b480      	push	{r7}
 800bd40:	b087      	sub	sp, #28
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	60f8      	str	r0, [r7, #12]
 800bd46:	60b9      	str	r1, [r7, #8]
 800bd48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	1c5a      	adds	r2, r3, #1
 800bd52:	617a      	str	r2, [r7, #20]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	607b      	str	r3, [r7, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1f3      	bne.n	800bd4e <mem_set+0x10>
}
 800bd66:	bf00      	nop
 800bd68:	bf00      	nop
 800bd6a:	371c      	adds	r7, #28
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd74:	b480      	push	{r7}
 800bd76:	b089      	sub	sp, #36	; 0x24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	61fb      	str	r3, [r7, #28]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	61fa      	str	r2, [r7, #28]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	4619      	mov	r1, r3
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	1c5a      	adds	r2, r3, #1
 800bd9a:	61ba      	str	r2, [r7, #24]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	1acb      	subs	r3, r1, r3
 800bda0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	3b01      	subs	r3, #1
 800bda6:	607b      	str	r3, [r7, #4]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <mem_cmp+0x40>
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0eb      	beq.n	800bd8c <mem_cmp+0x18>

	return r;
 800bdb4:	697b      	ldr	r3, [r7, #20]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3724      	adds	r7, #36	; 0x24
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bdcc:	e002      	b.n	800bdd4 <chk_chr+0x12>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	607b      	str	r3, [r7, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <chk_chr+0x26>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d1f2      	bne.n	800bdce <chk_chr+0xc>
	return *str;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	781b      	ldrb	r3, [r3, #0]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be02:	2300      	movs	r3, #0
 800be04:	60bb      	str	r3, [r7, #8]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	60fb      	str	r3, [r7, #12]
 800be0a:	e029      	b.n	800be60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be0c:	4a27      	ldr	r2, [pc, #156]	; (800beac <chk_lock+0xb4>)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	011b      	lsls	r3, r3, #4
 800be12:	4413      	add	r3, r2
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d01d      	beq.n	800be56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be1a:	4a24      	ldr	r2, [pc, #144]	; (800beac <chk_lock+0xb4>)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	011b      	lsls	r3, r3, #4
 800be20:	4413      	add	r3, r2
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d116      	bne.n	800be5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be2c:	4a1f      	ldr	r2, [pc, #124]	; (800beac <chk_lock+0xb4>)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	011b      	lsls	r3, r3, #4
 800be32:	4413      	add	r3, r2
 800be34:	3304      	adds	r3, #4
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d10c      	bne.n	800be5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be40:	4a1a      	ldr	r2, [pc, #104]	; (800beac <chk_lock+0xb4>)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	011b      	lsls	r3, r3, #4
 800be46:	4413      	add	r3, r2
 800be48:	3308      	adds	r3, #8
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800be50:	429a      	cmp	r2, r3
 800be52:	d102      	bne.n	800be5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be54:	e007      	b.n	800be66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be56:	2301      	movs	r3, #1
 800be58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3301      	adds	r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d9d2      	bls.n	800be0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d109      	bne.n	800be80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <chk_lock+0x80>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b02      	cmp	r3, #2
 800be76:	d101      	bne.n	800be7c <chk_lock+0x84>
 800be78:	2300      	movs	r3, #0
 800be7a:	e010      	b.n	800be9e <chk_lock+0xa6>
 800be7c:	2312      	movs	r3, #18
 800be7e:	e00e      	b.n	800be9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d108      	bne.n	800be98 <chk_lock+0xa0>
 800be86:	4a09      	ldr	r2, [pc, #36]	; (800beac <chk_lock+0xb4>)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	011b      	lsls	r3, r3, #4
 800be8c:	4413      	add	r3, r2
 800be8e:	330c      	adds	r3, #12
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be96:	d101      	bne.n	800be9c <chk_lock+0xa4>
 800be98:	2310      	movs	r3, #16
 800be9a:	e000      	b.n	800be9e <chk_lock+0xa6>
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	20001700 	.word	0x20001700

0800beb0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800beb6:	2300      	movs	r3, #0
 800beb8:	607b      	str	r3, [r7, #4]
 800beba:	e002      	b.n	800bec2 <enq_lock+0x12>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3301      	adds	r3, #1
 800bec0:	607b      	str	r3, [r7, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d806      	bhi.n	800bed6 <enq_lock+0x26>
 800bec8:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <enq_lock+0x40>)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	011b      	lsls	r3, r3, #4
 800bece:	4413      	add	r3, r2
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1f2      	bne.n	800bebc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	bf14      	ite	ne
 800bedc:	2301      	movne	r3, #1
 800bede:	2300      	moveq	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20001700 	.word	0x20001700

0800bef4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800befe:	2300      	movs	r3, #0
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e01f      	b.n	800bf44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf04:	4a41      	ldr	r2, [pc, #260]	; (800c00c <inc_lock+0x118>)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	011b      	lsls	r3, r3, #4
 800bf0a:	4413      	add	r3, r2
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d113      	bne.n	800bf3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf16:	4a3d      	ldr	r2, [pc, #244]	; (800c00c <inc_lock+0x118>)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	4413      	add	r3, r2
 800bf1e:	3304      	adds	r3, #4
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d109      	bne.n	800bf3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf2a:	4a38      	ldr	r2, [pc, #224]	; (800c00c <inc_lock+0x118>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	4413      	add	r3, r2
 800bf32:	3308      	adds	r3, #8
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d006      	beq.n	800bf4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3301      	adds	r3, #1
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d9dc      	bls.n	800bf04 <inc_lock+0x10>
 800bf4a:	e000      	b.n	800bf4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d132      	bne.n	800bfba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	e002      	b.n	800bf60 <inc_lock+0x6c>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d806      	bhi.n	800bf74 <inc_lock+0x80>
 800bf66:	4a29      	ldr	r2, [pc, #164]	; (800c00c <inc_lock+0x118>)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	4413      	add	r3, r2
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1f2      	bne.n	800bf5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d101      	bne.n	800bf7e <inc_lock+0x8a>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e040      	b.n	800c000 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	4922      	ldr	r1, [pc, #136]	; (800c00c <inc_lock+0x118>)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	440b      	add	r3, r1
 800bf8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	491e      	ldr	r1, [pc, #120]	; (800c00c <inc_lock+0x118>)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	440b      	add	r3, r1
 800bf98:	3304      	adds	r3, #4
 800bf9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695a      	ldr	r2, [r3, #20]
 800bfa0:	491a      	ldr	r1, [pc, #104]	; (800c00c <inc_lock+0x118>)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfac:	4a17      	ldr	r2, [pc, #92]	; (800c00c <inc_lock+0x118>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	4413      	add	r3, r2
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <inc_lock+0xe0>
 800bfc0:	4a12      	ldr	r2, [pc, #72]	; (800c00c <inc_lock+0x118>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	4413      	add	r3, r2
 800bfc8:	330c      	adds	r3, #12
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <inc_lock+0xe0>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e015      	b.n	800c000 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d108      	bne.n	800bfec <inc_lock+0xf8>
 800bfda:	4a0c      	ldr	r2, [pc, #48]	; (800c00c <inc_lock+0x118>)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	4413      	add	r3, r2
 800bfe2:	330c      	adds	r3, #12
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	e001      	b.n	800bff0 <inc_lock+0xfc>
 800bfec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bff0:	4906      	ldr	r1, [pc, #24]	; (800c00c <inc_lock+0x118>)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	011b      	lsls	r3, r3, #4
 800bff6:	440b      	add	r3, r1
 800bff8:	330c      	adds	r3, #12
 800bffa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3301      	adds	r3, #1
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20001700 	.word	0x20001700

0800c010 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	607b      	str	r3, [r7, #4]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d825      	bhi.n	800c070 <dec_lock+0x60>
		n = Files[i].ctr;
 800c024:	4a17      	ldr	r2, [pc, #92]	; (800c084 <dec_lock+0x74>)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	011b      	lsls	r3, r3, #4
 800c02a:	4413      	add	r3, r2
 800c02c:	330c      	adds	r3, #12
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c032:	89fb      	ldrh	r3, [r7, #14]
 800c034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c038:	d101      	bne.n	800c03e <dec_lock+0x2e>
 800c03a:	2300      	movs	r3, #0
 800c03c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c03e:	89fb      	ldrh	r3, [r7, #14]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <dec_lock+0x3a>
 800c044:	89fb      	ldrh	r3, [r7, #14]
 800c046:	3b01      	subs	r3, #1
 800c048:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c04a:	4a0e      	ldr	r2, [pc, #56]	; (800c084 <dec_lock+0x74>)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	4413      	add	r3, r2
 800c052:	330c      	adds	r3, #12
 800c054:	89fa      	ldrh	r2, [r7, #14]
 800c056:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c058:	89fb      	ldrh	r3, [r7, #14]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d105      	bne.n	800c06a <dec_lock+0x5a>
 800c05e:	4a09      	ldr	r2, [pc, #36]	; (800c084 <dec_lock+0x74>)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	011b      	lsls	r3, r3, #4
 800c064:	4413      	add	r3, r2
 800c066:	2200      	movs	r2, #0
 800c068:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	737b      	strb	r3, [r7, #13]
 800c06e:	e001      	b.n	800c074 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c070:	2302      	movs	r3, #2
 800c072:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c074:	7b7b      	ldrb	r3, [r7, #13]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	20001700 	.word	0x20001700

0800c088 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	e010      	b.n	800c0b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c096:	4a0d      	ldr	r2, [pc, #52]	; (800c0cc <clear_lock+0x44>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	011b      	lsls	r3, r3, #4
 800c09c:	4413      	add	r3, r2
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d105      	bne.n	800c0b2 <clear_lock+0x2a>
 800c0a6:	4a09      	ldr	r2, [pc, #36]	; (800c0cc <clear_lock+0x44>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d9eb      	bls.n	800c096 <clear_lock+0xe>
	}
}
 800c0be:	bf00      	nop
 800c0c0:	bf00      	nop
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	20001700 	.word	0x20001700

0800c0d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	78db      	ldrb	r3, [r3, #3]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d034      	beq.n	800c14e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7858      	ldrb	r0, [r3, #1]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	f7ff fd40 	bl	800bb7c <disk_write>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c102:	2301      	movs	r3, #1
 800c104:	73fb      	strb	r3, [r7, #15]
 800c106:	e022      	b.n	800c14e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	1ad2      	subs	r2, r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d217      	bcs.n	800c14e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	789b      	ldrb	r3, [r3, #2]
 800c122:	613b      	str	r3, [r7, #16]
 800c124:	e010      	b.n	800c148 <sync_window+0x78>
					wsect += fs->fsize;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	4413      	add	r3, r2
 800c12e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7858      	ldrb	r0, [r3, #1]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c13a:	2301      	movs	r3, #1
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	f7ff fd1d 	bl	800bb7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	3b01      	subs	r3, #1
 800c146:	613b      	str	r3, [r7, #16]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d8eb      	bhi.n	800c126 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d01b      	beq.n	800c1a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff ffad 	bl	800c0d0 <sync_window>
 800c176:	4603      	mov	r3, r0
 800c178:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d113      	bne.n	800c1a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	7858      	ldrb	r0, [r3, #1]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c18a:	2301      	movs	r3, #1
 800c18c:	683a      	ldr	r2, [r7, #0]
 800c18e:	f7ff fcd5 	bl	800bb3c <disk_read>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c198:	f04f 33ff 	mov.w	r3, #4294967295
 800c19c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff ff87 	bl	800c0d0 <sync_window>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d158      	bne.n	800c27e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b03      	cmp	r3, #3
 800c1d2:	d148      	bne.n	800c266 <sync_fs+0xb2>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	791b      	ldrb	r3, [r3, #4]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d144      	bne.n	800c266 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3330      	adds	r3, #48	; 0x30
 800c1e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff fda9 	bl	800bd3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3330      	adds	r3, #48	; 0x30
 800c1f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1f4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff fd38 	bl	800bc6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3330      	adds	r3, #48	; 0x30
 800c202:	4921      	ldr	r1, [pc, #132]	; (800c288 <sync_fs+0xd4>)
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fd4d 	bl	800bca4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	3330      	adds	r3, #48	; 0x30
 800c20e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c212:	491e      	ldr	r1, [pc, #120]	; (800c28c <sync_fs+0xd8>)
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff fd45 	bl	800bca4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3330      	adds	r3, #48	; 0x30
 800c21e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	4619      	mov	r1, r3
 800c228:	4610      	mov	r0, r2
 800c22a:	f7ff fd3b 	bl	800bca4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3330      	adds	r3, #48	; 0x30
 800c232:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7ff fd31 	bl	800bca4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	1c5a      	adds	r2, r3, #1
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	7858      	ldrb	r0, [r3, #1]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25a:	2301      	movs	r3, #1
 800c25c:	f7ff fc8e 	bl	800bb7c <disk_write>
			fs->fsi_flag = 0;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	2200      	movs	r2, #0
 800c26c:	2100      	movs	r1, #0
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fca4 	bl	800bbbc <disk_ioctl>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d001      	beq.n	800c27e <sync_fs+0xca>
 800c27a:	2301      	movs	r3, #1
 800c27c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	41615252 	.word	0x41615252
 800c28c:	61417272 	.word	0x61417272

0800c290 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	3b02      	subs	r3, #2
 800c29e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	3b02      	subs	r3, #2
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d301      	bcc.n	800c2b0 <clust2sect+0x20>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e008      	b.n	800c2c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	895b      	ldrh	r3, [r3, #10]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	fb03 f202 	mul.w	r2, r3, r2
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c0:	4413      	add	r3, r2
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b086      	sub	sp, #24
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d904      	bls.n	800c2ee <get_fat+0x20>
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d302      	bcc.n	800c2f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e08f      	b.n	800c414 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d062      	beq.n	800c3c8 <get_fat+0xfa>
 800c302:	2b03      	cmp	r3, #3
 800c304:	dc7c      	bgt.n	800c400 <get_fat+0x132>
 800c306:	2b01      	cmp	r3, #1
 800c308:	d002      	beq.n	800c310 <get_fat+0x42>
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d042      	beq.n	800c394 <get_fat+0xc6>
 800c30e:	e077      	b.n	800c400 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	60fb      	str	r3, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	085b      	lsrs	r3, r3, #1
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4413      	add	r3, r2
 800c31c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6a1a      	ldr	r2, [r3, #32]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	0a5b      	lsrs	r3, r3, #9
 800c326:	4413      	add	r3, r2
 800c328:	4619      	mov	r1, r3
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f7ff ff14 	bl	800c158 <move_window>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d167      	bne.n	800c406 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	60fa      	str	r2, [r7, #12]
 800c33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	4413      	add	r3, r2
 800c344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c348:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	6a1a      	ldr	r2, [r3, #32]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	0a5b      	lsrs	r3, r3, #9
 800c352:	4413      	add	r3, r2
 800c354:	4619      	mov	r1, r3
 800c356:	6938      	ldr	r0, [r7, #16]
 800c358:	f7ff fefe 	bl	800c158 <move_window>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d153      	bne.n	800c40a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	4413      	add	r3, r2
 800c36c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c370:	021b      	lsls	r3, r3, #8
 800c372:	461a      	mov	r2, r3
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4313      	orrs	r3, r2
 800c378:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <get_fat+0xbc>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	091b      	lsrs	r3, r3, #4
 800c388:	e002      	b.n	800c390 <get_fat+0xc2>
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c390:	617b      	str	r3, [r7, #20]
			break;
 800c392:	e03f      	b.n	800c414 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6a1a      	ldr	r2, [r3, #32]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	0a1b      	lsrs	r3, r3, #8
 800c39c:	4413      	add	r3, r2
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6938      	ldr	r0, [r7, #16]
 800c3a2:	f7ff fed9 	bl	800c158 <move_window>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d130      	bne.n	800c40e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c3ba:	4413      	add	r3, r2
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff fc1b 	bl	800bbf8 <ld_word>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	617b      	str	r3, [r7, #20]
			break;
 800c3c6:	e025      	b.n	800c414 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	6a1a      	ldr	r2, [r3, #32]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	09db      	lsrs	r3, r3, #7
 800c3d0:	4413      	add	r3, r2
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6938      	ldr	r0, [r7, #16]
 800c3d6:	f7ff febf 	bl	800c158 <move_window>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d118      	bne.n	800c412 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3ee:	4413      	add	r3, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff fc19 	bl	800bc28 <ld_dword>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c3fc:	617b      	str	r3, [r7, #20]
			break;
 800c3fe:	e009      	b.n	800c414 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c400:	2301      	movs	r3, #1
 800c402:	617b      	str	r3, [r7, #20]
 800c404:	e006      	b.n	800c414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c406:	bf00      	nop
 800c408:	e004      	b.n	800c414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c40a:	bf00      	nop
 800c40c:	e002      	b.n	800c414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c40e:	bf00      	nop
 800c410:	e000      	b.n	800c414 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c412:	bf00      	nop
		}
	}

	return val;
 800c414:	697b      	ldr	r3, [r7, #20]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c41e:	b590      	push	{r4, r7, lr}
 800c420:	b089      	sub	sp, #36	; 0x24
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c42a:	2302      	movs	r3, #2
 800c42c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b01      	cmp	r3, #1
 800c432:	f240 80d2 	bls.w	800c5da <put_fat+0x1bc>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	f080 80cc 	bcs.w	800c5da <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b03      	cmp	r3, #3
 800c448:	f000 8096 	beq.w	800c578 <put_fat+0x15a>
 800c44c:	2b03      	cmp	r3, #3
 800c44e:	f300 80cd 	bgt.w	800c5ec <put_fat+0x1ce>
 800c452:	2b01      	cmp	r3, #1
 800c454:	d002      	beq.n	800c45c <put_fat+0x3e>
 800c456:	2b02      	cmp	r3, #2
 800c458:	d06e      	beq.n	800c538 <put_fat+0x11a>
 800c45a:	e0c7      	b.n	800c5ec <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	61bb      	str	r3, [r7, #24]
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	085b      	lsrs	r3, r3, #1
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	4413      	add	r3, r2
 800c468:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6a1a      	ldr	r2, [r3, #32]
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	0a5b      	lsrs	r3, r3, #9
 800c472:	4413      	add	r3, r2
 800c474:	4619      	mov	r1, r3
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f7ff fe6e 	bl	800c158 <move_window>
 800c47c:	4603      	mov	r3, r0
 800c47e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c480:	7ffb      	ldrb	r3, [r7, #31]
 800c482:	2b00      	cmp	r3, #0
 800c484:	f040 80ab 	bne.w	800c5de <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	1c59      	adds	r1, r3, #1
 800c492:	61b9      	str	r1, [r7, #24]
 800c494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c498:	4413      	add	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00d      	beq.n	800c4c2 <put_fat+0xa4>
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b25b      	sxtb	r3, r3
 800c4ac:	f003 030f 	and.w	r3, r3, #15
 800c4b0:	b25a      	sxtb	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	b25b      	sxtb	r3, r3
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	b25b      	sxtb	r3, r3
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	e001      	b.n	800c4c6 <put_fat+0xa8>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6a1a      	ldr	r2, [r3, #32]
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	0a5b      	lsrs	r3, r3, #9
 800c4d8:	4413      	add	r3, r2
 800c4da:	4619      	mov	r1, r3
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff fe3b 	bl	800c158 <move_window>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d17a      	bne.n	800c5e2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f8:	4413      	add	r3, r2
 800c4fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <put_fat+0xf0>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	091b      	lsrs	r3, r3, #4
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	e00e      	b.n	800c52c <put_fat+0x10e>
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b25b      	sxtb	r3, r3
 800c514:	f023 030f 	bic.w	r3, r3, #15
 800c518:	b25a      	sxtb	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	b25b      	sxtb	r3, r3
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	b25b      	sxtb	r3, r3
 800c526:	4313      	orrs	r3, r2
 800c528:	b25b      	sxtb	r3, r3
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	70da      	strb	r2, [r3, #3]
			break;
 800c536:	e059      	b.n	800c5ec <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6a1a      	ldr	r2, [r3, #32]
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	4413      	add	r3, r2
 800c542:	4619      	mov	r1, r3
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff fe07 	bl	800c158 <move_window>
 800c54a:	4603      	mov	r3, r0
 800c54c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c54e:	7ffb      	ldrb	r3, [r7, #31]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d148      	bne.n	800c5e6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c562:	4413      	add	r3, r2
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	b292      	uxth	r2, r2
 800c568:	4611      	mov	r1, r2
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7ff fb7f 	bl	800bc6e <st_word>
			fs->wflag = 1;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	70da      	strb	r2, [r3, #3]
			break;
 800c576:	e039      	b.n	800c5ec <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a1a      	ldr	r2, [r3, #32]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	09db      	lsrs	r3, r3, #7
 800c580:	4413      	add	r3, r2
 800c582:	4619      	mov	r1, r3
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff fde7 	bl	800c158 <move_window>
 800c58a:	4603      	mov	r3, r0
 800c58c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c58e:	7ffb      	ldrb	r3, [r7, #31]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d12a      	bne.n	800c5ea <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c5a8:	4413      	add	r3, r2
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff fb3c 	bl	800bc28 <ld_dword>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c5b6:	4323      	orrs	r3, r4
 800c5b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c5c8:	4413      	add	r3, r2
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff fb69 	bl	800bca4 <st_dword>
			fs->wflag = 1;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	70da      	strb	r2, [r3, #3]
			break;
 800c5d8:	e008      	b.n	800c5ec <put_fat+0x1ce>
		}
	}
 800c5da:	bf00      	nop
 800c5dc:	e006      	b.n	800c5ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c5de:	bf00      	nop
 800c5e0:	e004      	b.n	800c5ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c5e2:	bf00      	nop
 800c5e4:	e002      	b.n	800c5ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c5e6:	bf00      	nop
 800c5e8:	e000      	b.n	800c5ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c5ea:	bf00      	nop
	return res;
 800c5ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3724      	adds	r7, #36	; 0x24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd90      	pop	{r4, r7, pc}

0800c5f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b088      	sub	sp, #32
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d904      	bls.n	800c61c <remove_chain+0x26>
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d301      	bcc.n	800c620 <remove_chain+0x2a>
 800c61c:	2302      	movs	r3, #2
 800c61e:	e04b      	b.n	800c6b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00c      	beq.n	800c640 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	69b8      	ldr	r0, [r7, #24]
 800c62e:	f7ff fef6 	bl	800c41e <put_fat>
 800c632:	4603      	mov	r3, r0
 800c634:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c636:	7ffb      	ldrb	r3, [r7, #31]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <remove_chain+0x4a>
 800c63c:	7ffb      	ldrb	r3, [r7, #31]
 800c63e:	e03b      	b.n	800c6b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7ff fe43 	bl	800c2ce <get_fat>
 800c648:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d031      	beq.n	800c6b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d101      	bne.n	800c65a <remove_chain+0x64>
 800c656:	2302      	movs	r3, #2
 800c658:	e02e      	b.n	800c6b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c660:	d101      	bne.n	800c666 <remove_chain+0x70>
 800c662:	2301      	movs	r3, #1
 800c664:	e028      	b.n	800c6b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c666:	2200      	movs	r2, #0
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	69b8      	ldr	r0, [r7, #24]
 800c66c:	f7ff fed7 	bl	800c41e <put_fat>
 800c670:	4603      	mov	r3, r0
 800c672:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c674:	7ffb      	ldrb	r3, [r7, #31]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <remove_chain+0x88>
 800c67a:	7ffb      	ldrb	r3, [r7, #31]
 800c67c:	e01c      	b.n	800c6b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	691a      	ldr	r2, [r3, #16]
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	3b02      	subs	r3, #2
 800c688:	429a      	cmp	r2, r3
 800c68a:	d20b      	bcs.n	800c6a4 <remove_chain+0xae>
			fs->free_clst++;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	791b      	ldrb	r3, [r3, #4]
 800c69a:	f043 0301 	orr.w	r3, r3, #1
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	695b      	ldr	r3, [r3, #20]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d3c6      	bcc.n	800c640 <remove_chain+0x4a>
 800c6b2:	e000      	b.n	800c6b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c6b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3720      	adds	r7, #32
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10d      	bne.n	800c6f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d004      	beq.n	800c6ec <create_chain+0x2c>
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d31b      	bcc.n	800c724 <create_chain+0x64>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	e018      	b.n	800c724 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff fdea 	bl	800c2ce <get_fat>
 800c6fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d801      	bhi.n	800c706 <create_chain+0x46>
 800c702:	2301      	movs	r3, #1
 800c704:	e070      	b.n	800c7e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d101      	bne.n	800c712 <create_chain+0x52>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	e06a      	b.n	800c7e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d201      	bcs.n	800c720 <create_chain+0x60>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	e063      	b.n	800c7e8 <create_chain+0x128>
		scl = clst;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	429a      	cmp	r2, r3
 800c736:	d307      	bcc.n	800c748 <create_chain+0x88>
				ncl = 2;
 800c738:	2302      	movs	r3, #2
 800c73a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c73c:	69fa      	ldr	r2, [r7, #28]
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	429a      	cmp	r2, r3
 800c742:	d901      	bls.n	800c748 <create_chain+0x88>
 800c744:	2300      	movs	r3, #0
 800c746:	e04f      	b.n	800c7e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c748:	69f9      	ldr	r1, [r7, #28]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff fdbf 	bl	800c2ce <get_fat>
 800c750:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00e      	beq.n	800c776 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d003      	beq.n	800c766 <create_chain+0xa6>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c764:	d101      	bne.n	800c76a <create_chain+0xaa>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	e03e      	b.n	800c7e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c76a:	69fa      	ldr	r2, [r7, #28]
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d1da      	bne.n	800c728 <create_chain+0x68>
 800c772:	2300      	movs	r3, #0
 800c774:	e038      	b.n	800c7e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c776:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	69f9      	ldr	r1, [r7, #28]
 800c77e:	6938      	ldr	r0, [r7, #16]
 800c780:	f7ff fe4d 	bl	800c41e <put_fat>
 800c784:	4603      	mov	r3, r0
 800c786:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d109      	bne.n	800c7a2 <create_chain+0xe2>
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d006      	beq.n	800c7a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c794:	69fa      	ldr	r2, [r7, #28]
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6938      	ldr	r0, [r7, #16]
 800c79a:	f7ff fe40 	bl	800c41e <put_fat>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d116      	bne.n	800c7d6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	69fa      	ldr	r2, [r7, #28]
 800c7ac:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	691a      	ldr	r2, [r3, #16]
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	3b02      	subs	r3, #2
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d804      	bhi.n	800c7c6 <create_chain+0x106>
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	791b      	ldrb	r3, [r3, #4]
 800c7ca:	f043 0301 	orr.w	r3, r3, #1
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	711a      	strb	r2, [r3, #4]
 800c7d4:	e007      	b.n	800c7e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d102      	bne.n	800c7e2 <create_chain+0x122>
 800c7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c7e0:	e000      	b.n	800c7e4 <create_chain+0x124>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c7e6:	69fb      	ldr	r3, [r7, #28]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3720      	adds	r7, #32
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	3304      	adds	r3, #4
 800c806:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	0a5b      	lsrs	r3, r3, #9
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	8952      	ldrh	r2, [r2, #10]
 800c810:	fbb3 f3f2 	udiv	r3, r3, r2
 800c814:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1d1a      	adds	r2, r3, #4
 800c81a:	613a      	str	r2, [r7, #16]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <clmt_clust+0x3a>
 800c826:	2300      	movs	r3, #0
 800c828:	e010      	b.n	800c84c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d307      	bcc.n	800c842 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	617b      	str	r3, [r7, #20]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	3304      	adds	r3, #4
 800c83e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c840:	e7e9      	b.n	800c816 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c842:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	4413      	add	r3, r2
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	371c      	adds	r7, #28
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c86e:	d204      	bcs.n	800c87a <dir_sdi+0x22>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	f003 031f 	and.w	r3, r3, #31
 800c876:	2b00      	cmp	r3, #0
 800c878:	d001      	beq.n	800c87e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c87a:	2302      	movs	r3, #2
 800c87c:	e063      	b.n	800c946 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	683a      	ldr	r2, [r7, #0]
 800c882:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <dir_sdi+0x46>
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b02      	cmp	r3, #2
 800c896:	d902      	bls.n	800c89e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10c      	bne.n	800c8be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	095b      	lsrs	r3, r3, #5
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	8912      	ldrh	r2, [r2, #8]
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d301      	bcc.n	800c8b4 <dir_sdi+0x5c>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e048      	b.n	800c946 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	61da      	str	r2, [r3, #28]
 800c8bc:	e029      	b.n	800c912 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	025b      	lsls	r3, r3, #9
 800c8c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8c6:	e019      	b.n	800c8fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6979      	ldr	r1, [r7, #20]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fcfe 	bl	800c2ce <get_fat>
 800c8d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8da:	d101      	bne.n	800c8e0 <dir_sdi+0x88>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e032      	b.n	800c946 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d904      	bls.n	800c8f0 <dir_sdi+0x98>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	695b      	ldr	r3, [r3, #20]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d301      	bcc.n	800c8f4 <dir_sdi+0x9c>
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	e028      	b.n	800c946 <dir_sdi+0xee>
			ofs -= csz;
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	429a      	cmp	r2, r3
 800c902:	d2e1      	bcs.n	800c8c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c904:	6979      	ldr	r1, [r7, #20]
 800c906:	6938      	ldr	r0, [r7, #16]
 800c908:	f7ff fcc2 	bl	800c290 <clust2sect>
 800c90c:	4602      	mov	r2, r0
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	69db      	ldr	r3, [r3, #28]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <dir_sdi+0xcc>
 800c920:	2302      	movs	r3, #2
 800c922:	e010      	b.n	800c946 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	69da      	ldr	r2, [r3, #28]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	0a5b      	lsrs	r3, r3, #9
 800c92c:	441a      	add	r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93e:	441a      	add	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b086      	sub	sp, #24
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	3320      	adds	r3, #32
 800c964:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <dir_next+0x28>
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c974:	d301      	bcc.n	800c97a <dir_next+0x2c>
 800c976:	2304      	movs	r3, #4
 800c978:	e0aa      	b.n	800cad0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c980:	2b00      	cmp	r3, #0
 800c982:	f040 8098 	bne.w	800cab6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10b      	bne.n	800c9b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	095b      	lsrs	r3, r3, #5
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	8912      	ldrh	r2, [r2, #8]
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	f0c0 8088 	bcc.w	800cab6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	61da      	str	r2, [r3, #28]
 800c9ac:	2304      	movs	r3, #4
 800c9ae:	e08f      	b.n	800cad0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	0a5b      	lsrs	r3, r3, #9
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	8952      	ldrh	r2, [r2, #10]
 800c9b8:	3a01      	subs	r2, #1
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d17a      	bne.n	800cab6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	f7ff fc80 	bl	800c2ce <get_fat>
 800c9ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d801      	bhi.n	800c9da <dir_next+0x8c>
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	e07a      	b.n	800cad0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e0:	d101      	bne.n	800c9e6 <dir_next+0x98>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e074      	b.n	800cad0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d358      	bcc.n	800caa2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d104      	bne.n	800ca00 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	61da      	str	r2, [r3, #28]
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	e067      	b.n	800cad0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7ff fe59 	bl	800c6c0 <create_chain>
 800ca0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <dir_next+0xcc>
 800ca16:	2307      	movs	r3, #7
 800ca18:	e05a      	b.n	800cad0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d101      	bne.n	800ca24 <dir_next+0xd6>
 800ca20:	2302      	movs	r3, #2
 800ca22:	e055      	b.n	800cad0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d101      	bne.n	800ca30 <dir_next+0xe2>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e04f      	b.n	800cad0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f7ff fb4d 	bl	800c0d0 <sync_window>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <dir_next+0xf2>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e047      	b.n	800cad0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3330      	adds	r3, #48	; 0x30
 800ca44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca48:	2100      	movs	r1, #0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7ff f977 	bl	800bd3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca50:	2300      	movs	r3, #0
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	6979      	ldr	r1, [r7, #20]
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f7ff fc1a 	bl	800c290 <clust2sect>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca62:	e012      	b.n	800ca8a <dir_next+0x13c>
						fs->wflag = 1;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2201      	movs	r2, #1
 800ca68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff fb30 	bl	800c0d0 <sync_window>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <dir_next+0x12c>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e02a      	b.n	800cad0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	613b      	str	r3, [r7, #16]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	895b      	ldrh	r3, [r3, #10]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d3e6      	bcc.n	800ca64 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	1ad2      	subs	r2, r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	697a      	ldr	r2, [r7, #20]
 800caa6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800caa8:	6979      	ldr	r1, [r7, #20]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff fbf0 	bl	800c290 <clust2sect>
 800cab0:	4602      	mov	r2, r0
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac8:	441a      	add	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3718      	adds	r7, #24
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cae8:	2100      	movs	r1, #0
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff feb4 	bl	800c858 <dir_sdi>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d12b      	bne.n	800cb52 <dir_alloc+0x7a>
		n = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	4619      	mov	r1, r3
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7ff fb27 	bl	800c158 <move_window>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d11d      	bne.n	800cb50 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6a1b      	ldr	r3, [r3, #32]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2be5      	cmp	r3, #229	; 0xe5
 800cb1c:	d004      	beq.n	800cb28 <dir_alloc+0x50>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d107      	bne.n	800cb38 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	613b      	str	r3, [r7, #16]
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d102      	bne.n	800cb3c <dir_alloc+0x64>
 800cb36:	e00c      	b.n	800cb52 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cb38:	2300      	movs	r3, #0
 800cb3a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7ff ff05 	bl	800c94e <dir_next>
 800cb44:	4603      	mov	r3, r0
 800cb46:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0d7      	beq.n	800cafe <dir_alloc+0x26>
 800cb4e:	e000      	b.n	800cb52 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cb50:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d101      	bne.n	800cb5c <dir_alloc+0x84>
 800cb58:	2307      	movs	r3, #7
 800cb5a:	75fb      	strb	r3, [r7, #23]
	return res;
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	331a      	adds	r3, #26
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7ff f83f 	bl	800bbf8 <ld_word>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b03      	cmp	r3, #3
 800cb84:	d109      	bne.n	800cb9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	3314      	adds	r3, #20
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff f834 	bl	800bbf8 <ld_word>
 800cb90:	4603      	mov	r3, r0
 800cb92:	041b      	lsls	r3, r3, #16
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	331a      	adds	r3, #26
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	b292      	uxth	r2, r2
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff f857 	bl	800bc6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d109      	bne.n	800cbdc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	f103 0214 	add.w	r2, r3, #20
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	0c1b      	lsrs	r3, r3, #16
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7ff f849 	bl	800bc6e <st_word>
	}
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fe2f 	bl	800c858 <dir_sdi>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <dir_find+0x24>
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
 800cc06:	e03e      	b.n	800cc86 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	69db      	ldr	r3, [r3, #28]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6938      	ldr	r0, [r7, #16]
 800cc10:	f7ff faa2 	bl	800c158 <move_window>
 800cc14:	4603      	mov	r3, r0
 800cc16:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d12f      	bne.n	800cc7e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <dir_find+0x4e>
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	75fb      	strb	r3, [r7, #23]
 800cc30:	e028      	b.n	800cc84 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	330b      	adds	r3, #11
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6a1b      	ldr	r3, [r3, #32]
 800cc48:	330b      	adds	r3, #11
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <dir_find+0x86>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a18      	ldr	r0, [r3, #32]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3324      	adds	r3, #36	; 0x24
 800cc5c:	220b      	movs	r2, #11
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f7ff f888 	bl	800bd74 <mem_cmp>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00b      	beq.n	800cc82 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff fe6e 	bl	800c94e <dir_next>
 800cc72:	4603      	mov	r3, r0
 800cc74:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0c5      	beq.n	800cc08 <dir_find+0x24>
 800cc7c:	e002      	b.n	800cc84 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cc7e:	bf00      	nop
 800cc80:	e000      	b.n	800cc84 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cc82:	bf00      	nop

	return res;
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff ff1a 	bl	800cad8 <dir_alloc>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d11c      	bne.n	800cce8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	68b8      	ldr	r0, [r7, #8]
 800ccb6:	f7ff fa4f 	bl	800c158 <move_window>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d111      	bne.n	800cce8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	2220      	movs	r2, #32
 800ccca:	2100      	movs	r1, #0
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff f836 	bl	800bd3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a18      	ldr	r0, [r3, #32]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3324      	adds	r3, #36	; 0x24
 800ccda:	220b      	movs	r2, #11
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f7ff f80d 	bl	800bcfc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	2201      	movs	r2, #1
 800cce6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3324      	adds	r3, #36	; 0x24
 800cd08:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cd0a:	220b      	movs	r2, #11
 800cd0c:	2120      	movs	r1, #32
 800cd0e:	68b8      	ldr	r0, [r7, #8]
 800cd10:	f7ff f815 	bl	800bd3e <mem_set>
	si = i = 0; ni = 8;
 800cd14:	2300      	movs	r3, #0
 800cd16:	613b      	str	r3, [r7, #16]
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	61fb      	str	r3, [r7, #28]
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	61fa      	str	r2, [r7, #28]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4413      	add	r3, r2
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd2e:	7efb      	ldrb	r3, [r7, #27]
 800cd30:	2b20      	cmp	r3, #32
 800cd32:	d94e      	bls.n	800cdd2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cd34:	7efb      	ldrb	r3, [r7, #27]
 800cd36:	2b2f      	cmp	r3, #47	; 0x2f
 800cd38:	d006      	beq.n	800cd48 <create_name+0x54>
 800cd3a:	7efb      	ldrb	r3, [r7, #27]
 800cd3c:	2b5c      	cmp	r3, #92	; 0x5c
 800cd3e:	d110      	bne.n	800cd62 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cd40:	e002      	b.n	800cd48 <create_name+0x54>
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	3301      	adds	r3, #1
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b2f      	cmp	r3, #47	; 0x2f
 800cd52:	d0f6      	beq.n	800cd42 <create_name+0x4e>
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	4413      	add	r3, r2
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b5c      	cmp	r3, #92	; 0x5c
 800cd5e:	d0f0      	beq.n	800cd42 <create_name+0x4e>
			break;
 800cd60:	e038      	b.n	800cdd4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cd62:	7efb      	ldrb	r3, [r7, #27]
 800cd64:	2b2e      	cmp	r3, #46	; 0x2e
 800cd66:	d003      	beq.n	800cd70 <create_name+0x7c>
 800cd68:	693a      	ldr	r2, [r7, #16]
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d30c      	bcc.n	800cd8a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b0b      	cmp	r3, #11
 800cd74:	d002      	beq.n	800cd7c <create_name+0x88>
 800cd76:	7efb      	ldrb	r3, [r7, #27]
 800cd78:	2b2e      	cmp	r3, #46	; 0x2e
 800cd7a:	d001      	beq.n	800cd80 <create_name+0x8c>
 800cd7c:	2306      	movs	r3, #6
 800cd7e:	e044      	b.n	800ce0a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cd80:	2308      	movs	r3, #8
 800cd82:	613b      	str	r3, [r7, #16]
 800cd84:	230b      	movs	r3, #11
 800cd86:	617b      	str	r3, [r7, #20]
			continue;
 800cd88:	e022      	b.n	800cdd0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cd8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	da04      	bge.n	800cd9c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cd92:	7efb      	ldrb	r3, [r7, #27]
 800cd94:	3b80      	subs	r3, #128	; 0x80
 800cd96:	4a1f      	ldr	r2, [pc, #124]	; (800ce14 <create_name+0x120>)
 800cd98:	5cd3      	ldrb	r3, [r2, r3]
 800cd9a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cd9c:	7efb      	ldrb	r3, [r7, #27]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	481d      	ldr	r0, [pc, #116]	; (800ce18 <create_name+0x124>)
 800cda2:	f7ff f80e 	bl	800bdc2 <chk_chr>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <create_name+0xbc>
 800cdac:	2306      	movs	r3, #6
 800cdae:	e02c      	b.n	800ce0a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cdb0:	7efb      	ldrb	r3, [r7, #27]
 800cdb2:	2b60      	cmp	r3, #96	; 0x60
 800cdb4:	d905      	bls.n	800cdc2 <create_name+0xce>
 800cdb6:	7efb      	ldrb	r3, [r7, #27]
 800cdb8:	2b7a      	cmp	r3, #122	; 0x7a
 800cdba:	d802      	bhi.n	800cdc2 <create_name+0xce>
 800cdbc:	7efb      	ldrb	r3, [r7, #27]
 800cdbe:	3b20      	subs	r3, #32
 800cdc0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	613a      	str	r2, [r7, #16]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	4413      	add	r3, r2
 800cdcc:	7efa      	ldrb	r2, [r7, #27]
 800cdce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cdd0:	e7a6      	b.n	800cd20 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cdd2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	441a      	add	r2, r3
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <create_name+0xf4>
 800cde4:	2306      	movs	r3, #6
 800cde6:	e010      	b.n	800ce0a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2be5      	cmp	r3, #229	; 0xe5
 800cdee:	d102      	bne.n	800cdf6 <create_name+0x102>
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2205      	movs	r2, #5
 800cdf4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cdf6:	7efb      	ldrb	r3, [r7, #27]
 800cdf8:	2b20      	cmp	r3, #32
 800cdfa:	d801      	bhi.n	800ce00 <create_name+0x10c>
 800cdfc:	2204      	movs	r2, #4
 800cdfe:	e000      	b.n	800ce02 <create_name+0x10e>
 800ce00:	2200      	movs	r2, #0
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	330b      	adds	r3, #11
 800ce06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ce08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3720      	adds	r7, #32
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	0800f2ac 	.word	0x0800f2ac
 800ce18:	0800f1d4 	.word	0x0800f1d4

0800ce1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce30:	e002      	b.n	800ce38 <follow_path+0x1c>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	603b      	str	r3, [r7, #0]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ce3e:	d0f8      	beq.n	800ce32 <follow_path+0x16>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b5c      	cmp	r3, #92	; 0x5c
 800ce46:	d0f4      	beq.n	800ce32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b1f      	cmp	r3, #31
 800ce54:	d80a      	bhi.n	800ce6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2280      	movs	r2, #128	; 0x80
 800ce5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ce5e:	2100      	movs	r1, #0
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fcf9 	bl	800c858 <dir_sdi>
 800ce66:	4603      	mov	r3, r0
 800ce68:	75fb      	strb	r3, [r7, #23]
 800ce6a:	e043      	b.n	800cef4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce6c:	463b      	mov	r3, r7
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff ff3f 	bl	800ccf4 <create_name>
 800ce76:	4603      	mov	r3, r0
 800ce78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d134      	bne.n	800ceea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff feaf 	bl	800cbe4 <dir_find>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	2b04      	cmp	r3, #4
 800ce9c:	d127      	bne.n	800ceee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce9e:	7afb      	ldrb	r3, [r7, #11]
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d122      	bne.n	800ceee <follow_path+0xd2>
 800cea8:	2305      	movs	r3, #5
 800ceaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ceac:	e01f      	b.n	800ceee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ceae:	7afb      	ldrb	r3, [r7, #11]
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d11c      	bne.n	800cef2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	799b      	ldrb	r3, [r3, #6]
 800cebc:	f003 0310 	and.w	r3, r3, #16
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cec4:	2305      	movs	r3, #5
 800cec6:	75fb      	strb	r3, [r7, #23]
 800cec8:	e014      	b.n	800cef4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ced8:	4413      	add	r3, r2
 800ceda:	4619      	mov	r1, r3
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f7ff fe42 	bl	800cb66 <ld_clust>
 800cee2:	4602      	mov	r2, r0
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cee8:	e7c0      	b.n	800ce6c <follow_path+0x50>
			if (res != FR_OK) break;
 800ceea:	bf00      	nop
 800ceec:	e002      	b.n	800cef4 <follow_path+0xd8>
				break;
 800ceee:	bf00      	nop
 800cef0:	e000      	b.n	800cef4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cef2:	bf00      	nop
			}
		}
	}

	return res;
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cefe:	b480      	push	{r7}
 800cf00:	b087      	sub	sp, #28
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d031      	beq.n	800cf78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	e002      	b.n	800cf22 <get_ldnumber+0x24>
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	617b      	str	r3, [r7, #20]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	d903      	bls.n	800cf32 <get_ldnumber+0x34>
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b3a      	cmp	r3, #58	; 0x3a
 800cf30:	d1f4      	bne.n	800cf1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2b3a      	cmp	r3, #58	; 0x3a
 800cf38:	d11c      	bne.n	800cf74 <get_ldnumber+0x76>
			tp = *path;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	1c5a      	adds	r2, r3, #1
 800cf44:	60fa      	str	r2, [r7, #12]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	3b30      	subs	r3, #48	; 0x30
 800cf4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b09      	cmp	r3, #9
 800cf50:	d80e      	bhi.n	800cf70 <get_ldnumber+0x72>
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d10a      	bne.n	800cf70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d107      	bne.n	800cf70 <get_ldnumber+0x72>
					vol = (int)i;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	3301      	adds	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	697a      	ldr	r2, [r7, #20]
 800cf6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	e002      	b.n	800cf7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cf74:	2300      	movs	r3, #0
 800cf76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cf78:	693b      	ldr	r3, [r7, #16]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
	...

0800cf88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	70da      	strb	r2, [r3, #3]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff f8d8 	bl	800c158 <move_window>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <check_fs+0x2a>
 800cfae:	2304      	movs	r3, #4
 800cfb0:	e038      	b.n	800d024 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	3330      	adds	r3, #48	; 0x30
 800cfb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fe1c 	bl	800bbf8 <ld_word>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d001      	beq.n	800cfd0 <check_fs+0x48>
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e029      	b.n	800d024 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfd6:	2be9      	cmp	r3, #233	; 0xe9
 800cfd8:	d009      	beq.n	800cfee <check_fs+0x66>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfe0:	2beb      	cmp	r3, #235	; 0xeb
 800cfe2:	d11e      	bne.n	800d022 <check_fs+0x9a>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cfea:	2b90      	cmp	r3, #144	; 0x90
 800cfec:	d119      	bne.n	800d022 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3330      	adds	r3, #48	; 0x30
 800cff2:	3336      	adds	r3, #54	; 0x36
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fe17 	bl	800bc28 <ld_dword>
 800cffa:	4603      	mov	r3, r0
 800cffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d000:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <check_fs+0xa4>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d101      	bne.n	800d00a <check_fs+0x82>
 800d006:	2300      	movs	r3, #0
 800d008:	e00c      	b.n	800d024 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3330      	adds	r3, #48	; 0x30
 800d00e:	3352      	adds	r3, #82	; 0x52
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe fe09 	bl	800bc28 <ld_dword>
 800d016:	4603      	mov	r3, r0
 800d018:	4a05      	ldr	r2, [pc, #20]	; (800d030 <check_fs+0xa8>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d101      	bne.n	800d022 <check_fs+0x9a>
 800d01e:	2300      	movs	r3, #0
 800d020:	e000      	b.n	800d024 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d022:	2302      	movs	r3, #2
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	00544146 	.word	0x00544146
 800d030:	33544146 	.word	0x33544146

0800d034 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b096      	sub	sp, #88	; 0x58
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	4613      	mov	r3, r2
 800d040:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	2200      	movs	r2, #0
 800d046:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7ff ff58 	bl	800cefe <get_ldnumber>
 800d04e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d052:	2b00      	cmp	r3, #0
 800d054:	da01      	bge.n	800d05a <find_volume+0x26>
 800d056:	230b      	movs	r3, #11
 800d058:	e22d      	b.n	800d4b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d05a:	4aa1      	ldr	r2, [pc, #644]	; (800d2e0 <find_volume+0x2ac>)
 800d05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d062:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <find_volume+0x3a>
 800d06a:	230c      	movs	r3, #12
 800d06c:	e223      	b.n	800d4b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d072:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	f023 0301 	bic.w	r3, r3, #1
 800d07a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01a      	beq.n	800d0ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	785b      	ldrb	r3, [r3, #1]
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe fd17 	bl	800babc <disk_status>
 800d08e:	4603      	mov	r3, r0
 800d090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10c      	bne.n	800d0ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d007      	beq.n	800d0b6 <find_volume+0x82>
 800d0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0aa:	f003 0304 	and.w	r3, r3, #4
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d0b2:	230a      	movs	r3, #10
 800d0b4:	e1ff      	b.n	800d4b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e1fd      	b.n	800d4b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	2200      	movs	r2, #0
 800d0be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	785b      	ldrb	r3, [r3, #1]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fe fd0f 	bl	800baf0 <disk_initialize>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	e1e6      	b.n	800d4b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d007      	beq.n	800d0fe <find_volume+0xca>
 800d0ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0f2:	f003 0304 	and.w	r3, r3, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	e1db      	b.n	800d4b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0fe:	2300      	movs	r3, #0
 800d100:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d106:	f7ff ff3f 	bl	800cf88 <check_fs>
 800d10a:	4603      	mov	r3, r0
 800d10c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d114:	2b02      	cmp	r3, #2
 800d116:	d149      	bne.n	800d1ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d118:	2300      	movs	r3, #0
 800d11a:	643b      	str	r3, [r7, #64]	; 0x40
 800d11c:	e01e      	b.n	800d15c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d12c:	4413      	add	r3, r2
 800d12e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	3304      	adds	r3, #4
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d006      	beq.n	800d148 <find_volume+0x114>
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	3308      	adds	r3, #8
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fd72 	bl	800bc28 <ld_dword>
 800d144:	4602      	mov	r2, r0
 800d146:	e000      	b.n	800d14a <find_volume+0x116>
 800d148:	2200      	movs	r2, #0
 800d14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	3358      	adds	r3, #88	; 0x58
 800d150:	443b      	add	r3, r7
 800d152:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d158:	3301      	adds	r3, #1
 800d15a:	643b      	str	r3, [r7, #64]	; 0x40
 800d15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d15e:	2b03      	cmp	r3, #3
 800d160:	d9dd      	bls.n	800d11e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d162:	2300      	movs	r3, #0
 800d164:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <find_volume+0x13e>
 800d16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16e:	3b01      	subs	r3, #1
 800d170:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	3358      	adds	r3, #88	; 0x58
 800d178:	443b      	add	r3, r7
 800d17a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d17e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d182:	2b00      	cmp	r3, #0
 800d184:	d005      	beq.n	800d192 <find_volume+0x15e>
 800d186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d18a:	f7ff fefd 	bl	800cf88 <check_fs>
 800d18e:	4603      	mov	r3, r0
 800d190:	e000      	b.n	800d194 <find_volume+0x160>
 800d192:	2303      	movs	r3, #3
 800d194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d905      	bls.n	800d1ac <find_volume+0x178>
 800d1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800d1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d9e2      	bls.n	800d172 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1b0:	2b04      	cmp	r3, #4
 800d1b2:	d101      	bne.n	800d1b8 <find_volume+0x184>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e17e      	b.n	800d4b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d901      	bls.n	800d1c4 <find_volume+0x190>
 800d1c0:	230d      	movs	r3, #13
 800d1c2:	e178      	b.n	800d4b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	3330      	adds	r3, #48	; 0x30
 800d1c8:	330b      	adds	r3, #11
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fd14 	bl	800bbf8 <ld_word>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1d6:	d001      	beq.n	800d1dc <find_volume+0x1a8>
 800d1d8:	230d      	movs	r3, #13
 800d1da:	e16c      	b.n	800d4b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1de:	3330      	adds	r3, #48	; 0x30
 800d1e0:	3316      	adds	r3, #22
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe fd08 	bl	800bbf8 <ld_word>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <find_volume+0x1cc>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	3330      	adds	r3, #48	; 0x30
 800d1f6:	3324      	adds	r3, #36	; 0x24
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fd15 	bl	800bc28 <ld_dword>
 800d1fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d204:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	789b      	ldrb	r3, [r3, #2]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d005      	beq.n	800d224 <find_volume+0x1f0>
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	789b      	ldrb	r3, [r3, #2]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d001      	beq.n	800d224 <find_volume+0x1f0>
 800d220:	230d      	movs	r3, #13
 800d222:	e148      	b.n	800d4b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	789b      	ldrb	r3, [r3, #2]
 800d228:	461a      	mov	r2, r3
 800d22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d22c:	fb02 f303 	mul.w	r3, r2, r3
 800d230:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d238:	b29a      	uxth	r2, r3
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d008      	beq.n	800d258 <find_volume+0x224>
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	895b      	ldrh	r3, [r3, #10]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	895b      	ldrh	r3, [r3, #10]
 800d250:	3b01      	subs	r3, #1
 800d252:	4013      	ands	r3, r2
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <find_volume+0x228>
 800d258:	230d      	movs	r3, #13
 800d25a:	e12c      	b.n	800d4b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	3330      	adds	r3, #48	; 0x30
 800d260:	3311      	adds	r3, #17
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe fcc8 	bl	800bbf8 <ld_word>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d272:	891b      	ldrh	r3, [r3, #8]
 800d274:	f003 030f 	and.w	r3, r3, #15
 800d278:	b29b      	uxth	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d001      	beq.n	800d282 <find_volume+0x24e>
 800d27e:	230d      	movs	r3, #13
 800d280:	e119      	b.n	800d4b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	3330      	adds	r3, #48	; 0x30
 800d286:	3313      	adds	r3, #19
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe fcb5 	bl	800bbf8 <ld_word>
 800d28e:	4603      	mov	r3, r0
 800d290:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d294:	2b00      	cmp	r3, #0
 800d296:	d106      	bne.n	800d2a6 <find_volume+0x272>
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	3330      	adds	r3, #48	; 0x30
 800d29c:	3320      	adds	r3, #32
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fe fcc2 	bl	800bc28 <ld_dword>
 800d2a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a8:	3330      	adds	r3, #48	; 0x30
 800d2aa:	330e      	adds	r3, #14
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fca3 	bl	800bbf8 <ld_word>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d2b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <find_volume+0x28c>
 800d2bc:	230d      	movs	r3, #13
 800d2be:	e0fa      	b.n	800d4b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d2c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c4:	4413      	add	r3, r2
 800d2c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2c8:	8912      	ldrh	r2, [r2, #8]
 800d2ca:	0912      	lsrs	r2, r2, #4
 800d2cc:	b292      	uxth	r2, r2
 800d2ce:	4413      	add	r3, r2
 800d2d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d204      	bcs.n	800d2e4 <find_volume+0x2b0>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e0eb      	b.n	800d4b6 <find_volume+0x482>
 800d2de:	bf00      	nop
 800d2e0:	200016f8 	.word	0x200016f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d2e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ec:	8952      	ldrh	r2, [r2, #10]
 800d2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2f2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <find_volume+0x2ca>
 800d2fa:	230d      	movs	r3, #13
 800d2fc:	e0db      	b.n	800d4b6 <find_volume+0x482>
		fmt = FS_FAT32;
 800d2fe:	2303      	movs	r3, #3
 800d300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d306:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d802      	bhi.n	800d314 <find_volume+0x2e0>
 800d30e:	2302      	movs	r3, #2
 800d310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d802      	bhi.n	800d324 <find_volume+0x2f0>
 800d31e:	2301      	movs	r3, #1
 800d320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	1c9a      	adds	r2, r3, #2
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d330:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d332:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d336:	441a      	add	r2, r3
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d33c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	441a      	add	r2, r3
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d11e      	bne.n	800d38c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	3330      	adds	r3, #48	; 0x30
 800d352:	332a      	adds	r3, #42	; 0x2a
 800d354:	4618      	mov	r0, r3
 800d356:	f7fe fc4f 	bl	800bbf8 <ld_word>
 800d35a:	4603      	mov	r3, r0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <find_volume+0x330>
 800d360:	230d      	movs	r3, #13
 800d362:	e0a8      	b.n	800d4b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	891b      	ldrh	r3, [r3, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <find_volume+0x33c>
 800d36c:	230d      	movs	r3, #13
 800d36e:	e0a2      	b.n	800d4b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d372:	3330      	adds	r3, #48	; 0x30
 800d374:	332c      	adds	r3, #44	; 0x2c
 800d376:	4618      	mov	r0, r3
 800d378:	f7fe fc56 	bl	800bc28 <ld_dword>
 800d37c:	4602      	mov	r2, r0
 800d37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d380:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d384:	695b      	ldr	r3, [r3, #20]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	647b      	str	r3, [r7, #68]	; 0x44
 800d38a:	e01f      	b.n	800d3cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38e:	891b      	ldrh	r3, [r3, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d101      	bne.n	800d398 <find_volume+0x364>
 800d394:	230d      	movs	r3, #13
 800d396:	e08e      	b.n	800d4b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	6a1a      	ldr	r2, [r3, #32]
 800d39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d39e:	441a      	add	r2, r3
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d103      	bne.n	800d3b4 <find_volume+0x380>
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	e00a      	b.n	800d3ca <find_volume+0x396>
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	695a      	ldr	r2, [r3, #20]
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	4413      	add	r3, r2
 800d3be:	085a      	lsrs	r2, r3, #1
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	f003 0301 	and.w	r3, r3, #1
 800d3c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d3ca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d3d6:	0a5b      	lsrs	r3, r3, #9
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d201      	bcs.n	800d3e0 <find_volume+0x3ac>
 800d3dc:	230d      	movs	r3, #13
 800d3de:	e06a      	b.n	800d4b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e6:	611a      	str	r2, [r3, #16]
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	691a      	ldr	r2, [r3, #16]
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	2280      	movs	r2, #128	; 0x80
 800d3f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d3f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d149      	bne.n	800d492 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	3330      	adds	r3, #48	; 0x30
 800d402:	3330      	adds	r3, #48	; 0x30
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fbf7 	bl	800bbf8 <ld_word>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d140      	bne.n	800d492 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d412:	3301      	adds	r3, #1
 800d414:	4619      	mov	r1, r3
 800d416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d418:	f7fe fe9e 	bl	800c158 <move_window>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d137      	bne.n	800d492 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	2200      	movs	r2, #0
 800d426:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42a:	3330      	adds	r3, #48	; 0x30
 800d42c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe fbe1 	bl	800bbf8 <ld_word>
 800d436:	4603      	mov	r3, r0
 800d438:	461a      	mov	r2, r3
 800d43a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d43e:	429a      	cmp	r2, r3
 800d440:	d127      	bne.n	800d492 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	3330      	adds	r3, #48	; 0x30
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fbee 	bl	800bc28 <ld_dword>
 800d44c:	4603      	mov	r3, r0
 800d44e:	4a1c      	ldr	r2, [pc, #112]	; (800d4c0 <find_volume+0x48c>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d11e      	bne.n	800d492 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	3330      	adds	r3, #48	; 0x30
 800d458:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe fbe3 	bl	800bc28 <ld_dword>
 800d462:	4603      	mov	r3, r0
 800d464:	4a17      	ldr	r2, [pc, #92]	; (800d4c4 <find_volume+0x490>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d113      	bne.n	800d492 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	3330      	adds	r3, #48	; 0x30
 800d46e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe fbd8 	bl	800bc28 <ld_dword>
 800d478:	4602      	mov	r2, r0
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	3330      	adds	r3, #48	; 0x30
 800d482:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe fbce 	bl	800bc28 <ld_dword>
 800d48c:	4602      	mov	r2, r0
 800d48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d490:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d494:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d498:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d49a:	4b0b      	ldr	r3, [pc, #44]	; (800d4c8 <find_volume+0x494>)
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <find_volume+0x494>)
 800d4a4:	801a      	strh	r2, [r3, #0]
 800d4a6:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <find_volume+0x494>)
 800d4a8:	881a      	ldrh	r2, [r3, #0]
 800d4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d4ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4b0:	f7fe fdea 	bl	800c088 <clear_lock>
#endif
	return FR_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3758      	adds	r7, #88	; 0x58
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	41615252 	.word	0x41615252
 800d4c4:	61417272 	.word	0x61417272
 800d4c8:	200016fc 	.word	0x200016fc

0800d4cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d4d6:	2309      	movs	r3, #9
 800d4d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d01c      	beq.n	800d51a <validate+0x4e>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d018      	beq.n	800d51a <validate+0x4e>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <validate+0x4e>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	889a      	ldrh	r2, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	88db      	ldrh	r3, [r3, #6]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d10c      	bne.n	800d51a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	4618      	mov	r0, r3
 800d508:	f7fe fad8 	bl	800babc <disk_status>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <validate+0x4e>
			res = FR_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d102      	bne.n	800d526 <validate+0x5a>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	e000      	b.n	800d528 <validate+0x5c>
 800d526:	2300      	movs	r3, #0
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	6013      	str	r3, [r2, #0]
	return res;
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
	...

0800d538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	4613      	mov	r3, r2
 800d544:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d54a:	f107 0310 	add.w	r3, r7, #16
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fcd5 	bl	800cefe <get_ldnumber>
 800d554:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	da01      	bge.n	800d560 <f_mount+0x28>
 800d55c:	230b      	movs	r3, #11
 800d55e:	e02b      	b.n	800d5b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d560:	4a17      	ldr	r2, [pc, #92]	; (800d5c0 <f_mount+0x88>)
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d568:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d570:	69b8      	ldr	r0, [r7, #24]
 800d572:	f7fe fd89 	bl	800c088 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	490d      	ldr	r1, [pc, #52]	; (800d5c0 <f_mount+0x88>)
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <f_mount+0x66>
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d001      	beq.n	800d5a2 <f_mount+0x6a>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e00a      	b.n	800d5b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d5a2:	f107 010c 	add.w	r1, r7, #12
 800d5a6:	f107 0308 	add.w	r3, r7, #8
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7ff fd41 	bl	800d034 <find_volume>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3720      	adds	r7, #32
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200016f8 	.word	0x200016f8

0800d5c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b098      	sub	sp, #96	; 0x60
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <f_open+0x18>
 800d5d8:	2309      	movs	r3, #9
 800d5da:	e1ad      	b.n	800d938 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d5e4:	79fa      	ldrb	r2, [r7, #7]
 800d5e6:	f107 0110 	add.w	r1, r7, #16
 800d5ea:	f107 0308 	add.w	r3, r7, #8
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff fd20 	bl	800d034 <find_volume>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f040 8191 	bne.w	800d926 <f_open+0x362>
		dj.obj.fs = fs;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	f107 0314 	add.w	r3, r7, #20
 800d60e:	4611      	mov	r1, r2
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fc03 	bl	800ce1c <follow_path>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d620:	2b00      	cmp	r3, #0
 800d622:	d11a      	bne.n	800d65a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d624:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	da03      	bge.n	800d636 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d62e:	2306      	movs	r3, #6
 800d630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d634:	e011      	b.n	800d65a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d636:	79fb      	ldrb	r3, [r7, #7]
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	bf14      	ite	ne
 800d640:	2301      	movne	r3, #1
 800d642:	2300      	moveq	r3, #0
 800d644:	b2db      	uxtb	r3, r3
 800d646:	461a      	mov	r2, r3
 800d648:	f107 0314 	add.w	r3, r7, #20
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fbd2 	bl	800bdf8 <chk_lock>
 800d654:	4603      	mov	r3, r0
 800d656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	f003 031c 	and.w	r3, r3, #28
 800d660:	2b00      	cmp	r3, #0
 800d662:	d07f      	beq.n	800d764 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d017      	beq.n	800d69c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d66c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d670:	2b04      	cmp	r3, #4
 800d672:	d10e      	bne.n	800d692 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d674:	f7fe fc1c 	bl	800beb0 <enq_lock>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d006      	beq.n	800d68c <f_open+0xc8>
 800d67e:	f107 0314 	add.w	r3, r7, #20
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff fb03 	bl	800cc8e <dir_register>
 800d688:	4603      	mov	r3, r0
 800d68a:	e000      	b.n	800d68e <f_open+0xca>
 800d68c:	2312      	movs	r3, #18
 800d68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	f043 0308 	orr.w	r3, r3, #8
 800d698:	71fb      	strb	r3, [r7, #7]
 800d69a:	e010      	b.n	800d6be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d69c:	7ebb      	ldrb	r3, [r7, #26]
 800d69e:	f003 0311 	and.w	r3, r3, #17
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <f_open+0xea>
					res = FR_DENIED;
 800d6a6:	2307      	movs	r3, #7
 800d6a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6ac:	e007      	b.n	800d6be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <f_open+0xfa>
 800d6b8:	2308      	movs	r3, #8
 800d6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d6be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d168      	bne.n	800d798 <f_open+0x1d4>
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	f003 0308 	and.w	r3, r3, #8
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d063      	beq.n	800d798 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d6d0:	f7fb f8e6 	bl	80088a0 <get_fattime>
 800d6d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d8:	330e      	adds	r3, #14
 800d6da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fe fae1 	bl	800bca4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e4:	3316      	adds	r3, #22
 800d6e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fadb 	bl	800bca4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f0:	330b      	adds	r3, #11
 800d6f2:	2220      	movs	r2, #32
 800d6f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fa32 	bl	800cb66 <ld_clust>
 800d702:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d708:	2200      	movs	r2, #0
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7ff fa4a 	bl	800cba4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d712:	331c      	adds	r3, #28
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fac4 	bl	800bca4 <st_dword>
					fs->wflag = 1;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2201      	movs	r2, #1
 800d720:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d724:	2b00      	cmp	r3, #0
 800d726:	d037      	beq.n	800d798 <f_open+0x1d4>
						dw = fs->winsect;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d72e:	f107 0314 	add.w	r3, r7, #20
 800d732:	2200      	movs	r2, #0
 800d734:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe ff5d 	bl	800c5f6 <remove_chain>
 800d73c:	4603      	mov	r3, r0
 800d73e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d746:	2b00      	cmp	r3, #0
 800d748:	d126      	bne.n	800d798 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe fd02 	bl	800c158 <move_window>
 800d754:	4603      	mov	r3, r0
 800d756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d75e:	3a01      	subs	r2, #1
 800d760:	60da      	str	r2, [r3, #12]
 800d762:	e019      	b.n	800d798 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d115      	bne.n	800d798 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d76c:	7ebb      	ldrb	r3, [r7, #26]
 800d76e:	f003 0310 	and.w	r3, r3, #16
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d776:	2304      	movs	r3, #4
 800d778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d77c:	e00c      	b.n	800d798 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d77e:	79fb      	ldrb	r3, [r7, #7]
 800d780:	f003 0302 	and.w	r3, r3, #2
 800d784:	2b00      	cmp	r3, #0
 800d786:	d007      	beq.n	800d798 <f_open+0x1d4>
 800d788:	7ebb      	ldrb	r3, [r7, #26]
 800d78a:	f003 0301 	and.w	r3, r3, #1
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <f_open+0x1d4>
						res = FR_DENIED;
 800d792:	2307      	movs	r3, #7
 800d794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d128      	bne.n	800d7f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	f003 0308 	and.w	r3, r3, #8
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d7c0:	79fb      	ldrb	r3, [r7, #7]
 800d7c2:	f023 0301 	bic.w	r3, r3, #1
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bf14      	ite	ne
 800d7ca:	2301      	movne	r3, #1
 800d7cc:	2300      	moveq	r3, #0
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	f107 0314 	add.w	r3, r7, #20
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fe fb8b 	bl	800bef4 <inc_lock>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <f_open+0x22e>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f040 8095 	bne.w	800d926 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d800:	4611      	mov	r1, r2
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff f9af 	bl	800cb66 <ld_clust>
 800d808:	4602      	mov	r2, r0
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d810:	331c      	adds	r3, #28
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe fa08 	bl	800bc28 <ld_dword>
 800d818:	4602      	mov	r2, r0
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	88da      	ldrh	r2, [r3, #6]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	79fa      	ldrb	r2, [r7, #7]
 800d836:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3330      	adds	r3, #48	; 0x30
 800d84e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d852:	2100      	movs	r1, #0
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fa72 	bl	800bd3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d85a:	79fb      	ldrb	r3, [r7, #7]
 800d85c:	f003 0320 	and.w	r3, r3, #32
 800d860:	2b00      	cmp	r3, #0
 800d862:	d060      	beq.n	800d926 <f_open+0x362>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d05c      	beq.n	800d926 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	895b      	ldrh	r3, [r3, #10]
 800d878:	025b      	lsls	r3, r3, #9
 800d87a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	657b      	str	r3, [r7, #84]	; 0x54
 800d888:	e016      	b.n	800d8b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fd1d 	bl	800c2ce <get_fat>
 800d894:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d802      	bhi.n	800d8a2 <f_open+0x2de>
 800d89c:	2302      	movs	r3, #2
 800d89e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d8a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a8:	d102      	bne.n	800d8b0 <f_open+0x2ec>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d8b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d103      	bne.n	800d8c8 <f_open+0x304>
 800d8c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d8e0      	bhi.n	800d88a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d127      	bne.n	800d926 <f_open+0x362>
 800d8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d022      	beq.n	800d926 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fe fcd3 	bl	800c290 <clust2sect>
 800d8ea:	6478      	str	r0, [r7, #68]	; 0x44
 800d8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d103      	bne.n	800d8fa <f_open+0x336>
						res = FR_INT_ERR;
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d8f8:	e015      	b.n	800d926 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8fc:	0a5a      	lsrs	r2, r3, #9
 800d8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d900:	441a      	add	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	7858      	ldrb	r0, [r3, #1]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6a1a      	ldr	r2, [r3, #32]
 800d914:	2301      	movs	r3, #1
 800d916:	f7fe f911 	bl	800bb3c <disk_read>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <f_open+0x362>
 800d920:	2301      	movs	r3, #1
 800d922:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d002      	beq.n	800d934 <f_open+0x370>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3760      	adds	r7, #96	; 0x60
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08e      	sub	sp, #56	; 0x38
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f107 0214 	add.w	r2, r7, #20
 800d95e:	4611      	mov	r1, r2
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fdb3 	bl	800d4cc <validate>
 800d966:	4603      	mov	r3, r0
 800d968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d96c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d970:	2b00      	cmp	r3, #0
 800d972:	d107      	bne.n	800d984 <f_read+0x44>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	7d5b      	ldrb	r3, [r3, #21]
 800d978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d97c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <f_read+0x4a>
 800d984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d988:	e115      	b.n	800dbb6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <f_read+0x5a>
 800d996:	2307      	movs	r3, #7
 800d998:	e10d      	b.n	800dbb6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	6a3b      	ldr	r3, [r7, #32]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	f240 80fe 	bls.w	800dbac <f_read+0x26c>
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d9b4:	e0fa      	b.n	800dbac <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f040 80c6 	bne.w	800db50 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	0a5b      	lsrs	r3, r3, #9
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	8952      	ldrh	r2, [r2, #10]
 800d9ce:	3a01      	subs	r2, #1
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d12f      	bne.n	800da3a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d9e8:	e013      	b.n	800da12 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d007      	beq.n	800da02 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7fe fef9 	bl	800c7f0 <clmt_clust>
 800d9fe:	6338      	str	r0, [r7, #48]	; 0x30
 800da00:	e007      	b.n	800da12 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe fc5f 	bl	800c2ce <get_fat>
 800da10:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	2b01      	cmp	r3, #1
 800da16:	d804      	bhi.n	800da22 <f_read+0xe2>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2202      	movs	r2, #2
 800da1c:	755a      	strb	r2, [r3, #21]
 800da1e:	2302      	movs	r3, #2
 800da20:	e0c9      	b.n	800dbb6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d104      	bne.n	800da34 <f_read+0xf4>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2201      	movs	r2, #1
 800da2e:	755a      	strb	r2, [r3, #21]
 800da30:	2301      	movs	r3, #1
 800da32:	e0c0      	b.n	800dbb6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da38:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	69db      	ldr	r3, [r3, #28]
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7fe fc24 	bl	800c290 <clust2sect>
 800da48:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d104      	bne.n	800da5a <f_read+0x11a>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2202      	movs	r2, #2
 800da54:	755a      	strb	r2, [r3, #21]
 800da56:	2302      	movs	r3, #2
 800da58:	e0ad      	b.n	800dbb6 <f_read+0x276>
			sect += csect;
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	4413      	add	r3, r2
 800da60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	0a5b      	lsrs	r3, r3, #9
 800da66:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d039      	beq.n	800dae2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da6e:	69fa      	ldr	r2, [r7, #28]
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	4413      	add	r3, r2
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	8952      	ldrh	r2, [r2, #10]
 800da78:	4293      	cmp	r3, r2
 800da7a:	d905      	bls.n	800da88 <f_read+0x148>
					cc = fs->csize - csect;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	461a      	mov	r2, r3
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	7858      	ldrb	r0, [r3, #1]
 800da8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8e:	69ba      	ldr	r2, [r7, #24]
 800da90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da92:	f7fe f853 	bl	800bb3c <disk_read>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d004      	beq.n	800daa6 <f_read+0x166>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	755a      	strb	r2, [r3, #21]
 800daa2:	2301      	movs	r3, #1
 800daa4:	e087      	b.n	800dbb6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	7d1b      	ldrb	r3, [r3, #20]
 800daaa:	b25b      	sxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	da14      	bge.n	800dada <f_read+0x19a>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6a1a      	ldr	r2, [r3, #32]
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daba:	429a      	cmp	r2, r3
 800dabc:	d90d      	bls.n	800dada <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6a1a      	ldr	r2, [r3, #32]
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	025b      	lsls	r3, r3, #9
 800dac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daca:	18d0      	adds	r0, r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3330      	adds	r3, #48	; 0x30
 800dad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dad4:	4619      	mov	r1, r3
 800dad6:	f7fe f911 	bl	800bcfc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	025b      	lsls	r3, r3, #9
 800dade:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800dae0:	e050      	b.n	800db84 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d02e      	beq.n	800db4a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	7d1b      	ldrb	r3, [r3, #20]
 800daf0:	b25b      	sxtb	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	da18      	bge.n	800db28 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	7858      	ldrb	r0, [r3, #1]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6a1a      	ldr	r2, [r3, #32]
 800db04:	2301      	movs	r3, #1
 800db06:	f7fe f839 	bl	800bb7c <disk_write>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <f_read+0x1da>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	2201      	movs	r2, #1
 800db14:	755a      	strb	r2, [r3, #21]
 800db16:	2301      	movs	r3, #1
 800db18:	e04d      	b.n	800dbb6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	7d1b      	ldrb	r3, [r3, #20]
 800db1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db22:	b2da      	uxtb	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	7858      	ldrb	r0, [r3, #1]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db32:	2301      	movs	r3, #1
 800db34:	69ba      	ldr	r2, [r7, #24]
 800db36:	f7fe f801 	bl	800bb3c <disk_read>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d004      	beq.n	800db4a <f_read+0x20a>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2201      	movs	r2, #1
 800db44:	755a      	strb	r2, [r3, #21]
 800db46:	2301      	movs	r3, #1
 800db48:	e035      	b.n	800dbb6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800db5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800db5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d901      	bls.n	800db6a <f_read+0x22a>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	699b      	ldr	r3, [r3, #24]
 800db74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db78:	4413      	add	r3, r2
 800db7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db7c:	4619      	mov	r1, r3
 800db7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db80:	f7fe f8bc 	bl	800bcfc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	4413      	add	r3, r2
 800db8a:	627b      	str	r3, [r7, #36]	; 0x24
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	699a      	ldr	r2, [r3, #24]
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	441a      	add	r2, r3
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	619a      	str	r2, [r3, #24]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	441a      	add	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	601a      	str	r2, [r3, #0]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f47f af01 	bne.w	800d9b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3738      	adds	r7, #56	; 0x38
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b086      	sub	sp, #24
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f107 0208 	add.w	r2, r7, #8
 800dbcc:	4611      	mov	r1, r2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fc7c 	bl	800d4cc <validate>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d168      	bne.n	800dcb0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	7d1b      	ldrb	r3, [r3, #20]
 800dbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d062      	beq.n	800dcb0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	7d1b      	ldrb	r3, [r3, #20]
 800dbee:	b25b      	sxtb	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	da15      	bge.n	800dc20 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	7858      	ldrb	r0, [r3, #1]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a1a      	ldr	r2, [r3, #32]
 800dc02:	2301      	movs	r3, #1
 800dc04:	f7fd ffba 	bl	800bb7c <disk_write>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <f_sync+0x54>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e04f      	b.n	800dcb2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7d1b      	ldrb	r3, [r3, #20]
 800dc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc20:	f7fa fe3e 	bl	80088a0 <get_fattime>
 800dc24:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	f7fe fa92 	bl	800c158 <move_window>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d138      	bne.n	800dcb0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc42:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	330b      	adds	r3, #11
 800dc48:	781a      	ldrb	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	330b      	adds	r3, #11
 800dc4e:	f042 0220 	orr.w	r2, r2, #32
 800dc52:	b2d2      	uxtb	r2, r2
 800dc54:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	68f9      	ldr	r1, [r7, #12]
 800dc62:	f7fe ff9f 	bl	800cba4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f103 021c 	add.w	r2, r3, #28
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f7fe f816 	bl	800bca4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3316      	adds	r3, #22
 800dc7c:	6939      	ldr	r1, [r7, #16]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe f810 	bl	800bca4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	3312      	adds	r3, #18
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd ffef 	bl	800bc6e <st_word>
					fs->wflag = 1;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2201      	movs	r2, #1
 800dc94:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fe fa8b 	bl	800c1b4 <sync_fs>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	7d1b      	ldrb	r3, [r3, #20]
 800dca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dcb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b084      	sub	sp, #16
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff ff7b 	bl	800dbbe <f_sync>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d118      	bne.n	800dd04 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f107 0208 	add.w	r2, r7, #8
 800dcd8:	4611      	mov	r1, r2
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff fbf6 	bl	800d4cc <validate>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d10c      	bne.n	800dd04 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe f98e 	bl	800c010 <dec_lock>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d102      	bne.n	800dd04 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b090      	sub	sp, #64	; 0x40
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f107 0208 	add.w	r2, r7, #8
 800dd1e:	4611      	mov	r1, r2
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff fbd3 	bl	800d4cc <validate>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dd2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d103      	bne.n	800dd3c <f_lseek+0x2e>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7d5b      	ldrb	r3, [r3, #21]
 800dd38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dd3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d002      	beq.n	800dd4a <f_lseek+0x3c>
 800dd44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd48:	e1e6      	b.n	800e118 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f000 80d1 	beq.w	800def6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd5a:	d15a      	bne.n	800de12 <f_lseek+0x104>
			tbl = fp->cltbl;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd64:	1d1a      	adds	r2, r3, #4
 800dd66:	627a      	str	r2, [r7, #36]	; 0x24
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d03a      	beq.n	800ddf2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	613b      	str	r3, [r7, #16]
 800dd80:	2300      	movs	r3, #0
 800dd82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	3302      	adds	r3, #2
 800dd88:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	60fb      	str	r3, [r7, #12]
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	3301      	adds	r3, #1
 800dd92:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fa98 	bl	800c2ce <get_fat>
 800dd9e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d804      	bhi.n	800ddb0 <f_lseek+0xa2>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2202      	movs	r2, #2
 800ddaa:	755a      	strb	r2, [r3, #21]
 800ddac:	2302      	movs	r3, #2
 800ddae:	e1b3      	b.n	800e118 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb6:	d104      	bne.n	800ddc2 <f_lseek+0xb4>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	755a      	strb	r2, [r3, #21]
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e1aa      	b.n	800e118 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d0de      	beq.n	800dd8a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ddcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d809      	bhi.n	800dde8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	627a      	str	r2, [r7, #36]	; 0x24
 800ddda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	1d1a      	adds	r2, r3, #4
 800dde2:	627a      	str	r2, [r7, #36]	; 0x24
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	695b      	ldr	r3, [r3, #20]
 800ddec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d3c4      	bcc.n	800dd7c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddf8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ddfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d803      	bhi.n	800de0a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de04:	2200      	movs	r2, #0
 800de06:	601a      	str	r2, [r3, #0]
 800de08:	e184      	b.n	800e114 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800de0a:	2311      	movs	r3, #17
 800de0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800de10:	e180      	b.n	800e114 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d902      	bls.n	800de22 <f_lseek+0x114>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 8172 	beq.w	800e114 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	3b01      	subs	r3, #1
 800de34:	4619      	mov	r1, r3
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7fe fcda 	bl	800c7f0 <clmt_clust>
 800de3c:	4602      	mov	r2, r0
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	69db      	ldr	r3, [r3, #28]
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f7fe fa20 	bl	800c290 <clust2sect>
 800de50:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d104      	bne.n	800de62 <f_lseek+0x154>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2202      	movs	r2, #2
 800de5c:	755a      	strb	r2, [r3, #21]
 800de5e:	2302      	movs	r3, #2
 800de60:	e15a      	b.n	800e118 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	3b01      	subs	r3, #1
 800de66:	0a5b      	lsrs	r3, r3, #9
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	8952      	ldrh	r2, [r2, #10]
 800de6c:	3a01      	subs	r2, #1
 800de6e:	4013      	ands	r3, r2
 800de70:	69ba      	ldr	r2, [r7, #24]
 800de72:	4413      	add	r3, r2
 800de74:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	699b      	ldr	r3, [r3, #24]
 800de7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 8148 	beq.w	800e114 <f_lseek+0x406>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a1b      	ldr	r3, [r3, #32]
 800de88:	69ba      	ldr	r2, [r7, #24]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	f000 8142 	beq.w	800e114 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7d1b      	ldrb	r3, [r3, #20]
 800de94:	b25b      	sxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	da18      	bge.n	800decc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	7858      	ldrb	r0, [r3, #1]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a1a      	ldr	r2, [r3, #32]
 800dea8:	2301      	movs	r3, #1
 800deaa:	f7fd fe67 	bl	800bb7c <disk_write>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <f_lseek+0x1b0>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	755a      	strb	r2, [r3, #21]
 800deba:	2301      	movs	r3, #1
 800debc:	e12c      	b.n	800e118 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	7858      	ldrb	r0, [r3, #1]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ded6:	2301      	movs	r3, #1
 800ded8:	69ba      	ldr	r2, [r7, #24]
 800deda:	f7fd fe2f 	bl	800bb3c <disk_read>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <f_lseek+0x1e0>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	755a      	strb	r2, [r3, #21]
 800deea:	2301      	movs	r3, #1
 800deec:	e114      	b.n	800e118 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	69ba      	ldr	r2, [r7, #24]
 800def2:	621a      	str	r2, [r3, #32]
 800def4:	e10e      	b.n	800e114 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d908      	bls.n	800df12 <f_lseek+0x204>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	7d1b      	ldrb	r3, [r3, #20]
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d102      	bne.n	800df12 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	637b      	str	r3, [r7, #52]	; 0x34
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df20:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 80a7 	beq.w	800e078 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	895b      	ldrh	r3, [r3, #10]
 800df2e:	025b      	lsls	r3, r3, #9
 800df30:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d01b      	beq.n	800df70 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	1e5a      	subs	r2, r3, #1
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	fbb2 f2f3 	udiv	r2, r2, r3
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	1e59      	subs	r1, r3, #1
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d30f      	bcc.n	800df70 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	1e5a      	subs	r2, r3, #1
 800df54:	69fb      	ldr	r3, [r7, #28]
 800df56:	425b      	negs	r3, r3
 800df58:	401a      	ands	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	699b      	ldr	r3, [r3, #24]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	69db      	ldr	r3, [r3, #28]
 800df6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800df6e:	e022      	b.n	800dfb6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800df76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d119      	bne.n	800dfb0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2100      	movs	r1, #0
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fb9d 	bl	800c6c0 <create_chain>
 800df86:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d104      	bne.n	800df98 <f_lseek+0x28a>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2202      	movs	r2, #2
 800df92:	755a      	strb	r2, [r3, #21]
 800df94:	2302      	movs	r3, #2
 800df96:	e0bf      	b.n	800e118 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df9e:	d104      	bne.n	800dfaa <f_lseek+0x29c>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	755a      	strb	r2, [r3, #21]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e0b6      	b.n	800e118 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfae:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfb4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d05d      	beq.n	800e078 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dfbc:	e03a      	b.n	800e034 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	603b      	str	r3, [r7, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699a      	ldr	r2, [r3, #24]
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	441a      	add	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	7d1b      	ldrb	r3, [r3, #20]
 800dfd6:	f003 0302 	and.w	r3, r3, #2
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00b      	beq.n	800dff6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fe fb6c 	bl	800c6c0 <create_chain>
 800dfe8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d108      	bne.n	800e002 <f_lseek+0x2f4>
							ofs = 0; break;
 800dff0:	2300      	movs	r3, #0
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	e022      	b.n	800e03c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fe f967 	bl	800c2ce <get_fat>
 800e000:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e008:	d104      	bne.n	800e014 <f_lseek+0x306>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	755a      	strb	r2, [r3, #21]
 800e010:	2301      	movs	r3, #1
 800e012:	e081      	b.n	800e118 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	2b01      	cmp	r3, #1
 800e018:	d904      	bls.n	800e024 <f_lseek+0x316>
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e020:	429a      	cmp	r2, r3
 800e022:	d304      	bcc.n	800e02e <f_lseek+0x320>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	755a      	strb	r2, [r3, #21]
 800e02a:	2302      	movs	r3, #2
 800e02c:	e074      	b.n	800e118 <f_lseek+0x40a>
					fp->clust = clst;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e032:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d8c0      	bhi.n	800dfbe <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	699a      	ldr	r2, [r3, #24]
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	441a      	add	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d012      	beq.n	800e078 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e056:	4618      	mov	r0, r3
 800e058:	f7fe f91a 	bl	800c290 <clust2sect>
 800e05c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <f_lseek+0x360>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2202      	movs	r2, #2
 800e068:	755a      	strb	r2, [r3, #21]
 800e06a:	2302      	movs	r3, #2
 800e06c:	e054      	b.n	800e118 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	0a5b      	lsrs	r3, r3, #9
 800e072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e074:	4413      	add	r3, r2
 800e076:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	699a      	ldr	r2, [r3, #24]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	429a      	cmp	r2, r3
 800e082:	d90a      	bls.n	800e09a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	699a      	ldr	r2, [r3, #24]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
 800e090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e094:	b2da      	uxtb	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d036      	beq.n	800e114 <f_lseek+0x406>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d031      	beq.n	800e114 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7d1b      	ldrb	r3, [r3, #20]
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da18      	bge.n	800e0ec <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	7858      	ldrb	r0, [r3, #1]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a1a      	ldr	r2, [r3, #32]
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f7fd fd57 	bl	800bb7c <disk_write>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <f_lseek+0x3d0>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	755a      	strb	r2, [r3, #21]
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e01c      	b.n	800e118 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	7d1b      	ldrb	r3, [r3, #20]
 800e0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	7858      	ldrb	r0, [r3, #1]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0fa:	f7fd fd1f 	bl	800bb3c <disk_read>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d004      	beq.n	800e10e <f_lseek+0x400>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2201      	movs	r2, #1
 800e108:	755a      	strb	r2, [r3, #21]
 800e10a:	2301      	movs	r3, #1
 800e10c:	e004      	b.n	800e118 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e112:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e114:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3740      	adds	r7, #64	; 0x40
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e120:	b480      	push	{r7}
 800e122:	b087      	sub	sp, #28
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	4613      	mov	r3, r2
 800e12c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e12e:	2301      	movs	r3, #1
 800e130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e136:	4b1f      	ldr	r3, [pc, #124]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e138:	7a5b      	ldrb	r3, [r3, #9]
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d131      	bne.n	800e1a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e140:	4b1c      	ldr	r3, [pc, #112]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e142:	7a5b      	ldrb	r3, [r3, #9]
 800e144:	b2db      	uxtb	r3, r3
 800e146:	461a      	mov	r2, r3
 800e148:	4b1a      	ldr	r3, [pc, #104]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e14a:	2100      	movs	r1, #0
 800e14c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e14e:	4b19      	ldr	r3, [pc, #100]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e150:	7a5b      	ldrb	r3, [r3, #9]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	4a17      	ldr	r2, [pc, #92]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	4413      	add	r3, r2
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e15e:	4b15      	ldr	r3, [pc, #84]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e160:	7a5b      	ldrb	r3, [r3, #9]
 800e162:	b2db      	uxtb	r3, r3
 800e164:	461a      	mov	r2, r3
 800e166:	4b13      	ldr	r3, [pc, #76]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e168:	4413      	add	r3, r2
 800e16a:	79fa      	ldrb	r2, [r7, #7]
 800e16c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e16e:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e170:	7a5b      	ldrb	r3, [r3, #9]
 800e172:	b2db      	uxtb	r3, r3
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	b2d1      	uxtb	r1, r2
 800e178:	4a0e      	ldr	r2, [pc, #56]	; (800e1b4 <FATFS_LinkDriverEx+0x94>)
 800e17a:	7251      	strb	r1, [r2, #9]
 800e17c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e17e:	7dbb      	ldrb	r3, [r7, #22]
 800e180:	3330      	adds	r3, #48	; 0x30
 800e182:	b2da      	uxtb	r2, r3
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	3301      	adds	r3, #1
 800e18c:	223a      	movs	r2, #58	; 0x3a
 800e18e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	3302      	adds	r3, #2
 800e194:	222f      	movs	r2, #47	; 0x2f
 800e196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	3303      	adds	r3, #3
 800e19c:	2200      	movs	r2, #0
 800e19e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	371c      	adds	r7, #28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20001720 	.word	0x20001720

0800e1b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7ff ffaa 	bl	800e120 <FATFS_LinkDriverEx>
 800e1cc:	4603      	mov	r3, r0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e1dc:	2201      	movs	r2, #1
 800e1de:	490e      	ldr	r1, [pc, #56]	; (800e218 <MX_USB_HOST_Init+0x40>)
 800e1e0:	480e      	ldr	r0, [pc, #56]	; (800e21c <MX_USB_HOST_Init+0x44>)
 800e1e2:	f7fc f819 	bl	800a218 <USBH_Init>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e1ec:	f7f3 fba0 	bl	8001930 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e1f0:	490b      	ldr	r1, [pc, #44]	; (800e220 <MX_USB_HOST_Init+0x48>)
 800e1f2:	480a      	ldr	r0, [pc, #40]	; (800e21c <MX_USB_HOST_Init+0x44>)
 800e1f4:	f7fc f89e 	bl	800a334 <USBH_RegisterClass>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e1fe:	f7f3 fb97 	bl	8001930 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e202:	4806      	ldr	r0, [pc, #24]	; (800e21c <MX_USB_HOST_Init+0x44>)
 800e204:	f7fc f922 	bl	800a44c <USBH_Start>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e20e:	f7f3 fb8f 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e212:	bf00      	nop
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	0800e239 	.word	0x0800e239
 800e21c:	2000172c 	.word	0x2000172c
 800e220:	20000020 	.word	0x20000020

0800e224 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e228:	4802      	ldr	r0, [pc, #8]	; (800e234 <MX_USB_HOST_Process+0x10>)
 800e22a:	f7fc f91f 	bl	800a46c <USBH_Process>
}
 800e22e:	bf00      	nop
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	2000172c 	.word	0x2000172c

0800e238 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	460b      	mov	r3, r1
 800e242:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e244:	78fb      	ldrb	r3, [r7, #3]
 800e246:	3b01      	subs	r3, #1
 800e248:	2b04      	cmp	r3, #4
 800e24a:	d819      	bhi.n	800e280 <USBH_UserProcess+0x48>
 800e24c:	a201      	add	r2, pc, #4	; (adr r2, 800e254 <USBH_UserProcess+0x1c>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e281 	.word	0x0800e281
 800e258:	0800e271 	.word	0x0800e271
 800e25c:	0800e281 	.word	0x0800e281
 800e260:	0800e279 	.word	0x0800e279
 800e264:	0800e269 	.word	0x0800e269
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e268:	4b09      	ldr	r3, [pc, #36]	; (800e290 <USBH_UserProcess+0x58>)
 800e26a:	2203      	movs	r2, #3
 800e26c:	701a      	strb	r2, [r3, #0]
  break;
 800e26e:	e008      	b.n	800e282 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e270:	4b07      	ldr	r3, [pc, #28]	; (800e290 <USBH_UserProcess+0x58>)
 800e272:	2202      	movs	r2, #2
 800e274:	701a      	strb	r2, [r3, #0]
  break;
 800e276:	e004      	b.n	800e282 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e278:	4b05      	ldr	r3, [pc, #20]	; (800e290 <USBH_UserProcess+0x58>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	701a      	strb	r2, [r3, #0]
  break;
 800e27e:	e000      	b.n	800e282 <USBH_UserProcess+0x4a>

  default:
  break;
 800e280:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	20001b04 	.word	0x20001b04

0800e294 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08a      	sub	sp, #40	; 0x28
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e29c:	f107 0314 	add.w	r3, r7, #20
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	601a      	str	r2, [r3, #0]
 800e2a4:	605a      	str	r2, [r3, #4]
 800e2a6:	609a      	str	r2, [r3, #8]
 800e2a8:	60da      	str	r2, [r3, #12]
 800e2aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2b4:	d147      	bne.n	800e346 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	4b25      	ldr	r3, [pc, #148]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	4a24      	ldr	r2, [pc, #144]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e2c0:	f043 0301 	orr.w	r3, r3, #1
 800e2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e2c6:	4b22      	ldr	r3, [pc, #136]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ca:	f003 0301 	and.w	r3, r3, #1
 800e2ce:	613b      	str	r3, [r7, #16]
 800e2d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2e0:	f107 0314 	add.w	r3, r7, #20
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	481b      	ldr	r0, [pc, #108]	; (800e354 <HAL_HCD_MspInit+0xc0>)
 800e2e8:	f7f4 fb80 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e2ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e2f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2fe:	230a      	movs	r3, #10
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e302:	f107 0314 	add.w	r3, r7, #20
 800e306:	4619      	mov	r1, r3
 800e308:	4812      	ldr	r0, [pc, #72]	; (800e354 <HAL_HCD_MspInit+0xc0>)
 800e30a:	f7f4 fb6f 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e30e:	4b10      	ldr	r3, [pc, #64]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	4a0f      	ldr	r2, [pc, #60]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e318:	6353      	str	r3, [r2, #52]	; 0x34
 800e31a:	2300      	movs	r3, #0
 800e31c:	60fb      	str	r3, [r7, #12]
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e322:	4a0b      	ldr	r2, [pc, #44]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e328:	6453      	str	r3, [r2, #68]	; 0x44
 800e32a:	4b09      	ldr	r3, [pc, #36]	; (800e350 <HAL_HCD_MspInit+0xbc>)
 800e32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e336:	2200      	movs	r2, #0
 800e338:	2100      	movs	r1, #0
 800e33a:	2043      	movs	r0, #67	; 0x43
 800e33c:	f7f3 fecf 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e340:	2043      	movs	r0, #67	; 0x43
 800e342:	f7f3 fee8 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e346:	bf00      	nop
 800e348:	3728      	adds	r7, #40	; 0x28
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	40023800 	.word	0x40023800
 800e354:	40020000 	.word	0x40020000

0800e358 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc fc5f 	bl	800ac2a <USBH_LL_IncTimer>
}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e382:	4618      	mov	r0, r3
 800e384:	f7fc fc97 	bl	800acb6 <USBH_LL_Connect>
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc fca0 	bl	800ace4 <USBH_LL_Disconnect>
}
 800e3a4:	bf00      	nop
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc fc51 	bl	800ac7e <USBH_LL_PortEnabled>
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fc fc51 	bl	800ac9a <USBH_LL_PortDisabled>
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d12a      	bne.n	800e468 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e412:	4a18      	ldr	r2, [pc, #96]	; (800e474 <USBH_LL_Init+0x74>)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a15      	ldr	r2, [pc, #84]	; (800e474 <USBH_LL_Init+0x74>)
 800e41e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e422:	4b14      	ldr	r3, [pc, #80]	; (800e474 <USBH_LL_Init+0x74>)
 800e424:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e428:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e42a:	4b12      	ldr	r3, [pc, #72]	; (800e474 <USBH_LL_Init+0x74>)
 800e42c:	2208      	movs	r2, #8
 800e42e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e430:	4b10      	ldr	r3, [pc, #64]	; (800e474 <USBH_LL_Init+0x74>)
 800e432:	2201      	movs	r2, #1
 800e434:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e436:	4b0f      	ldr	r3, [pc, #60]	; (800e474 <USBH_LL_Init+0x74>)
 800e438:	2200      	movs	r2, #0
 800e43a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e43c:	4b0d      	ldr	r3, [pc, #52]	; (800e474 <USBH_LL_Init+0x74>)
 800e43e:	2202      	movs	r2, #2
 800e440:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e442:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <USBH_LL_Init+0x74>)
 800e444:	2200      	movs	r2, #0
 800e446:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e448:	480a      	ldr	r0, [pc, #40]	; (800e474 <USBH_LL_Init+0x74>)
 800e44a:	f7f4 fccf 	bl	8002dec <HAL_HCD_Init>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e454:	f7f3 fa6c 	bl	8001930 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e458:	4806      	ldr	r0, [pc, #24]	; (800e474 <USBH_LL_Init+0x74>)
 800e45a:	f7f5 f8b2 	bl	80035c2 <HAL_HCD_GetCurrentFrame>
 800e45e:	4603      	mov	r3, r0
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fc fbd2 	bl	800ac0c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	20001b08 	.word	0x20001b08

0800e478 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f5 f821 	bl	80034d6 <HAL_HCD_Start>
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e498:	7bfb      	ldrb	r3, [r7, #15]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 f982 	bl	800e7a4 <USBH_Get_USB_Status>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}

0800e4ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b084      	sub	sp, #16
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7f5 f829 	bl	800351c <HAL_HCD_Stop>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 f967 	bl	800e7a4 <USBH_Get_USB_Status>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3710      	adds	r7, #16
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7f5 f871 	bl	80035de <HAL_HCD_GetCurrentSpeed>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d00c      	beq.n	800e51c <USBH_LL_GetSpeed+0x38>
 800e502:	2b02      	cmp	r3, #2
 800e504:	d80d      	bhi.n	800e522 <USBH_LL_GetSpeed+0x3e>
 800e506:	2b00      	cmp	r3, #0
 800e508:	d002      	beq.n	800e510 <USBH_LL_GetSpeed+0x2c>
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d003      	beq.n	800e516 <USBH_LL_GetSpeed+0x32>
 800e50e:	e008      	b.n	800e522 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e510:	2300      	movs	r3, #0
 800e512:	73fb      	strb	r3, [r7, #15]
    break;
 800e514:	e008      	b.n	800e528 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e516:	2301      	movs	r3, #1
 800e518:	73fb      	strb	r3, [r7, #15]
    break;
 800e51a:	e005      	b.n	800e528 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e51c:	2302      	movs	r3, #2
 800e51e:	73fb      	strb	r3, [r7, #15]
    break;
 800e520:	e002      	b.n	800e528 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e522:	2301      	movs	r3, #1
 800e524:	73fb      	strb	r3, [r7, #15]
    break;
 800e526:	bf00      	nop
  }
  return  speed;
 800e528:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e53e:	2300      	movs	r3, #0
 800e540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e548:	4618      	mov	r0, r3
 800e54a:	f7f5 f804 	bl	8003556 <HAL_HCD_ResetPort>
 800e54e:	4603      	mov	r3, r0
 800e550:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	4618      	mov	r0, r3
 800e556:	f000 f925 	bl	800e7a4 <USBH_Get_USB_Status>
 800e55a:	4603      	mov	r3, r0
 800e55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e57a:	78fa      	ldrb	r2, [r7, #3]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7f5 f80b 	bl	800359a <HAL_HCD_HC_GetXferCount>
 800e584:	4603      	mov	r3, r0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e58e:	b590      	push	{r4, r7, lr}
 800e590:	b089      	sub	sp, #36	; 0x24
 800e592:	af04      	add	r7, sp, #16
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	4608      	mov	r0, r1
 800e598:	4611      	mov	r1, r2
 800e59a:	461a      	mov	r2, r3
 800e59c:	4603      	mov	r3, r0
 800e59e:	70fb      	strb	r3, [r7, #3]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	70bb      	strb	r3, [r7, #2]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e5b6:	787c      	ldrb	r4, [r7, #1]
 800e5b8:	78ba      	ldrb	r2, [r7, #2]
 800e5ba:	78f9      	ldrb	r1, [r7, #3]
 800e5bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e5be:	9302      	str	r3, [sp, #8]
 800e5c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e5c4:	9301      	str	r3, [sp, #4]
 800e5c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	4623      	mov	r3, r4
 800e5ce:	f7f4 fc6f 	bl	8002eb0 <HAL_HCD_HC_Init>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 f8e3 	bl	800e7a4 <USBH_Get_USB_Status>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd90      	pop	{r4, r7, pc}

0800e5ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e606:	78fa      	ldrb	r2, [r7, #3]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7f4 fcdf 	bl	8002fce <HAL_HCD_HC_Halt>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	4618      	mov	r0, r3
 800e618:	f000 f8c4 	bl	800e7a4 <USBH_Get_USB_Status>
 800e61c:	4603      	mov	r3, r0
 800e61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e620:	7bbb      	ldrb	r3, [r7, #14]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e62a:	b590      	push	{r4, r7, lr}
 800e62c:	b089      	sub	sp, #36	; 0x24
 800e62e:	af04      	add	r7, sp, #16
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	4608      	mov	r0, r1
 800e634:	4611      	mov	r1, r2
 800e636:	461a      	mov	r2, r3
 800e638:	4603      	mov	r3, r0
 800e63a:	70fb      	strb	r3, [r7, #3]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70bb      	strb	r3, [r7, #2]
 800e640:	4613      	mov	r3, r2
 800e642:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e644:	2300      	movs	r3, #0
 800e646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e648:	2300      	movs	r3, #0
 800e64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e652:	787c      	ldrb	r4, [r7, #1]
 800e654:	78ba      	ldrb	r2, [r7, #2]
 800e656:	78f9      	ldrb	r1, [r7, #3]
 800e658:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e660:	9302      	str	r3, [sp, #8]
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4623      	mov	r3, r4
 800e66e:	f7f4 fcd1 	bl	8003014 <HAL_HCD_HC_SubmitRequest>
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e676:	7bfb      	ldrb	r3, [r7, #15]
 800e678:	4618      	mov	r0, r3
 800e67a:	f000 f893 	bl	800e7a4 <USBH_Get_USB_Status>
 800e67e:	4603      	mov	r3, r0
 800e680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e682:	7bbb      	ldrb	r3, [r7, #14]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd90      	pop	{r4, r7, pc}

0800e68c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e69e:	78fa      	ldrb	r2, [r7, #3]
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7f4 ff65 	bl	8003572 <HAL_HCD_HC_GetURBState>
 800e6a8:	4603      	mov	r3, r0
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3708      	adds	r7, #8
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b082      	sub	sp, #8
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e6be:	20c8      	movs	r0, #200	; 0xc8
 800e6c0:	f7f3 fc0e 	bl	8001ee0 <HAL_Delay>
  return USBH_OK;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e6ce:	b480      	push	{r7}
 800e6d0:	b085      	sub	sp, #20
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	70fb      	strb	r3, [r7, #3]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6e4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e6e6:	78fb      	ldrb	r3, [r7, #3]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	212c      	movs	r1, #44	; 0x2c
 800e6ec:	fb01 f303 	mul.w	r3, r1, r3
 800e6f0:	4413      	add	r3, r2
 800e6f2:	333b      	adds	r3, #59	; 0x3b
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d009      	beq.n	800e70e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e6fa:	78fb      	ldrb	r3, [r7, #3]
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	212c      	movs	r1, #44	; 0x2c
 800e700:	fb01 f303 	mul.w	r3, r1, r3
 800e704:	4413      	add	r3, r2
 800e706:	3354      	adds	r3, #84	; 0x54
 800e708:	78ba      	ldrb	r2, [r7, #2]
 800e70a:	701a      	strb	r2, [r3, #0]
 800e70c:	e008      	b.n	800e720 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e70e:	78fb      	ldrb	r3, [r7, #3]
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	212c      	movs	r1, #44	; 0x2c
 800e714:	fb01 f303 	mul.w	r3, r1, r3
 800e718:	4413      	add	r3, r2
 800e71a:	3355      	adds	r3, #85	; 0x55
 800e71c:	78ba      	ldrb	r2, [r7, #2]
 800e71e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	3714      	adds	r7, #20
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e72e:	b480      	push	{r7}
 800e730:	b085      	sub	sp, #20
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	460b      	mov	r3, r1
 800e738:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e744:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e746:	78fb      	ldrb	r3, [r7, #3]
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	212c      	movs	r1, #44	; 0x2c
 800e74c:	fb01 f303 	mul.w	r3, r1, r3
 800e750:	4413      	add	r3, r2
 800e752:	333b      	adds	r3, #59	; 0x3b
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d009      	beq.n	800e76e <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	212c      	movs	r1, #44	; 0x2c
 800e760:	fb01 f303 	mul.w	r3, r1, r3
 800e764:	4413      	add	r3, r2
 800e766:	3354      	adds	r3, #84	; 0x54
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	73fb      	strb	r3, [r7, #15]
 800e76c:	e008      	b.n	800e780 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e76e:	78fb      	ldrb	r3, [r7, #3]
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	212c      	movs	r1, #44	; 0x2c
 800e774:	fb01 f303 	mul.w	r3, r1, r3
 800e778:	4413      	add	r3, r2
 800e77a:	3355      	adds	r3, #85	; 0x55
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e780:	7bfb      	ldrb	r3, [r7, #15]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f7f3 fba2 	bl	8001ee0 <HAL_Delay>
}
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e7b2:	79fb      	ldrb	r3, [r7, #7]
 800e7b4:	2b03      	cmp	r3, #3
 800e7b6:	d817      	bhi.n	800e7e8 <USBH_Get_USB_Status+0x44>
 800e7b8:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <USBH_Get_USB_Status+0x1c>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e7d1 	.word	0x0800e7d1
 800e7c4:	0800e7d7 	.word	0x0800e7d7
 800e7c8:	0800e7dd 	.word	0x0800e7dd
 800e7cc:	0800e7e3 	.word	0x0800e7e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7d4:	e00b      	b.n	800e7ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7da:	e008      	b.n	800e7ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	73fb      	strb	r3, [r7, #15]
    break;
 800e7e0:	e005      	b.n	800e7ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e7e2:	2302      	movs	r3, #2
 800e7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e7e6:	e002      	b.n	800e7ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ec:	bf00      	nop
  }
  return usb_status;
 800e7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <__errno>:
 800e7fc:	4b01      	ldr	r3, [pc, #4]	; (800e804 <__errno+0x8>)
 800e7fe:	6818      	ldr	r0, [r3, #0]
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	20000040 	.word	0x20000040

0800e808 <__libc_init_array>:
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	4d0d      	ldr	r5, [pc, #52]	; (800e840 <__libc_init_array+0x38>)
 800e80c:	4c0d      	ldr	r4, [pc, #52]	; (800e844 <__libc_init_array+0x3c>)
 800e80e:	1b64      	subs	r4, r4, r5
 800e810:	10a4      	asrs	r4, r4, #2
 800e812:	2600      	movs	r6, #0
 800e814:	42a6      	cmp	r6, r4
 800e816:	d109      	bne.n	800e82c <__libc_init_array+0x24>
 800e818:	4d0b      	ldr	r5, [pc, #44]	; (800e848 <__libc_init_array+0x40>)
 800e81a:	4c0c      	ldr	r4, [pc, #48]	; (800e84c <__libc_init_array+0x44>)
 800e81c:	f000 fc9e 	bl	800f15c <_init>
 800e820:	1b64      	subs	r4, r4, r5
 800e822:	10a4      	asrs	r4, r4, #2
 800e824:	2600      	movs	r6, #0
 800e826:	42a6      	cmp	r6, r4
 800e828:	d105      	bne.n	800e836 <__libc_init_array+0x2e>
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e830:	4798      	blx	r3
 800e832:	3601      	adds	r6, #1
 800e834:	e7ee      	b.n	800e814 <__libc_init_array+0xc>
 800e836:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83a:	4798      	blx	r3
 800e83c:	3601      	adds	r6, #1
 800e83e:	e7f2      	b.n	800e826 <__libc_init_array+0x1e>
 800e840:	0800f368 	.word	0x0800f368
 800e844:	0800f368 	.word	0x0800f368
 800e848:	0800f368 	.word	0x0800f368
 800e84c:	0800f36c 	.word	0x0800f36c

0800e850 <malloc>:
 800e850:	4b02      	ldr	r3, [pc, #8]	; (800e85c <malloc+0xc>)
 800e852:	4601      	mov	r1, r0
 800e854:	6818      	ldr	r0, [r3, #0]
 800e856:	f000 b88d 	b.w	800e974 <_malloc_r>
 800e85a:	bf00      	nop
 800e85c:	20000040 	.word	0x20000040

0800e860 <free>:
 800e860:	4b02      	ldr	r3, [pc, #8]	; (800e86c <free+0xc>)
 800e862:	4601      	mov	r1, r0
 800e864:	6818      	ldr	r0, [r3, #0]
 800e866:	f000 b819 	b.w	800e89c <_free_r>
 800e86a:	bf00      	nop
 800e86c:	20000040 	.word	0x20000040

0800e870 <memcpy>:
 800e870:	440a      	add	r2, r1
 800e872:	4291      	cmp	r1, r2
 800e874:	f100 33ff 	add.w	r3, r0, #4294967295
 800e878:	d100      	bne.n	800e87c <memcpy+0xc>
 800e87a:	4770      	bx	lr
 800e87c:	b510      	push	{r4, lr}
 800e87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e886:	4291      	cmp	r1, r2
 800e888:	d1f9      	bne.n	800e87e <memcpy+0xe>
 800e88a:	bd10      	pop	{r4, pc}

0800e88c <memset>:
 800e88c:	4402      	add	r2, r0
 800e88e:	4603      	mov	r3, r0
 800e890:	4293      	cmp	r3, r2
 800e892:	d100      	bne.n	800e896 <memset+0xa>
 800e894:	4770      	bx	lr
 800e896:	f803 1b01 	strb.w	r1, [r3], #1
 800e89a:	e7f9      	b.n	800e890 <memset+0x4>

0800e89c <_free_r>:
 800e89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e89e:	2900      	cmp	r1, #0
 800e8a0:	d044      	beq.n	800e92c <_free_r+0x90>
 800e8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8a6:	9001      	str	r0, [sp, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e8ae:	bfb8      	it	lt
 800e8b0:	18e4      	addlt	r4, r4, r3
 800e8b2:	f000 f903 	bl	800eabc <__malloc_lock>
 800e8b6:	4a1e      	ldr	r2, [pc, #120]	; (800e930 <_free_r+0x94>)
 800e8b8:	9801      	ldr	r0, [sp, #4]
 800e8ba:	6813      	ldr	r3, [r2, #0]
 800e8bc:	b933      	cbnz	r3, 800e8cc <_free_r+0x30>
 800e8be:	6063      	str	r3, [r4, #4]
 800e8c0:	6014      	str	r4, [r2, #0]
 800e8c2:	b003      	add	sp, #12
 800e8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8c8:	f000 b8fe 	b.w	800eac8 <__malloc_unlock>
 800e8cc:	42a3      	cmp	r3, r4
 800e8ce:	d908      	bls.n	800e8e2 <_free_r+0x46>
 800e8d0:	6825      	ldr	r5, [r4, #0]
 800e8d2:	1961      	adds	r1, r4, r5
 800e8d4:	428b      	cmp	r3, r1
 800e8d6:	bf01      	itttt	eq
 800e8d8:	6819      	ldreq	r1, [r3, #0]
 800e8da:	685b      	ldreq	r3, [r3, #4]
 800e8dc:	1949      	addeq	r1, r1, r5
 800e8de:	6021      	streq	r1, [r4, #0]
 800e8e0:	e7ed      	b.n	800e8be <_free_r+0x22>
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	b10b      	cbz	r3, 800e8ec <_free_r+0x50>
 800e8e8:	42a3      	cmp	r3, r4
 800e8ea:	d9fa      	bls.n	800e8e2 <_free_r+0x46>
 800e8ec:	6811      	ldr	r1, [r2, #0]
 800e8ee:	1855      	adds	r5, r2, r1
 800e8f0:	42a5      	cmp	r5, r4
 800e8f2:	d10b      	bne.n	800e90c <_free_r+0x70>
 800e8f4:	6824      	ldr	r4, [r4, #0]
 800e8f6:	4421      	add	r1, r4
 800e8f8:	1854      	adds	r4, r2, r1
 800e8fa:	42a3      	cmp	r3, r4
 800e8fc:	6011      	str	r1, [r2, #0]
 800e8fe:	d1e0      	bne.n	800e8c2 <_free_r+0x26>
 800e900:	681c      	ldr	r4, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	6053      	str	r3, [r2, #4]
 800e906:	4421      	add	r1, r4
 800e908:	6011      	str	r1, [r2, #0]
 800e90a:	e7da      	b.n	800e8c2 <_free_r+0x26>
 800e90c:	d902      	bls.n	800e914 <_free_r+0x78>
 800e90e:	230c      	movs	r3, #12
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	e7d6      	b.n	800e8c2 <_free_r+0x26>
 800e914:	6825      	ldr	r5, [r4, #0]
 800e916:	1961      	adds	r1, r4, r5
 800e918:	428b      	cmp	r3, r1
 800e91a:	bf04      	itt	eq
 800e91c:	6819      	ldreq	r1, [r3, #0]
 800e91e:	685b      	ldreq	r3, [r3, #4]
 800e920:	6063      	str	r3, [r4, #4]
 800e922:	bf04      	itt	eq
 800e924:	1949      	addeq	r1, r1, r5
 800e926:	6021      	streq	r1, [r4, #0]
 800e928:	6054      	str	r4, [r2, #4]
 800e92a:	e7ca      	b.n	800e8c2 <_free_r+0x26>
 800e92c:	b003      	add	sp, #12
 800e92e:	bd30      	pop	{r4, r5, pc}
 800e930:	20001e0c 	.word	0x20001e0c

0800e934 <sbrk_aligned>:
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	4e0e      	ldr	r6, [pc, #56]	; (800e970 <sbrk_aligned+0x3c>)
 800e938:	460c      	mov	r4, r1
 800e93a:	6831      	ldr	r1, [r6, #0]
 800e93c:	4605      	mov	r5, r0
 800e93e:	b911      	cbnz	r1, 800e946 <sbrk_aligned+0x12>
 800e940:	f000 f88c 	bl	800ea5c <_sbrk_r>
 800e944:	6030      	str	r0, [r6, #0]
 800e946:	4621      	mov	r1, r4
 800e948:	4628      	mov	r0, r5
 800e94a:	f000 f887 	bl	800ea5c <_sbrk_r>
 800e94e:	1c43      	adds	r3, r0, #1
 800e950:	d00a      	beq.n	800e968 <sbrk_aligned+0x34>
 800e952:	1cc4      	adds	r4, r0, #3
 800e954:	f024 0403 	bic.w	r4, r4, #3
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d007      	beq.n	800e96c <sbrk_aligned+0x38>
 800e95c:	1a21      	subs	r1, r4, r0
 800e95e:	4628      	mov	r0, r5
 800e960:	f000 f87c 	bl	800ea5c <_sbrk_r>
 800e964:	3001      	adds	r0, #1
 800e966:	d101      	bne.n	800e96c <sbrk_aligned+0x38>
 800e968:	f04f 34ff 	mov.w	r4, #4294967295
 800e96c:	4620      	mov	r0, r4
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	20001e10 	.word	0x20001e10

0800e974 <_malloc_r>:
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	1ccd      	adds	r5, r1, #3
 800e97a:	f025 0503 	bic.w	r5, r5, #3
 800e97e:	3508      	adds	r5, #8
 800e980:	2d0c      	cmp	r5, #12
 800e982:	bf38      	it	cc
 800e984:	250c      	movcc	r5, #12
 800e986:	2d00      	cmp	r5, #0
 800e988:	4607      	mov	r7, r0
 800e98a:	db01      	blt.n	800e990 <_malloc_r+0x1c>
 800e98c:	42a9      	cmp	r1, r5
 800e98e:	d905      	bls.n	800e99c <_malloc_r+0x28>
 800e990:	230c      	movs	r3, #12
 800e992:	603b      	str	r3, [r7, #0]
 800e994:	2600      	movs	r6, #0
 800e996:	4630      	mov	r0, r6
 800e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e99c:	4e2e      	ldr	r6, [pc, #184]	; (800ea58 <_malloc_r+0xe4>)
 800e99e:	f000 f88d 	bl	800eabc <__malloc_lock>
 800e9a2:	6833      	ldr	r3, [r6, #0]
 800e9a4:	461c      	mov	r4, r3
 800e9a6:	bb34      	cbnz	r4, 800e9f6 <_malloc_r+0x82>
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	f7ff ffc2 	bl	800e934 <sbrk_aligned>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	d14d      	bne.n	800ea52 <_malloc_r+0xde>
 800e9b6:	6834      	ldr	r4, [r6, #0]
 800e9b8:	4626      	mov	r6, r4
 800e9ba:	2e00      	cmp	r6, #0
 800e9bc:	d140      	bne.n	800ea40 <_malloc_r+0xcc>
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	eb04 0803 	add.w	r8, r4, r3
 800e9c8:	f000 f848 	bl	800ea5c <_sbrk_r>
 800e9cc:	4580      	cmp	r8, r0
 800e9ce:	d13a      	bne.n	800ea46 <_malloc_r+0xd2>
 800e9d0:	6821      	ldr	r1, [r4, #0]
 800e9d2:	3503      	adds	r5, #3
 800e9d4:	1a6d      	subs	r5, r5, r1
 800e9d6:	f025 0503 	bic.w	r5, r5, #3
 800e9da:	3508      	adds	r5, #8
 800e9dc:	2d0c      	cmp	r5, #12
 800e9de:	bf38      	it	cc
 800e9e0:	250c      	movcc	r5, #12
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff ffa5 	bl	800e934 <sbrk_aligned>
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	d02b      	beq.n	800ea46 <_malloc_r+0xd2>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	442b      	add	r3, r5
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	e00e      	b.n	800ea14 <_malloc_r+0xa0>
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	1b52      	subs	r2, r2, r5
 800e9fa:	d41e      	bmi.n	800ea3a <_malloc_r+0xc6>
 800e9fc:	2a0b      	cmp	r2, #11
 800e9fe:	d916      	bls.n	800ea2e <_malloc_r+0xba>
 800ea00:	1961      	adds	r1, r4, r5
 800ea02:	42a3      	cmp	r3, r4
 800ea04:	6025      	str	r5, [r4, #0]
 800ea06:	bf18      	it	ne
 800ea08:	6059      	strne	r1, [r3, #4]
 800ea0a:	6863      	ldr	r3, [r4, #4]
 800ea0c:	bf08      	it	eq
 800ea0e:	6031      	streq	r1, [r6, #0]
 800ea10:	5162      	str	r2, [r4, r5]
 800ea12:	604b      	str	r3, [r1, #4]
 800ea14:	4638      	mov	r0, r7
 800ea16:	f104 060b 	add.w	r6, r4, #11
 800ea1a:	f000 f855 	bl	800eac8 <__malloc_unlock>
 800ea1e:	f026 0607 	bic.w	r6, r6, #7
 800ea22:	1d23      	adds	r3, r4, #4
 800ea24:	1af2      	subs	r2, r6, r3
 800ea26:	d0b6      	beq.n	800e996 <_malloc_r+0x22>
 800ea28:	1b9b      	subs	r3, r3, r6
 800ea2a:	50a3      	str	r3, [r4, r2]
 800ea2c:	e7b3      	b.n	800e996 <_malloc_r+0x22>
 800ea2e:	6862      	ldr	r2, [r4, #4]
 800ea30:	42a3      	cmp	r3, r4
 800ea32:	bf0c      	ite	eq
 800ea34:	6032      	streq	r2, [r6, #0]
 800ea36:	605a      	strne	r2, [r3, #4]
 800ea38:	e7ec      	b.n	800ea14 <_malloc_r+0xa0>
 800ea3a:	4623      	mov	r3, r4
 800ea3c:	6864      	ldr	r4, [r4, #4]
 800ea3e:	e7b2      	b.n	800e9a6 <_malloc_r+0x32>
 800ea40:	4634      	mov	r4, r6
 800ea42:	6876      	ldr	r6, [r6, #4]
 800ea44:	e7b9      	b.n	800e9ba <_malloc_r+0x46>
 800ea46:	230c      	movs	r3, #12
 800ea48:	603b      	str	r3, [r7, #0]
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	f000 f83c 	bl	800eac8 <__malloc_unlock>
 800ea50:	e7a1      	b.n	800e996 <_malloc_r+0x22>
 800ea52:	6025      	str	r5, [r4, #0]
 800ea54:	e7de      	b.n	800ea14 <_malloc_r+0xa0>
 800ea56:	bf00      	nop
 800ea58:	20001e0c 	.word	0x20001e0c

0800ea5c <_sbrk_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	4d06      	ldr	r5, [pc, #24]	; (800ea78 <_sbrk_r+0x1c>)
 800ea60:	2300      	movs	r3, #0
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	602b      	str	r3, [r5, #0]
 800ea68:	f7f3 f956 	bl	8001d18 <_sbrk>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_sbrk_r+0x1a>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_sbrk_r+0x1a>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	20001e14 	.word	0x20001e14

0800ea7c <siprintf>:
 800ea7c:	b40e      	push	{r1, r2, r3}
 800ea7e:	b500      	push	{lr}
 800ea80:	b09c      	sub	sp, #112	; 0x70
 800ea82:	ab1d      	add	r3, sp, #116	; 0x74
 800ea84:	9002      	str	r0, [sp, #8]
 800ea86:	9006      	str	r0, [sp, #24]
 800ea88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea8c:	4809      	ldr	r0, [pc, #36]	; (800eab4 <siprintf+0x38>)
 800ea8e:	9107      	str	r1, [sp, #28]
 800ea90:	9104      	str	r1, [sp, #16]
 800ea92:	4909      	ldr	r1, [pc, #36]	; (800eab8 <siprintf+0x3c>)
 800ea94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea98:	9105      	str	r1, [sp, #20]
 800ea9a:	6800      	ldr	r0, [r0, #0]
 800ea9c:	9301      	str	r3, [sp, #4]
 800ea9e:	a902      	add	r1, sp, #8
 800eaa0:	f000 f874 	bl	800eb8c <_svfiprintf_r>
 800eaa4:	9b02      	ldr	r3, [sp, #8]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	b01c      	add	sp, #112	; 0x70
 800eaac:	f85d eb04 	ldr.w	lr, [sp], #4
 800eab0:	b003      	add	sp, #12
 800eab2:	4770      	bx	lr
 800eab4:	20000040 	.word	0x20000040
 800eab8:	ffff0208 	.word	0xffff0208

0800eabc <__malloc_lock>:
 800eabc:	4801      	ldr	r0, [pc, #4]	; (800eac4 <__malloc_lock+0x8>)
 800eabe:	f000 baf9 	b.w	800f0b4 <__retarget_lock_acquire_recursive>
 800eac2:	bf00      	nop
 800eac4:	20001e18 	.word	0x20001e18

0800eac8 <__malloc_unlock>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__malloc_unlock+0x8>)
 800eaca:	f000 baf4 	b.w	800f0b6 <__retarget_lock_release_recursive>
 800eace:	bf00      	nop
 800ead0:	20001e18 	.word	0x20001e18

0800ead4 <__ssputs_r>:
 800ead4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ead8:	688e      	ldr	r6, [r1, #8]
 800eada:	429e      	cmp	r6, r3
 800eadc:	4682      	mov	sl, r0
 800eade:	460c      	mov	r4, r1
 800eae0:	4690      	mov	r8, r2
 800eae2:	461f      	mov	r7, r3
 800eae4:	d838      	bhi.n	800eb58 <__ssputs_r+0x84>
 800eae6:	898a      	ldrh	r2, [r1, #12]
 800eae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eaec:	d032      	beq.n	800eb54 <__ssputs_r+0x80>
 800eaee:	6825      	ldr	r5, [r4, #0]
 800eaf0:	6909      	ldr	r1, [r1, #16]
 800eaf2:	eba5 0901 	sub.w	r9, r5, r1
 800eaf6:	6965      	ldr	r5, [r4, #20]
 800eaf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eafc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb00:	3301      	adds	r3, #1
 800eb02:	444b      	add	r3, r9
 800eb04:	106d      	asrs	r5, r5, #1
 800eb06:	429d      	cmp	r5, r3
 800eb08:	bf38      	it	cc
 800eb0a:	461d      	movcc	r5, r3
 800eb0c:	0553      	lsls	r3, r2, #21
 800eb0e:	d531      	bpl.n	800eb74 <__ssputs_r+0xa0>
 800eb10:	4629      	mov	r1, r5
 800eb12:	f7ff ff2f 	bl	800e974 <_malloc_r>
 800eb16:	4606      	mov	r6, r0
 800eb18:	b950      	cbnz	r0, 800eb30 <__ssputs_r+0x5c>
 800eb1a:	230c      	movs	r3, #12
 800eb1c:	f8ca 3000 	str.w	r3, [sl]
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb26:	81a3      	strh	r3, [r4, #12]
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb30:	6921      	ldr	r1, [r4, #16]
 800eb32:	464a      	mov	r2, r9
 800eb34:	f7ff fe9c 	bl	800e870 <memcpy>
 800eb38:	89a3      	ldrh	r3, [r4, #12]
 800eb3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb42:	81a3      	strh	r3, [r4, #12]
 800eb44:	6126      	str	r6, [r4, #16]
 800eb46:	6165      	str	r5, [r4, #20]
 800eb48:	444e      	add	r6, r9
 800eb4a:	eba5 0509 	sub.w	r5, r5, r9
 800eb4e:	6026      	str	r6, [r4, #0]
 800eb50:	60a5      	str	r5, [r4, #8]
 800eb52:	463e      	mov	r6, r7
 800eb54:	42be      	cmp	r6, r7
 800eb56:	d900      	bls.n	800eb5a <__ssputs_r+0x86>
 800eb58:	463e      	mov	r6, r7
 800eb5a:	6820      	ldr	r0, [r4, #0]
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4641      	mov	r1, r8
 800eb60:	f000 faaa 	bl	800f0b8 <memmove>
 800eb64:	68a3      	ldr	r3, [r4, #8]
 800eb66:	1b9b      	subs	r3, r3, r6
 800eb68:	60a3      	str	r3, [r4, #8]
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	4433      	add	r3, r6
 800eb6e:	6023      	str	r3, [r4, #0]
 800eb70:	2000      	movs	r0, #0
 800eb72:	e7db      	b.n	800eb2c <__ssputs_r+0x58>
 800eb74:	462a      	mov	r2, r5
 800eb76:	f000 fab9 	bl	800f0ec <_realloc_r>
 800eb7a:	4606      	mov	r6, r0
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	d1e1      	bne.n	800eb44 <__ssputs_r+0x70>
 800eb80:	6921      	ldr	r1, [r4, #16]
 800eb82:	4650      	mov	r0, sl
 800eb84:	f7ff fe8a 	bl	800e89c <_free_r>
 800eb88:	e7c7      	b.n	800eb1a <__ssputs_r+0x46>
	...

0800eb8c <_svfiprintf_r>:
 800eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	4698      	mov	r8, r3
 800eb92:	898b      	ldrh	r3, [r1, #12]
 800eb94:	061b      	lsls	r3, r3, #24
 800eb96:	b09d      	sub	sp, #116	; 0x74
 800eb98:	4607      	mov	r7, r0
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	4614      	mov	r4, r2
 800eb9e:	d50e      	bpl.n	800ebbe <_svfiprintf_r+0x32>
 800eba0:	690b      	ldr	r3, [r1, #16]
 800eba2:	b963      	cbnz	r3, 800ebbe <_svfiprintf_r+0x32>
 800eba4:	2140      	movs	r1, #64	; 0x40
 800eba6:	f7ff fee5 	bl	800e974 <_malloc_r>
 800ebaa:	6028      	str	r0, [r5, #0]
 800ebac:	6128      	str	r0, [r5, #16]
 800ebae:	b920      	cbnz	r0, 800ebba <_svfiprintf_r+0x2e>
 800ebb0:	230c      	movs	r3, #12
 800ebb2:	603b      	str	r3, [r7, #0]
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	e0d1      	b.n	800ed5e <_svfiprintf_r+0x1d2>
 800ebba:	2340      	movs	r3, #64	; 0x40
 800ebbc:	616b      	str	r3, [r5, #20]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc2:	2320      	movs	r3, #32
 800ebc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebcc:	2330      	movs	r3, #48	; 0x30
 800ebce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed78 <_svfiprintf_r+0x1ec>
 800ebd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebd6:	f04f 0901 	mov.w	r9, #1
 800ebda:	4623      	mov	r3, r4
 800ebdc:	469a      	mov	sl, r3
 800ebde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe2:	b10a      	cbz	r2, 800ebe8 <_svfiprintf_r+0x5c>
 800ebe4:	2a25      	cmp	r2, #37	; 0x25
 800ebe6:	d1f9      	bne.n	800ebdc <_svfiprintf_r+0x50>
 800ebe8:	ebba 0b04 	subs.w	fp, sl, r4
 800ebec:	d00b      	beq.n	800ec06 <_svfiprintf_r+0x7a>
 800ebee:	465b      	mov	r3, fp
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	f7ff ff6d 	bl	800ead4 <__ssputs_r>
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	f000 80aa 	beq.w	800ed54 <_svfiprintf_r+0x1c8>
 800ec00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec02:	445a      	add	r2, fp
 800ec04:	9209      	str	r2, [sp, #36]	; 0x24
 800ec06:	f89a 3000 	ldrb.w	r3, [sl]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80a2 	beq.w	800ed54 <_svfiprintf_r+0x1c8>
 800ec10:	2300      	movs	r3, #0
 800ec12:	f04f 32ff 	mov.w	r2, #4294967295
 800ec16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec1a:	f10a 0a01 	add.w	sl, sl, #1
 800ec1e:	9304      	str	r3, [sp, #16]
 800ec20:	9307      	str	r3, [sp, #28]
 800ec22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec26:	931a      	str	r3, [sp, #104]	; 0x68
 800ec28:	4654      	mov	r4, sl
 800ec2a:	2205      	movs	r2, #5
 800ec2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec30:	4851      	ldr	r0, [pc, #324]	; (800ed78 <_svfiprintf_r+0x1ec>)
 800ec32:	f7f1 facd 	bl	80001d0 <memchr>
 800ec36:	9a04      	ldr	r2, [sp, #16]
 800ec38:	b9d8      	cbnz	r0, 800ec72 <_svfiprintf_r+0xe6>
 800ec3a:	06d0      	lsls	r0, r2, #27
 800ec3c:	bf44      	itt	mi
 800ec3e:	2320      	movmi	r3, #32
 800ec40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec44:	0711      	lsls	r1, r2, #28
 800ec46:	bf44      	itt	mi
 800ec48:	232b      	movmi	r3, #43	; 0x2b
 800ec4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ec52:	2b2a      	cmp	r3, #42	; 0x2a
 800ec54:	d015      	beq.n	800ec82 <_svfiprintf_r+0xf6>
 800ec56:	9a07      	ldr	r2, [sp, #28]
 800ec58:	4654      	mov	r4, sl
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	f04f 0c0a 	mov.w	ip, #10
 800ec60:	4621      	mov	r1, r4
 800ec62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec66:	3b30      	subs	r3, #48	; 0x30
 800ec68:	2b09      	cmp	r3, #9
 800ec6a:	d94e      	bls.n	800ed0a <_svfiprintf_r+0x17e>
 800ec6c:	b1b0      	cbz	r0, 800ec9c <_svfiprintf_r+0x110>
 800ec6e:	9207      	str	r2, [sp, #28]
 800ec70:	e014      	b.n	800ec9c <_svfiprintf_r+0x110>
 800ec72:	eba0 0308 	sub.w	r3, r0, r8
 800ec76:	fa09 f303 	lsl.w	r3, r9, r3
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	9304      	str	r3, [sp, #16]
 800ec7e:	46a2      	mov	sl, r4
 800ec80:	e7d2      	b.n	800ec28 <_svfiprintf_r+0x9c>
 800ec82:	9b03      	ldr	r3, [sp, #12]
 800ec84:	1d19      	adds	r1, r3, #4
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	9103      	str	r1, [sp, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	bfbb      	ittet	lt
 800ec8e:	425b      	neglt	r3, r3
 800ec90:	f042 0202 	orrlt.w	r2, r2, #2
 800ec94:	9307      	strge	r3, [sp, #28]
 800ec96:	9307      	strlt	r3, [sp, #28]
 800ec98:	bfb8      	it	lt
 800ec9a:	9204      	strlt	r2, [sp, #16]
 800ec9c:	7823      	ldrb	r3, [r4, #0]
 800ec9e:	2b2e      	cmp	r3, #46	; 0x2e
 800eca0:	d10c      	bne.n	800ecbc <_svfiprintf_r+0x130>
 800eca2:	7863      	ldrb	r3, [r4, #1]
 800eca4:	2b2a      	cmp	r3, #42	; 0x2a
 800eca6:	d135      	bne.n	800ed14 <_svfiprintf_r+0x188>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	1d1a      	adds	r2, r3, #4
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	9203      	str	r2, [sp, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bfb8      	it	lt
 800ecb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecb8:	3402      	adds	r4, #2
 800ecba:	9305      	str	r3, [sp, #20]
 800ecbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed88 <_svfiprintf_r+0x1fc>
 800ecc0:	7821      	ldrb	r1, [r4, #0]
 800ecc2:	2203      	movs	r2, #3
 800ecc4:	4650      	mov	r0, sl
 800ecc6:	f7f1 fa83 	bl	80001d0 <memchr>
 800ecca:	b140      	cbz	r0, 800ecde <_svfiprintf_r+0x152>
 800eccc:	2340      	movs	r3, #64	; 0x40
 800ecce:	eba0 000a 	sub.w	r0, r0, sl
 800ecd2:	fa03 f000 	lsl.w	r0, r3, r0
 800ecd6:	9b04      	ldr	r3, [sp, #16]
 800ecd8:	4303      	orrs	r3, r0
 800ecda:	3401      	adds	r4, #1
 800ecdc:	9304      	str	r3, [sp, #16]
 800ecde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece2:	4826      	ldr	r0, [pc, #152]	; (800ed7c <_svfiprintf_r+0x1f0>)
 800ece4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ece8:	2206      	movs	r2, #6
 800ecea:	f7f1 fa71 	bl	80001d0 <memchr>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d038      	beq.n	800ed64 <_svfiprintf_r+0x1d8>
 800ecf2:	4b23      	ldr	r3, [pc, #140]	; (800ed80 <_svfiprintf_r+0x1f4>)
 800ecf4:	bb1b      	cbnz	r3, 800ed3e <_svfiprintf_r+0x1b2>
 800ecf6:	9b03      	ldr	r3, [sp, #12]
 800ecf8:	3307      	adds	r3, #7
 800ecfa:	f023 0307 	bic.w	r3, r3, #7
 800ecfe:	3308      	adds	r3, #8
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed04:	4433      	add	r3, r6
 800ed06:	9309      	str	r3, [sp, #36]	; 0x24
 800ed08:	e767      	b.n	800ebda <_svfiprintf_r+0x4e>
 800ed0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed0e:	460c      	mov	r4, r1
 800ed10:	2001      	movs	r0, #1
 800ed12:	e7a5      	b.n	800ec60 <_svfiprintf_r+0xd4>
 800ed14:	2300      	movs	r3, #0
 800ed16:	3401      	adds	r4, #1
 800ed18:	9305      	str	r3, [sp, #20]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	f04f 0c0a 	mov.w	ip, #10
 800ed20:	4620      	mov	r0, r4
 800ed22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed26:	3a30      	subs	r2, #48	; 0x30
 800ed28:	2a09      	cmp	r2, #9
 800ed2a:	d903      	bls.n	800ed34 <_svfiprintf_r+0x1a8>
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d0c5      	beq.n	800ecbc <_svfiprintf_r+0x130>
 800ed30:	9105      	str	r1, [sp, #20]
 800ed32:	e7c3      	b.n	800ecbc <_svfiprintf_r+0x130>
 800ed34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed38:	4604      	mov	r4, r0
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e7f0      	b.n	800ed20 <_svfiprintf_r+0x194>
 800ed3e:	ab03      	add	r3, sp, #12
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	462a      	mov	r2, r5
 800ed44:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <_svfiprintf_r+0x1f8>)
 800ed46:	a904      	add	r1, sp, #16
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f3af 8000 	nop.w
 800ed4e:	1c42      	adds	r2, r0, #1
 800ed50:	4606      	mov	r6, r0
 800ed52:	d1d6      	bne.n	800ed02 <_svfiprintf_r+0x176>
 800ed54:	89ab      	ldrh	r3, [r5, #12]
 800ed56:	065b      	lsls	r3, r3, #25
 800ed58:	f53f af2c 	bmi.w	800ebb4 <_svfiprintf_r+0x28>
 800ed5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed5e:	b01d      	add	sp, #116	; 0x74
 800ed60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed64:	ab03      	add	r3, sp, #12
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	462a      	mov	r2, r5
 800ed6a:	4b06      	ldr	r3, [pc, #24]	; (800ed84 <_svfiprintf_r+0x1f8>)
 800ed6c:	a904      	add	r1, sp, #16
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f000 f87a 	bl	800ee68 <_printf_i>
 800ed74:	e7eb      	b.n	800ed4e <_svfiprintf_r+0x1c2>
 800ed76:	bf00      	nop
 800ed78:	0800f32c 	.word	0x0800f32c
 800ed7c:	0800f336 	.word	0x0800f336
 800ed80:	00000000 	.word	0x00000000
 800ed84:	0800ead5 	.word	0x0800ead5
 800ed88:	0800f332 	.word	0x0800f332

0800ed8c <_printf_common>:
 800ed8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed90:	4616      	mov	r6, r2
 800ed92:	4699      	mov	r9, r3
 800ed94:	688a      	ldr	r2, [r1, #8]
 800ed96:	690b      	ldr	r3, [r1, #16]
 800ed98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	bfb8      	it	lt
 800eda0:	4613      	movlt	r3, r2
 800eda2:	6033      	str	r3, [r6, #0]
 800eda4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eda8:	4607      	mov	r7, r0
 800edaa:	460c      	mov	r4, r1
 800edac:	b10a      	cbz	r2, 800edb2 <_printf_common+0x26>
 800edae:	3301      	adds	r3, #1
 800edb0:	6033      	str	r3, [r6, #0]
 800edb2:	6823      	ldr	r3, [r4, #0]
 800edb4:	0699      	lsls	r1, r3, #26
 800edb6:	bf42      	ittt	mi
 800edb8:	6833      	ldrmi	r3, [r6, #0]
 800edba:	3302      	addmi	r3, #2
 800edbc:	6033      	strmi	r3, [r6, #0]
 800edbe:	6825      	ldr	r5, [r4, #0]
 800edc0:	f015 0506 	ands.w	r5, r5, #6
 800edc4:	d106      	bne.n	800edd4 <_printf_common+0x48>
 800edc6:	f104 0a19 	add.w	sl, r4, #25
 800edca:	68e3      	ldr	r3, [r4, #12]
 800edcc:	6832      	ldr	r2, [r6, #0]
 800edce:	1a9b      	subs	r3, r3, r2
 800edd0:	42ab      	cmp	r3, r5
 800edd2:	dc26      	bgt.n	800ee22 <_printf_common+0x96>
 800edd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800edd8:	1e13      	subs	r3, r2, #0
 800edda:	6822      	ldr	r2, [r4, #0]
 800eddc:	bf18      	it	ne
 800edde:	2301      	movne	r3, #1
 800ede0:	0692      	lsls	r2, r2, #26
 800ede2:	d42b      	bmi.n	800ee3c <_printf_common+0xb0>
 800ede4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ede8:	4649      	mov	r1, r9
 800edea:	4638      	mov	r0, r7
 800edec:	47c0      	blx	r8
 800edee:	3001      	adds	r0, #1
 800edf0:	d01e      	beq.n	800ee30 <_printf_common+0xa4>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	68e5      	ldr	r5, [r4, #12]
 800edf6:	6832      	ldr	r2, [r6, #0]
 800edf8:	f003 0306 	and.w	r3, r3, #6
 800edfc:	2b04      	cmp	r3, #4
 800edfe:	bf08      	it	eq
 800ee00:	1aad      	subeq	r5, r5, r2
 800ee02:	68a3      	ldr	r3, [r4, #8]
 800ee04:	6922      	ldr	r2, [r4, #16]
 800ee06:	bf0c      	ite	eq
 800ee08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee0c:	2500      	movne	r5, #0
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	bfc4      	itt	gt
 800ee12:	1a9b      	subgt	r3, r3, r2
 800ee14:	18ed      	addgt	r5, r5, r3
 800ee16:	2600      	movs	r6, #0
 800ee18:	341a      	adds	r4, #26
 800ee1a:	42b5      	cmp	r5, r6
 800ee1c:	d11a      	bne.n	800ee54 <_printf_common+0xc8>
 800ee1e:	2000      	movs	r0, #0
 800ee20:	e008      	b.n	800ee34 <_printf_common+0xa8>
 800ee22:	2301      	movs	r3, #1
 800ee24:	4652      	mov	r2, sl
 800ee26:	4649      	mov	r1, r9
 800ee28:	4638      	mov	r0, r7
 800ee2a:	47c0      	blx	r8
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d103      	bne.n	800ee38 <_printf_common+0xac>
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee38:	3501      	adds	r5, #1
 800ee3a:	e7c6      	b.n	800edca <_printf_common+0x3e>
 800ee3c:	18e1      	adds	r1, r4, r3
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	2030      	movs	r0, #48	; 0x30
 800ee42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee46:	4422      	add	r2, r4
 800ee48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee50:	3302      	adds	r3, #2
 800ee52:	e7c7      	b.n	800ede4 <_printf_common+0x58>
 800ee54:	2301      	movs	r3, #1
 800ee56:	4622      	mov	r2, r4
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	47c0      	blx	r8
 800ee5e:	3001      	adds	r0, #1
 800ee60:	d0e6      	beq.n	800ee30 <_printf_common+0xa4>
 800ee62:	3601      	adds	r6, #1
 800ee64:	e7d9      	b.n	800ee1a <_printf_common+0x8e>
	...

0800ee68 <_printf_i>:
 800ee68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee6c:	7e0f      	ldrb	r7, [r1, #24]
 800ee6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee70:	2f78      	cmp	r7, #120	; 0x78
 800ee72:	4691      	mov	r9, r2
 800ee74:	4680      	mov	r8, r0
 800ee76:	460c      	mov	r4, r1
 800ee78:	469a      	mov	sl, r3
 800ee7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee7e:	d807      	bhi.n	800ee90 <_printf_i+0x28>
 800ee80:	2f62      	cmp	r7, #98	; 0x62
 800ee82:	d80a      	bhi.n	800ee9a <_printf_i+0x32>
 800ee84:	2f00      	cmp	r7, #0
 800ee86:	f000 80d8 	beq.w	800f03a <_printf_i+0x1d2>
 800ee8a:	2f58      	cmp	r7, #88	; 0x58
 800ee8c:	f000 80a3 	beq.w	800efd6 <_printf_i+0x16e>
 800ee90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee98:	e03a      	b.n	800ef10 <_printf_i+0xa8>
 800ee9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee9e:	2b15      	cmp	r3, #21
 800eea0:	d8f6      	bhi.n	800ee90 <_printf_i+0x28>
 800eea2:	a101      	add	r1, pc, #4	; (adr r1, 800eea8 <_printf_i+0x40>)
 800eea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eea8:	0800ef01 	.word	0x0800ef01
 800eeac:	0800ef15 	.word	0x0800ef15
 800eeb0:	0800ee91 	.word	0x0800ee91
 800eeb4:	0800ee91 	.word	0x0800ee91
 800eeb8:	0800ee91 	.word	0x0800ee91
 800eebc:	0800ee91 	.word	0x0800ee91
 800eec0:	0800ef15 	.word	0x0800ef15
 800eec4:	0800ee91 	.word	0x0800ee91
 800eec8:	0800ee91 	.word	0x0800ee91
 800eecc:	0800ee91 	.word	0x0800ee91
 800eed0:	0800ee91 	.word	0x0800ee91
 800eed4:	0800f021 	.word	0x0800f021
 800eed8:	0800ef45 	.word	0x0800ef45
 800eedc:	0800f003 	.word	0x0800f003
 800eee0:	0800ee91 	.word	0x0800ee91
 800eee4:	0800ee91 	.word	0x0800ee91
 800eee8:	0800f043 	.word	0x0800f043
 800eeec:	0800ee91 	.word	0x0800ee91
 800eef0:	0800ef45 	.word	0x0800ef45
 800eef4:	0800ee91 	.word	0x0800ee91
 800eef8:	0800ee91 	.word	0x0800ee91
 800eefc:	0800f00b 	.word	0x0800f00b
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	1d1a      	adds	r2, r3, #4
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	602a      	str	r2, [r5, #0]
 800ef08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef10:	2301      	movs	r3, #1
 800ef12:	e0a3      	b.n	800f05c <_printf_i+0x1f4>
 800ef14:	6820      	ldr	r0, [r4, #0]
 800ef16:	6829      	ldr	r1, [r5, #0]
 800ef18:	0606      	lsls	r6, r0, #24
 800ef1a:	f101 0304 	add.w	r3, r1, #4
 800ef1e:	d50a      	bpl.n	800ef36 <_printf_i+0xce>
 800ef20:	680e      	ldr	r6, [r1, #0]
 800ef22:	602b      	str	r3, [r5, #0]
 800ef24:	2e00      	cmp	r6, #0
 800ef26:	da03      	bge.n	800ef30 <_printf_i+0xc8>
 800ef28:	232d      	movs	r3, #45	; 0x2d
 800ef2a:	4276      	negs	r6, r6
 800ef2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef30:	485e      	ldr	r0, [pc, #376]	; (800f0ac <_printf_i+0x244>)
 800ef32:	230a      	movs	r3, #10
 800ef34:	e019      	b.n	800ef6a <_printf_i+0x102>
 800ef36:	680e      	ldr	r6, [r1, #0]
 800ef38:	602b      	str	r3, [r5, #0]
 800ef3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef3e:	bf18      	it	ne
 800ef40:	b236      	sxthne	r6, r6
 800ef42:	e7ef      	b.n	800ef24 <_printf_i+0xbc>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	6820      	ldr	r0, [r4, #0]
 800ef48:	1d19      	adds	r1, r3, #4
 800ef4a:	6029      	str	r1, [r5, #0]
 800ef4c:	0601      	lsls	r1, r0, #24
 800ef4e:	d501      	bpl.n	800ef54 <_printf_i+0xec>
 800ef50:	681e      	ldr	r6, [r3, #0]
 800ef52:	e002      	b.n	800ef5a <_printf_i+0xf2>
 800ef54:	0646      	lsls	r6, r0, #25
 800ef56:	d5fb      	bpl.n	800ef50 <_printf_i+0xe8>
 800ef58:	881e      	ldrh	r6, [r3, #0]
 800ef5a:	4854      	ldr	r0, [pc, #336]	; (800f0ac <_printf_i+0x244>)
 800ef5c:	2f6f      	cmp	r7, #111	; 0x6f
 800ef5e:	bf0c      	ite	eq
 800ef60:	2308      	moveq	r3, #8
 800ef62:	230a      	movne	r3, #10
 800ef64:	2100      	movs	r1, #0
 800ef66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef6a:	6865      	ldr	r5, [r4, #4]
 800ef6c:	60a5      	str	r5, [r4, #8]
 800ef6e:	2d00      	cmp	r5, #0
 800ef70:	bfa2      	ittt	ge
 800ef72:	6821      	ldrge	r1, [r4, #0]
 800ef74:	f021 0104 	bicge.w	r1, r1, #4
 800ef78:	6021      	strge	r1, [r4, #0]
 800ef7a:	b90e      	cbnz	r6, 800ef80 <_printf_i+0x118>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	d04d      	beq.n	800f01c <_printf_i+0x1b4>
 800ef80:	4615      	mov	r5, r2
 800ef82:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef86:	fb03 6711 	mls	r7, r3, r1, r6
 800ef8a:	5dc7      	ldrb	r7, [r0, r7]
 800ef8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef90:	4637      	mov	r7, r6
 800ef92:	42bb      	cmp	r3, r7
 800ef94:	460e      	mov	r6, r1
 800ef96:	d9f4      	bls.n	800ef82 <_printf_i+0x11a>
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	d10b      	bne.n	800efb4 <_printf_i+0x14c>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	07de      	lsls	r6, r3, #31
 800efa0:	d508      	bpl.n	800efb4 <_printf_i+0x14c>
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	6861      	ldr	r1, [r4, #4]
 800efa6:	4299      	cmp	r1, r3
 800efa8:	bfde      	ittt	le
 800efaa:	2330      	movle	r3, #48	; 0x30
 800efac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800efb4:	1b52      	subs	r2, r2, r5
 800efb6:	6122      	str	r2, [r4, #16]
 800efb8:	f8cd a000 	str.w	sl, [sp]
 800efbc:	464b      	mov	r3, r9
 800efbe:	aa03      	add	r2, sp, #12
 800efc0:	4621      	mov	r1, r4
 800efc2:	4640      	mov	r0, r8
 800efc4:	f7ff fee2 	bl	800ed8c <_printf_common>
 800efc8:	3001      	adds	r0, #1
 800efca:	d14c      	bne.n	800f066 <_printf_i+0x1fe>
 800efcc:	f04f 30ff 	mov.w	r0, #4294967295
 800efd0:	b004      	add	sp, #16
 800efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd6:	4835      	ldr	r0, [pc, #212]	; (800f0ac <_printf_i+0x244>)
 800efd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800efdc:	6829      	ldr	r1, [r5, #0]
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	f851 6b04 	ldr.w	r6, [r1], #4
 800efe4:	6029      	str	r1, [r5, #0]
 800efe6:	061d      	lsls	r5, r3, #24
 800efe8:	d514      	bpl.n	800f014 <_printf_i+0x1ac>
 800efea:	07df      	lsls	r7, r3, #31
 800efec:	bf44      	itt	mi
 800efee:	f043 0320 	orrmi.w	r3, r3, #32
 800eff2:	6023      	strmi	r3, [r4, #0]
 800eff4:	b91e      	cbnz	r6, 800effe <_printf_i+0x196>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	f023 0320 	bic.w	r3, r3, #32
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	2310      	movs	r3, #16
 800f000:	e7b0      	b.n	800ef64 <_printf_i+0xfc>
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	f043 0320 	orr.w	r3, r3, #32
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	2378      	movs	r3, #120	; 0x78
 800f00c:	4828      	ldr	r0, [pc, #160]	; (800f0b0 <_printf_i+0x248>)
 800f00e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f012:	e7e3      	b.n	800efdc <_printf_i+0x174>
 800f014:	0659      	lsls	r1, r3, #25
 800f016:	bf48      	it	mi
 800f018:	b2b6      	uxthmi	r6, r6
 800f01a:	e7e6      	b.n	800efea <_printf_i+0x182>
 800f01c:	4615      	mov	r5, r2
 800f01e:	e7bb      	b.n	800ef98 <_printf_i+0x130>
 800f020:	682b      	ldr	r3, [r5, #0]
 800f022:	6826      	ldr	r6, [r4, #0]
 800f024:	6961      	ldr	r1, [r4, #20]
 800f026:	1d18      	adds	r0, r3, #4
 800f028:	6028      	str	r0, [r5, #0]
 800f02a:	0635      	lsls	r5, r6, #24
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	d501      	bpl.n	800f034 <_printf_i+0x1cc>
 800f030:	6019      	str	r1, [r3, #0]
 800f032:	e002      	b.n	800f03a <_printf_i+0x1d2>
 800f034:	0670      	lsls	r0, r6, #25
 800f036:	d5fb      	bpl.n	800f030 <_printf_i+0x1c8>
 800f038:	8019      	strh	r1, [r3, #0]
 800f03a:	2300      	movs	r3, #0
 800f03c:	6123      	str	r3, [r4, #16]
 800f03e:	4615      	mov	r5, r2
 800f040:	e7ba      	b.n	800efb8 <_printf_i+0x150>
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	1d1a      	adds	r2, r3, #4
 800f046:	602a      	str	r2, [r5, #0]
 800f048:	681d      	ldr	r5, [r3, #0]
 800f04a:	6862      	ldr	r2, [r4, #4]
 800f04c:	2100      	movs	r1, #0
 800f04e:	4628      	mov	r0, r5
 800f050:	f7f1 f8be 	bl	80001d0 <memchr>
 800f054:	b108      	cbz	r0, 800f05a <_printf_i+0x1f2>
 800f056:	1b40      	subs	r0, r0, r5
 800f058:	6060      	str	r0, [r4, #4]
 800f05a:	6863      	ldr	r3, [r4, #4]
 800f05c:	6123      	str	r3, [r4, #16]
 800f05e:	2300      	movs	r3, #0
 800f060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f064:	e7a8      	b.n	800efb8 <_printf_i+0x150>
 800f066:	6923      	ldr	r3, [r4, #16]
 800f068:	462a      	mov	r2, r5
 800f06a:	4649      	mov	r1, r9
 800f06c:	4640      	mov	r0, r8
 800f06e:	47d0      	blx	sl
 800f070:	3001      	adds	r0, #1
 800f072:	d0ab      	beq.n	800efcc <_printf_i+0x164>
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	079b      	lsls	r3, r3, #30
 800f078:	d413      	bmi.n	800f0a2 <_printf_i+0x23a>
 800f07a:	68e0      	ldr	r0, [r4, #12]
 800f07c:	9b03      	ldr	r3, [sp, #12]
 800f07e:	4298      	cmp	r0, r3
 800f080:	bfb8      	it	lt
 800f082:	4618      	movlt	r0, r3
 800f084:	e7a4      	b.n	800efd0 <_printf_i+0x168>
 800f086:	2301      	movs	r3, #1
 800f088:	4632      	mov	r2, r6
 800f08a:	4649      	mov	r1, r9
 800f08c:	4640      	mov	r0, r8
 800f08e:	47d0      	blx	sl
 800f090:	3001      	adds	r0, #1
 800f092:	d09b      	beq.n	800efcc <_printf_i+0x164>
 800f094:	3501      	adds	r5, #1
 800f096:	68e3      	ldr	r3, [r4, #12]
 800f098:	9903      	ldr	r1, [sp, #12]
 800f09a:	1a5b      	subs	r3, r3, r1
 800f09c:	42ab      	cmp	r3, r5
 800f09e:	dcf2      	bgt.n	800f086 <_printf_i+0x21e>
 800f0a0:	e7eb      	b.n	800f07a <_printf_i+0x212>
 800f0a2:	2500      	movs	r5, #0
 800f0a4:	f104 0619 	add.w	r6, r4, #25
 800f0a8:	e7f5      	b.n	800f096 <_printf_i+0x22e>
 800f0aa:	bf00      	nop
 800f0ac:	0800f33d 	.word	0x0800f33d
 800f0b0:	0800f34e 	.word	0x0800f34e

0800f0b4 <__retarget_lock_acquire_recursive>:
 800f0b4:	4770      	bx	lr

0800f0b6 <__retarget_lock_release_recursive>:
 800f0b6:	4770      	bx	lr

0800f0b8 <memmove>:
 800f0b8:	4288      	cmp	r0, r1
 800f0ba:	b510      	push	{r4, lr}
 800f0bc:	eb01 0402 	add.w	r4, r1, r2
 800f0c0:	d902      	bls.n	800f0c8 <memmove+0x10>
 800f0c2:	4284      	cmp	r4, r0
 800f0c4:	4623      	mov	r3, r4
 800f0c6:	d807      	bhi.n	800f0d8 <memmove+0x20>
 800f0c8:	1e43      	subs	r3, r0, #1
 800f0ca:	42a1      	cmp	r1, r4
 800f0cc:	d008      	beq.n	800f0e0 <memmove+0x28>
 800f0ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0d6:	e7f8      	b.n	800f0ca <memmove+0x12>
 800f0d8:	4402      	add	r2, r0
 800f0da:	4601      	mov	r1, r0
 800f0dc:	428a      	cmp	r2, r1
 800f0de:	d100      	bne.n	800f0e2 <memmove+0x2a>
 800f0e0:	bd10      	pop	{r4, pc}
 800f0e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0ea:	e7f7      	b.n	800f0dc <memmove+0x24>

0800f0ec <_realloc_r>:
 800f0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f0:	4680      	mov	r8, r0
 800f0f2:	4614      	mov	r4, r2
 800f0f4:	460e      	mov	r6, r1
 800f0f6:	b921      	cbnz	r1, 800f102 <_realloc_r+0x16>
 800f0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	f7ff bc39 	b.w	800e974 <_malloc_r>
 800f102:	b92a      	cbnz	r2, 800f110 <_realloc_r+0x24>
 800f104:	f7ff fbca 	bl	800e89c <_free_r>
 800f108:	4625      	mov	r5, r4
 800f10a:	4628      	mov	r0, r5
 800f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f110:	f000 f81b 	bl	800f14a <_malloc_usable_size_r>
 800f114:	4284      	cmp	r4, r0
 800f116:	4607      	mov	r7, r0
 800f118:	d802      	bhi.n	800f120 <_realloc_r+0x34>
 800f11a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f11e:	d812      	bhi.n	800f146 <_realloc_r+0x5a>
 800f120:	4621      	mov	r1, r4
 800f122:	4640      	mov	r0, r8
 800f124:	f7ff fc26 	bl	800e974 <_malloc_r>
 800f128:	4605      	mov	r5, r0
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d0ed      	beq.n	800f10a <_realloc_r+0x1e>
 800f12e:	42bc      	cmp	r4, r7
 800f130:	4622      	mov	r2, r4
 800f132:	4631      	mov	r1, r6
 800f134:	bf28      	it	cs
 800f136:	463a      	movcs	r2, r7
 800f138:	f7ff fb9a 	bl	800e870 <memcpy>
 800f13c:	4631      	mov	r1, r6
 800f13e:	4640      	mov	r0, r8
 800f140:	f7ff fbac 	bl	800e89c <_free_r>
 800f144:	e7e1      	b.n	800f10a <_realloc_r+0x1e>
 800f146:	4635      	mov	r5, r6
 800f148:	e7df      	b.n	800f10a <_realloc_r+0x1e>

0800f14a <_malloc_usable_size_r>:
 800f14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14e:	1f18      	subs	r0, r3, #4
 800f150:	2b00      	cmp	r3, #0
 800f152:	bfbc      	itt	lt
 800f154:	580b      	ldrlt	r3, [r1, r0]
 800f156:	18c0      	addlt	r0, r0, r3
 800f158:	4770      	bx	lr
	...

0800f15c <_init>:
 800f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15e:	bf00      	nop
 800f160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f162:	bc08      	pop	{r3}
 800f164:	469e      	mov	lr, r3
 800f166:	4770      	bx	lr

0800f168 <_fini>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	bf00      	nop
 800f16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f16e:	bc08      	pop	{r3}
 800f170:	469e      	mov	lr, r3
 800f172:	4770      	bx	lr
