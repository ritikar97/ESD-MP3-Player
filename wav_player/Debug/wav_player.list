
wav_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca8  08009ca8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cb0  08009cb0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb0  08009cb0  00019cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000814  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  200008a4  200008a4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1c6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000442b  00000000  00000000  0003d286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  000416b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001328  00000000  00000000  00042b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006802  00000000  00000000  00043eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c706  00000000  00000000  0004a6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52cc  00000000  00000000  00066db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c084  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cb8  00000000  00000000  0013c0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b98 	.word	0x08009b98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009b98 	.word	0x08009b98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <delay+0x30>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 80004de:	bf00      	nop
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <delay+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d3f9      	bcc.n	80004e0 <delay+0x14>
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000010c 	.word	0x2000010c

08000500 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	2102      	movs	r1, #2
 8000514:	4820      	ldr	r0, [pc, #128]	; (8000598 <send_to_lcd+0x98>)
 8000516:	f001 f9b9 	bl	800188c <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	08db      	lsrs	r3, r3, #3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	481b      	ldr	r0, [pc, #108]	; (8000598 <send_to_lcd+0x98>)
 800052c:	f001 f9ae 	bl	800188c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4815      	ldr	r0, [pc, #84]	; (8000598 <send_to_lcd+0x98>)
 8000542:	f001 f9a3 	bl	800188c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	2120      	movs	r1, #32
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <send_to_lcd+0x98>)
 8000558:	f001 f998 	bl	800188c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	2110      	movs	r1, #16
 8000568:	480b      	ldr	r0, [pc, #44]	; (8000598 <send_to_lcd+0x98>)
 800056a:	f001 f98f 	bl	800188c <HAL_GPIO_WritePin>
	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	2108      	movs	r1, #8
 8000572:	4809      	ldr	r0, [pc, #36]	; (8000598 <send_to_lcd+0x98>)
 8000574:	f001 f98a 	bl	800188c <HAL_GPIO_WritePin>
    delay (30);
 8000578:	201e      	movs	r0, #30
 800057a:	f7ff ffa7 	bl	80004cc <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <send_to_lcd+0x98>)
 8000584:	f001 f982 	bl	800188c <HAL_GPIO_WritePin>
	delay (30);
 8000588:	201e      	movs	r0, #30
 800058a:	f7ff ff9f 	bl	80004cc <delay>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	091b      	lsrs	r3, r3, #4
 80005aa:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffa5 	bl	8000500 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 030f 	and.w	r3, r3, #15
 80005bc:	73fb      	strb	r3, [r7, #15]
   	send_to_lcd(datatosend, 0);
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff9c 	bl	8000500 <send_to_lcd>

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff8b 	bl	8000500 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff82 	bl	8000500 <send_to_lcd>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <lcd_clear>:

void lcd_clear (void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff ffc7 	bl	800059c <lcd_send_cmd>
	HAL_Delay(2);
 800060e:	2002      	movs	r0, #2
 8000610:	f000 fce0 	bl	8000fd4 <HAL_Delay>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    switch (row)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <lcd_put_cur+0x18>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d005      	beq.n	800063a <lcd_put_cur+0x22>
 800062e:	e009      	b.n	8000644 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000636:	603b      	str	r3, [r7, #0]
            break;
 8000638:	e004      	b.n	8000644 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000640:	603b      	str	r3, [r7, #0]
            break;
 8000642:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa7 	bl	800059c <lcd_send_cmd>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <lcd_init>:

void lcd_init (void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
	// 4 bit initialisation

	HAL_Delay(50);  // wait for >40ms
 800065a:	2032      	movs	r0, #50	; 0x32
 800065c:	f000 fcba 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000660:	2030      	movs	r0, #48	; 0x30
 8000662:	f7ff ff9b 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000666:	2005      	movs	r0, #5
 8000668:	f000 fcb4 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800066c:	2030      	movs	r0, #48	; 0x30
 800066e:	f7ff ff95 	bl	800059c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fcae 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000678:	2030      	movs	r0, #48	; 0x30
 800067a:	f7ff ff8f 	bl	800059c <lcd_send_cmd>
	HAL_Delay(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f000 fca8 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000684:	2020      	movs	r0, #32
 8000686:	f7ff ff89 	bl	800059c <lcd_send_cmd>
	HAL_Delay(10);
 800068a:	200a      	movs	r0, #10
 800068c:	f000 fca2 	bl	8000fd4 <HAL_Delay>


  // display initialization
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000690:	2028      	movs	r0, #40	; 0x28
 8000692:	f7ff ff83 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5);
 8000696:	2005      	movs	r0, #5
 8000698:	f000 fc9c 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800069c:	2008      	movs	r0, #8
 800069e:	f7ff ff7d 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5);
 80006a2:	2005      	movs	r0, #5
 80006a4:	f000 fc96 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff77 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fc90 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006b4:	2006      	movs	r0, #6
 80006b6:	f7ff ff71 	bl	800059c <lcd_send_cmd>
	HAL_Delay(5);
 80006ba:	2005      	movs	r0, #5
 80006bc:	f000 fc8a 	bl	8000fd4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006c0:	200c      	movs	r0, #12
 80006c2:	f7ff ff6b 	bl	800059c <lcd_send_cmd>

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}

080006ca <lcd_send_string>:


void lcd_send_string (char *str)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006d2:	e006      	b.n	80006e2 <lcd_send_string+0x18>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff77 	bl	80005d0 <lcd_send_data>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <lcd_send_string+0xa>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d103      	bne.n	800070c <HAL_GPIO_EXTI_Callback+0x18>
		printf("Button 1 pressed\r\n");
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <HAL_GPIO_EXTI_Callback+0x48>)
 8000706:	f008 fe97 	bl	8009438 <puts>
		// decrease the current volume by 5db
		//uint8_t iData[2];
		//CS43_GetVolumn(iData);
		//CS43_SetVolume(iData[1] - 5);
	}
}
 800070a:	e013      	b.n	8000734 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin == GPIO_PIN_2){
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d103      	bne.n	800071a <HAL_GPIO_EXTI_Callback+0x26>
		printf("Button 2 pressed\r\n");
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000714:	f008 fe90 	bl	8009438 <puts>
}
 8000718:	e00c      	b.n	8000734 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin == GPIO_PIN_3){
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d103      	bne.n	8000728 <HAL_GPIO_EXTI_Callback+0x34>
		printf("Button 3 pressed\r\n");
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_GPIO_EXTI_Callback+0x50>)
 8000722:	f008 fe89 	bl	8009438 <puts>
}
 8000726:	e005      	b.n	8000734 <HAL_GPIO_EXTI_Callback+0x40>
	else if(GPIO_Pin == GPIO_PIN_4){
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	2b10      	cmp	r3, #16
 800072c:	d102      	bne.n	8000734 <HAL_GPIO_EXTI_Callback+0x40>
		printf("Button 4 pressed\r\n");
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_GPIO_EXTI_Callback+0x54>)
 8000730:	f008 fe82 	bl	8009438 <puts>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08009bb0 	.word	0x08009bb0
 8000740:	08009bc4 	.word	0x08009bc4
 8000744:	08009bd8 	.word	0x08009bd8
 8000748:	08009bec 	.word	0x08009bec

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fbce 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f826 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f926 	bl	80009a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800075c:	f000 f904 	bl	8000968 <MX_DMA_Init>
  //MX_I2C1_Init();
  //MX_I2S3_Init();
  MX_FATFS_Init();
 8000760:	f005 f846 	bl	80057f0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000764:	f008 f9b8 	bl	8008ad8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f8d4 	bl	8000914 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800076c:	f000 f882 	bl	8000874 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <main+0x4c>)
 8000772:	f003 f9af 	bl	8003ad4 <HAL_TIM_Base_Start>

  lcd_init ();
 8000776:	f7ff ff6e 	bl	8000656 <lcd_init>
  lcd_clear();
 800077a:	f7ff ff43 	bl	8000604 <lcd_clear>
  lcd_put_cur(0, 0);
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff49 	bl	8000618 <lcd_put_cur>
  lcd_send_string("MINI ");
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <main+0x50>)
 8000788:	f7ff ff9f 	bl	80006ca <lcd_send_string>
  lcd_send_string("MP3 Player ");
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <main+0x54>)
 800078e:	f7ff ff9c 	bl	80006ca <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000792:	f008 f9c7 	bl	8008b24 <MX_USB_HOST_Process>
 8000796:	e7fc      	b.n	8000792 <main+0x46>
 8000798:	2000010c 	.word	0x2000010c
 800079c:	08009c00 	.word	0x08009c00
 80007a0:	08009c08 	.word	0x08009c08

080007a4 <SystemClock_Config>:
    Error_Handler();
  }
}
#else
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f008 fcea 	bl	800918c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <SystemClock_Config+0xc8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <SystemClock_Config+0xc8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <SystemClock_Config+0xc8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <SystemClock_Config+0xcc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a20      	ldr	r2, [pc, #128]	; (8000870 <SystemClock_Config+0xcc>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemClock_Config+0xcc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000800:	2301      	movs	r3, #1
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000818:	2348      	movs	r3, #72	; 0x48
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000820:	2303      	movs	r3, #3
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fc6b 	bl	8003104 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 f98a 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fecd 	bl	80035f4 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000860:	f000 f974 	bl	8000b4c <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM1_Init+0x98>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_TIM1_Init+0x9c>)
 8000894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM1_Init+0x98>)
 8000898:	2247      	movs	r2, #71	; 0x47
 800089a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_TIM1_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM1_Init+0x98>)
 80008a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_TIM1_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008bc:	4813      	ldr	r0, [pc, #76]	; (800090c <MX_TIM1_Init+0x98>)
 80008be:	f003 f8b9 	bl	8003a34 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008c8:	f000 f940 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM1_Init+0x98>)
 80008da:	f003 f963 	bl	8003ba4 <HAL_TIM_ConfigClockSource>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008e4:	f000 f932 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM1_Init+0x98>)
 80008f6:	f003 fb57 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 f924 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000010c 	.word	0x2000010c
 8000910:	40010000 	.word	0x40010000

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART2_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800094c:	f003 fba8 	bl	80040a0 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f8f9 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000154 	.word	0x20000154
 8000964:	40004400 	.word	0x40004400

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_DMA_Init+0x3c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2010      	movs	r0, #16
 8000990:	f000 fc1f 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000994:	2010      	movs	r0, #16
 8000996:	f000 fc38 	bl	800120a <HAL_NVIC_EnableIRQ>

}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <MX_GPIO_Init+0x16c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <MX_GPIO_Init+0x16c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4832      	ldr	r0, [pc, #200]	; (8000b18 <MX_GPIO_Init+0x170>)
 8000a50:	f000 ff1c 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000a54:	2200      	movs	r2, #0
 8000a56:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8000a5a:	4830      	ldr	r0, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x174>)
 8000a5c:	f000 ff16 	bl	800188c <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4828      	ldr	r0, [pc, #160]	; (8000b18 <MX_GPIO_Init+0x170>)
 8000a78:	f000 fd6c 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4824      	ldr	r0, [pc, #144]	; (8000b20 <MX_GPIO_Init+0x178>)
 8000a90:	f000 fd60 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000a94:	231e      	movs	r3, #30
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a98:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481e      	ldr	r0, [pc, #120]	; (8000b24 <MX_GPIO_Init+0x17c>)
 8000aaa:	f000 fd53 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000aae:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8000ab2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4815      	ldr	r0, [pc, #84]	; (8000b1c <MX_GPIO_Init+0x174>)
 8000ac8:	f000 fd44 	bl	8001554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2007      	movs	r0, #7
 8000ad2:	f000 fb7e 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fb97 	bl	800120a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f000 fb76 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ae6:	2008      	movs	r0, #8
 8000ae8:	f000 fb8f 	bl	800120a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2009      	movs	r0, #9
 8000af2:	f000 fb6e 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000af6:	2009      	movs	r0, #9
 8000af8:	f000 fb87 	bl	800120a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	200a      	movs	r0, #10
 8000b02:	f000 fb66 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f000 fb7f 	bl	800120a <HAL_NVIC_EnableIRQ>

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400

08000b28 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b30:	1d39      	adds	r1, r7, #4
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2201      	movs	r2, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <__io_putchar+0x20>)
 8000b3a:	f003 fafe 	bl	800413a <HAL_UART_Transmit>
  return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000154 	.word	0x20000154

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fb10 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10d      	bne.n	8000bd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <HAL_TIM_Base_MspInit+0x40>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40010000 	.word	0x40010000
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <HAL_UART_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12b      	bne.n	8000c66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c46:	230c      	movs	r3, #12
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c56:	2307      	movs	r3, #7
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x8c>)
 8000c62:	f000 fc77 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004400 	.word	0x40004400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f964 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f000 fdf3 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ce2:	2004      	movs	r0, #4
 8000ce4:	f000 fdec 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000cf0:	2008      	movs	r0, #8
 8000cf2:	f000 fde5 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000cfe:	2010      	movs	r0, #16
 8000d00:	f000 fdde 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <DMA1_Stream5_IRQHandler+0x10>)
 8000d0e:	f000 fa97 	bl	8001240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200000ac 	.word	0x200000ac

08000d1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <OTG_FS_IRQHandler+0x10>)
 8000d22:	f001 f84f 	bl	8001dc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000590 	.word	0x20000590

08000d30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e009      	b.n	8000d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fecf 	bl	8000b28 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf1      	blt.n	8000d7c <_write+0x12>
	}
	return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f008 f95e 	bl	80090fc <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00002000 	.word	0x00002000
 8000e70:	20000198 	.word	0x20000198
 8000e74:	200008a8 	.word	0x200008a8

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f008 f91d 	bl	8009108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fc3d 	bl	800074c <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ee0:	08009cb8 	.word	0x08009cb8
  ldr r2, =_sbss
 8000ee4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ee8:	200008a4 	.word	0x200008a4

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f94f 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe18 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f967 	bl	8001226 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f92f 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000019c 	.word	0x2000019c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000019c 	.word	0x2000019c

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff3e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff31 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800124c:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_DMA_IRQHandler+0x248>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a8e      	ldr	r2, [pc, #568]	; (800148c <HAL_DMA_IRQHandler+0x24c>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126a:	2208      	movs	r2, #8
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d01a      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	f043 0201 	orr.w	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2201      	movs	r2, #1
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d012      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2201      	movs	r2, #1
 80012d0:	409a      	lsls	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	f043 0202 	orr.w	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2204      	movs	r2, #4
 80012e8:	409a      	lsls	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d012      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	2204      	movs	r2, #4
 8001306:	409a      	lsls	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	f043 0204 	orr.w	r2, r3, #4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2210      	movs	r2, #16
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d043      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03c      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2210      	movs	r2, #16
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d018      	beq.n	8001382 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d108      	bne.n	8001370 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d024      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	e01f      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
 8001380:	e016      	b.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0208 	bic.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2220      	movs	r2, #32
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 808f 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8087 	beq.w	80014e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2220      	movs	r2, #32
 80013d8:	409a      	lsls	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d136      	bne.n	8001458 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0216 	bic.w	r2, r2, #22
 80013f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001408:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_DMA_IRQHandler+0x1da>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0208 	bic.w	r2, r2, #8
 8001428:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	223f      	movs	r2, #63	; 0x3f
 8001430:	409a      	lsls	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	2b00      	cmp	r3, #0
 800144c:	d07e      	beq.n	800154c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
        }
        return;
 8001456:	e079      	b.n	800154c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10d      	bne.n	8001490 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	2b00      	cmp	r3, #0
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
 8001484:	e02c      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
 8001486:	bf00      	nop
 8001488:	20000000 	.word	0x20000000
 800148c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e01e      	b.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0210 	bic.w	r2, r2, #16
 80014be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d032      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d022      	beq.n	800153a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2205      	movs	r2, #5
 80014f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3301      	adds	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	d307      	bcc.n	8001528 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f2      	bne.n	800150c <HAL_DMA_IRQHandler+0x2cc>
 8001526:	e000      	b.n	800152a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001528:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e000      	b.n	800154e <HAL_DMA_IRQHandler+0x30e>
        return;
 800154c:	bf00      	nop
    }
  }
}
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e16b      	b.n	8001848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 815a 	bne.w	8001842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d130      	bne.n	8001608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 0201 	and.w	r2, r3, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b03      	cmp	r3, #3
 8001612:	d017      	beq.n	8001644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d123      	bne.n	8001698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0203 	and.w	r2, r3, #3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80b4 	beq.w	8001842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b60      	ldr	r3, [pc, #384]	; (8001860 <HAL_GPIO_Init+0x30c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a5f      	ldr	r2, [pc, #380]	; (8001860 <HAL_GPIO_Init+0x30c>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_GPIO_Init+0x30c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f6:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <HAL_GPIO_Init+0x310>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_GPIO_Init+0x314>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d02b      	beq.n	800177a <HAL_GPIO_Init+0x226>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_GPIO_Init+0x318>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d025      	beq.n	8001776 <HAL_GPIO_Init+0x222>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a50      	ldr	r2, [pc, #320]	; (8001870 <HAL_GPIO_Init+0x31c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d01f      	beq.n	8001772 <HAL_GPIO_Init+0x21e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_GPIO_Init+0x320>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d019      	beq.n	800176e <HAL_GPIO_Init+0x21a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_GPIO_Init+0x324>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0x216>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_GPIO_Init+0x328>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_Init+0x212>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x32c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x20e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_GPIO_Init+0x330>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_Init+0x20a>
 800175a:	2307      	movs	r3, #7
 800175c:	e00e      	b.n	800177c <HAL_GPIO_Init+0x228>
 800175e:	2308      	movs	r3, #8
 8001760:	e00c      	b.n	800177c <HAL_GPIO_Init+0x228>
 8001762:	2306      	movs	r3, #6
 8001764:	e00a      	b.n	800177c <HAL_GPIO_Init+0x228>
 8001766:	2305      	movs	r3, #5
 8001768:	e008      	b.n	800177c <HAL_GPIO_Init+0x228>
 800176a:	2304      	movs	r3, #4
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x228>
 800176e:	2303      	movs	r3, #3
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x228>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x228>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x228>
 800177a:	2300      	movs	r3, #0
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f002 0203 	and.w	r2, r2, #3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178c:	4935      	ldr	r1, [pc, #212]	; (8001864 <HAL_GPIO_Init+0x310>)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_GPIO_Init+0x334>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017be:	4a32      	ldr	r2, [pc, #200]	; (8001888 <HAL_GPIO_Init+0x334>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <HAL_GPIO_Init+0x334>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e8:	4a27      	ldr	r2, [pc, #156]	; (8001888 <HAL_GPIO_Init+0x334>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ee:	4b26      	ldr	r3, [pc, #152]	; (8001888 <HAL_GPIO_Init+0x334>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001812:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_GPIO_Init+0x334>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_GPIO_Init+0x334>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_GPIO_Init+0x334>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	f67f ae90 	bls.w	8001570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40013800 	.word	0x40013800
 8001868:	40020000 	.word	0x40020000
 800186c:	40020400 	.word	0x40020400
 8001870:	40020800 	.word	0x40020800
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40021000 	.word	0x40021000
 800187c:	40021400 	.word	0x40021400
 8001880:	40021800 	.word	0x40021800
 8001884:	40021c00 	.word	0x40021c00
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ff08 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b08f      	sub	sp, #60	; 0x3c
 80018f4:	af0a      	add	r7, sp, #40	; 0x28
 80018f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e054      	b.n	80019ac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f007 f939 	bl	8008b94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2203      	movs	r2, #3
 8001926:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 ffe1 	bl	8004908 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	687e      	ldr	r6, [r7, #4]
 800194e:	466d      	mov	r5, sp
 8001950:	f106 0410 	add.w	r4, r6, #16
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001960:	e885 0003 	stmia.w	r5, {r0, r1}
 8001964:	1d33      	adds	r3, r6, #4
 8001966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f002 ff5b 	bl	8004824 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ffd8 	bl	800492a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	687e      	ldr	r6, [r7, #4]
 8001982:	466d      	mov	r5, sp
 8001984:	f106 0410 	add.w	r4, r6, #16
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001994:	e885 0003 	stmia.w	r5, {r0, r1}
 8001998:	1d33      	adds	r3, r6, #4
 800199a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f003 f961 	bl	8004c64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	70fb      	strb	r3, [r7, #3]
 80019c6:	460b      	mov	r3, r1
 80019c8:	70bb      	strb	r3, [r7, #2]
 80019ca:	4613      	mov	r3, r2
 80019cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_HCD_HC_Init+0x28>
 80019d8:	2302      	movs	r3, #2
 80019da:	e076      	b.n	8001aca <HAL_HCD_HC_Init+0x116>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	333d      	adds	r3, #61	; 0x3d
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	212c      	movs	r1, #44	; 0x2c
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	3338      	adds	r3, #56	; 0x38
 8001a04:	787a      	ldrb	r2, [r7, #1]
 8001a06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3340      	adds	r3, #64	; 0x40
 8001a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a18:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3339      	adds	r3, #57	; 0x39
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	333f      	adds	r3, #63	; 0x3f
 8001a3a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	78ba      	ldrb	r2, [r7, #2]
 8001a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a48:	b2d0      	uxtb	r0, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	333a      	adds	r3, #58	; 0x3a
 8001a56:	4602      	mov	r2, r0
 8001a58:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da09      	bge.n	8001a76 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	333b      	adds	r3, #59	; 0x3b
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e008      	b.n	8001a88 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	333b      	adds	r3, #59	; 0x3b
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	333c      	adds	r3, #60	; 0x3c
 8001a96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a9a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	787c      	ldrb	r4, [r7, #1]
 8001aa2:	78ba      	ldrb	r2, [r7, #2]
 8001aa4:	78f9      	ldrb	r1, [r7, #3]
 8001aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f003 fa5a 	bl	8004f70 <USB_HC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}

08001ad2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_HCD_HC_Halt+0x1e>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e00f      	b.n	8001b10 <HAL_HCD_HC_Halt+0x3e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fcaa 	bl	800545a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	70fb      	strb	r3, [r7, #3]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70bb      	strb	r3, [r7, #2]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	333b      	adds	r3, #59	; 0x3b
 8001b40:	78ba      	ldrb	r2, [r7, #2]
 8001b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	333f      	adds	r3, #63	; 0x3f
 8001b52:	787a      	ldrb	r2, [r7, #1]
 8001b54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b56:	7c3b      	ldrb	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d112      	bne.n	8001b82 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	333d      	adds	r3, #61	; 0x3d
 8001b7c:	7f3a      	ldrb	r2, [r7, #28]
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e008      	b.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	212c      	movs	r1, #44	; 0x2c
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3342      	adds	r3, #66	; 0x42
 8001b90:	2202      	movs	r2, #2
 8001b92:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	f200 80c6 	bhi.w	8001d28 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001d15 	.word	0x08001d15
 8001bac:	08001c19 	.word	0x08001c19
 8001bb0:	08001c97 	.word	0x08001c97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bb4:	7c3b      	ldrb	r3, [r7, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	f040 80b8 	bne.w	8001d2c <HAL_HCD_HC_SubmitRequest+0x214>
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 80b4 	bne.w	8001d2c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bc4:	8b3b      	ldrh	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3355      	adds	r3, #85	; 0x55
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	212c      	movs	r1, #44	; 0x2c
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	3355      	adds	r3, #85	; 0x55
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d109      	bne.n	8001c04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3342      	adds	r3, #66	; 0x42
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c02:	e093      	b.n	8001d2c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3342      	adds	r3, #66	; 0x42
 8001c12:	2202      	movs	r2, #2
 8001c14:	701a      	strb	r2, [r3, #0]
      break;
 8001c16:	e089      	b.n	8001d2c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c18:	78bb      	ldrb	r3, [r7, #2]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d11d      	bne.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	3355      	adds	r3, #85	; 0x55
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3342      	adds	r3, #66	; 0x42
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c44:	e073      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3342      	adds	r3, #66	; 0x42
 8001c54:	2202      	movs	r2, #2
 8001c56:	701a      	strb	r2, [r3, #0]
      break;
 8001c58:	e069      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3354      	adds	r3, #84	; 0x54
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3342      	adds	r3, #66	; 0x42
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
      break;
 8001c80:	e055      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3342      	adds	r3, #66	; 0x42
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
      break;
 8001c94:	e04b      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d11d      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3355      	adds	r3, #85	; 0x55
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	3342      	adds	r3, #66	; 0x42
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cc2:	e034      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
      break;
 8001cd6:	e02a      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3354      	adds	r3, #84	; 0x54
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3342      	adds	r3, #66	; 0x42
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
      break;
 8001cfe:	e016      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3342      	adds	r3, #66	; 0x42
 8001d0e:	2202      	movs	r2, #2
 8001d10:	701a      	strb	r2, [r3, #0]
      break;
 8001d12:	e00c      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3342      	adds	r3, #66	; 0x42
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d28:	bf00      	nop
 8001d2a:	e000      	b.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d2c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3344      	adds	r3, #68	; 0x44
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	8b3a      	ldrh	r2, [r7, #24]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	202c      	movs	r0, #44	; 0x2c
 8001d48:	fb00 f303 	mul.w	r3, r0, r3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	334c      	adds	r3, #76	; 0x4c
 8001d50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	212c      	movs	r1, #44	; 0x2c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3360      	adds	r3, #96	; 0x60
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3350      	adds	r3, #80	; 0x50
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3339      	adds	r3, #57	; 0x39
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3361      	adds	r3, #97	; 0x61
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	222c      	movs	r2, #44	; 0x2c
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	3338      	adds	r3, #56	; 0x38
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	18d1      	adds	r1, r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	f003 f9fe 	bl	80051b4 <USB_HC_StartXfer>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop

08001dc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 feff 	bl	8004bde <USB_GetMode>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	f040 80f6 	bne.w	8001fd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 fee3 	bl	8004bb8 <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ec 	beq.w	8001fd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 feda 	bl	8004bb8 <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e0e:	d104      	bne.n	8001e1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 feca 	bl	8004bb8 <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e2e:	d104      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 feba 	bl	8004bb8 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e4e:	d104      	bne.n	8001e5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 feaa 	bl	8004bb8 <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d103      	bne.n	8001e76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 fe9c 	bl	8004bb8 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	6938      	ldr	r0, [r7, #16]
 8001eaa:	f002 fd8b 	bl	80049c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001eae:	6938      	ldr	r0, [r7, #16]
 8001eb0:	f002 fdbc 	bl	8004a2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 ff92 	bl	8004de4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f006 fee5 	bl	8008c90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fe74 	bl	8004bb8 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eda:	d102      	bne.n	8001ee2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f001 f89e 	bl	800301e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fe66 	bl	8004bb8 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d106      	bne.n	8001f04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f006 feae 	bl	8008c58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2208      	movs	r2, #8
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fe55 	bl	8004bb8 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d101      	bne.n	8001f1c <HAL_HCD_IRQHandler+0x158>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_HCD_IRQHandler+0x15a>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0210 	bic.w	r2, r2, #16
 8001f30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 ffa1 	bl	8002e7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0210 	orr.w	r2, r2, #16
 8001f46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fe33 	bl	8004bb8 <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f5c:	d13a      	bne.n	8001fd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fa68 	bl	8005438 <USB_HC_ReadInterrupt>
 8001f68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e025      	b.n	8001fbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d018      	beq.n	8001fb6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9a:	d106      	bne.n	8001faa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ab 	bl	80020fe <HCD_HC_IN_IRQHandler>
 8001fa8:	e005      	b.n	8001fb6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fbf9 	bl	80027a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3d4      	bcc.n	8001f70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	615a      	str	r2, [r3, #20]
 8001fd0:	e000      	b.n	8001fd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001fd2:	bf00      	nop
    }
  }
}
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_HCD_Start+0x16>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e013      	b.n	8002018 <HAL_HCD_Start+0x3e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 ff54 	bl	8004eac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fc6c 	bl	80048e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_HCD_Stop+0x16>
 8002032:	2302      	movs	r3, #2
 8002034:	e00d      	b.n	8002052 <HAL_HCD_Stop+0x32>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fb42 	bl	80056cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fef6 	bl	8004e58 <USB_ResetPort>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	460b      	mov	r3, r1
 8002080:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3360      	adds	r3, #96	; 0x60
 8002090:	781b      	ldrb	r3, [r3, #0]
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3350      	adds	r3, #80	; 0x50
 80020b8:	681b      	ldr	r3, [r3, #0]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 ff3a 	bl	8004f4c <USB_GetCurrentFrame>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 ff15 	bl	8004f1e <USB_GetHostSpeed>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d11a      	bne.n	8002164 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	461a      	mov	r2, r3
 800213c:	2304      	movs	r3, #4
 800213e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3361      	adds	r3, #97	; 0x61
 800214e:	2206      	movs	r2, #6
 8002150:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 f97c 	bl	800545a <USB_HC_Halt>
 8002162:	e0af      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d11b      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	2207      	movs	r2, #7
 80021a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 f954 	bl	800545a <USB_HC_Halt>
 80021b2:	e087      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d109      	bne.n	80021de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2320      	movs	r3, #32
 80021da:	6093      	str	r3, [r2, #8]
 80021dc:	e072      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d11a      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	2308      	movs	r3, #8
 8002204:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3361      	adds	r3, #97	; 0x61
 8002214:	2205      	movs	r2, #5
 8002216:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f919 	bl	800545a <USB_HC_Halt>
 8002228:	e04c      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d11b      	bne.n	800227a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002254:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3361      	adds	r3, #97	; 0x61
 8002264:	2208      	movs	r2, #8
 8002266:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 f8f1 	bl	800545a <USB_HC_Halt>
 8002278:	e024      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d119      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229c:	461a      	mov	r2, r3
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3361      	adds	r3, #97	; 0x61
 80022b0:	2206      	movs	r2, #6
 80022b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 f8cb 	bl	800545a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022da:	d112      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 f8b7 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002300:	e24e      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	f040 80df 	bne.w	80024d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d019      	beq.n	8002356 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3348      	adds	r3, #72	; 0x48
 8002330:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	0159      	lsls	r1, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	440b      	add	r3, r1
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002344:	1ad2      	subs	r2, r2, r3
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	202c      	movs	r0, #44	; 0x2c
 800234c:	fb00 f303 	mul.w	r3, r0, r3
 8002350:	440b      	add	r3, r1
 8002352:	3350      	adds	r3, #80	; 0x50
 8002354:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3361      	adds	r3, #97	; 0x61
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	335c      	adds	r3, #92	; 0x5c
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2301      	movs	r3, #1
 800238a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333f      	adds	r3, #63	; 0x3f
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d111      	bne.n	80023d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f84b 	bl	800545a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	461a      	mov	r2, r3
 80023d2:	2310      	movs	r3, #16
 80023d4:	6093      	str	r3, [r2, #8]
 80023d6:	e03a      	b.n	800244e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d009      	beq.n	8002400 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	333f      	adds	r3, #63	; 0x3f
 80023fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d126      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	0151      	lsls	r1, r2, #5
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	440a      	add	r2, r1
 8002416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800241e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	b2d9      	uxtb	r1, r3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	202c      	movs	r0, #44	; 0x2c
 800243c:	fb00 f303 	mul.w	r3, r0, r3
 8002440:	4413      	add	r3, r2
 8002442:	3360      	adds	r3, #96	; 0x60
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f006 fc2f 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d12b      	bne.n	80024ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3348      	adds	r3, #72	; 0x48
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	202c      	movs	r0, #44	; 0x2c
 800246c:	fb00 f202 	mul.w	r2, r0, r2
 8002470:	440a      	add	r2, r1
 8002472:	3240      	adds	r2, #64	; 0x40
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	fbb3 f3f2 	udiv	r3, r3, r2
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 818e 	beq.w	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3354      	adds	r3, #84	; 0x54
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3354      	adds	r3, #84	; 0x54
 80024a8:	4602      	mov	r2, r0
 80024aa:	701a      	strb	r2, [r3, #0]
}
 80024ac:	e178      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3354      	adds	r3, #84	; 0x54
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2d8      	uxtb	r0, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3354      	adds	r3, #84	; 0x54
 80024d2:	4602      	mov	r2, r0
 80024d4:	701a      	strb	r2, [r3, #0]
}
 80024d6:	e163      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 80f6 	bne.w	80026dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d109      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e0c9      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3361      	adds	r3, #97	; 0x61
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d109      	bne.n	8002540 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	2205      	movs	r2, #5
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e0b5      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3361      	adds	r3, #97	; 0x61
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d009      	beq.n	8002568 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3361      	adds	r3, #97	; 0x61
 8002562:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002564:	2b08      	cmp	r3, #8
 8002566:	d150      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	335c      	adds	r3, #92	; 0x5c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	202c      	movs	r0, #44	; 0x2c
 8002580:	fb00 f303 	mul.w	r3, r0, r3
 8002584:	440b      	add	r3, r1
 8002586:	335c      	adds	r3, #92	; 0x5c
 8002588:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	335c      	adds	r3, #92	; 0x5c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d912      	bls.n	80025c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	335c      	adds	r3, #92	; 0x5c
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025c2:	e073      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3360      	adds	r3, #96	; 0x60
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002608:	e050      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3361      	adds	r3, #97	; 0x61
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d122      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	2202      	movs	r2, #2
 800262e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002646:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e023      	b.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	3361      	adds	r3, #97	; 0x61
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b07      	cmp	r3, #7
 8002676:	d119      	bne.n	80026ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	335c      	adds	r3, #92	; 0x5c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	202c      	movs	r0, #44	; 0x2c
 8002690:	fb00 f303 	mul.w	r3, r0, r3
 8002694:	440b      	add	r3, r1
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	2204      	movs	r2, #4
 80026aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2302      	movs	r3, #2
 80026bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	b2d9      	uxtb	r1, r3
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	202c      	movs	r0, #44	; 0x2c
 80026c8:	fb00 f303 	mul.w	r3, r0, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3360      	adds	r3, #96	; 0x60
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f006 fae9 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026da:	e061      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d156      	bne.n	80027a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333f      	adds	r3, #63	; 0x3f
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d111      	bne.n	800272a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fe99 	bl	800545a <USB_HC_Halt>
 8002728:	e031      	b.n	800278e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333f      	adds	r3, #63	; 0x3f
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274e:	2b02      	cmp	r3, #2
 8002750:	d11d      	bne.n	800278e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d110      	bne.n	800278e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3361      	adds	r3, #97	; 0x61
 800277a:	2203      	movs	r2, #3
 800277c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fe66 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2310      	movs	r3, #16
 800279e:	6093      	str	r3, [r2, #8]
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11a      	bne.n	800280e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2304      	movs	r3, #4
 80027e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3361      	adds	r3, #97	; 0x61
 80027f8:	2206      	movs	r2, #6
 80027fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fe27 	bl	800545a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800280c:	e331      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d12e      	bne.n	8002882 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2320      	movs	r3, #32
 8002834:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	333d      	adds	r3, #61	; 0x3d
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	f040 8313 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	333d      	adds	r3, #61	; 0x3d
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3360      	adds	r3, #96	; 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fded 	bl	800545a <USB_HC_Halt>
}
 8002880:	e2f7      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d112      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 fdce 	bl	800545a <USB_HC_Halt>
}
 80028be:	e2d8      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d140      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d111      	bne.n	8002922 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333d      	adds	r3, #61	; 0x3d
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	2301      	movs	r3, #1
 8002932:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	3361      	adds	r3, #97	; 0x61
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f002 fd82 	bl	800545a <USB_HC_Halt>
}
 8002956:	e28c      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d12c      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3361      	adds	r3, #97	; 0x61
 800297c:	2204      	movs	r2, #4
 800297e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	333d      	adds	r3, #61	; 0x3d
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	335c      	adds	r3, #92	; 0x5c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fd53 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	2340      	movs	r3, #64	; 0x40
 80029c4:	6093      	str	r3, [r2, #8]
}
 80029c6:	e254      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d11a      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2308      	movs	r3, #8
 80029ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	2205      	movs	r2, #5
 8002a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fd24 	bl	800545a <USB_HC_Halt>
}
 8002a12:	e22e      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d140      	bne.n	8002aac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	335c      	adds	r3, #92	; 0x5c
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3361      	adds	r3, #97	; 0x61
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	333c      	adds	r3, #60	; 0x3c
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	333d      	adds	r3, #61	; 0x3d
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fce1 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	6093      	str	r3, [r2, #8]
}
 8002aaa:	e1e2      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d164      	bne.n	8002b8c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d111      	bne.n	8002aee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	2206      	movs	r2, #6
 8002ada:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fcb7 	bl	800545a <USB_HC_Halt>
 8002aec:	e044      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	335c      	adds	r3, #92	; 0x5c
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d920      	bls.n	8002b66 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	335c      	adds	r3, #92	; 0x5c
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3360      	adds	r3, #96	; 0x60
 8002b44:	2204      	movs	r2, #4
 8002b46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	b2d9      	uxtb	r1, r3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3360      	adds	r3, #96	; 0x60
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f006 f8a4 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b64:	e008      	b.n	8002b78 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3360      	adds	r3, #96	; 0x60
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	6093      	str	r3, [r2, #8]
}
 8002b8a:	e172      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d11b      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3361      	adds	r3, #97	; 0x61
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fc4a 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd8:	6093      	str	r3, [r2, #8]
}
 8002bda:	e14a      	b.n	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	f040 813f 	bne.w	8002e72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	; 0x61
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d17d      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3360      	adds	r3, #96	; 0x60
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	333f      	adds	r3, #63	; 0x3f
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d00a      	beq.n	8002c44 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	333f      	adds	r3, #63	; 0x3f
 8002c3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	f040 8100 	bne.w	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d113      	bne.n	8002c74 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3355      	adds	r3, #85	; 0x55
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2d8      	uxtb	r0, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3355      	adds	r3, #85	; 0x55
 8002c70:	4602      	mov	r2, r0
 8002c72:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 80e3 	bne.w	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	334c      	adds	r3, #76	; 0x4c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80d8 	beq.w	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	334c      	adds	r3, #76	; 0x4c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	202c      	movs	r0, #44	; 0x2c
 8002caa:	fb00 f202 	mul.w	r2, r0, r2
 8002cae:	440a      	add	r2, r1
 8002cb0:	3240      	adds	r2, #64	; 0x40
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	202c      	movs	r0, #44	; 0x2c
 8002cbe:	fb00 f202 	mul.w	r2, r0, r2
 8002cc2:	440a      	add	r2, r1
 8002cc4:	3240      	adds	r2, #64	; 0x40
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80b5 	beq.w	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3355      	adds	r3, #85	; 0x55
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f083 0301 	eor.w	r3, r3, #1
 8002cee:	b2d8      	uxtb	r0, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3355      	adds	r3, #85	; 0x55
 8002cfe:	4602      	mov	r2, r0
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e09f      	b.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d109      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3360      	adds	r3, #96	; 0x60
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e08b      	b.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3361      	adds	r3, #97	; 0x61
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d109      	bne.n	8002d54 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3360      	adds	r3, #96	; 0x60
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e077      	b.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d109      	bne.n	8002d7c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	2205      	movs	r2, #5
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e063      	b.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d009      	beq.n	8002da4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3361      	adds	r3, #97	; 0x61
 8002d9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d14f      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	335c      	adds	r3, #92	; 0x5c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d912      	bls.n	8002e00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3360      	adds	r3, #96	; 0x60
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e021      	b.n	8002e44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3360      	adds	r3, #96	; 0x60
 8002e0e:	2202      	movs	r2, #2
 8002e10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	461a      	mov	r2, r3
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2302      	movs	r3, #2
 8002e54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	b2d9      	uxtb	r1, r3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	202c      	movs	r0, #44	; 0x2c
 8002e60:	fb00 f303 	mul.w	r3, r0, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3360      	adds	r3, #96	; 0x60
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f005 ff1d 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e72:	bf00      	nop
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b08a      	sub	sp, #40	; 0x28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	0c5b      	lsrs	r3, r3, #17
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d004      	beq.n	8002ec0 <HCD_RXQLVL_IRQHandler+0x46>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	f000 80a9 	beq.w	8003010 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ebe:	e0aa      	b.n	8003016 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80a6 	beq.w	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3344      	adds	r3, #68	; 0x44
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 809b 	beq.w	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3350      	adds	r3, #80	; 0x50
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	441a      	add	r2, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	202c      	movs	r0, #44	; 0x2c
 8002ef8:	fb00 f303 	mul.w	r3, r0, r3
 8002efc:	440b      	add	r3, r1
 8002efe:	334c      	adds	r3, #76	; 0x4c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d87a      	bhi.n	8002ffc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3344      	adds	r3, #68	; 0x44
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f001 fdf2 	bl	8004b08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3344      	adds	r3, #68	; 0x44
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	441a      	add	r2, r3
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	202c      	movs	r0, #44	; 0x2c
 8002f3e:	fb00 f303 	mul.w	r3, r0, r3
 8002f42:	440b      	add	r3, r1
 8002f44:	3344      	adds	r3, #68	; 0x44
 8002f46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3350      	adds	r3, #80	; 0x50
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	441a      	add	r2, r3
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	202c      	movs	r0, #44	; 0x2c
 8002f62:	fb00 f303 	mul.w	r3, r0, r3
 8002f66:	440b      	add	r3, r1
 8002f68:	3350      	adds	r3, #80	; 0x50
 8002f6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	0cdb      	lsrs	r3, r3, #19
 8002f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3340      	adds	r3, #64	; 0x40
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d13c      	bne.n	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d039      	beq.n	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3354      	adds	r3, #84	; 0x54
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	f083 0301 	eor.w	r3, r3, #1
 8002fe6:	b2d8      	uxtb	r0, r3
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3354      	adds	r3, #84	; 0x54
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	e00b      	b.n	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	2204      	movs	r2, #4
 800300c:	701a      	strb	r2, [r3, #0]
      break;
 800300e:	e001      	b.n	8003014 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003010:	bf00      	nop
 8003012:	e000      	b.n	8003016 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003014:	bf00      	nop
  }
}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800304a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d10b      	bne.n	800306e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f005 fe07 	bl	8008c74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b08      	cmp	r3, #8
 8003076:	d132      	bne.n	80030de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d126      	bne.n	80030d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d113      	bne.n	80030ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309c:	d106      	bne.n	80030ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2102      	movs	r1, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fe9d 	bl	8004de4 <USB_InitFSLSPClkSel>
 80030aa:	e011      	b.n	80030d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fe96 	bl	8004de4 <USB_InitFSLSPClkSel>
 80030b8:	e00a      	b.n	80030d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c8:	461a      	mov	r2, r3
 80030ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f005 fdf9 	bl	8008cc8 <HAL_HCD_PortEnabled_Callback>
 80030d6:	e002      	b.n	80030de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f005 fe03 	bl	8008ce4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d103      	bne.n	80030f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e267      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d075      	beq.n	800320e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00c      	beq.n	8003148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313a:	4b82      	ldr	r3, [pc, #520]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	4b7e      	ldr	r3, [pc, #504]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05b      	beq.n	800320c <HAL_RCC_OscConfig+0x108>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d157      	bne.n	800320c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e242      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d106      	bne.n	8003178 <HAL_RCC_OscConfig+0x74>
 800316a:	4b76      	ldr	r3, [pc, #472]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a75      	ldr	r2, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0x98>
 8003182:	4b70      	ldr	r3, [pc, #448]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6f      	ldr	r2, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b6d      	ldr	r3, [pc, #436]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a6c      	ldr	r2, [pc, #432]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xb0>
 800319c:	4b69      	ldr	r3, [pc, #420]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a68      	ldr	r2, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b66      	ldr	r3, [pc, #408]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a65      	ldr	r2, [pc, #404]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd fefe 	bl	8000fbc <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fd fefa 	bl	8000fbc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e207      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xc0>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fd feea 	bl	8000fbc <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd fee6 	bl	8000fbc <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e1f3      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0xe8>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800321a:	4b4a      	ldr	r3, [pc, #296]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b44      	ldr	r3, [pc, #272]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b41      	ldr	r3, [pc, #260]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1c7      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4937      	ldr	r1, [pc, #220]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e03a      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_OscConfig+0x244>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fd fe9f 	bl	8000fbc <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003282:	f7fd fe9b 	bl	8000fbc <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e1a8      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a0:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4925      	ldr	r1, [pc, #148]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCC_OscConfig+0x244>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd fe7e 	bl	8000fbc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c4:	f7fd fe7a 	bl	8000fbc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e187      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d036      	beq.n	800335c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d016      	beq.n	8003324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <HAL_RCC_OscConfig+0x248>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fd fe5e 	bl	8000fbc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003304:	f7fd fe5a 	bl	8000fbc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e167      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_OscConfig+0x240>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x200>
 8003322:	e01b      	b.n	800335c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_RCC_OscConfig+0x248>)
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7fd fe47 	bl	8000fbc <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	e00e      	b.n	8003350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003332:	f7fd fe43 	bl	8000fbc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d907      	bls.n	8003350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e150      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
 8003344:	40023800 	.word	0x40023800
 8003348:	42470000 	.word	0x42470000
 800334c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ea      	bne.n	8003332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8097 	beq.w	8003498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b7d      	ldr	r3, [pc, #500]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b7a      	ldr	r3, [pc, #488]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b77      	ldr	r3, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x474>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b74      	ldr	r3, [pc, #464]	; (8003578 <HAL_RCC_OscConfig+0x474>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a73      	ldr	r2, [pc, #460]	; (8003578 <HAL_RCC_OscConfig+0x474>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fd fe03 	bl	8000fbc <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fd fdff 	bl	8000fbc <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e10c      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_OscConfig+0x474>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x2ea>
 80033e0:	4b64      	ldr	r3, [pc, #400]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a63      	ldr	r2, [pc, #396]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	e01c      	b.n	8003428 <HAL_RCC_OscConfig+0x324>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x30c>
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a5e      	ldr	r2, [pc, #376]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a5b      	ldr	r2, [pc, #364]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0x324>
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	4a57      	ldr	r2, [pc, #348]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	; 0x70
 800341c:	4b55      	ldr	r3, [pc, #340]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fd fdc4 	bl	8000fbc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fd fdc0 	bl	8000fbc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0cb      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0ee      	beq.n	8003438 <HAL_RCC_OscConfig+0x334>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345c:	f7fd fdae 	bl	8000fbc <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fd fdaa 	bl	8000fbc <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0b5      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347a:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ee      	bne.n	8003464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	4a38      	ldr	r2, [pc, #224]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a1 	beq.w	80035e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d05c      	beq.n	8003568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d141      	bne.n	800353a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_RCC_OscConfig+0x478>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fd7e 	bl	8000fbc <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fd fd7a 	bl	8000fbc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e087      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	4b27      	ldr	r3, [pc, #156]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	019b      	lsls	r3, r3, #6
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	491b      	ldr	r1, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 8003508:	4313      	orrs	r3, r2
 800350a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCC_OscConfig+0x478>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fd53 	bl	8000fbc <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fd4f 	bl	8000fbc <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e05c      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x416>
 8003538:	e054      	b.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_RCC_OscConfig+0x478>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fd fd3c 	bl	8000fbc <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fd fd38 	bl	8000fbc <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e045      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_OscConfig+0x470>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x444>
 8003566:	e03d      	b.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e038      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000
 800357c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003580:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_RCC_OscConfig+0x4ec>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d028      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003598:	429a      	cmp	r2, r3
 800359a:	d121      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d11a      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035b0:	4013      	ands	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cc      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90c      	bls.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b65      	ldr	r3, [pc, #404]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a52      	ldr	r2, [pc, #328]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e067      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4934      	ldr	r1, [pc, #208]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fc6a 	bl	8000fbc <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd fc66 	bl	8000fbc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d20c      	bcs.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f821 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fbca 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08009c18 	.word	0x08009c18
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b094      	sub	sp, #80	; 0x50
 80037c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
 80037cc:	2300      	movs	r3, #0
 80037ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d8:	4b79      	ldr	r3, [pc, #484]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d00d      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x40>
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	f200 80e1 	bhi.w	80039ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x3a>
 80037f2:	e0db      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b73      	ldr	r3, [pc, #460]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037f8:	e0db      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037fa:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037fe:	e0d8      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800380a:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	2200      	movs	r2, #0
 800381e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003820:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003828:	633b      	str	r3, [r7, #48]	; 0x30
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
 800382e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4621      	mov	r1, r4
 800384c:	1a51      	subs	r1, r2, r1
 800384e:	6139      	str	r1, [r7, #16]
 8003850:	4629      	mov	r1, r5
 8003852:	eb63 0301 	sbc.w	r3, r3, r1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003864:	4659      	mov	r1, fp
 8003866:	018b      	lsls	r3, r1, #6
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386e:	4651      	mov	r1, sl
 8003870:	018a      	lsls	r2, r1, #6
 8003872:	4651      	mov	r1, sl
 8003874:	ebb2 0801 	subs.w	r8, r2, r1
 8003878:	4659      	mov	r1, fp
 800387a:	eb63 0901 	sbc.w	r9, r3, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800388a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800388e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	4623      	mov	r3, r4
 8003898:	eb18 0303 	adds.w	r3, r8, r3
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	462b      	mov	r3, r5
 80038a0:	eb49 0303 	adc.w	r3, r9, r3
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038b2:	4629      	mov	r1, r5
 80038b4:	024b      	lsls	r3, r1, #9
 80038b6:	4621      	mov	r1, r4
 80038b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038bc:	4621      	mov	r1, r4
 80038be:	024a      	lsls	r2, r1, #9
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c6:	2200      	movs	r2, #0
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038d0:	f7fc fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4613      	mov	r3, r2
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	e058      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	2200      	movs	r2, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	4611      	mov	r1, r2
 80038ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	f04f 0000 	mov.w	r0, #0
 8003900:	f04f 0100 	mov.w	r1, #0
 8003904:	0159      	lsls	r1, r3, #5
 8003906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800390a:	0150      	lsls	r0, r2, #5
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4641      	mov	r1, r8
 8003912:	ebb2 0a01 	subs.w	sl, r2, r1
 8003916:	4649      	mov	r1, r9
 8003918:	eb63 0b01 	sbc.w	fp, r3, r1
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800392c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003930:	ebb2 040a 	subs.w	r4, r2, sl
 8003934:	eb63 050b 	sbc.w	r5, r3, fp
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	464b      	mov	r3, r9
 8003954:	eb45 0303 	adc.w	r3, r5, r3
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003966:	4629      	mov	r1, r5
 8003968:	028b      	lsls	r3, r1, #10
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003970:	4621      	mov	r1, r4
 8003972:	028a      	lsls	r2, r1, #10
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	61fa      	str	r2, [r7, #28]
 8003980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003984:	f7fc fc20 	bl	80001c8 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039aa:	e002      	b.n	80039b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3750      	adds	r7, #80	; 0x50
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000000 	.word	0x20000000

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a9b      	lsrs	r3, r3, #10
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	08009c28 	.word	0x08009c28

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a10:	f7ff ffdc 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0b5b      	lsrs	r3, r3, #13
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08009c28 	.word	0x08009c28

08003a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd f8a4 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 f95e 	bl	8003d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e046      	b.n	8003b7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <HAL_TIM_Base_Start+0xb4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d01d      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_TIM_Base_Start+0xb8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_TIM_Base_Start+0xbc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_TIM_Base_Start+0xc0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_Start+0xc4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_TIM_Base_Start+0xc8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start+0x70>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_TIM_Base_Start+0xcc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d010      	beq.n	8003b78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800

08003ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0b4      	b.n	8003d2a <HAL_TIM_ConfigClockSource+0x186>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf8:	d03e      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xd4>
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfe:	f200 8087 	bhi.w	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	f000 8086 	beq.w	8003d16 <HAL_TIM_ConfigClockSource+0x172>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	d87f      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b70      	cmp	r3, #112	; 0x70
 8003c12:	d01a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xa6>
 8003c14:	2b70      	cmp	r3, #112	; 0x70
 8003c16:	d87b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b60      	cmp	r3, #96	; 0x60
 8003c1a:	d050      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x11a>
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d877      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b50      	cmp	r3, #80	; 0x50
 8003c22:	d03c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xfa>
 8003c24:	2b50      	cmp	r3, #80	; 0x50
 8003c26:	d873      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d058      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x13a>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d86f      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b30      	cmp	r3, #48	; 0x30
 8003c32:	d064      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d86b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d060      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d867      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05c      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d05a      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c48:	e062      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f000 f985 	bl	8003f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]
      break;
 8003c76:	e04f      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 f96e 	bl	8003f68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e03c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 f8e2 	bl	8003e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2150      	movs	r1, #80	; 0x50
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f93b 	bl	8003f32 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e02c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f901 	bl	8003ed2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2160      	movs	r1, #96	; 0x60
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f92b 	bl	8003f32 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e01c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8c2 	bl	8003e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f91b 	bl	8003f32 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 f912 	bl	8003f32 <TIM_ITRx_SetConfig>
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e000      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a40      	ldr	r2, [pc, #256]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d00f      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <TIM_Base_SetConfig+0x118>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <TIM_Base_SetConfig+0x11c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <TIM_Base_SetConfig+0x120>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3a      	ldr	r2, [pc, #232]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2f      	ldr	r2, [pc, #188]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d027      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <TIM_Base_SetConfig+0x118>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d023      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <TIM_Base_SetConfig+0x11c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01f      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <TIM_Base_SetConfig+0x120>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a29      	ldr	r2, [pc, #164]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d017      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <TIM_Base_SetConfig+0x128>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <TIM_Base_SetConfig+0x12c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00f      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <TIM_Base_SetConfig+0x130>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0x134>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <TIM_Base_SetConfig+0x138>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <TIM_Base_SetConfig+0x13c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <TIM_Base_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0xf8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <TIM_Base_SetConfig+0x124>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d103      	bne.n	8003e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	615a      	str	r2, [r3, #20]
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40010400 	.word	0x40010400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800
 8003e68:	40001800 	.word	0x40001800
 8003e6c:	40001c00 	.word	0x40001c00
 8003e70:	40002000 	.word	0x40002000

08003e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 030a 	bic.w	r3, r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b087      	sub	sp, #28
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f043 0307 	orr.w	r3, r3, #7
 8003f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	021a      	lsls	r2, r3, #8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e05a      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d01d      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40010400 	.word	0x40010400
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800

080040a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e03f      	b.n	8004132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fd90 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	; 0x24
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f929 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08a      	sub	sp, #40	; 0x28
 800413e:	af02      	add	r7, sp, #8
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b20      	cmp	r3, #32
 8004158:	d17c      	bne.n	8004254 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Transmit+0x2c>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e075      	b.n	8004256 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Transmit+0x3e>
 8004174:	2302      	movs	r3, #2
 8004176:	e06e      	b.n	8004256 <HAL_UART_Transmit+0x11c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2221      	movs	r2, #33	; 0x21
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fc ff15 	bl	8000fbc <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d108      	bne.n	80041bc <HAL_UART_Transmit+0x82>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e003      	b.n	80041c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041cc:	e02a      	b.n	8004224 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f840 	bl	800425e <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e036      	b.n	8004256 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	3302      	adds	r3, #2
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	e007      	b.n	8004216 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1cf      	bne.n	80041ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2200      	movs	r2, #0
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f810 	bl	800425e <UART_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e006      	b.n	8004256 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b090      	sub	sp, #64	; 0x40
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4613      	mov	r3, r2
 800426c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426e:	e050      	b.n	8004312 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d04c      	beq.n	8004312 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x30>
 800427e:	f7fc fe9d 	bl	8000fbc <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800428a:	429a      	cmp	r2, r3
 800428c:	d241      	bcs.n	8004312 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ae:	637a      	str	r2, [r7, #52]	; 0x34
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e5      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	613b      	str	r3, [r7, #16]
   return(result);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042e2:	623a      	str	r2, [r7, #32]
 80042e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	69f9      	ldr	r1, [r7, #28]
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e5      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e00f      	b.n	8004332 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	429a      	cmp	r2, r3
 800432e:	d09f      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3740      	adds	r7, #64	; 0x40
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b0c0      	sub	sp, #256	; 0x100
 8004342:	af00      	add	r7, sp, #0
 8004344:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	68d9      	ldr	r1, [r3, #12]
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	ea40 0301 	orr.w	r3, r0, r1
 8004364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	431a      	orrs	r2, r3
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004394:	f021 010c 	bic.w	r1, r1, #12
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a2:	430b      	orrs	r3, r1
 80043a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	ea40 0301 	orr.w	r3, r0, r1
 80043c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b8f      	ldr	r3, [pc, #572]	; (8004608 <UART_SetConfig+0x2cc>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <UART_SetConfig+0xa0>
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b8d      	ldr	r3, [pc, #564]	; (800460c <UART_SetConfig+0x2d0>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043dc:	f7ff fb16 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 80043e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043e4:	e003      	b.n	80043ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7ff fafd 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 80043ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f8:	f040 810c 	bne.w	8004614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004406:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800440a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800440e:	4622      	mov	r2, r4
 8004410:	462b      	mov	r3, r5
 8004412:	1891      	adds	r1, r2, r2
 8004414:	65b9      	str	r1, [r7, #88]	; 0x58
 8004416:	415b      	adcs	r3, r3
 8004418:	65fb      	str	r3, [r7, #92]	; 0x5c
 800441a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800441e:	4621      	mov	r1, r4
 8004420:	eb12 0801 	adds.w	r8, r2, r1
 8004424:	4629      	mov	r1, r5
 8004426:	eb43 0901 	adc.w	r9, r3, r1
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443e:	4690      	mov	r8, r2
 8004440:	4699      	mov	r9, r3
 8004442:	4623      	mov	r3, r4
 8004444:	eb18 0303 	adds.w	r3, r8, r3
 8004448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800444c:	462b      	mov	r3, r5
 800444e:	eb49 0303 	adc.w	r3, r9, r3
 8004452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004462:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800446a:	460b      	mov	r3, r1
 800446c:	18db      	adds	r3, r3, r3
 800446e:	653b      	str	r3, [r7, #80]	; 0x50
 8004470:	4613      	mov	r3, r2
 8004472:	eb42 0303 	adc.w	r3, r2, r3
 8004476:	657b      	str	r3, [r7, #84]	; 0x54
 8004478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800447c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004480:	f7fb fea2 	bl	80001c8 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b61      	ldr	r3, [pc, #388]	; (8004610 <UART_SetConfig+0x2d4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800449c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80044ac:	415b      	adcs	r3, r3
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044b4:	4641      	mov	r1, r8
 80044b6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb43 0b01 	adc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d4:	4692      	mov	sl, r2
 80044d6:	469b      	mov	fp, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	eb1a 0303 	adds.w	r3, sl, r3
 80044de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e2:	464b      	mov	r3, r9
 80044e4:	eb4b 0303 	adc.w	r3, fp, r3
 80044e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004500:	460b      	mov	r3, r1
 8004502:	18db      	adds	r3, r3, r3
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
 8004506:	4613      	mov	r3, r2
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
 800450e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004516:	f7fb fe57 	bl	80001c8 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4611      	mov	r1, r2
 8004520:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2301 	umull	r2, r3, r3, r1
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2264      	movs	r2, #100	; 0x64
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	1acb      	subs	r3, r1, r3
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004536:	4b36      	ldr	r3, [pc, #216]	; (8004610 <UART_SetConfig+0x2d4>)
 8004538:	fba3 2302 	umull	r2, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004550:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004560:	415b      	adcs	r3, r3
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6339      	str	r1, [r7, #48]	; 0x30
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045bc:	460b      	mov	r3, r1
 80045be:	18db      	adds	r3, r3, r3
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c2:	4613      	mov	r3, r2
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045d2:	f7fb fdf9 	bl	80001c8 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <UART_SetConfig+0x2d4>)
 80045dc:	fba3 1302 	umull	r1, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	2164      	movs	r1, #100	; 0x64
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	3332      	adds	r3, #50	; 0x32
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <UART_SetConfig+0x2d4>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	f003 0207 	and.w	r2, r3, #7
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4422      	add	r2, r4
 8004602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004604:	e105      	b.n	8004812 <UART_SetConfig+0x4d6>
 8004606:	bf00      	nop
 8004608:	40011000 	.word	0x40011000
 800460c:	40011400 	.word	0x40011400
 8004610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004618:	2200      	movs	r2, #0
 800461a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800461e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	1891      	adds	r1, r2, r2
 800462c:	6239      	str	r1, [r7, #32]
 800462e:	415b      	adcs	r3, r3
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004636:	4641      	mov	r1, r8
 8004638:	1854      	adds	r4, r2, r1
 800463a:	4649      	mov	r1, r9
 800463c:	eb43 0501 	adc.w	r5, r3, r1
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	00eb      	lsls	r3, r5, #3
 800464a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4643      	mov	r3, r8
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800465c:	464b      	mov	r3, r9
 800465e:	eb45 0303 	adc.w	r3, r5, r3
 8004662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004672:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004682:	4629      	mov	r1, r5
 8004684:	008b      	lsls	r3, r1, #2
 8004686:	4621      	mov	r1, r4
 8004688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800468c:	4621      	mov	r1, r4
 800468e:	008a      	lsls	r2, r1, #2
 8004690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004694:	f7fb fd98 	bl	80001c8 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4b60      	ldr	r3, [pc, #384]	; (8004820 <UART_SetConfig+0x4e4>)
 800469e:	fba3 2302 	umull	r2, r3, r3, r2
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	011c      	lsls	r4, r3, #4
 80046a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046b8:	4642      	mov	r2, r8
 80046ba:	464b      	mov	r3, r9
 80046bc:	1891      	adds	r1, r2, r2
 80046be:	61b9      	str	r1, [r7, #24]
 80046c0:	415b      	adcs	r3, r3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c8:	4641      	mov	r1, r8
 80046ca:	1851      	adds	r1, r2, r1
 80046cc:	6139      	str	r1, [r7, #16]
 80046ce:	4649      	mov	r1, r9
 80046d0:	414b      	adcs	r3, r1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e0:	4659      	mov	r1, fp
 80046e2:	00cb      	lsls	r3, r1, #3
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ea:	4651      	mov	r1, sl
 80046ec:	00ca      	lsls	r2, r1, #3
 80046ee:	4610      	mov	r0, r2
 80046f0:	4619      	mov	r1, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	4642      	mov	r2, r8
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046fc:	464b      	mov	r3, r9
 80046fe:	460a      	mov	r2, r1
 8004700:	eb42 0303 	adc.w	r3, r2, r3
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	67bb      	str	r3, [r7, #120]	; 0x78
 8004712:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004720:	4649      	mov	r1, r9
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	4641      	mov	r1, r8
 8004726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472a:	4641      	mov	r1, r8
 800472c:	008a      	lsls	r2, r1, #2
 800472e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004732:	f7fb fd49 	bl	80001c8 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <UART_SetConfig+0x4e4>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	3332      	adds	r3, #50	; 0x32
 800474e:	4a34      	ldr	r2, [pc, #208]	; (8004820 <UART_SetConfig+0x4e4>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475a:	441c      	add	r4, r3
 800475c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004760:	2200      	movs	r2, #0
 8004762:	673b      	str	r3, [r7, #112]	; 0x70
 8004764:	677a      	str	r2, [r7, #116]	; 0x74
 8004766:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800476a:	4642      	mov	r2, r8
 800476c:	464b      	mov	r3, r9
 800476e:	1891      	adds	r1, r2, r2
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	415b      	adcs	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477a:	4641      	mov	r1, r8
 800477c:	1851      	adds	r1, r2, r1
 800477e:	6039      	str	r1, [r7, #0]
 8004780:	4649      	mov	r1, r9
 8004782:	414b      	adcs	r3, r1
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004792:	4659      	mov	r1, fp
 8004794:	00cb      	lsls	r3, r1, #3
 8004796:	4651      	mov	r1, sl
 8004798:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479c:	4651      	mov	r1, sl
 800479e:	00ca      	lsls	r2, r1, #3
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	4603      	mov	r3, r0
 80047a6:	4642      	mov	r2, r8
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ac:	464b      	mov	r3, r9
 80047ae:	460a      	mov	r2, r1
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	663b      	str	r3, [r7, #96]	; 0x60
 80047c0:	667a      	str	r2, [r7, #100]	; 0x64
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047ce:	4649      	mov	r1, r9
 80047d0:	008b      	lsls	r3, r1, #2
 80047d2:	4641      	mov	r1, r8
 80047d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d8:	4641      	mov	r1, r8
 80047da:	008a      	lsls	r2, r1, #2
 80047dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047e0:	f7fb fcf2 	bl	80001c8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <UART_SetConfig+0x4e4>)
 80047ea:	fba3 1302 	umull	r1, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2164      	movs	r1, #100	; 0x64
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a08      	ldr	r2, [pc, #32]	; (8004820 <UART_SetConfig+0x4e4>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4422      	add	r2, r4
 8004810:	609a      	str	r2, [r3, #8]
}
 8004812:	bf00      	nop
 8004814:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481e:	bf00      	nop
 8004820:	51eb851f 	.word	0x51eb851f

08004824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004824:	b084      	sub	sp, #16
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	f107 001c 	add.w	r0, r7, #28
 8004832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	d122      	bne.n	8004882 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9c0 	bl	8004bfc <USB_CoreReset>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e01a      	b.n	80048b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9b4 	bl	8004bfc <USB_CoreReset>
 8004894:	4603      	mov	r3, r0
 8004896:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
 80048aa:	e005      	b.n	80048b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10b      	bne.n	80048d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f043 0206 	orr.w	r2, r3, #6
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e2:	b004      	add	sp, #16
 80048e4:	4770      	bx	lr

080048e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 0201 	bic.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d115      	bne.n	8004978 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004958:	2001      	movs	r0, #1
 800495a:	f7fc fb3b 	bl	8000fd4 <HAL_Delay>
      ms++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3301      	adds	r3, #1
 8004962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f93a 	bl	8004bde <USB_GetMode>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d01e      	beq.n	80049ae <USB_SetCurrentMode+0x84>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b31      	cmp	r3, #49	; 0x31
 8004974:	d9f0      	bls.n	8004958 <USB_SetCurrentMode+0x2e>
 8004976:	e01a      	b.n	80049ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d115      	bne.n	80049aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800498a:	2001      	movs	r0, #1
 800498c:	f7fc fb22 	bl	8000fd4 <HAL_Delay>
      ms++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f921 	bl	8004bde <USB_GetMode>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <USB_SetCurrentMode+0x84>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b31      	cmp	r3, #49	; 0x31
 80049a6:	d9f0      	bls.n	800498a <USB_SetCurrentMode+0x60>
 80049a8:	e001      	b.n	80049ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e005      	b.n	80049ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b32      	cmp	r3, #50	; 0x32
 80049b2:	d101      	bne.n	80049b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3301      	adds	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a13      	ldr	r2, [pc, #76]	; (8004a28 <USB_FlushTxFifo+0x64>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d901      	bls.n	80049e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e01b      	b.n	8004a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	daf2      	bge.n	80049d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	019b      	lsls	r3, r3, #6
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <USB_FlushTxFifo+0x64>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e006      	b.n	8004a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d0f0      	beq.n	80049fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	00030d40 	.word	0x00030d40

08004a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <USB_FlushRxFifo+0x5c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e018      	b.n	8004a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	daf2      	bge.n	8004a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2210      	movs	r2, #16
 8004a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <USB_FlushRxFifo+0x5c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e006      	b.n	8004a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d0f0      	beq.n	8004a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	00030d40 	.word	0x00030d40

08004a8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4611      	mov	r1, r2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	71fb      	strb	r3, [r7, #7]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004aaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d123      	bne.n	8004afa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ab2:	88bb      	ldrh	r3, [r7, #4]
 8004ab4:	3303      	adds	r3, #3
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e018      	b.n	8004af2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	031a      	lsls	r2, r3, #12
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004acc:	461a      	mov	r2, r3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	3301      	adds	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3e2      	bcc.n	8004ac0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3724      	adds	r7, #36	; 0x24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b08b      	sub	sp, #44	; 0x2c
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	e014      	b.n	8004b5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	3301      	adds	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	3301      	adds	r3, #1
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	3301      	adds	r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	3301      	adds	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d3e6      	bcc.n	8004b34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b66:	8bfb      	ldrh	r3, [r7, #30]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01e      	beq.n	8004baa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b76:	461a      	mov	r2, r3
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	701a      	strb	r2, [r3, #0]
      i++;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	3301      	adds	r3, #1
 8004b96:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b9e:	8bfb      	ldrh	r3, [r7, #30]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ba4:	8bfb      	ldrh	r3, [r7, #30]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ea      	bne.n	8004b80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	372c      	adds	r7, #44	; 0x2c
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0301 	and.w	r3, r3, #1
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <USB_CoreReset+0x64>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e01b      	b.n	8004c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	daf2      	bge.n	8004c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <USB_CoreReset+0x64>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e006      	b.n	8004c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d0f0      	beq.n	8004c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	00030d40 	.word	0x00030d40

08004c64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c64:	b084      	sub	sp, #16
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d10a      	bne.n	8004cd6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cce:	f043 0304 	orr.w	r3, r3, #4
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e014      	b.n	8004d00 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e009      	b.n	8004d00 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d00:	2110      	movs	r1, #16
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fe5e 	bl	80049c4 <USB_FlushTxFifo>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fe8a 	bl	8004a2c <USB_FlushRxFifo>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e015      	b.n	8004d54 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	461a      	mov	r2, r3
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3301      	adds	r3, #1
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3e5      	bcc.n	8004d28 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <USB_HostInit+0x16c>)
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <USB_HostInit+0x170>)
 8004d88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d8c:	e009      	b.n	8004da2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <USB_HostInit+0x174>)
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <USB_HostInit+0x178>)
 8004d9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <USB_HostInit+0x17c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dcc:	b004      	add	sp, #16
 8004dce:	4770      	bx	lr
 8004dd0:	01000200 	.word	0x01000200
 8004dd4:	00e00300 	.word	0x00e00300
 8004dd8:	00600080 	.word	0x00600080
 8004ddc:	004000e0 	.word	0x004000e0
 8004de0:	a3200008 	.word	0xa3200008

08004de4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e009      	b.n	8004e4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d106      	bne.n	8004e4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e42:	461a      	mov	r2, r3
 8004e44:	f241 7370 	movw	r3, #6000	; 0x1770
 8004e48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004e88:	2064      	movs	r0, #100	; 0x64
 8004e8a:	f7fc f8a3 	bl	8000fd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004e9c:	200a      	movs	r0, #10
 8004e9e:	f7fc f899 	bl	8000fd4 <HAL_Delay>

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ed0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <USB_DriveVbus+0x44>
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d106      	bne.n	8004ef0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	d109      	bne.n	8004f10 <USB_DriveVbus+0x64>
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f0e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	0c5b      	lsrs	r3, r3, #17
 8004f3c:	f003 0303 	and.w	r3, r3, #3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	b29b      	uxth	r3, r3
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	70fb      	strb	r3, [r7, #3]
 8004f82:	460b      	mov	r3, r1
 8004f84:	70bb      	strb	r3, [r7, #2]
 8004f86:	4613      	mov	r3, r2
 8004f88:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d87e      	bhi.n	80050ac <USB_HC_Init+0x13c>
 8004fae:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <USB_HC_Init+0x44>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	0800506f 	.word	0x0800506f
 8004fbc:	08004fc5 	.word	0x08004fc5
 8004fc0:	08005031 	.word	0x08005031
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f240 439d 	movw	r3, #1181	; 0x49d
 8004fd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004fd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da10      	bge.n	8005002 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005000:	e057      	b.n	80050b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d051      	beq.n	80050b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005028:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800502c:	60d3      	str	r3, [r2, #12]
      break;
 800502e:	e040      	b.n	80050b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005042:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	da34      	bge.n	80050b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	440a      	add	r2, r1
 8005062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800506c:	e023      	b.n	80050b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	f240 2325 	movw	r3, #549	; 0x225
 8005080:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005082:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da17      	bge.n	80050ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050aa:	e006      	b.n	80050ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	77fb      	strb	r3, [r7, #31]
      break;
 80050b0:	e004      	b.n	80050bc <USB_HC_Init+0x14c>
      break;
 80050b2:	bf00      	nop
 80050b4:	e002      	b.n	80050bc <USB_HC_Init+0x14c>
      break;
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <USB_HC_Init+0x14c>
      break;
 80050ba:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2101      	movs	r1, #1
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	6939      	ldr	r1, [r7, #16]
 80050f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050f6:	4313      	orrs	r3, r2
 80050f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005106:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800510a:	2b00      	cmp	r3, #0
 800510c:	da03      	bge.n	8005116 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800510e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e001      	b.n	800511a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff feff 	bl	8004f1e <USB_GetHostSpeed>
 8005120:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005122:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005126:	2b02      	cmp	r3, #2
 8005128:	d106      	bne.n	8005138 <USB_HC_Init+0x1c8>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d003      	beq.n	8005138 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e001      	b.n	800513c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	059b      	lsls	r3, r3, #22
 8005140:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005144:	78bb      	ldrb	r3, [r7, #2]
 8005146:	02db      	lsls	r3, r3, #11
 8005148:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800514c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800514e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005152:	049b      	lsls	r3, r3, #18
 8005154:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005158:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800515a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800515c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005160:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	0159      	lsls	r1, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	440b      	add	r3, r1
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005178:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800517a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800517e:	2b03      	cmp	r3, #3
 8005180:	d003      	beq.n	800518a <USB_HC_Init+0x21a>
 8005182:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10f      	bne.n	80051aa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3720      	adds	r7, #32
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d02d      	beq.n	800523a <USB_HC_StartXfer+0x86>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d129      	bne.n	800523a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d117      	bne.n	800521c <USB_HC_StartXfer+0x68>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	79db      	ldrb	r3, [r3, #7]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <USB_HC_StartXfer+0x48>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	79db      	ldrb	r3, [r3, #7]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d10f      	bne.n	800521c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	440a      	add	r2, r1
 8005212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <USB_HC_StartXfer+0x86>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	795b      	ldrb	r3, [r3, #5]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d107      	bne.n	800523a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	4619      	mov	r1, r3
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fa0f 	bl	8005654 <USB_DoPing>
      return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e0f8      	b.n	800542c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	8912      	ldrh	r2, [r2, #8]
 800524a:	4413      	add	r3, r2
 800524c:	3b01      	subs	r3, #1
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	8912      	ldrh	r2, [r2, #8]
 8005252:	fbb3 f3f2 	udiv	r3, r3, r2
 8005256:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005258:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800525a:	8b7b      	ldrh	r3, [r7, #26]
 800525c:	429a      	cmp	r2, r3
 800525e:	d90b      	bls.n	8005278 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005260:	8b7b      	ldrh	r3, [r7, #26]
 8005262:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	8912      	ldrh	r2, [r2, #8]
 800526a:	fb03 f202 	mul.w	r2, r3, r2
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	611a      	str	r2, [r3, #16]
 8005272:	e001      	b.n	8005278 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	78db      	ldrb	r3, [r3, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	8912      	ldrh	r2, [r2, #8]
 8005286:	fb03 f202 	mul.w	r2, r3, r2
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	611a      	str	r2, [r3, #16]
 800528e:	e003      	b.n	8005298 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052a2:	04d9      	lsls	r1, r3, #19
 80052a4:	4b63      	ldr	r3, [pc, #396]	; (8005434 <USB_HC_StartXfer+0x280>)
 80052a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	7a9b      	ldrb	r3, [r3, #10]
 80052ae:	075b      	lsls	r3, r3, #29
 80052b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	0148      	lsls	r0, r1, #5
 80052b8:	6a39      	ldr	r1, [r7, #32]
 80052ba:	4401      	add	r1, r0
 80052bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	68d9      	ldr	r1, [r3, #12]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	460a      	mov	r2, r1
 80052dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	440a      	add	r2, r1
 800530c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005310:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005314:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	7e7b      	ldrb	r3, [r7, #25]
 8005326:	075b      	lsls	r3, r3, #29
 8005328:	69f9      	ldr	r1, [r7, #28]
 800532a:	0148      	lsls	r0, r1, #5
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	4401      	add	r1, r0
 8005330:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800534e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	78db      	ldrb	r3, [r3, #3]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e003      	b.n	800536a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005368:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005370:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	461a      	mov	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e04e      	b.n	800542c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	78db      	ldrb	r3, [r3, #3]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d149      	bne.n	800542a <USB_HC_StartXfer+0x276>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d045      	beq.n	800542a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	79db      	ldrb	r3, [r3, #7]
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d830      	bhi.n	8005408 <USB_HC_StartXfer+0x254>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <USB_HC_StartXfer+0x1f8>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053e1 	.word	0x080053e1
 80053b4:	080053bd 	.word	0x080053bd
 80053b8:	080053e1 	.word	0x080053e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	3303      	adds	r3, #3
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80053c6:	8afa      	ldrh	r2, [r7, #22]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d91c      	bls.n	800540c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80053de:	e015      	b.n	800540c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	3303      	adds	r3, #3
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053ea:	8afa      	ldrh	r2, [r7, #22]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d90a      	bls.n	8005410 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]
        }
        break;
 8005406:	e003      	b.n	8005410 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <USB_HC_StartXfer+0x25e>
        break;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <USB_HC_StartXfer+0x25e>
        break;
 8005410:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	68d9      	ldr	r1, [r3, #12]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	785a      	ldrb	r2, [r3, #1]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	b29b      	uxth	r3, r3
 8005420:	2000      	movs	r0, #0
 8005422:	9000      	str	r0, [sp, #0]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f7ff fb31 	bl	8004a8c <USB_WritePacket>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3728      	adds	r7, #40	; 0x28
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	1ff80000 	.word	0x1ff80000

08005438 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	b29b      	uxth	r3, r3
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800545a:	b480      	push	{r7}
 800545c:	b089      	sub	sp, #36	; 0x24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	0c9b      	lsrs	r3, r3, #18
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	0fdb      	lsrs	r3, r3, #31
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d104      	bne.n	80054b4 <USB_HC_Halt+0x5a>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e0c8      	b.n	8005646 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <USB_HC_Halt+0x66>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d163      	bne.n	8005588 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 80ab 	bne.w	8005644 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d133      	bne.n	8005562 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005518:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005538:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005546:	d81d      	bhi.n	8005584 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555e:	d0ec      	beq.n	800553a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005560:	e070      	b.n	8005644 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005580:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005582:	e05f      	b.n	8005644 <USB_HC_Halt+0x1ea>
            break;
 8005584:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005586:	e05d      	b.n	8005644 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d133      	bne.n	8005620 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005604:	d81d      	bhi.n	8005642 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d0ec      	beq.n	80055f8 <USB_HC_Halt+0x19e>
 800561e:	e011      	b.n	8005644 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	440a      	add	r2, r1
 8005636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e000      	b.n	8005644 <USB_HC_Halt+0x1ea>
          break;
 8005642:	bf00      	nop
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005668:	2301      	movs	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	04da      	lsls	r2, r3, #19
 8005670:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <USB_DoPing+0x74>)
 8005672:	4013      	ands	r3, r2
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005684:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800569c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	461a      	mov	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	1ff80000 	.word	0x1ff80000

080056cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff f911 	bl	8004908 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056e6:	2110      	movs	r1, #16
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff f96b 	bl	80049c4 <USB_FlushTxFifo>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff f997 	bl	8004a2c <USB_FlushRxFifo>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	e01f      	b.n	800574e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005724:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800572c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005734:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	461a      	mov	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	3301      	adds	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d9dc      	bls.n	800570e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e034      	b.n	80057c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005770:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005778:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005780:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	461a      	mov	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a0:	d80c      	bhi.n	80057bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b8:	d0ec      	beq.n	8005794 <USB_StopHost+0xc8>
 80057ba:	e000      	b.n	80057be <USB_StopHost+0xf2>
        break;
 80057bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d9c7      	bls.n	800575a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d0:	461a      	mov	r2, r3
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff f880 	bl	80048e6 <USB_EnableGlobalInt>

  return ret;
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <MX_FATFS_Init+0x18>)
 80057f6:	4805      	ldr	r0, [pc, #20]	; (800580c <MX_FATFS_Init+0x1c>)
 80057f8:	f003 f95e 	bl	8008ab8 <FATFS_LinkDriver>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <MX_FATFS_Init+0x20>)
 8005802:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200001a4 	.word	0x200001a4
 800580c:	08009c30 	.word	0x08009c30
 8005810:	200001a0 	.word	0x200001a0

08005814 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	4619      	mov	r1, r3
 800583e:	4808      	ldr	r0, [pc, #32]	; (8005860 <USBH_status+0x34>)
 8005840:	f000 fe32 	bl	80064a8 <USBH_MSC_UnitIsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <USBH_status+0x24>
  {
    res = RES_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
 800584e:	e001      	b.n	8005854 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200001b4 	.word	0x200001b4

08005864 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b094      	sub	sp, #80	; 0x50
 8005868:	af02      	add	r7, sp, #8
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4603      	mov	r3, r0
 8005872:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800587a:	7bf9      	ldrb	r1, [r7, #15]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4813      	ldr	r0, [pc, #76]	; (80058d4 <USBH_read+0x70>)
 8005886:	f000 fe59 	bl	800653c <USBH_MSC_Read>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <USBH_read+0x34>
  {
    res = RES_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005896:	e017      	b.n	80058c8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005898:	f107 0210 	add.w	r2, r7, #16
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	4619      	mov	r1, r3
 80058a0:	480c      	ldr	r0, [pc, #48]	; (80058d4 <USBH_read+0x70>)
 80058a2:	f000 fe27 	bl	80064f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80058a6:	7f7b      	ldrb	r3, [r7, #29]
 80058a8:	2b3a      	cmp	r3, #58	; 0x3a
 80058aa:	d005      	beq.n	80058b8 <USBH_read+0x54>
 80058ac:	2b3a      	cmp	r3, #58	; 0x3a
 80058ae:	dc07      	bgt.n	80058c0 <USBH_read+0x5c>
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d001      	beq.n	80058b8 <USBH_read+0x54>
 80058b4:	2b28      	cmp	r3, #40	; 0x28
 80058b6:	d103      	bne.n	80058c0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80058b8:	2303      	movs	r3, #3
 80058ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80058be:	e003      	b.n	80058c8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80058c6:	bf00      	nop
    }
  }

  return res;
 80058c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3748      	adds	r7, #72	; 0x48
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	200001b4 	.word	0x200001b4

080058d8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b094      	sub	sp, #80	; 0x50
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4603      	mov	r3, r0
 80058e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80058ee:	7bf9      	ldrb	r1, [r7, #15]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4817      	ldr	r0, [pc, #92]	; (8005958 <USBH_write+0x80>)
 80058fa:	f000 fe88 	bl	800660e <USBH_MSC_Write>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <USBH_write+0x34>
  {
    res = RES_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800590a:	e01f      	b.n	800594c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800590c:	f107 0210 	add.w	r2, r7, #16
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	4619      	mov	r1, r3
 8005914:	4810      	ldr	r0, [pc, #64]	; (8005958 <USBH_write+0x80>)
 8005916:	f000 fded 	bl	80064f4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800591a:	7f7b      	ldrb	r3, [r7, #29]
 800591c:	2b3a      	cmp	r3, #58	; 0x3a
 800591e:	d00d      	beq.n	800593c <USBH_write+0x64>
 8005920:	2b3a      	cmp	r3, #58	; 0x3a
 8005922:	dc0f      	bgt.n	8005944 <USBH_write+0x6c>
 8005924:	2b28      	cmp	r3, #40	; 0x28
 8005926:	d009      	beq.n	800593c <USBH_write+0x64>
 8005928:	2b28      	cmp	r3, #40	; 0x28
 800592a:	dc0b      	bgt.n	8005944 <USBH_write+0x6c>
 800592c:	2b04      	cmp	r3, #4
 800592e:	d005      	beq.n	800593c <USBH_write+0x64>
 8005930:	2b27      	cmp	r3, #39	; 0x27
 8005932:	d107      	bne.n	8005944 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005934:	2302      	movs	r3, #2
 8005936:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800593a:	e007      	b.n	800594c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800593c:	2303      	movs	r3, #3
 800593e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005942:	e003      	b.n	800594c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800594a:	bf00      	nop
    }
  }

  return res;
 800594c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005950:	4618      	mov	r0, r3
 8005952:	3748      	adds	r7, #72	; 0x48
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	200001b4 	.word	0x200001b4

0800595c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b090      	sub	sp, #64	; 0x40
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	603a      	str	r2, [r7, #0]
 8005966:	71fb      	strb	r3, [r7, #7]
 8005968:	460b      	mov	r3, r1
 800596a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005972:	79bb      	ldrb	r3, [r7, #6]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d852      	bhi.n	8005a1e <USBH_ioctl+0xc2>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <USBH_ioctl+0x24>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005991 	.word	0x08005991
 8005984:	08005999 	.word	0x08005999
 8005988:	080059c3 	.word	0x080059c3
 800598c:	080059ef 	.word	0x080059ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005996:	e045      	b.n	8005a24 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005998:	f107 0208 	add.w	r2, r7, #8
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	4619      	mov	r1, r3
 80059a0:	4823      	ldr	r0, [pc, #140]	; (8005a30 <USBH_ioctl+0xd4>)
 80059a2:	f000 fda7 	bl	80064f4 <USBH_MSC_GetLUNInfo>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80059b8:	e034      	b.n	8005a24 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80059c0:	e030      	b.n	8005a24 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80059c2:	f107 0208 	add.w	r2, r7, #8
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	4619      	mov	r1, r3
 80059ca:	4819      	ldr	r0, [pc, #100]	; (8005a30 <USBH_ioctl+0xd4>)
 80059cc:	f000 fd92 	bl	80064f4 <USBH_MSC_GetLUNInfo>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d107      	bne.n	80059e6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80059d6:	8a3b      	ldrh	r3, [r7, #16]
 80059d8:	461a      	mov	r2, r3
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80059e4:	e01e      	b.n	8005a24 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80059ec:	e01a      	b.n	8005a24 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80059ee:	f107 0208 	add.w	r2, r7, #8
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	4619      	mov	r1, r3
 80059f6:	480e      	ldr	r0, [pc, #56]	; (8005a30 <USBH_ioctl+0xd4>)
 80059f8:	f000 fd7c 	bl	80064f4 <USBH_MSC_GetLUNInfo>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005a02:	8a3b      	ldrh	r3, [r7, #16]
 8005a04:	0a5b      	lsrs	r3, r3, #9
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a14:	e006      	b.n	8005a24 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a1c:	e002      	b.n	8005a24 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005a1e:	2304      	movs	r3, #4
 8005a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3740      	adds	r7, #64	; 0x40
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200001b4 	.word	0x200001b4

08005a34 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005a34:	b590      	push	{r4, r7, lr}
 8005a36:	b089      	sub	sp, #36	; 0x24
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a42:	7919      	ldrb	r1, [r3, #4]
 8005a44:	2350      	movs	r3, #80	; 0x50
 8005a46:	2206      	movs	r2, #6
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fc6b 	bl	8007324 <USBH_FindInterface>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2bff      	cmp	r3, #255	; 0xff
 8005a56:	d002      	beq.n	8005a5e <USBH_MSC_InterfaceInit+0x2a>
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d901      	bls.n	8005a62 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e106      	b.n	8005c70 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fc40 	bl	80072ec <USBH_SelectInterface>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005a76:	2302      	movs	r3, #2
 8005a78:	e0fa      	b.n	8005c70 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005a80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a84:	f003 fb64 	bl	8009150 <malloc>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e0e7      	b.n	8005c70 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68b8      	ldr	r0, [r7, #8]
 8005aa8:	f003 fb70 	bl	800918c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	211a      	movs	r1, #26
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	b25b      	sxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da16      	bge.n	8005af2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	211a      	movs	r1, #26
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	211a      	movs	r1, #26
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	815a      	strh	r2, [r3, #10]
 8005af0:	e015      	b.n	8005b1e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	211a      	movs	r1, #26
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	211a      	movs	r1, #26
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b18:	881a      	ldrh	r2, [r3, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	211a      	movs	r1, #26
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da16      	bge.n	8005b64 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	211a      	movs	r1, #26
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	211a      	movs	r1, #26
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	815a      	strh	r2, [r3, #10]
 8005b62:	e015      	b.n	8005b90 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	211a      	movs	r1, #26
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	211a      	movs	r1, #26
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2200      	movs	r2, #0
 8005b94:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	799b      	ldrb	r3, [r3, #6]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f002 fed6 	bl	800895a <USBH_AllocPipe>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	79db      	ldrb	r3, [r3, #7]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f002 fecc 	bl	800895a <USBH_AllocPipe>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fdc4 	bl	8006758 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	799b      	ldrb	r3, [r3, #6]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01e      	beq.n	8005c16 <USBH_MSC_InterfaceInit+0x1e2>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	891b      	ldrh	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01a      	beq.n	8005c16 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	7959      	ldrb	r1, [r3, #5]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	7998      	ldrb	r0, [r3, #6]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	8912      	ldrh	r2, [r2, #8]
 8005bf8:	9202      	str	r2, [sp, #8]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	4623      	mov	r3, r4
 8005c02:	4602      	mov	r2, r0
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f002 fe79 	bl	80088fc <USBH_OpenPipe>
 8005c0a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	79db      	ldrb	r3, [r3, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02c      	beq.n	8005c6e <USBH_MSC_InterfaceInit+0x23a>
 8005c14:	e001      	b.n	8005c1a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e02a      	b.n	8005c70 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	895b      	ldrh	r3, [r3, #10]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d025      	beq.n	8005c6e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	7919      	ldrb	r1, [r3, #4]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	79d8      	ldrb	r0, [r3, #7]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	8952      	ldrh	r2, [r2, #10]
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	9201      	str	r2, [sp, #4]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	4623      	mov	r3, r4
 8005c44:	4602      	mov	r2, r0
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f002 fe58 	bl	80088fc <USBH_OpenPipe>
 8005c4c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	791b      	ldrb	r3, [r3, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f003 f9b9 	bl	8008fce <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	795b      	ldrb	r3, [r3, #5]
 8005c60:	2200      	movs	r2, #0
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f003 f9b2 	bl	8008fce <USBH_LL_SetToggle>

  return USBH_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8005c6e:	2303      	movs	r3, #3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd90      	pop	{r4, r7, pc}

08005c78 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	795b      	ldrb	r3, [r3, #5]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	795b      	ldrb	r3, [r3, #5]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 fe4e 	bl	800893a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	795b      	ldrb	r3, [r3, #5]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f002 fe79 	bl	800899c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	791b      	ldrb	r3, [r3, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	791b      	ldrb	r3, [r3, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f002 fe3b 	bl	800893a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	791b      	ldrb	r3, [r3, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f002 fe66 	bl	800899c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f003 fa38 	bl	8009160 <free>
    phost->pActiveClass->pData = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	7b9b      	ldrb	r3, [r3, #14]
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d041      	beq.n	8005da6 <USBH_MSC_ClassRequest+0xa2>
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	dc4b      	bgt.n	8005dbe <USBH_MSC_ClassRequest+0xba>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <USBH_MSC_ClassRequest+0x2a>
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d147      	bne.n	8005dbe <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fcf1 	bl	800671a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d104      	bne.n	8005d4c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d137      	bne.n	8005dc2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d804      	bhi.n	8005d64 <USBH_MSC_ClassRequest+0x60>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	e000      	b.n	8005d66 <USBH_MSC_ClassRequest+0x62>
 8005d64:	2202      	movs	r2, #2
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73bb      	strb	r3, [r7, #14]
 8005d6e:	e014      	b.n	8005d9a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	2134      	movs	r1, #52	; 0x34
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3392      	adds	r3, #146	; 0x92
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	2134      	movs	r1, #52	; 0x34
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	33c1      	adds	r3, #193	; 0xc1
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73bb      	strb	r3, [r7, #14]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	7bba      	ldrb	r2, [r7, #14]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3e5      	bcc.n	8005d70 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005da4:	e00d      	b.n	8005dc2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005da6:	2100      	movs	r1, #0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f002 f888 	bl	8007ebe <USBH_ClrFeature>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d108      	bne.n	8005dc6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	7bda      	ldrb	r2, [r3, #15]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005dbc:	e003      	b.n	8005dc6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005dc6:	bf00      	nop
  }

  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005dea:	2301      	movs	r3, #1
 8005dec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005dee:	2301      	movs	r3, #1
 8005df0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	7b1b      	ldrb	r3, [r3, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <USBH_MSC_Process+0x2e>
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	f000 8271 	beq.w	80062e2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005e00:	e272      	b.n	80062e8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f080 824f 	bcs.w	80062b2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	2334      	movs	r3, #52	; 0x34
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	4413      	add	r3, r2
 8005e26:	3391      	adds	r3, #145	; 0x91
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e32:	4619      	mov	r1, r3
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	2334      	movs	r3, #52	; 0x34
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3390      	adds	r3, #144	; 0x90
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	f200 8243 	bhi.w	80062ce <USBH_MSC_Process+0x4fa>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <USBH_MSC_Process+0x7c>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	080062cf 	.word	0x080062cf
 8005e58:	08005f3d 	.word	0x08005f3d
 8005e5c:	080060c1 	.word	0x080060c1
 8005e60:	08005e9b 	.word	0x08005e9b
 8005e64:	0800618d 	.word	0x0800618d
 8005e68:	080062cf 	.word	0x080062cf
 8005e6c:	080062cf 	.word	0x080062cf
 8005e70:	080062a1 	.word	0x080062a1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	2334      	movs	r3, #52	; 0x34
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	3390      	adds	r3, #144	; 0x90
 8005e88:	2204      	movs	r2, #4
 8005e8a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005e98:	e222      	b.n	80062e0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ea0:	b2d9      	uxtb	r1, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2334      	movs	r3, #52	; 0x34
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	3398      	adds	r3, #152	; 0x98
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3307      	adds	r3, #7
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 ff6a 	bl	8006d94 <USBH_MSC_SCSI_Inquiry>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	2334      	movs	r3, #52	; 0x34
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	3390      	adds	r3, #144	; 0x90
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d10c      	bne.n	8005f02 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eee:	4619      	mov	r1, r3
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	2334      	movs	r3, #52	; 0x34
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	3390      	adds	r3, #144	; 0x90
 8005efc:	2205      	movs	r2, #5
 8005efe:	701a      	strb	r2, [r3, #0]
            break;
 8005f00:	e1e7      	b.n	80062d2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	f040 81e4 	bne.w	80062d2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f10:	4619      	mov	r1, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	2334      	movs	r3, #52	; 0x34
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3390      	adds	r3, #144	; 0x90
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f28:	4619      	mov	r1, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	2334      	movs	r3, #52	; 0x34
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	3391      	adds	r3, #145	; 0x91
 8005f36:	2202      	movs	r2, #2
 8005f38:	701a      	strb	r2, [r3, #0]
            break;
 8005f3a:	e1ca      	b.n	80062d2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fe66 	bl	8006c18 <USBH_MSC_SCSI_TestUnitReady>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d149      	bne.n	8005fea <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	2334      	movs	r3, #52	; 0x34
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	3392      	adds	r3, #146	; 0x92
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00c      	beq.n	8005f8a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f76:	4619      	mov	r1, r3
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	2334      	movs	r3, #52	; 0x34
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	33c1      	adds	r3, #193	; 0xc1
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	e00b      	b.n	8005fa2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f90:	4619      	mov	r1, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	2334      	movs	r3, #52	; 0x34
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	33c1      	adds	r3, #193	; 0xc1
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fa8:	4619      	mov	r1, r3
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	2334      	movs	r3, #52	; 0x34
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3390      	adds	r3, #144	; 0x90
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	2334      	movs	r3, #52	; 0x34
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	3391      	adds	r3, #145	; 0x91
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fd8:	4619      	mov	r1, r3
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	2334      	movs	r3, #52	; 0x34
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3392      	adds	r3, #146	; 0x92
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d14a      	bne.n	8006086 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	2334      	movs	r3, #52	; 0x34
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	3392      	adds	r3, #146	; 0x92
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d00c      	beq.n	8006024 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006010:	4619      	mov	r1, r3
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	2334      	movs	r3, #52	; 0x34
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	33c1      	adds	r3, #193	; 0xc1
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e00b      	b.n	800603c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800602a:	4619      	mov	r1, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	2334      	movs	r3, #52	; 0x34
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	33c1      	adds	r3, #193	; 0xc1
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006042:	4619      	mov	r1, r3
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	2334      	movs	r3, #52	; 0x34
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	4413      	add	r3, r2
 800604e:	3390      	adds	r3, #144	; 0x90
 8006050:	2205      	movs	r2, #5
 8006052:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800605a:	4619      	mov	r1, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	2334      	movs	r3, #52	; 0x34
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	3391      	adds	r3, #145	; 0x91
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006072:	4619      	mov	r1, r3
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	2334      	movs	r3, #52	; 0x34
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	3392      	adds	r3, #146	; 0x92
 8006080:	2202      	movs	r2, #2
 8006082:	701a      	strb	r2, [r3, #0]
            break;
 8006084:	e127      	b.n	80062d6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	2b04      	cmp	r3, #4
 800608a:	f040 8124 	bne.w	80062d6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006094:	4619      	mov	r1, r3
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	2334      	movs	r3, #52	; 0x34
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	3390      	adds	r3, #144	; 0x90
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ac:	4619      	mov	r1, r3
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	2334      	movs	r3, #52	; 0x34
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	3391      	adds	r3, #145	; 0x91
 80060ba:	2202      	movs	r2, #2
 80060bc:	701a      	strb	r2, [r3, #0]
            break;
 80060be:	e10a      	b.n	80062d6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060c6:	b2d9      	uxtb	r1, r3
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ce:	461a      	mov	r2, r3
 80060d0:	2334      	movs	r3, #52	; 0x34
 80060d2:	fb02 f303 	mul.w	r3, r2, r3
 80060d6:	3390      	adds	r3, #144	; 0x90
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	3304      	adds	r3, #4
 80060de:	461a      	mov	r2, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fddc 	bl	8006c9e <USBH_MSC_SCSI_ReadCapacity>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d120      	bne.n	8006132 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060f6:	4619      	mov	r1, r3
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	2334      	movs	r3, #52	; 0x34
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	3390      	adds	r3, #144	; 0x90
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800610e:	4619      	mov	r1, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	2334      	movs	r3, #52	; 0x34
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	4413      	add	r3, r2
 800611a:	3391      	adds	r3, #145	; 0x91
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006126:	3301      	adds	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006130:	e0d3      	b.n	80062da <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d10c      	bne.n	8006152 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800613e:	4619      	mov	r1, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	2334      	movs	r3, #52	; 0x34
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	4413      	add	r3, r2
 800614a:	3390      	adds	r3, #144	; 0x90
 800614c:	2205      	movs	r2, #5
 800614e:	701a      	strb	r2, [r3, #0]
            break;
 8006150:	e0c3      	b.n	80062da <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b04      	cmp	r3, #4
 8006156:	f040 80c0 	bne.w	80062da <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006160:	4619      	mov	r1, r3
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	2334      	movs	r3, #52	; 0x34
 8006166:	fb01 f303 	mul.w	r3, r1, r3
 800616a:	4413      	add	r3, r2
 800616c:	3390      	adds	r3, #144	; 0x90
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006178:	4619      	mov	r1, r3
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	2334      	movs	r3, #52	; 0x34
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3391      	adds	r3, #145	; 0x91
 8006186:	2202      	movs	r2, #2
 8006188:	701a      	strb	r2, [r3, #0]
            break;
 800618a:	e0a6      	b.n	80062da <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006192:	b2d9      	uxtb	r1, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800619a:	461a      	mov	r2, r3
 800619c:	2334      	movs	r3, #52	; 0x34
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	3398      	adds	r3, #152	; 0x98
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	3304      	adds	r3, #4
 80061aa:	461a      	mov	r2, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fe96 	bl	8006ede <USBH_MSC_SCSI_RequestSense>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d145      	bne.n	8006248 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c2:	4619      	mov	r1, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	2334      	movs	r3, #52	; 0x34
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	339c      	adds	r3, #156	; 0x9c
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d00c      	beq.n	80061f0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061dc:	4619      	mov	r1, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	2334      	movs	r3, #52	; 0x34
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	339c      	adds	r3, #156	; 0x9c
 80061ea:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d117      	bne.n	8006220 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8006202:	4293      	cmp	r3, r2
 8006204:	d80c      	bhi.n	8006220 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620c:	4619      	mov	r1, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	2334      	movs	r3, #52	; 0x34
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	3390      	adds	r3, #144	; 0x90
 800621a:	2202      	movs	r2, #2
 800621c:	701a      	strb	r2, [r3, #0]
                  break;
 800621e:	e05f      	b.n	80062e0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006226:	4619      	mov	r1, r3
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	2334      	movs	r3, #52	; 0x34
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	3390      	adds	r3, #144	; 0x90
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800623e:	3301      	adds	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d10c      	bne.n	8006268 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006254:	4619      	mov	r1, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	2334      	movs	r3, #52	; 0x34
 800625a:	fb01 f303 	mul.w	r3, r1, r3
 800625e:	4413      	add	r3, r2
 8006260:	3390      	adds	r3, #144	; 0x90
 8006262:	2208      	movs	r2, #8
 8006264:	701a      	strb	r2, [r3, #0]
            break;
 8006266:	e03a      	b.n	80062de <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d137      	bne.n	80062de <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006274:	4619      	mov	r1, r3
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	2334      	movs	r3, #52	; 0x34
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	3390      	adds	r3, #144	; 0x90
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800628c:	4619      	mov	r1, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	2334      	movs	r3, #52	; 0x34
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	4413      	add	r3, r2
 8006298:	3391      	adds	r3, #145	; 0x91
 800629a:	2202      	movs	r2, #2
 800629c:	701a      	strb	r2, [r3, #0]
            break;
 800629e:	e01e      	b.n	80062de <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062a6:	3301      	adds	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80062b0:	e016      	b.n	80062e0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2201      	movs	r2, #1
 80062be:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062c6:	2102      	movs	r1, #2
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      break;
 80062cc:	e00c      	b.n	80062e8 <USBH_MSC_Process+0x514>
            break;
 80062ce:	bf00      	nop
 80062d0:	e00a      	b.n	80062e8 <USBH_MSC_Process+0x514>
            break;
 80062d2:	bf00      	nop
 80062d4:	e008      	b.n	80062e8 <USBH_MSC_Process+0x514>
            break;
 80062d6:	bf00      	nop
 80062d8:	e006      	b.n	80062e8 <USBH_MSC_Process+0x514>
            break;
 80062da:	bf00      	nop
 80062dc:	e004      	b.n	80062e8 <USBH_MSC_Process+0x514>
            break;
 80062de:	bf00      	nop
      break;
 80062e0:	e002      	b.n	80062e8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]
      break;
 80062e6:	bf00      	nop
  }
  return error;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop

080062f4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b088      	sub	sp, #32
 800630e:	af02      	add	r7, sp, #8
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006320:	2301      	movs	r3, #1
 8006322:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	2134      	movs	r1, #52	; 0x34
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	3390      	adds	r3, #144	; 0x90
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b07      	cmp	r3, #7
 800633a:	d03c      	beq.n	80063b6 <USBH_MSC_RdWrProcess+0xac>
 800633c:	2b07      	cmp	r3, #7
 800633e:	f300 80a7 	bgt.w	8006490 <USBH_MSC_RdWrProcess+0x186>
 8006342:	2b05      	cmp	r3, #5
 8006344:	d06c      	beq.n	8006420 <USBH_MSC_RdWrProcess+0x116>
 8006346:	2b06      	cmp	r3, #6
 8006348:	f040 80a2 	bne.w	8006490 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800634c:	78f9      	ldrb	r1, [r7, #3]
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fea5 	bl	80070a6 <USBH_MSC_SCSI_Read>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	2134      	movs	r1, #52	; 0x34
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	3390      	adds	r3, #144	; 0x90
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800637c:	e08a      	b.n	8006494 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d109      	bne.n	8006398 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	2134      	movs	r1, #52	; 0x34
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	3390      	adds	r3, #144	; 0x90
 8006392:	2205      	movs	r2, #5
 8006394:	701a      	strb	r2, [r3, #0]
      break;
 8006396:	e07d      	b.n	8006494 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d17a      	bne.n	8006494 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	2134      	movs	r1, #52	; 0x34
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	3390      	adds	r3, #144	; 0x90
 80063ac:	2208      	movs	r2, #8
 80063ae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80063b0:	2302      	movs	r3, #2
 80063b2:	75fb      	strb	r3, [r7, #23]
      break;
 80063b4:	e06e      	b.n	8006494 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80063b6:	78f9      	ldrb	r1, [r7, #3]
 80063b8:	2300      	movs	r3, #0
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2300      	movs	r3, #0
 80063be:	2200      	movs	r2, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fe05 	bl	8006fd0 <USBH_MSC_SCSI_Write>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	2134      	movs	r1, #52	; 0x34
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	4413      	add	r3, r2
 80063dc:	3390      	adds	r3, #144	; 0x90
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063e6:	e057      	b.n	8006498 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d109      	bne.n	8006402 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	2134      	movs	r1, #52	; 0x34
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3390      	adds	r3, #144	; 0x90
 80063fc:	2205      	movs	r2, #5
 80063fe:	701a      	strb	r2, [r3, #0]
      break;
 8006400:	e04a      	b.n	8006498 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d147      	bne.n	8006498 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	2134      	movs	r1, #52	; 0x34
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	4413      	add	r3, r2
 8006414:	3390      	adds	r3, #144	; 0x90
 8006416:	2208      	movs	r2, #8
 8006418:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800641a:	2302      	movs	r3, #2
 800641c:	75fb      	strb	r3, [r7, #23]
      break;
 800641e:	e03b      	b.n	8006498 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	2234      	movs	r2, #52	; 0x34
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	3398      	adds	r3, #152	; 0x98
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4413      	add	r3, r2
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fd52 	bl	8006ede <USBH_MSC_SCSI_RequestSense>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d113      	bne.n	800646c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	2134      	movs	r1, #52	; 0x34
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	3390      	adds	r3, #144	; 0x90
 8006452:	2201      	movs	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	2134      	movs	r1, #52	; 0x34
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	3391      	adds	r3, #145	; 0x91
 8006464:	2202      	movs	r2, #2
 8006466:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006468:	2302      	movs	r3, #2
 800646a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d014      	beq.n	800649c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d111      	bne.n	800649c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	2134      	movs	r1, #52	; 0x34
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	4413      	add	r3, r2
 8006484:	3390      	adds	r3, #144	; 0x90
 8006486:	2208      	movs	r2, #8
 8006488:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800648e:	e005      	b.n	800649c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006490:	bf00      	nop
 8006492:	e004      	b.n	800649e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006494:	bf00      	nop
 8006496:	e002      	b.n	800649e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <USBH_MSC_RdWrProcess+0x194>
      break;
 800649c:	bf00      	nop

  }
  return error;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b0b      	cmp	r3, #11
 80064c6:	d10c      	bne.n	80064e2 <USBH_MSC_UnitIsReady+0x3a>
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	2134      	movs	r1, #52	; 0x34
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	3391      	adds	r3, #145	; 0x91
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e001      	b.n	80064e6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	460b      	mov	r3, r1
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b0b      	cmp	r3, #11
 8006514:	d10d      	bne.n	8006532 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	2234      	movs	r2, #52	; 0x34
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	3390      	adds	r3, #144	; 0x90
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4413      	add	r3, r2
 8006524:	2234      	movs	r2, #52	; 0x34
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 fe21 	bl	8009170 <memcpy>
    return USBH_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e000      	b.n	8006534 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006532:	2302      	movs	r3, #2
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	460b      	mov	r3, r1
 800654a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006568:	2b0b      	cmp	r3, #11
 800656a:	d109      	bne.n	8006580 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	2134      	movs	r1, #52	; 0x34
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	3390      	adds	r3, #144	; 0x90
 800657a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800657c:	2b01      	cmp	r3, #1
 800657e:	d001      	beq.n	8006584 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006580:	2302      	movs	r3, #2
 8006582:	e040      	b.n	8006606 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2206      	movs	r2, #6
 8006588:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	2134      	movs	r1, #52	; 0x34
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3390      	adds	r3, #144	; 0x90
 8006598:	2206      	movs	r2, #6
 800659a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	b29a      	uxth	r2, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80065a6:	7af9      	ldrb	r1, [r7, #11]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fd78 	bl	80070a6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80065bc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80065be:	e016      	b.n	80065ee <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d805      	bhi.n	80065e4 <USBH_MSC_Read+0xa8>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d104      	bne.n	80065ee <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2201      	movs	r2, #1
 80065e8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80065ea:	2302      	movs	r3, #2
 80065ec:	e00b      	b.n	8006606 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	4619      	mov	r1, r3
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fe89 	bl	800630a <USBH_MSC_RdWrProcess>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d0e0      	beq.n	80065c0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2201      	movs	r2, #1
 8006602:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	460b      	mov	r3, r1
 800661c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800663a:	2b0b      	cmp	r3, #11
 800663c:	d109      	bne.n	8006652 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	2134      	movs	r1, #52	; 0x34
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	3390      	adds	r3, #144	; 0x90
 800664c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	e040      	b.n	80066d8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2207      	movs	r2, #7
 800665a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	2134      	movs	r1, #52	; 0x34
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	3390      	adds	r3, #144	; 0x90
 800666a:	2207      	movs	r2, #7
 800666c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	b29a      	uxth	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006678:	7af9      	ldrb	r1, [r7, #11]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fca4 	bl	8006fd0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800668e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006690:	e016      	b.n	80066c0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	f242 7110 	movw	r1, #10000	; 0x2710
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d805      	bhi.n	80066b6 <USBH_MSC_Write+0xa8>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2201      	movs	r2, #1
 80066ba:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80066bc:	2302      	movs	r3, #2
 80066be:	e00b      	b.n	80066d8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	4619      	mov	r1, r3
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fe20 	bl	800630a <USBH_MSC_RdWrProcess>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d0e0      	beq.n	8006692 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2201      	movs	r2, #1
 80066d4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2221      	movs	r2, #33	; 0x21
 80066ec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 fea4 	bl	8008458 <USBH_CtlReq>
 8006710:	4603      	mov	r3, r0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	22a1      	movs	r2, #161	; 0xa1
 8006728:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	22fe      	movs	r2, #254	; 0xfe
 800672e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006742:	2201      	movs	r2, #1
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fe86 	bl	8008458 <USBH_CtlReq>
 800674c:	4603      	mov	r3, r0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a09      	ldr	r2, [pc, #36]	; (8006794 <USBH_MSC_BOT_Init+0x3c>)
 800676e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a09      	ldr	r2, [pc, #36]	; (8006798 <USBH_MSC_BOT_Init+0x40>)
 8006774:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	43425355 	.word	0x43425355
 8006798:	20304050 	.word	0x20304050

0800679c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80067ac:	2301      	movs	r3, #1
 80067ae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80067b0:	2301      	movs	r3, #1
 80067b2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067cc:	3b01      	subs	r3, #1
 80067ce:	2b0a      	cmp	r3, #10
 80067d0:	f200 819e 	bhi.w	8006b10 <USBH_MSC_BOT_Process+0x374>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <USBH_MSC_BOT_Process+0x40>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	08006809 	.word	0x08006809
 80067e0:	08006831 	.word	0x08006831
 80067e4:	0800689b 	.word	0x0800689b
 80067e8:	080068b9 	.word	0x080068b9
 80067ec:	0800693d 	.word	0x0800693d
 80067f0:	0800695f 	.word	0x0800695f
 80067f4:	080069f7 	.word	0x080069f7
 80067f8:	08006a13 	.word	0x08006a13
 80067fc:	08006a65 	.word	0x08006a65
 8006800:	08006a95 	.word	0x08006a95
 8006804:	08006af7 	.word	0x08006af7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	795b      	ldrb	r3, [r3, #5]
 8006822:	2201      	movs	r2, #1
 8006824:	9200      	str	r2, [sp, #0]
 8006826:	221f      	movs	r2, #31
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f002 f824 	bl	8008876 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800682e:	e17e      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	795b      	ldrb	r3, [r3, #5]
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f002 fba8 	bl	8008f8c <USBH_LL_GetURBState>
 800683c:	4603      	mov	r3, r0
 800683e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006840:	7d3b      	ldrb	r3, [r7, #20]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d118      	bne.n	8006878 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00f      	beq.n	800686e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006854:	b25b      	sxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	da04      	bge.n	8006864 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006862:	e157      	b.n	8006b14 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2205      	movs	r2, #5
 8006868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800686c:	e152      	b.n	8006b14 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2207      	movs	r2, #7
 8006872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006876:	e14d      	b.n	8006b14 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006878:	7d3b      	ldrb	r3, [r7, #20]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d104      	bne.n	8006888 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006886:	e145      	b.n	8006b14 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006888:	7d3b      	ldrb	r3, [r7, #20]
 800688a:	2b05      	cmp	r3, #5
 800688c:	f040 8142 	bne.w	8006b14 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	220a      	movs	r2, #10
 8006894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006898:	e13c      	b.n	8006b14 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	895a      	ldrh	r2, [r3, #10]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	791b      	ldrb	r3, [r3, #4]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f002 f809 	bl	80088c0 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2204      	movs	r2, #4
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80068b6:	e13a      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f002 fb64 	bl	8008f8c <USBH_LL_GetURBState>
 80068c4:	4603      	mov	r3, r0
 80068c6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80068c8:	7d3b      	ldrb	r3, [r7, #20]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d12d      	bne.n	800692a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	8952      	ldrh	r2, [r2, #10]
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d910      	bls.n	80068fc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	8952      	ldrh	r2, [r2, #10]
 80068e4:	441a      	add	r2, r3
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	8952      	ldrh	r2, [r2, #10]
 80068f4:	1a9a      	subs	r2, r3, r2
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80068fa:	e002      	b.n	8006902 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2200      	movs	r2, #0
 8006900:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	895a      	ldrh	r2, [r3, #10]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 ffd1 	bl	80088c0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800691e:	e0fb      	b.n	8006b18 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2207      	movs	r2, #7
 8006924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006928:	e0f6      	b.n	8006b18 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800692a:	7d3b      	ldrb	r3, [r7, #20]
 800692c:	2b05      	cmp	r3, #5
 800692e:	f040 80f3 	bne.w	8006b18 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2209      	movs	r2, #9
 8006936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800693a:	e0ed      	b.n	8006b18 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	891a      	ldrh	r2, [r3, #8]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	795b      	ldrb	r3, [r3, #5]
 800694a:	2001      	movs	r0, #1
 800694c:	9000      	str	r0, [sp, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 ff91 	bl	8008876 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2206      	movs	r2, #6
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800695c:	e0e7      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	795b      	ldrb	r3, [r3, #5]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f002 fb11 	bl	8008f8c <USBH_LL_GetURBState>
 800696a:	4603      	mov	r3, r0
 800696c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800696e:	7d3b      	ldrb	r3, [r7, #20]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d12f      	bne.n	80069d4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	8912      	ldrh	r2, [r2, #8]
 800697c:	4293      	cmp	r3, r2
 800697e:	d910      	bls.n	80069a2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	8912      	ldrh	r2, [r2, #8]
 800698a:	441a      	add	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	8912      	ldrh	r2, [r2, #8]
 800699a:	1a9a      	subs	r2, r3, r2
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	65da      	str	r2, [r3, #92]	; 0x5c
 80069a0:	e002      	b.n	80069a8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2200      	movs	r2, #0
 80069a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	891a      	ldrh	r2, [r3, #8]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	795b      	ldrb	r3, [r3, #5]
 80069be:	2001      	movs	r0, #1
 80069c0:	9000      	str	r0, [sp, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 ff57 	bl	8008876 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80069c8:	e0a8      	b.n	8006b1c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2207      	movs	r2, #7
 80069ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069d2:	e0a3      	b.n	8006b1c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80069d4:	7d3b      	ldrb	r3, [r7, #20]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d104      	bne.n	80069e4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	2205      	movs	r2, #5
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069e2:	e09b      	b.n	8006b1c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80069e4:	7d3b      	ldrb	r3, [r7, #20]
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	f040 8098 	bne.w	8006b1c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	220a      	movs	r2, #10
 80069f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069f4:	e092      	b.n	8006b1c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	791b      	ldrb	r3, [r3, #4]
 8006a00:	220d      	movs	r2, #13
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 ff5c 	bl	80088c0 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a10:	e08d      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f002 fab7 	bl	8008f8c <USBH_LL_GetURBState>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006a22:	7d3b      	ldrb	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d115      	bne.n	8006a54 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8a9 	bl	8006b90 <USBH_MSC_DecodeCSW>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006a42:	7d7b      	ldrb	r3, [r7, #21]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006a4c:	e068      	b.n	8006b20 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	75fb      	strb	r3, [r7, #23]
      break;
 8006a52:	e065      	b.n	8006b20 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006a54:	7d3b      	ldrb	r3, [r7, #20]
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d162      	bne.n	8006b20 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2209      	movs	r2, #9
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a62:	e05d      	b.n	8006b20 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	2200      	movs	r2, #0
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f864 	bl	8006b38 <USBH_MSC_BOT_Abort>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006a74:	7dbb      	ldrb	r3, [r7, #22]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2207      	movs	r2, #7
 8006a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006a82:	e04f      	b.n	8006b24 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006a84:	7dbb      	ldrb	r3, [r7, #22]
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d14c      	bne.n	8006b24 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	220b      	movs	r2, #11
 8006a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a92:	e047      	b.n	8006b24 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f84c 	bl	8006b38 <USBH_MSC_BOT_Abort>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006aa4:	7dbb      	ldrb	r3, [r7, #22]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11d      	bne.n	8006ae6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	795b      	ldrb	r3, [r3, #5]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f002 fabc 	bl	800902e <USBH_LL_GetToggle>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	7959      	ldrb	r1, [r3, #5]
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	f1c3 0301 	rsb	r3, r3, #1
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 fa80 	bl	8008fce <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f002 fa79 	bl	8008fce <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2209      	movs	r2, #9
 8006ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006ae4:	e020      	b.n	8006b28 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006ae6:	7dbb      	ldrb	r3, [r7, #22]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d11d      	bne.n	8006b28 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	220b      	movs	r2, #11
 8006af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006af4:	e018      	b.n	8006b28 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fdf2 	bl	80066e0 <USBH_MSC_BOT_REQ_Reset>
 8006afc:	4603      	mov	r3, r0
 8006afe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d112      	bne.n	8006b2c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006b0e:	e00d      	b.n	8006b2c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006b10:	bf00      	nop
 8006b12:	e00c      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b14:	bf00      	nop
 8006b16:	e00a      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e008      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e006      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b20:	bf00      	nop
 8006b22:	e004      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b24:	bf00      	nop
 8006b26:	e002      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b2c:	bf00      	nop
  }
  return status;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
 8006b44:	4613      	mov	r3, r2
 8006b46:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006b56:	78bb      	ldrb	r3, [r7, #2]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <USBH_MSC_BOT_Abort+0x2a>
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d009      	beq.n	8006b74 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006b60:	e011      	b.n	8006b86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	79db      	ldrb	r3, [r3, #7]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f9a8 	bl	8007ebe <USBH_ClrFeature>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
      break;
 8006b72:	e008      	b.n	8006b86 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	799b      	ldrb	r3, [r3, #6]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f99f 	bl	8007ebe <USBH_ClrFeature>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
      break;
 8006b84:	bf00      	nop
  }
  return status;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	791b      	ldrb	r3, [r3, #4]
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f002 f95b 	bl	8008e68 <USBH_LL_GetLastXferSize>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b0d      	cmp	r3, #13
 8006bb6:	d002      	beq.n	8006bbe <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e024      	b.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc2:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <USBH_MSC_DecodeCSW+0x84>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d11d      	bne.n	8006c04 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d119      	bne.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e011      	b.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d102      	bne.n	8006bf4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e009      	b.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d104      	bne.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e001      	b.n	8006c08 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006c04:	2302      	movs	r3, #2
 8006c06:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	53425355 	.word	0x53425355

08006c18 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c24:	2302      	movs	r3, #2
 8006c26:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d002      	beq.n	8006c42 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d021      	beq.n	8006c84 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006c40:	e028      	b.n	8006c94 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2200      	movs	r2, #0
 8006c46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	220a      	movs	r2, #10
 8006c54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3363      	adds	r3, #99	; 0x63
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f002 fa93 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
      break;
 8006c82:	e007      	b.n	8006c94 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff fd87 	bl	800679c <USBH_MSC_BOT_Process>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	bf00      	nop
  }

  return error;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d002      	beq.n	8006cca <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d027      	beq.n	8006d18 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006cc8:	e05f      	b.n	8006d8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2280      	movs	r2, #128	; 0x80
 8006cd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	220a      	movs	r2, #10
 8006cdc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3363      	adds	r3, #99	; 0x63
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 fa4f 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2225      	movs	r2, #37	; 0x25
 8006cf2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f103 0210 	add.w	r2, r3, #16
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	e038      	b.n	8006d8a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fd3d 	bl	800679c <USBH_MSC_BOT_Process>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d12d      	bne.n	8006d88 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d32:	3303      	adds	r3, #3
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	3302      	adds	r3, #2
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006d52:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	061b      	lsls	r3, r3, #24
 8006d5e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6a:	3307      	adds	r3, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d76:	3306      	adds	r3, #6
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	809a      	strh	r2, [r3, #4]
      break;
 8006d88:	bf00      	nop
  }

  return error;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006da2:	2302      	movs	r3, #2
 8006da4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d03d      	beq.n	8006e3a <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006dbe:	e089      	b.n	8006ed4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2224      	movs	r2, #36	; 0x24
 8006dc4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2280      	movs	r2, #128	; 0x80
 8006dca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	220a      	movs	r2, #10
 8006dd2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3363      	adds	r3, #99	; 0x63
 8006dda:	220a      	movs	r2, #10
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f002 f9d4 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	2212      	movs	r2, #18
 8006de8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	015b      	lsls	r3, r3, #5
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2224      	movs	r2, #36	; 0x24
 8006e0c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f103 0210 	add.w	r2, r3, #16
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	e04c      	b.n	8006ed4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7ff fcac 	bl	800679c <USBH_MSC_BOT_Process>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d141      	bne.n	8006ed2 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006e4e:	2222      	movs	r2, #34	; 0x22
 8006e50:	2100      	movs	r1, #0
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 f99a 	bl	800918c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e80:	3301      	adds	r3, #1
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da03      	bge.n	8006e92 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	709a      	strb	r2, [r3, #2]
 8006e90:	e002      	b.n	8006e98 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1cd8      	adds	r0, r3, #3
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f002 f962 	bl	8009170 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f103 000c 	add.w	r0, r3, #12
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb8:	3310      	adds	r3, #16
 8006eba:	2210      	movs	r2, #16
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f002 f957 	bl	8009170 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	331d      	adds	r3, #29
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006ecc:	3220      	adds	r2, #32
 8006ece:	6812      	ldr	r2, [r2, #0]
 8006ed0:	601a      	str	r2, [r3, #0]
      break;
 8006ed2:	bf00      	nop
  }

  return error;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006eec:	2302      	movs	r3, #2
 8006eee:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d002      	beq.n	8006f0a <USBH_MSC_SCSI_RequestSense+0x2c>
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d03d      	beq.n	8006f84 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006f08:	e05d      	b.n	8006fc6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	220e      	movs	r2, #14
 8006f0e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2280      	movs	r2, #128	; 0x80
 8006f14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3363      	adds	r3, #99	; 0x63
 8006f24:	2210      	movs	r2, #16
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f002 f92f 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	015b      	lsls	r3, r3, #5
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	220e      	movs	r2, #14
 8006f56:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f103 0210 	add.w	r2, r3, #16
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]
      break;
 8006f82:	e020      	b.n	8006fc6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fc07 	bl	800679c <USBH_MSC_BOT_Process>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d115      	bne.n	8006fc4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb2:	7b1a      	ldrb	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fbe:	7b5a      	ldrb	r2, [r3, #13]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	709a      	strb	r2, [r3, #2]
      break;
 8006fc4:	bf00      	nop
  }

  return error;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d002      	beq.n	8006ffe <USBH_MSC_SCSI_Write+0x2e>
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d047      	beq.n	800708c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006ffc:	e04e      	b.n	800709c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007004:	461a      	mov	r2, r3
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	fb03 f202 	mul.w	r2, r3, r2
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	220a      	movs	r2, #10
 800701c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	3363      	adds	r3, #99	; 0x63
 8007024:	2210      	movs	r2, #16
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f002 f8af 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	222a      	movs	r2, #42	; 0x2a
 8007032:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007036:	79fa      	ldrb	r2, [r7, #7]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800703e:	79ba      	ldrb	r2, [r7, #6]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007046:	797a      	ldrb	r2, [r7, #5]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007058:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007062:	f107 0320 	add.w	r3, r7, #32
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
      break;
 800708a:	e007      	b.n	800709c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff fb83 	bl	800679c <USBH_MSC_BOT_Process>
 8007096:	4603      	mov	r3, r0
 8007098:	75fb      	strb	r3, [r7, #23]
      break;
 800709a:	bf00      	nop
  }

  return error;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	460b      	mov	r3, r1
 80070b4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070b6:	2302      	movs	r3, #2
 80070b8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d002      	beq.n	80070d4 <USBH_MSC_SCSI_Read+0x2e>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d047      	beq.n	8007162 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80070d2:	e04e      	b.n	8007172 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80070da:	461a      	mov	r2, r3
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	fb03 f202 	mul.w	r2, r3, r2
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	220a      	movs	r2, #10
 80070f2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3363      	adds	r3, #99	; 0x63
 80070fa:	2210      	movs	r2, #16
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 f844 	bl	800918c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2228      	movs	r2, #40	; 0x28
 8007108:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800710c:	79fa      	ldrb	r2, [r7, #7]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007114:	79ba      	ldrb	r2, [r7, #6]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800711c:	797a      	ldrb	r2, [r7, #5]
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800712e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007138:	f107 0320 	add.w	r3, r7, #32
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
      break;
 8007160:	e007      	b.n	8007172 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007162:	7afb      	ldrb	r3, [r7, #11]
 8007164:	4619      	mov	r1, r3
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff fb18 	bl	800679c <USBH_MSC_BOT_Process>
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]
      break;
 8007170:	bf00      	nop
  }

  return error;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007190:	2302      	movs	r3, #2
 8007192:	e029      	b.n	80071e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	79fa      	ldrb	r2, [r7, #7]
 8007198:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f81f 	bl	80071f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f001 fd8d 	bl	8008d00 <USBH_LL_Init>

  return USBH_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e009      	b.n	8007216 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	33e0      	adds	r3, #224	; 0xe0
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	2200      	movs	r2, #0
 800720e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d9f2      	bls.n	8007202 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e009      	b.n	8007236 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723c:	d3f1      	bcc.n	8007222 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2240      	movs	r2, #64	; 0x40
 8007262:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d016      	beq.n	80072da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10e      	bne.n	80072d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	33de      	adds	r3, #222	; 0xde
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
 80072d2:	e004      	b.n	80072de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072d4:	2302      	movs	r3, #2
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e001      	b.n	80072de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	429a      	cmp	r2, r3
 8007306:	d204      	bcs.n	8007312 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007310:	e001      	b.n	8007316 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	70fb      	strb	r3, [r7, #3]
 8007336:	460b      	mov	r3, r1
 8007338:	70bb      	strb	r3, [r7, #2]
 800733a:	4613      	mov	r3, r2
 800733c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800734c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800734e:	e025      	b.n	800739c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	221a      	movs	r2, #26
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	3308      	adds	r3, #8
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	3302      	adds	r3, #2
 8007360:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	795b      	ldrb	r3, [r3, #5]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	429a      	cmp	r2, r3
 800736a:	d002      	beq.n	8007372 <USBH_FindInterface+0x4e>
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	2bff      	cmp	r3, #255	; 0xff
 8007370:	d111      	bne.n	8007396 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007376:	78ba      	ldrb	r2, [r7, #2]
 8007378:	429a      	cmp	r2, r3
 800737a:	d002      	beq.n	8007382 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800737c:	78bb      	ldrb	r3, [r7, #2]
 800737e:	2bff      	cmp	r3, #255	; 0xff
 8007380:	d109      	bne.n	8007396 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007386:	787a      	ldrb	r2, [r7, #1]
 8007388:	429a      	cmp	r2, r3
 800738a:	d002      	beq.n	8007392 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d101      	bne.n	8007396 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	e006      	b.n	80073a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	3301      	adds	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d9d6      	bls.n	8007350 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073a2:	23ff      	movs	r3, #255	; 0xff
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 fcdd 	bl	8008d78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fdf6 	bl	8008fb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d102      	bne.n	80073f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2203      	movs	r2, #3
 80073f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b0b      	cmp	r3, #11
 80073fa:	f200 81be 	bhi.w	800777a <USBH_Process+0x3aa>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <USBH_Process+0x34>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007435 	.word	0x08007435
 8007408:	08007467 	.word	0x08007467
 800740c:	080074cf 	.word	0x080074cf
 8007410:	08007715 	.word	0x08007715
 8007414:	0800777b 	.word	0x0800777b
 8007418:	08007573 	.word	0x08007573
 800741c:	080076bb 	.word	0x080076bb
 8007420:	080075a9 	.word	0x080075a9
 8007424:	080075c9 	.word	0x080075c9
 8007428:	080075e9 	.word	0x080075e9
 800742c:	0800762d 	.word	0x0800762d
 8007430:	080076fd 	.word	0x080076fd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 819e 	beq.w	800777e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007448:	20c8      	movs	r0, #200	; 0xc8
 800744a:	f001 fe20 	bl	800908e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fcef 	bl	8008e32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007464:	e18b      	b.n	800777e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800746c:	2b01      	cmp	r3, #1
 800746e:	d107      	bne.n	8007480 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800747e:	e18d      	b.n	800779c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800748a:	d914      	bls.n	80074b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007492:	3301      	adds	r3, #1
 8007494:	b2da      	uxtb	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d903      	bls.n	80074ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220d      	movs	r2, #13
 80074aa:	701a      	strb	r2, [r3, #0]
      break;
 80074ac:	e176      	b.n	800779c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
      break;
 80074b4:	e172      	b.n	800779c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074bc:	f103 020a 	add.w	r2, r3, #10
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074c6:	200a      	movs	r0, #10
 80074c8:	f001 fde1 	bl	800908e <USBH_Delay>
      break;
 80074cc:	e166      	b.n	800779c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074de:	2104      	movs	r1, #4
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074e4:	2064      	movs	r0, #100	; 0x64
 80074e6:	f001 fdd2 	bl	800908e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 fc7a 	bl	8008de4 <USBH_LL_GetSpeed>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2205      	movs	r2, #5
 80074fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007500:	2100      	movs	r1, #0
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fa29 	bl	800895a <USBH_AllocPipe>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fa21 	bl	800895a <USBH_AllocPipe>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	7919      	ldrb	r1, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007534:	b292      	uxth	r2, r2
 8007536:	9202      	str	r2, [sp, #8]
 8007538:	2200      	movs	r2, #0
 800753a:	9201      	str	r2, [sp, #4]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4603      	mov	r3, r0
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f9da 	bl	80088fc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7959      	ldrb	r1, [r3, #5]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800755c:	b292      	uxth	r2, r2
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	9201      	str	r2, [sp, #4]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4603      	mov	r3, r0
 8007568:	2200      	movs	r2, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f9c6 	bl	80088fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007570:	e114      	b.n	800779c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f918 	bl	80077a8 <USBH_HandleEnum>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 80fe 	bne.w	8007782 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007594:	2b01      	cmp	r3, #1
 8007596:	d103      	bne.n	80075a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2208      	movs	r2, #8
 800759c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800759e:	e0f0      	b.n	8007782 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2207      	movs	r2, #7
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e0ec      	b.n	8007782 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80e9 	beq.w	8007786 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ba:	2101      	movs	r1, #1
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2208      	movs	r2, #8
 80075c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80075c6:	e0de      	b.n	8007786 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc2c 	bl	8007e30 <USBH_SetCfg>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 80d5 	bne.w	800778a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2209      	movs	r2, #9
 80075e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075e6:	e0d0      	b.n	800778a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80075ee:	f003 0320 	and.w	r3, r3, #32
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80075f6:	2101      	movs	r1, #1
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc3c 	bl	8007e76 <USBH_SetFeature>
 80075fe:	4603      	mov	r3, r0
 8007600:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	220a      	movs	r2, #10
 800760e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007610:	e0bd      	b.n	800778e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b03      	cmp	r3, #3
 8007618:	f040 80b9 	bne.w	800778e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220a      	movs	r2, #10
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e0b4      	b.n	800778e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	220a      	movs	r2, #10
 8007628:	701a      	strb	r2, [r3, #0]
      break;
 800762a:	e0b0      	b.n	800778e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80ad 	beq.w	8007792 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]
 8007644:	e016      	b.n	8007674 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007646:	7bfa      	ldrb	r2, [r7, #15]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	32de      	adds	r2, #222	; 0xde
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	791a      	ldrb	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007658:	429a      	cmp	r2, r3
 800765a:	d108      	bne.n	800766e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800765c:	7bfa      	ldrb	r2, [r7, #15]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32de      	adds	r2, #222	; 0xde
 8007662:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800766c:	e005      	b.n	800767a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	3301      	adds	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0e5      	beq.n	8007646 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d016      	beq.n	80076b2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2206      	movs	r2, #6
 800769a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a2:	2103      	movs	r1, #3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a8:	e073      	b.n	8007792 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
      break;
 80076b0:	e06f      	b.n	8007792 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	220d      	movs	r2, #13
 80076b6:	701a      	strb	r2, [r3, #0]
      break;
 80076b8:	e06b      	b.n	8007792 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d017      	beq.n	80076f4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
 80076d0:	4603      	mov	r3, r0
 80076d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	220b      	movs	r2, #11
 80076e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076e2:	e058      	b.n	8007796 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d154      	bne.n	8007796 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	220d      	movs	r2, #13
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e050      	b.n	8007796 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	220d      	movs	r2, #13
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e04c      	b.n	8007796 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d049      	beq.n	800779a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
      }
      break;
 8007712:	e042      	b.n	800779a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fd67 	bl	80071f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007750:	2105      	movs	r1, #5
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fe20 	bl	80073b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007770:	e014      	b.n	800779c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fb00 	bl	8008d78 <USBH_LL_Start>
      break;
 8007778:	e010      	b.n	800779c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800777a:	bf00      	nop
 800777c:	e00e      	b.n	800779c <USBH_Process+0x3cc>
      break;
 800777e:	bf00      	nop
 8007780:	e00c      	b.n	800779c <USBH_Process+0x3cc>
      break;
 8007782:	bf00      	nop
 8007784:	e00a      	b.n	800779c <USBH_Process+0x3cc>
    break;
 8007786:	bf00      	nop
 8007788:	e008      	b.n	800779c <USBH_Process+0x3cc>
      break;
 800778a:	bf00      	nop
 800778c:	e006      	b.n	800779c <USBH_Process+0x3cc>
      break;
 800778e:	bf00      	nop
 8007790:	e004      	b.n	800779c <USBH_Process+0x3cc>
      break;
 8007792:	bf00      	nop
 8007794:	e002      	b.n	800779c <USBH_Process+0x3cc>
      break;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <USBH_Process+0x3cc>
      break;
 800779a:	bf00      	nop
  }
  return USBH_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop

080077a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b07      	cmp	r3, #7
 80077be:	f200 81c1 	bhi.w	8007b44 <USBH_HandleEnum+0x39c>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <USBH_HandleEnum+0x20>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077e9 	.word	0x080077e9
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	08007911 	.word	0x08007911
 80077d4:	0800799f 	.word	0x0800799f
 80077d8:	08007a09 	.word	0x08007a09
 80077dc:	08007a79 	.word	0x08007a79
 80077e0:	08007abf 	.word	0x08007abf
 80077e4:	08007b05 	.word	0x08007b05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077e8:	2108      	movs	r1, #8
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa50 	bl	8007c90 <USBH_Get_DevDesc>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d130      	bne.n	800785c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7919      	ldrb	r1, [r3, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800781e:	b292      	uxth	r2, r2
 8007820:	9202      	str	r2, [sp, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	9201      	str	r2, [sp, #4]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4603      	mov	r3, r0
 800782a:	2280      	movs	r2, #128	; 0x80
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 f865 	bl	80088fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7959      	ldrb	r1, [r3, #5]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007846:	b292      	uxth	r2, r2
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4603      	mov	r3, r0
 8007852:	2200      	movs	r2, #0
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f851 	bl	80088fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800785a:	e175      	b.n	8007b48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b03      	cmp	r3, #3
 8007860:	f040 8172 	bne.w	8007b48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786a:	3301      	adds	r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800787a:	2b03      	cmp	r3, #3
 800787c:	d903      	bls.n	8007886 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220d      	movs	r2, #13
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e160      	b.n	8007b48 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	795b      	ldrb	r3, [r3, #5]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f885 	bl	800899c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 f87f 	bl	800899c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
      break;
 80078a4:	e150      	b.n	8007b48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078a6:	2112      	movs	r1, #18
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9f1 	bl	8007c90 <USBH_Get_DevDesc>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078be:	e145      	b.n	8007b4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	f040 8142 	bne.w	8007b4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d903      	bls.n	80078ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220d      	movs	r2, #13
 80078e6:	701a      	strb	r2, [r3, #0]
      break;
 80078e8:	e130      	b.n	8007b4c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 f853 	bl	800899c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f84d 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
      break;
 800790e:	e11d      	b.n	8007b4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa68 	bl	8007de8 <USBH_SetAddress>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d132      	bne.n	8007988 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007922:	2002      	movs	r0, #2
 8007924:	f001 fbb3 	bl	800908e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2203      	movs	r2, #3
 8007934:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7919      	ldrb	r1, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800794a:	b292      	uxth	r2, r2
 800794c:	9202      	str	r2, [sp, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	9201      	str	r2, [sp, #4]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4603      	mov	r3, r0
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 ffcf 	bl	80088fc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7959      	ldrb	r1, [r3, #5]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007972:	b292      	uxth	r2, r2
 8007974:	9202      	str	r2, [sp, #8]
 8007976:	2200      	movs	r2, #0
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	2200      	movs	r2, #0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 ffbb 	bl	80088fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007986:	e0e3      	b.n	8007b50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b03      	cmp	r3, #3
 800798c:	f040 80e0 	bne.w	8007b50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	220d      	movs	r2, #13
 8007994:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	705a      	strb	r2, [r3, #1]
      break;
 800799c:	e0d8      	b.n	8007b50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800799e:	2109      	movs	r1, #9
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f99d 	bl	8007ce0 <USBH_Get_CfgDesc>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2204      	movs	r2, #4
 80079b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079b6:	e0cd      	b.n	8007b54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f040 80ca 	bne.w	8007b54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d903      	bls.n	80079e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220d      	movs	r2, #13
 80079de:	701a      	strb	r2, [r3, #0]
      break;
 80079e0:	e0b8      	b.n	8007b54 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	795b      	ldrb	r3, [r3, #5]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 ffd7 	bl	800899c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 ffd1 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e0a5      	b.n	8007b54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f965 	bl	8007ce0 <USBH_Get_CfgDesc>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2205      	movs	r2, #5
 8007a24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a26:	e097      	b.n	8007b58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	f040 8094 	bne.w	8007b58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d903      	bls.n	8007a52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	220d      	movs	r2, #13
 8007a4e:	701a      	strb	r2, [r3, #0]
      break;
 8007a50:	e082      	b.n	8007b58 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795b      	ldrb	r3, [r3, #5]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 ff9f 	bl	800899c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 ff99 	bl	800899c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e06f      	b.n	8007b58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d019      	beq.n	8007ab6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a8e:	23ff      	movs	r3, #255	; 0xff
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f949 	bl	8007d28 <USBH_Get_StringDesc>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2206      	movs	r2, #6
 8007aa4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aa6:	e059      	b.n	8007b5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d156      	bne.n	8007b5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	705a      	strb	r2, [r3, #1]
      break;
 8007ab4:	e052      	b.n	8007b5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2206      	movs	r2, #6
 8007aba:	705a      	strb	r2, [r3, #1]
      break;
 8007abc:	e04e      	b.n	8007b5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ad4:	23ff      	movs	r3, #255	; 0xff
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f926 	bl	8007d28 <USBH_Get_StringDesc>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2207      	movs	r2, #7
 8007aea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aec:	e038      	b.n	8007b60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d135      	bne.n	8007b60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2207      	movs	r2, #7
 8007af8:	705a      	strb	r2, [r3, #1]
      break;
 8007afa:	e031      	b.n	8007b60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2207      	movs	r2, #7
 8007b00:	705a      	strb	r2, [r3, #1]
      break;
 8007b02:	e02d      	b.n	8007b60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b1a:	23ff      	movs	r3, #255	; 0xff
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f903 	bl	8007d28 <USBH_Get_StringDesc>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b30:	e018      	b.n	8007b64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d115      	bne.n	8007b64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3c:	e012      	b.n	8007b64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	e00f      	b.n	8007b64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b44:	bf00      	nop
 8007b46:	e00e      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b48:	bf00      	nop
 8007b4a:	e00c      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b4c:	bf00      	nop
 8007b4e:	e00a      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b50:	bf00      	nop
 8007b52:	e008      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b54:	bf00      	nop
 8007b56:	e006      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e004      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e002      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b64:	bf00      	nop
  }
  return Status;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f804 	bl	8007bb2 <USBH_HandleSof>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b0b      	cmp	r3, #11
 8007bc2:	d10a      	bne.n	8007bda <USBH_HandleSof+0x28>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bf2:	bf00      	nop
}
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c0e:	bf00      	nop
}
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 f8a0 	bl	8008dae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fe91 	bl	800899c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	795b      	ldrb	r3, [r3, #5]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fe8b 	bl	800899c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f864 	bl	8007d7e <USBH_GetDescriptor>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	b292      	uxth	r2, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f000 f918 	bl	8007f06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	331c      	adds	r3, #28
 8007cf0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cf2:	887b      	ldrh	r3, [r7, #2]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f83d 	bl	8007d7e <USBH_GetDescriptor>
 8007d04:	4603      	mov	r3, r0
 8007d06:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d0e:	887b      	ldrh	r3, [r7, #2]
 8007d10:	461a      	mov	r2, r3
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f987 	bl	8008028 <USBH_ParseCfgDesc>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	460b      	mov	r3, r1
 8007d36:	72fb      	strb	r3, [r7, #11]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d44:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d4c:	893b      	ldrh	r3, [r7, #8]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	460b      	mov	r3, r1
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f812 	bl	8007d7e <USBH_GetDescriptor>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d6a:	893a      	ldrh	r2, [r7, #8]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fb24 	bl	80083bc <USBH_ParseStringDesc>
  }

  return status;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	72fb      	strb	r3, [r7, #11]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	789b      	ldrb	r3, [r3, #2]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d11c      	bne.n	8007dd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2206      	movs	r2, #6
 8007da8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	893a      	ldrh	r2, [r7, #8]
 8007dae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007db0:	893b      	ldrh	r3, [r7, #8]
 8007db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dba:	d104      	bne.n	8007dc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f240 4209 	movw	r2, #1033	; 0x409
 8007dc2:	829a      	strh	r2, [r3, #20]
 8007dc4:	e002      	b.n	8007dcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8b3a      	ldrh	r2, [r7, #24]
 8007dd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007dd2:	8b3b      	ldrh	r3, [r7, #24]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fb3d 	bl	8008458 <USBH_CtlReq>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	789b      	ldrb	r3, [r3, #2]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10f      	bne.n	8007e1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fb19 	bl	8008458 <USBH_CtlReq>
 8007e26:	4603      	mov	r3, r0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d10e      	bne.n	8007e62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2209      	movs	r2, #9
 8007e4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 faf6 	bl	8008458 <USBH_CtlReq>
 8007e6c:	4603      	mov	r3, r0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	789b      	ldrb	r3, [r3, #2]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d10f      	bne.n	8007eaa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2203      	movs	r2, #3
 8007e94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fad2 	bl	8008458 <USBH_CtlReq>
 8007eb4:	4603      	mov	r3, r0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	789b      	ldrb	r3, [r3, #2]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d10f      	bne.n	8007ef2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 faae 	bl	8008458 <USBH_CtlReq>
 8007efc:	4603      	mov	r3, r0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	785a      	ldrb	r2, [r3, #1]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3302      	adds	r3, #2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3303      	adds	r3, #3
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	791a      	ldrb	r2, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	795a      	ldrb	r2, [r3, #5]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	799a      	ldrb	r2, [r3, #6]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	79da      	ldrb	r2, [r3, #7]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	79db      	ldrb	r3, [r3, #7]
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	dc11      	bgt.n	8007f8c <USBH_ParseDevDesc+0x86>
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	db16      	blt.n	8007f9a <USBH_ParseDevDesc+0x94>
 8007f6c:	3b08      	subs	r3, #8
 8007f6e:	2201      	movs	r2, #1
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <USBH_ParseDevDesc+0x8a>
 8007f8a:	e006      	b.n	8007f9a <USBH_ParseDevDesc+0x94>
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d104      	bne.n	8007f9a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	79da      	ldrb	r2, [r3, #7]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	71da      	strb	r2, [r3, #7]
      break;
 8007f98:	e003      	b.n	8007fa2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2240      	movs	r2, #64	; 0x40
 8007f9e:	71da      	strb	r2, [r3, #7]
      break;
 8007fa0:	bf00      	nop
  }

  if (length > 8U)
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d939      	bls.n	800801c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	3308      	adds	r3, #8
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	3309      	adds	r3, #9
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	330a      	adds	r3, #10
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	330b      	adds	r3, #11
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	330c      	adds	r3, #12
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	330d      	adds	r3, #13
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	021b      	lsls	r3, r3, #8
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	7b9a      	ldrb	r2, [r3, #14]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	7bda      	ldrb	r2, [r3, #15]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	7c1a      	ldrb	r2, [r3, #16]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	7c5a      	ldrb	r2, [r3, #17]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	745a      	strb	r2, [r3, #17]
  }
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08c      	sub	sp, #48	; 0x30
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800803c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	785a      	ldrb	r2, [r3, #1]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	3302      	adds	r3, #2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3303      	adds	r3, #3
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	b29b      	uxth	r3, r3
 800807c:	4313      	orrs	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008084:	bf28      	it	cs
 8008086:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800808a:	b29a      	uxth	r2, r3
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	791a      	ldrb	r2, [r3, #4]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	795a      	ldrb	r2, [r3, #5]
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	799a      	ldrb	r2, [r3, #6]
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	79da      	ldrb	r2, [r3, #7]
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	7a1a      	ldrb	r2, [r3, #8]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b09      	cmp	r3, #9
 80080be:	d002      	beq.n	80080c6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	2209      	movs	r2, #9
 80080c4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	f240 809d 	bls.w	8008208 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80080ce:	2309      	movs	r3, #9
 80080d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080d6:	e081      	b.n	80081dc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080d8:	f107 0316 	add.w	r3, r7, #22
 80080dc:	4619      	mov	r1, r3
 80080de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e0:	f000 f99f 	bl	8008422 <USBH_GetNextDesc>
 80080e4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d176      	bne.n	80081dc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b09      	cmp	r3, #9
 80080f4:	d002      	beq.n	80080fc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2209      	movs	r2, #9
 80080fa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008100:	221a      	movs	r2, #26
 8008102:	fb02 f303 	mul.w	r3, r2, r3
 8008106:	3308      	adds	r3, #8
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	4413      	add	r3, r2
 800810c:	3302      	adds	r3, #2
 800810e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008112:	69f8      	ldr	r0, [r7, #28]
 8008114:	f000 f87e 	bl	8008214 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008122:	e043      	b.n	80081ac <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008124:	f107 0316 	add.w	r3, r7, #22
 8008128:	4619      	mov	r1, r3
 800812a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812c:	f000 f979 	bl	8008422 <USBH_GetNextDesc>
 8008130:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b05      	cmp	r3, #5
 8008138:	d138      	bne.n	80081ac <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	795b      	ldrb	r3, [r3, #5]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d10f      	bne.n	8008162 <USBH_ParseCfgDesc+0x13a>
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	799b      	ldrb	r3, [r3, #6]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d10b      	bne.n	8008162 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	79db      	ldrb	r3, [r3, #7]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10f      	bne.n	8008172 <USBH_ParseCfgDesc+0x14a>
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b09      	cmp	r3, #9
 8008158:	d00b      	beq.n	8008172 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	2209      	movs	r2, #9
 800815e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008160:	e007      	b.n	8008172 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b07      	cmp	r3, #7
 8008168:	d004      	beq.n	8008174 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	2207      	movs	r2, #7
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e000      	b.n	8008174 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008172:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008178:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800817c:	3201      	adds	r2, #1
 800817e:	00d2      	lsls	r2, r2, #3
 8008180:	211a      	movs	r1, #26
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	4413      	add	r3, r2
 8008188:	3308      	adds	r3, #8
 800818a:	6a3a      	ldr	r2, [r7, #32]
 800818c:	4413      	add	r3, r2
 800818e:	3304      	adds	r3, #4
 8008190:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f86b 	bl	8008272 <USBH_ParseEPDesc>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80081a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081a6:	3301      	adds	r3, #1
 80081a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	791b      	ldrb	r3, [r3, #4]
 80081b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d204      	bcs.n	80081c2 <USBH_ParseCfgDesc+0x19a>
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	885a      	ldrh	r2, [r3, #2]
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d8b0      	bhi.n	8008124 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d201      	bcs.n	80081d2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e01c      	b.n	800820c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80081d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d6:	3301      	adds	r3, #1
 80081d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d805      	bhi.n	80081f0 <USBH_ParseCfgDesc+0x1c8>
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	885a      	ldrh	r2, [r3, #2]
 80081e8:	8afb      	ldrh	r3, [r7, #22]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	f63f af74 	bhi.w	80080d8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	bf28      	it	cs
 80081f8:	2302      	movcs	r3, #2
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008200:	429a      	cmp	r2, r3
 8008202:	d201      	bcs.n	8008208 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008204:	2303      	movs	r3, #3
 8008206:	e001      	b.n	800820c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800820c:	4618      	mov	r0, r3
 800820e:	3730      	adds	r7, #48	; 0x30
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	785a      	ldrb	r2, [r3, #1]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	789a      	ldrb	r2, [r3, #2]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	78da      	ldrb	r2, [r3, #3]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	791a      	ldrb	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	795a      	ldrb	r2, [r3, #5]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	799a      	ldrb	r2, [r3, #6]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	79da      	ldrb	r2, [r3, #7]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	7a1a      	ldrb	r2, [r3, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	721a      	strb	r2, [r3, #8]
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008272:	b480      	push	{r7}
 8008274:	b087      	sub	sp, #28
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	785a      	ldrb	r2, [r3, #1]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	789a      	ldrb	r2, [r3, #2]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	78da      	ldrb	r2, [r3, #3]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3305      	adds	r3, #5
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4313      	orrs	r3, r2
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	799a      	ldrb	r2, [r3, #6]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	889b      	ldrh	r3, [r3, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
 80082d2:	e033      	b.n	800833c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	889b      	ldrh	r3, [r3, #4]
 80082d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	889b      	ldrh	r3, [r3, #4]
 80082ea:	b21a      	sxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b299      	uxth	r1, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3305      	adds	r3, #5
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	b29b      	uxth	r3, r3
 8008300:	430b      	orrs	r3, r1
 8008302:	b29b      	uxth	r3, r3
 8008304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008308:	2b00      	cmp	r3, #0
 800830a:	d110      	bne.n	800832e <USBH_ParseEPDesc+0xbc>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b299      	uxth	r1, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3305      	adds	r3, #5
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	b29b      	uxth	r3, r3
 8008320:	430b      	orrs	r3, r1
 8008322:	b29b      	uxth	r3, r3
 8008324:	b21b      	sxth	r3, r3
 8008326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800832a:	b21b      	sxth	r3, r3
 800832c:	e001      	b.n	8008332 <USBH_ParseEPDesc+0xc0>
 800832e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008332:	4313      	orrs	r3, r2
 8008334:	b21b      	sxth	r3, r3
 8008336:	b29a      	uxth	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008342:	2b00      	cmp	r3, #0
 8008344:	d116      	bne.n	8008374 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	78db      	ldrb	r3, [r3, #3]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b01      	cmp	r3, #1
 8008350:	d005      	beq.n	800835e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	78db      	ldrb	r3, [r3, #3]
 8008356:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800835a:	2b03      	cmp	r3, #3
 800835c:	d127      	bne.n	80083ae <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	799b      	ldrb	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <USBH_ParseEPDesc+0xfc>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	799b      	ldrb	r3, [r3, #6]
 800836a:	2b10      	cmp	r3, #16
 800836c:	d91f      	bls.n	80083ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800836e:	2303      	movs	r3, #3
 8008370:	75fb      	strb	r3, [r7, #23]
 8008372:	e01c      	b.n	80083ae <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	78db      	ldrb	r3, [r3, #3]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10a      	bne.n	8008396 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	799b      	ldrb	r3, [r3, #6]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <USBH_ParseEPDesc+0x11e>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	799b      	ldrb	r3, [r3, #6]
 800838c:	2b10      	cmp	r3, #16
 800838e:	d90e      	bls.n	80083ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008390:	2303      	movs	r3, #3
 8008392:	75fb      	strb	r3, [r7, #23]
 8008394:	e00b      	b.n	80083ae <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	78db      	ldrb	r3, [r3, #3]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d105      	bne.n	80083ae <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	799b      	ldrb	r3, [r3, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	371c      	adds	r7, #28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d120      	bne.n	8008416 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	1e9a      	subs	r2, r3, #2
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	4293      	cmp	r3, r2
 80083de:	bf28      	it	cs
 80083e0:	4613      	movcs	r3, r2
 80083e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3302      	adds	r3, #2
 80083e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083ea:	2300      	movs	r3, #0
 80083ec:	82fb      	strh	r3, [r7, #22]
 80083ee:	e00b      	b.n	8008408 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083f0:	8afb      	ldrh	r3, [r7, #22]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3301      	adds	r3, #1
 8008400:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008402:	8afb      	ldrh	r3, [r7, #22]
 8008404:	3302      	adds	r3, #2
 8008406:	82fb      	strh	r3, [r7, #22]
 8008408:	8afa      	ldrh	r2, [r7, #22]
 800840a:	8abb      	ldrh	r3, [r7, #20]
 800840c:	429a      	cmp	r2, r3
 800840e:	d3ef      	bcc.n	80083f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
  }
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	881a      	ldrh	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	4413      	add	r3, r2
 8008438:	b29a      	uxth	r2, r3
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800844a:	68fb      	ldr	r3, [r7, #12]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008466:	2301      	movs	r3, #1
 8008468:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	789b      	ldrb	r3, [r3, #2]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d002      	beq.n	8008478 <USBH_CtlReq+0x20>
 8008472:	2b02      	cmp	r3, #2
 8008474:	d00f      	beq.n	8008496 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008476:	e027      	b.n	80084c8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	88fa      	ldrh	r2, [r7, #6]
 8008482:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2202      	movs	r2, #2
 800848e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
      break;
 8008494:	e018      	b.n	80084c8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f81c 	bl	80084d4 <USBH_HandleControl>
 800849c:	4603      	mov	r3, r0
 800849e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <USBH_CtlReq+0x54>
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d106      	bne.n	80084ba <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	761a      	strb	r2, [r3, #24]
      break;
 80084b8:	e005      	b.n	80084c6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d102      	bne.n	80084c6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	709a      	strb	r2, [r3, #2]
      break;
 80084c6:	bf00      	nop
  }
  return status;
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
	...

080084d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af02      	add	r7, sp, #8
 80084da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7e1b      	ldrb	r3, [r3, #24]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b0a      	cmp	r3, #10
 80084ec:	f200 8156 	bhi.w	800879c <USBH_HandleControl+0x2c8>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBH_HandleControl+0x24>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008525 	.word	0x08008525
 80084fc:	0800853f 	.word	0x0800853f
 8008500:	080085a9 	.word	0x080085a9
 8008504:	080085cf 	.word	0x080085cf
 8008508:	08008607 	.word	0x08008607
 800850c:	08008631 	.word	0x08008631
 8008510:	08008683 	.word	0x08008683
 8008514:	080086a5 	.word	0x080086a5
 8008518:	080086e1 	.word	0x080086e1
 800851c:	08008707 	.word	0x08008707
 8008520:	08008745 	.word	0x08008745
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f103 0110 	add.w	r1, r3, #16
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	461a      	mov	r2, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f943 	bl	80087bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	761a      	strb	r2, [r3, #24]
      break;
 800853c:	e139      	b.n	80087b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	795b      	ldrb	r3, [r3, #5]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fd21 	bl	8008f8c <USBH_LL_GetURBState>
 800854a:	4603      	mov	r3, r0
 800854c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d11e      	bne.n	8008592 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800855c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	8adb      	ldrh	r3, [r3, #22]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008566:	7b7b      	ldrb	r3, [r7, #13]
 8008568:	2b80      	cmp	r3, #128	; 0x80
 800856a:	d103      	bne.n	8008574 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2203      	movs	r2, #3
 8008570:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008572:	e115      	b.n	80087a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2205      	movs	r2, #5
 8008578:	761a      	strb	r2, [r3, #24]
      break;
 800857a:	e111      	b.n	80087a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800857c:	7b7b      	ldrb	r3, [r7, #13]
 800857e:	2b80      	cmp	r3, #128	; 0x80
 8008580:	d103      	bne.n	800858a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2209      	movs	r2, #9
 8008586:	761a      	strb	r2, [r3, #24]
      break;
 8008588:	e10a      	b.n	80087a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2207      	movs	r2, #7
 800858e:	761a      	strb	r2, [r3, #24]
      break;
 8008590:	e106      	b.n	80087a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b04      	cmp	r3, #4
 8008596:	d003      	beq.n	80085a0 <USBH_HandleControl+0xcc>
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b02      	cmp	r3, #2
 800859c:	f040 8100 	bne.w	80087a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	220b      	movs	r2, #11
 80085a4:	761a      	strb	r2, [r3, #24]
      break;
 80085a6:	e0fb      	b.n	80087a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6899      	ldr	r1, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	899a      	ldrh	r2, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	791b      	ldrb	r3, [r3, #4]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f93a 	bl	800883a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2204      	movs	r2, #4
 80085ca:	761a      	strb	r2, [r3, #24]
      break;
 80085cc:	e0f1      	b.n	80087b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	791b      	ldrb	r3, [r3, #4]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fcd9 	bl	8008f8c <USBH_LL_GetURBState>
 80085da:	4603      	mov	r3, r0
 80085dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085de:	7bbb      	ldrb	r3, [r7, #14]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d102      	bne.n	80085ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2209      	movs	r2, #9
 80085e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d102      	bne.n	80085f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085f0:	2303      	movs	r3, #3
 80085f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085f4:	e0d6      	b.n	80087a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	f040 80d3 	bne.w	80087a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	220b      	movs	r2, #11
 8008602:	761a      	strb	r2, [r3, #24]
      break;
 8008604:	e0ce      	b.n	80087a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6899      	ldr	r1, [r3, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	899a      	ldrh	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	2001      	movs	r0, #1
 8008614:	9000      	str	r0, [sp, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f8ea 	bl	80087f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008622:	b29a      	uxth	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2206      	movs	r2, #6
 800862c:	761a      	strb	r2, [r3, #24]
      break;
 800862e:	e0c0      	b.n	80087b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	795b      	ldrb	r3, [r3, #5]
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fca8 	bl	8008f8c <USBH_LL_GetURBState>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d103      	bne.n	800864e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2207      	movs	r2, #7
 800864a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800864c:	e0ac      	b.n	80087a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b05      	cmp	r3, #5
 8008652:	d105      	bne.n	8008660 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	220c      	movs	r2, #12
 8008658:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800865a:	2303      	movs	r3, #3
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	e0a3      	b.n	80087a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d103      	bne.n	800866e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2205      	movs	r2, #5
 800866a:	761a      	strb	r2, [r3, #24]
      break;
 800866c:	e09c      	b.n	80087a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b04      	cmp	r3, #4
 8008672:	f040 8099 	bne.w	80087a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	220b      	movs	r2, #11
 800867a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800867c:	2302      	movs	r3, #2
 800867e:	73fb      	strb	r3, [r7, #15]
      break;
 8008680:	e092      	b.n	80087a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	791b      	ldrb	r3, [r3, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	2100      	movs	r1, #0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8d5 	bl	800883a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2208      	movs	r2, #8
 80086a0:	761a      	strb	r2, [r3, #24]

      break;
 80086a2:	e086      	b.n	80087b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	791b      	ldrb	r3, [r3, #4]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fc6e 	bl	8008f8c <USBH_LL_GetURBState>
 80086b0:	4603      	mov	r3, r0
 80086b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	220d      	movs	r2, #13
 80086be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086c4:	e072      	b.n	80087ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d103      	bne.n	80086d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	220b      	movs	r2, #11
 80086d0:	761a      	strb	r2, [r3, #24]
      break;
 80086d2:	e06b      	b.n	80087ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b05      	cmp	r3, #5
 80086d8:	d168      	bne.n	80087ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80086da:	2303      	movs	r3, #3
 80086dc:	73fb      	strb	r3, [r7, #15]
      break;
 80086de:	e065      	b.n	80087ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	795b      	ldrb	r3, [r3, #5]
 80086e4:	2201      	movs	r2, #1
 80086e6:	9200      	str	r2, [sp, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	2100      	movs	r1, #0
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f87f 	bl	80087f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220a      	movs	r2, #10
 8008702:	761a      	strb	r2, [r3, #24]
      break;
 8008704:	e055      	b.n	80087b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	795b      	ldrb	r3, [r3, #5]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fc3d 	bl	8008f8c <USBH_LL_GetURBState>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d105      	bne.n	8008728 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	220d      	movs	r2, #13
 8008724:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008726:	e043      	b.n	80087b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d103      	bne.n	8008736 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2209      	movs	r2, #9
 8008732:	761a      	strb	r2, [r3, #24]
      break;
 8008734:	e03c      	b.n	80087b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b04      	cmp	r3, #4
 800873a:	d139      	bne.n	80087b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	220b      	movs	r2, #11
 8008740:	761a      	strb	r2, [r3, #24]
      break;
 8008742:	e035      	b.n	80087b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7e5b      	ldrb	r3, [r3, #25]
 8008748:	3301      	adds	r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	765a      	strb	r2, [r3, #25]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e5b      	ldrb	r3, [r3, #25]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d806      	bhi.n	8008766 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008764:	e025      	b.n	80087b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800876c:	2106      	movs	r1, #6
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	795b      	ldrb	r3, [r3, #5]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f90c 	bl	800899c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	791b      	ldrb	r3, [r3, #4]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f906 	bl	800899c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008796:	2302      	movs	r3, #2
 8008798:	73fb      	strb	r3, [r7, #15]
      break;
 800879a:	e00a      	b.n	80087b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800879c:	bf00      	nop
 800879e:	e008      	b.n	80087b2 <USBH_HandleControl+0x2de>
      break;
 80087a0:	bf00      	nop
 80087a2:	e006      	b.n	80087b2 <USBH_HandleControl+0x2de>
      break;
 80087a4:	bf00      	nop
 80087a6:	e004      	b.n	80087b2 <USBH_HandleControl+0x2de>
      break;
 80087a8:	bf00      	nop
 80087aa:	e002      	b.n	80087b2 <USBH_HandleControl+0x2de>
      break;
 80087ac:	bf00      	nop
 80087ae:	e000      	b.n	80087b2 <USBH_HandleControl+0x2de>
      break;
 80087b0:	bf00      	nop
  }

  return status;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087ca:	79f9      	ldrb	r1, [r7, #7]
 80087cc:	2300      	movs	r3, #0
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	2308      	movs	r3, #8
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	2300      	movs	r3, #0
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2300      	movs	r3, #0
 80087de:	2200      	movs	r2, #0
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 fba2 	bl	8008f2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af04      	add	r7, sp, #16
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4611      	mov	r1, r2
 80087fc:	461a      	mov	r2, r3
 80087fe:	460b      	mov	r3, r1
 8008800:	80fb      	strh	r3, [r7, #6]
 8008802:	4613      	mov	r3, r2
 8008804:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008814:	7979      	ldrb	r1, [r7, #5]
 8008816:	7e3b      	ldrb	r3, [r7, #24]
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	2301      	movs	r3, #1
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	2300      	movs	r3, #0
 8008828:	2200      	movs	r2, #0
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fb7d 	bl	8008f2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b088      	sub	sp, #32
 800883e:	af04      	add	r7, sp, #16
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	4611      	mov	r1, r2
 8008846:	461a      	mov	r2, r3
 8008848:	460b      	mov	r3, r1
 800884a:	80fb      	strh	r3, [r7, #6]
 800884c:	4613      	mov	r3, r2
 800884e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008850:	7979      	ldrb	r1, [r7, #5]
 8008852:	2300      	movs	r3, #0
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	2301      	movs	r3, #1
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2300      	movs	r3, #0
 8008864:	2201      	movs	r2, #1
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fb5f 	bl	8008f2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800886c:	2300      	movs	r3, #0

}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b088      	sub	sp, #32
 800887a:	af04      	add	r7, sp, #16
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	4611      	mov	r1, r2
 8008882:	461a      	mov	r2, r3
 8008884:	460b      	mov	r3, r1
 8008886:	80fb      	strh	r3, [r7, #6]
 8008888:	4613      	mov	r3, r2
 800888a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800889a:	7979      	ldrb	r1, [r7, #5]
 800889c:	7e3b      	ldrb	r3, [r7, #24]
 800889e:	9303      	str	r3, [sp, #12]
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	9302      	str	r3, [sp, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	2301      	movs	r3, #1
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	2302      	movs	r3, #2
 80088ae:	2200      	movs	r2, #0
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fb3a 	bl	8008f2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	80fb      	strh	r3, [r7, #6]
 80088d2:	4613      	mov	r3, r2
 80088d4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088d6:	7979      	ldrb	r1, [r7, #5]
 80088d8:	2300      	movs	r3, #0
 80088da:	9303      	str	r3, [sp, #12]
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	2301      	movs	r3, #1
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2201      	movs	r2, #1
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fb1c 	bl	8008f2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af04      	add	r7, sp, #16
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	461a      	mov	r2, r3
 800890a:	4603      	mov	r3, r0
 800890c:	70fb      	strb	r3, [r7, #3]
 800890e:	460b      	mov	r3, r1
 8008910:	70bb      	strb	r3, [r7, #2]
 8008912:	4613      	mov	r3, r2
 8008914:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008916:	7878      	ldrb	r0, [r7, #1]
 8008918:	78ba      	ldrb	r2, [r7, #2]
 800891a:	78f9      	ldrb	r1, [r7, #3]
 800891c:	8b3b      	ldrh	r3, [r7, #24]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	7d3b      	ldrb	r3, [r7, #20]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	7c3b      	ldrb	r3, [r7, #16]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4603      	mov	r3, r0
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 faaf 	bl	8008e8e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 face 	bl	8008eec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f836 	bl	80089d8 <USBH_GetFreePipe>
 800896c:	4603      	mov	r3, r0
 800896e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008970:	89fb      	ldrh	r3, [r7, #14]
 8008972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008976:	4293      	cmp	r3, r2
 8008978:	d00a      	beq.n	8008990 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	33e0      	adds	r3, #224	; 0xe0
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	b2db      	uxtb	r3, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	d80d      	bhi.n	80089ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	33e0      	adds	r3, #224	; 0xe0
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	33e0      	adds	r3, #224	; 0xe0
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	e00f      	b.n	8008a0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	33e0      	adds	r3, #224	; 0xe0
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	e007      	b.n	8008a14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	3301      	adds	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b0f      	cmp	r3, #15
 8008a0e:	d9ec      	bls.n	80089ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a36:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a38:	7a5b      	ldrb	r3, [r3, #9]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d131      	bne.n	8008aa4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a40:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a42:	7a5b      	ldrb	r3, [r3, #9]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b1a      	ldr	r3, [pc, #104]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a4e:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a50:	7a5b      	ldrb	r3, [r3, #9]
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4a17      	ldr	r2, [pc, #92]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a5e:	4b15      	ldr	r3, [pc, #84]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a60:	7a5b      	ldrb	r3, [r3, #9]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a68:	4413      	add	r3, r2
 8008a6a:	79fa      	ldrb	r2, [r7, #7]
 8008a6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a70:	7a5b      	ldrb	r3, [r3, #9]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	b2d1      	uxtb	r1, r2
 8008a78:	4a0e      	ldr	r2, [pc, #56]	; (8008ab4 <FATFS_LinkDriverEx+0x94>)
 8008a7a:	7251      	strb	r1, [r2, #9]
 8008a7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a7e:	7dbb      	ldrb	r3, [r7, #22]
 8008a80:	3330      	adds	r3, #48	; 0x30
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	223a      	movs	r2, #58	; 0x3a
 8008a8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	3302      	adds	r3, #2
 8008a94:	222f      	movs	r2, #47	; 0x2f
 8008a96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	3303      	adds	r3, #3
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	200001a8 	.word	0x200001a8

08008ab8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff ffaa 	bl	8008a20 <FATFS_LinkDriverEx>
 8008acc:	4603      	mov	r3, r0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008adc:	2201      	movs	r2, #1
 8008ade:	490e      	ldr	r1, [pc, #56]	; (8008b18 <MX_USB_HOST_Init+0x40>)
 8008ae0:	480e      	ldr	r0, [pc, #56]	; (8008b1c <MX_USB_HOST_Init+0x44>)
 8008ae2:	f7fe fb4b 	bl	800717c <USBH_Init>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008aec:	f7f8 f82e 	bl	8000b4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8008af0:	490b      	ldr	r1, [pc, #44]	; (8008b20 <MX_USB_HOST_Init+0x48>)
 8008af2:	480a      	ldr	r0, [pc, #40]	; (8008b1c <MX_USB_HOST_Init+0x44>)
 8008af4:	f7fe fbd0 	bl	8007298 <USBH_RegisterClass>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008afe:	f7f8 f825 	bl	8000b4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b02:	4806      	ldr	r0, [pc, #24]	; (8008b1c <MX_USB_HOST_Init+0x44>)
 8008b04:	f7fe fc54 	bl	80073b0 <USBH_Start>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b0e:	f7f8 f81d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	08008b39 	.word	0x08008b39
 8008b1c:	200001b4 	.word	0x200001b4
 8008b20:	2000000c 	.word	0x2000000c

08008b24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b28:	4802      	ldr	r0, [pc, #8]	; (8008b34 <MX_USB_HOST_Process+0x10>)
 8008b2a:	f7fe fc51 	bl	80073d0 <USBH_Process>
}
 8008b2e:	bf00      	nop
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200001b4 	.word	0x200001b4

08008b38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d819      	bhi.n	8008b80 <USBH_UserProcess+0x48>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <USBH_UserProcess+0x1c>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b81 	.word	0x08008b81
 8008b58:	08008b71 	.word	0x08008b71
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b79 	.word	0x08008b79
 8008b64:	08008b69 	.word	0x08008b69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b68:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <USBH_UserProcess+0x58>)
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	701a      	strb	r2, [r3, #0]
  break;
 8008b6e:	e008      	b.n	8008b82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <USBH_UserProcess+0x58>)
 8008b72:	2202      	movs	r2, #2
 8008b74:	701a      	strb	r2, [r3, #0]
  break;
 8008b76:	e004      	b.n	8008b82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <USBH_UserProcess+0x58>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	701a      	strb	r2, [r3, #0]
  break;
 8008b7e:	e000      	b.n	8008b82 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	2000058c 	.word	0x2000058c

08008b94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b9c:	f107 0314 	add.w	r3, r7, #20
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	609a      	str	r2, [r3, #8]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb4:	d147      	bne.n	8008c46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	4b25      	ldr	r3, [pc, #148]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	4a24      	ldr	r2, [pc, #144]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc6:	4b22      	ldr	r3, [pc, #136]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4619      	mov	r1, r3
 8008be6:	481b      	ldr	r0, [pc, #108]	; (8008c54 <HAL_HCD_MspInit+0xc0>)
 8008be8:	f7f8 fcb4 	bl	8001554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bfe:	230a      	movs	r3, #10
 8008c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c02:	f107 0314 	add.w	r3, r7, #20
 8008c06:	4619      	mov	r1, r3
 8008c08:	4812      	ldr	r0, [pc, #72]	; (8008c54 <HAL_HCD_MspInit+0xc0>)
 8008c0a:	f7f8 fca3 	bl	8001554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c0e:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c12:	4a0f      	ldr	r2, [pc, #60]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c18:	6353      	str	r3, [r2, #52]	; 0x34
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c22:	4a0b      	ldr	r2, [pc, #44]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c28:	6453      	str	r3, [r2, #68]	; 0x44
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <HAL_HCD_MspInit+0xbc>)
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c36:	2200      	movs	r2, #0
 8008c38:	2100      	movs	r1, #0
 8008c3a:	2043      	movs	r0, #67	; 0x43
 8008c3c:	f7f8 fac9 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c40:	2043      	movs	r0, #67	; 0x43
 8008c42:	f7f8 fae2 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c46:	bf00      	nop
 8008c48:	3728      	adds	r7, #40	; 0x28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40020000 	.word	0x40020000

08008c58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe ff91 	bl	8007b8e <USBH_LL_IncTimer>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe ffc9 	bl	8007c1a <USBH_LL_Connect>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe ffd2 	bl	8007c48 <USBH_LL_Disconnect>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe ff83 	bl	8007be2 <USBH_LL_PortEnabled>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe ff83 	bl	8007bfe <USBH_LL_PortDisabled>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d12a      	bne.n	8008d68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d12:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d30:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d3e:	2202      	movs	r2, #2
 8008d40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d48:	480a      	ldr	r0, [pc, #40]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d4a:	f7f8 fdd1 	bl	80018f0 <HAL_HCD_Init>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d54:	f7f7 fefa 	bl	8000b4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d58:	4806      	ldr	r0, [pc, #24]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d5a:	f7f9 f9b4 	bl	80020c6 <HAL_HCD_GetCurrentFrame>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7fe ff04 	bl	8007b70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20000590 	.word	0x20000590

08008d78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f9 f923 	bl	8001fda <HAL_HCD_Start>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f982 	bl	80090a4 <USBH_Get_USB_Status>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 f92b 	bl	8002020 <HAL_HCD_Stop>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f967 	bl	80090a4 <USBH_Get_USB_Status>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f9 f973 	bl	80020e2 <HAL_HCD_GetCurrentSpeed>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d00c      	beq.n	8008e1c <USBH_LL_GetSpeed+0x38>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d80d      	bhi.n	8008e22 <USBH_LL_GetSpeed+0x3e>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <USBH_LL_GetSpeed+0x2c>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d003      	beq.n	8008e16 <USBH_LL_GetSpeed+0x32>
 8008e0e:	e008      	b.n	8008e22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	e008      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e16:	2301      	movs	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1a:	e005      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e002      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
    break;
 8008e26:	bf00      	nop
  }
  return  speed;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7f9 f906 	bl	800205a <HAL_HCD_ResetPort>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f925 	bl	80090a4 <USBH_Get_USB_Status>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f9 f90d 	bl	800209e <HAL_HCD_HC_GetXferCount>
 8008e84:	4603      	mov	r3, r0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e8e:	b590      	push	{r4, r7, lr}
 8008e90:	b089      	sub	sp, #36	; 0x24
 8008e92:	af04      	add	r7, sp, #16
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70bb      	strb	r3, [r7, #2]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008eb6:	787c      	ldrb	r4, [r7, #1]
 8008eb8:	78ba      	ldrb	r2, [r7, #2]
 8008eba:	78f9      	ldrb	r1, [r7, #3]
 8008ebc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ebe:	9302      	str	r3, [sp, #8]
 8008ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4623      	mov	r3, r4
 8008ece:	f7f8 fd71 	bl	80019b4 <HAL_HCD_HC_Init>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 f8e3 	bl	80090a4 <USBH_Get_USB_Status>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd90      	pop	{r4, r7, pc}

08008eec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f8 fde1 	bl	8001ad2 <HAL_HCD_HC_Halt>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f8c4 	bl	80090a4 <USBH_Get_USB_Status>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f2a:	b590      	push	{r4, r7, lr}
 8008f2c:	b089      	sub	sp, #36	; 0x24
 8008f2e:	af04      	add	r7, sp, #16
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	70fb      	strb	r3, [r7, #3]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70bb      	strb	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f52:	787c      	ldrb	r4, [r7, #1]
 8008f54:	78ba      	ldrb	r2, [r7, #2]
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f60:	9302      	str	r3, [sp, #8]
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4623      	mov	r3, r4
 8008f6e:	f7f8 fdd3 	bl	8001b18 <HAL_HCD_HC_SubmitRequest>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 f893 	bl	80090a4 <USBH_Get_USB_Status>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd90      	pop	{r4, r7, pc}

08008f8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 f867 	bl	8002076 <HAL_HCD_HC_GetURBState>
 8008fa8:	4603      	mov	r3, r0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	460b      	mov	r3, r1
 8008fbc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8008fbe:	20c8      	movs	r0, #200	; 0xc8
 8008fc0:	f7f8 f808 	bl	8000fd4 <HAL_Delay>
  return USBH_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70fb      	strb	r3, [r7, #3]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fe4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	212c      	movs	r1, #44	; 0x2c
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	333b      	adds	r3, #59	; 0x3b
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	212c      	movs	r1, #44	; 0x2c
 8009000:	fb01 f303 	mul.w	r3, r1, r3
 8009004:	4413      	add	r3, r2
 8009006:	3354      	adds	r3, #84	; 0x54
 8009008:	78ba      	ldrb	r2, [r7, #2]
 800900a:	701a      	strb	r2, [r3, #0]
 800900c:	e008      	b.n	8009020 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	212c      	movs	r1, #44	; 0x2c
 8009014:	fb01 f303 	mul.w	r3, r1, r3
 8009018:	4413      	add	r3, r2
 800901a:	3355      	adds	r3, #85	; 0x55
 800901c:	78ba      	ldrb	r2, [r7, #2]
 800901e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009044:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	212c      	movs	r1, #44	; 0x2c
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	4413      	add	r3, r2
 8009052:	333b      	adds	r3, #59	; 0x3b
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	212c      	movs	r1, #44	; 0x2c
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	4413      	add	r3, r2
 8009066:	3354      	adds	r3, #84	; 0x54
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	73fb      	strb	r3, [r7, #15]
 800906c:	e008      	b.n	8009080 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	212c      	movs	r1, #44	; 0x2c
 8009074:	fb01 f303 	mul.w	r3, r1, r3
 8009078:	4413      	add	r3, r2
 800907a:	3355      	adds	r3, #85	; 0x55
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7f7 ff9c 	bl	8000fd4 <HAL_Delay>
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d817      	bhi.n	80090e8 <USBH_Get_USB_Status+0x44>
 80090b8:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <USBH_Get_USB_Status+0x1c>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	080090d7 	.word	0x080090d7
 80090c8:	080090dd 	.word	0x080090dd
 80090cc:	080090e3 	.word	0x080090e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]
    break;
 80090d4:	e00b      	b.n	80090ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090d6:	2302      	movs	r3, #2
 80090d8:	73fb      	strb	r3, [r7, #15]
    break;
 80090da:	e008      	b.n	80090ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090dc:	2301      	movs	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
    break;
 80090e0:	e005      	b.n	80090ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090e2:	2302      	movs	r3, #2
 80090e4:	73fb      	strb	r3, [r7, #15]
    break;
 80090e6:	e002      	b.n	80090ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090e8:	2302      	movs	r3, #2
 80090ea:	73fb      	strb	r3, [r7, #15]
    break;
 80090ec:	bf00      	nop
  }
  return usb_status;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <__errno>:
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <__errno+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000002c 	.word	0x2000002c

08009108 <__libc_init_array>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4d0d      	ldr	r5, [pc, #52]	; (8009140 <__libc_init_array+0x38>)
 800910c:	4c0d      	ldr	r4, [pc, #52]	; (8009144 <__libc_init_array+0x3c>)
 800910e:	1b64      	subs	r4, r4, r5
 8009110:	10a4      	asrs	r4, r4, #2
 8009112:	2600      	movs	r6, #0
 8009114:	42a6      	cmp	r6, r4
 8009116:	d109      	bne.n	800912c <__libc_init_array+0x24>
 8009118:	4d0b      	ldr	r5, [pc, #44]	; (8009148 <__libc_init_array+0x40>)
 800911a:	4c0c      	ldr	r4, [pc, #48]	; (800914c <__libc_init_array+0x44>)
 800911c:	f000 fd3c 	bl	8009b98 <_init>
 8009120:	1b64      	subs	r4, r4, r5
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	2600      	movs	r6, #0
 8009126:	42a6      	cmp	r6, r4
 8009128:	d105      	bne.n	8009136 <__libc_init_array+0x2e>
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009130:	4798      	blx	r3
 8009132:	3601      	adds	r6, #1
 8009134:	e7ee      	b.n	8009114 <__libc_init_array+0xc>
 8009136:	f855 3b04 	ldr.w	r3, [r5], #4
 800913a:	4798      	blx	r3
 800913c:	3601      	adds	r6, #1
 800913e:	e7f2      	b.n	8009126 <__libc_init_array+0x1e>
 8009140:	08009cb0 	.word	0x08009cb0
 8009144:	08009cb0 	.word	0x08009cb0
 8009148:	08009cb0 	.word	0x08009cb0
 800914c:	08009cb4 	.word	0x08009cb4

08009150 <malloc>:
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <malloc+0xc>)
 8009152:	4601      	mov	r1, r0
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f000 b88d 	b.w	8009274 <_malloc_r>
 800915a:	bf00      	nop
 800915c:	2000002c 	.word	0x2000002c

08009160 <free>:
 8009160:	4b02      	ldr	r3, [pc, #8]	; (800916c <free+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f000 b819 	b.w	800919c <_free_r>
 800916a:	bf00      	nop
 800916c:	2000002c 	.word	0x2000002c

08009170 <memcpy>:
 8009170:	440a      	add	r2, r1
 8009172:	4291      	cmp	r1, r2
 8009174:	f100 33ff 	add.w	r3, r0, #4294967295
 8009178:	d100      	bne.n	800917c <memcpy+0xc>
 800917a:	4770      	bx	lr
 800917c:	b510      	push	{r4, lr}
 800917e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009186:	4291      	cmp	r1, r2
 8009188:	d1f9      	bne.n	800917e <memcpy+0xe>
 800918a:	bd10      	pop	{r4, pc}

0800918c <memset>:
 800918c:	4402      	add	r2, r0
 800918e:	4603      	mov	r3, r0
 8009190:	4293      	cmp	r3, r2
 8009192:	d100      	bne.n	8009196 <memset+0xa>
 8009194:	4770      	bx	lr
 8009196:	f803 1b01 	strb.w	r1, [r3], #1
 800919a:	e7f9      	b.n	8009190 <memset+0x4>

0800919c <_free_r>:
 800919c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800919e:	2900      	cmp	r1, #0
 80091a0:	d044      	beq.n	800922c <_free_r+0x90>
 80091a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f1a1 0404 	sub.w	r4, r1, #4
 80091ae:	bfb8      	it	lt
 80091b0:	18e4      	addlt	r4, r4, r3
 80091b2:	f000 fc39 	bl	8009a28 <__malloc_lock>
 80091b6:	4a1e      	ldr	r2, [pc, #120]	; (8009230 <_free_r+0x94>)
 80091b8:	9801      	ldr	r0, [sp, #4]
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	b933      	cbnz	r3, 80091cc <_free_r+0x30>
 80091be:	6063      	str	r3, [r4, #4]
 80091c0:	6014      	str	r4, [r2, #0]
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091c8:	f000 bc34 	b.w	8009a34 <__malloc_unlock>
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d908      	bls.n	80091e2 <_free_r+0x46>
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	1961      	adds	r1, r4, r5
 80091d4:	428b      	cmp	r3, r1
 80091d6:	bf01      	itttt	eq
 80091d8:	6819      	ldreq	r1, [r3, #0]
 80091da:	685b      	ldreq	r3, [r3, #4]
 80091dc:	1949      	addeq	r1, r1, r5
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	e7ed      	b.n	80091be <_free_r+0x22>
 80091e2:	461a      	mov	r2, r3
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	b10b      	cbz	r3, 80091ec <_free_r+0x50>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d9fa      	bls.n	80091e2 <_free_r+0x46>
 80091ec:	6811      	ldr	r1, [r2, #0]
 80091ee:	1855      	adds	r5, r2, r1
 80091f0:	42a5      	cmp	r5, r4
 80091f2:	d10b      	bne.n	800920c <_free_r+0x70>
 80091f4:	6824      	ldr	r4, [r4, #0]
 80091f6:	4421      	add	r1, r4
 80091f8:	1854      	adds	r4, r2, r1
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	d1e0      	bne.n	80091c2 <_free_r+0x26>
 8009200:	681c      	ldr	r4, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	6053      	str	r3, [r2, #4]
 8009206:	4421      	add	r1, r4
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	e7da      	b.n	80091c2 <_free_r+0x26>
 800920c:	d902      	bls.n	8009214 <_free_r+0x78>
 800920e:	230c      	movs	r3, #12
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	e7d6      	b.n	80091c2 <_free_r+0x26>
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	1961      	adds	r1, r4, r5
 8009218:	428b      	cmp	r3, r1
 800921a:	bf04      	itt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	bf04      	itt	eq
 8009224:	1949      	addeq	r1, r1, r5
 8009226:	6021      	streq	r1, [r4, #0]
 8009228:	6054      	str	r4, [r2, #4]
 800922a:	e7ca      	b.n	80091c2 <_free_r+0x26>
 800922c:	b003      	add	sp, #12
 800922e:	bd30      	pop	{r4, r5, pc}
 8009230:	20000894 	.word	0x20000894

08009234 <sbrk_aligned>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4e0e      	ldr	r6, [pc, #56]	; (8009270 <sbrk_aligned+0x3c>)
 8009238:	460c      	mov	r4, r1
 800923a:	6831      	ldr	r1, [r6, #0]
 800923c:	4605      	mov	r5, r0
 800923e:	b911      	cbnz	r1, 8009246 <sbrk_aligned+0x12>
 8009240:	f000 f902 	bl	8009448 <_sbrk_r>
 8009244:	6030      	str	r0, [r6, #0]
 8009246:	4621      	mov	r1, r4
 8009248:	4628      	mov	r0, r5
 800924a:	f000 f8fd 	bl	8009448 <_sbrk_r>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d00a      	beq.n	8009268 <sbrk_aligned+0x34>
 8009252:	1cc4      	adds	r4, r0, #3
 8009254:	f024 0403 	bic.w	r4, r4, #3
 8009258:	42a0      	cmp	r0, r4
 800925a:	d007      	beq.n	800926c <sbrk_aligned+0x38>
 800925c:	1a21      	subs	r1, r4, r0
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f8f2 	bl	8009448 <_sbrk_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d101      	bne.n	800926c <sbrk_aligned+0x38>
 8009268:	f04f 34ff 	mov.w	r4, #4294967295
 800926c:	4620      	mov	r0, r4
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	20000898 	.word	0x20000898

08009274 <_malloc_r>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	1ccd      	adds	r5, r1, #3
 800927a:	f025 0503 	bic.w	r5, r5, #3
 800927e:	3508      	adds	r5, #8
 8009280:	2d0c      	cmp	r5, #12
 8009282:	bf38      	it	cc
 8009284:	250c      	movcc	r5, #12
 8009286:	2d00      	cmp	r5, #0
 8009288:	4607      	mov	r7, r0
 800928a:	db01      	blt.n	8009290 <_malloc_r+0x1c>
 800928c:	42a9      	cmp	r1, r5
 800928e:	d905      	bls.n	800929c <_malloc_r+0x28>
 8009290:	230c      	movs	r3, #12
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	2600      	movs	r6, #0
 8009296:	4630      	mov	r0, r6
 8009298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800929c:	4e2e      	ldr	r6, [pc, #184]	; (8009358 <_malloc_r+0xe4>)
 800929e:	f000 fbc3 	bl	8009a28 <__malloc_lock>
 80092a2:	6833      	ldr	r3, [r6, #0]
 80092a4:	461c      	mov	r4, r3
 80092a6:	bb34      	cbnz	r4, 80092f6 <_malloc_r+0x82>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7ff ffc2 	bl	8009234 <sbrk_aligned>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	4604      	mov	r4, r0
 80092b4:	d14d      	bne.n	8009352 <_malloc_r+0xde>
 80092b6:	6834      	ldr	r4, [r6, #0]
 80092b8:	4626      	mov	r6, r4
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d140      	bne.n	8009340 <_malloc_r+0xcc>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4638      	mov	r0, r7
 80092c4:	eb04 0803 	add.w	r8, r4, r3
 80092c8:	f000 f8be 	bl	8009448 <_sbrk_r>
 80092cc:	4580      	cmp	r8, r0
 80092ce:	d13a      	bne.n	8009346 <_malloc_r+0xd2>
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	3503      	adds	r5, #3
 80092d4:	1a6d      	subs	r5, r5, r1
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	4629      	mov	r1, r5
 80092e4:	4638      	mov	r0, r7
 80092e6:	f7ff ffa5 	bl	8009234 <sbrk_aligned>
 80092ea:	3001      	adds	r0, #1
 80092ec:	d02b      	beq.n	8009346 <_malloc_r+0xd2>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	442b      	add	r3, r5
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e00e      	b.n	8009314 <_malloc_r+0xa0>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	1b52      	subs	r2, r2, r5
 80092fa:	d41e      	bmi.n	800933a <_malloc_r+0xc6>
 80092fc:	2a0b      	cmp	r2, #11
 80092fe:	d916      	bls.n	800932e <_malloc_r+0xba>
 8009300:	1961      	adds	r1, r4, r5
 8009302:	42a3      	cmp	r3, r4
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	bf18      	it	ne
 8009308:	6059      	strne	r1, [r3, #4]
 800930a:	6863      	ldr	r3, [r4, #4]
 800930c:	bf08      	it	eq
 800930e:	6031      	streq	r1, [r6, #0]
 8009310:	5162      	str	r2, [r4, r5]
 8009312:	604b      	str	r3, [r1, #4]
 8009314:	4638      	mov	r0, r7
 8009316:	f104 060b 	add.w	r6, r4, #11
 800931a:	f000 fb8b 	bl	8009a34 <__malloc_unlock>
 800931e:	f026 0607 	bic.w	r6, r6, #7
 8009322:	1d23      	adds	r3, r4, #4
 8009324:	1af2      	subs	r2, r6, r3
 8009326:	d0b6      	beq.n	8009296 <_malloc_r+0x22>
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	50a3      	str	r3, [r4, r2]
 800932c:	e7b3      	b.n	8009296 <_malloc_r+0x22>
 800932e:	6862      	ldr	r2, [r4, #4]
 8009330:	42a3      	cmp	r3, r4
 8009332:	bf0c      	ite	eq
 8009334:	6032      	streq	r2, [r6, #0]
 8009336:	605a      	strne	r2, [r3, #4]
 8009338:	e7ec      	b.n	8009314 <_malloc_r+0xa0>
 800933a:	4623      	mov	r3, r4
 800933c:	6864      	ldr	r4, [r4, #4]
 800933e:	e7b2      	b.n	80092a6 <_malloc_r+0x32>
 8009340:	4634      	mov	r4, r6
 8009342:	6876      	ldr	r6, [r6, #4]
 8009344:	e7b9      	b.n	80092ba <_malloc_r+0x46>
 8009346:	230c      	movs	r3, #12
 8009348:	603b      	str	r3, [r7, #0]
 800934a:	4638      	mov	r0, r7
 800934c:	f000 fb72 	bl	8009a34 <__malloc_unlock>
 8009350:	e7a1      	b.n	8009296 <_malloc_r+0x22>
 8009352:	6025      	str	r5, [r4, #0]
 8009354:	e7de      	b.n	8009314 <_malloc_r+0xa0>
 8009356:	bf00      	nop
 8009358:	20000894 	.word	0x20000894

0800935c <_puts_r>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	460e      	mov	r6, r1
 8009360:	4605      	mov	r5, r0
 8009362:	b118      	cbz	r0, 800936c <_puts_r+0x10>
 8009364:	6983      	ldr	r3, [r0, #24]
 8009366:	b90b      	cbnz	r3, 800936c <_puts_r+0x10>
 8009368:	f000 fa58 	bl	800981c <__sinit>
 800936c:	69ab      	ldr	r3, [r5, #24]
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	b913      	cbnz	r3, 8009378 <_puts_r+0x1c>
 8009372:	4628      	mov	r0, r5
 8009374:	f000 fa52 	bl	800981c <__sinit>
 8009378:	4b2c      	ldr	r3, [pc, #176]	; (800942c <_puts_r+0xd0>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d120      	bne.n	80093c0 <_puts_r+0x64>
 800937e:	686c      	ldr	r4, [r5, #4]
 8009380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009382:	07db      	lsls	r3, r3, #31
 8009384:	d405      	bmi.n	8009392 <_puts_r+0x36>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	0598      	lsls	r0, r3, #22
 800938a:	d402      	bmi.n	8009392 <_puts_r+0x36>
 800938c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938e:	f000 fae3 	bl	8009958 <__retarget_lock_acquire_recursive>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	0719      	lsls	r1, r3, #28
 8009396:	d51d      	bpl.n	80093d4 <_puts_r+0x78>
 8009398:	6923      	ldr	r3, [r4, #16]
 800939a:	b1db      	cbz	r3, 80093d4 <_puts_r+0x78>
 800939c:	3e01      	subs	r6, #1
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093a4:	3b01      	subs	r3, #1
 80093a6:	60a3      	str	r3, [r4, #8]
 80093a8:	bb39      	cbnz	r1, 80093fa <_puts_r+0x9e>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da38      	bge.n	8009420 <_puts_r+0xc4>
 80093ae:	4622      	mov	r2, r4
 80093b0:	210a      	movs	r1, #10
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 f858 	bl	8009468 <__swbuf_r>
 80093b8:	3001      	adds	r0, #1
 80093ba:	d011      	beq.n	80093e0 <_puts_r+0x84>
 80093bc:	250a      	movs	r5, #10
 80093be:	e011      	b.n	80093e4 <_puts_r+0x88>
 80093c0:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <_puts_r+0xd4>)
 80093c2:	429c      	cmp	r4, r3
 80093c4:	d101      	bne.n	80093ca <_puts_r+0x6e>
 80093c6:	68ac      	ldr	r4, [r5, #8]
 80093c8:	e7da      	b.n	8009380 <_puts_r+0x24>
 80093ca:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <_puts_r+0xd8>)
 80093cc:	429c      	cmp	r4, r3
 80093ce:	bf08      	it	eq
 80093d0:	68ec      	ldreq	r4, [r5, #12]
 80093d2:	e7d5      	b.n	8009380 <_puts_r+0x24>
 80093d4:	4621      	mov	r1, r4
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 f898 	bl	800950c <__swsetup_r>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d0dd      	beq.n	800939c <_puts_r+0x40>
 80093e0:	f04f 35ff 	mov.w	r5, #4294967295
 80093e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093e6:	07da      	lsls	r2, r3, #31
 80093e8:	d405      	bmi.n	80093f6 <_puts_r+0x9a>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	059b      	lsls	r3, r3, #22
 80093ee:	d402      	bmi.n	80093f6 <_puts_r+0x9a>
 80093f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f2:	f000 fab2 	bl	800995a <__retarget_lock_release_recursive>
 80093f6:	4628      	mov	r0, r5
 80093f8:	bd70      	pop	{r4, r5, r6, pc}
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da04      	bge.n	8009408 <_puts_r+0xac>
 80093fe:	69a2      	ldr	r2, [r4, #24]
 8009400:	429a      	cmp	r2, r3
 8009402:	dc06      	bgt.n	8009412 <_puts_r+0xb6>
 8009404:	290a      	cmp	r1, #10
 8009406:	d004      	beq.n	8009412 <_puts_r+0xb6>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	7019      	strb	r1, [r3, #0]
 8009410:	e7c5      	b.n	800939e <_puts_r+0x42>
 8009412:	4622      	mov	r2, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f827 	bl	8009468 <__swbuf_r>
 800941a:	3001      	adds	r0, #1
 800941c:	d1bf      	bne.n	800939e <_puts_r+0x42>
 800941e:	e7df      	b.n	80093e0 <_puts_r+0x84>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	250a      	movs	r5, #10
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	701d      	strb	r5, [r3, #0]
 800942a:	e7db      	b.n	80093e4 <_puts_r+0x88>
 800942c:	08009c68 	.word	0x08009c68
 8009430:	08009c88 	.word	0x08009c88
 8009434:	08009c48 	.word	0x08009c48

08009438 <puts>:
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <puts+0xc>)
 800943a:	4601      	mov	r1, r0
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f7ff bf8d 	b.w	800935c <_puts_r>
 8009442:	bf00      	nop
 8009444:	2000002c 	.word	0x2000002c

08009448 <_sbrk_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	; (8009464 <_sbrk_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f7 fcda 	bl	8000e0c <_sbrk>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_sbrk_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_sbrk_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200008a0 	.word	0x200008a0

08009468 <__swbuf_r>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	460e      	mov	r6, r1
 800946c:	4614      	mov	r4, r2
 800946e:	4605      	mov	r5, r0
 8009470:	b118      	cbz	r0, 800947a <__swbuf_r+0x12>
 8009472:	6983      	ldr	r3, [r0, #24]
 8009474:	b90b      	cbnz	r3, 800947a <__swbuf_r+0x12>
 8009476:	f000 f9d1 	bl	800981c <__sinit>
 800947a:	4b21      	ldr	r3, [pc, #132]	; (8009500 <__swbuf_r+0x98>)
 800947c:	429c      	cmp	r4, r3
 800947e:	d12b      	bne.n	80094d8 <__swbuf_r+0x70>
 8009480:	686c      	ldr	r4, [r5, #4]
 8009482:	69a3      	ldr	r3, [r4, #24]
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	071a      	lsls	r2, r3, #28
 800948a:	d52f      	bpl.n	80094ec <__swbuf_r+0x84>
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	b36b      	cbz	r3, 80094ec <__swbuf_r+0x84>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	1ac0      	subs	r0, r0, r3
 8009496:	6963      	ldr	r3, [r4, #20]
 8009498:	b2f6      	uxtb	r6, r6
 800949a:	4283      	cmp	r3, r0
 800949c:	4637      	mov	r7, r6
 800949e:	dc04      	bgt.n	80094aa <__swbuf_r+0x42>
 80094a0:	4621      	mov	r1, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 f926 	bl	80096f4 <_fflush_r>
 80094a8:	bb30      	cbnz	r0, 80094f8 <__swbuf_r+0x90>
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	60a3      	str	r3, [r4, #8]
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	6022      	str	r2, [r4, #0]
 80094b6:	701e      	strb	r6, [r3, #0]
 80094b8:	6963      	ldr	r3, [r4, #20]
 80094ba:	3001      	adds	r0, #1
 80094bc:	4283      	cmp	r3, r0
 80094be:	d004      	beq.n	80094ca <__swbuf_r+0x62>
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d506      	bpl.n	80094d4 <__swbuf_r+0x6c>
 80094c6:	2e0a      	cmp	r6, #10
 80094c8:	d104      	bne.n	80094d4 <__swbuf_r+0x6c>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f911 	bl	80096f4 <_fflush_r>
 80094d2:	b988      	cbnz	r0, 80094f8 <__swbuf_r+0x90>
 80094d4:	4638      	mov	r0, r7
 80094d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d8:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <__swbuf_r+0x9c>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	d101      	bne.n	80094e2 <__swbuf_r+0x7a>
 80094de:	68ac      	ldr	r4, [r5, #8]
 80094e0:	e7cf      	b.n	8009482 <__swbuf_r+0x1a>
 80094e2:	4b09      	ldr	r3, [pc, #36]	; (8009508 <__swbuf_r+0xa0>)
 80094e4:	429c      	cmp	r4, r3
 80094e6:	bf08      	it	eq
 80094e8:	68ec      	ldreq	r4, [r5, #12]
 80094ea:	e7ca      	b.n	8009482 <__swbuf_r+0x1a>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	f000 f80c 	bl	800950c <__swsetup_r>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d0cb      	beq.n	8009490 <__swbuf_r+0x28>
 80094f8:	f04f 37ff 	mov.w	r7, #4294967295
 80094fc:	e7ea      	b.n	80094d4 <__swbuf_r+0x6c>
 80094fe:	bf00      	nop
 8009500:	08009c68 	.word	0x08009c68
 8009504:	08009c88 	.word	0x08009c88
 8009508:	08009c48 	.word	0x08009c48

0800950c <__swsetup_r>:
 800950c:	4b32      	ldr	r3, [pc, #200]	; (80095d8 <__swsetup_r+0xcc>)
 800950e:	b570      	push	{r4, r5, r6, lr}
 8009510:	681d      	ldr	r5, [r3, #0]
 8009512:	4606      	mov	r6, r0
 8009514:	460c      	mov	r4, r1
 8009516:	b125      	cbz	r5, 8009522 <__swsetup_r+0x16>
 8009518:	69ab      	ldr	r3, [r5, #24]
 800951a:	b913      	cbnz	r3, 8009522 <__swsetup_r+0x16>
 800951c:	4628      	mov	r0, r5
 800951e:	f000 f97d 	bl	800981c <__sinit>
 8009522:	4b2e      	ldr	r3, [pc, #184]	; (80095dc <__swsetup_r+0xd0>)
 8009524:	429c      	cmp	r4, r3
 8009526:	d10f      	bne.n	8009548 <__swsetup_r+0x3c>
 8009528:	686c      	ldr	r4, [r5, #4]
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009530:	0719      	lsls	r1, r3, #28
 8009532:	d42c      	bmi.n	800958e <__swsetup_r+0x82>
 8009534:	06dd      	lsls	r5, r3, #27
 8009536:	d411      	bmi.n	800955c <__swsetup_r+0x50>
 8009538:	2309      	movs	r3, #9
 800953a:	6033      	str	r3, [r6, #0]
 800953c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	f04f 30ff 	mov.w	r0, #4294967295
 8009546:	e03e      	b.n	80095c6 <__swsetup_r+0xba>
 8009548:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <__swsetup_r+0xd4>)
 800954a:	429c      	cmp	r4, r3
 800954c:	d101      	bne.n	8009552 <__swsetup_r+0x46>
 800954e:	68ac      	ldr	r4, [r5, #8]
 8009550:	e7eb      	b.n	800952a <__swsetup_r+0x1e>
 8009552:	4b24      	ldr	r3, [pc, #144]	; (80095e4 <__swsetup_r+0xd8>)
 8009554:	429c      	cmp	r4, r3
 8009556:	bf08      	it	eq
 8009558:	68ec      	ldreq	r4, [r5, #12]
 800955a:	e7e6      	b.n	800952a <__swsetup_r+0x1e>
 800955c:	0758      	lsls	r0, r3, #29
 800955e:	d512      	bpl.n	8009586 <__swsetup_r+0x7a>
 8009560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009562:	b141      	cbz	r1, 8009576 <__swsetup_r+0x6a>
 8009564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009568:	4299      	cmp	r1, r3
 800956a:	d002      	beq.n	8009572 <__swsetup_r+0x66>
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff fe15 	bl	800919c <_free_r>
 8009572:	2300      	movs	r3, #0
 8009574:	6363      	str	r3, [r4, #52]	; 0x34
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f043 0308 	orr.w	r3, r3, #8
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	b94b      	cbnz	r3, 80095a6 <__swsetup_r+0x9a>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800959c:	d003      	beq.n	80095a6 <__swsetup_r+0x9a>
 800959e:	4621      	mov	r1, r4
 80095a0:	4630      	mov	r0, r6
 80095a2:	f000 fa01 	bl	80099a8 <__smakebuf_r>
 80095a6:	89a0      	ldrh	r0, [r4, #12]
 80095a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ac:	f010 0301 	ands.w	r3, r0, #1
 80095b0:	d00a      	beq.n	80095c8 <__swsetup_r+0xbc>
 80095b2:	2300      	movs	r3, #0
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	6963      	ldr	r3, [r4, #20]
 80095b8:	425b      	negs	r3, r3
 80095ba:	61a3      	str	r3, [r4, #24]
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	b943      	cbnz	r3, 80095d2 <__swsetup_r+0xc6>
 80095c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095c4:	d1ba      	bne.n	800953c <__swsetup_r+0x30>
 80095c6:	bd70      	pop	{r4, r5, r6, pc}
 80095c8:	0781      	lsls	r1, r0, #30
 80095ca:	bf58      	it	pl
 80095cc:	6963      	ldrpl	r3, [r4, #20]
 80095ce:	60a3      	str	r3, [r4, #8]
 80095d0:	e7f4      	b.n	80095bc <__swsetup_r+0xb0>
 80095d2:	2000      	movs	r0, #0
 80095d4:	e7f7      	b.n	80095c6 <__swsetup_r+0xba>
 80095d6:	bf00      	nop
 80095d8:	2000002c 	.word	0x2000002c
 80095dc:	08009c68 	.word	0x08009c68
 80095e0:	08009c88 	.word	0x08009c88
 80095e4:	08009c48 	.word	0x08009c48

080095e8 <__sflush_r>:
 80095e8:	898a      	ldrh	r2, [r1, #12]
 80095ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ee:	4605      	mov	r5, r0
 80095f0:	0710      	lsls	r0, r2, #28
 80095f2:	460c      	mov	r4, r1
 80095f4:	d458      	bmi.n	80096a8 <__sflush_r+0xc0>
 80095f6:	684b      	ldr	r3, [r1, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dc05      	bgt.n	8009608 <__sflush_r+0x20>
 80095fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dc02      	bgt.n	8009608 <__sflush_r+0x20>
 8009602:	2000      	movs	r0, #0
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800960a:	2e00      	cmp	r6, #0
 800960c:	d0f9      	beq.n	8009602 <__sflush_r+0x1a>
 800960e:	2300      	movs	r3, #0
 8009610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009614:	682f      	ldr	r7, [r5, #0]
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	d032      	beq.n	8009680 <__sflush_r+0x98>
 800961a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	075a      	lsls	r2, r3, #29
 8009620:	d505      	bpl.n	800962e <__sflush_r+0x46>
 8009622:	6863      	ldr	r3, [r4, #4]
 8009624:	1ac0      	subs	r0, r0, r3
 8009626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009628:	b10b      	cbz	r3, 800962e <__sflush_r+0x46>
 800962a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800962c:	1ac0      	subs	r0, r0, r3
 800962e:	2300      	movs	r3, #0
 8009630:	4602      	mov	r2, r0
 8009632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009634:	6a21      	ldr	r1, [r4, #32]
 8009636:	4628      	mov	r0, r5
 8009638:	47b0      	blx	r6
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	d106      	bne.n	800964e <__sflush_r+0x66>
 8009640:	6829      	ldr	r1, [r5, #0]
 8009642:	291d      	cmp	r1, #29
 8009644:	d82c      	bhi.n	80096a0 <__sflush_r+0xb8>
 8009646:	4a2a      	ldr	r2, [pc, #168]	; (80096f0 <__sflush_r+0x108>)
 8009648:	40ca      	lsrs	r2, r1
 800964a:	07d6      	lsls	r6, r2, #31
 800964c:	d528      	bpl.n	80096a0 <__sflush_r+0xb8>
 800964e:	2200      	movs	r2, #0
 8009650:	6062      	str	r2, [r4, #4]
 8009652:	04d9      	lsls	r1, r3, #19
 8009654:	6922      	ldr	r2, [r4, #16]
 8009656:	6022      	str	r2, [r4, #0]
 8009658:	d504      	bpl.n	8009664 <__sflush_r+0x7c>
 800965a:	1c42      	adds	r2, r0, #1
 800965c:	d101      	bne.n	8009662 <__sflush_r+0x7a>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b903      	cbnz	r3, 8009664 <__sflush_r+0x7c>
 8009662:	6560      	str	r0, [r4, #84]	; 0x54
 8009664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009666:	602f      	str	r7, [r5, #0]
 8009668:	2900      	cmp	r1, #0
 800966a:	d0ca      	beq.n	8009602 <__sflush_r+0x1a>
 800966c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009670:	4299      	cmp	r1, r3
 8009672:	d002      	beq.n	800967a <__sflush_r+0x92>
 8009674:	4628      	mov	r0, r5
 8009676:	f7ff fd91 	bl	800919c <_free_r>
 800967a:	2000      	movs	r0, #0
 800967c:	6360      	str	r0, [r4, #52]	; 0x34
 800967e:	e7c1      	b.n	8009604 <__sflush_r+0x1c>
 8009680:	6a21      	ldr	r1, [r4, #32]
 8009682:	2301      	movs	r3, #1
 8009684:	4628      	mov	r0, r5
 8009686:	47b0      	blx	r6
 8009688:	1c41      	adds	r1, r0, #1
 800968a:	d1c7      	bne.n	800961c <__sflush_r+0x34>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0c4      	beq.n	800961c <__sflush_r+0x34>
 8009692:	2b1d      	cmp	r3, #29
 8009694:	d001      	beq.n	800969a <__sflush_r+0xb2>
 8009696:	2b16      	cmp	r3, #22
 8009698:	d101      	bne.n	800969e <__sflush_r+0xb6>
 800969a:	602f      	str	r7, [r5, #0]
 800969c:	e7b1      	b.n	8009602 <__sflush_r+0x1a>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	e7ad      	b.n	8009604 <__sflush_r+0x1c>
 80096a8:	690f      	ldr	r7, [r1, #16]
 80096aa:	2f00      	cmp	r7, #0
 80096ac:	d0a9      	beq.n	8009602 <__sflush_r+0x1a>
 80096ae:	0793      	lsls	r3, r2, #30
 80096b0:	680e      	ldr	r6, [r1, #0]
 80096b2:	bf08      	it	eq
 80096b4:	694b      	ldreq	r3, [r1, #20]
 80096b6:	600f      	str	r7, [r1, #0]
 80096b8:	bf18      	it	ne
 80096ba:	2300      	movne	r3, #0
 80096bc:	eba6 0807 	sub.w	r8, r6, r7
 80096c0:	608b      	str	r3, [r1, #8]
 80096c2:	f1b8 0f00 	cmp.w	r8, #0
 80096c6:	dd9c      	ble.n	8009602 <__sflush_r+0x1a>
 80096c8:	6a21      	ldr	r1, [r4, #32]
 80096ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096cc:	4643      	mov	r3, r8
 80096ce:	463a      	mov	r2, r7
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b0      	blx	r6
 80096d4:	2800      	cmp	r0, #0
 80096d6:	dc06      	bgt.n	80096e6 <__sflush_r+0xfe>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e78e      	b.n	8009604 <__sflush_r+0x1c>
 80096e6:	4407      	add	r7, r0
 80096e8:	eba8 0800 	sub.w	r8, r8, r0
 80096ec:	e7e9      	b.n	80096c2 <__sflush_r+0xda>
 80096ee:	bf00      	nop
 80096f0:	20400001 	.word	0x20400001

080096f4 <_fflush_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b913      	cbnz	r3, 8009704 <_fflush_r+0x10>
 80096fe:	2500      	movs	r5, #0
 8009700:	4628      	mov	r0, r5
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	b118      	cbz	r0, 800970e <_fflush_r+0x1a>
 8009706:	6983      	ldr	r3, [r0, #24]
 8009708:	b90b      	cbnz	r3, 800970e <_fflush_r+0x1a>
 800970a:	f000 f887 	bl	800981c <__sinit>
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <_fflush_r+0x6c>)
 8009710:	429c      	cmp	r4, r3
 8009712:	d11b      	bne.n	800974c <_fflush_r+0x58>
 8009714:	686c      	ldr	r4, [r5, #4]
 8009716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0ef      	beq.n	80096fe <_fflush_r+0xa>
 800971e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009720:	07d0      	lsls	r0, r2, #31
 8009722:	d404      	bmi.n	800972e <_fflush_r+0x3a>
 8009724:	0599      	lsls	r1, r3, #22
 8009726:	d402      	bmi.n	800972e <_fflush_r+0x3a>
 8009728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972a:	f000 f915 	bl	8009958 <__retarget_lock_acquire_recursive>
 800972e:	4628      	mov	r0, r5
 8009730:	4621      	mov	r1, r4
 8009732:	f7ff ff59 	bl	80095e8 <__sflush_r>
 8009736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009738:	07da      	lsls	r2, r3, #31
 800973a:	4605      	mov	r5, r0
 800973c:	d4e0      	bmi.n	8009700 <_fflush_r+0xc>
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	059b      	lsls	r3, r3, #22
 8009742:	d4dd      	bmi.n	8009700 <_fflush_r+0xc>
 8009744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009746:	f000 f908 	bl	800995a <__retarget_lock_release_recursive>
 800974a:	e7d9      	b.n	8009700 <_fflush_r+0xc>
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <_fflush_r+0x70>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d101      	bne.n	8009756 <_fflush_r+0x62>
 8009752:	68ac      	ldr	r4, [r5, #8]
 8009754:	e7df      	b.n	8009716 <_fflush_r+0x22>
 8009756:	4b04      	ldr	r3, [pc, #16]	; (8009768 <_fflush_r+0x74>)
 8009758:	429c      	cmp	r4, r3
 800975a:	bf08      	it	eq
 800975c:	68ec      	ldreq	r4, [r5, #12]
 800975e:	e7da      	b.n	8009716 <_fflush_r+0x22>
 8009760:	08009c68 	.word	0x08009c68
 8009764:	08009c88 	.word	0x08009c88
 8009768:	08009c48 	.word	0x08009c48

0800976c <std>:
 800976c:	2300      	movs	r3, #0
 800976e:	b510      	push	{r4, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	e9c0 3300 	strd	r3, r3, [r0]
 8009776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800977a:	6083      	str	r3, [r0, #8]
 800977c:	8181      	strh	r1, [r0, #12]
 800977e:	6643      	str	r3, [r0, #100]	; 0x64
 8009780:	81c2      	strh	r2, [r0, #14]
 8009782:	6183      	str	r3, [r0, #24]
 8009784:	4619      	mov	r1, r3
 8009786:	2208      	movs	r2, #8
 8009788:	305c      	adds	r0, #92	; 0x5c
 800978a:	f7ff fcff 	bl	800918c <memset>
 800978e:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <std+0x38>)
 8009790:	6263      	str	r3, [r4, #36]	; 0x24
 8009792:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <std+0x3c>)
 8009794:	62a3      	str	r3, [r4, #40]	; 0x28
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <std+0x40>)
 8009798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <std+0x44>)
 800979c:	6224      	str	r4, [r4, #32]
 800979e:	6323      	str	r3, [r4, #48]	; 0x30
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	bf00      	nop
 80097a4:	08009a41 	.word	0x08009a41
 80097a8:	08009a63 	.word	0x08009a63
 80097ac:	08009a9b 	.word	0x08009a9b
 80097b0:	08009abf 	.word	0x08009abf

080097b4 <_cleanup_r>:
 80097b4:	4901      	ldr	r1, [pc, #4]	; (80097bc <_cleanup_r+0x8>)
 80097b6:	f000 b8af 	b.w	8009918 <_fwalk_reent>
 80097ba:	bf00      	nop
 80097bc:	080096f5 	.word	0x080096f5

080097c0 <__sfmoreglue>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	2268      	movs	r2, #104	; 0x68
 80097c4:	1e4d      	subs	r5, r1, #1
 80097c6:	4355      	muls	r5, r2
 80097c8:	460e      	mov	r6, r1
 80097ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097ce:	f7ff fd51 	bl	8009274 <_malloc_r>
 80097d2:	4604      	mov	r4, r0
 80097d4:	b140      	cbz	r0, 80097e8 <__sfmoreglue+0x28>
 80097d6:	2100      	movs	r1, #0
 80097d8:	e9c0 1600 	strd	r1, r6, [r0]
 80097dc:	300c      	adds	r0, #12
 80097de:	60a0      	str	r0, [r4, #8]
 80097e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097e4:	f7ff fcd2 	bl	800918c <memset>
 80097e8:	4620      	mov	r0, r4
 80097ea:	bd70      	pop	{r4, r5, r6, pc}

080097ec <__sfp_lock_acquire>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sfp_lock_acquire+0x8>)
 80097ee:	f000 b8b3 	b.w	8009958 <__retarget_lock_acquire_recursive>
 80097f2:	bf00      	nop
 80097f4:	2000089d 	.word	0x2000089d

080097f8 <__sfp_lock_release>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sfp_lock_release+0x8>)
 80097fa:	f000 b8ae 	b.w	800995a <__retarget_lock_release_recursive>
 80097fe:	bf00      	nop
 8009800:	2000089d 	.word	0x2000089d

08009804 <__sinit_lock_acquire>:
 8009804:	4801      	ldr	r0, [pc, #4]	; (800980c <__sinit_lock_acquire+0x8>)
 8009806:	f000 b8a7 	b.w	8009958 <__retarget_lock_acquire_recursive>
 800980a:	bf00      	nop
 800980c:	2000089e 	.word	0x2000089e

08009810 <__sinit_lock_release>:
 8009810:	4801      	ldr	r0, [pc, #4]	; (8009818 <__sinit_lock_release+0x8>)
 8009812:	f000 b8a2 	b.w	800995a <__retarget_lock_release_recursive>
 8009816:	bf00      	nop
 8009818:	2000089e 	.word	0x2000089e

0800981c <__sinit>:
 800981c:	b510      	push	{r4, lr}
 800981e:	4604      	mov	r4, r0
 8009820:	f7ff fff0 	bl	8009804 <__sinit_lock_acquire>
 8009824:	69a3      	ldr	r3, [r4, #24]
 8009826:	b11b      	cbz	r3, 8009830 <__sinit+0x14>
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800982c:	f7ff bff0 	b.w	8009810 <__sinit_lock_release>
 8009830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009834:	6523      	str	r3, [r4, #80]	; 0x50
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <__sinit+0x68>)
 8009838:	4a13      	ldr	r2, [pc, #76]	; (8009888 <__sinit+0x6c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	62a2      	str	r2, [r4, #40]	; 0x28
 800983e:	42a3      	cmp	r3, r4
 8009840:	bf04      	itt	eq
 8009842:	2301      	moveq	r3, #1
 8009844:	61a3      	streq	r3, [r4, #24]
 8009846:	4620      	mov	r0, r4
 8009848:	f000 f820 	bl	800988c <__sfp>
 800984c:	6060      	str	r0, [r4, #4]
 800984e:	4620      	mov	r0, r4
 8009850:	f000 f81c 	bl	800988c <__sfp>
 8009854:	60a0      	str	r0, [r4, #8]
 8009856:	4620      	mov	r0, r4
 8009858:	f000 f818 	bl	800988c <__sfp>
 800985c:	2200      	movs	r2, #0
 800985e:	60e0      	str	r0, [r4, #12]
 8009860:	2104      	movs	r1, #4
 8009862:	6860      	ldr	r0, [r4, #4]
 8009864:	f7ff ff82 	bl	800976c <std>
 8009868:	68a0      	ldr	r0, [r4, #8]
 800986a:	2201      	movs	r2, #1
 800986c:	2109      	movs	r1, #9
 800986e:	f7ff ff7d 	bl	800976c <std>
 8009872:	68e0      	ldr	r0, [r4, #12]
 8009874:	2202      	movs	r2, #2
 8009876:	2112      	movs	r1, #18
 8009878:	f7ff ff78 	bl	800976c <std>
 800987c:	2301      	movs	r3, #1
 800987e:	61a3      	str	r3, [r4, #24]
 8009880:	e7d2      	b.n	8009828 <__sinit+0xc>
 8009882:	bf00      	nop
 8009884:	08009c44 	.word	0x08009c44
 8009888:	080097b5 	.word	0x080097b5

0800988c <__sfp>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	4607      	mov	r7, r0
 8009890:	f7ff ffac 	bl	80097ec <__sfp_lock_acquire>
 8009894:	4b1e      	ldr	r3, [pc, #120]	; (8009910 <__sfp+0x84>)
 8009896:	681e      	ldr	r6, [r3, #0]
 8009898:	69b3      	ldr	r3, [r6, #24]
 800989a:	b913      	cbnz	r3, 80098a2 <__sfp+0x16>
 800989c:	4630      	mov	r0, r6
 800989e:	f7ff ffbd 	bl	800981c <__sinit>
 80098a2:	3648      	adds	r6, #72	; 0x48
 80098a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	d503      	bpl.n	80098b4 <__sfp+0x28>
 80098ac:	6833      	ldr	r3, [r6, #0]
 80098ae:	b30b      	cbz	r3, 80098f4 <__sfp+0x68>
 80098b0:	6836      	ldr	r6, [r6, #0]
 80098b2:	e7f7      	b.n	80098a4 <__sfp+0x18>
 80098b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098b8:	b9d5      	cbnz	r5, 80098f0 <__sfp+0x64>
 80098ba:	4b16      	ldr	r3, [pc, #88]	; (8009914 <__sfp+0x88>)
 80098bc:	60e3      	str	r3, [r4, #12]
 80098be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098c2:	6665      	str	r5, [r4, #100]	; 0x64
 80098c4:	f000 f847 	bl	8009956 <__retarget_lock_init_recursive>
 80098c8:	f7ff ff96 	bl	80097f8 <__sfp_lock_release>
 80098cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098d4:	6025      	str	r5, [r4, #0]
 80098d6:	61a5      	str	r5, [r4, #24]
 80098d8:	2208      	movs	r2, #8
 80098da:	4629      	mov	r1, r5
 80098dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098e0:	f7ff fc54 	bl	800918c <memset>
 80098e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098ec:	4620      	mov	r0, r4
 80098ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f0:	3468      	adds	r4, #104	; 0x68
 80098f2:	e7d9      	b.n	80098a8 <__sfp+0x1c>
 80098f4:	2104      	movs	r1, #4
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7ff ff62 	bl	80097c0 <__sfmoreglue>
 80098fc:	4604      	mov	r4, r0
 80098fe:	6030      	str	r0, [r6, #0]
 8009900:	2800      	cmp	r0, #0
 8009902:	d1d5      	bne.n	80098b0 <__sfp+0x24>
 8009904:	f7ff ff78 	bl	80097f8 <__sfp_lock_release>
 8009908:	230c      	movs	r3, #12
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	e7ee      	b.n	80098ec <__sfp+0x60>
 800990e:	bf00      	nop
 8009910:	08009c44 	.word	0x08009c44
 8009914:	ffff0001 	.word	0xffff0001

08009918 <_fwalk_reent>:
 8009918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800991c:	4606      	mov	r6, r0
 800991e:	4688      	mov	r8, r1
 8009920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009924:	2700      	movs	r7, #0
 8009926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800992a:	f1b9 0901 	subs.w	r9, r9, #1
 800992e:	d505      	bpl.n	800993c <_fwalk_reent+0x24>
 8009930:	6824      	ldr	r4, [r4, #0]
 8009932:	2c00      	cmp	r4, #0
 8009934:	d1f7      	bne.n	8009926 <_fwalk_reent+0xe>
 8009936:	4638      	mov	r0, r7
 8009938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993c:	89ab      	ldrh	r3, [r5, #12]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d907      	bls.n	8009952 <_fwalk_reent+0x3a>
 8009942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009946:	3301      	adds	r3, #1
 8009948:	d003      	beq.n	8009952 <_fwalk_reent+0x3a>
 800994a:	4629      	mov	r1, r5
 800994c:	4630      	mov	r0, r6
 800994e:	47c0      	blx	r8
 8009950:	4307      	orrs	r7, r0
 8009952:	3568      	adds	r5, #104	; 0x68
 8009954:	e7e9      	b.n	800992a <_fwalk_reent+0x12>

08009956 <__retarget_lock_init_recursive>:
 8009956:	4770      	bx	lr

08009958 <__retarget_lock_acquire_recursive>:
 8009958:	4770      	bx	lr

0800995a <__retarget_lock_release_recursive>:
 800995a:	4770      	bx	lr

0800995c <__swhatbuf_r>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	460e      	mov	r6, r1
 8009960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009964:	2900      	cmp	r1, #0
 8009966:	b096      	sub	sp, #88	; 0x58
 8009968:	4614      	mov	r4, r2
 800996a:	461d      	mov	r5, r3
 800996c:	da08      	bge.n	8009980 <__swhatbuf_r+0x24>
 800996e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	602a      	str	r2, [r5, #0]
 8009976:	061a      	lsls	r2, r3, #24
 8009978:	d410      	bmi.n	800999c <__swhatbuf_r+0x40>
 800997a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997e:	e00e      	b.n	800999e <__swhatbuf_r+0x42>
 8009980:	466a      	mov	r2, sp
 8009982:	f000 f8c3 	bl	8009b0c <_fstat_r>
 8009986:	2800      	cmp	r0, #0
 8009988:	dbf1      	blt.n	800996e <__swhatbuf_r+0x12>
 800998a:	9a01      	ldr	r2, [sp, #4]
 800998c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009990:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009994:	425a      	negs	r2, r3
 8009996:	415a      	adcs	r2, r3
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	e7ee      	b.n	800997a <__swhatbuf_r+0x1e>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	2000      	movs	r0, #0
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	b016      	add	sp, #88	; 0x58
 80099a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080099a8 <__smakebuf_r>:
 80099a8:	898b      	ldrh	r3, [r1, #12]
 80099aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099ac:	079d      	lsls	r5, r3, #30
 80099ae:	4606      	mov	r6, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	d507      	bpl.n	80099c4 <__smakebuf_r+0x1c>
 80099b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	6123      	str	r3, [r4, #16]
 80099bc:	2301      	movs	r3, #1
 80099be:	6163      	str	r3, [r4, #20]
 80099c0:	b002      	add	sp, #8
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	ab01      	add	r3, sp, #4
 80099c6:	466a      	mov	r2, sp
 80099c8:	f7ff ffc8 	bl	800995c <__swhatbuf_r>
 80099cc:	9900      	ldr	r1, [sp, #0]
 80099ce:	4605      	mov	r5, r0
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7ff fc4f 	bl	8009274 <_malloc_r>
 80099d6:	b948      	cbnz	r0, 80099ec <__smakebuf_r+0x44>
 80099d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099dc:	059a      	lsls	r2, r3, #22
 80099de:	d4ef      	bmi.n	80099c0 <__smakebuf_r+0x18>
 80099e0:	f023 0303 	bic.w	r3, r3, #3
 80099e4:	f043 0302 	orr.w	r3, r3, #2
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	e7e3      	b.n	80099b4 <__smakebuf_r+0xc>
 80099ec:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <__smakebuf_r+0x7c>)
 80099ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	6020      	str	r0, [r4, #0]
 80099f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f8:	81a3      	strh	r3, [r4, #12]
 80099fa:	9b00      	ldr	r3, [sp, #0]
 80099fc:	6163      	str	r3, [r4, #20]
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	6120      	str	r0, [r4, #16]
 8009a02:	b15b      	cbz	r3, 8009a1c <__smakebuf_r+0x74>
 8009a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f000 f891 	bl	8009b30 <_isatty_r>
 8009a0e:	b128      	cbz	r0, 8009a1c <__smakebuf_r+0x74>
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	f023 0303 	bic.w	r3, r3, #3
 8009a16:	f043 0301 	orr.w	r3, r3, #1
 8009a1a:	81a3      	strh	r3, [r4, #12]
 8009a1c:	89a0      	ldrh	r0, [r4, #12]
 8009a1e:	4305      	orrs	r5, r0
 8009a20:	81a5      	strh	r5, [r4, #12]
 8009a22:	e7cd      	b.n	80099c0 <__smakebuf_r+0x18>
 8009a24:	080097b5 	.word	0x080097b5

08009a28 <__malloc_lock>:
 8009a28:	4801      	ldr	r0, [pc, #4]	; (8009a30 <__malloc_lock+0x8>)
 8009a2a:	f7ff bf95 	b.w	8009958 <__retarget_lock_acquire_recursive>
 8009a2e:	bf00      	nop
 8009a30:	2000089c 	.word	0x2000089c

08009a34 <__malloc_unlock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__malloc_unlock+0x8>)
 8009a36:	f7ff bf90 	b.w	800995a <__retarget_lock_release_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	2000089c 	.word	0x2000089c

08009a40 <__sread>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	460c      	mov	r4, r1
 8009a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a48:	f000 f894 	bl	8009b74 <_read_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	bfab      	itete	ge
 8009a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a52:	89a3      	ldrhlt	r3, [r4, #12]
 8009a54:	181b      	addge	r3, r3, r0
 8009a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a5a:	bfac      	ite	ge
 8009a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a5e:	81a3      	strhlt	r3, [r4, #12]
 8009a60:	bd10      	pop	{r4, pc}

08009a62 <__swrite>:
 8009a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	461f      	mov	r7, r3
 8009a68:	898b      	ldrh	r3, [r1, #12]
 8009a6a:	05db      	lsls	r3, r3, #23
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4616      	mov	r6, r2
 8009a72:	d505      	bpl.n	8009a80 <__swrite+0x1e>
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	2302      	movs	r3, #2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f000 f868 	bl	8009b50 <_lseek_r>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	463b      	mov	r3, r7
 8009a90:	4628      	mov	r0, r5
 8009a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	f000 b817 	b.w	8009ac8 <_write_r>

08009a9a <__sseek>:
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa2:	f000 f855 	bl	8009b50 <_lseek_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	bf15      	itete	ne
 8009aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ab6:	81a3      	strheq	r3, [r4, #12]
 8009ab8:	bf18      	it	ne
 8009aba:	81a3      	strhne	r3, [r4, #12]
 8009abc:	bd10      	pop	{r4, pc}

08009abe <__sclose>:
 8009abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac2:	f000 b813 	b.w	8009aec <_close_r>
	...

08009ac8 <_write_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_write_r+0x20>)
 8009acc:	4604      	mov	r4, r0
 8009ace:	4608      	mov	r0, r1
 8009ad0:	4611      	mov	r1, r2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	602a      	str	r2, [r5, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f7f7 f947 	bl	8000d6a <_write>
 8009adc:	1c43      	adds	r3, r0, #1
 8009ade:	d102      	bne.n	8009ae6 <_write_r+0x1e>
 8009ae0:	682b      	ldr	r3, [r5, #0]
 8009ae2:	b103      	cbz	r3, 8009ae6 <_write_r+0x1e>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	200008a0 	.word	0x200008a0

08009aec <_close_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_close_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f7 f953 	bl	8000da2 <_close>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_close_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_close_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	200008a0 	.word	0x200008a0

08009b0c <_fstat_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_fstat_r+0x20>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	4611      	mov	r1, r2
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	f7f7 f94e 	bl	8000dba <_fstat>
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	d102      	bne.n	8009b28 <_fstat_r+0x1c>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	b103      	cbz	r3, 8009b28 <_fstat_r+0x1c>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	bd38      	pop	{r3, r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200008a0 	.word	0x200008a0

08009b30 <_isatty_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_isatty_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f7 f94d 	bl	8000dda <_isatty>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_isatty_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_isatty_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200008a0 	.word	0x200008a0

08009b50 <_lseek_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_lseek_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f7 f946 	bl	8000df0 <_lseek>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_lseek_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_lseek_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	200008a0 	.word	0x200008a0

08009b74 <_read_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	; (8009b94 <_read_r+0x20>)
 8009b78:	4604      	mov	r4, r0
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	2200      	movs	r2, #0
 8009b80:	602a      	str	r2, [r5, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f7f7 f8d4 	bl	8000d30 <_read>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_read_r+0x1e>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_read_r+0x1e>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	200008a0 	.word	0x200008a0

08009b98 <_init>:
 8009b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9a:	bf00      	nop
 8009b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9e:	bc08      	pop	{r3}
 8009ba0:	469e      	mov	lr, r3
 8009ba2:	4770      	bx	lr

08009ba4 <_fini>:
 8009ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba6:	bf00      	nop
 8009ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009baa:	bc08      	pop	{r3}
 8009bac:	469e      	mov	lr, r3
 8009bae:	4770      	bx	lr
