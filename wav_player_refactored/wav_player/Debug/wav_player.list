
wav_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800ee88  0800ee88  0001ee88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f074  0800f074  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f074  0800f074  0001f074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f07c  0800f07c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f07c  0800f07c  0001f07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800f084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00001d78  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20001e1c  20001e1c  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e1d  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005385  00000000  00000000  00042ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  00048278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001868  00000000  00000000  00049d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002811e  00000000  00000000  0004b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026877  00000000  00000000  00073696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5829  00000000  00000000  00099f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016f736  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072c4  00000000  00000000  0016f788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee70 	.word	0x0800ee70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0800ee70 	.word	0x0800ee70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <CS43_write_register>:
 * @brief Write 1-byte data to the designated register
 * @param reg: The register address to be written
 * @param data: The one-byte data to be used
 */
static void CS43_write_register(uint8_t reg, uint8_t data)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
    volatile uint8_t wData[2] = {reg, data};
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	733b      	strb	r3, [r7, #12]
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	737b      	strb	r3, [r7, #13]
 800058c:	89bb      	ldrh	r3, [r7, #12]
 800058e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, wData,
 8000590:	f107 0208 	add.w	r2, r7, #8
 8000594:	2364      	movs	r3, #100	; 0x64
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	2194      	movs	r1, #148	; 0x94
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <CS43_write_register+0x38>)
 800059e:	f003 fffd 	bl	800459c <HAL_I2C_Master_Transmit>
    		sizeof(wData), TRANSFER_TIMEOUT);
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000c0 	.word	0x200000c0

080005b0 <CS43_read_register>:
 * @brief read 1-byte data from the designated register
 * @param reg: The register address to be read
 * @return data: The one-byte I2C transfer data
 */
static uint8_t CS43_read_register(uint8_t reg)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t data;
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, &reg, 1, TRANSFER_TIMEOUT);
 80005ba:	1dfa      	adds	r2, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2194      	movs	r1, #148	; 0x94
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <CS43_read_register+0x38>)
 80005c6:	f003 ffe9 	bl	800459c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, &data, 1, TRANSFER_TIMEOUT);
 80005ca:	f107 020f 	add.w	r2, r7, #15
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	2194      	movs	r1, #148	; 0x94
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <CS43_read_register+0x38>)
 80005d8:	f004 f8de 	bl	8004798 <HAL_I2C_Master_Receive>
	return data;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000c0 	.word	0x200000c0

080005ec <CS43_set_mute>:
/**
 * @brief configure the mute mode of the CS43L22
 * @param mute: The mute mode to be configured
 */
static void CS43_set_mute(int mute)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(mute)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00c      	beq.n	8000614 <CS43_set_mute+0x28>
  {
	  CS43_write_register(POWER_CONTROL2, 0xFF);
 80005fa:	21ff      	movs	r1, #255	; 0xff
 80005fc:	2004      	movs	r0, #4
 80005fe:	f7ff ffb9 	bl	8000574 <CS43_write_register>
	  CS43_write_register(CS43L22_REG_HEADPHONE_A_VOL,0x01);
 8000602:	2101      	movs	r1, #1
 8000604:	2022      	movs	r0, #34	; 0x22
 8000606:	f7ff ffb5 	bl	8000574 <CS43_write_register>
	  CS43_write_register(CS43L22_REG_HEADPHONE_B_VOL,0x01);
 800060a:	2101      	movs	r1, #1
 800060c:	2023      	movs	r0, #35	; 0x23
 800060e:	f7ff ffb1 	bl	8000574 <CS43_write_register>
  {
	  CS43_write_register(CS43L22_REG_HEADPHONE_A_VOL,0x00);
	  CS43_write_register(CS43L22_REG_HEADPHONE_B_VOL,0x00);
	  CS43_write_register(POWER_CONTROL2, 0xAF);
  }
}
 8000612:	e00b      	b.n	800062c <CS43_set_mute+0x40>
	  CS43_write_register(CS43L22_REG_HEADPHONE_A_VOL,0x00);
 8000614:	2100      	movs	r1, #0
 8000616:	2022      	movs	r0, #34	; 0x22
 8000618:	f7ff ffac 	bl	8000574 <CS43_write_register>
	  CS43_write_register(CS43L22_REG_HEADPHONE_B_VOL,0x00);
 800061c:	2100      	movs	r1, #0
 800061e:	2023      	movs	r0, #35	; 0x23
 8000620:	f7ff ffa8 	bl	8000574 <CS43_write_register>
	  CS43_write_register(POWER_CONTROL2, 0xAF);
 8000624:	21af      	movs	r1, #175	; 0xaf
 8000626:	2004      	movs	r0, #4
 8000628:	f7ff ffa4 	bl	8000574 <CS43_write_register>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <CS43_init>:
 * level to the new level at the specific rate
 * 9. Unmute headphone and speaker
 * 10.Set volume to default (0dB) for passthrough and 200 for master
 */
void CS43_init(I2C_HandleTypeDef i2c_handle)
{
 8000634:	b084      	sub	sp, #16
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	f107 0c10 	add.w	ip, r7, #16
 8000640:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   uint8_t data;

   // 1.Unlock and enable I2S
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000644:	4b44      	ldr	r3, [pc, #272]	; (8000758 <CS43_init+0x124>)
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800064c:	4b42      	ldr	r3, [pc, #264]	; (8000758 <CS43_init+0x124>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	69da      	ldr	r2, [r3, #28]
 8000652:	4b41      	ldr	r3, [pc, #260]	; (8000758 <CS43_init+0x124>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	483e      	ldr	r0, [pc, #248]	; (800075c <CS43_init+0x128>)
 8000662:	f002 fa01 	bl	8002a68 <HAL_GPIO_WritePin>

	// Get the I2C handle
	i2cx = i2c_handle;
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_init+0x12c>)
 8000668:	4618      	mov	r0, r3
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2254      	movs	r2, #84	; 0x54
 8000670:	4619      	mov	r1, r3
 8000672:	f00d ff87 	bl	800e584 <memcpy>

	//2.Power down
	CS43_write_register(POWER_CONTROL1, 0x01);
 8000676:	2101      	movs	r1, #1
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ff7b 	bl	8000574 <CS43_write_register>

	//3.Enable the right and left headphones
	data =  (2 << 6) | // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800067e:	23af      	movs	r3, #175	; 0xaf
 8000680:	71fb      	strb	r3, [r7, #7]
			(2 << 4) | // PDN_HPA[0:1]  = 10 (HP-A always on)
			(3 << 2) | // PDN_SPKB[0:1] = 11 (Speaker B always off)
			(3 << 0); // PDN_SPKA[0:1] = 11 (Speaker A always off)
	CS43_write_register(POWER_CONTROL2, data);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4619      	mov	r1, r3
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ff74 	bl	8000574 <CS43_write_register>

	//4. Set automatic clock detection
	CS43_write_register(CLOCKING_CONTROL, (1 << 7));
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	2005      	movs	r0, #5
 8000690:	f7ff ff70 	bl	8000574 <CS43_write_register>

	//5. Interface control 1
	data = CS43_read_register(INTERFACE_CONTROL1);
 8000694:	2006      	movs	r0, #6
 8000696:	f7ff ff8b 	bl	80005b0 <CS43_read_register>
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]

	// Clear all bits except bit 5 which is reserved
	data &= (1 << 5);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	71fb      	strb	r3, [r7, #7]

	data &= ((~(1 << 7)) & // Configure the I/O clocking mode to be slave
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 032b 	and.w	r3, r3, #43	; 0x2b
 80006ac:	71fb      	strb	r3, [r7, #7]
			(~(1 << 6)) &// Set SCLK Clock polarity to be non-inverted
			(~(1 << 4)) & // Disable the DSP mode for the data-packed interface format
			(~(1 << 2))); // Configure the DAC interface format to be left justified, up to 24 bit (default)

	data |= (1 << 2);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	71fb      	strb	r3, [r7, #7]

	// Set 16-bit audio word length for I2S interface
	data |=  (3 << 0);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f043 0303 	orr.w	r3, r3, #3
 80006bc:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(INTERFACE_CONTROL1, data);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2006      	movs	r0, #6
 80006c4:	f7ff ff56 	bl	8000574 <CS43_write_register>

	// 6.Passthrough A settings
	data = CS43_read_register(PASSTHROUGH_A) & 0xF0;
 80006c8:	2008      	movs	r0, #8
 80006ca:	f7ff ff71 	bl	80005b0 <CS43_read_register>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f023 030f 	bic.w	r3, r3, #15
 80006d4:	71fb      	strb	r3, [r7, #7]
	// Use AIN1A as source for passthrough
	data |=  (1 << 0);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PASSTHROUGH_A, data);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2008      	movs	r0, #8
 80006e4:	f7ff ff46 	bl	8000574 <CS43_write_register>

	// 7.Passthrough B settings
	data = CS43_read_register(PASSTHROUGH_B) & 0xF0;
 80006e8:	2009      	movs	r0, #9
 80006ea:	f7ff ff61 	bl	80005b0 <CS43_read_register>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f023 030f 	bic.w	r3, r3, #15
 80006f4:	71fb      	strb	r3, [r7, #7]
	// Use AIN1B as source for passthrough
	data |=  (1 << 0);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
	CS43_write_register(PASSTHROUGH_B, data);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4619      	mov	r1, r3
 8000702:	2009      	movs	r0, #9
 8000704:	f7ff ff36 	bl	8000574 <CS43_write_register>

	// 8. Configure an incremental volume ramp from the current
	// level to the new level at the specific rate
	CS43_write_register(MISCELLANEOUS_CONTRLS, 0x02);
 8000708:	2102      	movs	r1, #2
 800070a:	200e      	movs	r0, #14
 800070c:	f7ff ff32 	bl	8000574 <CS43_write_register>

	// 9.Un-mute headphone and speaker
	CS43_write_register(PLAYBACK_CONTROL, 0x00);
 8000710:	2100      	movs	r1, #0
 8000712:	200f      	movs	r0, #15
 8000714:	f7ff ff2e 	bl	8000574 <CS43_write_register>

	// 10.Set volume to default (0dB) for passthrough and 200 for master
	CS43_write_register(PASSTHROUGH_VOLUME_A, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2014      	movs	r0, #20
 800071c:	f7ff ff2a 	bl	8000574 <CS43_write_register>
	CS43_write_register(PASSTHROUGH_VOLUME_B, 0);
 8000720:	2100      	movs	r1, #0
 8000722:	2015      	movs	r0, #21
 8000724:	f7ff ff26 	bl	8000574 <CS43_write_register>
	CS43_write_register(PCM_VOLUME_A, 0);
 8000728:	2100      	movs	r1, #0
 800072a:	201a      	movs	r0, #26
 800072c:	f7ff ff22 	bl	8000574 <CS43_write_register>
	CS43_write_register(PCM_VOLUME_B, 0);
 8000730:	2100      	movs	r1, #0
 8000732:	201b      	movs	r0, #27
 8000734:	f7ff ff1e 	bl	8000574 <CS43_write_register>
	CS43_write_register(CS43L22_REG_MASTER_A_VOL, CS43_DEFAULT_VOLUME);
 8000738:	21c8      	movs	r1, #200	; 0xc8
 800073a:	2020      	movs	r0, #32
 800073c:	f7ff ff1a 	bl	8000574 <CS43_write_register>
	CS43_write_register(CS43L22_REG_MASTER_B_VOL, CS43_DEFAULT_VOLUME);
 8000740:	21c8      	movs	r1, #200	; 0xc8
 8000742:	2021      	movs	r0, #33	; 0x21
 8000744:	f7ff ff16 	bl	8000574 <CS43_write_register>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000752:	b004      	add	sp, #16
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200013c4 	.word	0x200013c4
 800075c:	40020c00 	.word	0x40020c00
 8000760:	200000c0 	.word	0x200000c0

08000764 <CS43_set_volume>:
 * @param volume - The target volume level
 * @note The volume level is configured based on the
 * boundary check.
 */
void CS43_set_volume(uint8_t volume)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  /* Set the Master volume registers */
  if((volume >= 231) && (volume < 256)){
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2be6      	cmp	r3, #230	; 0xe6
 8000772:	d903      	bls.n	800077c <CS43_set_volume+0x18>
	  volume -= 231;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3319      	adds	r3, #25
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	e002      	b.n	8000782 <CS43_set_volume+0x1e>
  }
  else{
	  volume += 25;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3319      	adds	r3, #25
 8000780:	71fb      	strb	r3, [r7, #7]
  }

  CS43_write_register(CS43L22_REG_MASTER_A_VOL, volume);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4619      	mov	r1, r3
 8000786:	2020      	movs	r0, #32
 8000788:	f7ff fef4 	bl	8000574 <CS43_write_register>
  CS43_write_register(CS43L22_REG_MASTER_B_VOL, volume);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4619      	mov	r1, r3
 8000790:	2021      	movs	r0, #33	; 0x21
 8000792:	f7ff feef 	bl	8000574 <CS43_write_register>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <CS43_start>:
 * 3. Write ‘1’b to bit 7 in register 0x32.
 * 4. Write ‘0’b to bit 7 in register 0x32.
 * 5. Write 0x00 to register 0x00.
 */
void CS43_start(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
	CS43_set_mute(CS43L22_UNMUTE);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff22 	bl	80005ec <CS43_set_mute>
	// Write 0x99 to register 0x00.
	CS43_write_register(CONFIG_00, 0x99);
 80007a8:	2199      	movs	r1, #153	; 0x99
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff fee2 	bl	8000574 <CS43_write_register>
	// Write 0x80 to register 0x47.
	CS43_write_register(CONFIG_47, 0x80);
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	2047      	movs	r0, #71	; 0x47
 80007b4:	f7ff fede 	bl	8000574 <CS43_write_register>
	// Write '1'b to bit 7 in register 0x32.
	CS43_write_register(CONFIG_32, (CS43_read_register(CONFIG_32) | 0x80));
 80007b8:	2032      	movs	r0, #50	; 0x32
 80007ba:	f7ff fef9 	bl	80005b0 <CS43_read_register>
 80007be:	4603      	mov	r3, r0
 80007c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	2032      	movs	r0, #50	; 0x32
 80007ca:	f7ff fed3 	bl	8000574 <CS43_write_register>
	// Write '0'b to bit 7 in register 0x32.
	CS43_write_register(CONFIG_32, (CS43_read_register(CONFIG_32) & (~(0x80))));
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f7ff feee 	bl	80005b0 <CS43_read_register>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	2032      	movs	r0, #50	; 0x32
 80007e0:	f7ff fec8 	bl	8000574 <CS43_write_register>
	// Write 0x00 to register 0x00.
	CS43_write_register(CONFIG_00, 0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fec4 	bl	8000574 <CS43_write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	CS43_write_register(POWER_CONTROL1, 0x9E);
 80007ec:	219e      	movs	r1, #158	; 0x9e
 80007ee:	2002      	movs	r0, #2
 80007f0:	f7ff fec0 	bl	8000574 <CS43_write_register>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <CS43_stop>:
 * 	1. Mute the DAC’s and PWM outputs.
 * 	2. Disable soft ramp and zero cross volume transitions.
 * 	3. Set the “Power Ctl 1” register (0x02) to 0x9F.
 */
void CS43_stop(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  // Mute the DAC’s and PWM outputs
  CS43_set_mute(CS43L22_MUTE);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fef5 	bl	80005ec <CS43_set_mute>
  // Disable soft ramp and zero cross volume transitions.
  CS43_write_register(MISCELLANEOUS_CONTRLS, 0x04);
 8000802:	2104      	movs	r1, #4
 8000804:	200e      	movs	r0, #14
 8000806:	f7ff feb5 	bl	8000574 <CS43_write_register>
  // Set the “Power Ctl 1” register (0x02) to 0x9F
  CS43_write_register(POWER_CONTROL1, 0x9F);
 800080a:	219f      	movs	r1, #159	; 0x9f
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff feb1 	bl	8000574 <CS43_write_register>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <get_I2S_freq_index>:

/***************************************
* Local Function Helper Definition
****************************************/
static int get_I2S_freq_index(uint32_t audioFreq)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint8_t freq_index = 0xFF;
 8000820:	23ff      	movs	r3, #255	; 0xff
 8000822:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for(i = 0; i < 8; i++)
 8000824:	2300      	movs	r3, #0
 8000826:	73bb      	strb	r3, [r7, #14]
 8000828:	e00b      	b.n	8000842 <get_I2S_freq_index+0x2a>
	{
		if(I2SFreq[i] == audioFreq)
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <get_I2S_freq_index+0x40>)
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	d101      	bne.n	800083c <get_I2S_freq_index+0x24>
		{
			freq_index = i;
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i < 8; i++)
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	3301      	adds	r3, #1
 8000840:	73bb      	strb	r3, [r7, #14]
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9f0      	bls.n	800082a <get_I2S_freq_index+0x12>
		}
	}

	return freq_index;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	0800ef2c 	.word	0x0800ef2c

0800085c <audio_clock_config>:

/**
 * @brief Audio Clock Config
 */
static void audio_clock_config(uint32_t audioFreq)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t freqindex = get_I2S_freq_index(audioFreq);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffd7 	bl	8000818 <get_I2S_freq_index>
 800086a:	4603      	mov	r3, r0
 800086c:	77fb      	strb	r3, [r7, #31]

  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4618      	mov	r0, r3
 8000874:	f006 fae6 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKConfig>
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000878:	2301      	movs	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]

  // configure the clock source with the default values first
  rccclkinit.PLLI2S.PLLI2SN = 258;
 800087c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000880:	613b      	str	r3, [r7, #16]
  rccclkinit.PLLI2S.PLLI2SR = 3;
 8000882:	2303      	movs	r3, #3
 8000884:	617b      	str	r3, [r7, #20]

  /* Update the I2S clock config if there is a sampling frequency match*/
  if (freqindex != 0xFF)
 8000886:	7ffb      	ldrb	r3, [r7, #31]
 8000888:	2bff      	cmp	r3, #255	; 0xff
 800088a:	d009      	beq.n	80008a0 <audio_clock_config+0x44>
  {
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800088c:	7ffb      	ldrb	r3, [r7, #31]
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <audio_clock_config+0x58>)
 8000890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000894:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000896:	7ffb      	ldrb	r3, [r7, #31]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <audio_clock_config+0x5c>)
 800089a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089e:	617b      	str	r3, [r7, #20]
  }

  HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 f9eb 	bl	8006c80 <HAL_RCCEx_PeriphCLKConfig>
}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	0800ef4c 	.word	0x0800ef4c
 80008b8:	0800ef6c 	.word	0x0800ef6c

080008bc <wavPlayer_reset>:

void wavPlayer_reset(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <wavPlayer_reset+0x28>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <wavPlayer_reset+0x2c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
  //assign the I2S handle
  if(!i2sptr){
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <wavPlayer_reset+0x30>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <wavPlayer_reset+0x1e>
	  i2sptr = &hi2s3;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <wavPlayer_reset+0x30>)
 80008d6:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <wavPlayer_reset+0x34>)
 80008d8:	601a      	str	r2, [r3, #0]
  }
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	2000134c 	.word	0x2000134c
 80008e8:	20001354 	.word	0x20001354
 80008ec:	20000114 	.word	0x20000114
 80008f0:	200013c4 	.word	0x200013c4

080008f4 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	; 0x38
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000900:	2201      	movs	r2, #1
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <wavPlayer_fileSelect+0x48>)
 8000906:	f00c fce7 	bl	800d2d8 <f_open>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000910:	2300      	movs	r3, #0
 8000912:	e00e      	b.n	8000932 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	f107 010c 	add.w	r1, r7, #12
 800091c:	222c      	movs	r2, #44	; 0x2c
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <wavPlayer_fileSelect+0x48>)
 8000920:	f00c fe98 	bl	800d654 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <wavPlayer_fileSelect+0x4c>)
 8000928:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <wavPlayer_fileSelect+0x50>)
 800092e:	6013      	str	r3, [r2, #0]
  return true;
 8000930:	2301      	movs	r3, #1
}
 8000932:	4618      	mov	r0, r3
 8000934:	3738      	adds	r7, #56	; 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000118 	.word	0x20000118
 8000940:	20000348 	.word	0x20000348
 8000944:	20001350 	.word	0x20001350

08000948 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  isFinished = false;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <wavPlayer_play+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
  //update I2S peripheral sampling frequency
  i2sptr->Init.AudioFreq = samplingFreq;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <wavPlayer_play+0x60>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <wavPlayer_play+0x64>)
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	615a      	str	r2, [r3, #20]
  //configure the PLL clock frequency setting
  audio_clock_config(samplingFreq);
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <wavPlayer_play+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff7b 	bl	800085c <audio_clock_config>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <wavPlayer_play+0x68>)
 800096a:	f00d f85a 	bl	800da22 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <wavPlayer_play+0x6c>)
 8000970:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000974:	4910      	ldr	r1, [pc, #64]	; (80009b8 <wavPlayer_play+0x70>)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <wavPlayer_play+0x68>)
 8000978:	f00c fe6c 	bl	800d654 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <wavPlayer_play+0x74>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <wavPlayer_play+0x6c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <wavPlayer_play+0x78>)
 8000988:	6013      	str	r3, [r2, #0]
  //Start playing the WAV by starting the Codec and initiating the
  // DMA transfer

  //Start Codec
  CS43_start();
 800098a:	f7ff ff08 	bl	800079e <CS43_start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(i2sptr, (uint16_t *)&audioBuffer[0],
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <wavPlayer_play+0x60>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <wavPlayer_play+0x70>)
 8000998:	4618      	mov	r0, r3
 800099a:	f004 fd91 	bl	80054c0 <HAL_I2S_Transmit_DMA>
		  DMA_MAX(AUDIO_BUFFER_SIZE/AUDIODATA_SIZE));
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001358 	.word	0x20001358
 80009a8:	20000114 	.word	0x20000114
 80009ac:	20001350 	.word	0x20001350
 80009b0:	20000118 	.word	0x20000118
 80009b4:	20001354 	.word	0x20001354
 80009b8:	2000034c 	.word	0x2000034c
 80009bc:	20000348 	.word	0x20000348
 80009c0:	2000134c 	.word	0x2000134c

080009c4 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <wavPlayer_process+0xc8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d859      	bhi.n	8000a86 <wavPlayer_process+0xc2>
 80009d2:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <wavPlayer_process+0x14>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	08000a85 	.word	0x08000a85
 80009dc:	080009e9 	.word	0x080009e9
 80009e0:	08000a2b 	.word	0x08000a2b
 80009e4:	08000a6d 	.word	0x08000a6d
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <wavPlayer_process+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <wavPlayer_process+0xc8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <wavPlayer_process+0xcc>)
 80009f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009fa:	4926      	ldr	r1, [pc, #152]	; (8000a94 <wavPlayer_process+0xd0>)
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <wavPlayer_process+0xd4>)
 80009fe:	f00c fe29 	bl	800d654 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a0a:	d907      	bls.n	8000a1c <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <wavPlayer_process+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a18:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000a1a:	e034      	b.n	8000a86 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <wavPlayer_process+0xc8>)
 8000a24:	2203      	movs	r2, #3
 8000a26:	701a      	strb	r2, [r3, #0]
    break;
 8000a28:	e02d      	b.n	8000a86 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <wavPlayer_process+0xcc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <wavPlayer_process+0xc8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <wavPlayer_process+0xcc>)
 8000a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3c:	4918      	ldr	r1, [pc, #96]	; (8000aa0 <wavPlayer_process+0xdc>)
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <wavPlayer_process+0xd4>)
 8000a40:	f00c fe08 	bl	800d654 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a4c:	d907      	bls.n	8000a5e <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <wavPlayer_process+0xcc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a5a:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000a5c:	e013      	b.n	8000a86 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <wavPlayer_process+0xd8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <wavPlayer_process+0xc8>)
 8000a66:	2203      	movs	r2, #3
 8000a68:	701a      	strb	r2, [r3, #0]
    break;
 8000a6a:	e00c      	b.n	8000a86 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <wavPlayer_process+0xd4>)
 8000a6e:	f00c ffae 	bl	800d9ce <f_close>
    wavPlayer_reset();
 8000a72:	f7ff ff23 	bl	80008bc <wavPlayer_reset>
    isFinished = true;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <wavPlayer_process+0xe0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <wavPlayer_process+0xc8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
    break;
 8000a82:	e000      	b.n	8000a86 <wavPlayer_process+0xc2>
    break;
 8000a84:	bf00      	nop
  }
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20001359 	.word	0x20001359
 8000a90:	20001354 	.word	0x20001354
 8000a94:	2000034c 	.word	0x2000034c
 8000a98:	20000118 	.word	0x20000118
 8000a9c:	2000134c 	.word	0x2000134c
 8000aa0:	20000b4c 	.word	0x20000b4c
 8000aa4:	20001358 	.word	0x20001358

08000aa8 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  CS43_stop();
 8000aac:	f7ff fea4 	bl	80007f8 <CS43_stop>
  HAL_I2S_DMAStop(i2sptr);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <wavPlayer_stop+0x24>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fea1 	bl	80057fc <HAL_I2S_DMAStop>
  f_close(&wavFile);
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <wavPlayer_stop+0x28>)
 8000abc:	f00c ff87 	bl	800d9ce <f_close>
  isFinished = true;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <wavPlayer_stop+0x2c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000114 	.word	0x20000114
 8000ad0:	20000118 	.word	0x20000118
 8000ad4:	20001358 	.word	0x20001358

08000ad8 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	CS43_stop();
 8000adc:	f7ff fe8c 	bl	80007f8 <CS43_stop>
	HAL_I2S_DMAPause(i2sptr);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <wavPlayer_pause+0x18>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fd93 	bl	8005610 <HAL_I2S_DMAPause>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000114 	.word	0x20000114

08000af4 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	CS43_start();
 8000af8:	f7ff fe51 	bl	800079e <CS43_start>
	HAL_I2S_DMAResume(i2sptr);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <wavPlayer_resume+0x18>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fde7 	bl	80056d4 <HAL_I2S_DMAResume>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000114 	.word	0x20000114

08000b10 <wavPlayer_setVolume>:

void wavPlayer_setVolume(uint8_t volume)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  CS43_set_volume(volume);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe21 	bl	8000764 <CS43_set_volume>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return isFinished;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <wavPlayer_isFinished+0x14>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20001358 	.word	0x20001358

08000b44 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <audioI2S_halfTransfer_Callback+0x14>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20001359 	.word	0x20001359

08000b5c <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <audioI2S_fullTransfer_Callback+0x14>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20001359 	.word	0x20001359

08000b74 <HAL_I2S_TxCpltCallback>:
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_I2S_TxCpltCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_I2S_TxCpltCallback+0x16>
  {
	  audioI2S_fullTransfer_Callback();
 8000b86:	f7ff ffe9 	bl	8000b5c <audioI2S_fullTransfer_Callback>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40003c00 	.word	0x40003c00

08000b98 <HAL_I2S_TxHalfCpltCallback>:
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_I2S_TxHalfCpltCallback+0x16>
  {
	  audioI2S_halfTransfer_Callback();
 8000baa:	f7ff ffcb 	bl	8000b44 <audioI2S_halfTransfer_Callback>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40003c00 	.word	0x40003c00

08000bbc <delay_us>:
* Local Function Helper Definition
****************************************/

extern TIM_HandleTypeDef htim1;
static void delay_us(uint16_t us)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <delay_us+0x30>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000bce:	bf00      	nop
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <delay_us+0x30>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3f9      	bcc.n	8000bd0 <delay_us+0x14>
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000146c 	.word	0x2000146c

08000bf0 <send_to_lcd>:
 * @brief Send raw data to the LCD controller.
 * @param data: raw data to be sent, should be only 4-bit long
 * @param rs: the RS signal for data/cmd.
 */
static void send_to_lcd (char data, int rs)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
	// enable the LCD
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2108      	movs	r1, #8
 8000c00:	4821      	ldr	r0, [pc, #132]	; (8000c88 <send_to_lcd+0x98>)
 8000c02:	f001 ff31 	bl	8002a68 <HAL_GPIO_WritePin>
	// set the delay between EN pin to be 60 uS to accommodate
	// the system clock
	delay_us(60);
 8000c06:	203c      	movs	r0, #60	; 0x3c
 8000c08:	f7ff ffd8 	bl	8000bbc <delay_us>

	// rs = 1 for data, rs=0 for command
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	2102      	movs	r1, #2
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <send_to_lcd+0x98>)
 8000c16:	f001 ff27 	bl	8002a68 <HAL_GPIO_WritePin>

	// write the data to the respective pin
	// use D[7:4] to transfer data
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4817      	ldr	r0, [pc, #92]	; (8000c88 <send_to_lcd+0x98>)
 8000c2c:	f001 ff1c 	bl	8002a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <send_to_lcd+0x98>)
 8000c42:	f001 ff11 	bl	8002a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	2120      	movs	r1, #32
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <send_to_lcd+0x98>)
 8000c58:	f001 ff06 	bl	8002a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	2110      	movs	r1, #16
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <send_to_lcd+0x98>)
 8000c6a:	f001 fefd 	bl	8002a68 <HAL_GPIO_WritePin>

	// disable the LCD
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <send_to_lcd+0x98>)
 8000c74:	f001 fef8 	bl	8002a68 <HAL_GPIO_WritePin>
	delay_us(60);
 8000c78:	203c      	movs	r0, #60	; 0x3c
 8000c7a:	f7ff ff9f 	bl	8000bbc <delay_us>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <lcd_send_cmd>:
 * @brief Send commands to the LCD controller.
 * @param cmd: the command byte to be sent
 * @note RS must be 0 while sending command
 */
static void lcd_send_cmd (char cmd)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
    /* send upper 4-bit first */
    send_to_lcd((cmd>>4)&0x0f,0);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ffa6 	bl	8000bf0 <send_to_lcd>
    /* send Lower 4-bit */
   	send_to_lcd((cmd)&0x0f, 0);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff9e 	bl	8000bf0 <send_to_lcd>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <lcd_send_data>:
 * @brief Send data to the LCD controller.
 * @param cmd: the command byte to be sent
 * @note RS must be 1 while sending command
 */
static void lcd_send_data (char data)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	/* send upper 4-bit first */
	send_to_lcd((data>>4)&0x0f,1);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff8e 	bl	8000bf0 <send_to_lcd>
	/* send Lower 4-bit */
	send_to_lcd((data)&0x0f, 1);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff86 	bl	8000bf0 <send_to_lcd>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lcd_clear>:
/**
 * @brief Clear the LCD screen
 * @note Send 0x01 to clear the LCD screen
 */
void lcd_clear (void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ffcb 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(10);
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f000 ff7c 	bl	8001bf4 <HAL_Delay>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <lcd_update_cur>:
 * @brief Update the cursor position
 * @param row: the destination row number
 * @param col: the destination col number
 */
void lcd_update_cur(int row, int col)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <lcd_update_cur+0x18>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d005      	beq.n	8000d22 <lcd_update_cur+0x22>
 8000d16:	e009      	b.n	8000d2c <lcd_update_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	603b      	str	r3, [r7, #0]
            break;
 8000d20:	e004      	b.n	8000d2c <lcd_update_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d28:	603b      	str	r3, [r7, #0]
            break;
 8000d2a:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffab 	bl	8000c8c <lcd_send_cmd>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <lcd_init>:
 * - clear the display
 * - set the cursor to be incremental and no shifting
 * - display on and blink the cursor
 */
void lcd_init (void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
	// reset the controller
	HAL_Delay(150);  // wait for >40ms
 8000d42:	2096      	movs	r0, #150	; 0x96
 8000d44:	f000 ff56 	bl	8001bf4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d48:	2030      	movs	r0, #48	; 0x30
 8000d4a:	f7ff ff9f 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(15);  // wait for >4.1ms
 8000d4e:	200f      	movs	r0, #15
 8000d50:	f000 ff50 	bl	8001bf4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d54:	2030      	movs	r0, #48	; 0x30
 8000d56:	f7ff ff99 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >100us
 8000d5a:	2005      	movs	r0, #5
 8000d5c:	f000 ff4a 	bl	8001bf4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d60:	2030      	movs	r0, #48	; 0x30
 8000d62:	f7ff ff93 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(30);
 8000d66:	201e      	movs	r0, #30
 8000d68:	f000 ff44 	bl	8001bf4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d6c:	2020      	movs	r0, #32
 8000d6e:	f7ff ff8d 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(30);
 8000d72:	201e      	movs	r0, #30
 8000d74:	f000 ff3e 	bl	8001bf4 <HAL_Delay>
	// initialize the LCD controller

	// DL = 0 (4 bit mode),
	// N = 1 (2 line display)
	// F = 0 (5x8 characters)
	lcd_send_cmd (0x28);
 8000d78:	2028      	movs	r0, #40	; 0x28
 8000d7a:	f7ff ff87 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(15);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 ff38 	bl	8001bf4 <HAL_Delay>
	// Display off control
	// D=0,C=0, B=0
	lcd_send_cmd (0x08);
 8000d84:	2008      	movs	r0, #8
 8000d86:	f7ff ff81 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(15);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 ff32 	bl	8001bf4 <HAL_Delay>
	// clear display
	lcd_send_cmd (0x01);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f7ff ff7b 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(15);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 ff2c 	bl	8001bf4 <HAL_Delay>
	// Entry mode set
	// I/D = 1 (increment cursor)
	// S = 0 (no shift)
	lcd_send_cmd (0x06);
 8000d9c:	2006      	movs	r0, #6
 8000d9e:	f7ff ff75 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(15);
 8000da2:	200f      	movs	r0, #15
 8000da4:	f000 ff26 	bl	8001bf4 <HAL_Delay>
	// Display on/off control
	// D = 1, C and B = 0.
	//(Cursor and blink, last two bits)
	lcd_send_cmd (0x0C);
 8000da8:	200c      	movs	r0, #12
 8000daa:	f7ff ff6f 	bl	8000c8c <lcd_send_cmd>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <lcd_send_string>:
/**
 * @brief Update the cursor position
 * @param str: the string to be displayed
 */
void lcd_send_string (char *str)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	while (*str){
 8000dba:	e006      	b.n	8000dca <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff79 	bl	8000cbc <lcd_send_data>
	while (*str){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f4      	bne.n	8000dbc <lcd_send_string+0xa>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <display_song_info>:
volatile uint8_t volume = 200;
volatile uint8_t song_idx = DEFAULT_SONG_IDX;
volatile song_mov_t song_mov = CURR_SONG;

static void display_song_info(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0
	lcd_clear();
 8000de2:	f7ff ff83 	bl	8000cec <lcd_clear>
	HAL_Delay(500);
 8000de6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dea:	f000 ff03 	bl	8001bf4 <HAL_Delay>
	lcd_update_cur(0, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff ff85 	bl	8000d00 <lcd_update_cur>
	char str[64];
	sprintf(str,"Song:%s", songs[song_idx]);
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <display_song_info+0x64>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <display_song_info+0x68>)
 8000e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e04:	463b      	mov	r3, r7
 8000e06:	4910      	ldr	r1, [pc, #64]	; (8000e48 <display_song_info+0x6c>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d fcc1 	bl	800e790 <siprintf>
	lcd_send_string(str);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffce 	bl	8000db2 <lcd_send_string>
	lcd_update_cur(1, 0);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff ff71 	bl	8000d00 <lcd_update_cur>
	sprintf(str,"Volume(dB):%d", volume);
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <display_song_info+0x70>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	463b      	mov	r3, r7
 8000e28:	4909      	ldr	r1, [pc, #36]	; (8000e50 <display_song_info+0x74>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00d fcb0 	bl	800e790 <siprintf>
	lcd_send_string(str);
 8000e30:	463b      	mov	r3, r7
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ffbd 	bl	8000db2 <lcd_send_string>
}
 8000e38:	bf00      	nop
 8000e3a:	3740      	adds	r7, #64	; 0x40
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000011 	.word	0x20000011
 8000e44:	20000000 	.word	0x20000000
 8000e48:	0800eeb8 	.word	0x0800eeb8
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	0800eec0 	.word	0x0800eec0

08000e54 <update_volume_display>:

static void update_volume_display(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
	char str[32];
	lcd_update_cur(1, 0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff4f 	bl	8000d00 <lcd_update_cur>
	sprintf(str,"Volume(dB):%d", volume);
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <update_volume_display+0x30>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4906      	ldr	r1, [pc, #24]	; (8000e88 <update_volume_display+0x34>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00d fc8e 	bl	800e790 <siprintf>
	lcd_send_string(str);
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff9b 	bl	8000db2 <lcd_send_string>
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000010 	.word	0x20000010
 8000e88:	0800eec0 	.word	0x0800eec0

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b095      	sub	sp, #84	; 0x54
 8000e90:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e92:	f000 fe3d 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e96:	f000 f90f 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9a:	f000 fa6d 	bl	8001378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9e:	f000 fa4b 	bl	8001338 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ea2:	f000 f99d 	bl	80011e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ea6:	f000 f9c9 	bl	800123c <MX_I2S3_Init>
  MX_FATFS_Init();
 8000eaa:	f007 fb71 	bl	8008590 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000eae:	f00d f81d 	bl	800deec <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f9f1 	bl	8001298 <MX_TIM1_Init>
  MX_DAC_Init();
 8000eb6:	f000 f969 	bl	800118c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  CS43_init(hi2c1);
 8000eba:	4c73      	ldr	r4, [pc, #460]	; (8001088 <main+0x1fc>)
 8000ebc:	4668      	mov	r0, sp
 8000ebe:	f104 0310 	add.w	r3, r4, #16
 8000ec2:	2244      	movs	r2, #68	; 0x44
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f00d fb5d 	bl	800e584 <memcpy>
 8000eca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ece:	f7ff fbb1 	bl	8000634 <CS43_init>
  HAL_TIM_Base_Start(&htim1);
 8000ed2:	486e      	ldr	r0, [pc, #440]	; (800108c <main+0x200>)
 8000ed4:	f006 f890 	bl	8006ff8 <HAL_TIM_Base_Start>
  wavPlayer_reset();
 8000ed8:	f7ff fcf0 	bl	80008bc <wavPlayer_reset>

  lcd_init ();
 8000edc:	f7ff ff2f 	bl	8000d3e <lcd_init>
  lcd_clear();
 8000ee0:	f7ff ff04 	bl	8000cec <lcd_clear>
  HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f000 fe84 	bl	8001bf4 <HAL_Delay>
  lcd_update_cur(0, 0);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff ff06 	bl	8000d00 <lcd_update_cur>
  lcd_send_string("MINI ");
 8000ef4:	4866      	ldr	r0, [pc, #408]	; (8001090 <main+0x204>)
 8000ef6:	f7ff ff5c 	bl	8000db2 <lcd_send_string>
  lcd_send_string("MP3 Player ");
 8000efa:	4866      	ldr	r0, [pc, #408]	; (8001094 <main+0x208>)
 8000efc:	f7ff ff59 	bl	8000db2 <lcd_send_string>
  HAL_Delay(5000);
 8000f00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f04:	f000 fe76 	bl	8001bf4 <HAL_Delay>
  lcd_clear();
 8000f08:	f7ff fef0 	bl	8000cec <lcd_clear>

  bool isSdCardMounted = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	71bb      	strb	r3, [r7, #6]

  song_idx = DEFAULT_SONG_IDX;
 8000f14:	4b60      	ldr	r3, [pc, #384]	; (8001098 <main+0x20c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f1a:	f00d f80d 	bl	800df38 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	; (800109c <main+0x210>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d106      	bne.n	8000f34 <main+0xa8>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2c:	485c      	ldr	r0, [pc, #368]	; (80010a0 <main+0x214>)
 8000f2e:	f001 fd9b 	bl	8002a68 <HAL_GPIO_WritePin>
 8000f32:	e009      	b.n	8000f48 <main+0xbc>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000f34:	4b59      	ldr	r3, [pc, #356]	; (800109c <main+0x210>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d105      	bne.n	8000f48 <main+0xbc>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	4857      	ldr	r0, [pc, #348]	; (80010a0 <main+0x214>)
 8000f44:	f001 fd90 	bl	8002a68 <HAL_GPIO_WritePin>
    }

    if(Appli_state == APPLICATION_READY)
 8000f48:	4b54      	ldr	r3, [pc, #336]	; (800109c <main+0x210>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d1e4      	bne.n	8000f1a <main+0x8e>
    {
    	if(!isSdCardMounted)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <main+0xde>
    	{
    		isSdCardMounted = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	71fb      	strb	r3, [r7, #7]
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	4950      	ldr	r1, [pc, #320]	; (80010a4 <main+0x218>)
 8000f64:	4850      	ldr	r0, [pc, #320]	; (80010a8 <main+0x21c>)
 8000f66:	f00c f971 	bl	800d24c <f_mount>
    	}

    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	484f      	ldr	r0, [pc, #316]	; (80010ac <main+0x220>)
 8000f6e:	f001 fd63 	bl	8002a38 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0d0      	beq.n	8000f1a <main+0x8e>
    	{
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7e:	4848      	ldr	r0, [pc, #288]	; (80010a0 <main+0x214>)
 8000f80:	f001 fd72 	bl	8002a68 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 8000f84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f88:	f000 fe34 	bl	8001bf4 <HAL_Delay>
    		if(wavPlayer_fileSelect(songs[song_idx])){
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <main+0x20c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <main+0x224>)
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fcaa 	bl	80008f4 <wavPlayer_fileSelect>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d05c      	beq.n	8001060 <main+0x1d4>
    			display_song_info();
 8000fa6:	f7ff ff19 	bl	8000ddc <display_song_info>
				wavPlayer_play();
 8000faa:	f7ff fccd 	bl	8000948 <wavPlayer_play>
			}

    		while(!wavPlayer_isFinished())
 8000fae:	e057      	b.n	8001060 <main+0x1d4>
    		{
    			if((song_mov == PREV_SONG) || (song_mov == NEXT_SONG)){
 8000fb0:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <main+0x228>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d004      	beq.n	8000fc4 <main+0x138>
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <main+0x228>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d116      	bne.n	8000ff2 <main+0x166>
    				// reset song_mov
    				song_mov = CURR_SONG;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <main+0x228>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
    				wavPlayer_stop();
 8000fca:	f7ff fd6d 	bl	8000aa8 <wavPlayer_stop>
    				if(wavPlayer_fileSelect(songs[song_idx])){
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <main+0x20c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <main+0x224>)
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc89 	bl	80008f4 <wavPlayer_fileSelect>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d03b      	beq.n	8001060 <main+0x1d4>
    					display_song_info();
 8000fe8:	f7ff fef8 	bl	8000ddc <display_song_info>
    					wavPlayer_play();
 8000fec:	f7ff fcac 	bl	8000948 <wavPlayer_play>
    				if(wavPlayer_fileSelect(songs[song_idx])){
 8000ff0:	e036      	b.n	8001060 <main+0x1d4>
    				}
    			}
    			else{
					wavPlayer_process();
 8000ff2:	f7ff fce7 	bl	80009c4 <wavPlayer_process>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	482c      	ldr	r0, [pc, #176]	; (80010ac <main+0x220>)
 8000ffa:	f001 fd1d 	bl	8002a38 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d02d      	beq.n	8001060 <main+0x1d4>
					{
						pauseResumeToggle ^= 1;
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	71bb      	strb	r3, [r7, #6]
						if(pauseResumeToggle)
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00b      	beq.n	8001034 <main+0x1a8>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001022:	481f      	ldr	r0, [pc, #124]	; (80010a0 <main+0x214>)
 8001024:	f001 fd20 	bl	8002a68 <HAL_GPIO_WritePin>
							wavPlayer_pause();
 8001028:	f7ff fd56 	bl	8000ad8 <wavPlayer_pause>
							HAL_Delay(200);
 800102c:	20c8      	movs	r0, #200	; 0xc8
 800102e:	f000 fde1 	bl	8001bf4 <HAL_Delay>
 8001032:	e015      	b.n	8001060 <main+0x1d4>
						}
						else
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <main+0x214>)
 800103c:	f001 fd14 	bl	8002a68 <HAL_GPIO_WritePin>
							HAL_Delay(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001044:	f000 fdd6 	bl	8001bf4 <HAL_Delay>
							if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001048:	2101      	movs	r1, #1
 800104a:	4818      	ldr	r0, [pc, #96]	; (80010ac <main+0x220>)
 800104c:	f001 fcf4 	bl	8002a38 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <main+0x1d0>
							{
								wavPlayer_stop();
 8001056:	f7ff fd27 	bl	8000aa8 <wavPlayer_stop>
 800105a:	e001      	b.n	8001060 <main+0x1d4>
							}
							else
							{
								wavPlayer_resume();
 800105c:	f7ff fd4a 	bl	8000af4 <wavPlayer_resume>
    		while(!wavPlayer_isFinished())
 8001060:	f7ff fd64 	bl	8000b2c <wavPlayer_isFinished>
 8001064:	4603      	mov	r3, r0
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d19f      	bne.n	8000fb0 <main+0x124>
							}
						}
					}
				}
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <main+0x214>)
 8001078:	f001 fcf6 	bl	8002a68 <HAL_GPIO_WritePin>
    		HAL_Delay(1000);
 800107c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001080:	f000 fdb8 	bl	8001bf4 <HAL_Delay>
    MX_USB_HOST_Process();
 8001084:	e749      	b.n	8000f1a <main+0x8e>
 8001086:	bf00      	nop
 8001088:	20001370 	.word	0x20001370
 800108c:	2000146c 	.word	0x2000146c
 8001090:	0800eed0 	.word	0x0800eed0
 8001094:	0800eed8 	.word	0x0800eed8
 8001098:	20000011 	.word	0x20000011
 800109c:	20001b04 	.word	0x20001b04
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	200014c4 	.word	0x200014c4
 80010a8:	200014c8 	.word	0x200014c8
 80010ac:	40020000 	.word	0x40020000
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200014b4 	.word	0x200014b4

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00d fa6a 	bl	800e5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <SystemClock_Config+0xcc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <SystemClock_Config+0xd0>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800112c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001136:	2307      	movs	r3, #7
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f005 f91a 	bl	8006378 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800114a:	f000 fa7b 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2105      	movs	r1, #5
 800116c:	4618      	mov	r0, r3
 800116e:	f005 fb7b 	bl	8006868 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001178:	f000 fa64 	bl	8001644 <Error_Handler>
  }
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	; 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f000 fe5c 	bl	8001e5e <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 fa4a 	bl	8001644 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2210      	movs	r2, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f000 fe6f 	bl	8001ea2 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 fa3b 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000135c 	.word	0x2000135c
 80011dc:	40007400 	.word	0x40007400

080011e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_I2C1_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_I2C1_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_I2C1_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_I2C1_Init+0x50>)
 800121e:	f003 f879 	bl	8004314 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 fa0c 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20001370 	.word	0x20001370
 8001234:	40005400 	.word	0x40005400
 8001238:	000186a0 	.word	0x000186a0

0800123c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_I2S3_Init+0x54>)
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <MX_I2S3_Init+0x58>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_I2S3_Init+0x54>)
 8001248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_I2S3_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_I2S3_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_I2S3_Init+0x54>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_I2S3_Init+0x54>)
 8001264:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001268:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_I2S3_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_I2S3_Init+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_I2S3_Init+0x54>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_I2S3_Init+0x54>)
 800127e:	f003 ffdf 	bl	8005240 <HAL_I2S_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001288:	f000 f9dc 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200013c4 	.word	0x200013c4
 8001294:	40003c00 	.word	0x40003c00

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM1_Init+0x98>)
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <MX_TIM1_Init+0x9c>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_TIM1_Init+0x98>)
 80012bc:	2247      	movs	r2, #71	; 0x47
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM1_Init+0x98>)
 80012c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM1_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM1_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM1_Init+0x98>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM1_Init+0x98>)
 80012e2:	f005 fe39 	bl	8006f58 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 f9aa 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM1_Init+0x98>)
 80012fe:	f005 fee3 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001308:	f000 f99c 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM1_Init+0x98>)
 800131a:	f006 f8d7 	bl	80074cc <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001324:	f000 f98e 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000146c 	.word	0x2000146c
 8001334:	40010000 	.word	0x40010000

08001338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <MX_DMA_Init+0x3c>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_DMA_Init+0x3c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2010      	movs	r0, #16
 8001360:	f000 fd47 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001364:	2010      	movs	r0, #16
 8001366:	f000 fd60 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b68      	ldr	r3, [pc, #416]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	4b64      	ldr	r3, [pc, #400]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a63      	ldr	r2, [pc, #396]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b61      	ldr	r3, [pc, #388]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a55      	ldr	r2, [pc, #340]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <MX_GPIO_Init+0x1c8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <MX_GPIO_Init+0x1c8>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <MX_GPIO_Init+0x1c8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001436:	2200      	movs	r2, #0
 8001438:	21ff      	movs	r1, #255	; 0xff
 800143a:	4842      	ldr	r0, [pc, #264]	; (8001544 <MX_GPIO_Init+0x1cc>)
 800143c:	f001 fb14 	bl	8002a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	4840      	ldr	r0, [pc, #256]	; (8001548 <MX_GPIO_Init+0x1d0>)
 8001446:	f001 fb0f 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800144a:	2200      	movs	r2, #0
 800144c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001450:	483e      	ldr	r0, [pc, #248]	; (800154c <MX_GPIO_Init+0x1d4>)
 8001452:	f001 fb09 	bl	8002a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001456:	23ff      	movs	r3, #255	; 0xff
 8001458:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4835      	ldr	r0, [pc, #212]	; (8001544 <MX_GPIO_Init+0x1cc>)
 800146e:	f001 f947 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001472:	2301      	movs	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	482f      	ldr	r0, [pc, #188]	; (8001548 <MX_GPIO_Init+0x1d0>)
 800148a:	f001 f939 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800148e:	2301      	movs	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	482b      	ldr	r0, [pc, #172]	; (8001550 <MX_GPIO_Init+0x1d8>)
 80014a2:	f001 f92d 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a6:	2310      	movs	r3, #16
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4823      	ldr	r0, [pc, #140]	; (8001548 <MX_GPIO_Init+0x1d0>)
 80014ba:	f001 f921 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014be:	231e      	movs	r3, #30
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014c8:	2302      	movs	r3, #2
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	; (8001554 <MX_GPIO_Init+0x1dc>)
 80014d4:	f001 f914 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80014d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4816      	ldr	r0, [pc, #88]	; (800154c <MX_GPIO_Init+0x1d4>)
 80014f2:	f001 f905 	bl	8002700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2007      	movs	r0, #7
 80014fc:	f000 fc79 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001500:	2007      	movs	r0, #7
 8001502:	f000 fc92 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2008      	movs	r0, #8
 800150c:	f000 fc71 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001510:	2008      	movs	r0, #8
 8001512:	f000 fc8a 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2009      	movs	r0, #9
 800151c:	f000 fc69 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001520:	2009      	movs	r0, #9
 8001522:	f000 fc82 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	200a      	movs	r0, #10
 800152c:	f000 fc61 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001530:	200a      	movs	r0, #10
 8001532:	f000 fc7a 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40021000 	.word	0x40021000
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4833      	ldr	r0, [pc, #204]	; (8001634 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001568:	f001 fa97 	bl	8002a9a <HAL_GPIO_TogglePin>
  for(uint32_t i = 0; i < 10000; i++);
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	e002      	b.n	8001578 <HAL_GPIO_EXTI_Callback+0x20>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f242 720f 	movw	r2, #9999	; 0x270f
 800157e:	4293      	cmp	r3, r2
 8001580:	d9f7      	bls.n	8001572 <HAL_GPIO_EXTI_Callback+0x1a>

  if(GPIO_Pin == GPIO_PIN_1)
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d114      	bne.n	80015b2 <HAL_GPIO_EXTI_Callback+0x5a>
  {
	  if(volume < 215){
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2bd6      	cmp	r3, #214	; 0xd6
 8001590:	d84c      	bhi.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
		  volume+= 10;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	330a      	adds	r3, #10
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 800159e:	701a      	strb	r2, [r3, #0]
		  wavPlayer_setVolume(volume);
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fab2 	bl	8000b10 <wavPlayer_setVolume>
		  update_volume_display();
 80015ac:	f7ff fc52 	bl	8000e54 <update_volume_display>
	  if(song_idx > 0){
		  song_idx--;
		  song_mov = PREV_SONG;
	  }
  }
}
 80015b0:	e03c      	b.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_2)
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d114      	bne.n	80015e2 <HAL_GPIO_EXTI_Callback+0x8a>
	  if(volume > 10){
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d934      	bls.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
		  volume-= 10;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3b0a      	subs	r3, #10
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015ce:	701a      	strb	r2, [r3, #0]
		  wavPlayer_setVolume(volume);
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_GPIO_EXTI_Callback+0xe0>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fa9a 	bl	8000b10 <wavPlayer_setVolume>
		  update_volume_display();
 80015dc:	f7ff fc3a 	bl	8000e54 <update_volume_display>
}
 80015e0:	e024      	b.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_3)
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d10f      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0xb0>
	 if(song_idx < NUM_SONGS){
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d81c      	bhi.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
		 song_idx++;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 80015fe:	701a      	strb	r2, [r3, #0]
		 song_mov = NEXT_SONG;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	e011      	b.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
  else if(GPIO_Pin == GPIO_PIN_4)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d10e      	bne.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
	  if(song_idx > 0){
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_GPIO_EXTI_Callback+0xd4>
		  song_idx--;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	3b01      	subs	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001624:	701a      	strb	r2, [r3, #0]
		  song_mov = PREV_SONG;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001628:	2202      	movs	r2, #2
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40020c00 	.word	0x40020c00
 8001638:	20000010 	.word	0x20000010
 800163c:	20000011 	.word	0x20000011
 8001640:	200014b4 	.word	0x200014b4

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800168e:	2007      	movs	r0, #7
 8001690:	f000 fba4 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_DAC_MspInit+0x7c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d127      	bne.n	8001712 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_DAC_MspInit+0x80>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016fa:	2320      	movs	r3, #32
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_DAC_MspInit+0x84>)
 800170e:	f000 fff7 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40007400 	.word	0x40007400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_I2C_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12c      	bne.n	80017a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001766:	f44f 7310 	mov.w	r3, #576	; 0x240
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001778:	2304      	movs	r3, #4
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <HAL_I2C_MspInit+0x8c>)
 8001784:	f000 ffbc 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_I2C_MspInit+0x88>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	; 0x38
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_I2S_MspInit+0x164>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f040 8095 	bne.w	8001914 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80017ee:	f240 130f 	movw	r3, #271	; 0x10f
 80017f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80017f4:	2306      	movs	r3, #6
 80017f6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fa3f 	bl	8006c80 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001808:	f7ff ff1c 	bl	8001644 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_I2S_MspInit+0x168>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a42      	ldr	r2, [pc, #264]	; (8001920 <HAL_I2S_MspInit+0x168>)
 8001816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_I2S_MspInit+0x168>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <HAL_I2S_MspInit+0x168>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a3b      	ldr	r2, [pc, #236]	; (8001920 <HAL_I2S_MspInit+0x168>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b39      	ldr	r3, [pc, #228]	; (8001920 <HAL_I2S_MspInit+0x168>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_I2S_MspInit+0x168>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a34      	ldr	r2, [pc, #208]	; (8001920 <HAL_I2S_MspInit+0x168>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_I2S_MspInit+0x168>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001860:	2310      	movs	r3, #16
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001870:	2306      	movs	r3, #6
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	482a      	ldr	r0, [pc, #168]	; (8001924 <HAL_I2S_MspInit+0x16c>)
 800187c:	f000 ff40 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001880:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001892:	2306      	movs	r3, #6
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4822      	ldr	r0, [pc, #136]	; (8001928 <HAL_I2S_MspInit+0x170>)
 800189e:	f000 ff2f 	bl	8002700 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <HAL_I2S_MspInit+0x178>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018e2:	2204      	movs	r2, #4
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018e8:	2203      	movs	r2, #3
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <HAL_I2S_MspInit+0x174>)
 80018fa:	f000 fb21 	bl	8001f40 <HAL_DMA_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001904:	f7ff fe9e 	bl	8001644 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_I2S_MspInit+0x174>)
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_I2S_MspInit+0x174>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	; 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40003c00 	.word	0x40003c00
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020800 	.word	0x40020800
 800192c:	2000140c 	.word	0x2000140c
 8001930:	40026088 	.word	0x40026088

08001934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_TIM_Base_MspInit+0x3c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10d      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_Base_MspInit+0x40>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40010000 	.word	0x40010000
 8001974:	40023800 	.word	0x40023800

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f8f6 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f001 f87d 	bl	8002ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}

080019da <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80019de:	2004      	movs	r0, #4
 80019e0:	f001 f876 	bl	8002ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019ec:	2008      	movs	r0, #8
 80019ee:	f001 f86f 	bl	8002ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019fa:	2010      	movs	r0, #16
 80019fc:	f001 f868 	bl	8002ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA1_Stream5_IRQHandler+0x10>)
 8001a0a:	f000 fc0f 	bl	800222c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000140c 	.word	0x2000140c

08001a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <OTG_FS_IRQHandler+0x10>)
 8001a1e:	f001 fad9 	bl	8002fd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20001b08 	.word	0x20001b08

08001a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a34:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <_sbrk+0x5c>)
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <_sbrk+0x60>)
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <_sbrk+0x64>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <_sbrk+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d207      	bcs.n	8001a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a5c:	f00c fd58 	bl	800e510 <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	220c      	movs	r2, #12
 8001a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	e009      	b.n	8001a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <_sbrk+0x64>)
 8001a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20020000 	.word	0x20020000
 8001a8c:	00002000 	.word	0x00002000
 8001a90:	200014b8 	.word	0x200014b8
 8001a94:	20001e20 	.word	0x20001e20

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad8:	4c0b      	ldr	r4, [pc, #44]	; (8001b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae6:	f7ff ffd7 	bl	8001a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f00c fd17 	bl	800e51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aee:	f7ff f9cd 	bl	8000e8c <main>
  bx  lr    
 8001af2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001b00:	0800f084 	.word	0x0800f084
  ldr r2, =_sbss
 8001b04:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001b08:	20001e1c 	.word	0x20001e1c

08001b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_Init+0x40>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_Init+0x40>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_Init+0x40>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f94f 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 f808 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fd84 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x54>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f967 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 f92f 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x5c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000014 	.word	0x20000014
 8001bac:	2000001c 	.word	0x2000001c
 8001bb0:	20000018 	.word	0x20000018

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	2000001c 	.word	0x2000001c
 8001bd8:	200014bc 	.word	0x200014bc

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200014bc 	.word	0x200014bc

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000001c 	.word	0x2000001c

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e014      	b.n	8001e9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	791b      	ldrb	r3, [r3, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fc0d 	bl	80016a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b087      	sub	sp, #28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	795b      	ldrb	r3, [r3, #5]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DAC_ConfigChannel+0x18>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e03c      	b.n	8001f34 <HAL_DAC_ConfigChannel+0x92>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	22c0      	movs	r2, #192	; 0xc0
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff fe46 	bl	8001bdc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e099      	b.n	8002090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7c:	e00f      	b.n	8001f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f7e:	f7ff fe2d 	bl	8001bdc <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d908      	bls.n	8001f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e078      	b.n	8002090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e8      	bne.n	8001f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_DMA_Init+0x158>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4313      	orrs	r3, r2
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f023 0307 	bic.w	r3, r3, #7
 800201e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2b04      	cmp	r3, #4
 8002030:	d117      	bne.n	8002062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00e      	beq.n	8002062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fadf 	bl	8002608 <DMA_CheckFifoParam>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2240      	movs	r2, #64	; 0x40
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800205e:	2301      	movs	r3, #1
 8002060:	e016      	b.n	8002090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fa96 	bl	800259c <DMA_CalcBaseAndBitshift>
 8002070:	4603      	mov	r3, r0
 8002072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	f010803f 	.word	0xf010803f

0800209c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_DMA_Start_IT+0x26>
 80020be:	2302      	movs	r3, #2
 80020c0:	e040      	b.n	8002144 <HAL_DMA_Start_IT+0xa8>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d12f      	bne.n	8002136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fa28 	bl	8002540 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	223f      	movs	r2, #63	; 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0216 	orr.w	r2, r2, #22
 800210a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0208 	orr.w	r2, r2, #8
 8002122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e005      	b.n	8002142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215a:	f7ff fd3f 	bl	8001bdc <HAL_GetTick>
 800215e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d008      	beq.n	800217e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e052      	b.n	8002224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0216 	bic.w	r2, r2, #22
 800218c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <HAL_DMA_Abort+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0208 	bic.w	r2, r2, #8
 80021bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0201 	bic.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ce:	e013      	b.n	80021f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d0:	f7ff fd04 	bl	8001bdc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d90c      	bls.n	80021f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e015      	b.n	8002224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1e4      	bne.n	80021d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	223f      	movs	r2, #63	; 0x3f
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002238:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <HAL_DMA_IRQHandler+0x248>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a8e      	ldr	r2, [pc, #568]	; (8002478 <HAL_DMA_IRQHandler+0x24c>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0a9b      	lsrs	r3, r3, #10
 8002244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	2208      	movs	r2, #8
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01a      	beq.n	8002298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0204 	bic.w	r2, r2, #4
 800227e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2208      	movs	r2, #8
 8002286:	409a      	lsls	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	2201      	movs	r2, #1
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2201      	movs	r2, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	f043 0202 	orr.w	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	2204      	movs	r2, #4
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d012      	beq.n	8002304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2204      	movs	r2, #4
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fc:	f043 0204 	orr.w	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2210      	movs	r2, #16
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d043      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d03c      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2210      	movs	r2, #16
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d018      	beq.n	800236e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d024      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
 800235a:	e01f      	b.n	800239c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
 800236c:	e016      	b.n	800239c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0208 	bic.w	r2, r2, #8
 800238a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2220      	movs	r2, #32
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 808f 	beq.w	80024cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8087 	beq.w	80024cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	2220      	movs	r2, #32
 80023c4:	409a      	lsls	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d136      	bne.n	8002444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0216 	bic.w	r2, r2, #22
 80023e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <HAL_DMA_IRQHandler+0x1da>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	223f      	movs	r2, #63	; 0x3f
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d07e      	beq.n	8002538 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
        }
        return;
 8002442:	e079      	b.n	8002538 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d01d      	beq.n	800248e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10d      	bne.n	800247c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	2b00      	cmp	r3, #0
 8002466:	d031      	beq.n	80024cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e02c      	b.n	80024cc <HAL_DMA_IRQHandler+0x2a0>
 8002472:	bf00      	nop
 8002474:	20000014 	.word	0x20000014
 8002478:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d023      	beq.n	80024cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e01e      	b.n	80024cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0210 	bic.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d032      	beq.n	800253a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d022      	beq.n	8002526 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2205      	movs	r2, #5
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	3301      	adds	r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	d307      	bcc.n	8002514 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f2      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x2cc>
 8002512:	e000      	b.n	8002516 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002514:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
 8002536:	e000      	b.n	800253a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002538:	bf00      	nop
    }
  }
}
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
 800254c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b40      	cmp	r3, #64	; 0x40
 800256c:	d108      	bne.n	8002580 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800257e:	e007      	b.n	8002590 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3b10      	subs	r3, #16
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <DMA_CalcBaseAndBitshift+0x64>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <DMA_CalcBaseAndBitshift+0x68>)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d909      	bls.n	80025de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	659a      	str	r2, [r3, #88]	; 0x58
 80025dc:	e007      	b.n	80025ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	aaaaaaab 	.word	0xaaaaaaab
 8002604:	0800efa4 	.word	0x0800efa4

08002608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11f      	bne.n	8002662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d856      	bhi.n	80026d6 <DMA_CheckFifoParam+0xce>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <DMA_CheckFifoParam+0x28>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002641 	.word	0x08002641
 8002634:	08002653 	.word	0x08002653
 8002638:	08002641 	.word	0x08002641
 800263c:	080026d7 	.word	0x080026d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d046      	beq.n	80026da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e043      	b.n	80026da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800265a:	d140      	bne.n	80026de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002660:	e03d      	b.n	80026de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266a:	d121      	bne.n	80026b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d837      	bhi.n	80026e2 <DMA_CheckFifoParam+0xda>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <DMA_CheckFifoParam+0x70>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	08002689 	.word	0x08002689
 800267c:	0800268f 	.word	0x0800268f
 8002680:	08002689 	.word	0x08002689
 8002684:	080026a1 	.word	0x080026a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e030      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d025      	beq.n	80026e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269e:	e022      	b.n	80026e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a8:	d11f      	bne.n	80026ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ae:	e01c      	b.n	80026ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d903      	bls.n	80026be <DMA_CheckFifoParam+0xb6>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d003      	beq.n	80026c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026bc:	e018      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      break;
 80026c2:	e015      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      break;
 80026d4:	e00b      	b.n	80026ee <DMA_CheckFifoParam+0xe6>
      break;
 80026d6:	bf00      	nop
 80026d8:	e00a      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e008      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e006      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e004      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
 80026e8:	e002      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ea:	bf00      	nop
 80026ec:	e000      	b.n	80026f0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ee:	bf00      	nop
    }
  } 
  
  return status; 
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e16b      	b.n	80029f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 815a 	bne.w	80029ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80b4 	beq.w	80029ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <HAL_GPIO_Init+0x30c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <HAL_GPIO_Init+0x30c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <HAL_GPIO_Init+0x30c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a5b      	ldr	r2, [pc, #364]	; (8002a10 <HAL_GPIO_Init+0x310>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_GPIO_Init+0x314>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x226>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a51      	ldr	r2, [pc, #324]	; (8002a18 <HAL_GPIO_Init+0x318>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x222>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a50      	ldr	r2, [pc, #320]	; (8002a1c <HAL_GPIO_Init+0x31c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x21e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_GPIO_Init+0x320>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x21a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4e      	ldr	r2, [pc, #312]	; (8002a24 <HAL_GPIO_Init+0x324>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x216>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <HAL_GPIO_Init+0x328>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x212>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_GPIO_Init+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_GPIO_Init+0x330>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x20a>
 8002906:	2307      	movs	r3, #7
 8002908:	e00e      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800290a:	2308      	movs	r3, #8
 800290c:	e00c      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800290e:	2306      	movs	r3, #6
 8002910:	e00a      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002912:	2305      	movs	r3, #5
 8002914:	e008      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002916:	2304      	movs	r3, #4
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800291a:	2303      	movs	r3, #3
 800291c:	e004      	b.n	8002928 <HAL_GPIO_Init+0x228>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x228>
 8002926:	2300      	movs	r3, #0
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f002 0203 	and.w	r2, r2, #3
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4093      	lsls	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002938:	4935      	ldr	r1, [pc, #212]	; (8002a10 <HAL_GPIO_Init+0x310>)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	3302      	adds	r3, #2
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_GPIO_Init+0x334>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a32      	ldr	r2, [pc, #200]	; (8002a34 <HAL_GPIO_Init+0x334>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_GPIO_Init+0x334>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <HAL_GPIO_Init+0x334>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_GPIO_Init+0x334>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029be:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_GPIO_Init+0x334>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_GPIO_Init+0x334>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_GPIO_Init+0x334>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	f67f ae90 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40021800 	.word	0x40021800
 8002a30:	40021c00 	.word	0x40021c00
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	887b      	ldrh	r3, [r7, #2]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e001      	b.n	8002a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	400b      	ands	r3, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fd32 	bl	8001558 <HAL_GPIO_EXTI_Callback>
  }
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40013c00 	.word	0x40013c00

08002b00 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b08f      	sub	sp, #60	; 0x3c
 8002b04:	af0a      	add	r7, sp, #40	; 0x28
 8002b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e054      	b.n	8002bbc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f00b fa3b 	bl	800dfa8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fda9 	bl	80076a8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	687e      	ldr	r6, [r7, #4]
 8002b5e:	466d      	mov	r5, sp
 8002b60:	f106 0410 	add.w	r4, r6, #16
 8002b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b74:	1d33      	adds	r3, r6, #4
 8002b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b78:	6838      	ldr	r0, [r7, #0]
 8002b7a:	f004 fd23 	bl	80075c4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fda0 	bl	80076ca <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	687e      	ldr	r6, [r7, #4]
 8002b92:	466d      	mov	r5, sp
 8002b94:	f106 0410 	add.w	r4, r6, #16
 8002b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba8:	1d33      	adds	r3, r6, #4
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f004 ff29 	bl	8007a04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bc4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af04      	add	r7, sp, #16
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	70fb      	strb	r3, [r7, #3]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70bb      	strb	r3, [r7, #2]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_HCD_HC_Init+0x28>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e076      	b.n	8002cda <HAL_HCD_HC_Init+0x116>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	333d      	adds	r3, #61	; 0x3d
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3338      	adds	r3, #56	; 0x38
 8002c14:	787a      	ldrb	r2, [r7, #1]
 8002c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3340      	adds	r3, #64	; 0x40
 8002c26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c28:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3339      	adds	r3, #57	; 0x39
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	333f      	adds	r3, #63	; 0x3f
 8002c4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	78ba      	ldrb	r2, [r7, #2]
 8002c54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c58:	b2d0      	uxtb	r0, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	333a      	adds	r3, #58	; 0x3a
 8002c66:	4602      	mov	r2, r0
 8002c68:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002c6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da09      	bge.n	8002c86 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	333b      	adds	r3, #59	; 0x3b
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e008      	b.n	8002c98 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	333b      	adds	r3, #59	; 0x3b
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333c      	adds	r3, #60	; 0x3c
 8002ca6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002caa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	787c      	ldrb	r4, [r7, #1]
 8002cb2:	78ba      	ldrb	r2, [r7, #2]
 8002cb4:	78f9      	ldrb	r1, [r7, #3]
 8002cb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cb8:	9302      	str	r3, [sp, #8]
 8002cba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	f005 f822 	bl	8007d10 <USB_HC_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd90      	pop	{r4, r7, pc}

08002ce2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_HCD_HC_Halt+0x1e>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e00f      	b.n	8002d20 <HAL_HCD_HC_Halt+0x3e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f005 fa72 	bl	80081fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	70fb      	strb	r3, [r7, #3]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70bb      	strb	r3, [r7, #2]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	333b      	adds	r3, #59	; 0x3b
 8002d50:	78ba      	ldrb	r2, [r7, #2]
 8002d52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	333f      	adds	r3, #63	; 0x3f
 8002d62:	787a      	ldrb	r2, [r7, #1]
 8002d64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002d66:	7c3b      	ldrb	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d112      	bne.n	8002d92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3342      	adds	r3, #66	; 0x42
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	333d      	adds	r3, #61	; 0x3d
 8002d8c:	7f3a      	ldrb	r2, [r7, #28]
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e008      	b.n	8002da4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3342      	adds	r3, #66	; 0x42
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	f200 80c6 	bhi.w	8002f38 <HAL_HCD_HC_SubmitRequest+0x210>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002f25 	.word	0x08002f25
 8002dbc:	08002e29 	.word	0x08002e29
 8002dc0:	08002ea7 	.word	0x08002ea7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002dc4:	7c3b      	ldrb	r3, [r7, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	f040 80b8 	bne.w	8002f3c <HAL_HCD_HC_SubmitRequest+0x214>
 8002dcc:	78bb      	ldrb	r3, [r7, #2]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 80b4 	bne.w	8002f3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002dd4:	8b3b      	ldrh	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3355      	adds	r3, #85	; 0x55
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3355      	adds	r3, #85	; 0x55
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3342      	adds	r3, #66	; 0x42
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e12:	e093      	b.n	8002f3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3342      	adds	r3, #66	; 0x42
 8002e22:	2202      	movs	r2, #2
 8002e24:	701a      	strb	r2, [r3, #0]
      break;
 8002e26:	e089      	b.n	8002f3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e28:	78bb      	ldrb	r3, [r7, #2]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11d      	bne.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3355      	adds	r3, #85	; 0x55
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3342      	adds	r3, #66	; 0x42
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e54:	e073      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3342      	adds	r3, #66	; 0x42
 8002e64:	2202      	movs	r2, #2
 8002e66:	701a      	strb	r2, [r3, #0]
      break;
 8002e68:	e069      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3354      	adds	r3, #84	; 0x54
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3342      	adds	r3, #66	; 0x42
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
      break;
 8002e90:	e055      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3342      	adds	r3, #66	; 0x42
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	701a      	strb	r2, [r3, #0]
      break;
 8002ea4:	e04b      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3355      	adds	r3, #85	; 0x55
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3342      	adds	r3, #66	; 0x42
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ed2:	e034      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3342      	adds	r3, #66	; 0x42
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
      break;
 8002ee6:	e02a      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3354      	adds	r3, #84	; 0x54
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3342      	adds	r3, #66	; 0x42
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	e016      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3342      	adds	r3, #66	; 0x42
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
      break;
 8002f22:	e00c      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3342      	adds	r3, #66	; 0x42
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002f38:	bf00      	nop
 8002f3a:	e000      	b.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002f3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3344      	adds	r3, #68	; 0x44
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	8b3a      	ldrh	r2, [r7, #24]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	202c      	movs	r0, #44	; 0x2c
 8002f58:	fb00 f303 	mul.w	r3, r0, r3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	; 0x4c
 8002f60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3360      	adds	r3, #96	; 0x60
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3350      	adds	r3, #80	; 0x50
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3339      	adds	r3, #57	; 0x39
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3361      	adds	r3, #97	; 0x61
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	222c      	movs	r2, #44	; 0x2c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	3338      	adds	r3, #56	; 0x38
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	18d1      	adds	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f004 ffc6 	bl	8007f54 <USB_HC_StartXfer>
 8002fc8:	4603      	mov	r3, r0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop

08002fd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fcc7 	bl	800797e <USB_GetMode>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 80f6 	bne.w	80031e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fcab 	bl	8007958 <USB_ReadInterrupts>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80ec 	beq.w	80031e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fca2 	bl	8007958 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301e:	d104      	bne.n	800302a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003028:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f004 fc92 	bl	8007958 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303e:	d104      	bne.n	800304a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003048:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fc82 	bl	8007958 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800305a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305e:	d104      	bne.n	800306a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003068:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fc72 	bl	8007958 <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d103      	bne.n	8003086 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2202      	movs	r2, #2
 8003084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fc64 	bl	8007958 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309a:	d11c      	bne.n	80030d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030b6:	2110      	movs	r1, #16
 80030b8:	6938      	ldr	r0, [r7, #16]
 80030ba:	f004 fb53 	bl	8007764 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030be:	6938      	ldr	r0, [r7, #16]
 80030c0:	f004 fb84 	bl	80077cc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fd5a 	bl	8007b84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f00a ffe7 	bl	800e0a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 fc3c 	bl	8007958 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ea:	d102      	bne.n	80030f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f001 f89e 	bl	800422e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 fc2e 	bl	8007958 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d106      	bne.n	8003114 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f00a ffb0 	bl	800e06c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2208      	movs	r2, #8
 8003112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f004 fc1d 	bl	8007958 <USB_ReadInterrupts>
 800311e:	4603      	mov	r3, r0
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d101      	bne.n	800312c <HAL_HCD_IRQHandler+0x158>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_HCD_IRQHandler+0x15a>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d012      	beq.n	8003158 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0210 	bic.w	r2, r2, #16
 8003140:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 ffa1 	bl	800408a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0210 	orr.w	r2, r2, #16
 8003156:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f004 fbfb 	bl	8007958 <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316c:	d13a      	bne.n	80031e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f005 f830 	bl	80081d8 <USB_HC_ReadInterrupt>
 8003178:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e025      	b.n	80031cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d018      	beq.n	80031c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031aa:	d106      	bne.n	80031ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8ab 	bl	800330e <HCD_HC_IN_IRQHandler>
 80031b8:	e005      	b.n	80031c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fbf9 	bl	80039b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3d4      	bcc.n	8003180 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	e000      	b.n	80031e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80031e2:	bf00      	nop
    }
  }
}
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_HCD_Start+0x16>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e013      	b.n	8003228 <HAL_HCD_Start+0x3e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fd1c 	bl	8007c4c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fa34 	bl	8007686 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_HCD_Stop+0x16>
 8003242:	2302      	movs	r3, #2
 8003244:	e00d      	b.n	8003262 <HAL_HCD_Stop+0x32>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f005 f90a 	bl	800846c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f004 fcbe 	bl	8007bf8 <USB_ResetPort>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3360      	adds	r3, #96	; 0x60
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3350      	adds	r3, #80	; 0x50
 80032c8:	681b      	ldr	r3, [r3, #0]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fd02 	bl	8007cec <USB_GetCurrentFrame>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fcdd 	bl	8007cbe <USB_GetHostSpeed>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d11a      	bne.n	8003374 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	461a      	mov	r2, r3
 800334c:	2304      	movs	r3, #4
 800334e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3361      	adds	r3, #97	; 0x61
 800335e:	2206      	movs	r2, #6
 8003360:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f004 ff44 	bl	80081fa <USB_HC_Halt>
 8003372:	e0af      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338a:	d11b      	bne.n	80033c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3361      	adds	r3, #97	; 0x61
 80033ae:	2207      	movs	r2, #7
 80033b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 ff1c 	bl	80081fa <USB_HC_Halt>
 80033c2:	e087      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d109      	bne.n	80033ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	461a      	mov	r2, r3
 80033e8:	2320      	movs	r3, #32
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e072      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d11a      	bne.n	800343a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	2308      	movs	r3, #8
 8003414:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3361      	adds	r3, #97	; 0x61
 8003424:	2205      	movs	r2, #5
 8003426:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fee1 	bl	80081fa <USB_HC_Halt>
 8003438:	e04c      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d11b      	bne.n	800348a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345e:	461a      	mov	r2, r3
 8003460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003464:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3361      	adds	r3, #97	; 0x61
 8003474:	2208      	movs	r2, #8
 8003476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f004 feb9 	bl	80081fa <USB_HC_Halt>
 8003488:	e024      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d119      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	2206      	movs	r2, #6
 80034c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fe93 	bl	80081fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ea:	d112      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 fe7f 	bl	80081fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003510:	e24e      	b.n	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	f040 80df 	bne.w	80036e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3348      	adds	r3, #72	; 0x48
 8003540:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	0159      	lsls	r1, r3, #5
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	440b      	add	r3, r1
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003554:	1ad2      	subs	r2, r2, r3
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	202c      	movs	r0, #44	; 0x2c
 800355c:	fb00 f303 	mul.w	r3, r0, r3
 8003560:	440b      	add	r3, r1
 8003562:	3350      	adds	r3, #80	; 0x50
 8003564:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	3361      	adds	r3, #97	; 0x61
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	335c      	adds	r3, #92	; 0x5c
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2301      	movs	r3, #1
 800359a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	333f      	adds	r3, #63	; 0x3f
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	333f      	adds	r3, #63	; 0x3f
 80035be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d111      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fe13 	bl	80081fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	2310      	movs	r3, #16
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	e03a      	b.n	800365e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d009      	beq.n	8003610 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	333f      	adds	r3, #63	; 0x3f
 800360a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800360c:	2b01      	cmp	r3, #1
 800360e:	d126      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	440a      	add	r2, r1
 8003626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	b2d9      	uxtb	r1, r3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	202c      	movs	r0, #44	; 0x2c
 800364c:	fb00 f303 	mul.w	r3, r0, r3
 8003650:	4413      	add	r3, r2
 8003652:	3360      	adds	r3, #96	; 0x60
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f00a fd31 	bl	800e0c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d12b      	bne.n	80036be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3348      	adds	r3, #72	; 0x48
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	202c      	movs	r0, #44	; 0x2c
 800367c:	fb00 f202 	mul.w	r2, r0, r2
 8003680:	440a      	add	r2, r1
 8003682:	3240      	adds	r2, #64	; 0x40
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	fbb3 f3f2 	udiv	r3, r3, r2
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 818e 	beq.w	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3354      	adds	r3, #84	; 0x54
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2d8      	uxtb	r0, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3354      	adds	r3, #84	; 0x54
 80036b8:	4602      	mov	r2, r0
 80036ba:	701a      	strb	r2, [r3, #0]
}
 80036bc:	e178      	b.n	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3354      	adds	r3, #84	; 0x54
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2d8      	uxtb	r0, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3354      	adds	r3, #84	; 0x54
 80036e2:	4602      	mov	r2, r0
 80036e4:	701a      	strb	r2, [r3, #0]
}
 80036e6:	e163      	b.n	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f040 80f6 	bne.w	80038ec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3361      	adds	r3, #97	; 0x61
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d109      	bne.n	8003728 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3360      	adds	r3, #96	; 0x60
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e0c9      	b.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3361      	adds	r3, #97	; 0x61
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d109      	bne.n	8003750 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3360      	adds	r3, #96	; 0x60
 800374a:	2205      	movs	r2, #5
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e0b5      	b.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3361      	adds	r3, #97	; 0x61
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d009      	beq.n	8003778 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3361      	adds	r3, #97	; 0x61
 8003772:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003774:	2b08      	cmp	r3, #8
 8003776:	d150      	bne.n	800381a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	202c      	movs	r0, #44	; 0x2c
 8003790:	fb00 f303 	mul.w	r3, r0, r3
 8003794:	440b      	add	r3, r1
 8003796:	335c      	adds	r3, #92	; 0x5c
 8003798:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	335c      	adds	r3, #92	; 0x5c
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d912      	bls.n	80037d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	212c      	movs	r1, #44	; 0x2c
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	335c      	adds	r3, #92	; 0x5c
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3360      	adds	r3, #96	; 0x60
 80037ce:	2204      	movs	r2, #4
 80037d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037d2:	e073      	b.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3360      	adds	r3, #96	; 0x60
 80037e2:	2202      	movs	r2, #2
 80037e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003804:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003818:	e050      	b.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3361      	adds	r3, #97	; 0x61
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d122      	bne.n	8003874 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3360      	adds	r3, #96	; 0x60
 800383c:	2202      	movs	r2, #2
 800383e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003856:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800385e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e023      	b.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3361      	adds	r3, #97	; 0x61
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b07      	cmp	r3, #7
 8003886:	d119      	bne.n	80038bc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	335c      	adds	r3, #92	; 0x5c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	202c      	movs	r0, #44	; 0x2c
 80038a0:	fb00 f303 	mul.w	r3, r0, r3
 80038a4:	440b      	add	r3, r1
 80038a6:	335c      	adds	r3, #92	; 0x5c
 80038a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3360      	adds	r3, #96	; 0x60
 80038b8:	2204      	movs	r2, #4
 80038ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2302      	movs	r3, #2
 80038cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	b2d9      	uxtb	r1, r3
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	202c      	movs	r0, #44	; 0x2c
 80038d8:	fb00 f303 	mul.w	r3, r0, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3360      	adds	r3, #96	; 0x60
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f00a fbeb 	bl	800e0c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038ea:	e061      	b.n	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d156      	bne.n	80039b0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	333f      	adds	r3, #63	; 0x3f
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d111      	bne.n	800393a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	335c      	adds	r3, #92	; 0x5c
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fc61 	bl	80081fa <USB_HC_Halt>
 8003938:	e031      	b.n	800399e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	333f      	adds	r3, #63	; 0x3f
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	333f      	adds	r3, #63	; 0x3f
 800395c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800395e:	2b02      	cmp	r3, #2
 8003960:	d11d      	bne.n	800399e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	335c      	adds	r3, #92	; 0x5c
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d110      	bne.n	800399e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3361      	adds	r3, #97	; 0x61
 800398a:	2203      	movs	r2, #3
 800398c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 fc2e 	bl	80081fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2310      	movs	r3, #16
 80039ae:	6093      	str	r3, [r2, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d11a      	bne.n	8003a1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2304      	movs	r3, #4
 80039f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3361      	adds	r3, #97	; 0x61
 8003a08:	2206      	movs	r2, #6
 8003a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fbef 	bl	80081fa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003a1c:	e331      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d12e      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	461a      	mov	r2, r3
 8003a42:	2320      	movs	r3, #32
 8003a44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	333d      	adds	r3, #61	; 0x3d
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 8313 	bne.w	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	333d      	adds	r3, #61	; 0x3d
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	3360      	adds	r3, #96	; 0x60
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 fbb5 	bl	80081fa <USB_HC_Halt>
}
 8003a90:	e2f7      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa8:	d112      	bne.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003abc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 fb96 	bl	80081fa <USB_HC_Halt>
}
 8003ace:	e2d8      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d140      	bne.n	8003b68 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	335c      	adds	r3, #92	; 0x5c
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d111      	bne.n	8003b32 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333d      	adds	r3, #61	; 0x3d
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2340      	movs	r3, #64	; 0x40
 8003b30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2301      	movs	r3, #1
 8003b42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	212c      	movs	r1, #44	; 0x2c
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3361      	adds	r3, #97	; 0x61
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 fb4a 	bl	80081fa <USB_HC_Halt>
}
 8003b66:	e28c      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d12c      	bne.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3361      	adds	r3, #97	; 0x61
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	333d      	adds	r3, #61	; 0x3d
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	335c      	adds	r3, #92	; 0x5c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 fb1b 	bl	80081fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	6093      	str	r3, [r2, #8]
}
 8003bd6:	e254      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11a      	bne.n	8003c24 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3361      	adds	r3, #97	; 0x61
 8003c0e:	2205      	movs	r2, #5
 8003c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 faec 	bl	80081fa <USB_HC_Halt>
}
 8003c22:	e22e      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d140      	bne.n	8003cbc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	335c      	adds	r3, #92	; 0x5c
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3361      	adds	r3, #97	; 0x61
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333d      	adds	r3, #61	; 0x3d
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d112      	bne.n	8003c98 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	333c      	adds	r3, #60	; 0x3c
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	333d      	adds	r3, #61	; 0x3d
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 faa9 	bl	80081fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	6093      	str	r3, [r2, #8]
}
 8003cba:	e1e2      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d164      	bne.n	8003d9c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d111      	bne.n	8003cfe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	212c      	movs	r1, #44	; 0x2c
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3361      	adds	r3, #97	; 0x61
 8003ce8:	2206      	movs	r2, #6
 8003cea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fa7f 	bl	80081fa <USB_HC_Halt>
 8003cfc:	e044      	b.n	8003d88 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	335c      	adds	r3, #92	; 0x5c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	202c      	movs	r0, #44	; 0x2c
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	335c      	adds	r3, #92	; 0x5c
 8003d1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	335c      	adds	r3, #92	; 0x5c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d920      	bls.n	8003d76 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	335c      	adds	r3, #92	; 0x5c
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	3360      	adds	r3, #96	; 0x60
 8003d54:	2204      	movs	r2, #4
 8003d56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	b2d9      	uxtb	r1, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	202c      	movs	r0, #44	; 0x2c
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3360      	adds	r3, #96	; 0x60
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f00a f9a6 	bl	800e0c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d74:	e008      	b.n	8003d88 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3360      	adds	r3, #96	; 0x60
 8003d84:	2202      	movs	r2, #2
 8003d86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	461a      	mov	r2, r3
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	6093      	str	r3, [r2, #8]
}
 8003d9a:	e172      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d11b      	bne.n	8003dec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3361      	adds	r3, #97	; 0x61
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fa12 	bl	80081fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de8:	6093      	str	r3, [r2, #8]
}
 8003dea:	e14a      	b.n	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	f040 813f 	bne.w	8004082 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3361      	adds	r3, #97	; 0x61
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d17d      	bne.n	8003f14 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	333f      	adds	r3, #63	; 0x3f
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d00a      	beq.n	8003e54 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	333f      	adds	r3, #63	; 0x3f
 8003e4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f040 8100 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3355      	adds	r3, #85	; 0x55
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f083 0301 	eor.w	r3, r3, #1
 8003e70:	b2d8      	uxtb	r0, r3
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3355      	adds	r3, #85	; 0x55
 8003e80:	4602      	mov	r2, r0
 8003e82:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f040 80e3 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	334c      	adds	r3, #76	; 0x4c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80d8 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	334c      	adds	r3, #76	; 0x4c
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	202c      	movs	r0, #44	; 0x2c
 8003eba:	fb00 f202 	mul.w	r2, r0, r2
 8003ebe:	440a      	add	r2, r1
 8003ec0:	3240      	adds	r2, #64	; 0x40
 8003ec2:	8812      	ldrh	r2, [r2, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	202c      	movs	r0, #44	; 0x2c
 8003ece:	fb00 f202 	mul.w	r2, r0, r2
 8003ed2:	440a      	add	r2, r1
 8003ed4:	3240      	adds	r2, #64	; 0x40
 8003ed6:	8812      	ldrh	r2, [r2, #0]
 8003ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80b5 	beq.w	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3355      	adds	r3, #85	; 0x55
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2d8      	uxtb	r0, r3
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3355      	adds	r3, #85	; 0x55
 8003f0e:	4602      	mov	r2, r0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e09f      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3361      	adds	r3, #97	; 0x61
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d109      	bne.n	8003f3c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3360      	adds	r3, #96	; 0x60
 8003f36:	2202      	movs	r2, #2
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e08b      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3361      	adds	r3, #97	; 0x61
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d109      	bne.n	8003f64 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3360      	adds	r3, #96	; 0x60
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e077      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3361      	adds	r3, #97	; 0x61
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d109      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3360      	adds	r3, #96	; 0x60
 8003f86:	2205      	movs	r2, #5
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e063      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3361      	adds	r3, #97	; 0x61
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d009      	beq.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3361      	adds	r3, #97	; 0x61
 8003fae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d14f      	bne.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	335c      	adds	r3, #92	; 0x5c
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	202c      	movs	r0, #44	; 0x2c
 8003fcc:	fb00 f303 	mul.w	r3, r0, r3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	335c      	adds	r3, #92	; 0x5c
 8003fd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	335c      	adds	r3, #92	; 0x5c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d912      	bls.n	8004010 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	212c      	movs	r1, #44	; 0x2c
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	212c      	movs	r1, #44	; 0x2c
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3360      	adds	r3, #96	; 0x60
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e021      	b.n	8004054 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3360      	adds	r3, #96	; 0x60
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004038:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004040:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2302      	movs	r3, #2
 8004064:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	b2d9      	uxtb	r1, r3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	202c      	movs	r0, #44	; 0x2c
 8004070:	fb00 f303 	mul.w	r3, r0, r3
 8004074:	4413      	add	r3, r2
 8004076:	3360      	adds	r3, #96	; 0x60
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f00a f81f 	bl	800e0c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004082:	bf00      	nop
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	0c5b      	lsrs	r3, r3, #17
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d004      	beq.n	80040d0 <HCD_RXQLVL_IRQHandler+0x46>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	f000 80a9 	beq.w	8004220 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040ce:	e0aa      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a6 	beq.w	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3344      	adds	r3, #68	; 0x44
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 809b 	beq.w	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3350      	adds	r3, #80	; 0x50
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	441a      	add	r2, r3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	202c      	movs	r0, #44	; 0x2c
 8004108:	fb00 f303 	mul.w	r3, r0, r3
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	; 0x4c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d87a      	bhi.n	800420c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3344      	adds	r3, #68	; 0x44
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	b292      	uxth	r2, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f003 fbba 	bl	80078a8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3344      	adds	r3, #68	; 0x44
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	441a      	add	r2, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	440b      	add	r3, r1
 8004154:	3344      	adds	r3, #68	; 0x44
 8004156:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3350      	adds	r3, #80	; 0x50
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	441a      	add	r2, r3
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	202c      	movs	r0, #44	; 0x2c
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	440b      	add	r3, r1
 8004178:	3350      	adds	r3, #80	; 0x50
 800417a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	0cdb      	lsrs	r3, r3, #19
 800418c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004190:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3340      	adds	r3, #64	; 0x40
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d13c      	bne.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d039      	beq.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2d8      	uxtb	r0, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3354      	adds	r3, #84	; 0x54
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e00b      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3360      	adds	r3, #96	; 0x60
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e001      	b.n	8004224 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004220:	bf00      	nop
 8004222:	e000      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004224:	bf00      	nop
  }
}
 8004226:	bf00      	nop
 8004228:	3728      	adds	r7, #40	; 0x28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800425a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b02      	cmp	r3, #2
 8004264:	d10b      	bne.n	800427e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f009 ff09 	bl	800e088 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b08      	cmp	r3, #8
 8004286:	d132      	bne.n	80042ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d126      	bne.n	80042e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d113      	bne.n	80042ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ac:	d106      	bne.n	80042bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 fc65 	bl	8007b84 <USB_InitFSLSPClkSel>
 80042ba:	e011      	b.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fc5e 	bl	8007b84 <USB_InitFSLSPClkSel>
 80042c8:	e00a      	b.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d106      	bne.n	80042e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042d8:	461a      	mov	r2, r3
 80042da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f009 fefb 	bl	800e0dc <HAL_HCD_PortEnabled_Callback>
 80042e6:	e002      	b.n	80042ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f009 ff05 	bl	800e0f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d103      	bne.n	8004300 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f043 0320 	orr.w	r3, r3, #32
 80042fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e12b      	b.n	800457e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd f9f4 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004378:	f002 fc6e 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 800437c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a81      	ldr	r2, [pc, #516]	; (8004588 <HAL_I2C_Init+0x274>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d807      	bhi.n	8004398 <HAL_I2C_Init+0x84>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a80      	ldr	r2, [pc, #512]	; (800458c <HAL_I2C_Init+0x278>)
 800438c:	4293      	cmp	r3, r2
 800438e:	bf94      	ite	ls
 8004390:	2301      	movls	r3, #1
 8004392:	2300      	movhi	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e006      	b.n	80043a6 <HAL_I2C_Init+0x92>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a7d      	ldr	r2, [pc, #500]	; (8004590 <HAL_I2C_Init+0x27c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	bf94      	ite	ls
 80043a0:	2301      	movls	r3, #1
 80043a2:	2300      	movhi	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0e7      	b.n	800457e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a78      	ldr	r2, [pc, #480]	; (8004594 <HAL_I2C_Init+0x280>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0c9b      	lsrs	r3, r3, #18
 80043b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a6a      	ldr	r2, [pc, #424]	; (8004588 <HAL_I2C_Init+0x274>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d802      	bhi.n	80043e8 <HAL_I2C_Init+0xd4>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3301      	adds	r3, #1
 80043e6:	e009      	b.n	80043fc <HAL_I2C_Init+0xe8>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a69      	ldr	r2, [pc, #420]	; (8004598 <HAL_I2C_Init+0x284>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	3301      	adds	r3, #1
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	430b      	orrs	r3, r1
 8004402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800440e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	495c      	ldr	r1, [pc, #368]	; (8004588 <HAL_I2C_Init+0x274>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d819      	bhi.n	8004450 <HAL_I2C_Init+0x13c>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e59      	subs	r1, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fbb1 f3f3 	udiv	r3, r1, r3
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004430:	400b      	ands	r3, r1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_I2C_Init+0x138>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1e59      	subs	r1, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fbb1 f3f3 	udiv	r3, r1, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	e051      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 800444c:	2304      	movs	r3, #4
 800444e:	e04f      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d111      	bne.n	800447c <HAL_I2C_Init+0x168>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	e012      	b.n	80044a2 <HAL_I2C_Init+0x18e>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Init+0x196>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e022      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <HAL_I2C_Init+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1e58      	subs	r0, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	460b      	mov	r3, r1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	440b      	add	r3, r1
 80044c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	e00f      	b.n	80044f0 <HAL_I2C_Init+0x1dc>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e58      	subs	r0, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	0099      	lsls	r1, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e6:	3301      	adds	r3, #1
 80044e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	6809      	ldr	r1, [r1, #0]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800451e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6911      	ldr	r1, [r2, #16]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	4311      	orrs	r1, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	000186a0 	.word	0x000186a0
 800458c:	001e847f 	.word	0x001e847f
 8004590:	003d08ff 	.word	0x003d08ff
 8004594:	431bde83 	.word	0x431bde83
 8004598:	10624dd3 	.word	0x10624dd3

0800459c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	461a      	mov	r2, r3
 80045a8:	460b      	mov	r3, r1
 80045aa:	817b      	strh	r3, [r7, #10]
 80045ac:	4613      	mov	r3, r2
 80045ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045b0:	f7fd fb14 	bl	8001bdc <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 80e0 	bne.w	8004784 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2319      	movs	r3, #25
 80045ca:	2201      	movs	r2, #1
 80045cc:	4970      	ldr	r1, [pc, #448]	; (8004790 <HAL_I2C_Master_Transmit+0x1f4>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fc58 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	e0d3      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_I2C_Master_Transmit+0x50>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0cc      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d007      	beq.n	8004612 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2221      	movs	r2, #33	; 0x21
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2210      	movs	r2, #16
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	893a      	ldrh	r2, [r7, #8]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a50      	ldr	r2, [pc, #320]	; (8004794 <HAL_I2C_Master_Transmit+0x1f8>)
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6a3a      	ldr	r2, [r7, #32]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fac2 	bl	8004be4 <I2C_MasterRequestWrite>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e08d      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004680:	e066      	b.n	8004750 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	6a39      	ldr	r1, [r7, #32]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fcd2 	bl	8005030 <I2C_WaitOnTXEFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b04      	cmp	r3, #4
 8004698:	d107      	bne.n	80046aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e06b      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d11b      	bne.n	8004724 <HAL_I2C_Master_Transmit+0x188>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d017      	beq.n	8004724 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	781a      	ldrb	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	6a39      	ldr	r1, [r7, #32]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fcc2 	bl	80050b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	2b04      	cmp	r3, #4
 800473a:	d107      	bne.n	800474c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e01a      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d194      	bne.n	8004682 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	00100002 	.word	0x00100002
 8004794:	ffff0000 	.word	0xffff0000

08004798 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	461a      	mov	r2, r3
 80047a4:	460b      	mov	r3, r1
 80047a6:	817b      	strh	r3, [r7, #10]
 80047a8:	4613      	mov	r3, r2
 80047aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7fd fa16 	bl	8001bdc <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	f040 820b 	bne.w	8004bd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2319      	movs	r3, #25
 80047c6:	2201      	movs	r2, #1
 80047c8:	497c      	ldr	r1, [pc, #496]	; (80049bc <HAL_I2C_Master_Receive+0x224>)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb5a 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	e1fe      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2C_Master_Receive+0x50>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e1f7      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d007      	beq.n	800480e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2222      	movs	r2, #34	; 0x22
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2210      	movs	r2, #16
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	893a      	ldrh	r2, [r7, #8]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a5c      	ldr	r2, [pc, #368]	; (80049c0 <HAL_I2C_Master_Receive+0x228>)
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fa46 	bl	8004ce8 <I2C_MasterRequestRead>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e1b8      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	2b00      	cmp	r3, #0
 800486c:	d113      	bne.n	8004896 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	623b      	str	r3, [r7, #32]
 8004882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e18c      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	2b01      	cmp	r3, #1
 800489c:	d11b      	bne.n	80048d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e16c      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d11b      	bne.n	8004916 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fe:	2300      	movs	r3, #0
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	e14c      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800493c:	e138      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	2b03      	cmp	r3, #3
 8004944:	f200 80f1 	bhi.w	8004b2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	2b01      	cmp	r3, #1
 800494e:	d123      	bne.n	8004998 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fbed 	bl	8005134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e139      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004996:	e10b      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	2b02      	cmp	r3, #2
 800499e:	d14e      	bne.n	8004a3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	2200      	movs	r2, #0
 80049a8:	4906      	ldr	r1, [pc, #24]	; (80049c4 <HAL_I2C_Master_Receive+0x22c>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fa6a 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e10e      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
 80049ba:	bf00      	nop
 80049bc:	00100002 	.word	0x00100002
 80049c0:	ffff0000 	.word	0xffff0000
 80049c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a3c:	e0b8      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2200      	movs	r2, #0
 8004a46:	4966      	ldr	r1, [pc, #408]	; (8004be0 <HAL_I2C_Master_Receive+0x448>)
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fa1b 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0bf      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	494f      	ldr	r1, [pc, #316]	; (8004be0 <HAL_I2C_Master_Receive+0x448>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9ed 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e091      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b28:	e042      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fb00 	bl	8005134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e04c      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d118      	bne.n	8004bb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f47f aec2 	bne.w	800493e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	00010004 	.word	0x00010004

08004be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d006      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d003      	beq.n	8004c0e <I2C_MasterRequestWrite+0x2a>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c0c:	d108      	bne.n	8004c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	e00b      	b.n	8004c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	2b12      	cmp	r3, #18
 8004c26:	d107      	bne.n	8004c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f91d 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5e:	d103      	bne.n	8004c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e035      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c74:	d108      	bne.n	8004c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c84:	611a      	str	r2, [r3, #16]
 8004c86:	e01b      	b.n	8004cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c88:	897b      	ldrh	r3, [r7, #10]
 8004c8a:	11db      	asrs	r3, r3, #7
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f063 030f 	orn	r3, r3, #15
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	490e      	ldr	r1, [pc, #56]	; (8004ce0 <I2C_MasterRequestWrite+0xfc>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f943 	bl	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e010      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cb6:	897b      	ldrh	r3, [r7, #10]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <I2C_MasterRequestWrite+0x100>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f933 	bl	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	00010008 	.word	0x00010008
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d006      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d003      	beq.n	8004d22 <I2C_MasterRequestRead+0x3a>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d20:	d108      	bne.n	8004d34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e00b      	b.n	8004d4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b11      	cmp	r3, #17
 8004d3a:	d107      	bne.n	8004d4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f893 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e079      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d88:	d108      	bne.n	8004d9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e05f      	b.n	8004e5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d9c:	897b      	ldrh	r3, [r7, #10]
 8004d9e:	11db      	asrs	r3, r3, #7
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f063 030f 	orn	r3, r3, #15
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4930      	ldr	r1, [pc, #192]	; (8004e7c <I2C_MasterRequestRead+0x194>)
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f8b9 	bl	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e054      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4929      	ldr	r1, [pc, #164]	; (8004e80 <I2C_MasterRequestRead+0x198>)
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f8a9 	bl	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e044      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f831 	bl	8004e84 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	d103      	bne.n	8004e40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e017      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e44:	897b      	ldrh	r3, [r7, #10]
 8004e46:	11db      	asrs	r3, r3, #7
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	f063 030e 	orn	r3, r3, #14
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	4907      	ldr	r1, [pc, #28]	; (8004e80 <I2C_MasterRequestRead+0x198>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f865 	bl	8004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00010008 	.word	0x00010008
 8004e80:	00010002 	.word	0x00010002

08004e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e94:	e025      	b.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d021      	beq.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fc fe9d 	bl	8001bdc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d116      	bne.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e023      	b.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d10d      	bne.n	8004f08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	e00c      	b.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	43da      	mvns	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d0b6      	beq.n	8004e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f40:	e051      	b.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d123      	bne.n	8004f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f043 0204 	orr.w	r2, r3, #4
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e046      	b.n	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d021      	beq.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fc fe1b 	bl	8001bdc <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d116      	bne.n	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0220 	orr.w	r2, r3, #32
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e020      	b.n	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10c      	bne.n	800500a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e00b      	b.n	8005022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	43da      	mvns	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d18d      	bne.n	8004f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800503c:	e02d      	b.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f8ce 	bl	80051e0 <I2C_IsAcknowledgeFailed>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e02d      	b.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d021      	beq.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fc fdc1 	bl	8001bdc <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d116      	bne.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e007      	b.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d1ca      	bne.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050be:	e02d      	b.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f88d 	bl	80051e0 <I2C_IsAcknowledgeFailed>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e02d      	b.n	800512c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d021      	beq.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d8:	f7fc fd80 	bl	8001bdc <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d302      	bcc.n	80050ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d116      	bne.n	800511c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f043 0220 	orr.w	r2, r3, #32
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e007      	b.n	800512c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d1ca      	bne.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005140:	e042      	b.n	80051c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b10      	cmp	r3, #16
 800514e:	d119      	bne.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0210 	mvn.w	r2, #16
 8005158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e029      	b.n	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005184:	f7fc fd2a 	bl	8001bdc <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d116      	bne.n	80051c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e007      	b.n	80051d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d1b5      	bne.n	8005142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d11b      	bne.n	8005230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e128      	b.n	80054a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a90      	ldr	r2, [pc, #576]	; (80054ac <HAL_I2S_Init+0x26c>)
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7fc faa3 	bl	80017b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005288:	f023 030f 	bic.w	r3, r3, #15
 800528c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d060      	beq.n	8005360 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052a6:	2310      	movs	r3, #16
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e001      	b.n	80052b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052ac:	2320      	movs	r3, #32
 80052ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d802      	bhi.n	80052be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80052be:	2001      	movs	r0, #1
 80052c0:	f001 fdec 	bl	8006e9c <HAL_RCCEx_GetPeriphCLKFreq>
 80052c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ce:	d125      	bne.n	800531c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d010      	beq.n	80052fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	fbb2 f2f3 	udiv	r2, r2, r3
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	3305      	adds	r3, #5
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	e01f      	b.n	800533a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	fbb2 f2f3 	udiv	r2, r2, r3
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	3305      	adds	r3, #5
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e00e      	b.n	800533a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	fbb2 f2f3 	udiv	r2, r2, r3
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	461a      	mov	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	fbb2 f3f3 	udiv	r3, r2, r3
 8005336:	3305      	adds	r3, #5
 8005338:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4a5c      	ldr	r2, [pc, #368]	; (80054b0 <HAL_I2S_Init+0x270>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e003      	b.n	8005368 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005360:	2302      	movs	r3, #2
 8005362:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d902      	bls.n	8005374 <HAL_I2S_Init+0x134>
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2bff      	cmp	r3, #255	; 0xff
 8005372:	d907      	bls.n	8005384 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	f043 0210 	orr.w	r2, r3, #16
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e08f      	b.n	80054a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	ea42 0103 	orr.w	r1, r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	430a      	orrs	r2, r1
 8005396:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053a2:	f023 030f 	bic.w	r3, r3, #15
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6851      	ldr	r1, [r2, #4]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6892      	ldr	r2, [r2, #8]
 80053ae:	4311      	orrs	r1, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68d2      	ldr	r2, [r2, #12]
 80053b4:	4311      	orrs	r1, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6992      	ldr	r2, [r2, #24]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d161      	bne.n	8005494 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a38      	ldr	r2, [pc, #224]	; (80054b4 <HAL_I2S_Init+0x274>)
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <HAL_I2S_Init+0x278>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_I2S_Init+0x1a4>
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <HAL_I2S_Init+0x27c>)
 80053e2:	e001      	b.n	80053e8 <HAL_I2S_Init+0x1a8>
 80053e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	4932      	ldr	r1, [pc, #200]	; (80054b8 <HAL_I2S_Init+0x278>)
 80053f0:	428a      	cmp	r2, r1
 80053f2:	d101      	bne.n	80053f8 <HAL_I2S_Init+0x1b8>
 80053f4:	4a31      	ldr	r2, [pc, #196]	; (80054bc <HAL_I2S_Init+0x27c>)
 80053f6:	e001      	b.n	80053fc <HAL_I2S_Init+0x1bc>
 80053f8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80053fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005400:	f023 030f 	bic.w	r3, r3, #15
 8005404:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2b      	ldr	r2, [pc, #172]	; (80054b8 <HAL_I2S_Init+0x278>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <HAL_I2S_Init+0x1d4>
 8005410:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <HAL_I2S_Init+0x27c>)
 8005412:	e001      	b.n	8005418 <HAL_I2S_Init+0x1d8>
 8005414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005418:	2202      	movs	r2, #2
 800541a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <HAL_I2S_Init+0x278>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_I2S_Init+0x1ea>
 8005426:	4b25      	ldr	r3, [pc, #148]	; (80054bc <HAL_I2S_Init+0x27c>)
 8005428:	e001      	b.n	800542e <HAL_I2S_Init+0x1ee>
 800542a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543a:	d003      	beq.n	8005444 <HAL_I2S_Init+0x204>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d103      	bne.n	800544c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e001      	b.n	8005450 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800545a:	4313      	orrs	r3, r2
 800545c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005464:	4313      	orrs	r3, r2
 8005466:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800546e:	4313      	orrs	r3, r2
 8005470:	b29a      	uxth	r2, r3
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	4313      	orrs	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800547c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_I2S_Init+0x278>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_I2S_Init+0x24c>
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <HAL_I2S_Init+0x27c>)
 800548a:	e001      	b.n	8005490 <HAL_I2S_Init+0x250>
 800548c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005490:	897a      	ldrh	r2, [r7, #10]
 8005492:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	08005d3d 	.word	0x08005d3d
 80054b0:	cccccccd 	.word	0xcccccccd
 80054b4:	08005ec5 	.word	0x08005ec5
 80054b8:	40003800 	.word	0x40003800
 80054bc:	40003400 	.word	0x40003400

080054c0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_I2S_Transmit_DMA+0x1a>
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e08e      	b.n	80055fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_I2S_Transmit_DMA+0x2e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e086      	b.n	80055fc <HAL_I2S_Transmit_DMA+0x13c>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d005      	beq.n	800550e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
 800550c:	e076      	b.n	80055fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2203      	movs	r2, #3
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d002      	beq.n	800553a <HAL_I2S_Transmit_DMA+0x7a>
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d10a      	bne.n	8005550 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800554e:	e005      	b.n	800555c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_I2S_Transmit_DMA+0x144>)
 8005562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	4a27      	ldr	r2, [pc, #156]	; (8005608 <HAL_I2S_Transmit_DMA+0x148>)
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_I2S_Transmit_DMA+0x14c>)
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800557c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005584:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800558c:	f7fc fd86 	bl	800209c <HAL_DMA_Start_IT>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	f043 0208 	orr.w	r2, r3, #8
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e022      	b.n	80055fc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d107      	bne.n	80055f2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0202 	orr.w	r2, r2, #2
 80055f0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	08005c1b 	.word	0x08005c1b
 8005608:	08005bd9 	.word	0x08005bd9
 800560c:	08005c37 	.word	0x08005c37

08005610 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_I2S_DMAPause+0x18>
 8005624:	2302      	movs	r3, #2
 8005626:	e04a      	b.n	80056be <HAL_I2S_DMAPause+0xae>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b03      	cmp	r3, #3
 800563a:	d108      	bne.n	800564e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0202 	bic.w	r2, r2, #2
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e032      	b.n	80056b4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b04      	cmp	r3, #4
 8005658:	d108      	bne.n	800566c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e023      	b.n	80056b4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b05      	cmp	r3, #5
 8005676:	d11d      	bne.n	80056b4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0203 	bic.w	r2, r2, #3
 8005686:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0f      	ldr	r2, [pc, #60]	; (80056cc <HAL_I2S_DMAPause+0xbc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <HAL_I2S_DMAPause+0x86>
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_I2S_DMAPause+0xc0>)
 8005694:	e001      	b.n	800569a <HAL_I2S_DMAPause+0x8a>
 8005696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	490a      	ldr	r1, [pc, #40]	; (80056cc <HAL_I2S_DMAPause+0xbc>)
 80056a2:	428b      	cmp	r3, r1
 80056a4:	d101      	bne.n	80056aa <HAL_I2S_DMAPause+0x9a>
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_I2S_DMAPause+0xc0>)
 80056a8:	e001      	b.n	80056ae <HAL_I2S_DMAPause+0x9e>
 80056aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ae:	f022 0203 	bic.w	r2, r2, #3
 80056b2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40003800 	.word	0x40003800
 80056d0:	40003400 	.word	0x40003400

080056d4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_I2S_DMAResume+0x18>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e07d      	b.n	80057e8 <HAL_I2S_DMAResume+0x114>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d108      	bne.n	8005712 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0202 	orr.w	r2, r2, #2
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	e056      	b.n	80057c0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b04      	cmp	r3, #4
 800571c:	d108      	bne.n	8005730 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e047      	b.n	80057c0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b05      	cmp	r3, #5
 800573a:	d141      	bne.n	80057c0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0203 	orr.w	r2, r2, #3
 800574a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a28      	ldr	r2, [pc, #160]	; (80057f4 <HAL_I2S_DMAResume+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <HAL_I2S_DMAResume+0x86>
 8005756:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <HAL_I2S_DMAResume+0x124>)
 8005758:	e001      	b.n	800575e <HAL_I2S_DMAResume+0x8a>
 800575a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4923      	ldr	r1, [pc, #140]	; (80057f4 <HAL_I2S_DMAResume+0x120>)
 8005766:	428b      	cmp	r3, r1
 8005768:	d101      	bne.n	800576e <HAL_I2S_DMAResume+0x9a>
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <HAL_I2S_DMAResume+0x124>)
 800576c:	e001      	b.n	8005772 <HAL_I2S_DMAResume+0x9e>
 800576e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005772:	f042 0203 	orr.w	r2, r2, #3
 8005776:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <HAL_I2S_DMAResume+0x120>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_I2S_DMAResume+0xb2>
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_I2S_DMAResume+0x124>)
 8005784:	e001      	b.n	800578a <HAL_I2S_DMAResume+0xb6>
 8005786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d115      	bne.n	80057c0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_I2S_DMAResume+0x120>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_I2S_DMAResume+0xce>
 800579e:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <HAL_I2S_DMAResume+0x124>)
 80057a0:	e001      	b.n	80057a6 <HAL_I2S_DMAResume+0xd2>
 80057a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4911      	ldr	r1, [pc, #68]	; (80057f4 <HAL_I2S_DMAResume+0x120>)
 80057ae:	428b      	cmp	r3, r1
 80057b0:	d101      	bne.n	80057b6 <HAL_I2S_DMAResume+0xe2>
 80057b2:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <HAL_I2S_DMAResume+0x124>)
 80057b4:	e001      	b.n	80057ba <HAL_I2S_DMAResume+0xe6>
 80057b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057be:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d107      	bne.n	80057de <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057dc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40003800 	.word	0x40003800
 80057f8:	40003400 	.word	0x40003400

080057fc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005810:	d004      	beq.n	800581c <HAL_I2S_DMAStop+0x20>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 80d1 	bne.w	80059be <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	4618      	mov	r0, r3
 800582a:	f7fc fc8f 	bl	800214c <HAL_DMA_Abort>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	f043 0208 	orr.w	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005844:	2364      	movs	r3, #100	; 0x64
 8005846:	2201      	movs	r2, #1
 8005848:	2102      	movs	r1, #2
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fb00 	bl	8005e50 <I2S_WaitFlagStateUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800586e:	2364      	movs	r3, #100	; 0x64
 8005870:	2200      	movs	r2, #0
 8005872:	2180      	movs	r1, #128	; 0x80
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 faeb 	bl	8005e50 <I2S_WaitFlagStateUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0202 	bic.w	r2, r2, #2
 80058c4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	f040 8165 	bne.w	8005b9e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fc fc33 	bl	800214c <HAL_DMA_Abort>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f0:	f043 0208 	orr.w	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a8a      	ldr	r2, [pc, #552]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_I2S_DMAStop+0x10e>
 8005906:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005908:	e001      	b.n	800590e <HAL_I2S_DMAStop+0x112>
 800590a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4985      	ldr	r1, [pc, #532]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005916:	428b      	cmp	r3, r1
 8005918:	d101      	bne.n	800591e <HAL_I2S_DMAStop+0x122>
 800591a:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 800591c:	e001      	b.n	8005922 <HAL_I2S_DMAStop+0x126>
 800591e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7e      	ldr	r2, [pc, #504]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d101      	bne.n	800593a <HAL_I2S_DMAStop+0x13e>
 8005936:	4b7e      	ldr	r3, [pc, #504]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005938:	e001      	b.n	800593e <HAL_I2S_DMAStop+0x142>
 800593a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a79      	ldr	r2, [pc, #484]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_I2S_DMAStop+0x154>
 800594c:	4b78      	ldr	r3, [pc, #480]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 800594e:	e001      	b.n	8005954 <HAL_I2S_DMAStop+0x158>
 8005950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d101      	bne.n	8005968 <HAL_I2S_DMAStop+0x16c>
 8005964:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005966:	e001      	b.n	800596c <HAL_I2S_DMAStop+0x170>
 8005968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	496e      	ldr	r1, [pc, #440]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005974:	428b      	cmp	r3, r1
 8005976:	d101      	bne.n	800597c <HAL_I2S_DMAStop+0x180>
 8005978:	4b6d      	ldr	r3, [pc, #436]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 800597a:	e001      	b.n	8005980 <HAL_I2S_DMAStop+0x184>
 800597c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10c      	bne.n	80059a8 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059a6:	e0fa      	b.n	8005b9e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5f      	ldr	r2, [pc, #380]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d101      	bne.n	80059b6 <HAL_I2S_DMAStop+0x1ba>
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 80059b4:	e001      	b.n	80059ba <HAL_I2S_DMAStop+0x1be>
 80059b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ba:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059bc:	e0ef      	b.n	8005b9e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c6:	d005      	beq.n	80059d4 <HAL_I2S_DMAStop+0x1d8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	f040 80e5 	bne.w	8005b9e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fc fbb3 	bl	800214c <HAL_DMA_Abort>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f043 0208 	orr.w	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	f040 809a 	bne.w	8005b3e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc fb98 	bl	800214c <HAL_DMA_Abort>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8005a32:	f7fc f8d3 	bl	8001bdc <HAL_GetTick>
 8005a36:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a38:	e012      	b.n	8005a60 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a3a:	f7fc f8cf 	bl	8001bdc <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	; 0x64
 8005a46:	d90b      	bls.n	8005a60 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a31      	ldr	r2, [pc, #196]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d101      	bne.n	8005a6e <HAL_I2S_DMAStop+0x272>
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005a6c:	e001      	b.n	8005a72 <HAL_I2S_DMAStop+0x276>
 8005a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d1de      	bne.n	8005a3a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005a7c:	e012      	b.n	8005aa4 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005a7e:	f7fc f8ad 	bl	8001bdc <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d90b      	bls.n	8005aa4 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	f043 0201 	orr.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2S_DMAStop+0x2b6>
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005ab0:	e001      	b.n	8005ab6 <HAL_I2S_DMAStop+0x2ba>
 8005ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d0de      	beq.n	8005a7e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d101      	bne.n	8005ace <HAL_I2S_DMAStop+0x2d2>
 8005aca:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005acc:	e001      	b.n	8005ad2 <HAL_I2S_DMAStop+0x2d6>
 8005ace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4914      	ldr	r1, [pc, #80]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005ada:	428b      	cmp	r3, r1
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2S_DMAStop+0x2e6>
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005ae0:	e001      	b.n	8005ae6 <HAL_I2S_DMAStop+0x2ea>
 8005ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aea:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d101      	bne.n	8005afe <HAL_I2S_DMAStop+0x302>
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005afc:	e001      	b.n	8005b02 <HAL_I2S_DMAStop+0x306>
 8005afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d101      	bne.n	8005b16 <HAL_I2S_DMAStop+0x31a>
 8005b12:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005b14:	e001      	b.n	8005b1a <HAL_I2S_DMAStop+0x31e>
 8005b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4902      	ldr	r1, [pc, #8]	; (8005b2c <HAL_I2S_DMAStop+0x330>)
 8005b22:	428b      	cmp	r3, r1
 8005b24:	d106      	bne.n	8005b34 <HAL_I2S_DMAStop+0x338>
 8005b26:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <HAL_I2S_DMAStop+0x334>)
 8005b28:	e006      	b.n	8005b38 <HAL_I2S_DMAStop+0x33c>
 8005b2a:	bf00      	nop
 8005b2c:	40003800 	.word	0x40003800
 8005b30:	40003400 	.word	0x40003400
 8005b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b38:	f022 0202 	bic.w	r2, r2, #2
 8005b3c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b7c:	d10c      	bne.n	8005b98 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	77fb      	strb	r3, [r7, #31]
 8005b96:	e002      	b.n	8005b9e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10e      	bne.n	8005c0c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0202 	bic.w	r2, r2, #2
 8005bfc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7fa ffb1 	bl	8000b74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7fa ffb5 	bl	8000b98 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0203 	bic.w	r2, r2, #3
 8005c52:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	f043 0208 	orr.w	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff ffa5 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	881a      	ldrh	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	1c9a      	adds	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10e      	bne.n	8005cd6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fa ff4f 	bl	8000b74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	1c9a      	adds	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10e      	bne.n	8005d34 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff3e 	bl	8005bb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d13a      	bne.n	8005dce <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d109      	bne.n	8005d76 <I2S_IRQHandler+0x3a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d102      	bne.n	8005d76 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ffb4 	bl	8005cde <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d126      	bne.n	8005dce <I2S_IRQHandler+0x92>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d11f      	bne.n	8005dce <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d9c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fefb 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d136      	bne.n	8005e48 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d109      	bne.n	8005df8 <I2S_IRQHandler+0xbc>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d102      	bne.n	8005df8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ff45 	bl	8005c82 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d122      	bne.n	8005e48 <I2S_IRQHandler+0x10c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d11b      	bne.n	8005e48 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e1e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff febe 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e60:	f7fb febc 	bl	8001bdc <HAL_GetTick>
 8005e64:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005e66:	e018      	b.n	8005e9a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d014      	beq.n	8005e9a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005e70:	f7fb feb4 	bl	8001bdc <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d902      	bls.n	8005e86 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e00f      	b.n	8005eba <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1d7      	bne.n	8005e68 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a92      	ldr	r2, [pc, #584]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ede:	4b92      	ldr	r3, [pc, #584]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ee0:	e001      	b.n	8005ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a8b      	ldr	r2, [pc, #556]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d101      	bne.n	8005f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005efc:	4b8a      	ldr	r3, [pc, #552]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005efe:	e001      	b.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f10:	d004      	beq.n	8005f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8099 	bne.w	800604e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d107      	bne.n	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f925 	bl	8006180 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d107      	bne.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9c8 	bl	80062e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d13a      	bne.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d035      	beq.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6e      	ldr	r2, [pc, #440]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f6e:	4b6e      	ldr	r3, [pc, #440]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f70:	e001      	b.n	8005f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4969      	ldr	r1, [pc, #420]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f7e:	428b      	cmp	r3, r1
 8005f80:	d101      	bne.n	8005f86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f82:	4b69      	ldr	r3, [pc, #420]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f84:	e001      	b.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f8e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fdfa 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	f040 80c3 	bne.w	8006162 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80bd 	beq.w	8006162 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ff6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a49      	ldr	r2, [pc, #292]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006002:	4b49      	ldr	r3, [pc, #292]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006004:	e001      	b.n	800600a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4944      	ldr	r1, [pc, #272]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006012:	428b      	cmp	r3, r1
 8006014:	d101      	bne.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006016:	4b44      	ldr	r3, [pc, #272]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006018:	e001      	b.n	800601e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800601a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800601e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006022:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	f043 0204 	orr.w	r2, r3, #4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fdbc 	bl	8005bc4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800604c:	e089      	b.n	8006162 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d107      	bne.n	8006068 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8be 	bl	80061e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8fd 	bl	800627c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d12f      	bne.n	80060ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d02a      	beq.n	80060ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80060b0:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060b2:	e001      	b.n	80060b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80060b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4919      	ldr	r1, [pc, #100]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060c0:	428b      	cmp	r3, r1
 80060c2:	d101      	bne.n	80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80060c4:	4b18      	ldr	r3, [pc, #96]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060c6:	e001      	b.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	f043 0202 	orr.w	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fd6c 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d136      	bne.n	8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d031      	beq.n	8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a07      	ldr	r2, [pc, #28]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800610c:	e001      	b.n	8006112 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4902      	ldr	r1, [pc, #8]	; (8006124 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800611a:	428b      	cmp	r3, r1
 800611c:	d106      	bne.n	800612c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800611e:	4b02      	ldr	r3, [pc, #8]	; (8006128 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006120:	e006      	b.n	8006130 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006122:	bf00      	nop
 8006124:	40003800 	.word	0x40003800
 8006128:	40003400 	.word	0x40003400
 800612c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006134:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006144:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	f043 0204 	orr.w	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fd32 	bl	8005bc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006160:	e000      	b.n	8006164 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006162:	bf00      	nop
}
 8006164:	bf00      	nop
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	1c99      	adds	r1, r3, #2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6251      	str	r1, [r2, #36]	; 0x24
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d113      	bne.n	80061da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ffc9 	bl	800616c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c99      	adds	r1, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6251      	str	r1, [r2, #36]	; 0x24
 80061f6:	8819      	ldrh	r1, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <I2SEx_TxISR_I2SExt+0x90>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d101      	bne.n	8006206 <I2SEx_TxISR_I2SExt+0x22>
 8006202:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <I2SEx_TxISR_I2SExt+0x94>)
 8006204:	e001      	b.n	800620a <I2SEx_TxISR_I2SExt+0x26>
 8006206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800620a:	460a      	mov	r2, r1
 800620c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d121      	bne.n	800626a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a12      	ldr	r2, [pc, #72]	; (8006274 <I2SEx_TxISR_I2SExt+0x90>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d101      	bne.n	8006234 <I2SEx_TxISR_I2SExt+0x50>
 8006230:	4b11      	ldr	r3, [pc, #68]	; (8006278 <I2SEx_TxISR_I2SExt+0x94>)
 8006232:	e001      	b.n	8006238 <I2SEx_TxISR_I2SExt+0x54>
 8006234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	490d      	ldr	r1, [pc, #52]	; (8006274 <I2SEx_TxISR_I2SExt+0x90>)
 8006240:	428b      	cmp	r3, r1
 8006242:	d101      	bne.n	8006248 <I2SEx_TxISR_I2SExt+0x64>
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <I2SEx_TxISR_I2SExt+0x94>)
 8006246:	e001      	b.n	800624c <I2SEx_TxISR_I2SExt+0x68>
 8006248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800624c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006250:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff ff81 	bl	800616c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40003800 	.word	0x40003800
 8006278:	40003400 	.word	0x40003400

0800627c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68d8      	ldr	r0, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	1c99      	adds	r1, r3, #2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006294:	b282      	uxth	r2, r0
 8006296:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d113      	bne.n	80062d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff4a 	bl	800616c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <I2SEx_RxISR_I2SExt+0x90>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <I2SEx_RxISR_I2SExt+0x16>
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <I2SEx_RxISR_I2SExt+0x94>)
 80062f4:	e001      	b.n	80062fa <I2SEx_RxISR_I2SExt+0x1a>
 80062f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fa:	68d8      	ldr	r0, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	1c99      	adds	r1, r3, #2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006306:	b282      	uxth	r2, r0
 8006308:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d121      	bne.n	8006366 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <I2SEx_RxISR_I2SExt+0x90>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d101      	bne.n	8006330 <I2SEx_RxISR_I2SExt+0x50>
 800632c:	4b11      	ldr	r3, [pc, #68]	; (8006374 <I2SEx_RxISR_I2SExt+0x94>)
 800632e:	e001      	b.n	8006334 <I2SEx_RxISR_I2SExt+0x54>
 8006330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	490d      	ldr	r1, [pc, #52]	; (8006370 <I2SEx_RxISR_I2SExt+0x90>)
 800633c:	428b      	cmp	r3, r1
 800633e:	d101      	bne.n	8006344 <I2SEx_RxISR_I2SExt+0x64>
 8006340:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <I2SEx_RxISR_I2SExt+0x94>)
 8006342:	e001      	b.n	8006348 <I2SEx_RxISR_I2SExt+0x68>
 8006344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006348:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800634c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d106      	bne.n	8006366 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff03 	bl	800616c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40003800 	.word	0x40003800
 8006374:	40003400 	.word	0x40003400

08006378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e267      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d075      	beq.n	8006482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006396:	4b88      	ldr	r3, [pc, #544]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00c      	beq.n	80063bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063a2:	4b85      	ldr	r3, [pc, #532]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d112      	bne.n	80063d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ae:	4b82      	ldr	r3, [pc, #520]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ba:	d10b      	bne.n	80063d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063bc:	4b7e      	ldr	r3, [pc, #504]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05b      	beq.n	8006480 <HAL_RCC_OscConfig+0x108>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d157      	bne.n	8006480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e242      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d106      	bne.n	80063ec <HAL_RCC_OscConfig+0x74>
 80063de:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a75      	ldr	r2, [pc, #468]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e01d      	b.n	8006428 <HAL_RCC_OscConfig+0xb0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x98>
 80063f6:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6f      	ldr	r2, [pc, #444]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80063fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4b6d      	ldr	r3, [pc, #436]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a6c      	ldr	r2, [pc, #432]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e00b      	b.n	8006428 <HAL_RCC_OscConfig+0xb0>
 8006410:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a68      	ldr	r2, [pc, #416]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b66      	ldr	r3, [pc, #408]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a65      	ldr	r2, [pc, #404]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d013      	beq.n	8006458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006430:	f7fb fbd4 	bl	8001bdc <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006438:	f7fb fbd0 	bl	8001bdc <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	; 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e207      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644a:	4b5b      	ldr	r3, [pc, #364]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0xc0>
 8006456:	e014      	b.n	8006482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fb fbc0 	bl	8001bdc <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006460:	f7fb fbbc 	bl	8001bdc <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e1f3      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006472:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f0      	bne.n	8006460 <HAL_RCC_OscConfig+0xe8>
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d063      	beq.n	8006556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800648e:	4b4a      	ldr	r3, [pc, #296]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00b      	beq.n	80064b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800649a:	4b47      	ldr	r3, [pc, #284]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d11c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a6:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d116      	bne.n	80064e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b2:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_RCC_OscConfig+0x152>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d001      	beq.n	80064ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e1c7      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ca:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4937      	ldr	r1, [pc, #220]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064de:	e03a      	b.n	8006556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d020      	beq.n	800652a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e8:	4b34      	ldr	r3, [pc, #208]	; (80065bc <HAL_RCC_OscConfig+0x244>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ee:	f7fb fb75 	bl	8001bdc <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f6:	f7fb fb71 	bl	8001bdc <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e1a8      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006508:	4b2b      	ldr	r3, [pc, #172]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0f0      	beq.n	80064f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006514:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4925      	ldr	r1, [pc, #148]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]
 8006528:	e015      	b.n	8006556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800652a:	4b24      	ldr	r3, [pc, #144]	; (80065bc <HAL_RCC_OscConfig+0x244>)
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006530:	f7fb fb54 	bl	8001bdc <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006538:	f7fb fb50 	bl	8001bdc <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e187      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d036      	beq.n	80065d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_RCC_OscConfig+0x248>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fb fb34 	bl	8001bdc <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006578:	f7fb fb30 	bl	8001bdc <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e167      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_OscConfig+0x240>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x200>
 8006596:	e01b      	b.n	80065d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006598:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <HAL_RCC_OscConfig+0x248>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659e:	f7fb fb1d 	bl	8001bdc <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	e00e      	b.n	80065c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a6:	f7fb fb19 	bl	8001bdc <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d907      	bls.n	80065c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e150      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
 80065b8:	40023800 	.word	0x40023800
 80065bc:	42470000 	.word	0x42470000
 80065c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c4:	4b88      	ldr	r3, [pc, #544]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1ea      	bne.n	80065a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8097 	beq.w	800670c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e2:	4b81      	ldr	r3, [pc, #516]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10f      	bne.n	800660e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	4b7d      	ldr	r3, [pc, #500]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	4a7c      	ldr	r2, [pc, #496]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80065f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065fc:	6413      	str	r3, [r2, #64]	; 0x40
 80065fe:	4b7a      	ldr	r3, [pc, #488]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660e:	4b77      	ldr	r3, [pc, #476]	; (80067ec <HAL_RCC_OscConfig+0x474>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d118      	bne.n	800664c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800661a:	4b74      	ldr	r3, [pc, #464]	; (80067ec <HAL_RCC_OscConfig+0x474>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a73      	ldr	r2, [pc, #460]	; (80067ec <HAL_RCC_OscConfig+0x474>)
 8006620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006626:	f7fb fad9 	bl	8001bdc <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662e:	f7fb fad5 	bl	8001bdc <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e10c      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006640:	4b6a      	ldr	r3, [pc, #424]	; (80067ec <HAL_RCC_OscConfig+0x474>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x2ea>
 8006654:	4b64      	ldr	r3, [pc, #400]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4a63      	ldr	r2, [pc, #396]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	6713      	str	r3, [r2, #112]	; 0x70
 8006660:	e01c      	b.n	800669c <HAL_RCC_OscConfig+0x324>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b05      	cmp	r3, #5
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x30c>
 800666a:	4b5f      	ldr	r3, [pc, #380]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	4a5e      	ldr	r2, [pc, #376]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006670:	f043 0304 	orr.w	r3, r3, #4
 8006674:	6713      	str	r3, [r2, #112]	; 0x70
 8006676:	4b5c      	ldr	r3, [pc, #368]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4a5b      	ldr	r2, [pc, #364]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6713      	str	r3, [r2, #112]	; 0x70
 8006682:	e00b      	b.n	800669c <HAL_RCC_OscConfig+0x324>
 8006684:	4b58      	ldr	r3, [pc, #352]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	4a57      	ldr	r2, [pc, #348]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	6713      	str	r3, [r2, #112]	; 0x70
 8006690:	4b55      	ldr	r3, [pc, #340]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	4a54      	ldr	r2, [pc, #336]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006696:	f023 0304 	bic.w	r3, r3, #4
 800669a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d015      	beq.n	80066d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a4:	f7fb fa9a 	bl	8001bdc <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ac:	f7fb fa96 	bl	8001bdc <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e0cb      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c2:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ee      	beq.n	80066ac <HAL_RCC_OscConfig+0x334>
 80066ce:	e014      	b.n	80066fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d0:	f7fb fa84 	bl	8001bdc <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d6:	e00a      	b.n	80066ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d8:	f7fb fa80 	bl	8001bdc <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e0b5      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ee:	4b3e      	ldr	r3, [pc, #248]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1ee      	bne.n	80066d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d105      	bne.n	800670c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006700:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800670a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80a1 	beq.w	8006858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006716:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b08      	cmp	r3, #8
 8006720:	d05c      	beq.n	80067dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d141      	bne.n	80067ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <HAL_RCC_OscConfig+0x478>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006730:	f7fb fa54 	bl	8001bdc <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006738:	f7fb fa50 	bl	8001bdc <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e087      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69da      	ldr	r2, [r3, #28]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	3b01      	subs	r3, #1
 8006770:	041b      	lsls	r3, r3, #16
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	061b      	lsls	r3, r3, #24
 800677a:	491b      	ldr	r1, [pc, #108]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 800677c:	4313      	orrs	r3, r2
 800677e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_RCC_OscConfig+0x478>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006786:	f7fb fa29 	bl	8001bdc <HAL_GetTick>
 800678a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800678e:	f7fb fa25 	bl	8001bdc <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e05c      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f0      	beq.n	800678e <HAL_RCC_OscConfig+0x416>
 80067ac:	e054      	b.n	8006858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <HAL_RCC_OscConfig+0x478>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b4:	f7fb fa12 	bl	8001bdc <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067bc:	f7fb fa0e 	bl	8001bdc <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e045      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCC_OscConfig+0x470>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x444>
 80067da:	e03d      	b.n	8006858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e038      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
 80067e8:	40023800 	.word	0x40023800
 80067ec:	40007000 	.word	0x40007000
 80067f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_RCC_OscConfig+0x4ec>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d028      	beq.n	8006854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d121      	bne.n	8006854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d11a      	bne.n	8006854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800682a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800682c:	4293      	cmp	r3, r2
 800682e:	d111      	bne.n	8006854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	3b01      	subs	r3, #1
 800683e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006840:	429a      	cmp	r2, r3
 8006842:	d107      	bne.n	8006854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d001      	beq.n	8006858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800

08006868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0cc      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d90c      	bls.n	80068a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b65      	ldr	r3, [pc, #404]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b63      	ldr	r3, [pc, #396]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e0b8      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d020      	beq.n	80068f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068bc:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a58      	ldr	r2, [pc, #352]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d4:	4b53      	ldr	r3, [pc, #332]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4a52      	ldr	r2, [pc, #328]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e0:	4b50      	ldr	r3, [pc, #320]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	494d      	ldr	r1, [pc, #308]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d044      	beq.n	8006988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006906:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d119      	bne.n	8006946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e07f      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d003      	beq.n	8006926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006922:	2b03      	cmp	r3, #3
 8006924:	d107      	bne.n	8006936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006926:	4b3f      	ldr	r3, [pc, #252]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e06f      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006936:	4b3b      	ldr	r3, [pc, #236]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e067      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006946:	4b37      	ldr	r3, [pc, #220]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f023 0203 	bic.w	r2, r3, #3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	4934      	ldr	r1, [pc, #208]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	4313      	orrs	r3, r2
 8006956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006958:	f7fb f940 	bl	8001bdc <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695e:	e00a      	b.n	8006976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006960:	f7fb f93c 	bl	8001bdc <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	f241 3288 	movw	r2, #5000	; 0x1388
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e04f      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	4b2b      	ldr	r3, [pc, #172]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 020c 	and.w	r2, r3, #12
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	429a      	cmp	r2, r3
 8006986:	d1eb      	bne.n	8006960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006988:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d20c      	bcs.n	80069b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006996:	4b22      	ldr	r3, [pc, #136]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b20      	ldr	r3, [pc, #128]	; (8006a20 <HAL_RCC_ClockConfig+0x1b8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d001      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e032      	b.n	8006a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4916      	ldr	r1, [pc, #88]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	490e      	ldr	r1, [pc, #56]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ee:	f000 f821 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80069f2:	4602      	mov	r2, r0
 80069f4:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	490a      	ldr	r1, [pc, #40]	; (8006a28 <HAL_RCC_ClockConfig+0x1c0>)
 8006a00:	5ccb      	ldrb	r3, [r1, r3]
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a0a:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <HAL_RCC_ClockConfig+0x1c8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fb f8a0 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40023c00 	.word	0x40023c00
 8006a24:	40023800 	.word	0x40023800
 8006a28:	0800ef8c 	.word	0x0800ef8c
 8006a2c:	20000014 	.word	0x20000014
 8006a30:	20000018 	.word	0x20000018

08006a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a38:	b094      	sub	sp, #80	; 0x50
 8006a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a40:	2300      	movs	r3, #0
 8006a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a44:	2300      	movs	r3, #0
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a4c:	4b79      	ldr	r3, [pc, #484]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d00d      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x40>
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	f200 80e1 	bhi.w	8006c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_RCC_GetSysClockFreq+0x34>
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d003      	beq.n	8006a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a66:	e0db      	b.n	8006c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a68:	4b73      	ldr	r3, [pc, #460]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a6c:	e0db      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a6e:	4b73      	ldr	r3, [pc, #460]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8006a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a72:	e0d8      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a74:	4b6f      	ldr	r3, [pc, #444]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a7e:	4b6d      	ldr	r3, [pc, #436]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d063      	beq.n	8006b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a8a:	4b6a      	ldr	r3, [pc, #424]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	099b      	lsrs	r3, r3, #6
 8006a90:	2200      	movs	r2, #0
 8006a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	f04f 0000 	mov.w	r0, #0
 8006aae:	f04f 0100 	mov.w	r1, #0
 8006ab2:	0159      	lsls	r1, r3, #5
 8006ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ab8:	0150      	lsls	r0, r2, #5
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4621      	mov	r1, r4
 8006ac0:	1a51      	subs	r1, r2, r1
 8006ac2:	6139      	str	r1, [r7, #16]
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ad8:	4659      	mov	r1, fp
 8006ada:	018b      	lsls	r3, r1, #6
 8006adc:	4651      	mov	r1, sl
 8006ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	018a      	lsls	r2, r1, #6
 8006ae6:	4651      	mov	r1, sl
 8006ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8006aec:	4659      	mov	r1, fp
 8006aee:	eb63 0901 	sbc.w	r9, r3, r1
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b06:	4690      	mov	r8, r2
 8006b08:	4699      	mov	r9, r3
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	eb18 0303 	adds.w	r3, r8, r3
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	462b      	mov	r3, r5
 8006b14:	eb49 0303 	adc.w	r3, r9, r3
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b26:	4629      	mov	r1, r5
 8006b28:	024b      	lsls	r3, r1, #9
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b30:	4621      	mov	r1, r4
 8006b32:	024a      	lsls	r2, r1, #9
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b44:	f7f9 fb94 	bl	8000270 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b50:	e058      	b.n	8006c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b52:	4b38      	ldr	r3, [pc, #224]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	2300      	movs	r3, #0
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
 8006b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	f04f 0000 	mov.w	r0, #0
 8006b74:	f04f 0100 	mov.w	r1, #0
 8006b78:	0159      	lsls	r1, r3, #5
 8006b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b7e:	0150      	lsls	r0, r2, #5
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4641      	mov	r1, r8
 8006b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	00eb      	lsls	r3, r5, #3
 8006bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bba:	00e2      	lsls	r2, r4, #3
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	4643      	mov	r3, r8
 8006bc2:	18e3      	adds	r3, r4, r3
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	eb45 0303 	adc.w	r3, r5, r3
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bda:	4629      	mov	r1, r5
 8006bdc:	028b      	lsls	r3, r1, #10
 8006bde:	4621      	mov	r1, r4
 8006be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006be4:	4621      	mov	r1, r4
 8006be6:	028a      	lsls	r2, r1, #10
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bee:	2200      	movs	r2, #0
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	61fa      	str	r2, [r7, #28]
 8006bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf8:	f7f9 fb3a 	bl	8000270 <__aeabi_uldivmod>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4613      	mov	r3, r2
 8006c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c1e:	e002      	b.n	8006c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3750      	adds	r7, #80	; 0x50
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	007a1200 	.word	0x007a1200

08006c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000014 	.word	0x20000014

08006c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c5c:	f7ff fff0 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c60:	4602      	mov	r2, r0
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	0a9b      	lsrs	r3, r3, #10
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	4903      	ldr	r1, [pc, #12]	; (8006c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c6e:	5ccb      	ldrb	r3, [r1, r3]
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	0800ef9c 	.word	0x0800ef9c

08006c80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d035      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ca8:	4b62      	ldr	r3, [pc, #392]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cae:	f7fa ff95 	bl	8001bdc <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cb6:	f7fa ff91 	bl	8001bdc <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0b0      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cc8:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f0      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	019a      	lsls	r2, r3, #6
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	071b      	lsls	r3, r3, #28
 8006ce0:	4955      	ldr	r1, [pc, #340]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ce8:	4b52      	ldr	r3, [pc, #328]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fa ff75 	bl	8001bdc <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cf6:	f7fa ff71 	bl	8001bdc <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e090      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d08:	4b4b      	ldr	r3, [pc, #300]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8083 	beq.w	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	4a43      	ldr	r2, [pc, #268]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d30:	6413      	str	r3, [r2, #64]	; 0x40
 8006d32:	4b41      	ldr	r3, [pc, #260]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3e      	ldr	r2, [pc, #248]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4a:	f7fa ff47 	bl	8001bdc <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d52:	f7fa ff43 	bl	8001bdc <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e062      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d64:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d70:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d02f      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d028      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d98:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d9e:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006da4:	4a24      	ldr	r2, [pc, #144]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d114      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006db6:	f7fa ff11 	bl	8001bdc <HAL_GetTick>
 8006dba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbe:	f7fa ff0d 	bl	8001bdc <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e02a      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd4:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ee      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dec:	d10d      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	490d      	ldr	r1, [pc, #52]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]
 8006e08:	e005      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e14:	6093      	str	r3, [r2, #8]
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e22:	4905      	ldr	r1, [pc, #20]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	42470068 	.word	0x42470068
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	42470e40 	.word	0x42470e40

08006e44 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2203      	movs	r2, #3
 8006e50:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e68:	0f1b      	lsrs	r3, r3, #28
 8006e6a:	f003 0207 	and.w	r2, r3, #7
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006e7a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40023800 	.word	0x40023800

08006e9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d13e      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006eba:	4b23      	ldr	r3, [pc, #140]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d12f      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ed0:	4b1e      	ldr	r3, [pc, #120]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ed2:	617b      	str	r3, [r7, #20]
          break;
 8006ed4:	e02f      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ed6:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ee2:	d108      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ee4:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	e007      	b.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efe:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0c:	099b      	lsrs	r3, r3, #6
 8006f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
 8006f18:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f20:	0f1b      	lsrs	r3, r3, #28
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
          break;
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
          break;
 8006f34:	bf00      	nop
        }
      }
      break;
 8006f36:	bf00      	nop
    }
  }
  return frequency;
 8006f38:	697b      	ldr	r3, [r7, #20]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	00bb8000 	.word	0x00bb8000
 8006f50:	007a1200 	.word	0x007a1200
 8006f54:	00f42400 	.word	0x00f42400

08006f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e041      	b.n	8006fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fa fcd8 	bl	8001934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f000 f95e 	bl	8007258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d001      	beq.n	8007010 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e046      	b.n	800709e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a23      	ldr	r2, [pc, #140]	; (80070ac <HAL_TIM_Base_Start+0xb4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d022      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702a:	d01d      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_TIM_Base_Start+0xb8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d018      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <HAL_TIM_Base_Start+0xbc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d013      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_TIM_Base_Start+0xc0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00e      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <HAL_TIM_Base_Start+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_TIM_Base_Start+0xc8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIM_Base_Start+0x70>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a18      	ldr	r2, [pc, #96]	; (80070c4 <HAL_TIM_Base_Start+0xcc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d111      	bne.n	800708c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b06      	cmp	r3, #6
 8007078:	d010      	beq.n	800709c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	e007      	b.n	800709c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40010400 	.word	0x40010400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40001800 	.word	0x40001800

080070c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0b4      	b.n	800724e <HAL_TIM_ConfigClockSource+0x186>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800710a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711c:	d03e      	beq.n	800719c <HAL_TIM_ConfigClockSource+0xd4>
 800711e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007122:	f200 8087 	bhi.w	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712a:	f000 8086 	beq.w	800723a <HAL_TIM_ConfigClockSource+0x172>
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d87f      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d01a      	beq.n	800716e <HAL_TIM_ConfigClockSource+0xa6>
 8007138:	2b70      	cmp	r3, #112	; 0x70
 800713a:	d87b      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d050      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007140:	2b60      	cmp	r3, #96	; 0x60
 8007142:	d877      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d03c      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007148:	2b50      	cmp	r3, #80	; 0x50
 800714a:	d873      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d058      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x13a>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d86f      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007154:	2b30      	cmp	r3, #48	; 0x30
 8007156:	d064      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007158:	2b30      	cmp	r3, #48	; 0x30
 800715a:	d86b      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d060      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007160:	2b20      	cmp	r3, #32
 8007162:	d867      	bhi.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d05c      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 8007168:	2b10      	cmp	r3, #16
 800716a:	d05a      	beq.n	8007222 <HAL_TIM_ConfigClockSource+0x15a>
 800716c:	e062      	b.n	8007234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6899      	ldr	r1, [r3, #8]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f000 f985 	bl	800748c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	609a      	str	r2, [r3, #8]
      break;
 800719a:	e04f      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6899      	ldr	r1, [r3, #8]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f000 f96e 	bl	800748c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071be:	609a      	str	r2, [r3, #8]
      break;
 80071c0:	e03c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 f8e2 	bl	8007398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2150      	movs	r1, #80	; 0x50
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f93b 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 80071e0:	e02c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6859      	ldr	r1, [r3, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f000 f901 	bl	80073f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2160      	movs	r1, #96	; 0x60
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f92b 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8007200:	e01c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	461a      	mov	r2, r3
 8007210:	f000 f8c2 	bl	8007398 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2140      	movs	r1, #64	; 0x40
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f91b 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8007220:	e00c      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 f912 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8007232:	e003      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	e000      	b.n	800723c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800723a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a40      	ldr	r2, [pc, #256]	; (800736c <TIM_Base_SetConfig+0x114>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d013      	beq.n	8007298 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d00f      	beq.n	8007298 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3d      	ldr	r2, [pc, #244]	; (8007370 <TIM_Base_SetConfig+0x118>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00b      	beq.n	8007298 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <TIM_Base_SetConfig+0x11c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d007      	beq.n	8007298 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a3b      	ldr	r2, [pc, #236]	; (8007378 <TIM_Base_SetConfig+0x120>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d003      	beq.n	8007298 <TIM_Base_SetConfig+0x40>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a3a      	ldr	r2, [pc, #232]	; (800737c <TIM_Base_SetConfig+0x124>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d108      	bne.n	80072aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2f      	ldr	r2, [pc, #188]	; (800736c <TIM_Base_SetConfig+0x114>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d02b      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d027      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2c      	ldr	r2, [pc, #176]	; (8007370 <TIM_Base_SetConfig+0x118>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d023      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a2b      	ldr	r2, [pc, #172]	; (8007374 <TIM_Base_SetConfig+0x11c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01f      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2a      	ldr	r2, [pc, #168]	; (8007378 <TIM_Base_SetConfig+0x120>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01b      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a29      	ldr	r2, [pc, #164]	; (800737c <TIM_Base_SetConfig+0x124>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d017      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a28      	ldr	r2, [pc, #160]	; (8007380 <TIM_Base_SetConfig+0x128>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a27      	ldr	r2, [pc, #156]	; (8007384 <TIM_Base_SetConfig+0x12c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a26      	ldr	r2, [pc, #152]	; (8007388 <TIM_Base_SetConfig+0x130>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00b      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a25      	ldr	r2, [pc, #148]	; (800738c <TIM_Base_SetConfig+0x134>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a24      	ldr	r2, [pc, #144]	; (8007390 <TIM_Base_SetConfig+0x138>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a23      	ldr	r2, [pc, #140]	; (8007394 <TIM_Base_SetConfig+0x13c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d108      	bne.n	800731c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0a      	ldr	r2, [pc, #40]	; (800736c <TIM_Base_SetConfig+0x114>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_Base_SetConfig+0xf8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0c      	ldr	r2, [pc, #48]	; (800737c <TIM_Base_SetConfig+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d103      	bne.n	8007358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	615a      	str	r2, [r3, #20]
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	40010000 	.word	0x40010000
 8007370:	40000400 	.word	0x40000400
 8007374:	40000800 	.word	0x40000800
 8007378:	40000c00 	.word	0x40000c00
 800737c:	40010400 	.word	0x40010400
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800
 800738c:	40001800 	.word	0x40001800
 8007390:	40001c00 	.word	0x40001c00
 8007394:	40002000 	.word	0x40002000

08007398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 030a 	bic.w	r3, r3, #10
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0210 	bic.w	r2, r3, #16
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	f043 0307 	orr.w	r3, r3, #7
 8007478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	609a      	str	r2, [r3, #8]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e05a      	b.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d022      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d01d      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d018      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1b      	ldr	r2, [pc, #108]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a17      	ldr	r2, [pc, #92]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10c      	bne.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4313      	orrs	r3, r2
 800757e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40001800 	.word	0x40001800

080075c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075c4:	b084      	sub	sp, #16
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	f107 001c 	add.w	r0, r7, #28
 80075d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d122      	bne.n	8007622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d105      	bne.n	8007616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9c0 	bl	800799c <USB_CoreReset>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
 8007620:	e01a      	b.n	8007658 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9b4 	bl	800799c <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
 800764a:	e005      	b.n	8007658 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b01      	cmp	r3, #1
 800765c:	d10b      	bne.n	8007676 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f043 0206 	orr.w	r2, r3, #6
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f043 0220 	orr.w	r2, r3, #32
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007682:	b004      	add	sp, #16
 8007684:	4770      	bx	lr

08007686 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f043 0201 	orr.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f023 0201 	bic.w	r2, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d115      	bne.n	8007718 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076f8:	2001      	movs	r0, #1
 80076fa:	f7fa fa7b 	bl	8001bf4 <HAL_Delay>
      ms++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f93a 	bl	800797e <USB_GetMode>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d01e      	beq.n	800774e <USB_SetCurrentMode+0x84>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b31      	cmp	r3, #49	; 0x31
 8007714:	d9f0      	bls.n	80076f8 <USB_SetCurrentMode+0x2e>
 8007716:	e01a      	b.n	800774e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d115      	bne.n	800774a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800772a:	2001      	movs	r0, #1
 800772c:	f7fa fa62 	bl	8001bf4 <HAL_Delay>
      ms++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f921 	bl	800797e <USB_GetMode>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <USB_SetCurrentMode+0x84>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b31      	cmp	r3, #49	; 0x31
 8007746:	d9f0      	bls.n	800772a <USB_SetCurrentMode+0x60>
 8007748:	e001      	b.n	800774e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e005      	b.n	800775a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b32      	cmp	r3, #50	; 0x32
 8007752:	d101      	bne.n	8007758 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <USB_FlushTxFifo+0x64>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d901      	bls.n	8007784 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e01b      	b.n	80077bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	daf2      	bge.n	8007772 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	019b      	lsls	r3, r3, #6
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <USB_FlushTxFifo+0x64>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e006      	b.n	80077bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d0f0      	beq.n	800779c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	00030d40 	.word	0x00030d40

080077cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4a11      	ldr	r2, [pc, #68]	; (8007828 <USB_FlushRxFifo+0x5c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e018      	b.n	800781c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	daf2      	bge.n	80077d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2210      	movs	r2, #16
 80077fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4a08      	ldr	r2, [pc, #32]	; (8007828 <USB_FlushRxFifo+0x5c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d901      	bls.n	800780e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e006      	b.n	800781c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b10      	cmp	r3, #16
 8007818:	d0f0      	beq.n	80077fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	00030d40 	.word	0x00030d40

0800782c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800782c:	b480      	push	{r7}
 800782e:	b089      	sub	sp, #36	; 0x24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	460b      	mov	r3, r1
 800783c:	71fb      	strb	r3, [r7, #7]
 800783e:	4613      	mov	r3, r2
 8007840:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800784a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d123      	bne.n	800789a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007852:	88bb      	ldrh	r3, [r7, #4]
 8007854:	3303      	adds	r3, #3
 8007856:	089b      	lsrs	r3, r3, #2
 8007858:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800785a:	2300      	movs	r3, #0
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e018      	b.n	8007892 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	031a      	lsls	r2, r3, #12
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786c:	461a      	mov	r2, r3
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3301      	adds	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3301      	adds	r3, #1
 800787e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	3301      	adds	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	3301      	adds	r3, #1
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	429a      	cmp	r2, r3
 8007898:	d3e2      	bcc.n	8007860 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3724      	adds	r7, #36	; 0x24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b08b      	sub	sp, #44	; 0x2c
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078be:	88fb      	ldrh	r3, [r7, #6]
 80078c0:	089b      	lsrs	r3, r3, #2
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078c6:	88fb      	ldrh	r3, [r7, #6]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	e014      	b.n	80078fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	601a      	str	r2, [r3, #0]
    pDest++;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	3301      	adds	r3, #1
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	3301      	adds	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	3301      	adds	r3, #1
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	3301      	adds	r3, #1
 80078fc:	623b      	str	r3, [r7, #32]
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	429a      	cmp	r2, r3
 8007904:	d3e6      	bcc.n	80078d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007906:	8bfb      	ldrh	r3, [r7, #30]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01e      	beq.n	800794a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007916:	461a      	mov	r2, r3
 8007918:	f107 0310 	add.w	r3, r7, #16
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	fa22 f303 	lsr.w	r3, r2, r3
 800792c:	b2da      	uxtb	r2, r3
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	701a      	strb	r2, [r3, #0]
      i++;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	3301      	adds	r3, #1
 8007936:	623b      	str	r3, [r7, #32]
      pDest++;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800793e:	8bfb      	ldrh	r3, [r7, #30]
 8007940:	3b01      	subs	r3, #1
 8007942:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007944:	8bfb      	ldrh	r3, [r7, #30]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1ea      	bne.n	8007920 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800794c:	4618      	mov	r0, r3
 800794e:	372c      	adds	r7, #44	; 0x2c
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4013      	ands	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007970:	68fb      	ldr	r3, [r7, #12]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0301 	and.w	r3, r3, #1
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <USB_CoreReset+0x64>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e01b      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	daf2      	bge.n	80079a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f043 0201 	orr.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <USB_CoreReset+0x64>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d901      	bls.n	80079e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e006      	b.n	80079f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d0f0      	beq.n	80079d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	00030d40 	.word	0x00030d40

08007a04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a04:	b084      	sub	sp, #16
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d018      	beq.n	8007a8c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d10a      	bne.n	8007a76 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a6e:	f043 0304 	orr.w	r3, r3, #4
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	e014      	b.n	8007aa0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a84:	f023 0304 	bic.w	r3, r3, #4
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e009      	b.n	8007aa0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a9a:	f023 0304 	bic.w	r3, r3, #4
 8007a9e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aa0:	2110      	movs	r1, #16
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fe5e 	bl	8007764 <USB_FlushTxFifo>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fe8a 	bl	80077cc <USB_FlushRxFifo>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	e015      	b.n	8007af4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ada:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2300      	movs	r3, #0
 8007aec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d3e5      	bcc.n	8007ac8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f04f 32ff 	mov.w	r2, #4294967295
 8007b08:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00b      	beq.n	8007b2e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <USB_HostInit+0x16c>)
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a13      	ldr	r2, [pc, #76]	; (8007b74 <USB_HostInit+0x170>)
 8007b28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b2c:	e009      	b.n	8007b42 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2280      	movs	r2, #128	; 0x80
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <USB_HostInit+0x174>)
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a0f      	ldr	r2, [pc, #60]	; (8007b7c <USB_HostInit+0x178>)
 8007b3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f043 0210 	orr.w	r2, r3, #16
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <USB_HostInit+0x17c>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b6c:	b004      	add	sp, #16
 8007b6e:	4770      	bx	lr
 8007b70:	01000200 	.word	0x01000200
 8007b74:	00e00300 	.word	0x00e00300
 8007b78:	00600080 	.word	0x00600080
 8007b7c:	004000e0 	.word	0x004000e0
 8007b80:	a3200008 	.word	0xa3200008

08007b84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d107      	bne.n	8007bd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bd2:	6053      	str	r3, [r2, #4]
 8007bd4:	e009      	b.n	8007bea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d106      	bne.n	8007bea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007be2:	461a      	mov	r2, r3
 8007be4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007be8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c26:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c28:	2064      	movs	r0, #100	; 0x64
 8007c2a:	f7f9 ffe3 	bl	8001bf4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c3c:	200a      	movs	r0, #10
 8007c3e:	f7f9 ffd9 	bl	8001bf4 <HAL_Delay>

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d109      	bne.n	8007c90 <USB_DriveVbus+0x44>
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d106      	bne.n	8007c90 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c8e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9a:	d109      	bne.n	8007cb0 <USB_DriveVbus+0x64>
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	0c5b      	lsrs	r3, r3, #17
 8007cdc:	f003 0303 	and.w	r3, r3, #3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	b29b      	uxth	r3, r3
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	70fb      	strb	r3, [r7, #3]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70bb      	strb	r3, [r7, #2]
 8007d26:	4613      	mov	r3, r2
 8007d28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d87e      	bhi.n	8007e4c <USB_HC_Init+0x13c>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <USB_HC_Init+0x44>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d65 	.word	0x08007d65
 8007d58:	08007e0f 	.word	0x08007e0f
 8007d5c:	08007d65 	.word	0x08007d65
 8007d60:	08007dd1 	.word	0x08007dd1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d70:	461a      	mov	r2, r3
 8007d72:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da10      	bge.n	8007da2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	0151      	lsls	r1, r2, #5
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	440a      	add	r2, r1
 8007d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007da0:	e057      	b.n	8007e52 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d051      	beq.n	8007e52 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dcc:	60d3      	str	r3, [r2, #12]
      break;
 8007dce:	e040      	b.n	8007e52 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ddc:	461a      	mov	r2, r3
 8007dde:	f240 639d 	movw	r3, #1693	; 0x69d
 8007de2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	da34      	bge.n	8007e56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007e0c:	e023      	b.n	8007e56 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f240 2325 	movw	r3, #549	; 0x225
 8007e20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da17      	bge.n	8007e5a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e44:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e4a:	e006      	b.n	8007e5a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	77fb      	strb	r3, [r7, #31]
      break;
 8007e50:	e004      	b.n	8007e5c <USB_HC_Init+0x14c>
      break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <USB_HC_Init+0x14c>
      break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <USB_HC_Init+0x14c>
      break;
 8007e5a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e76:	f043 0302 	orr.w	r3, r3, #2
 8007e7a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e90:	6939      	ldr	r1, [r7, #16]
 8007e92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e96:	4313      	orrs	r3, r2
 8007e98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ea6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da03      	bge.n	8007eb6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb2:	61bb      	str	r3, [r7, #24]
 8007eb4:	e001      	b.n	8007eba <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff feff 	bl	8007cbe <USB_GetHostSpeed>
 8007ec0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d106      	bne.n	8007ed8 <USB_HC_Init+0x1c8>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d003      	beq.n	8007ed8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e001      	b.n	8007edc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007edc:	787b      	ldrb	r3, [r7, #1]
 8007ede:	059b      	lsls	r3, r3, #22
 8007ee0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ee4:	78bb      	ldrb	r3, [r7, #2]
 8007ee6:	02db      	lsls	r3, r3, #11
 8007ee8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007eec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ef2:	049b      	lsls	r3, r3, #18
 8007ef4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ef8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007efa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	0159      	lsls	r1, r3, #5
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	440b      	add	r3, r1
 8007f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f12:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f18:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d003      	beq.n	8007f2a <USB_HC_Init+0x21a>
 8007f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d10f      	bne.n	8007f4a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f48:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08c      	sub	sp, #48	; 0x30
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f70:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d02d      	beq.n	8007fda <USB_HC_StartXfer+0x86>
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d129      	bne.n	8007fda <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d117      	bne.n	8007fbc <USB_HC_StartXfer+0x68>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	79db      	ldrb	r3, [r3, #7]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <USB_HC_StartXfer+0x48>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	79db      	ldrb	r3, [r3, #7]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d10f      	bne.n	8007fbc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fba:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <USB_HC_StartXfer+0x86>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	795b      	ldrb	r3, [r3, #5]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d107      	bne.n	8007fda <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fa0f 	bl	80083f4 <USB_DoPing>
      return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e0f8      	b.n	80081cc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	8912      	ldrh	r2, [r2, #8]
 8007fea:	4413      	add	r3, r2
 8007fec:	3b01      	subs	r3, #1
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	8912      	ldrh	r2, [r2, #8]
 8007ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007ff8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007ffa:	8b7b      	ldrh	r3, [r7, #26]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d90b      	bls.n	8008018 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008000:	8b7b      	ldrh	r3, [r7, #26]
 8008002:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	8912      	ldrh	r2, [r2, #8]
 800800a:	fb03 f202 	mul.w	r2, r3, r2
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	611a      	str	r2, [r3, #16]
 8008012:	e001      	b.n	8008018 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008014:	2301      	movs	r3, #1
 8008016:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	78db      	ldrb	r3, [r3, #3]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	8912      	ldrh	r2, [r2, #8]
 8008026:	fb03 f202 	mul.w	r2, r3, r2
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	611a      	str	r2, [r3, #16]
 800802e:	e003      	b.n	8008038 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	695a      	ldr	r2, [r3, #20]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008042:	04d9      	lsls	r1, r3, #19
 8008044:	4b63      	ldr	r3, [pc, #396]	; (80081d4 <USB_HC_StartXfer+0x280>)
 8008046:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008048:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7a9b      	ldrb	r3, [r3, #10]
 800804e:	075b      	lsls	r3, r3, #29
 8008050:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	0148      	lsls	r0, r1, #5
 8008058:	6a39      	ldr	r1, [r7, #32]
 800805a:	4401      	add	r1, r0
 800805c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008060:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008062:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	68d9      	ldr	r1, [r3, #12]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	4413      	add	r3, r2
 8008076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807a:	460a      	mov	r2, r1
 800807c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	bf0c      	ite	eq
 800808e:	2301      	moveq	r3, #1
 8008090:	2300      	movne	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	7e7b      	ldrb	r3, [r7, #25]
 80080c6:	075b      	lsls	r3, r3, #29
 80080c8:	69f9      	ldr	r1, [r7, #28]
 80080ca:	0148      	lsls	r0, r1, #5
 80080cc:	6a39      	ldr	r1, [r7, #32]
 80080ce:	4401      	add	r1, r0
 80080d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80080d4:	4313      	orrs	r3, r2
 80080d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080ee:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	e003      	b.n	800810a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008108:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008110:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	4413      	add	r3, r2
 800811a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811e:	461a      	mov	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e04e      	b.n	80081cc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	78db      	ldrb	r3, [r3, #3]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d149      	bne.n	80081ca <USB_HC_StartXfer+0x276>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d045      	beq.n	80081ca <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	79db      	ldrb	r3, [r3, #7]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d830      	bhi.n	80081a8 <USB_HC_StartXfer+0x254>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <USB_HC_StartXfer+0x1f8>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	0800815d 	.word	0x0800815d
 8008150:	08008181 	.word	0x08008181
 8008154:	0800815d 	.word	0x0800815d
 8008158:	08008181 	.word	0x08008181
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	3303      	adds	r3, #3
 8008162:	089b      	lsrs	r3, r3, #2
 8008164:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008166:	8afa      	ldrh	r2, [r7, #22]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	b29b      	uxth	r3, r3
 800816e:	429a      	cmp	r2, r3
 8008170:	d91c      	bls.n	80081ac <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f043 0220 	orr.w	r2, r3, #32
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	619a      	str	r2, [r3, #24]
        }
        break;
 800817e:	e015      	b.n	80081ac <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	3303      	adds	r3, #3
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800818a:	8afa      	ldrh	r2, [r7, #22]
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	b29b      	uxth	r3, r3
 8008196:	429a      	cmp	r2, r3
 8008198:	d90a      	bls.n	80081b0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80081a6:	e003      	b.n	80081b0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80081a8:	bf00      	nop
 80081aa:	e002      	b.n	80081b2 <USB_HC_StartXfer+0x25e>
        break;
 80081ac:	bf00      	nop
 80081ae:	e000      	b.n	80081b2 <USB_HC_StartXfer+0x25e>
        break;
 80081b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	68d9      	ldr	r1, [r3, #12]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	785a      	ldrb	r2, [r3, #1]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2000      	movs	r0, #0
 80081c2:	9000      	str	r0, [sp, #0]
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fb31 	bl	800782c <USB_WritePacket>
  }

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3728      	adds	r7, #40	; 0x28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	1ff80000 	.word	0x1ff80000

080081d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	b29b      	uxth	r3, r3
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b089      	sub	sp, #36	; 0x24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	0c9b      	lsrs	r3, r3, #18
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	0fdb      	lsrs	r3, r3, #31
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b20      	cmp	r3, #32
 8008248:	d104      	bne.n	8008254 <USB_HC_Halt+0x5a>
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e0c8      	b.n	80083e6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <USB_HC_Halt+0x66>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d163      	bne.n	8008328 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	440a      	add	r2, r1
 8008276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800827a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800827e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0320 	and.w	r3, r3, #32
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 80ab 	bne.w	80083e4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d133      	bne.n	8008302 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082d8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e6:	d81d      	bhi.n	8008324 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082fe:	d0ec      	beq.n	80082da <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008300:	e070      	b.n	80083e4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	015a      	lsls	r2, r3, #5
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	4413      	add	r3, r2
 800830a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	0151      	lsls	r1, r2, #5
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	440a      	add	r2, r1
 8008318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800831c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008320:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008322:	e05f      	b.n	80083e4 <USB_HC_Halt+0x1ea>
            break;
 8008324:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008326:	e05d      	b.n	80083e4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	4413      	add	r3, r2
 8008330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	0151      	lsls	r1, r2, #5
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	440a      	add	r2, r1
 800833e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008346:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d133      	bne.n	80083c0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	440a      	add	r2, r1
 800836e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008372:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008376:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	440a      	add	r2, r1
 800838e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008396:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
 800839c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a4:	d81d      	bhi.n	80083e2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083bc:	d0ec      	beq.n	8008398 <USB_HC_Halt+0x19e>
 80083be:	e011      	b.n	80083e4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083de:	6013      	str	r3, [r2, #0]
 80083e0:	e000      	b.n	80083e4 <USB_HC_Halt+0x1ea>
          break;
 80083e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3724      	adds	r7, #36	; 0x24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008408:	2301      	movs	r3, #1
 800840a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	04da      	lsls	r2, r3, #19
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <USB_DoPing+0x74>)
 8008412:	4013      	ands	r3, r2
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	440a      	add	r2, r1
 800841c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008424:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800843c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008444:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008452:	461a      	mov	r2, r3
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	1ff80000 	.word	0x1ff80000

0800846c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff f911 	bl	80076a8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008486:	2110      	movs	r1, #16
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff f96b 	bl	8007764 <USB_FlushTxFifo>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff f997 	bl	80077cc <USB_FlushRxFifo>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]
 80084ac:	e01f      	b.n	80084ee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e2:	461a      	mov	r2, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61bb      	str	r3, [r7, #24]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b0f      	cmp	r3, #15
 80084f2:	d9dc      	bls.n	80084ae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	e034      	b.n	8008564 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008510:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008518:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008520:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	461a      	mov	r2, r3
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	3301      	adds	r3, #1
 8008538:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008540:	d80c      	bhi.n	800855c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008558:	d0ec      	beq.n	8008534 <USB_StopHost+0xc8>
 800855a:	e000      	b.n	800855e <USB_StopHost+0xf2>
        break;
 800855c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3301      	adds	r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2b0f      	cmp	r3, #15
 8008568:	d9c7      	bls.n	80084fa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008570:	461a      	mov	r2, r3
 8008572:	f04f 33ff 	mov.w	r3, #4294967295
 8008576:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f04f 32ff 	mov.w	r2, #4294967295
 800857e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff f880 	bl	8007686 <USB_EnableGlobalInt>

  return ret;
 8008586:	7ffb      	ldrb	r3, [r7, #31]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3720      	adds	r7, #32
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008594:	4904      	ldr	r1, [pc, #16]	; (80085a8 <MX_FATFS_Init+0x18>)
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <MX_FATFS_Init+0x1c>)
 8008598:	f005 fc98 	bl	800decc <FATFS_LinkDriver>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	4b03      	ldr	r3, [pc, #12]	; (80085b0 <MX_FATFS_Init+0x20>)
 80085a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085a4:	bf00      	nop
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200014c4 	.word	0x200014c4
 80085ac:	0800efac 	.word	0x0800efac
 80085b0:	200014c0 	.word	0x200014c0

080085b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80085b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	4619      	mov	r1, r3
 80085ee:	4808      	ldr	r0, [pc, #32]	; (8008610 <USBH_status+0x34>)
 80085f0:	f000 fe32 	bl	8009258 <USBH_MSC_UnitIsReady>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <USBH_status+0x24>
  {
    res = RES_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
 80085fe:	e001      	b.n	8008604 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2000172c 	.word	0x2000172c

08008614 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b094      	sub	sp, #80	; 0x50
 8008618:	af02      	add	r7, sp, #8
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800862a:	7bf9      	ldrb	r1, [r7, #15]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4813      	ldr	r0, [pc, #76]	; (8008684 <USBH_read+0x70>)
 8008636:	f000 fe59 	bl	80092ec <USBH_MSC_Read>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d103      	bne.n	8008648 <USBH_read+0x34>
  {
    res = RES_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008646:	e017      	b.n	8008678 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008648:	f107 0210 	add.w	r2, r7, #16
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4619      	mov	r1, r3
 8008650:	480c      	ldr	r0, [pc, #48]	; (8008684 <USBH_read+0x70>)
 8008652:	f000 fe27 	bl	80092a4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008656:	7f7b      	ldrb	r3, [r7, #29]
 8008658:	2b3a      	cmp	r3, #58	; 0x3a
 800865a:	d005      	beq.n	8008668 <USBH_read+0x54>
 800865c:	2b3a      	cmp	r3, #58	; 0x3a
 800865e:	dc07      	bgt.n	8008670 <USBH_read+0x5c>
 8008660:	2b04      	cmp	r3, #4
 8008662:	d001      	beq.n	8008668 <USBH_read+0x54>
 8008664:	2b28      	cmp	r3, #40	; 0x28
 8008666:	d103      	bne.n	8008670 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008668:	2303      	movs	r3, #3
 800866a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800866e:	e003      	b.n	8008678 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008676:	bf00      	nop
    }
  }

  return res;
 8008678:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800867c:	4618      	mov	r0, r3
 800867e:	3748      	adds	r7, #72	; 0x48
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	2000172c 	.word	0x2000172c

08008688 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b094      	sub	sp, #80	; 0x50
 800868c:	af02      	add	r7, sp, #8
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800869e:	7bf9      	ldrb	r1, [r7, #15]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4817      	ldr	r0, [pc, #92]	; (8008708 <USBH_write+0x80>)
 80086aa:	f000 fe88 	bl	80093be <USBH_MSC_Write>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d103      	bne.n	80086bc <USBH_write+0x34>
  {
    res = RES_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086ba:	e01f      	b.n	80086fc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80086bc:	f107 0210 	add.w	r2, r7, #16
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4810      	ldr	r0, [pc, #64]	; (8008708 <USBH_write+0x80>)
 80086c6:	f000 fded 	bl	80092a4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80086ca:	7f7b      	ldrb	r3, [r7, #29]
 80086cc:	2b3a      	cmp	r3, #58	; 0x3a
 80086ce:	d00d      	beq.n	80086ec <USBH_write+0x64>
 80086d0:	2b3a      	cmp	r3, #58	; 0x3a
 80086d2:	dc0f      	bgt.n	80086f4 <USBH_write+0x6c>
 80086d4:	2b28      	cmp	r3, #40	; 0x28
 80086d6:	d009      	beq.n	80086ec <USBH_write+0x64>
 80086d8:	2b28      	cmp	r3, #40	; 0x28
 80086da:	dc0b      	bgt.n	80086f4 <USBH_write+0x6c>
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d005      	beq.n	80086ec <USBH_write+0x64>
 80086e0:	2b27      	cmp	r3, #39	; 0x27
 80086e2:	d107      	bne.n	80086f4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80086e4:	2302      	movs	r3, #2
 80086e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086ea:	e007      	b.n	80086fc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80086ec:	2303      	movs	r3, #3
 80086ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086f2:	e003      	b.n	80086fc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086fa:	bf00      	nop
    }
  }

  return res;
 80086fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008700:	4618      	mov	r0, r3
 8008702:	3748      	adds	r7, #72	; 0x48
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	2000172c 	.word	0x2000172c

0800870c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b090      	sub	sp, #64	; 0x40
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	603a      	str	r2, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
 8008718:	460b      	mov	r3, r1
 800871a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008722:	79bb      	ldrb	r3, [r7, #6]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d852      	bhi.n	80087ce <USBH_ioctl+0xc2>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <USBH_ioctl+0x24>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008741 	.word	0x08008741
 8008734:	08008749 	.word	0x08008749
 8008738:	08008773 	.word	0x08008773
 800873c:	0800879f 	.word	0x0800879f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008746:	e045      	b.n	80087d4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008748:	f107 0208 	add.w	r2, r7, #8
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	4619      	mov	r1, r3
 8008750:	4823      	ldr	r0, [pc, #140]	; (80087e0 <USBH_ioctl+0xd4>)
 8008752:	f000 fda7 	bl	80092a4 <USBH_MSC_GetLUNInfo>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d106      	bne.n	800876a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008768:	e034      	b.n	80087d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008770:	e030      	b.n	80087d4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008772:	f107 0208 	add.w	r2, r7, #8
 8008776:	79fb      	ldrb	r3, [r7, #7]
 8008778:	4619      	mov	r1, r3
 800877a:	4819      	ldr	r0, [pc, #100]	; (80087e0 <USBH_ioctl+0xd4>)
 800877c:	f000 fd92 	bl	80092a4 <USBH_MSC_GetLUNInfo>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d107      	bne.n	8008796 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008786:	8a3b      	ldrh	r3, [r7, #16]
 8008788:	461a      	mov	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008794:	e01e      	b.n	80087d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800879c:	e01a      	b.n	80087d4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800879e:	f107 0208 	add.w	r2, r7, #8
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4619      	mov	r1, r3
 80087a6:	480e      	ldr	r0, [pc, #56]	; (80087e0 <USBH_ioctl+0xd4>)
 80087a8:	f000 fd7c 	bl	80092a4 <USBH_MSC_GetLUNInfo>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80087b2:	8a3b      	ldrh	r3, [r7, #16]
 80087b4:	0a5b      	lsrs	r3, r3, #9
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80087c4:	e006      	b.n	80087d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80087cc:	e002      	b.n	80087d4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80087ce:	2304      	movs	r3, #4
 80087d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80087d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3740      	adds	r7, #64	; 0x40
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	2000172c 	.word	0x2000172c

080087e4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087e4:	b590      	push	{r4, r7, lr}
 80087e6:	b089      	sub	sp, #36	; 0x24
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f2:	7919      	ldrb	r1, [r3, #4]
 80087f4:	2350      	movs	r3, #80	; 0x50
 80087f6:	2206      	movs	r2, #6
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fc6b 	bl	800a0d4 <USBH_FindInterface>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2bff      	cmp	r3, #255	; 0xff
 8008806:	d002      	beq.n	800880e <USBH_MSC_InterfaceInit+0x2a>
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d901      	bls.n	8008812 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800880e:	2302      	movs	r3, #2
 8008810:	e106      	b.n	8008a20 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 fc40 	bl	800a09c <USBH_SelectInterface>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008826:	2302      	movs	r3, #2
 8008828:	e0fa      	b.n	8008a20 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008834:	f005 fe96 	bl	800e564 <malloc>
 8008838:	4603      	mov	r3, r0
 800883a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	e0e7      	b.n	8008a20 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008854:	2100      	movs	r1, #0
 8008856:	68b8      	ldr	r0, [r7, #8]
 8008858:	f005 fea2 	bl	800e5a0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	211a      	movs	r1, #26
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	4413      	add	r3, r2
 8008868:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	b25b      	sxtb	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	da16      	bge.n	80088a2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	211a      	movs	r1, #26
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	211a      	movs	r1, #26
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	815a      	strh	r2, [r3, #10]
 80088a0:	e015      	b.n	80088ce <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	211a      	movs	r1, #26
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	211a      	movs	r1, #26
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088c8:	881a      	ldrh	r2, [r3, #0]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	211a      	movs	r1, #26
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da16      	bge.n	8008914 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	211a      	movs	r1, #26
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	211a      	movs	r1, #26
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800890c:	881a      	ldrh	r2, [r3, #0]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	815a      	strh	r2, [r3, #10]
 8008912:	e015      	b.n	8008940 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	211a      	movs	r1, #26
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	211a      	movs	r1, #26
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800893a:	881a      	ldrh	r2, [r3, #0]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2200      	movs	r2, #0
 8008944:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2200      	movs	r2, #0
 8008950:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	799b      	ldrb	r3, [r3, #6]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f002 fed6 	bl	800b70a <USBH_AllocPipe>
 800895e:	4603      	mov	r3, r0
 8008960:	461a      	mov	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	79db      	ldrb	r3, [r3, #7]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f002 fecc 	bl	800b70a <USBH_AllocPipe>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fdc4 	bl	8009508 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	799b      	ldrb	r3, [r3, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01e      	beq.n	80089c6 <USBH_MSC_InterfaceInit+0x1e2>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	891b      	ldrh	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01a      	beq.n	80089c6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	7959      	ldrb	r1, [r3, #5]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	7998      	ldrb	r0, [r3, #6]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	8912      	ldrh	r2, [r2, #8]
 80089a8:	9202      	str	r2, [sp, #8]
 80089aa:	2202      	movs	r2, #2
 80089ac:	9201      	str	r2, [sp, #4]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	4623      	mov	r3, r4
 80089b2:	4602      	mov	r2, r0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f002 fe79 	bl	800b6ac <USBH_OpenPipe>
 80089ba:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	79db      	ldrb	r3, [r3, #7]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02c      	beq.n	8008a1e <USBH_MSC_InterfaceInit+0x23a>
 80089c4:	e001      	b.n	80089ca <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e02a      	b.n	8008a20 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	895b      	ldrh	r3, [r3, #10]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d025      	beq.n	8008a1e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	7919      	ldrb	r1, [r3, #4]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	79d8      	ldrb	r0, [r3, #7]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	8952      	ldrh	r2, [r2, #10]
 80089ea:	9202      	str	r2, [sp, #8]
 80089ec:	2202      	movs	r2, #2
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4623      	mov	r3, r4
 80089f4:	4602      	mov	r2, r0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f002 fe58 	bl	800b6ac <USBH_OpenPipe>
 80089fc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f005 fceb 	bl	800e3e2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	795b      	ldrb	r3, [r3, #5]
 8008a10:	2200      	movs	r2, #0
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f005 fce4 	bl	800e3e2 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e000      	b.n	8008a20 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008a1e:	2303      	movs	r3, #3
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd90      	pop	{r4, r7, pc}

08008a28 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	795b      	ldrb	r3, [r3, #5]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00e      	beq.n	8008a60 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	795b      	ldrb	r3, [r3, #5]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 fe4e 	bl	800b6ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	795b      	ldrb	r3, [r3, #5]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f002 fe79 	bl	800b74c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00e      	beq.n	8008a86 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	791b      	ldrb	r3, [r3, #4]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f002 fe3b 	bl	800b6ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	791b      	ldrb	r3, [r3, #4]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 fe66 	bl	800b74c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00b      	beq.n	8008aaa <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f005 fd6a 	bl	800e574 <free>
    phost->pActiveClass->pData = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	7b9b      	ldrb	r3, [r3, #14]
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d041      	beq.n	8008b56 <USBH_MSC_ClassRequest+0xa2>
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	dc4b      	bgt.n	8008b6e <USBH_MSC_ClassRequest+0xba>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <USBH_MSC_ClassRequest+0x2a>
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d147      	bne.n	8008b6e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fcf1 	bl	80094ca <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d104      	bne.n	8008afc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d137      	bne.n	8008b72 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d804      	bhi.n	8008b14 <USBH_MSC_ClassRequest+0x60>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	e000      	b.n	8008b16 <USBH_MSC_ClassRequest+0x62>
 8008b14:	2202      	movs	r2, #2
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73bb      	strb	r3, [r7, #14]
 8008b1e:	e014      	b.n	8008b4a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	2134      	movs	r1, #52	; 0x34
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	3392      	adds	r3, #146	; 0x92
 8008b2e:	2202      	movs	r2, #2
 8008b30:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	2134      	movs	r1, #52	; 0x34
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	33c1      	adds	r3, #193	; 0xc1
 8008b40:	2200      	movs	r2, #0
 8008b42:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	3301      	adds	r3, #1
 8008b48:	73bb      	strb	r3, [r7, #14]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	7bba      	ldrb	r2, [r7, #14]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d3e5      	bcc.n	8008b20 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008b54:	e00d      	b.n	8008b72 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f002 f888 	bl	800ac6e <USBH_ClrFeature>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7bda      	ldrb	r2, [r3, #15]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008b6c:	e003      	b.n	8008b76 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008b6e:	bf00      	nop
 8008b70:	e002      	b.n	8008b78 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b72:	bf00      	nop
 8008b74:	e000      	b.n	8008b78 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b76:	bf00      	nop
  }

  return status;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008b96:	2301      	movs	r3, #1
 8008b98:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	7b1b      	ldrb	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <USBH_MSC_Process+0x2e>
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	f000 8271 	beq.w	8009092 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008bb0:	e272      	b.n	8009098 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	f080 824f 	bcs.w	8009062 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bca:	4619      	mov	r1, r3
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	2334      	movs	r3, #52	; 0x34
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3391      	adds	r3, #145	; 0x91
 8008bd8:	2201      	movs	r2, #1
 8008bda:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008be2:	4619      	mov	r1, r3
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	2334      	movs	r3, #52	; 0x34
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	3390      	adds	r3, #144	; 0x90
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	f200 8243 	bhi.w	800907e <USBH_MSC_Process+0x4fa>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBH_MSC_Process+0x7c>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	0800907f 	.word	0x0800907f
 8008c08:	08008ced 	.word	0x08008ced
 8008c0c:	08008e71 	.word	0x08008e71
 8008c10:	08008c4b 	.word	0x08008c4b
 8008c14:	08008f3d 	.word	0x08008f3d
 8008c18:	0800907f 	.word	0x0800907f
 8008c1c:	0800907f 	.word	0x0800907f
 8008c20:	08009051 	.word	0x08009051
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	2334      	movs	r3, #52	; 0x34
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	3390      	adds	r3, #144	; 0x90
 8008c38:	2204      	movs	r2, #4
 8008c3a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008c48:	e222      	b.n	8009090 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c50:	b2d9      	uxtb	r1, r3
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2334      	movs	r3, #52	; 0x34
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	3398      	adds	r3, #152	; 0x98
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	3307      	adds	r3, #7
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 ff6a 	bl	8009b44 <USBH_MSC_SCSI_Inquiry>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c80:	4619      	mov	r1, r3
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	2334      	movs	r3, #52	; 0x34
 8008c86:	fb01 f303 	mul.w	r3, r1, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	3390      	adds	r3, #144	; 0x90
 8008c8e:	2202      	movs	r2, #2
 8008c90:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d10c      	bne.n	8008cb2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	2334      	movs	r3, #52	; 0x34
 8008ca4:	fb01 f303 	mul.w	r3, r1, r3
 8008ca8:	4413      	add	r3, r2
 8008caa:	3390      	adds	r3, #144	; 0x90
 8008cac:	2205      	movs	r2, #5
 8008cae:	701a      	strb	r2, [r3, #0]
            break;
 8008cb0:	e1e7      	b.n	8009082 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	f040 81e4 	bne.w	8009082 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	2334      	movs	r3, #52	; 0x34
 8008cc6:	fb01 f303 	mul.w	r3, r1, r3
 8008cca:	4413      	add	r3, r2
 8008ccc:	3390      	adds	r3, #144	; 0x90
 8008cce:	2201      	movs	r2, #1
 8008cd0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cd8:	4619      	mov	r1, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	2334      	movs	r3, #52	; 0x34
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3391      	adds	r3, #145	; 0x91
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
            break;
 8008cea:	e1ca      	b.n	8009082 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fe66 	bl	80099c8 <USBH_MSC_SCSI_TestUnitReady>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d149      	bne.n	8008d9a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	2334      	movs	r3, #52	; 0x34
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	3392      	adds	r3, #146	; 0x92
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00c      	beq.n	8008d3a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d26:	4619      	mov	r1, r3
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	2334      	movs	r3, #52	; 0x34
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	33c1      	adds	r3, #193	; 0xc1
 8008d34:	2201      	movs	r2, #1
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	e00b      	b.n	8008d52 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d40:	4619      	mov	r1, r3
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	2334      	movs	r3, #52	; 0x34
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	33c1      	adds	r3, #193	; 0xc1
 8008d4e:	2200      	movs	r2, #0
 8008d50:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d58:	4619      	mov	r1, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	2334      	movs	r3, #52	; 0x34
 8008d5e:	fb01 f303 	mul.w	r3, r1, r3
 8008d62:	4413      	add	r3, r2
 8008d64:	3390      	adds	r3, #144	; 0x90
 8008d66:	2203      	movs	r2, #3
 8008d68:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d70:	4619      	mov	r1, r3
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	2334      	movs	r3, #52	; 0x34
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3391      	adds	r3, #145	; 0x91
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d88:	4619      	mov	r1, r3
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	2334      	movs	r3, #52	; 0x34
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3392      	adds	r3, #146	; 0x92
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d14a      	bne.n	8008e36 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008da6:	4619      	mov	r1, r3
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	2334      	movs	r3, #52	; 0x34
 8008dac:	fb01 f303 	mul.w	r3, r1, r3
 8008db0:	4413      	add	r3, r2
 8008db2:	3392      	adds	r3, #146	; 0x92
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d00c      	beq.n	8008dd4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	2334      	movs	r3, #52	; 0x34
 8008dc6:	fb01 f303 	mul.w	r3, r1, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	33c1      	adds	r3, #193	; 0xc1
 8008dce:	2201      	movs	r2, #1
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e00b      	b.n	8008dec <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dda:	4619      	mov	r1, r3
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	2334      	movs	r3, #52	; 0x34
 8008de0:	fb01 f303 	mul.w	r3, r1, r3
 8008de4:	4413      	add	r3, r2
 8008de6:	33c1      	adds	r3, #193	; 0xc1
 8008de8:	2200      	movs	r2, #0
 8008dea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df2:	4619      	mov	r1, r3
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	2334      	movs	r3, #52	; 0x34
 8008df8:	fb01 f303 	mul.w	r3, r1, r3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	3390      	adds	r3, #144	; 0x90
 8008e00:	2205      	movs	r2, #5
 8008e02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	2334      	movs	r3, #52	; 0x34
 8008e10:	fb01 f303 	mul.w	r3, r1, r3
 8008e14:	4413      	add	r3, r2
 8008e16:	3391      	adds	r3, #145	; 0x91
 8008e18:	2201      	movs	r2, #1
 8008e1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e22:	4619      	mov	r1, r3
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	2334      	movs	r3, #52	; 0x34
 8008e28:	fb01 f303 	mul.w	r3, r1, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3392      	adds	r3, #146	; 0x92
 8008e30:	2202      	movs	r2, #2
 8008e32:	701a      	strb	r2, [r3, #0]
            break;
 8008e34:	e127      	b.n	8009086 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	f040 8124 	bne.w	8009086 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e44:	4619      	mov	r1, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	2334      	movs	r3, #52	; 0x34
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	3390      	adds	r3, #144	; 0x90
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	2334      	movs	r3, #52	; 0x34
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	3391      	adds	r3, #145	; 0x91
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	701a      	strb	r2, [r3, #0]
            break;
 8008e6e:	e10a      	b.n	8009086 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e76:	b2d9      	uxtb	r1, r3
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2334      	movs	r3, #52	; 0x34
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	3390      	adds	r3, #144	; 0x90
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fddc 	bl	8009a4e <USBH_MSC_SCSI_ReadCapacity>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d120      	bne.n	8008ee2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	2334      	movs	r3, #52	; 0x34
 8008eac:	fb01 f303 	mul.w	r3, r1, r3
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3390      	adds	r3, #144	; 0x90
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	2334      	movs	r3, #52	; 0x34
 8008ec4:	fb01 f303 	mul.w	r3, r1, r3
 8008ec8:	4413      	add	r3, r2
 8008eca:	3391      	adds	r3, #145	; 0x91
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008ee0:	e0d3      	b.n	800908a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d10c      	bne.n	8008f02 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	2334      	movs	r3, #52	; 0x34
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	3390      	adds	r3, #144	; 0x90
 8008efc:	2205      	movs	r2, #5
 8008efe:	701a      	strb	r2, [r3, #0]
            break;
 8008f00:	e0c3      	b.n	800908a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	f040 80c0 	bne.w	800908a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f10:	4619      	mov	r1, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	2334      	movs	r3, #52	; 0x34
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3390      	adds	r3, #144	; 0x90
 8008f1e:	2201      	movs	r2, #1
 8008f20:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	2334      	movs	r3, #52	; 0x34
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	3391      	adds	r3, #145	; 0x91
 8008f36:	2202      	movs	r2, #2
 8008f38:	701a      	strb	r2, [r3, #0]
            break;
 8008f3a:	e0a6      	b.n	800908a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f42:	b2d9      	uxtb	r1, r3
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2334      	movs	r3, #52	; 0x34
 8008f4e:	fb02 f303 	mul.w	r3, r2, r3
 8008f52:	3398      	adds	r3, #152	; 0x98
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	3304      	adds	r3, #4
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fe96 	bl	8009c8e <USBH_MSC_SCSI_RequestSense>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d145      	bne.n	8008ff8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f72:	4619      	mov	r1, r3
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	2334      	movs	r3, #52	; 0x34
 8008f78:	fb01 f303 	mul.w	r3, r1, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	339c      	adds	r3, #156	; 0x9c
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b06      	cmp	r3, #6
 8008f84:	d00c      	beq.n	8008fa0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	2334      	movs	r3, #52	; 0x34
 8008f92:	fb01 f303 	mul.w	r3, r1, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	339c      	adds	r3, #156	; 0x9c
 8008f9a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d117      	bne.n	8008fd0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	f242 720f 	movw	r2, #9999	; 0x270f
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d80c      	bhi.n	8008fd0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	2334      	movs	r3, #52	; 0x34
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	3390      	adds	r3, #144	; 0x90
 8008fca:	2202      	movs	r2, #2
 8008fcc:	701a      	strb	r2, [r3, #0]
                  break;
 8008fce:	e05f      	b.n	8009090 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	2334      	movs	r3, #52	; 0x34
 8008fdc:	fb01 f303 	mul.w	r3, r1, r3
 8008fe0:	4413      	add	r3, r2
 8008fe2:	3390      	adds	r3, #144	; 0x90
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d10c      	bne.n	8009018 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009004:	4619      	mov	r1, r3
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	2334      	movs	r3, #52	; 0x34
 800900a:	fb01 f303 	mul.w	r3, r1, r3
 800900e:	4413      	add	r3, r2
 8009010:	3390      	adds	r3, #144	; 0x90
 8009012:	2208      	movs	r2, #8
 8009014:	701a      	strb	r2, [r3, #0]
            break;
 8009016:	e03a      	b.n	800908e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	2b04      	cmp	r3, #4
 800901c:	d137      	bne.n	800908e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009024:	4619      	mov	r1, r3
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	2334      	movs	r3, #52	; 0x34
 800902a:	fb01 f303 	mul.w	r3, r1, r3
 800902e:	4413      	add	r3, r2
 8009030:	3390      	adds	r3, #144	; 0x90
 8009032:	2201      	movs	r2, #1
 8009034:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800903c:	4619      	mov	r1, r3
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	2334      	movs	r3, #52	; 0x34
 8009042:	fb01 f303 	mul.w	r3, r1, r3
 8009046:	4413      	add	r3, r2
 8009048:	3391      	adds	r3, #145	; 0x91
 800904a:	2202      	movs	r2, #2
 800904c:	701a      	strb	r2, [r3, #0]
            break;
 800904e:	e01e      	b.n	800908e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009056:	3301      	adds	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009060:	e016      	b.n	8009090 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2200      	movs	r2, #0
 8009066:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2201      	movs	r2, #1
 800906e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009076:	2102      	movs	r1, #2
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
      break;
 800907c:	e00c      	b.n	8009098 <USBH_MSC_Process+0x514>
            break;
 800907e:	bf00      	nop
 8009080:	e00a      	b.n	8009098 <USBH_MSC_Process+0x514>
            break;
 8009082:	bf00      	nop
 8009084:	e008      	b.n	8009098 <USBH_MSC_Process+0x514>
            break;
 8009086:	bf00      	nop
 8009088:	e006      	b.n	8009098 <USBH_MSC_Process+0x514>
            break;
 800908a:	bf00      	nop
 800908c:	e004      	b.n	8009098 <USBH_MSC_Process+0x514>
            break;
 800908e:	bf00      	nop
      break;
 8009090:	e002      	b.n	8009098 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	75fb      	strb	r3, [r7, #23]
      break;
 8009096:	bf00      	nop
  }
  return error;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b088      	sub	sp, #32
 80090be:	af02      	add	r7, sp, #8
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	460b      	mov	r3, r1
 80090c4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	2134      	movs	r1, #52	; 0x34
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	3390      	adds	r3, #144	; 0x90
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b07      	cmp	r3, #7
 80090ea:	d03c      	beq.n	8009166 <USBH_MSC_RdWrProcess+0xac>
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	f300 80a7 	bgt.w	8009240 <USBH_MSC_RdWrProcess+0x186>
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d06c      	beq.n	80091d0 <USBH_MSC_RdWrProcess+0x116>
 80090f6:	2b06      	cmp	r3, #6
 80090f8:	f040 80a2 	bne.w	8009240 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80090fc:	78f9      	ldrb	r1, [r7, #3]
 80090fe:	2300      	movs	r3, #0
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2300      	movs	r3, #0
 8009104:	2200      	movs	r2, #0
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fea5 	bl	8009e56 <USBH_MSC_SCSI_Read>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	2134      	movs	r1, #52	; 0x34
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	4413      	add	r3, r2
 8009122:	3390      	adds	r3, #144	; 0x90
 8009124:	2201      	movs	r2, #1
 8009126:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800912c:	e08a      	b.n	8009244 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d109      	bne.n	8009148 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	2134      	movs	r1, #52	; 0x34
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	3390      	adds	r3, #144	; 0x90
 8009142:	2205      	movs	r2, #5
 8009144:	701a      	strb	r2, [r3, #0]
      break;
 8009146:	e07d      	b.n	8009244 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	2b04      	cmp	r3, #4
 800914c:	d17a      	bne.n	8009244 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	2134      	movs	r1, #52	; 0x34
 8009154:	fb01 f303 	mul.w	r3, r1, r3
 8009158:	4413      	add	r3, r2
 800915a:	3390      	adds	r3, #144	; 0x90
 800915c:	2208      	movs	r2, #8
 800915e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009160:	2302      	movs	r3, #2
 8009162:	75fb      	strb	r3, [r7, #23]
      break;
 8009164:	e06e      	b.n	8009244 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009166:	78f9      	ldrb	r1, [r7, #3]
 8009168:	2300      	movs	r3, #0
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	2300      	movs	r3, #0
 800916e:	2200      	movs	r2, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fe05 	bl	8009d80 <USBH_MSC_SCSI_Write>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	2134      	movs	r1, #52	; 0x34
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	4413      	add	r3, r2
 800918c:	3390      	adds	r3, #144	; 0x90
 800918e:	2201      	movs	r2, #1
 8009190:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009196:	e057      	b.n	8009248 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d109      	bne.n	80091b2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	2134      	movs	r1, #52	; 0x34
 80091a4:	fb01 f303 	mul.w	r3, r1, r3
 80091a8:	4413      	add	r3, r2
 80091aa:	3390      	adds	r3, #144	; 0x90
 80091ac:	2205      	movs	r2, #5
 80091ae:	701a      	strb	r2, [r3, #0]
      break;
 80091b0:	e04a      	b.n	8009248 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d147      	bne.n	8009248 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	2134      	movs	r1, #52	; 0x34
 80091be:	fb01 f303 	mul.w	r3, r1, r3
 80091c2:	4413      	add	r3, r2
 80091c4:	3390      	adds	r3, #144	; 0x90
 80091c6:	2208      	movs	r2, #8
 80091c8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80091ca:	2302      	movs	r3, #2
 80091cc:	75fb      	strb	r3, [r7, #23]
      break;
 80091ce:	e03b      	b.n	8009248 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2234      	movs	r2, #52	; 0x34
 80091d4:	fb02 f303 	mul.w	r3, r2, r3
 80091d8:	3398      	adds	r3, #152	; 0x98
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4413      	add	r3, r2
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fd52 	bl	8009c8e <USBH_MSC_SCSI_RequestSense>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d113      	bne.n	800921c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	2134      	movs	r1, #52	; 0x34
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	3390      	adds	r3, #144	; 0x90
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	2134      	movs	r1, #52	; 0x34
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	3391      	adds	r3, #145	; 0x91
 8009214:	2202      	movs	r2, #2
 8009216:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009218:	2302      	movs	r3, #2
 800921a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d014      	beq.n	800924c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	2b04      	cmp	r3, #4
 8009226:	d111      	bne.n	800924c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	2134      	movs	r1, #52	; 0x34
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	3390      	adds	r3, #144	; 0x90
 8009236:	2208      	movs	r2, #8
 8009238:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800923a:	2302      	movs	r3, #2
 800923c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800923e:	e005      	b.n	800924c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009240:	bf00      	nop
 8009242:	e004      	b.n	800924e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009244:	bf00      	nop
 8009246:	e002      	b.n	800924e <USBH_MSC_RdWrProcess+0x194>
      break;
 8009248:	bf00      	nop
 800924a:	e000      	b.n	800924e <USBH_MSC_RdWrProcess+0x194>
      break;
 800924c:	bf00      	nop

  }
  return error;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b0b      	cmp	r3, #11
 8009276:	d10c      	bne.n	8009292 <USBH_MSC_UnitIsReady+0x3a>
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2134      	movs	r1, #52	; 0x34
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	4413      	add	r3, r2
 8009284:	3391      	adds	r3, #145	; 0x91
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d102      	bne.n	8009292 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800928c:	2301      	movs	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
 8009290:	e001      	b.n	8009296 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	460b      	mov	r3, r1
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b0b      	cmp	r3, #11
 80092c4:	d10d      	bne.n	80092e2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80092c6:	7afb      	ldrb	r3, [r7, #11]
 80092c8:	2234      	movs	r2, #52	; 0x34
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
 80092ce:	3390      	adds	r3, #144	; 0x90
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	4413      	add	r3, r2
 80092d4:	2234      	movs	r2, #52	; 0x34
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f005 f953 	bl	800e584 <memcpy>
    return USBH_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e000      	b.n	80092e4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80092e2:	2302      	movs	r3, #2
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	460b      	mov	r3, r1
 80092fa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00e      	beq.n	8009330 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009318:	2b0b      	cmp	r3, #11
 800931a:	d109      	bne.n	8009330 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	2134      	movs	r1, #52	; 0x34
 8009322:	fb01 f303 	mul.w	r3, r1, r3
 8009326:	4413      	add	r3, r2
 8009328:	3390      	adds	r3, #144	; 0x90
 800932a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800932c:	2b01      	cmp	r3, #1
 800932e:	d001      	beq.n	8009334 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009330:	2302      	movs	r3, #2
 8009332:	e040      	b.n	80093b6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2206      	movs	r2, #6
 8009338:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	2134      	movs	r1, #52	; 0x34
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	4413      	add	r3, r2
 8009346:	3390      	adds	r3, #144	; 0x90
 8009348:	2206      	movs	r2, #6
 800934a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	b29a      	uxth	r2, r3
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009356:	7af9      	ldrb	r1, [r7, #11]
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fd78 	bl	8009e56 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800936c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800936e:	e016      	b.n	800939e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	429a      	cmp	r2, r3
 8009386:	d805      	bhi.n	8009394 <USBH_MSC_Read+0xa8>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2201      	movs	r2, #1
 8009398:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	e00b      	b.n	80093b6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	4619      	mov	r1, r3
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff fe89 	bl	80090ba <USBH_MSC_RdWrProcess>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d0e0      	beq.n	8009370 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2201      	movs	r2, #1
 80093b2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af02      	add	r7, sp, #8
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
 80093ca:	460b      	mov	r3, r1
 80093cc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00e      	beq.n	8009402 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80093ea:	2b0b      	cmp	r3, #11
 80093ec:	d109      	bne.n	8009402 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	2134      	movs	r1, #52	; 0x34
 80093f4:	fb01 f303 	mul.w	r3, r1, r3
 80093f8:	4413      	add	r3, r2
 80093fa:	3390      	adds	r3, #144	; 0x90
 80093fc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d001      	beq.n	8009406 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009402:	2302      	movs	r3, #2
 8009404:	e040      	b.n	8009488 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2207      	movs	r2, #7
 800940a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800940c:	7afb      	ldrb	r3, [r7, #11]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	2134      	movs	r1, #52	; 0x34
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	3390      	adds	r3, #144	; 0x90
 800941a:	2207      	movs	r2, #7
 800941c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	b29a      	uxth	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009428:	7af9      	ldrb	r1, [r7, #11]
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 fca4 	bl	8009d80 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800943e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009440:	e016      	b.n	8009470 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009452:	fb01 f303 	mul.w	r3, r1, r3
 8009456:	429a      	cmp	r2, r3
 8009458:	d805      	bhi.n	8009466 <USBH_MSC_Write+0xa8>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2201      	movs	r2, #1
 800946a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800946c:	2302      	movs	r3, #2
 800946e:	e00b      	b.n	8009488 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	4619      	mov	r1, r3
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff fe20 	bl	80090ba <USBH_MSC_RdWrProcess>
 800947a:	4603      	mov	r3, r0
 800947c:	2b01      	cmp	r3, #1
 800947e:	d0e0      	beq.n	8009442 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2201      	movs	r2, #1
 8009484:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2221      	movs	r2, #33	; 0x21
 800949c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	22ff      	movs	r2, #255	; 0xff
 80094a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fea4 	bl	800b208 <USBH_CtlReq>
 80094c0:	4603      	mov	r3, r0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	22a1      	movs	r2, #161	; 0xa1
 80094d8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	22fe      	movs	r2, #254	; 0xfe
 80094de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80094f2:	2201      	movs	r2, #1
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f001 fe86 	bl	800b208 <USBH_CtlReq>
 80094fc:	4603      	mov	r3, r0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a09      	ldr	r2, [pc, #36]	; (8009544 <USBH_MSC_BOT_Init+0x3c>)
 800951e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a09      	ldr	r2, [pc, #36]	; (8009548 <USBH_MSC_BOT_Init+0x40>)
 8009524:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	43425355 	.word	0x43425355
 8009548:	20304050 	.word	0x20304050

0800954c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af02      	add	r7, sp, #8
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800955c:	2301      	movs	r3, #1
 800955e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009560:	2301      	movs	r3, #1
 8009562:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009564:	2300      	movs	r3, #0
 8009566:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800957c:	3b01      	subs	r3, #1
 800957e:	2b0a      	cmp	r3, #10
 8009580:	f200 819e 	bhi.w	80098c0 <USBH_MSC_BOT_Process+0x374>
 8009584:	a201      	add	r2, pc, #4	; (adr r2, 800958c <USBH_MSC_BOT_Process+0x40>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b9 	.word	0x080095b9
 8009590:	080095e1 	.word	0x080095e1
 8009594:	0800964b 	.word	0x0800964b
 8009598:	08009669 	.word	0x08009669
 800959c:	080096ed 	.word	0x080096ed
 80095a0:	0800970f 	.word	0x0800970f
 80095a4:	080097a7 	.word	0x080097a7
 80095a8:	080097c3 	.word	0x080097c3
 80095ac:	08009815 	.word	0x08009815
 80095b0:	08009845 	.word	0x08009845
 80095b4:	080098a7 	.word	0x080098a7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	78fa      	ldrb	r2, [r7, #3]
 80095bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	795b      	ldrb	r3, [r3, #5]
 80095d2:	2201      	movs	r2, #1
 80095d4:	9200      	str	r2, [sp, #0]
 80095d6:	221f      	movs	r2, #31
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f002 f824 	bl	800b626 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80095de:	e17e      	b.n	80098de <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	795b      	ldrb	r3, [r3, #5]
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f004 feda 	bl	800e3a0 <USBH_LL_GetURBState>
 80095ec:	4603      	mov	r3, r0
 80095ee:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80095f0:	7d3b      	ldrb	r3, [r7, #20]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d118      	bne.n	8009628 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00f      	beq.n	800961e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009604:	b25b      	sxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	da04      	bge.n	8009614 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2203      	movs	r2, #3
 800960e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009612:	e157      	b.n	80098c4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2205      	movs	r2, #5
 8009618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800961c:	e152      	b.n	80098c4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2207      	movs	r2, #7
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009626:	e14d      	b.n	80098c4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009628:	7d3b      	ldrb	r3, [r7, #20]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d104      	bne.n	8009638 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009636:	e145      	b.n	80098c4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009638:	7d3b      	ldrb	r3, [r7, #20]
 800963a:	2b05      	cmp	r3, #5
 800963c:	f040 8142 	bne.w	80098c4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	220a      	movs	r2, #10
 8009644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009648:	e13c      	b.n	80098c4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	895a      	ldrh	r2, [r3, #10]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	791b      	ldrb	r3, [r3, #4]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 f809 	bl	800b670 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2204      	movs	r2, #4
 8009662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009666:	e13a      	b.n	80098de <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	791b      	ldrb	r3, [r3, #4]
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f004 fe96 	bl	800e3a0 <USBH_LL_GetURBState>
 8009674:	4603      	mov	r3, r0
 8009676:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009678:	7d3b      	ldrb	r3, [r7, #20]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d12d      	bne.n	80096da <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	8952      	ldrh	r2, [r2, #10]
 8009686:	4293      	cmp	r3, r2
 8009688:	d910      	bls.n	80096ac <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	8952      	ldrh	r2, [r2, #10]
 8009694:	441a      	add	r2, r3
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	8952      	ldrh	r2, [r2, #10]
 80096a4:	1a9a      	subs	r2, r3, r2
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80096aa:	e002      	b.n	80096b2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2200      	movs	r2, #0
 80096b0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	895a      	ldrh	r2, [r3, #10]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	791b      	ldrb	r3, [r3, #4]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 ffd1 	bl	800b670 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80096ce:	e0fb      	b.n	80098c8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2207      	movs	r2, #7
 80096d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096d8:	e0f6      	b.n	80098c8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80096da:	7d3b      	ldrb	r3, [r7, #20]
 80096dc:	2b05      	cmp	r3, #5
 80096de:	f040 80f3 	bne.w	80098c8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2209      	movs	r2, #9
 80096e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096ea:	e0ed      	b.n	80098c8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	891a      	ldrh	r2, [r3, #8]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	795b      	ldrb	r3, [r3, #5]
 80096fa:	2001      	movs	r0, #1
 80096fc:	9000      	str	r0, [sp, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 ff91 	bl	800b626 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2206      	movs	r2, #6
 8009708:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800970c:	e0e7      	b.n	80098de <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	795b      	ldrb	r3, [r3, #5]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f004 fe43 	bl	800e3a0 <USBH_LL_GetURBState>
 800971a:	4603      	mov	r3, r0
 800971c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800971e:	7d3b      	ldrb	r3, [r7, #20]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d12f      	bne.n	8009784 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	8912      	ldrh	r2, [r2, #8]
 800972c:	4293      	cmp	r3, r2
 800972e:	d910      	bls.n	8009752 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	8912      	ldrh	r2, [r2, #8]
 800973a:	441a      	add	r2, r3
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	8912      	ldrh	r2, [r2, #8]
 800974a:	1a9a      	subs	r2, r3, r2
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009750:	e002      	b.n	8009758 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2200      	movs	r2, #0
 8009756:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	891a      	ldrh	r2, [r3, #8]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	795b      	ldrb	r3, [r3, #5]
 800976e:	2001      	movs	r0, #1
 8009770:	9000      	str	r0, [sp, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 ff57 	bl	800b626 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009778:	e0a8      	b.n	80098cc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2207      	movs	r2, #7
 800977e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009782:	e0a3      	b.n	80098cc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009784:	7d3b      	ldrb	r3, [r7, #20]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d104      	bne.n	8009794 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2205      	movs	r2, #5
 800978e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009792:	e09b      	b.n	80098cc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009794:	7d3b      	ldrb	r3, [r7, #20]
 8009796:	2b05      	cmp	r3, #5
 8009798:	f040 8098 	bne.w	80098cc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	220a      	movs	r2, #10
 80097a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097a4:	e092      	b.n	80098cc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	791b      	ldrb	r3, [r3, #4]
 80097b0:	220d      	movs	r2, #13
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 ff5c 	bl	800b670 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2208      	movs	r2, #8
 80097bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097c0:	e08d      	b.n	80098de <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f004 fde9 	bl	800e3a0 <USBH_LL_GetURBState>
 80097ce:	4603      	mov	r3, r0
 80097d0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80097d2:	7d3b      	ldrb	r3, [r7, #20]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d115      	bne.n	8009804 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8a9 	bl	8009940 <USBH_MSC_DecodeCSW>
 80097ee:	4603      	mov	r3, r0
 80097f0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80097f2:	7d7b      	ldrb	r3, [r7, #21]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80097fc:	e068      	b.n	80098d0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80097fe:	2302      	movs	r3, #2
 8009800:	75fb      	strb	r3, [r7, #23]
      break;
 8009802:	e065      	b.n	80098d0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009804:	7d3b      	ldrb	r3, [r7, #20]
 8009806:	2b05      	cmp	r3, #5
 8009808:	d162      	bne.n	80098d0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2209      	movs	r2, #9
 800980e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009812:	e05d      	b.n	80098d0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	2200      	movs	r2, #0
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f864 	bl	80098e8 <USBH_MSC_BOT_Abort>
 8009820:	4603      	mov	r3, r0
 8009822:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009824:	7dbb      	ldrb	r3, [r7, #22]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2207      	movs	r2, #7
 800982e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009832:	e04f      	b.n	80098d4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009834:	7dbb      	ldrb	r3, [r7, #22]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d14c      	bne.n	80098d4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	220b      	movs	r2, #11
 800983e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009842:	e047      	b.n	80098d4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	2201      	movs	r2, #1
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f84c 	bl	80098e8 <USBH_MSC_BOT_Abort>
 8009850:	4603      	mov	r3, r0
 8009852:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009854:	7dbb      	ldrb	r3, [r7, #22]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d11d      	bne.n	8009896 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	795b      	ldrb	r3, [r3, #5]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f004 fdee 	bl	800e442 <USBH_LL_GetToggle>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	7959      	ldrb	r1, [r3, #5]
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	f1c3 0301 	rsb	r3, r3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	461a      	mov	r2, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f004 fdb2 	bl	800e3e2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	791b      	ldrb	r3, [r3, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f004 fdab 	bl	800e3e2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2209      	movs	r2, #9
 8009890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009894:	e020      	b.n	80098d8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009896:	7dbb      	ldrb	r3, [r7, #22]
 8009898:	2b04      	cmp	r3, #4
 800989a:	d11d      	bne.n	80098d8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	220b      	movs	r2, #11
 80098a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098a4:	e018      	b.n	80098d8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fdf2 	bl	8009490 <USBH_MSC_BOT_REQ_Reset>
 80098ac:	4603      	mov	r3, r0
 80098ae:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d112      	bne.n	80098dc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80098be:	e00d      	b.n	80098dc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80098c0:	bf00      	nop
 80098c2:	e00c      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098c4:	bf00      	nop
 80098c6:	e00a      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098c8:	bf00      	nop
 80098ca:	e008      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098cc:	bf00      	nop
 80098ce:	e006      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098d0:	bf00      	nop
 80098d2:	e004      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098d4:	bf00      	nop
 80098d6:	e002      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <USBH_MSC_BOT_Process+0x392>
      break;
 80098dc:	bf00      	nop
  }
  return status;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
 80098f4:	4613      	mov	r3, r2
 80098f6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009906:	78bb      	ldrb	r3, [r7, #2]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <USBH_MSC_BOT_Abort+0x2a>
 800990c:	2b01      	cmp	r3, #1
 800990e:	d009      	beq.n	8009924 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009910:	e011      	b.n	8009936 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	79db      	ldrb	r3, [r3, #7]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f9a8 	bl	800ac6e <USBH_ClrFeature>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
      break;
 8009922:	e008      	b.n	8009936 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	799b      	ldrb	r3, [r3, #6]
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 f99f 	bl	800ac6e <USBH_ClrFeature>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]
      break;
 8009934:	bf00      	nop
  }
  return status;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f004 fc8d 	bl	800e27c <USBH_LL_GetLastXferSize>
 8009962:	4603      	mov	r3, r0
 8009964:	2b0d      	cmp	r3, #13
 8009966:	d002      	beq.n	800996e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009968:	2302      	movs	r3, #2
 800996a:	73fb      	strb	r3, [r7, #15]
 800996c:	e024      	b.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009972:	4a14      	ldr	r2, [pc, #80]	; (80099c4 <USBH_MSC_DecodeCSW+0x84>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d11d      	bne.n	80099b4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009980:	429a      	cmp	r2, r3
 8009982:	d119      	bne.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
 8009992:	e011      	b.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800999a:	2b01      	cmp	r3, #1
 800999c:	d102      	bne.n	80099a4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800999e:	2301      	movs	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	e009      	b.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d104      	bne.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80099ae:	2302      	movs	r3, #2
 80099b0:	73fb      	strb	r3, [r7, #15]
 80099b2:	e001      	b.n	80099b8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80099b4:	2302      	movs	r3, #2
 80099b6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	53425355 	.word	0x53425355

080099c8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099d4:	2302      	movs	r3, #2
 80099d6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d002      	beq.n	80099f2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d021      	beq.n	8009a34 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099f0:	e028      	b.n	8009a44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2200      	movs	r2, #0
 80099f6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	220a      	movs	r2, #10
 8009a04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	3363      	adds	r3, #99	; 0x63
 8009a0c:	2210      	movs	r2, #16
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f004 fdc5 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
      break;
 8009a32:	e007      	b.n	8009a44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a34:	78fb      	ldrb	r3, [r7, #3]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fd87 	bl	800954c <USBH_MSC_BOT_Process>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	bf00      	nop
  }

  return error;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	460b      	mov	r3, r1
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d002      	beq.n	8009a7a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d027      	beq.n	8009ac8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009a78:	e05f      	b.n	8009b3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2280      	movs	r2, #128	; 0x80
 8009a84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3363      	adds	r3, #99	; 0x63
 8009a94:	2210      	movs	r2, #16
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f004 fd81 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2225      	movs	r2, #37	; 0x25
 8009aa2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f103 0210 	add.w	r2, r3, #16
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac6:	e038      	b.n	8009b3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
 8009aca:	4619      	mov	r1, r3
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fd3d 	bl	800954c <USBH_MSC_BOT_Process>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d12d      	bne.n	8009b38 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae2:	3303      	adds	r3, #3
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aee:	3302      	adds	r3, #2
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009afc:	3301      	adds	r3, #1
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b02:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	061b      	lsls	r3, r3, #24
 8009b0e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1a:	3307      	adds	r3, #7
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b26:	3306      	adds	r3, #6
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	809a      	strh	r2, [r3, #4]
      break;
 8009b38:	bf00      	nop
  }

  return error;
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009b52:	2302      	movs	r3, #2
 8009b54:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d002      	beq.n	8009b70 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d03d      	beq.n	8009bea <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009b6e:	e089      	b.n	8009c84 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2224      	movs	r2, #36	; 0x24
 8009b74:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2280      	movs	r2, #128	; 0x80
 8009b7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	220a      	movs	r2, #10
 8009b82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3363      	adds	r3, #99	; 0x63
 8009b8a:	220a      	movs	r2, #10
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f004 fd06 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2212      	movs	r2, #18
 8009b98:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	015b      	lsls	r3, r3, #5
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2224      	movs	r2, #36	; 0x24
 8009bbc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f103 0210 	add.w	r2, r3, #16
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009be4:	2301      	movs	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
      break;
 8009be8:	e04c      	b.n	8009c84 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bea:	7afb      	ldrb	r3, [r7, #11]
 8009bec:	4619      	mov	r1, r3
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fcac 	bl	800954c <USBH_MSC_BOT_Process>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d141      	bne.n	8009c82 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009bfe:	2222      	movs	r2, #34	; 0x22
 8009c00:	2100      	movs	r1, #0
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f004 fccc 	bl	800e5a0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	f003 031f 	and.w	r3, r3, #31
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	095b      	lsrs	r3, r3, #5
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c30:	3301      	adds	r3, #1
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	da03      	bge.n	8009c42 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	709a      	strb	r2, [r3, #2]
 8009c40:	e002      	b.n	8009c48 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	1cd8      	adds	r0, r3, #3
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c52:	3308      	adds	r3, #8
 8009c54:	2208      	movs	r2, #8
 8009c56:	4619      	mov	r1, r3
 8009c58:	f004 fc94 	bl	800e584 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f103 000c 	add.w	r0, r3, #12
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c68:	3310      	adds	r3, #16
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	f004 fc89 	bl	800e584 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	331d      	adds	r3, #29
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009c7c:	3220      	adds	r2, #32
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	601a      	str	r2, [r3, #0]
      break;
 8009c82:	bf00      	nop
  }

  return error;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b086      	sub	sp, #24
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	460b      	mov	r3, r1
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d002      	beq.n	8009cba <USBH_MSC_SCSI_RequestSense+0x2c>
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d03d      	beq.n	8009d34 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009cb8:	e05d      	b.n	8009d76 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	220e      	movs	r2, #14
 8009cbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2280      	movs	r2, #128	; 0x80
 8009cc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	220a      	movs	r2, #10
 8009ccc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	3363      	adds	r3, #99	; 0x63
 8009cd4:	2210      	movs	r2, #16
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f004 fc61 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	015b      	lsls	r3, r3, #5
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	220e      	movs	r2, #14
 8009d06:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f103 0210 	add.w	r2, r3, #16
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
      break;
 8009d32:	e020      	b.n	8009d76 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	4619      	mov	r1, r3
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fc07 	bl	800954c <USBH_MSC_BOT_Process>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d115      	bne.n	8009d74 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d4e:	3302      	adds	r3, #2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f003 030f 	and.w	r3, r3, #15
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d62:	7b1a      	ldrb	r2, [r3, #12]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d6e:	7b5a      	ldrb	r2, [r3, #13]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	709a      	strb	r2, [r3, #2]
      break;
 8009d74:	bf00      	nop
  }

  return error;
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d90:	2302      	movs	r3, #2
 8009d92:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d002      	beq.n	8009dae <USBH_MSC_SCSI_Write+0x2e>
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d047      	beq.n	8009e3c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009dac:	e04e      	b.n	8009e4c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009db4:	461a      	mov	r2, r3
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	fb03 f202 	mul.w	r2, r3, r2
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	220a      	movs	r2, #10
 8009dcc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	3363      	adds	r3, #99	; 0x63
 8009dd4:	2210      	movs	r2, #16
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f004 fbe1 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	222a      	movs	r2, #42	; 0x2a
 8009de2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009de6:	79fa      	ldrb	r2, [r7, #7]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009dee:	79ba      	ldrb	r2, [r7, #6]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009df6:	797a      	ldrb	r2, [r7, #5]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009dfe:	1d3b      	adds	r3, r7, #4
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009e08:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009e12:	f107 0320 	add.w	r3, r7, #32
 8009e16:	781a      	ldrb	r2, [r3, #0]
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e36:	2301      	movs	r3, #1
 8009e38:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3a:	e007      	b.n	8009e4c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff fb83 	bl	800954c <USBH_MSC_BOT_Process>
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4a:	bf00      	nop
  }

  return error;
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	460b      	mov	r3, r1
 8009e64:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e66:	2302      	movs	r3, #2
 8009e68:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d002      	beq.n	8009e84 <USBH_MSC_SCSI_Read+0x2e>
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d047      	beq.n	8009f12 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e82:	e04e      	b.n	8009f22 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	fb03 f202 	mul.w	r2, r3, r2
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2280      	movs	r2, #128	; 0x80
 8009e9a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	220a      	movs	r2, #10
 8009ea2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	3363      	adds	r3, #99	; 0x63
 8009eaa:	2210      	movs	r2, #16
 8009eac:	2100      	movs	r1, #0
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f004 fb76 	bl	800e5a0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	2228      	movs	r2, #40	; 0x28
 8009eb8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ebc:	79fa      	ldrb	r2, [r7, #7]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009ec4:	79ba      	ldrb	r2, [r7, #6]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009ecc:	797a      	ldrb	r2, [r7, #5]
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	781a      	ldrb	r2, [r3, #0]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009ede:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ee8:	f107 0320 	add.w	r3, r7, #32
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f10:	e007      	b.n	8009f22 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fb18 	bl	800954c <USBH_MSC_BOT_Process>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f20:	bf00      	nop
  }

  return error;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f40:	2302      	movs	r3, #2
 8009f42:	e029      	b.n	8009f98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	79fa      	ldrb	r2, [r7, #7]
 8009f48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f81f 	bl	8009fa0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f004 f8bf 	bl	800e114 <USBH_LL_Init>

  return USBH_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e009      	b.n	8009fc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	33e0      	adds	r3, #224	; 0xe0
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b0f      	cmp	r3, #15
 8009fca:	d9f2      	bls.n	8009fb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	e009      	b.n	8009fe6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fec:	d3f1      	bcc.n	8009fd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2240      	movs	r2, #64	; 0x40
 800a012:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d016      	beq.n	800a08a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10e      	bne.n	800a084 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a06c:	1c59      	adds	r1, r3, #1
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	33de      	adds	r3, #222	; 0xde
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	e004      	b.n	800a08e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a084:	2302      	movs	r3, #2
 800a086:	73fb      	strb	r3, [r7, #15]
 800a088:	e001      	b.n	800a08e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a08a:	2302      	movs	r3, #2
 800a08c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d204      	bcs.n	800a0c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a0c0:	e001      	b.n	800a0c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	4608      	mov	r0, r1
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	70fb      	strb	r3, [r7, #3]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70bb      	strb	r3, [r7, #2]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a0fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0fe:	e025      	b.n	800a14c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	221a      	movs	r2, #26
 800a104:	fb02 f303 	mul.w	r3, r2, r3
 800a108:	3308      	adds	r3, #8
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	3302      	adds	r3, #2
 800a110:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	795b      	ldrb	r3, [r3, #5]
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d002      	beq.n	800a122 <USBH_FindInterface+0x4e>
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	2bff      	cmp	r3, #255	; 0xff
 800a120:	d111      	bne.n	800a146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a126:	78ba      	ldrb	r2, [r7, #2]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d002      	beq.n	800a132 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a12c:	78bb      	ldrb	r3, [r7, #2]
 800a12e:	2bff      	cmp	r3, #255	; 0xff
 800a130:	d109      	bne.n	800a146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a136:	787a      	ldrb	r2, [r7, #1]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d002      	beq.n	800a142 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a13c:	787b      	ldrb	r3, [r7, #1]
 800a13e:	2bff      	cmp	r3, #255	; 0xff
 800a140:	d101      	bne.n	800a146 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	e006      	b.n	800a154 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	3301      	adds	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d9d6      	bls.n	800a100 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a152:	23ff      	movs	r3, #255	; 0xff
}
 800a154:	4618      	mov	r0, r3
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f004 f80f 	bl	800e18c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a16e:	2101      	movs	r1, #1
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f004 f928 	bl	800e3c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af04      	add	r7, sp, #16
 800a186:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a188:	2302      	movs	r3, #2
 800a18a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d102      	bne.n	800a1a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2203      	movs	r2, #3
 800a1a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b0b      	cmp	r3, #11
 800a1aa:	f200 81be 	bhi.w	800a52a <USBH_Process+0x3aa>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <USBH_Process+0x34>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1e5 	.word	0x0800a1e5
 800a1b8:	0800a217 	.word	0x0800a217
 800a1bc:	0800a27f 	.word	0x0800a27f
 800a1c0:	0800a4c5 	.word	0x0800a4c5
 800a1c4:	0800a52b 	.word	0x0800a52b
 800a1c8:	0800a323 	.word	0x0800a323
 800a1cc:	0800a46b 	.word	0x0800a46b
 800a1d0:	0800a359 	.word	0x0800a359
 800a1d4:	0800a379 	.word	0x0800a379
 800a1d8:	0800a399 	.word	0x0800a399
 800a1dc:	0800a3dd 	.word	0x0800a3dd
 800a1e0:	0800a4ad 	.word	0x0800a4ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 819e 	beq.w	800a52e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a1f8:	20c8      	movs	r0, #200	; 0xc8
 800a1fa:	f004 f952 	bl	800e4a2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f004 f821 	bl	800e246 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a214:	e18b      	b.n	800a52e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d107      	bne.n	800a230 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a22e:	e18d      	b.n	800a54c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a23a:	d914      	bls.n	800a266 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a242:	3301      	adds	r3, #1
 800a244:	b2da      	uxtb	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a252:	2b03      	cmp	r3, #3
 800a254:	d903      	bls.n	800a25e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	220d      	movs	r2, #13
 800a25a:	701a      	strb	r2, [r3, #0]
      break;
 800a25c:	e176      	b.n	800a54c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
      break;
 800a264:	e172      	b.n	800a54c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a26c:	f103 020a 	add.w	r2, r3, #10
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a276:	200a      	movs	r0, #10
 800a278:	f004 f913 	bl	800e4a2 <USBH_Delay>
      break;
 800a27c:	e166      	b.n	800a54c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a28e:	2104      	movs	r1, #4
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a294:	2064      	movs	r0, #100	; 0x64
 800a296:	f004 f904 	bl	800e4a2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f003 ffac 	bl	800e1f8 <USBH_LL_GetSpeed>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2205      	movs	r2, #5
 800a2ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fa29 	bl	800b70a <USBH_AllocPipe>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fa21 	bl	800b70a <USBH_AllocPipe>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	7919      	ldrb	r1, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2e4:	b292      	uxth	r2, r2
 800a2e6:	9202      	str	r2, [sp, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2280      	movs	r2, #128	; 0x80
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 f9da 	bl	800b6ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7959      	ldrb	r1, [r3, #5]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a30c:	b292      	uxth	r2, r2
 800a30e:	9202      	str	r2, [sp, #8]
 800a310:	2200      	movs	r2, #0
 800a312:	9201      	str	r2, [sp, #4]
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	4603      	mov	r3, r0
 800a318:	2200      	movs	r2, #0
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f9c6 	bl	800b6ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a320:	e114      	b.n	800a54c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f918 	bl	800a558 <USBH_HandleEnum>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 80fe 	bne.w	800a532 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a344:	2b01      	cmp	r3, #1
 800a346:	d103      	bne.n	800a350 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2208      	movs	r2, #8
 800a34c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a34e:	e0f0      	b.n	800a532 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2207      	movs	r2, #7
 800a354:	701a      	strb	r2, [r3, #0]
      break;
 800a356:	e0ec      	b.n	800a532 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80e9 	beq.w	800a536 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a36a:	2101      	movs	r1, #1
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2208      	movs	r2, #8
 800a374:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a376:	e0de      	b.n	800a536 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a37e:	b29b      	uxth	r3, r3
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fc2c 	bl	800abe0 <USBH_SetCfg>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f040 80d5 	bne.w	800a53a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2209      	movs	r2, #9
 800a394:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a396:	e0d0      	b.n	800a53a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d016      	beq.n	800a3d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fc3c 	bl	800ac26 <USBH_SetFeature>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d103      	bne.n	800a3c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	220a      	movs	r2, #10
 800a3be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3c0:	e0bd      	b.n	800a53e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	f040 80b9 	bne.w	800a53e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	701a      	strb	r2, [r3, #0]
      break;
 800a3d2:	e0b4      	b.n	800a53e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	220a      	movs	r2, #10
 800a3d8:	701a      	strb	r2, [r3, #0]
      break;
 800a3da:	e0b0      	b.n	800a53e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 80ad 	beq.w	800a542 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	e016      	b.n	800a424 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3f6:	7bfa      	ldrb	r2, [r7, #15]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	32de      	adds	r2, #222	; 0xde
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	791a      	ldrb	r2, [r3, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a408:	429a      	cmp	r2, r3
 800a40a:	d108      	bne.n	800a41e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a40c:	7bfa      	ldrb	r2, [r7, #15]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	32de      	adds	r2, #222	; 0xde
 800a412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a41c:	e005      	b.n	800a42a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3301      	adds	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0e5      	beq.n	800a3f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d016      	beq.n	800a462 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2206      	movs	r2, #6
 800a44a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a452:	2103      	movs	r1, #3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a458:	e073      	b.n	800a542 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	220d      	movs	r2, #13
 800a45e:	701a      	strb	r2, [r3, #0]
      break;
 800a460:	e06f      	b.n	800a542 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	220d      	movs	r2, #13
 800a466:	701a      	strb	r2, [r3, #0]
      break;
 800a468:	e06b      	b.n	800a542 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a470:	2b00      	cmp	r3, #0
 800a472:	d017      	beq.n	800a4a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	4798      	blx	r3
 800a480:	4603      	mov	r3, r0
 800a482:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d103      	bne.n	800a494 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	220b      	movs	r2, #11
 800a490:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a492:	e058      	b.n	800a546 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d154      	bne.n	800a546 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	220d      	movs	r2, #13
 800a4a0:	701a      	strb	r2, [r3, #0]
      break;
 800a4a2:	e050      	b.n	800a546 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	220d      	movs	r2, #13
 800a4a8:	701a      	strb	r2, [r3, #0]
      break;
 800a4aa:	e04c      	b.n	800a546 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d049      	beq.n	800a54a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
      }
      break;
 800a4c2:	e042      	b.n	800a54a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff fd67 	bl	8009fa0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d009      	beq.n	800a4f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a500:	2105      	movs	r1, #5
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff fe20 	bl	800a160 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a520:	e014      	b.n	800a54c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f003 fe32 	bl	800e18c <USBH_LL_Start>
      break;
 800a528:	e010      	b.n	800a54c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a52a:	bf00      	nop
 800a52c:	e00e      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a52e:	bf00      	nop
 800a530:	e00c      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a532:	bf00      	nop
 800a534:	e00a      	b.n	800a54c <USBH_Process+0x3cc>
    break;
 800a536:	bf00      	nop
 800a538:	e008      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a53a:	bf00      	nop
 800a53c:	e006      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a53e:	bf00      	nop
 800a540:	e004      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a542:	bf00      	nop
 800a544:	e002      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a546:	bf00      	nop
 800a548:	e000      	b.n	800a54c <USBH_Process+0x3cc>
      break;
 800a54a:	bf00      	nop
  }
  return USBH_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop

0800a558 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af04      	add	r7, sp, #16
 800a55e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a560:	2301      	movs	r3, #1
 800a562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a564:	2301      	movs	r3, #1
 800a566:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	2b07      	cmp	r3, #7
 800a56e:	f200 81c1 	bhi.w	800a8f4 <USBH_HandleEnum+0x39c>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBH_HandleEnum+0x20>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a599 	.word	0x0800a599
 800a57c:	0800a657 	.word	0x0800a657
 800a580:	0800a6c1 	.word	0x0800a6c1
 800a584:	0800a74f 	.word	0x0800a74f
 800a588:	0800a7b9 	.word	0x0800a7b9
 800a58c:	0800a829 	.word	0x0800a829
 800a590:	0800a86f 	.word	0x0800a86f
 800a594:	0800a8b5 	.word	0x0800a8b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a598:	2108      	movs	r1, #8
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa50 	bl	800aa40 <USBH_Get_DevDesc>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d130      	bne.n	800a60c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7919      	ldrb	r1, [r3, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	9201      	str	r2, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2280      	movs	r2, #128	; 0x80
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f865 	bl	800b6ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	7959      	ldrb	r1, [r3, #5]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5f6:	b292      	uxth	r2, r2
 800a5f8:	9202      	str	r2, [sp, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	9201      	str	r2, [sp, #4]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4603      	mov	r3, r0
 800a602:	2200      	movs	r2, #0
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 f851 	bl	800b6ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a60a:	e175      	b.n	800a8f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a60c:	7bbb      	ldrb	r3, [r7, #14]
 800a60e:	2b03      	cmp	r3, #3
 800a610:	f040 8172 	bne.w	800a8f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a61a:	3301      	adds	r3, #1
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d903      	bls.n	800a636 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	220d      	movs	r2, #13
 800a632:	701a      	strb	r2, [r3, #0]
      break;
 800a634:	e160      	b.n	800a8f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	795b      	ldrb	r3, [r3, #5]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f001 f885 	bl	800b74c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	791b      	ldrb	r3, [r3, #4]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f87f 	bl	800b74c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
      break;
 800a654:	e150      	b.n	800a8f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a656:	2112      	movs	r1, #18
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9f1 	bl	800aa40 <USBH_Get_DevDesc>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d103      	bne.n	800a670 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2202      	movs	r2, #2
 800a66c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a66e:	e145      	b.n	800a8fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b03      	cmp	r3, #3
 800a674:	f040 8142 	bne.w	800a8fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a67e:	3301      	adds	r3, #1
 800a680:	b2da      	uxtb	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a68e:	2b03      	cmp	r3, #3
 800a690:	d903      	bls.n	800a69a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	220d      	movs	r2, #13
 800a696:	701a      	strb	r2, [r3, #0]
      break;
 800a698:	e130      	b.n	800a8fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	795b      	ldrb	r3, [r3, #5]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 f853 	bl	800b74c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	791b      	ldrb	r3, [r3, #4]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 f84d 	bl	800b74c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
      break;
 800a6be:	e11d      	b.n	800a8fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa68 	bl	800ab98 <USBH_SetAddress>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d132      	bne.n	800a738 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a6d2:	2002      	movs	r0, #2
 800a6d4:	f003 fee5 	bl	800e4a2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	7919      	ldrb	r1, [r3, #4]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6fa:	b292      	uxth	r2, r2
 800a6fc:	9202      	str	r2, [sp, #8]
 800a6fe:	2200      	movs	r2, #0
 800a700:	9201      	str	r2, [sp, #4]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4603      	mov	r3, r0
 800a706:	2280      	movs	r2, #128	; 0x80
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 ffcf 	bl	800b6ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7959      	ldrb	r1, [r3, #5]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a722:	b292      	uxth	r2, r2
 800a724:	9202      	str	r2, [sp, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	9201      	str	r2, [sp, #4]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4603      	mov	r3, r0
 800a72e:	2200      	movs	r2, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 ffbb 	bl	800b6ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a736:	e0e3      	b.n	800a900 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	f040 80e0 	bne.w	800a900 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	220d      	movs	r2, #13
 800a744:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	705a      	strb	r2, [r3, #1]
      break;
 800a74c:	e0d8      	b.n	800a900 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a74e:	2109      	movs	r1, #9
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f99d 	bl	800aa90 <USBH_Get_CfgDesc>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d103      	bne.n	800a768 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2204      	movs	r2, #4
 800a764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a766:	e0cd      	b.n	800a904 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	f040 80ca 	bne.w	800a904 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a776:	3301      	adds	r3, #1
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a786:	2b03      	cmp	r3, #3
 800a788:	d903      	bls.n	800a792 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	220d      	movs	r2, #13
 800a78e:	701a      	strb	r2, [r3, #0]
      break;
 800a790:	e0b8      	b.n	800a904 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	795b      	ldrb	r3, [r3, #5]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 ffd7 	bl	800b74c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	791b      	ldrb	r3, [r3, #4]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 ffd1 	bl	800b74c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
      break;
 800a7b6:	e0a5      	b.n	800a904 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f965 	bl	800aa90 <USBH_Get_CfgDesc>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2205      	movs	r2, #5
 800a7d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7d6:	e097      	b.n	800a908 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	f040 8094 	bne.w	800a908 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d903      	bls.n	800a802 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	220d      	movs	r2, #13
 800a7fe:	701a      	strb	r2, [r3, #0]
      break;
 800a800:	e082      	b.n	800a908 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	795b      	ldrb	r3, [r3, #5]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 ff9f 	bl	800b74c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	791b      	ldrb	r3, [r3, #4]
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 ff99 	bl	800b74c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	701a      	strb	r2, [r3, #0]
      break;
 800a826:	e06f      	b.n	800a908 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d019      	beq.n	800a866 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a83e:	23ff      	movs	r3, #255	; 0xff
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f949 	bl	800aad8 <USBH_Get_StringDesc>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d103      	bne.n	800a858 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2206      	movs	r2, #6
 800a854:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a856:	e059      	b.n	800a90c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d156      	bne.n	800a90c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2206      	movs	r2, #6
 800a862:	705a      	strb	r2, [r3, #1]
      break;
 800a864:	e052      	b.n	800a90c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2206      	movs	r2, #6
 800a86a:	705a      	strb	r2, [r3, #1]
      break;
 800a86c:	e04e      	b.n	800a90c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a874:	2b00      	cmp	r3, #0
 800a876:	d019      	beq.n	800a8ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a884:	23ff      	movs	r3, #255	; 0xff
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f926 	bl	800aad8 <USBH_Get_StringDesc>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2207      	movs	r2, #7
 800a89a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a89c:	e038      	b.n	800a910 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d135      	bne.n	800a910 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2207      	movs	r2, #7
 800a8a8:	705a      	strb	r2, [r3, #1]
      break;
 800a8aa:	e031      	b.n	800a910 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2207      	movs	r2, #7
 800a8b0:	705a      	strb	r2, [r3, #1]
      break;
 800a8b2:	e02d      	b.n	800a910 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d017      	beq.n	800a8ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8ca:	23ff      	movs	r3, #255	; 0xff
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f903 	bl	800aad8 <USBH_Get_StringDesc>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8e0:	e018      	b.n	800a914 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d115      	bne.n	800a914 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ec:	e012      	b.n	800a914 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f2:	e00f      	b.n	800a914 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a8f4:	bf00      	nop
 800a8f6:	e00e      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a8f8:	bf00      	nop
 800a8fa:	e00c      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a8fc:	bf00      	nop
 800a8fe:	e00a      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a900:	bf00      	nop
 800a902:	e008      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a904:	bf00      	nop
 800a906:	e006      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a908:	bf00      	nop
 800a90a:	e004      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a90c:	bf00      	nop
 800a90e:	e002      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a910:	bf00      	nop
 800a912:	e000      	b.n	800a916 <USBH_HandleEnum+0x3be>
      break;
 800a914:	bf00      	nop
  }
  return Status;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f804 	bl	800a962 <USBH_HandleSof>
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b0b      	cmp	r3, #11
 800a972:	d10a      	bne.n	800a98a <USBH_HandleSof+0x28>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
  }
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a9a2:	bf00      	nop
}
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a9be:	bf00      	nop
}
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f003 fbd2 	bl	800e1c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	791b      	ldrb	r3, [r3, #4]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fe91 	bl	800b74c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	795b      	ldrb	r3, [r3, #5]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fe8b 	bl	800b74c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa52:	78fb      	ldrb	r3, [r7, #3]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa5e:	2100      	movs	r1, #0
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f864 	bl	800ab2e <USBH_GetDescriptor>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa7c:	78fa      	ldrb	r2, [r7, #3]
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	4619      	mov	r1, r3
 800aa82:	f000 f918 	bl	800acb6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	331c      	adds	r3, #28
 800aaa0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaac:	2100      	movs	r1, #0
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f83d 	bl	800ab2e <USBH_GetDescriptor>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d107      	bne.n	800aace <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aabe:	887b      	ldrh	r3, [r7, #2]
 800aac0:	461a      	mov	r2, r3
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f987 	bl	800add8 <USBH_ParseCfgDesc>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af02      	add	r7, sp, #8
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	461a      	mov	r2, r3
 800aae4:	460b      	mov	r3, r1
 800aae6:	72fb      	strb	r3, [r7, #11]
 800aae8:	4613      	mov	r3, r2
 800aaea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aaec:	7afb      	ldrb	r3, [r7, #11]
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aaf4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aafc:	893b      	ldrh	r3, [r7, #8]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	460b      	mov	r3, r1
 800ab02:	2100      	movs	r1, #0
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f812 	bl	800ab2e <USBH_GetDescriptor>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d107      	bne.n	800ab24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab1a:	893a      	ldrh	r2, [r7, #8]
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 fb24 	bl	800b16c <USBH_ParseStringDesc>
  }

  return status;
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3718      	adds	r7, #24
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	607b      	str	r3, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	72fb      	strb	r3, [r7, #11]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	789b      	ldrb	r3, [r3, #2]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d11c      	bne.n	800ab82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2206      	movs	r2, #6
 800ab58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	893a      	ldrh	r2, [r7, #8]
 800ab5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab60:	893b      	ldrh	r3, [r7, #8]
 800ab62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab6a:	d104      	bne.n	800ab76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f240 4209 	movw	r2, #1033	; 0x409
 800ab72:	829a      	strh	r2, [r3, #20]
 800ab74:	e002      	b.n	800ab7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	8b3a      	ldrh	r2, [r7, #24]
 800ab80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab82:	8b3b      	ldrh	r3, [r7, #24]
 800ab84:	461a      	mov	r2, r3
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fb3d 	bl	800b208 <USBH_CtlReq>
 800ab8e:	4603      	mov	r3, r0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	789b      	ldrb	r3, [r3, #2]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d10f      	bne.n	800abcc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2205      	movs	r2, #5
 800abb6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abcc:	2200      	movs	r2, #0
 800abce:	2100      	movs	r1, #0
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fb19 	bl	800b208 <USBH_CtlReq>
 800abd6:	4603      	mov	r3, r0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	789b      	ldrb	r3, [r3, #2]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d10e      	bne.n	800ac12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2209      	movs	r2, #9
 800abfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	887a      	ldrh	r2, [r7, #2]
 800ac04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac12:	2200      	movs	r2, #0
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 faf6 	bl	800b208 <USBH_CtlReq>
 800ac1c:	4603      	mov	r3, r0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	789b      	ldrb	r3, [r3, #2]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d10f      	bne.n	800ac5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2203      	movs	r2, #3
 800ac44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac46:	78fb      	ldrb	r3, [r7, #3]
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fad2 	bl	800b208 <USBH_CtlReq>
 800ac64:	4603      	mov	r3, r0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	789b      	ldrb	r3, [r3, #2]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d10f      	bne.n	800aca2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2202      	movs	r2, #2
 800ac86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800aca2:	2200      	movs	r2, #0
 800aca4:	2100      	movs	r1, #0
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 faae 	bl	800b208 <USBH_CtlReq>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	4613      	mov	r3, r2
 800acc2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	785a      	ldrb	r2, [r3, #1]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	3302      	adds	r3, #2
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	b29a      	uxth	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	3303      	adds	r3, #3
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	4313      	orrs	r3, r2
 800acea:	b29a      	uxth	r2, r3
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	791a      	ldrb	r2, [r3, #4]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	795a      	ldrb	r2, [r3, #5]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	799a      	ldrb	r2, [r3, #6]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	79da      	ldrb	r2, [r3, #7]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	79db      	ldrb	r3, [r3, #7]
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	dc11      	bgt.n	800ad3c <USBH_ParseDevDesc+0x86>
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	db16      	blt.n	800ad4a <USBH_ParseDevDesc+0x94>
 800ad1c:	3b08      	subs	r3, #8
 800ad1e:	2201      	movs	r2, #1
 800ad20:	fa02 f303 	lsl.w	r3, r2, r3
 800ad24:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ad28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	bf14      	ite	ne
 800ad30:	2301      	movne	r3, #1
 800ad32:	2300      	moveq	r3, #0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d102      	bne.n	800ad40 <USBH_ParseDevDesc+0x8a>
 800ad3a:	e006      	b.n	800ad4a <USBH_ParseDevDesc+0x94>
 800ad3c:	2b40      	cmp	r3, #64	; 0x40
 800ad3e:	d104      	bne.n	800ad4a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	79da      	ldrb	r2, [r3, #7]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	71da      	strb	r2, [r3, #7]
      break;
 800ad48:	e003      	b.n	800ad52 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2240      	movs	r2, #64	; 0x40
 800ad4e:	71da      	strb	r2, [r3, #7]
      break;
 800ad50:	bf00      	nop
  }

  if (length > 8U)
 800ad52:	88fb      	ldrh	r3, [r7, #6]
 800ad54:	2b08      	cmp	r3, #8
 800ad56:	d939      	bls.n	800adcc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	3309      	adds	r3, #9
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	330a      	adds	r3, #10
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	330b      	adds	r3, #11
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	021b      	lsls	r3, r3, #8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	330c      	adds	r3, #12
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	330d      	adds	r3, #13
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	7b9a      	ldrb	r2, [r3, #14]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	7bda      	ldrb	r2, [r3, #15]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	7c1a      	ldrb	r2, [r3, #16]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	7c5a      	ldrb	r2, [r3, #17]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	745a      	strb	r2, [r3, #17]
  }
}
 800adcc:	bf00      	nop
 800adce:	3714      	adds	r7, #20
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08c      	sub	sp, #48	; 0x30
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	785a      	ldrb	r2, [r3, #1]
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	3303      	adds	r3, #3
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae34:	bf28      	it	cs
 800ae36:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	791a      	ldrb	r2, [r3, #4]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	795a      	ldrb	r2, [r3, #5]
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	799a      	ldrb	r2, [r3, #6]
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	79da      	ldrb	r2, [r3, #7]
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	7a1a      	ldrb	r2, [r3, #8]
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	d002      	beq.n	800ae76 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	2209      	movs	r2, #9
 800ae74:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ae76:	88fb      	ldrh	r3, [r7, #6]
 800ae78:	2b09      	cmp	r3, #9
 800ae7a:	f240 809d 	bls.w	800afb8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae7e:	2309      	movs	r3, #9
 800ae80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae86:	e081      	b.n	800af8c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae88:	f107 0316 	add.w	r3, r7, #22
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae90:	f000 f99f 	bl	800b1d2 <USBH_GetNextDesc>
 800ae94:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	d176      	bne.n	800af8c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b09      	cmp	r3, #9
 800aea4:	d002      	beq.n	800aeac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	2209      	movs	r2, #9
 800aeaa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aeac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb0:	221a      	movs	r2, #26
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	6a3a      	ldr	r2, [r7, #32]
 800aeba:	4413      	add	r3, r2
 800aebc:	3302      	adds	r3, #2
 800aebe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aec2:	69f8      	ldr	r0, [r7, #28]
 800aec4:	f000 f87e 	bl	800afc4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aed2:	e043      	b.n	800af5c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aed4:	f107 0316 	add.w	r3, r7, #22
 800aed8:	4619      	mov	r1, r3
 800aeda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aedc:	f000 f979 	bl	800b1d2 <USBH_GetNextDesc>
 800aee0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b05      	cmp	r3, #5
 800aee8:	d138      	bne.n	800af5c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	795b      	ldrb	r3, [r3, #5]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d10f      	bne.n	800af12 <USBH_ParseCfgDesc+0x13a>
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	799b      	ldrb	r3, [r3, #6]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d10b      	bne.n	800af12 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	79db      	ldrb	r3, [r3, #7]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10f      	bne.n	800af22 <USBH_ParseCfgDesc+0x14a>
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b09      	cmp	r3, #9
 800af08:	d00b      	beq.n	800af22 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	2209      	movs	r2, #9
 800af0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af10:	e007      	b.n	800af22 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	2b07      	cmp	r3, #7
 800af18:	d004      	beq.n	800af24 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	2207      	movs	r2, #7
 800af1e:	701a      	strb	r2, [r3, #0]
 800af20:	e000      	b.n	800af24 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af22:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af2c:	3201      	adds	r2, #1
 800af2e:	00d2      	lsls	r2, r2, #3
 800af30:	211a      	movs	r1, #26
 800af32:	fb01 f303 	mul.w	r3, r1, r3
 800af36:	4413      	add	r3, r2
 800af38:	3308      	adds	r3, #8
 800af3a:	6a3a      	ldr	r2, [r7, #32]
 800af3c:	4413      	add	r3, r2
 800af3e:	3304      	adds	r3, #4
 800af40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800af42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af44:	69b9      	ldr	r1, [r7, #24]
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f000 f86b 	bl	800b022 <USBH_ParseEPDesc>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800af52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af56:	3301      	adds	r3, #1
 800af58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	791b      	ldrb	r3, [r3, #4]
 800af60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af64:	429a      	cmp	r2, r3
 800af66:	d204      	bcs.n	800af72 <USBH_ParseCfgDesc+0x19a>
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	885a      	ldrh	r2, [r3, #2]
 800af6c:	8afb      	ldrh	r3, [r7, #22]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d8b0      	bhi.n	800aed4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	791b      	ldrb	r3, [r3, #4]
 800af76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d201      	bcs.n	800af82 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800af7e:	2303      	movs	r3, #3
 800af80:	e01c      	b.n	800afbc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800af82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af86:	3301      	adds	r3, #1
 800af88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af90:	2b01      	cmp	r3, #1
 800af92:	d805      	bhi.n	800afa0 <USBH_ParseCfgDesc+0x1c8>
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	885a      	ldrh	r2, [r3, #2]
 800af98:	8afb      	ldrh	r3, [r7, #22]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	f63f af74 	bhi.w	800ae88 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	791b      	ldrb	r3, [r3, #4]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	bf28      	it	cs
 800afa8:	2302      	movcs	r3, #2
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d201      	bcs.n	800afb8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e001      	b.n	800afbc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800afb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3730      	adds	r7, #48	; 0x30
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781a      	ldrb	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	785a      	ldrb	r2, [r3, #1]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	789a      	ldrb	r2, [r3, #2]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	78da      	ldrb	r2, [r3, #3]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	791a      	ldrb	r2, [r3, #4]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	795a      	ldrb	r2, [r3, #5]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	799a      	ldrb	r2, [r3, #6]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	79da      	ldrb	r2, [r3, #7]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	7a1a      	ldrb	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	721a      	strb	r2, [r3, #8]
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b022:	b480      	push	{r7}
 800b024:	b087      	sub	sp, #28
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	785a      	ldrb	r2, [r3, #1]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	789a      	ldrb	r2, [r3, #2]
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	78da      	ldrb	r2, [r3, #3]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3304      	adds	r3, #4
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	b29a      	uxth	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3305      	adds	r3, #5
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	b29b      	uxth	r3, r3
 800b062:	021b      	lsls	r3, r3, #8
 800b064:	b29b      	uxth	r3, r3
 800b066:	4313      	orrs	r3, r2
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	799a      	ldrb	r2, [r3, #6]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	889b      	ldrh	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b07e:	2303      	movs	r3, #3
 800b080:	75fb      	strb	r3, [r7, #23]
 800b082:	e033      	b.n	800b0ec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	889b      	ldrh	r3, [r3, #4]
 800b088:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b08c:	f023 0307 	bic.w	r3, r3, #7
 800b090:	b29a      	uxth	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	889b      	ldrh	r3, [r3, #4]
 800b09a:	b21a      	sxth	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	b299      	uxth	r1, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3305      	adds	r3, #5
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	430b      	orrs	r3, r1
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d110      	bne.n	800b0de <USBH_ParseEPDesc+0xbc>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b299      	uxth	r1, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3305      	adds	r3, #5
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	b21b      	sxth	r3, r3
 800b0d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0da:	b21b      	sxth	r3, r3
 800b0dc:	e001      	b.n	800b0e2 <USBH_ParseEPDesc+0xc0>
 800b0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	b21b      	sxth	r3, r3
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d116      	bne.n	800b124 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	78db      	ldrb	r3, [r3, #3]
 800b0fa:	f003 0303 	and.w	r3, r3, #3
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d005      	beq.n	800b10e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	78db      	ldrb	r3, [r3, #3]
 800b106:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d127      	bne.n	800b15e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	799b      	ldrb	r3, [r3, #6]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <USBH_ParseEPDesc+0xfc>
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	799b      	ldrb	r3, [r3, #6]
 800b11a:	2b10      	cmp	r3, #16
 800b11c:	d91f      	bls.n	800b15e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b11e:	2303      	movs	r3, #3
 800b120:	75fb      	strb	r3, [r7, #23]
 800b122:	e01c      	b.n	800b15e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	78db      	ldrb	r3, [r3, #3]
 800b128:	f003 0303 	and.w	r3, r3, #3
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d10a      	bne.n	800b146 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	799b      	ldrb	r3, [r3, #6]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <USBH_ParseEPDesc+0x11e>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	799b      	ldrb	r3, [r3, #6]
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d90e      	bls.n	800b15e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b140:	2303      	movs	r3, #3
 800b142:	75fb      	strb	r3, [r7, #23]
 800b144:	e00b      	b.n	800b15e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	78db      	ldrb	r3, [r3, #3]
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d105      	bne.n	800b15e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	799b      	ldrb	r3, [r3, #6]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b15a:	2303      	movs	r3, #3
 800b15c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b160:	4618      	mov	r0, r3
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b087      	sub	sp, #28
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	4613      	mov	r3, r2
 800b178:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3301      	adds	r3, #1
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b03      	cmp	r3, #3
 800b182:	d120      	bne.n	800b1c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	1e9a      	subs	r2, r3, #2
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	bf28      	it	cs
 800b190:	4613      	movcs	r3, r2
 800b192:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3302      	adds	r3, #2
 800b198:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b19a:	2300      	movs	r3, #0
 800b19c:	82fb      	strh	r3, [r7, #22]
 800b19e:	e00b      	b.n	800b1b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b1a0:	8afb      	ldrh	r3, [r7, #22]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	781a      	ldrb	r2, [r3, #0]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b1b2:	8afb      	ldrh	r3, [r7, #22]
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	82fb      	strh	r3, [r7, #22]
 800b1b8:	8afa      	ldrh	r2, [r7, #22]
 800b1ba:	8abb      	ldrh	r3, [r7, #20]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d3ef      	bcc.n	800b1a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	701a      	strb	r2, [r3, #0]
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b085      	sub	sp, #20
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	881a      	ldrh	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4413      	add	r3, r2
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b216:	2301      	movs	r3, #1
 800b218:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	789b      	ldrb	r3, [r3, #2]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d002      	beq.n	800b228 <USBH_CtlReq+0x20>
 800b222:	2b02      	cmp	r3, #2
 800b224:	d00f      	beq.n	800b246 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b226:	e027      	b.n	800b278 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	88fa      	ldrh	r2, [r7, #6]
 800b232:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2202      	movs	r2, #2
 800b23e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b240:	2301      	movs	r3, #1
 800b242:	75fb      	strb	r3, [r7, #23]
      break;
 800b244:	e018      	b.n	800b278 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f000 f81c 	bl	800b284 <USBH_HandleControl>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <USBH_CtlReq+0x54>
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d106      	bne.n	800b26a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2201      	movs	r2, #1
 800b260:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	761a      	strb	r2, [r3, #24]
      break;
 800b268:	e005      	b.n	800b276 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d102      	bne.n	800b276 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	709a      	strb	r2, [r3, #2]
      break;
 800b276:	bf00      	nop
  }
  return status;
 800b278:	7dfb      	ldrb	r3, [r7, #23]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af02      	add	r7, sp, #8
 800b28a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b28c:	2301      	movs	r3, #1
 800b28e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b290:	2300      	movs	r3, #0
 800b292:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	7e1b      	ldrb	r3, [r3, #24]
 800b298:	3b01      	subs	r3, #1
 800b29a:	2b0a      	cmp	r3, #10
 800b29c:	f200 8156 	bhi.w	800b54c <USBH_HandleControl+0x2c8>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <USBH_HandleControl+0x24>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2d5 	.word	0x0800b2d5
 800b2ac:	0800b2ef 	.word	0x0800b2ef
 800b2b0:	0800b359 	.word	0x0800b359
 800b2b4:	0800b37f 	.word	0x0800b37f
 800b2b8:	0800b3b7 	.word	0x0800b3b7
 800b2bc:	0800b3e1 	.word	0x0800b3e1
 800b2c0:	0800b433 	.word	0x0800b433
 800b2c4:	0800b455 	.word	0x0800b455
 800b2c8:	0800b491 	.word	0x0800b491
 800b2cc:	0800b4b7 	.word	0x0800b4b7
 800b2d0:	0800b4f5 	.word	0x0800b4f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f103 0110 	add.w	r1, r3, #16
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	795b      	ldrb	r3, [r3, #5]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f943 	bl	800b56c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	761a      	strb	r2, [r3, #24]
      break;
 800b2ec:	e139      	b.n	800b562 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	795b      	ldrb	r3, [r3, #5]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f003 f853 	bl	800e3a0 <USBH_LL_GetURBState>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2fe:	7bbb      	ldrb	r3, [r7, #14]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d11e      	bne.n	800b342 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7c1b      	ldrb	r3, [r3, #16]
 800b308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b30c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	8adb      	ldrh	r3, [r3, #22]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b316:	7b7b      	ldrb	r3, [r7, #13]
 800b318:	2b80      	cmp	r3, #128	; 0x80
 800b31a:	d103      	bne.n	800b324 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2203      	movs	r2, #3
 800b320:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b322:	e115      	b.n	800b550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2205      	movs	r2, #5
 800b328:	761a      	strb	r2, [r3, #24]
      break;
 800b32a:	e111      	b.n	800b550 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b32c:	7b7b      	ldrb	r3, [r7, #13]
 800b32e:	2b80      	cmp	r3, #128	; 0x80
 800b330:	d103      	bne.n	800b33a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2209      	movs	r2, #9
 800b336:	761a      	strb	r2, [r3, #24]
      break;
 800b338:	e10a      	b.n	800b550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2207      	movs	r2, #7
 800b33e:	761a      	strb	r2, [r3, #24]
      break;
 800b340:	e106      	b.n	800b550 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	2b04      	cmp	r3, #4
 800b346:	d003      	beq.n	800b350 <USBH_HandleControl+0xcc>
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	f040 8100 	bne.w	800b550 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	220b      	movs	r2, #11
 800b354:	761a      	strb	r2, [r3, #24]
      break;
 800b356:	e0fb      	b.n	800b550 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6899      	ldr	r1, [r3, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	899a      	ldrh	r2, [r3, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	791b      	ldrb	r3, [r3, #4]
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f93a 	bl	800b5ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2204      	movs	r2, #4
 800b37a:	761a      	strb	r2, [r3, #24]
      break;
 800b37c:	e0f1      	b.n	800b562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	791b      	ldrb	r3, [r3, #4]
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f003 f80b 	bl	800e3a0 <USBH_LL_GetURBState>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d102      	bne.n	800b39a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2209      	movs	r2, #9
 800b398:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	2b05      	cmp	r3, #5
 800b39e:	d102      	bne.n	800b3a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3a4:	e0d6      	b.n	800b554 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	f040 80d3 	bne.w	800b554 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	220b      	movs	r2, #11
 800b3b2:	761a      	strb	r2, [r3, #24]
      break;
 800b3b4:	e0ce      	b.n	800b554 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6899      	ldr	r1, [r3, #8]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	899a      	ldrh	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	795b      	ldrb	r3, [r3, #5]
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	9000      	str	r0, [sp, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f8ea 	bl	800b5a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2206      	movs	r2, #6
 800b3dc:	761a      	strb	r2, [r3, #24]
      break;
 800b3de:	e0c0      	b.n	800b562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	795b      	ldrb	r3, [r3, #5]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f002 ffda 	bl	800e3a0 <USBH_LL_GetURBState>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d103      	bne.n	800b3fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2207      	movs	r2, #7
 800b3fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3fc:	e0ac      	b.n	800b558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b3fe:	7bbb      	ldrb	r3, [r7, #14]
 800b400:	2b05      	cmp	r3, #5
 800b402:	d105      	bne.n	800b410 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	220c      	movs	r2, #12
 800b408:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b40a:	2303      	movs	r3, #3
 800b40c:	73fb      	strb	r3, [r7, #15]
      break;
 800b40e:	e0a3      	b.n	800b558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d103      	bne.n	800b41e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2205      	movs	r2, #5
 800b41a:	761a      	strb	r2, [r3, #24]
      break;
 800b41c:	e09c      	b.n	800b558 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	2b04      	cmp	r3, #4
 800b422:	f040 8099 	bne.w	800b558 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	220b      	movs	r2, #11
 800b42a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b42c:	2302      	movs	r3, #2
 800b42e:	73fb      	strb	r3, [r7, #15]
      break;
 800b430:	e092      	b.n	800b558 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	2100      	movs	r1, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f8d5 	bl	800b5ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b446:	b29a      	uxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2208      	movs	r2, #8
 800b450:	761a      	strb	r2, [r3, #24]

      break;
 800b452:	e086      	b.n	800b562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	791b      	ldrb	r3, [r3, #4]
 800b458:	4619      	mov	r1, r3
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f002 ffa0 	bl	800e3a0 <USBH_LL_GetURBState>
 800b460:	4603      	mov	r3, r0
 800b462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b464:	7bbb      	ldrb	r3, [r7, #14]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d105      	bne.n	800b476 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	220d      	movs	r2, #13
 800b46e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b474:	e072      	b.n	800b55c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b04      	cmp	r3, #4
 800b47a:	d103      	bne.n	800b484 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	220b      	movs	r2, #11
 800b480:	761a      	strb	r2, [r3, #24]
      break;
 800b482:	e06b      	b.n	800b55c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	2b05      	cmp	r3, #5
 800b488:	d168      	bne.n	800b55c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b48a:	2303      	movs	r3, #3
 800b48c:	73fb      	strb	r3, [r7, #15]
      break;
 800b48e:	e065      	b.n	800b55c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	795b      	ldrb	r3, [r3, #5]
 800b494:	2201      	movs	r2, #1
 800b496:	9200      	str	r2, [sp, #0]
 800b498:	2200      	movs	r2, #0
 800b49a:	2100      	movs	r1, #0
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f87f 	bl	800b5a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	220a      	movs	r2, #10
 800b4b2:	761a      	strb	r2, [r3, #24]
      break;
 800b4b4:	e055      	b.n	800b562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	795b      	ldrb	r3, [r3, #5]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f002 ff6f 	bl	800e3a0 <USBH_LL_GetURBState>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b4c6:	7bbb      	ldrb	r3, [r7, #14]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d105      	bne.n	800b4d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	220d      	movs	r2, #13
 800b4d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4d6:	e043      	b.n	800b560 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d103      	bne.n	800b4e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2209      	movs	r2, #9
 800b4e2:	761a      	strb	r2, [r3, #24]
      break;
 800b4e4:	e03c      	b.n	800b560 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	d139      	bne.n	800b560 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	220b      	movs	r2, #11
 800b4f0:	761a      	strb	r2, [r3, #24]
      break;
 800b4f2:	e035      	b.n	800b560 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7e5b      	ldrb	r3, [r3, #25]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	765a      	strb	r2, [r3, #25]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7e5b      	ldrb	r3, [r3, #25]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d806      	bhi.n	800b516 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b514:	e025      	b.n	800b562 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b51c:	2106      	movs	r1, #6
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	795b      	ldrb	r3, [r3, #5]
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f90c 	bl	800b74c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	791b      	ldrb	r3, [r3, #4]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f906 	bl	800b74c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b546:	2302      	movs	r3, #2
 800b548:	73fb      	strb	r3, [r7, #15]
      break;
 800b54a:	e00a      	b.n	800b562 <USBH_HandleControl+0x2de>

    default:
      break;
 800b54c:	bf00      	nop
 800b54e:	e008      	b.n	800b562 <USBH_HandleControl+0x2de>
      break;
 800b550:	bf00      	nop
 800b552:	e006      	b.n	800b562 <USBH_HandleControl+0x2de>
      break;
 800b554:	bf00      	nop
 800b556:	e004      	b.n	800b562 <USBH_HandleControl+0x2de>
      break;
 800b558:	bf00      	nop
 800b55a:	e002      	b.n	800b562 <USBH_HandleControl+0x2de>
      break;
 800b55c:	bf00      	nop
 800b55e:	e000      	b.n	800b562 <USBH_HandleControl+0x2de>
      break;
 800b560:	bf00      	nop
  }

  return status;
 800b562:	7bfb      	ldrb	r3, [r7, #15]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af04      	add	r7, sp, #16
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b57a:	79f9      	ldrb	r1, [r7, #7]
 800b57c:	2300      	movs	r3, #0
 800b57e:	9303      	str	r3, [sp, #12]
 800b580:	2308      	movs	r3, #8
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	2300      	movs	r3, #0
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	2200      	movs	r2, #0
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f002 fed4 	bl	800e33e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af04      	add	r7, sp, #16
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	80fb      	strh	r3, [r7, #6]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5c4:	7979      	ldrb	r1, [r7, #5]
 800b5c6:	7e3b      	ldrb	r3, [r7, #24]
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	9302      	str	r3, [sp, #8]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	2200      	movs	r2, #0
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f002 feaf 	bl	800e33e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b088      	sub	sp, #32
 800b5ee:	af04      	add	r7, sp, #16
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	80fb      	strh	r3, [r7, #6]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b600:	7979      	ldrb	r1, [r7, #5]
 800b602:	2300      	movs	r3, #0
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	88fb      	ldrh	r3, [r7, #6]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	2301      	movs	r3, #1
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	2201      	movs	r2, #1
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f002 fe91 	bl	800e33e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b61c:	2300      	movs	r3, #0

}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b088      	sub	sp, #32
 800b62a:	af04      	add	r7, sp, #16
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	4611      	mov	r1, r2
 800b632:	461a      	mov	r2, r3
 800b634:	460b      	mov	r3, r1
 800b636:	80fb      	strh	r3, [r7, #6]
 800b638:	4613      	mov	r3, r2
 800b63a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b64a:	7979      	ldrb	r1, [r7, #5]
 800b64c:	7e3b      	ldrb	r3, [r7, #24]
 800b64e:	9303      	str	r3, [sp, #12]
 800b650:	88fb      	ldrh	r3, [r7, #6]
 800b652:	9302      	str	r3, [sp, #8]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	2301      	movs	r3, #1
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2302      	movs	r3, #2
 800b65e:	2200      	movs	r2, #0
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f002 fe6c 	bl	800e33e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af04      	add	r7, sp, #16
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	4611      	mov	r1, r2
 800b67c:	461a      	mov	r2, r3
 800b67e:	460b      	mov	r3, r1
 800b680:	80fb      	strh	r3, [r7, #6]
 800b682:	4613      	mov	r3, r2
 800b684:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b686:	7979      	ldrb	r1, [r7, #5]
 800b688:	2300      	movs	r3, #0
 800b68a:	9303      	str	r3, [sp, #12]
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2301      	movs	r3, #1
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2302      	movs	r3, #2
 800b69a:	2201      	movs	r2, #1
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f002 fe4e 	bl	800e33e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af04      	add	r7, sp, #16
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	70fb      	strb	r3, [r7, #3]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	70bb      	strb	r3, [r7, #2]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b6c6:	7878      	ldrb	r0, [r7, #1]
 800b6c8:	78ba      	ldrb	r2, [r7, #2]
 800b6ca:	78f9      	ldrb	r1, [r7, #3]
 800b6cc:	8b3b      	ldrh	r3, [r7, #24]
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	7d3b      	ldrb	r3, [r7, #20]
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	7c3b      	ldrb	r3, [r7, #16]
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4603      	mov	r3, r0
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f002 fde1 	bl	800e2a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f002 fe00 	bl	800e300 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f836 	bl	800b788 <USBH_GetFreePipe>
 800b71c:	4603      	mov	r3, r0
 800b71e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b720:	89fb      	ldrh	r3, [r7, #14]
 800b722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b726:	4293      	cmp	r3, r2
 800b728:	d00a      	beq.n	800b740 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b72a:	78fa      	ldrb	r2, [r7, #3]
 800b72c:	89fb      	ldrh	r3, [r7, #14]
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b736:	6879      	ldr	r1, [r7, #4]
 800b738:	33e0      	adds	r3, #224	; 0xe0
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	440b      	add	r3, r1
 800b73e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b740:	89fb      	ldrh	r3, [r7, #14]
 800b742:	b2db      	uxtb	r3, r3
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b758:	78fb      	ldrb	r3, [r7, #3]
 800b75a:	2b0f      	cmp	r3, #15
 800b75c:	d80d      	bhi.n	800b77a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b75e:	78fb      	ldrb	r3, [r7, #3]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	33e0      	adds	r3, #224	; 0xe0
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	78fb      	ldrb	r3, [r7, #3]
 800b76c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b770:	6879      	ldr	r1, [r7, #4]
 800b772:	33e0      	adds	r3, #224	; 0xe0
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	440b      	add	r3, r1
 800b778:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b790:	2300      	movs	r3, #0
 800b792:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
 800b798:	e00f      	b.n	800b7ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	33e0      	adds	r3, #224	; 0xe0
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	e007      	b.n	800b7c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	73fb      	strb	r3, [r7, #15]
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	2b0f      	cmp	r3, #15
 800b7be:	d9ec      	bls.n	800b79a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	4a08      	ldr	r2, [pc, #32]	; (800b800 <disk_status+0x30>)
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	79fa      	ldrb	r2, [r7, #7]
 800b7e8:	4905      	ldr	r1, [pc, #20]	; (800b800 <disk_status+0x30>)
 800b7ea:	440a      	add	r2, r1
 800b7ec:	7a12      	ldrb	r2, [r2, #8]
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	4798      	blx	r3
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20001720 	.word	0x20001720

0800b804 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	4a0d      	ldr	r2, [pc, #52]	; (800b84c <disk_initialize+0x48>)
 800b816:	5cd3      	ldrb	r3, [r2, r3]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d111      	bne.n	800b840 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <disk_initialize+0x48>)
 800b820:	2101      	movs	r1, #1
 800b822:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <disk_initialize+0x48>)
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	79fa      	ldrb	r2, [r7, #7]
 800b832:	4906      	ldr	r1, [pc, #24]	; (800b84c <disk_initialize+0x48>)
 800b834:	440a      	add	r2, r1
 800b836:	7a12      	ldrb	r2, [r2, #8]
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20001720 	.word	0x20001720

0800b850 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <disk_read+0x3c>)
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	689c      	ldr	r4, [r3, #8]
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	4a07      	ldr	r2, [pc, #28]	; (800b88c <disk_read+0x3c>)
 800b870:	4413      	add	r3, r2
 800b872:	7a18      	ldrb	r0, [r3, #8]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	47a0      	blx	r4
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
}
 800b882:	4618      	mov	r0, r3
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	bd90      	pop	{r4, r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20001720 	.word	0x20001720

0800b890 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b890:	b590      	push	{r4, r7, lr}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	4a0a      	ldr	r2, [pc, #40]	; (800b8cc <disk_write+0x3c>)
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	68dc      	ldr	r4, [r3, #12]
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <disk_write+0x3c>)
 800b8b0:	4413      	add	r3, r2
 800b8b2:	7a18      	ldrb	r0, [r3, #8]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	47a0      	blx	r4
 800b8bc:	4603      	mov	r3, r0
 800b8be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd90      	pop	{r4, r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20001720 	.word	0x20001720

0800b8d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	603a      	str	r2, [r7, #0]
 800b8da:	71fb      	strb	r3, [r7, #7]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <disk_ioctl+0x38>)
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	79fa      	ldrb	r2, [r7, #7]
 800b8ee:	4906      	ldr	r1, [pc, #24]	; (800b908 <disk_ioctl+0x38>)
 800b8f0:	440a      	add	r2, r1
 800b8f2:	7a10      	ldrb	r0, [r2, #8]
 800b8f4:	79b9      	ldrb	r1, [r7, #6]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	20001720 	.word	0x20001720

0800b90c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3301      	adds	r3, #1
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	b21a      	sxth	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b21b      	sxth	r3, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b92e:	89fb      	ldrh	r3, [r7, #14]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3303      	adds	r3, #3
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	3202      	adds	r2, #2
 800b954:	7812      	ldrb	r2, [r2, #0]
 800b956:	4313      	orrs	r3, r2
 800b958:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	3201      	adds	r2, #1
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	4313      	orrs	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7812      	ldrb	r2, [r2, #0]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
	return rv;
 800b974:	68fb      	ldr	r3, [r7, #12]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	887a      	ldrh	r2, [r7, #2]
 800b996:	b2d2      	uxtb	r2, r2
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	887b      	ldrh	r3, [r7, #2]
 800b99c:	0a1b      	lsrs	r3, r3, #8
 800b99e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	887a      	ldrh	r2, [r7, #2]
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	701a      	strb	r2, [r3, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	b2d2      	uxtb	r2, r2
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	0a1b      	lsrs	r3, r3, #8
 800b9d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	b2d2      	uxtb	r2, r2
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	0a1b      	lsrs	r3, r3, #8
 800b9e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	0a1b      	lsrs	r3, r3, #8
 800b9f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	b2d2      	uxtb	r2, r2
 800ba02:	701a      	strb	r2, [r3, #0]
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	1c53      	adds	r3, r2, #1
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	1c59      	adds	r1, r3, #1
 800ba34:	6179      	str	r1, [r7, #20]
 800ba36:	7812      	ldrb	r2, [r2, #0]
 800ba38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	607b      	str	r3, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f1      	bne.n	800ba2a <mem_cpy+0x1a>
	}
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	617a      	str	r2, [r7, #20]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	607b      	str	r3, [r7, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1f3      	bne.n	800ba62 <mem_set+0x10>
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba88:	b480      	push	{r7}
 800ba8a:	b089      	sub	sp, #36	; 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	61fa      	str	r2, [r7, #28]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	4619      	mov	r1, r3
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	61ba      	str	r2, [r7, #24]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	1acb      	subs	r3, r1, r3
 800bab4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3b01      	subs	r3, #1
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <mem_cmp+0x40>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d0eb      	beq.n	800baa0 <mem_cmp+0x18>

	return r;
 800bac8:	697b      	ldr	r3, [r7, #20]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3724      	adds	r7, #36	; 0x24
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bae0:	e002      	b.n	800bae8 <chk_chr+0x12>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3301      	adds	r3, #1
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <chk_chr+0x26>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	461a      	mov	r2, r3
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d1f2      	bne.n	800bae2 <chk_chr+0xc>
	return *str;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	781b      	ldrb	r3, [r3, #0]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e029      	b.n	800bb74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb20:	4a27      	ldr	r2, [pc, #156]	; (800bbc0 <chk_lock+0xb4>)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	4413      	add	r3, r2
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01d      	beq.n	800bb6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb2e:	4a24      	ldr	r2, [pc, #144]	; (800bbc0 <chk_lock+0xb4>)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	4413      	add	r3, r2
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d116      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb40:	4a1f      	ldr	r2, [pc, #124]	; (800bbc0 <chk_lock+0xb4>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4413      	add	r3, r2
 800bb48:	3304      	adds	r3, #4
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d10c      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb54:	4a1a      	ldr	r2, [pc, #104]	; (800bbc0 <chk_lock+0xb4>)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	4413      	add	r3, r2
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d102      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb68:	e007      	b.n	800bb7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d9d2      	bls.n	800bb20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d109      	bne.n	800bb94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <chk_lock+0x80>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d101      	bne.n	800bb90 <chk_lock+0x84>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e010      	b.n	800bbb2 <chk_lock+0xa6>
 800bb90:	2312      	movs	r3, #18
 800bb92:	e00e      	b.n	800bbb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d108      	bne.n	800bbac <chk_lock+0xa0>
 800bb9a:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <chk_lock+0xb4>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	330c      	adds	r3, #12
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbaa:	d101      	bne.n	800bbb0 <chk_lock+0xa4>
 800bbac:	2310      	movs	r3, #16
 800bbae:	e000      	b.n	800bbb2 <chk_lock+0xa6>
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20001700 	.word	0x20001700

0800bbc4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e002      	b.n	800bbd6 <enq_lock+0x12>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	607b      	str	r3, [r7, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d806      	bhi.n	800bbea <enq_lock+0x26>
 800bbdc:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <enq_lock+0x40>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1f2      	bne.n	800bbd0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	bf14      	ite	ne
 800bbf0:	2301      	movne	r3, #1
 800bbf2:	2300      	moveq	r3, #0
 800bbf4:	b2db      	uxtb	r3, r3
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	20001700 	.word	0x20001700

0800bc08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	e01f      	b.n	800bc58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc18:	4a41      	ldr	r2, [pc, #260]	; (800bd20 <inc_lock+0x118>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	4413      	add	r3, r2
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d113      	bne.n	800bc52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc2a:	4a3d      	ldr	r2, [pc, #244]	; (800bd20 <inc_lock+0x118>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	4413      	add	r3, r2
 800bc32:	3304      	adds	r3, #4
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d109      	bne.n	800bc52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc3e:	4a38      	ldr	r2, [pc, #224]	; (800bd20 <inc_lock+0x118>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	011b      	lsls	r3, r3, #4
 800bc44:	4413      	add	r3, r2
 800bc46:	3308      	adds	r3, #8
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d006      	beq.n	800bc60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3301      	adds	r3, #1
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d9dc      	bls.n	800bc18 <inc_lock+0x10>
 800bc5e:	e000      	b.n	800bc62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d132      	bne.n	800bcce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e002      	b.n	800bc74 <inc_lock+0x6c>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3301      	adds	r3, #1
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d806      	bhi.n	800bc88 <inc_lock+0x80>
 800bc7a:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <inc_lock+0x118>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	4413      	add	r3, r2
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1f2      	bne.n	800bc6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d101      	bne.n	800bc92 <inc_lock+0x8a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e040      	b.n	800bd14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4922      	ldr	r1, [pc, #136]	; (800bd20 <inc_lock+0x118>)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	440b      	add	r3, r1
 800bc9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	491e      	ldr	r1, [pc, #120]	; (800bd20 <inc_lock+0x118>)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	440b      	add	r3, r1
 800bcac:	3304      	adds	r3, #4
 800bcae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	695a      	ldr	r2, [r3, #20]
 800bcb4:	491a      	ldr	r1, [pc, #104]	; (800bd20 <inc_lock+0x118>)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	011b      	lsls	r3, r3, #4
 800bcba:	440b      	add	r3, r1
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bcc0:	4a17      	ldr	r2, [pc, #92]	; (800bd20 <inc_lock+0x118>)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	4413      	add	r3, r2
 800bcc8:	330c      	adds	r3, #12
 800bcca:	2200      	movs	r2, #0
 800bccc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <inc_lock+0xe0>
 800bcd4:	4a12      	ldr	r2, [pc, #72]	; (800bd20 <inc_lock+0x118>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	330c      	adds	r3, #12
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <inc_lock+0xe0>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e015      	b.n	800bd14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d108      	bne.n	800bd00 <inc_lock+0xf8>
 800bcee:	4a0c      	ldr	r2, [pc, #48]	; (800bd20 <inc_lock+0x118>)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	011b      	lsls	r3, r3, #4
 800bcf4:	4413      	add	r3, r2
 800bcf6:	330c      	adds	r3, #12
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	e001      	b.n	800bd04 <inc_lock+0xfc>
 800bd00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd04:	4906      	ldr	r1, [pc, #24]	; (800bd20 <inc_lock+0x118>)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	440b      	add	r3, r1
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20001700 	.word	0x20001700

0800bd24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	607b      	str	r3, [r7, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d825      	bhi.n	800bd84 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd38:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <dec_lock+0x74>)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	4413      	add	r3, r2
 800bd40:	330c      	adds	r3, #12
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd46:	89fb      	ldrh	r3, [r7, #14]
 800bd48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd4c:	d101      	bne.n	800bd52 <dec_lock+0x2e>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd52:	89fb      	ldrh	r3, [r7, #14]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <dec_lock+0x3a>
 800bd58:	89fb      	ldrh	r3, [r7, #14]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd5e:	4a0e      	ldr	r2, [pc, #56]	; (800bd98 <dec_lock+0x74>)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	4413      	add	r3, r2
 800bd66:	330c      	adds	r3, #12
 800bd68:	89fa      	ldrh	r2, [r7, #14]
 800bd6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd6c:	89fb      	ldrh	r3, [r7, #14]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <dec_lock+0x5a>
 800bd72:	4a09      	ldr	r2, [pc, #36]	; (800bd98 <dec_lock+0x74>)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	011b      	lsls	r3, r3, #4
 800bd78:	4413      	add	r3, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	737b      	strb	r3, [r7, #13]
 800bd82:	e001      	b.n	800bd88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd84:	2302      	movs	r3, #2
 800bd86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd88:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20001700 	.word	0x20001700

0800bd9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	e010      	b.n	800bdcc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bdaa:	4a0d      	ldr	r2, [pc, #52]	; (800bde0 <clear_lock+0x44>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d105      	bne.n	800bdc6 <clear_lock+0x2a>
 800bdba:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <clear_lock+0x44>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	4413      	add	r3, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d9eb      	bls.n	800bdaa <clear_lock+0xe>
	}
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	20001700 	.word	0x20001700

0800bde4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	78db      	ldrb	r3, [r3, #3]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d034      	beq.n	800be62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	7858      	ldrb	r0, [r3, #1]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be08:	2301      	movs	r3, #1
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	f7ff fd40 	bl	800b890 <disk_write>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <sync_window+0x38>
			res = FR_DISK_ERR;
 800be16:	2301      	movs	r3, #1
 800be18:	73fb      	strb	r3, [r7, #15]
 800be1a:	e022      	b.n	800be62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	1ad2      	subs	r2, r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d217      	bcs.n	800be62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	789b      	ldrb	r3, [r3, #2]
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	e010      	b.n	800be5c <sync_window+0x78>
					wsect += fs->fsize;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	4413      	add	r3, r2
 800be42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7858      	ldrb	r0, [r3, #1]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be4e:	2301      	movs	r3, #1
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	f7ff fd1d 	bl	800b890 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	3b01      	subs	r3, #1
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d8eb      	bhi.n	800be3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d01b      	beq.n	800bebc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff ffad 	bl	800bde4 <sync_window>
 800be8a:	4603      	mov	r3, r0
 800be8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d113      	bne.n	800bebc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7858      	ldrb	r0, [r3, #1]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be9e:	2301      	movs	r3, #1
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	f7ff fcd5 	bl	800b850 <disk_read>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ff87 	bl	800bde4 <sync_window>
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d158      	bne.n	800bf92 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d148      	bne.n	800bf7a <sync_fs+0xb2>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	791b      	ldrb	r3, [r3, #4]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d144      	bne.n	800bf7a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3330      	adds	r3, #48	; 0x30
 800bef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bef8:	2100      	movs	r1, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fda9 	bl	800ba52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3330      	adds	r3, #48	; 0x30
 800bf04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf08:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff fd38 	bl	800b982 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3330      	adds	r3, #48	; 0x30
 800bf16:	4921      	ldr	r1, [pc, #132]	; (800bf9c <sync_fs+0xd4>)
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fd4d 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3330      	adds	r3, #48	; 0x30
 800bf22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf26:	491e      	ldr	r1, [pc, #120]	; (800bfa0 <sync_fs+0xd8>)
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7ff fd45 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3330      	adds	r3, #48	; 0x30
 800bf32:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f7ff fd3b 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	3330      	adds	r3, #48	; 0x30
 800bf46:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4610      	mov	r0, r2
 800bf52:	f7ff fd31 	bl	800b9b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	7858      	ldrb	r0, [r3, #1]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	2301      	movs	r3, #1
 800bf70:	f7ff fc8e 	bl	800b890 <disk_write>
			fs->fsi_flag = 0;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	785b      	ldrb	r3, [r3, #1]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fca4 	bl	800b8d0 <disk_ioctl>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <sync_fs+0xca>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	41615252 	.word	0x41615252
 800bfa0:	61417272 	.word	0x61417272

0800bfa4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	3b02      	subs	r3, #2
 800bfb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	3b02      	subs	r3, #2
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d301      	bcc.n	800bfc4 <clust2sect+0x20>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e008      	b.n	800bfd6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	895b      	ldrh	r3, [r3, #10]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	fb03 f202 	mul.w	r2, r3, r2
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd4:	4413      	add	r3, r2
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b086      	sub	sp, #24
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d904      	bls.n	800c002 <get_fat+0x20>
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c002:	2301      	movs	r3, #1
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	e08f      	b.n	800c128 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c008:	f04f 33ff 	mov.w	r3, #4294967295
 800c00c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b03      	cmp	r3, #3
 800c014:	d062      	beq.n	800c0dc <get_fat+0xfa>
 800c016:	2b03      	cmp	r3, #3
 800c018:	dc7c      	bgt.n	800c114 <get_fat+0x132>
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d002      	beq.n	800c024 <get_fat+0x42>
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d042      	beq.n	800c0a8 <get_fat+0xc6>
 800c022:	e077      	b.n	800c114 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	085b      	lsrs	r3, r3, #1
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	4413      	add	r3, r2
 800c030:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	6a1a      	ldr	r2, [r3, #32]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	0a5b      	lsrs	r3, r3, #9
 800c03a:	4413      	add	r3, r2
 800c03c:	4619      	mov	r1, r3
 800c03e:	6938      	ldr	r0, [r7, #16]
 800c040:	f7ff ff14 	bl	800be6c <move_window>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d167      	bne.n	800c11a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	1c5a      	adds	r2, r3, #1
 800c04e:	60fa      	str	r2, [r7, #12]
 800c050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	4413      	add	r3, r2
 800c058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c05c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6a1a      	ldr	r2, [r3, #32]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	0a5b      	lsrs	r3, r3, #9
 800c066:	4413      	add	r3, r2
 800c068:	4619      	mov	r1, r3
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f7ff fefe 	bl	800be6c <move_window>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d153      	bne.n	800c11e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4413      	add	r3, r2
 800c080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	461a      	mov	r2, r3
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <get_fat+0xbc>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	091b      	lsrs	r3, r3, #4
 800c09c:	e002      	b.n	800c0a4 <get_fat+0xc2>
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0a4:	617b      	str	r3, [r7, #20]
			break;
 800c0a6:	e03f      	b.n	800c128 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	6a1a      	ldr	r2, [r3, #32]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	4413      	add	r3, r2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6938      	ldr	r0, [r7, #16]
 800c0b6:	f7ff fed9 	bl	800be6c <move_window>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d130      	bne.n	800c122 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0ce:	4413      	add	r3, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff fc1b 	bl	800b90c <ld_word>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	617b      	str	r3, [r7, #20]
			break;
 800c0da:	e025      	b.n	800c128 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	6a1a      	ldr	r2, [r3, #32]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	09db      	lsrs	r3, r3, #7
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6938      	ldr	r0, [r7, #16]
 800c0ea:	f7ff febf 	bl	800be6c <move_window>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d118      	bne.n	800c126 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c102:	4413      	add	r3, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fc19 	bl	800b93c <ld_dword>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c110:	617b      	str	r3, [r7, #20]
			break;
 800c112:	e009      	b.n	800c128 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c114:	2301      	movs	r3, #1
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e006      	b.n	800c128 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c11a:	bf00      	nop
 800c11c:	e004      	b.n	800c128 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c11e:	bf00      	nop
 800c120:	e002      	b.n	800c128 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c122:	bf00      	nop
 800c124:	e000      	b.n	800c128 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c126:	bf00      	nop
		}
	}

	return val;
 800c128:	697b      	ldr	r3, [r7, #20]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c132:	b590      	push	{r4, r7, lr}
 800c134:	b089      	sub	sp, #36	; 0x24
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c13e:	2302      	movs	r3, #2
 800c140:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b01      	cmp	r3, #1
 800c146:	f240 80d2 	bls.w	800c2ee <put_fat+0x1bc>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	429a      	cmp	r2, r3
 800c152:	f080 80cc 	bcs.w	800c2ee <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	f000 8096 	beq.w	800c28c <put_fat+0x15a>
 800c160:	2b03      	cmp	r3, #3
 800c162:	f300 80cd 	bgt.w	800c300 <put_fat+0x1ce>
 800c166:	2b01      	cmp	r3, #1
 800c168:	d002      	beq.n	800c170 <put_fat+0x3e>
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d06e      	beq.n	800c24c <put_fat+0x11a>
 800c16e:	e0c7      	b.n	800c300 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	61bb      	str	r3, [r7, #24]
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	085b      	lsrs	r3, r3, #1
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	4413      	add	r3, r2
 800c17c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6a1a      	ldr	r2, [r3, #32]
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	0a5b      	lsrs	r3, r3, #9
 800c186:	4413      	add	r3, r2
 800c188:	4619      	mov	r1, r3
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f7ff fe6e 	bl	800be6c <move_window>
 800c190:	4603      	mov	r3, r0
 800c192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c194:	7ffb      	ldrb	r3, [r7, #31]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f040 80ab 	bne.w	800c2f2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	1c59      	adds	r1, r3, #1
 800c1a6:	61b9      	str	r1, [r7, #24]
 800c1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ac:	4413      	add	r3, r2
 800c1ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00d      	beq.n	800c1d6 <put_fat+0xa4>
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	f003 030f 	and.w	r3, r3, #15
 800c1c4:	b25a      	sxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	011b      	lsls	r3, r3, #4
 800c1cc:	b25b      	sxtb	r3, r3
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	b25b      	sxtb	r3, r3
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	e001      	b.n	800c1da <put_fat+0xa8>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6a1a      	ldr	r2, [r3, #32]
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	0a5b      	lsrs	r3, r3, #9
 800c1ec:	4413      	add	r3, r2
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f7ff fe3b 	bl	800be6c <move_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1fa:	7ffb      	ldrb	r3, [r7, #31]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d17a      	bne.n	800c2f6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20c:	4413      	add	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <put_fat+0xf0>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	091b      	lsrs	r3, r3, #4
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	e00e      	b.n	800c240 <put_fat+0x10e>
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b25b      	sxtb	r3, r3
 800c228:	f023 030f 	bic.w	r3, r3, #15
 800c22c:	b25a      	sxtb	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	0a1b      	lsrs	r3, r3, #8
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	b25b      	sxtb	r3, r3
 800c23a:	4313      	orrs	r3, r2
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2201      	movs	r2, #1
 800c248:	70da      	strb	r2, [r3, #3]
			break;
 800c24a:	e059      	b.n	800c300 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6a1a      	ldr	r2, [r3, #32]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	4413      	add	r3, r2
 800c256:	4619      	mov	r1, r3
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	f7ff fe07 	bl	800be6c <move_window>
 800c25e:	4603      	mov	r3, r0
 800c260:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c262:	7ffb      	ldrb	r3, [r7, #31]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d148      	bne.n	800c2fa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c276:	4413      	add	r3, r2
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	b292      	uxth	r2, r2
 800c27c:	4611      	mov	r1, r2
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fb7f 	bl	800b982 <st_word>
			fs->wflag = 1;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	70da      	strb	r2, [r3, #3]
			break;
 800c28a:	e039      	b.n	800c300 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6a1a      	ldr	r2, [r3, #32]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	09db      	lsrs	r3, r3, #7
 800c294:	4413      	add	r3, r2
 800c296:	4619      	mov	r1, r3
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff fde7 	bl	800be6c <move_window>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2a2:	7ffb      	ldrb	r3, [r7, #31]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d12a      	bne.n	800c2fe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2bc:	4413      	add	r3, r2
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff fb3c 	bl	800b93c <ld_dword>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2ca:	4323      	orrs	r3, r4
 800c2cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2dc:	4413      	add	r3, r2
 800c2de:	6879      	ldr	r1, [r7, #4]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fb69 	bl	800b9b8 <st_dword>
			fs->wflag = 1;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	70da      	strb	r2, [r3, #3]
			break;
 800c2ec:	e008      	b.n	800c300 <put_fat+0x1ce>
		}
	}
 800c2ee:	bf00      	nop
 800c2f0:	e006      	b.n	800c300 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c2f2:	bf00      	nop
 800c2f4:	e004      	b.n	800c300 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c2f6:	bf00      	nop
 800c2f8:	e002      	b.n	800c300 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c2fa:	bf00      	nop
 800c2fc:	e000      	b.n	800c300 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c2fe:	bf00      	nop
	return res;
 800c300:	7ffb      	ldrb	r3, [r7, #31]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3724      	adds	r7, #36	; 0x24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}

0800c30a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b088      	sub	sp, #32
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d904      	bls.n	800c330 <remove_chain+0x26>
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d301      	bcc.n	800c334 <remove_chain+0x2a>
 800c330:	2302      	movs	r3, #2
 800c332:	e04b      	b.n	800c3cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00c      	beq.n	800c354 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	69b8      	ldr	r0, [r7, #24]
 800c342:	f7ff fef6 	bl	800c132 <put_fat>
 800c346:	4603      	mov	r3, r0
 800c348:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c34a:	7ffb      	ldrb	r3, [r7, #31]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <remove_chain+0x4a>
 800c350:	7ffb      	ldrb	r3, [r7, #31]
 800c352:	e03b      	b.n	800c3cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f7ff fe43 	bl	800bfe2 <get_fat>
 800c35c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d031      	beq.n	800c3c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d101      	bne.n	800c36e <remove_chain+0x64>
 800c36a:	2302      	movs	r3, #2
 800c36c:	e02e      	b.n	800c3cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c374:	d101      	bne.n	800c37a <remove_chain+0x70>
 800c376:	2301      	movs	r3, #1
 800c378:	e028      	b.n	800c3cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c37a:	2200      	movs	r2, #0
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	69b8      	ldr	r0, [r7, #24]
 800c380:	f7ff fed7 	bl	800c132 <put_fat>
 800c384:	4603      	mov	r3, r0
 800c386:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c388:	7ffb      	ldrb	r3, [r7, #31]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <remove_chain+0x88>
 800c38e:	7ffb      	ldrb	r3, [r7, #31]
 800c390:	e01c      	b.n	800c3cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	691a      	ldr	r2, [r3, #16]
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	3b02      	subs	r3, #2
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d20b      	bcs.n	800c3b8 <remove_chain+0xae>
			fs->free_clst++;
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	1c5a      	adds	r2, r3, #1
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	791b      	ldrb	r3, [r3, #4]
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d3c6      	bcc.n	800c354 <remove_chain+0x4a>
 800c3c6:	e000      	b.n	800c3ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c3c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3720      	adds	r7, #32
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10d      	bne.n	800c406 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d004      	beq.n	800c400 <create_chain+0x2c>
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d31b      	bcc.n	800c438 <create_chain+0x64>
 800c400:	2301      	movs	r3, #1
 800c402:	61bb      	str	r3, [r7, #24]
 800c404:	e018      	b.n	800c438 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff fdea 	bl	800bfe2 <get_fat>
 800c40e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d801      	bhi.n	800c41a <create_chain+0x46>
 800c416:	2301      	movs	r3, #1
 800c418:	e070      	b.n	800c4fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c420:	d101      	bne.n	800c426 <create_chain+0x52>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	e06a      	b.n	800c4fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d201      	bcs.n	800c434 <create_chain+0x60>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	e063      	b.n	800c4fc <create_chain+0x128>
		scl = clst;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	3301      	adds	r3, #1
 800c440:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	69fa      	ldr	r2, [r7, #28]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d307      	bcc.n	800c45c <create_chain+0x88>
				ncl = 2;
 800c44c:	2302      	movs	r3, #2
 800c44e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c450:	69fa      	ldr	r2, [r7, #28]
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	429a      	cmp	r2, r3
 800c456:	d901      	bls.n	800c45c <create_chain+0x88>
 800c458:	2300      	movs	r3, #0
 800c45a:	e04f      	b.n	800c4fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c45c:	69f9      	ldr	r1, [r7, #28]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff fdbf 	bl	800bfe2 <get_fat>
 800c464:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00e      	beq.n	800c48a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d003      	beq.n	800c47a <create_chain+0xa6>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c478:	d101      	bne.n	800c47e <create_chain+0xaa>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	e03e      	b.n	800c4fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c47e:	69fa      	ldr	r2, [r7, #28]
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	429a      	cmp	r2, r3
 800c484:	d1da      	bne.n	800c43c <create_chain+0x68>
 800c486:	2300      	movs	r3, #0
 800c488:	e038      	b.n	800c4fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c48a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c48c:	f04f 32ff 	mov.w	r2, #4294967295
 800c490:	69f9      	ldr	r1, [r7, #28]
 800c492:	6938      	ldr	r0, [r7, #16]
 800c494:	f7ff fe4d 	bl	800c132 <put_fat>
 800c498:	4603      	mov	r3, r0
 800c49a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c49c:	7dfb      	ldrb	r3, [r7, #23]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d109      	bne.n	800c4b6 <create_chain+0xe2>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4a8:	69fa      	ldr	r2, [r7, #28]
 800c4aa:	6839      	ldr	r1, [r7, #0]
 800c4ac:	6938      	ldr	r0, [r7, #16]
 800c4ae:	f7ff fe40 	bl	800c132 <put_fat>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d116      	bne.n	800c4ea <create_chain+0x116>
		fs->last_clst = ncl;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	69fa      	ldr	r2, [r7, #28]
 800c4c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	691a      	ldr	r2, [r3, #16]
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	3b02      	subs	r3, #2
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d804      	bhi.n	800c4da <create_chain+0x106>
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	1e5a      	subs	r2, r3, #1
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	791b      	ldrb	r3, [r3, #4]
 800c4de:	f043 0301 	orr.w	r3, r3, #1
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	711a      	strb	r2, [r3, #4]
 800c4e8:	e007      	b.n	800c4fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d102      	bne.n	800c4f6 <create_chain+0x122>
 800c4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f4:	e000      	b.n	800c4f8 <create_chain+0x124>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4fa:	69fb      	ldr	r3, [r7, #28]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	3304      	adds	r3, #4
 800c51a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	0a5b      	lsrs	r3, r3, #9
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	8952      	ldrh	r2, [r2, #10]
 800c524:	fbb3 f3f2 	udiv	r3, r3, r2
 800c528:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	1d1a      	adds	r2, r3, #4
 800c52e:	613a      	str	r2, [r7, #16]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <clmt_clust+0x3a>
 800c53a:	2300      	movs	r3, #0
 800c53c:	e010      	b.n	800c560 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	429a      	cmp	r2, r3
 800c544:	d307      	bcc.n	800c556 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3304      	adds	r3, #4
 800c552:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c554:	e7e9      	b.n	800c52a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c556:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	4413      	add	r3, r2
}
 800c560:	4618      	mov	r0, r3
 800c562:	371c      	adds	r7, #28
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c582:	d204      	bcs.n	800c58e <dir_sdi+0x22>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	f003 031f 	and.w	r3, r3, #31
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c58e:	2302      	movs	r3, #2
 800c590:	e063      	b.n	800c65a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <dir_sdi+0x46>
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d902      	bls.n	800c5b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10c      	bne.n	800c5d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	095b      	lsrs	r3, r3, #5
 800c5bc:	693a      	ldr	r2, [r7, #16]
 800c5be:	8912      	ldrh	r2, [r2, #8]
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d301      	bcc.n	800c5c8 <dir_sdi+0x5c>
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	e048      	b.n	800c65a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	61da      	str	r2, [r3, #28]
 800c5d0:	e029      	b.n	800c626 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	895b      	ldrh	r3, [r3, #10]
 800c5d6:	025b      	lsls	r3, r3, #9
 800c5d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5da:	e019      	b.n	800c610 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7ff fcfe 	bl	800bfe2 <get_fat>
 800c5e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d101      	bne.n	800c5f4 <dir_sdi+0x88>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e032      	b.n	800c65a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d904      	bls.n	800c604 <dir_sdi+0x98>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	429a      	cmp	r2, r3
 800c602:	d301      	bcc.n	800c608 <dir_sdi+0x9c>
 800c604:	2302      	movs	r3, #2
 800c606:	e028      	b.n	800c65a <dir_sdi+0xee>
			ofs -= csz;
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	1ad3      	subs	r3, r2, r3
 800c60e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	429a      	cmp	r2, r3
 800c616:	d2e1      	bcs.n	800c5dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c618:	6979      	ldr	r1, [r7, #20]
 800c61a:	6938      	ldr	r0, [r7, #16]
 800c61c:	f7ff fcc2 	bl	800bfa4 <clust2sect>
 800c620:	4602      	mov	r2, r0
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <dir_sdi+0xcc>
 800c634:	2302      	movs	r3, #2
 800c636:	e010      	b.n	800c65a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	69da      	ldr	r2, [r3, #28]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	0a5b      	lsrs	r3, r3, #9
 800c640:	441a      	add	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c652:	441a      	add	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b086      	sub	sp, #24
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	3320      	adds	r3, #32
 800c678:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <dir_next+0x28>
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c688:	d301      	bcc.n	800c68e <dir_next+0x2c>
 800c68a:	2304      	movs	r3, #4
 800c68c:	e0aa      	b.n	800c7e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 8098 	bne.w	800c7ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10b      	bne.n	800c6c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	095b      	lsrs	r3, r3, #5
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	8912      	ldrh	r2, [r2, #8]
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	f0c0 8088 	bcc.w	800c7ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	61da      	str	r2, [r3, #28]
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	e08f      	b.n	800c7e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	0a5b      	lsrs	r3, r3, #9
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	8952      	ldrh	r2, [r2, #10]
 800c6cc:	3a01      	subs	r2, #1
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d17a      	bne.n	800c7ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4610      	mov	r0, r2
 800c6de:	f7ff fc80 	bl	800bfe2 <get_fat>
 800c6e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d801      	bhi.n	800c6ee <dir_next+0x8c>
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	e07a      	b.n	800c7e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f4:	d101      	bne.n	800c6fa <dir_next+0x98>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e074      	b.n	800c7e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	429a      	cmp	r2, r3
 800c702:	d358      	bcc.n	800c7b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d104      	bne.n	800c714 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	61da      	str	r2, [r3, #28]
 800c710:	2304      	movs	r3, #4
 800c712:	e067      	b.n	800c7e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7ff fe59 	bl	800c3d4 <create_chain>
 800c722:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <dir_next+0xcc>
 800c72a:	2307      	movs	r3, #7
 800c72c:	e05a      	b.n	800c7e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d101      	bne.n	800c738 <dir_next+0xd6>
 800c734:	2302      	movs	r3, #2
 800c736:	e055      	b.n	800c7e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73e:	d101      	bne.n	800c744 <dir_next+0xe2>
 800c740:	2301      	movs	r3, #1
 800c742:	e04f      	b.n	800c7e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff fb4d 	bl	800bde4 <sync_window>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <dir_next+0xf2>
 800c750:	2301      	movs	r3, #1
 800c752:	e047      	b.n	800c7e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3330      	adds	r3, #48	; 0x30
 800c758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff f977 	bl	800ba52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c764:	2300      	movs	r3, #0
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	6979      	ldr	r1, [r7, #20]
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7ff fc1a 	bl	800bfa4 <clust2sect>
 800c770:	4602      	mov	r2, r0
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	62da      	str	r2, [r3, #44]	; 0x2c
 800c776:	e012      	b.n	800c79e <dir_next+0x13c>
						fs->wflag = 1;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2201      	movs	r2, #1
 800c77c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7ff fb30 	bl	800bde4 <sync_window>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <dir_next+0x12c>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e02a      	b.n	800c7e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3301      	adds	r3, #1
 800c792:	613b      	str	r3, [r7, #16]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	895b      	ldrh	r3, [r3, #10]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d3e6      	bcc.n	800c778 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad2      	subs	r2, r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	697a      	ldr	r2, [r7, #20]
 800c7ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c7bc:	6979      	ldr	r1, [r7, #20]
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7ff fbf0 	bl	800bfa4 <clust2sect>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7dc:	441a      	add	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff feb4 	bl	800c56c <dir_sdi>
 800c804:	4603      	mov	r3, r0
 800c806:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d12b      	bne.n	800c866 <dir_alloc+0x7a>
		n = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	4619      	mov	r1, r3
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff fb27 	bl	800be6c <move_window>
 800c81e:	4603      	mov	r3, r0
 800c820:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d11d      	bne.n	800c864 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2be5      	cmp	r3, #229	; 0xe5
 800c830:	d004      	beq.n	800c83c <dir_alloc+0x50>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a1b      	ldr	r3, [r3, #32]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d107      	bne.n	800c84c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	3301      	adds	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d102      	bne.n	800c850 <dir_alloc+0x64>
 800c84a:	e00c      	b.n	800c866 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c84c:	2300      	movs	r3, #0
 800c84e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c850:	2101      	movs	r1, #1
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff ff05 	bl	800c662 <dir_next>
 800c858:	4603      	mov	r3, r0
 800c85a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d0d7      	beq.n	800c812 <dir_alloc+0x26>
 800c862:	e000      	b.n	800c866 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c864:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	2b04      	cmp	r3, #4
 800c86a:	d101      	bne.n	800c870 <dir_alloc+0x84>
 800c86c:	2307      	movs	r3, #7
 800c86e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c870:	7dfb      	ldrb	r3, [r7, #23]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3718      	adds	r7, #24
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	331a      	adds	r3, #26
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff f83f 	bl	800b90c <ld_word>
 800c88e:	4603      	mov	r3, r0
 800c890:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b03      	cmp	r3, #3
 800c898:	d109      	bne.n	800c8ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	3314      	adds	r3, #20
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff f834 	bl	800b90c <ld_word>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	041b      	lsls	r3, r3, #16
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	331a      	adds	r3, #26
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	b292      	uxth	r2, r2
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff f857 	bl	800b982 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d109      	bne.n	800c8f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	f103 0214 	add.w	r2, r3, #20
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	0c1b      	lsrs	r3, r3, #16
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7ff f849 	bl	800b982 <st_word>
	}
}
 800c8f0:	bf00      	nop
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c906:	2100      	movs	r1, #0
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff fe2f 	bl	800c56c <dir_sdi>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <dir_find+0x24>
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	e03e      	b.n	800c99a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	69db      	ldr	r3, [r3, #28]
 800c920:	4619      	mov	r1, r3
 800c922:	6938      	ldr	r0, [r7, #16]
 800c924:	f7ff faa2 	bl	800be6c <move_window>
 800c928:	4603      	mov	r3, r0
 800c92a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c92c:	7dfb      	ldrb	r3, [r7, #23]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d12f      	bne.n	800c992 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d102      	bne.n	800c946 <dir_find+0x4e>
 800c940:	2304      	movs	r3, #4
 800c942:	75fb      	strb	r3, [r7, #23]
 800c944:	e028      	b.n	800c998 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	330b      	adds	r3, #11
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c952:	b2da      	uxtb	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	330b      	adds	r3, #11
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	f003 0308 	and.w	r3, r3, #8
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10a      	bne.n	800c97e <dir_find+0x86>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a18      	ldr	r0, [r3, #32]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3324      	adds	r3, #36	; 0x24
 800c970:	220b      	movs	r2, #11
 800c972:	4619      	mov	r1, r3
 800c974:	f7ff f888 	bl	800ba88 <mem_cmp>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c97e:	2100      	movs	r1, #0
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff fe6e 	bl	800c662 <dir_next>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d0c5      	beq.n	800c91c <dir_find+0x24>
 800c990:	e002      	b.n	800c998 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c992:	bf00      	nop
 800c994:	e000      	b.n	800c998 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c996:	bf00      	nop

	return res;
 800c998:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3718      	adds	r7, #24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff ff1a 	bl	800c7ec <dir_alloc>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d11c      	bne.n	800c9fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	68b8      	ldr	r0, [r7, #8]
 800c9ca:	f7ff fa4f 	bl	800be6c <move_window>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d111      	bne.n	800c9fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	2100      	movs	r1, #0
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff f836 	bl	800ba52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a18      	ldr	r0, [r3, #32]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3324      	adds	r3, #36	; 0x24
 800c9ee:	220b      	movs	r2, #11
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f7ff f80d 	bl	800ba10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b088      	sub	sp, #32
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	3324      	adds	r3, #36	; 0x24
 800ca1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ca1e:	220b      	movs	r2, #11
 800ca20:	2120      	movs	r1, #32
 800ca22:	68b8      	ldr	r0, [r7, #8]
 800ca24:	f7ff f815 	bl	800ba52 <mem_set>
	si = i = 0; ni = 8;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	2308      	movs	r3, #8
 800ca32:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	61fa      	str	r2, [r7, #28]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ca42:	7efb      	ldrb	r3, [r7, #27]
 800ca44:	2b20      	cmp	r3, #32
 800ca46:	d94e      	bls.n	800cae6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ca48:	7efb      	ldrb	r3, [r7, #27]
 800ca4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ca4c:	d006      	beq.n	800ca5c <create_name+0x54>
 800ca4e:	7efb      	ldrb	r3, [r7, #27]
 800ca50:	2b5c      	cmp	r3, #92	; 0x5c
 800ca52:	d110      	bne.n	800ca76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ca54:	e002      	b.n	800ca5c <create_name+0x54>
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	61fb      	str	r3, [r7, #28]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b2f      	cmp	r3, #47	; 0x2f
 800ca66:	d0f6      	beq.n	800ca56 <create_name+0x4e>
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b5c      	cmp	r3, #92	; 0x5c
 800ca72:	d0f0      	beq.n	800ca56 <create_name+0x4e>
			break;
 800ca74:	e038      	b.n	800cae8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ca76:	7efb      	ldrb	r3, [r7, #27]
 800ca78:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7a:	d003      	beq.n	800ca84 <create_name+0x7c>
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d30c      	bcc.n	800ca9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b0b      	cmp	r3, #11
 800ca88:	d002      	beq.n	800ca90 <create_name+0x88>
 800ca8a:	7efb      	ldrb	r3, [r7, #27]
 800ca8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca8e:	d001      	beq.n	800ca94 <create_name+0x8c>
 800ca90:	2306      	movs	r3, #6
 800ca92:	e044      	b.n	800cb1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ca94:	2308      	movs	r3, #8
 800ca96:	613b      	str	r3, [r7, #16]
 800ca98:	230b      	movs	r3, #11
 800ca9a:	617b      	str	r3, [r7, #20]
			continue;
 800ca9c:	e022      	b.n	800cae4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ca9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da04      	bge.n	800cab0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800caa6:	7efb      	ldrb	r3, [r7, #27]
 800caa8:	3b80      	subs	r3, #128	; 0x80
 800caaa:	4a1f      	ldr	r2, [pc, #124]	; (800cb28 <create_name+0x120>)
 800caac:	5cd3      	ldrb	r3, [r2, r3]
 800caae:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cab0:	7efb      	ldrb	r3, [r7, #27]
 800cab2:	4619      	mov	r1, r3
 800cab4:	481d      	ldr	r0, [pc, #116]	; (800cb2c <create_name+0x124>)
 800cab6:	f7ff f80e 	bl	800bad6 <chk_chr>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <create_name+0xbc>
 800cac0:	2306      	movs	r3, #6
 800cac2:	e02c      	b.n	800cb1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cac4:	7efb      	ldrb	r3, [r7, #27]
 800cac6:	2b60      	cmp	r3, #96	; 0x60
 800cac8:	d905      	bls.n	800cad6 <create_name+0xce>
 800caca:	7efb      	ldrb	r3, [r7, #27]
 800cacc:	2b7a      	cmp	r3, #122	; 0x7a
 800cace:	d802      	bhi.n	800cad6 <create_name+0xce>
 800cad0:	7efb      	ldrb	r3, [r7, #27]
 800cad2:	3b20      	subs	r3, #32
 800cad4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	1c5a      	adds	r2, r3, #1
 800cada:	613a      	str	r2, [r7, #16]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	4413      	add	r3, r2
 800cae0:	7efa      	ldrb	r2, [r7, #27]
 800cae2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cae4:	e7a6      	b.n	800ca34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cae6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	441a      	add	r2, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <create_name+0xf4>
 800caf8:	2306      	movs	r3, #6
 800cafa:	e010      	b.n	800cb1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2be5      	cmp	r3, #229	; 0xe5
 800cb02:	d102      	bne.n	800cb0a <create_name+0x102>
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2205      	movs	r2, #5
 800cb08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb0a:	7efb      	ldrb	r3, [r7, #27]
 800cb0c:	2b20      	cmp	r3, #32
 800cb0e:	d801      	bhi.n	800cb14 <create_name+0x10c>
 800cb10:	2204      	movs	r2, #4
 800cb12:	e000      	b.n	800cb16 <create_name+0x10e>
 800cb14:	2200      	movs	r2, #0
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	330b      	adds	r3, #11
 800cb1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cb1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3720      	adds	r7, #32
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	0800efc0 	.word	0x0800efc0
 800cb2c:	0800eee8 	.word	0x0800eee8

0800cb30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb44:	e002      	b.n	800cb4c <follow_path+0x1c>
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b2f      	cmp	r3, #47	; 0x2f
 800cb52:	d0f8      	beq.n	800cb46 <follow_path+0x16>
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b5c      	cmp	r3, #92	; 0x5c
 800cb5a:	d0f4      	beq.n	800cb46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b1f      	cmp	r3, #31
 800cb68:	d80a      	bhi.n	800cb80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2280      	movs	r2, #128	; 0x80
 800cb6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cb72:	2100      	movs	r1, #0
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff fcf9 	bl	800c56c <dir_sdi>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]
 800cb7e:	e043      	b.n	800cc08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb80:	463b      	mov	r3, r7
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff ff3f 	bl	800ca08 <create_name>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d134      	bne.n	800cbfe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff feaf 	bl	800c8f8 <dir_find>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cba4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00a      	beq.n	800cbc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d127      	bne.n	800cc02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbb2:	7afb      	ldrb	r3, [r7, #11]
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d122      	bne.n	800cc02 <follow_path+0xd2>
 800cbbc:	2305      	movs	r3, #5
 800cbbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cbc0:	e01f      	b.n	800cc02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbc2:	7afb      	ldrb	r3, [r7, #11]
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d11c      	bne.n	800cc06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	799b      	ldrb	r3, [r3, #6]
 800cbd0:	f003 0310 	and.w	r3, r3, #16
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cbd8:	2305      	movs	r3, #5
 800cbda:	75fb      	strb	r3, [r7, #23]
 800cbdc:	e014      	b.n	800cc08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	4413      	add	r3, r2
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fe42 	bl	800c87a <ld_clust>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbfc:	e7c0      	b.n	800cb80 <follow_path+0x50>
			if (res != FR_OK) break;
 800cbfe:	bf00      	nop
 800cc00:	e002      	b.n	800cc08 <follow_path+0xd8>
				break;
 800cc02:	bf00      	nop
 800cc04:	e000      	b.n	800cc08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc06:	bf00      	nop
			}
		}
	}

	return res;
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc12:	b480      	push	{r7}
 800cc14:	b087      	sub	sp, #28
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d031      	beq.n	800cc8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	e002      	b.n	800cc36 <get_ldnumber+0x24>
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	3301      	adds	r3, #1
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	d903      	bls.n	800cc46 <get_ldnumber+0x34>
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b3a      	cmp	r3, #58	; 0x3a
 800cc44:	d1f4      	bne.n	800cc30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b3a      	cmp	r3, #58	; 0x3a
 800cc4c:	d11c      	bne.n	800cc88 <get_ldnumber+0x76>
			tp = *path;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	60fa      	str	r2, [r7, #12]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	3b30      	subs	r3, #48	; 0x30
 800cc5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b09      	cmp	r3, #9
 800cc64:	d80e      	bhi.n	800cc84 <get_ldnumber+0x72>
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d10a      	bne.n	800cc84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d107      	bne.n	800cc84 <get_ldnumber+0x72>
					vol = (int)i;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	617b      	str	r3, [r7, #20]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	e002      	b.n	800cc8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cc88:	2300      	movs	r3, #0
 800cc8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cc8c:	693b      	ldr	r3, [r7, #16]
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	371c      	adds	r7, #28
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
	...

0800cc9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	70da      	strb	r2, [r3, #3]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff f8d8 	bl	800be6c <move_window>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <check_fs+0x2a>
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	e038      	b.n	800cd38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3330      	adds	r3, #48	; 0x30
 800ccca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fe1c 	bl	800b90c <ld_word>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d001      	beq.n	800cce4 <check_fs+0x48>
 800cce0:	2303      	movs	r3, #3
 800cce2:	e029      	b.n	800cd38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccea:	2be9      	cmp	r3, #233	; 0xe9
 800ccec:	d009      	beq.n	800cd02 <check_fs+0x66>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccf4:	2beb      	cmp	r3, #235	; 0xeb
 800ccf6:	d11e      	bne.n	800cd36 <check_fs+0x9a>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ccfe:	2b90      	cmp	r3, #144	; 0x90
 800cd00:	d119      	bne.n	800cd36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3330      	adds	r3, #48	; 0x30
 800cd06:	3336      	adds	r3, #54	; 0x36
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe fe17 	bl	800b93c <ld_dword>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd14:	4a0a      	ldr	r2, [pc, #40]	; (800cd40 <check_fs+0xa4>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d101      	bne.n	800cd1e <check_fs+0x82>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e00c      	b.n	800cd38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3330      	adds	r3, #48	; 0x30
 800cd22:	3352      	adds	r3, #82	; 0x52
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe fe09 	bl	800b93c <ld_dword>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4a05      	ldr	r2, [pc, #20]	; (800cd44 <check_fs+0xa8>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d101      	bne.n	800cd36 <check_fs+0x9a>
 800cd32:	2300      	movs	r3, #0
 800cd34:	e000      	b.n	800cd38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd36:	2302      	movs	r3, #2
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	00544146 	.word	0x00544146
 800cd44:	33544146 	.word	0x33544146

0800cd48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b096      	sub	sp, #88	; 0x58
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f7ff ff58 	bl	800cc12 <get_ldnumber>
 800cd62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da01      	bge.n	800cd6e <find_volume+0x26>
 800cd6a:	230b      	movs	r3, #11
 800cd6c:	e22d      	b.n	800d1ca <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd6e:	4aa1      	ldr	r2, [pc, #644]	; (800cff4 <find_volume+0x2ac>)
 800cd70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <find_volume+0x3a>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	e223      	b.n	800d1ca <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	f023 0301 	bic.w	r3, r3, #1
 800cd8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d01a      	beq.n	800cdce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	785b      	ldrb	r3, [r3, #1]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fe fd17 	bl	800b7d0 <disk_status>
 800cda2:	4603      	mov	r3, r0
 800cda4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cda8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10c      	bne.n	800cdce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d007      	beq.n	800cdca <find_volume+0x82>
 800cdba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdbe:	f003 0304 	and.w	r3, r3, #4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdc6:	230a      	movs	r3, #10
 800cdc8:	e1ff      	b.n	800d1ca <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e1fd      	b.n	800d1ca <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fd0f 	bl	800b804 <disk_initialize>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cdec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e1e6      	b.n	800d1ca <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cdfc:	79fb      	ldrb	r3, [r7, #7]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d007      	beq.n	800ce12 <find_volume+0xca>
 800ce02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce06:	f003 0304 	and.w	r3, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce0e:	230a      	movs	r3, #10
 800ce10:	e1db      	b.n	800d1ca <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce1a:	f7ff ff3f 	bl	800cc9c <check_fs>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d149      	bne.n	800cec0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce30:	e01e      	b.n	800ce70 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ce40:	4413      	add	r3, r2
 800ce42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	3304      	adds	r3, #4
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d006      	beq.n	800ce5c <find_volume+0x114>
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	3308      	adds	r3, #8
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe fd72 	bl	800b93c <ld_dword>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	e000      	b.n	800ce5e <find_volume+0x116>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	3358      	adds	r3, #88	; 0x58
 800ce64:	443b      	add	r3, r7
 800ce66:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d9dd      	bls.n	800ce32 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ce76:	2300      	movs	r3, #0
 800ce78:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <find_volume+0x13e>
 800ce80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce82:	3b01      	subs	r3, #1
 800ce84:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ce86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	3358      	adds	r3, #88	; 0x58
 800ce8c:	443b      	add	r3, r7
 800ce8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ce92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d005      	beq.n	800cea6 <find_volume+0x15e>
 800ce9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce9e:	f7ff fefd 	bl	800cc9c <check_fs>
 800cea2:	4603      	mov	r3, r0
 800cea4:	e000      	b.n	800cea8 <find_volume+0x160>
 800cea6:	2303      	movs	r3, #3
 800cea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ceac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d905      	bls.n	800cec0 <find_volume+0x178>
 800ceb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	643b      	str	r3, [r7, #64]	; 0x40
 800ceba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebc:	2b03      	cmp	r3, #3
 800cebe:	d9e2      	bls.n	800ce86 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cec0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d101      	bne.n	800cecc <find_volume+0x184>
 800cec8:	2301      	movs	r3, #1
 800ceca:	e17e      	b.n	800d1ca <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d901      	bls.n	800ced8 <find_volume+0x190>
 800ced4:	230d      	movs	r3, #13
 800ced6:	e178      	b.n	800d1ca <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	3330      	adds	r3, #48	; 0x30
 800cedc:	330b      	adds	r3, #11
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fd14 	bl	800b90c <ld_word>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceea:	d001      	beq.n	800cef0 <find_volume+0x1a8>
 800ceec:	230d      	movs	r3, #13
 800ceee:	e16c      	b.n	800d1ca <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	3330      	adds	r3, #48	; 0x30
 800cef4:	3316      	adds	r3, #22
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fd08 	bl	800b90c <ld_word>
 800cefc:	4603      	mov	r3, r0
 800cefe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d106      	bne.n	800cf14 <find_volume+0x1cc>
 800cf06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf08:	3330      	adds	r3, #48	; 0x30
 800cf0a:	3324      	adds	r3, #36	; 0x24
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fd15 	bl	800b93c <ld_dword>
 800cf12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf18:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	789b      	ldrb	r3, [r3, #2]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d005      	beq.n	800cf38 <find_volume+0x1f0>
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	789b      	ldrb	r3, [r3, #2]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d001      	beq.n	800cf38 <find_volume+0x1f0>
 800cf34:	230d      	movs	r3, #13
 800cf36:	e148      	b.n	800d1ca <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	789b      	ldrb	r3, [r3, #2]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf40:	fb02 f303 	mul.w	r3, r2, r3
 800cf44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	895b      	ldrh	r3, [r3, #10]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d008      	beq.n	800cf6c <find_volume+0x224>
 800cf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5c:	895b      	ldrh	r3, [r3, #10]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	895b      	ldrh	r3, [r3, #10]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	4013      	ands	r3, r2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <find_volume+0x228>
 800cf6c:	230d      	movs	r3, #13
 800cf6e:	e12c      	b.n	800d1ca <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	3330      	adds	r3, #48	; 0x30
 800cf74:	3311      	adds	r3, #17
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fe fcc8 	bl	800b90c <ld_word>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461a      	mov	r2, r3
 800cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	891b      	ldrh	r3, [r3, #8]
 800cf88:	f003 030f 	and.w	r3, r3, #15
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d001      	beq.n	800cf96 <find_volume+0x24e>
 800cf92:	230d      	movs	r3, #13
 800cf94:	e119      	b.n	800d1ca <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	3330      	adds	r3, #48	; 0x30
 800cf9a:	3313      	adds	r3, #19
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe fcb5 	bl	800b90c <ld_word>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d106      	bne.n	800cfba <find_volume+0x272>
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	3330      	adds	r3, #48	; 0x30
 800cfb0:	3320      	adds	r3, #32
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fcc2 	bl	800b93c <ld_dword>
 800cfb8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbc:	3330      	adds	r3, #48	; 0x30
 800cfbe:	330e      	adds	r3, #14
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fca3 	bl	800b90c <ld_word>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cfca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <find_volume+0x28c>
 800cfd0:	230d      	movs	r3, #13
 800cfd2:	e0fa      	b.n	800d1ca <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cfd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfd8:	4413      	add	r3, r2
 800cfda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfdc:	8912      	ldrh	r2, [r2, #8]
 800cfde:	0912      	lsrs	r2, r2, #4
 800cfe0:	b292      	uxth	r2, r2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cfe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d204      	bcs.n	800cff8 <find_volume+0x2b0>
 800cfee:	230d      	movs	r3, #13
 800cff0:	e0eb      	b.n	800d1ca <find_volume+0x482>
 800cff2:	bf00      	nop
 800cff4:	200016f8 	.word	0x200016f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d000:	8952      	ldrh	r2, [r2, #10]
 800d002:	fbb3 f3f2 	udiv	r3, r3, r2
 800d006:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <find_volume+0x2ca>
 800d00e:	230d      	movs	r3, #13
 800d010:	e0db      	b.n	800d1ca <find_volume+0x482>
		fmt = FS_FAT32;
 800d012:	2303      	movs	r3, #3
 800d014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d01e:	4293      	cmp	r3, r2
 800d020:	d802      	bhi.n	800d028 <find_volume+0x2e0>
 800d022:	2302      	movs	r3, #2
 800d024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d02e:	4293      	cmp	r3, r2
 800d030:	d802      	bhi.n	800d038 <find_volume+0x2f0>
 800d032:	2301      	movs	r3, #1
 800d034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	1c9a      	adds	r2, r3, #2
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d042:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d044:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d046:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d04a:	441a      	add	r2, r3
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	441a      	add	r2, r3
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d05a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d11e      	bne.n	800d0a0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	3330      	adds	r3, #48	; 0x30
 800d066:	332a      	adds	r3, #42	; 0x2a
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe fc4f 	bl	800b90c <ld_word>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <find_volume+0x330>
 800d074:	230d      	movs	r3, #13
 800d076:	e0a8      	b.n	800d1ca <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	891b      	ldrh	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <find_volume+0x33c>
 800d080:	230d      	movs	r3, #13
 800d082:	e0a2      	b.n	800d1ca <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	3330      	adds	r3, #48	; 0x30
 800d088:	332c      	adds	r3, #44	; 0x2c
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe fc56 	bl	800b93c <ld_dword>
 800d090:	4602      	mov	r2, r0
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	695b      	ldr	r3, [r3, #20]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	647b      	str	r3, [r7, #68]	; 0x44
 800d09e:	e01f      	b.n	800d0e0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a2:	891b      	ldrh	r3, [r3, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d101      	bne.n	800d0ac <find_volume+0x364>
 800d0a8:	230d      	movs	r3, #13
 800d0aa:	e08e      	b.n	800d1ca <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	6a1a      	ldr	r2, [r3, #32]
 800d0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b2:	441a      	add	r2, r3
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d0b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d103      	bne.n	800d0c8 <find_volume+0x380>
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	e00a      	b.n	800d0de <find_volume+0x396>
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ca:	695a      	ldr	r2, [r3, #20]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	085a      	lsrs	r2, r3, #1
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d0de:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e2:	699a      	ldr	r2, [r3, #24]
 800d0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d0ea:	0a5b      	lsrs	r3, r3, #9
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d201      	bcs.n	800d0f4 <find_volume+0x3ac>
 800d0f0:	230d      	movs	r3, #13
 800d0f2:	e06a      	b.n	800d1ca <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fa:	611a      	str	r2, [r3, #16]
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fe:	691a      	ldr	r2, [r3, #16]
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	2280      	movs	r2, #128	; 0x80
 800d108:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d10a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d10e:	2b03      	cmp	r3, #3
 800d110:	d149      	bne.n	800d1a6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d114:	3330      	adds	r3, #48	; 0x30
 800d116:	3330      	adds	r3, #48	; 0x30
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fbf7 	bl	800b90c <ld_word>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b01      	cmp	r3, #1
 800d122:	d140      	bne.n	800d1a6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d126:	3301      	adds	r3, #1
 800d128:	4619      	mov	r1, r3
 800d12a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d12c:	f7fe fe9e 	bl	800be6c <move_window>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d137      	bne.n	800d1a6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	2200      	movs	r2, #0
 800d13a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	3330      	adds	r3, #48	; 0x30
 800d140:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d144:	4618      	mov	r0, r3
 800d146:	f7fe fbe1 	bl	800b90c <ld_word>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461a      	mov	r2, r3
 800d14e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d152:	429a      	cmp	r2, r3
 800d154:	d127      	bne.n	800d1a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d158:	3330      	adds	r3, #48	; 0x30
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fbee 	bl	800b93c <ld_dword>
 800d160:	4603      	mov	r3, r0
 800d162:	4a1c      	ldr	r2, [pc, #112]	; (800d1d4 <find_volume+0x48c>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d11e      	bne.n	800d1a6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16a:	3330      	adds	r3, #48	; 0x30
 800d16c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fbe3 	bl	800b93c <ld_dword>
 800d176:	4603      	mov	r3, r0
 800d178:	4a17      	ldr	r2, [pc, #92]	; (800d1d8 <find_volume+0x490>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d113      	bne.n	800d1a6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	3330      	adds	r3, #48	; 0x30
 800d182:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fbd8 	bl	800b93c <ld_dword>
 800d18c:	4602      	mov	r2, r0
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	3330      	adds	r3, #48	; 0x30
 800d196:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fbce 	bl	800b93c <ld_dword>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d1ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <find_volume+0x494>)
 800d1b0:	881b      	ldrh	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <find_volume+0x494>)
 800d1b8:	801a      	strh	r2, [r3, #0]
 800d1ba:	4b08      	ldr	r3, [pc, #32]	; (800d1dc <find_volume+0x494>)
 800d1bc:	881a      	ldrh	r2, [r3, #0]
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d1c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1c4:	f7fe fdea 	bl	800bd9c <clear_lock>
#endif
	return FR_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3758      	adds	r7, #88	; 0x58
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	41615252 	.word	0x41615252
 800d1d8:	61417272 	.word	0x61417272
 800d1dc:	200016fc 	.word	0x200016fc

0800d1e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d1ea:	2309      	movs	r3, #9
 800d1ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d01c      	beq.n	800d22e <validate+0x4e>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d018      	beq.n	800d22e <validate+0x4e>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d013      	beq.n	800d22e <validate+0x4e>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	889a      	ldrh	r2, [r3, #4]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	88db      	ldrh	r3, [r3, #6]
 800d210:	429a      	cmp	r2, r3
 800d212:	d10c      	bne.n	800d22e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	785b      	ldrb	r3, [r3, #1]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fad8 	bl	800b7d0 <disk_status>
 800d220:	4603      	mov	r3, r0
 800d222:	f003 0301 	and.w	r3, r3, #1
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <validate+0x4e>
			res = FR_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d22e:	7bfb      	ldrb	r3, [r7, #15]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d102      	bne.n	800d23a <validate+0x5a>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	e000      	b.n	800d23c <validate+0x5c>
 800d23a:	2300      	movs	r3, #0
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	6013      	str	r3, [r2, #0]
	return res;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d25e:	f107 0310 	add.w	r3, r7, #16
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff fcd5 	bl	800cc12 <get_ldnumber>
 800d268:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	da01      	bge.n	800d274 <f_mount+0x28>
 800d270:	230b      	movs	r3, #11
 800d272:	e02b      	b.n	800d2cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d274:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <f_mount+0x88>)
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d27c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d284:	69b8      	ldr	r0, [r7, #24]
 800d286:	f7fe fd89 	bl	800bd9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d002      	beq.n	800d29c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	490d      	ldr	r1, [pc, #52]	; (800d2d4 <f_mount+0x88>)
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <f_mount+0x66>
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d001      	beq.n	800d2b6 <f_mount+0x6a>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	e00a      	b.n	800d2cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d2b6:	f107 010c 	add.w	r1, r7, #12
 800d2ba:	f107 0308 	add.w	r3, r7, #8
 800d2be:	2200      	movs	r2, #0
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fd41 	bl	800cd48 <find_volume>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3720      	adds	r7, #32
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	200016f8 	.word	0x200016f8

0800d2d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b098      	sub	sp, #96	; 0x60
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <f_open+0x18>
 800d2ec:	2309      	movs	r3, #9
 800d2ee:	e1ad      	b.n	800d64c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d2f0:	79fb      	ldrb	r3, [r7, #7]
 800d2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d2f8:	79fa      	ldrb	r2, [r7, #7]
 800d2fa:	f107 0110 	add.w	r1, r7, #16
 800d2fe:	f107 0308 	add.w	r3, r7, #8
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fd20 	bl	800cd48 <find_volume>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d312:	2b00      	cmp	r3, #0
 800d314:	f040 8191 	bne.w	800d63a <f_open+0x362>
		dj.obj.fs = fs;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	f107 0314 	add.w	r3, r7, #20
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff fc03 	bl	800cb30 <follow_path>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d334:	2b00      	cmp	r3, #0
 800d336:	d11a      	bne.n	800d36e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d338:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d33c:	b25b      	sxtb	r3, r3
 800d33e:	2b00      	cmp	r3, #0
 800d340:	da03      	bge.n	800d34a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d342:	2306      	movs	r3, #6
 800d344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d348:	e011      	b.n	800d36e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d34a:	79fb      	ldrb	r3, [r7, #7]
 800d34c:	f023 0301 	bic.w	r3, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	bf14      	ite	ne
 800d354:	2301      	movne	r3, #1
 800d356:	2300      	moveq	r3, #0
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	461a      	mov	r2, r3
 800d35c:	f107 0314 	add.w	r3, r7, #20
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe fbd2 	bl	800bb0c <chk_lock>
 800d368:	4603      	mov	r3, r0
 800d36a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	f003 031c 	and.w	r3, r3, #28
 800d374:	2b00      	cmp	r3, #0
 800d376:	d07f      	beq.n	800d478 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d017      	beq.n	800d3b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d384:	2b04      	cmp	r3, #4
 800d386:	d10e      	bne.n	800d3a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d388:	f7fe fc1c 	bl	800bbc4 <enq_lock>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d006      	beq.n	800d3a0 <f_open+0xc8>
 800d392:	f107 0314 	add.w	r3, r7, #20
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fb03 	bl	800c9a2 <dir_register>
 800d39c:	4603      	mov	r3, r0
 800d39e:	e000      	b.n	800d3a2 <f_open+0xca>
 800d3a0:	2312      	movs	r3, #18
 800d3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	f043 0308 	orr.w	r3, r3, #8
 800d3ac:	71fb      	strb	r3, [r7, #7]
 800d3ae:	e010      	b.n	800d3d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d3b0:	7ebb      	ldrb	r3, [r7, #26]
 800d3b2:	f003 0311 	and.w	r3, r3, #17
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d003      	beq.n	800d3c2 <f_open+0xea>
					res = FR_DENIED;
 800d3ba:	2307      	movs	r3, #7
 800d3bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d3c0:	e007      	b.n	800d3d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d3c2:	79fb      	ldrb	r3, [r7, #7]
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <f_open+0xfa>
 800d3cc:	2308      	movs	r3, #8
 800d3ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d3d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d168      	bne.n	800d4ac <f_open+0x1d4>
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	f003 0308 	and.w	r3, r3, #8
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d063      	beq.n	800d4ac <f_open+0x1d4>
				dw = GET_FATTIME();
 800d3e4:	f7fb f8e6 	bl	80085b4 <get_fattime>
 800d3e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ec:	330e      	adds	r3, #14
 800d3ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe fae1 	bl	800b9b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f8:	3316      	adds	r3, #22
 800d3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fadb 	bl	800b9b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d404:	330b      	adds	r3, #11
 800d406:	2220      	movs	r2, #32
 800d408:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fa32 	bl	800c87a <ld_clust>
 800d416:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d41c:	2200      	movs	r2, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff fa4a 	bl	800c8b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d426:	331c      	adds	r3, #28
 800d428:	2100      	movs	r1, #0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe fac4 	bl	800b9b8 <st_dword>
					fs->wflag = 1;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2201      	movs	r2, #1
 800d434:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d037      	beq.n	800d4ac <f_open+0x1d4>
						dw = fs->winsect;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d440:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d442:	f107 0314 	add.w	r3, r7, #20
 800d446:	2200      	movs	r2, #0
 800d448:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe ff5d 	bl	800c30a <remove_chain>
 800d450:	4603      	mov	r3, r0
 800d452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d126      	bne.n	800d4ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fd02 	bl	800be6c <move_window>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d472:	3a01      	subs	r2, #1
 800d474:	60da      	str	r2, [r3, #12]
 800d476:	e019      	b.n	800d4ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d115      	bne.n	800d4ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d480:	7ebb      	ldrb	r3, [r7, #26]
 800d482:	f003 0310 	and.w	r3, r3, #16
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d48a:	2304      	movs	r3, #4
 800d48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d490:	e00c      	b.n	800d4ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d492:	79fb      	ldrb	r3, [r7, #7]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d007      	beq.n	800d4ac <f_open+0x1d4>
 800d49c:	7ebb      	ldrb	r3, [r7, #26]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <f_open+0x1d4>
						res = FR_DENIED;
 800d4a6:	2307      	movs	r3, #7
 800d4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d4ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d128      	bne.n	800d506 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	f003 0308 	and.w	r3, r3, #8
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	f023 0301 	bic.w	r3, r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	bf14      	ite	ne
 800d4de:	2301      	movne	r3, #1
 800d4e0:	2300      	moveq	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	f107 0314 	add.w	r3, r7, #20
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fe fb8b 	bl	800bc08 <inc_lock>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <f_open+0x22e>
 800d500:	2302      	movs	r3, #2
 800d502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f040 8095 	bne.w	800d63a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d514:	4611      	mov	r1, r2
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff f9af 	bl	800c87a <ld_clust>
 800d51c:	4602      	mov	r2, r0
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d524:	331c      	adds	r3, #28
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fa08 	bl	800b93c <ld_dword>
 800d52c:	4602      	mov	r2, r0
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	88da      	ldrh	r2, [r3, #6]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	79fa      	ldrb	r2, [r7, #7]
 800d54a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3330      	adds	r3, #48	; 0x30
 800d562:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fa72 	bl	800ba52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	f003 0320 	and.w	r3, r3, #32
 800d574:	2b00      	cmp	r3, #0
 800d576:	d060      	beq.n	800d63a <f_open+0x362>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d05c      	beq.n	800d63a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	68da      	ldr	r2, [r3, #12]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	895b      	ldrh	r3, [r3, #10]
 800d58c:	025b      	lsls	r3, r3, #9
 800d58e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	657b      	str	r3, [r7, #84]	; 0x54
 800d59c:	e016      	b.n	800d5cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fe fd1d 	bl	800bfe2 <get_fat>
 800d5a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d5aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d802      	bhi.n	800d5b6 <f_open+0x2de>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5bc:	d102      	bne.n	800d5c4 <f_open+0x2ec>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	657b      	str	r3, [r7, #84]	; 0x54
 800d5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <f_open+0x304>
 800d5d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d8e0      	bhi.n	800d59e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d127      	bne.n	800d63a <f_open+0x362>
 800d5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d022      	beq.n	800d63a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fcd3 	bl	800bfa4 <clust2sect>
 800d5fe:	6478      	str	r0, [r7, #68]	; 0x44
 800d600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d602:	2b00      	cmp	r3, #0
 800d604:	d103      	bne.n	800d60e <f_open+0x336>
						res = FR_INT_ERR;
 800d606:	2302      	movs	r3, #2
 800d608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d60c:	e015      	b.n	800d63a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d610:	0a5a      	lsrs	r2, r3, #9
 800d612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d614:	441a      	add	r2, r3
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	7858      	ldrb	r0, [r3, #1]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6a1a      	ldr	r2, [r3, #32]
 800d628:	2301      	movs	r3, #1
 800d62a:	f7fe f911 	bl	800b850 <disk_read>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <f_open+0x362>
 800d634:	2301      	movs	r3, #1
 800d636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d63a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <f_open+0x370>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2200      	movs	r2, #0
 800d646:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3760      	adds	r7, #96	; 0x60
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b08e      	sub	sp, #56	; 0x38
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2200      	movs	r2, #0
 800d66a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f107 0214 	add.w	r2, r7, #20
 800d672:	4611      	mov	r1, r2
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff fdb3 	bl	800d1e0 <validate>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d684:	2b00      	cmp	r3, #0
 800d686:	d107      	bne.n	800d698 <f_read+0x44>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	7d5b      	ldrb	r3, [r3, #21]
 800d68c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <f_read+0x4a>
 800d698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d69c:	e115      	b.n	800d8ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	7d1b      	ldrb	r3, [r3, #20]
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <f_read+0x5a>
 800d6aa:	2307      	movs	r3, #7
 800d6ac:	e10d      	b.n	800d8ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	68da      	ldr	r2, [r3, #12]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	f240 80fe 	bls.w	800d8c0 <f_read+0x26c>
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d6c8:	e0fa      	b.n	800d8c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f040 80c6 	bne.w	800d864 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	699b      	ldr	r3, [r3, #24]
 800d6dc:	0a5b      	lsrs	r3, r3, #9
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	8952      	ldrh	r2, [r2, #10]
 800d6e2:	3a01      	subs	r2, #1
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d12f      	bne.n	800d74e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d103      	bne.n	800d6fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d6fc:	e013      	b.n	800d726 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d007      	beq.n	800d716 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	4619      	mov	r1, r3
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7fe fef9 	bl	800c504 <clmt_clust>
 800d712:	6338      	str	r0, [r7, #48]	; 0x30
 800d714:	e007      	b.n	800d726 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	69db      	ldr	r3, [r3, #28]
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f7fe fc5f 	bl	800bfe2 <get_fat>
 800d724:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d804      	bhi.n	800d736 <f_read+0xe2>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2202      	movs	r2, #2
 800d730:	755a      	strb	r2, [r3, #21]
 800d732:	2302      	movs	r3, #2
 800d734:	e0c9      	b.n	800d8ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d104      	bne.n	800d748 <f_read+0xf4>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	755a      	strb	r2, [r3, #21]
 800d744:	2301      	movs	r3, #1
 800d746:	e0c0      	b.n	800d8ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d74c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	69db      	ldr	r3, [r3, #28]
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7fe fc24 	bl	800bfa4 <clust2sect>
 800d75c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d104      	bne.n	800d76e <f_read+0x11a>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2202      	movs	r2, #2
 800d768:	755a      	strb	r2, [r3, #21]
 800d76a:	2302      	movs	r3, #2
 800d76c:	e0ad      	b.n	800d8ca <f_read+0x276>
			sect += csect;
 800d76e:	69ba      	ldr	r2, [r7, #24]
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	4413      	add	r3, r2
 800d774:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	0a5b      	lsrs	r3, r3, #9
 800d77a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d039      	beq.n	800d7f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d782:	69fa      	ldr	r2, [r7, #28]
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	4413      	add	r3, r2
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	8952      	ldrh	r2, [r2, #10]
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d905      	bls.n	800d79c <f_read+0x148>
					cc = fs->csize - csect;
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	895b      	ldrh	r3, [r3, #10]
 800d794:	461a      	mov	r2, r3
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	7858      	ldrb	r0, [r3, #1]
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7a6:	f7fe f853 	bl	800b850 <disk_read>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d004      	beq.n	800d7ba <f_read+0x166>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	755a      	strb	r2, [r3, #21]
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e087      	b.n	800d8ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	7d1b      	ldrb	r3, [r3, #20]
 800d7be:	b25b      	sxtb	r3, r3
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	da14      	bge.n	800d7ee <f_read+0x19a>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6a1a      	ldr	r2, [r3, #32]
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d90d      	bls.n	800d7ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6a1a      	ldr	r2, [r3, #32]
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	025b      	lsls	r3, r3, #9
 800d7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7de:	18d0      	adds	r0, r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3330      	adds	r3, #48	; 0x30
 800d7e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	f7fe f911 	bl	800ba10 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	025b      	lsls	r3, r3, #9
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d7f4:	e050      	b.n	800d898 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	69ba      	ldr	r2, [r7, #24]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d02e      	beq.n	800d85e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	7d1b      	ldrb	r3, [r3, #20]
 800d804:	b25b      	sxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	da18      	bge.n	800d83c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	7858      	ldrb	r0, [r3, #1]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6a1a      	ldr	r2, [r3, #32]
 800d818:	2301      	movs	r3, #1
 800d81a:	f7fe f839 	bl	800b890 <disk_write>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d004      	beq.n	800d82e <f_read+0x1da>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2201      	movs	r2, #1
 800d828:	755a      	strb	r2, [r3, #21]
 800d82a:	2301      	movs	r3, #1
 800d82c:	e04d      	b.n	800d8ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7d1b      	ldrb	r3, [r3, #20]
 800d832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d836:	b2da      	uxtb	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	7858      	ldrb	r0, [r3, #1]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d846:	2301      	movs	r3, #1
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	f7fe f801 	bl	800b850 <disk_read>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d004      	beq.n	800d85e <f_read+0x20a>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	755a      	strb	r2, [r3, #21]
 800d85a:	2301      	movs	r3, #1
 800d85c:	e035      	b.n	800d8ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d901      	bls.n	800d87e <f_read+0x22a>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d88c:	4413      	add	r3, r2
 800d88e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d890:	4619      	mov	r1, r3
 800d892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d894:	f7fe f8bc 	bl	800ba10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	4413      	add	r3, r2
 800d89e:	627b      	str	r3, [r7, #36]	; 0x24
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	699a      	ldr	r2, [r3, #24]
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	441a      	add	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	619a      	str	r2, [r3, #24]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	441a      	add	r2, r3
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f47f af01 	bne.w	800d6ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3738      	adds	r7, #56	; 0x38
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b086      	sub	sp, #24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f107 0208 	add.w	r2, r7, #8
 800d8e0:	4611      	mov	r1, r2
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fc7c 	bl	800d1e0 <validate>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d168      	bne.n	800d9c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7d1b      	ldrb	r3, [r3, #20]
 800d8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d062      	beq.n	800d9c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7d1b      	ldrb	r3, [r3, #20]
 800d902:	b25b      	sxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	da15      	bge.n	800d934 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	7858      	ldrb	r0, [r3, #1]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a1a      	ldr	r2, [r3, #32]
 800d916:	2301      	movs	r3, #1
 800d918:	f7fd ffba 	bl	800b890 <disk_write>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <f_sync+0x54>
 800d922:	2301      	movs	r3, #1
 800d924:	e04f      	b.n	800d9c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	7d1b      	ldrb	r3, [r3, #20]
 800d92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d934:	f7fa fe3e 	bl	80085b4 <get_fattime>
 800d938:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7fe fa92 	bl	800be6c <move_window>
 800d948:	4603      	mov	r3, r0
 800d94a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d94c:	7dfb      	ldrb	r3, [r7, #23]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d138      	bne.n	800d9c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d956:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	330b      	adds	r3, #11
 800d95c:	781a      	ldrb	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	330b      	adds	r3, #11
 800d962:	f042 0220 	orr.w	r2, r2, #32
 800d966:	b2d2      	uxtb	r2, r2
 800d968:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	461a      	mov	r2, r3
 800d974:	68f9      	ldr	r1, [r7, #12]
 800d976:	f7fe ff9f 	bl	800c8b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f103 021c 	add.w	r2, r3, #28
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe f816 	bl	800b9b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3316      	adds	r3, #22
 800d990:	6939      	ldr	r1, [r7, #16]
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe f810 	bl	800b9b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	3312      	adds	r3, #18
 800d99c:	2100      	movs	r1, #0
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fd ffef 	bl	800b982 <st_word>
					fs->wflag = 1;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fa8b 	bl	800bec8 <sync_fs>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff ff7b 	bl	800d8d2 <f_sync>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d118      	bne.n	800da18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f107 0208 	add.w	r2, r7, #8
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff fbf6 	bl	800d1e0 <validate>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9f8:	7bfb      	ldrb	r3, [r7, #15]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10c      	bne.n	800da18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	691b      	ldr	r3, [r3, #16]
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe f98e 	bl	800bd24 <dec_lock>
 800da08:	4603      	mov	r3, r0
 800da0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d102      	bne.n	800da18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800da18:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b090      	sub	sp, #64	; 0x40
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f107 0208 	add.w	r2, r7, #8
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f7ff fbd3 	bl	800d1e0 <validate>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800da40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da44:	2b00      	cmp	r3, #0
 800da46:	d103      	bne.n	800da50 <f_lseek+0x2e>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7d5b      	ldrb	r3, [r3, #21]
 800da4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800da50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <f_lseek+0x3c>
 800da58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da5c:	e1e6      	b.n	800de2c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 80d1 	beq.w	800dc0a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6e:	d15a      	bne.n	800db26 <f_lseek+0x104>
			tbl = fp->cltbl;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800da76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da78:	1d1a      	adds	r2, r3, #4
 800da7a:	627a      	str	r2, [r7, #36]	; 0x24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	617b      	str	r3, [r7, #20]
 800da80:	2302      	movs	r3, #2
 800da82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d03a      	beq.n	800db06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800da90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da92:	613b      	str	r3, [r7, #16]
 800da94:	2300      	movs	r3, #0
 800da96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	3302      	adds	r3, #2
 800da9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	3301      	adds	r3, #1
 800daa6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fa98 	bl	800bfe2 <get_fat>
 800dab2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d804      	bhi.n	800dac4 <f_lseek+0xa2>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2202      	movs	r2, #2
 800dabe:	755a      	strb	r2, [r3, #21]
 800dac0:	2302      	movs	r3, #2
 800dac2:	e1b3      	b.n	800de2c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daca:	d104      	bne.n	800dad6 <f_lseek+0xb4>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	755a      	strb	r2, [r3, #21]
 800dad2:	2301      	movs	r3, #1
 800dad4:	e1aa      	b.n	800de2c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3301      	adds	r3, #1
 800dada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dadc:	429a      	cmp	r2, r3
 800dade:	d0de      	beq.n	800da9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d809      	bhi.n	800dafc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	1d1a      	adds	r2, r3, #4
 800daec:	627a      	str	r2, [r7, #36]	; 0x24
 800daee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daf0:	601a      	str	r2, [r3, #0]
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	1d1a      	adds	r2, r3, #4
 800daf6:	627a      	str	r2, [r7, #36]	; 0x24
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	429a      	cmp	r2, r3
 800db04:	d3c4      	bcc.n	800da90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800db0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	429a      	cmp	r2, r3
 800db14:	d803      	bhi.n	800db1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]
 800db1c:	e184      	b.n	800de28 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800db1e:	2311      	movs	r3, #17
 800db20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800db24:	e180      	b.n	800de28 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d902      	bls.n	800db36 <f_lseek+0x114>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	f000 8172 	beq.w	800de28 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	3b01      	subs	r3, #1
 800db48:	4619      	mov	r1, r3
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7fe fcda 	bl	800c504 <clmt_clust>
 800db50:	4602      	mov	r2, r0
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	69db      	ldr	r3, [r3, #28]
 800db5c:	4619      	mov	r1, r3
 800db5e:	4610      	mov	r0, r2
 800db60:	f7fe fa20 	bl	800bfa4 <clust2sect>
 800db64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d104      	bne.n	800db76 <f_lseek+0x154>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2202      	movs	r2, #2
 800db70:	755a      	strb	r2, [r3, #21]
 800db72:	2302      	movs	r3, #2
 800db74:	e15a      	b.n	800de2c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	3b01      	subs	r3, #1
 800db7a:	0a5b      	lsrs	r3, r3, #9
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	8952      	ldrh	r2, [r2, #10]
 800db80:	3a01      	subs	r2, #1
 800db82:	4013      	ands	r3, r2
 800db84:	69ba      	ldr	r2, [r7, #24]
 800db86:	4413      	add	r3, r2
 800db88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 8148 	beq.w	800de28 <f_lseek+0x406>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a1b      	ldr	r3, [r3, #32]
 800db9c:	69ba      	ldr	r2, [r7, #24]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	f000 8142 	beq.w	800de28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7d1b      	ldrb	r3, [r3, #20]
 800dba8:	b25b      	sxtb	r3, r3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	da18      	bge.n	800dbe0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	7858      	ldrb	r0, [r3, #1]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1a      	ldr	r2, [r3, #32]
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f7fd fe67 	bl	800b890 <disk_write>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <f_lseek+0x1b0>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	755a      	strb	r2, [r3, #21]
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e12c      	b.n	800de2c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	7d1b      	ldrb	r3, [r3, #20]
 800dbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	7858      	ldrb	r0, [r3, #1]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbea:	2301      	movs	r3, #1
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	f7fd fe2f 	bl	800b850 <disk_read>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d004      	beq.n	800dc02 <f_lseek+0x1e0>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	755a      	strb	r2, [r3, #21]
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e114      	b.n	800de2c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	69ba      	ldr	r2, [r7, #24]
 800dc06:	621a      	str	r2, [r3, #32]
 800dc08:	e10e      	b.n	800de28 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d908      	bls.n	800dc26 <f_lseek+0x204>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	7d1b      	ldrb	r3, [r3, #20]
 800dc18:	f003 0302 	and.w	r3, r3, #2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	699b      	ldr	r3, [r3, #24]
 800dc2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc34:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 80a7 	beq.w	800dd8c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	895b      	ldrh	r3, [r3, #10]
 800dc42:	025b      	lsls	r3, r3, #9
 800dc44:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d01b      	beq.n	800dc84 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	1e5a      	subs	r2, r3, #1
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	fbb2 f2f3 	udiv	r2, r2, r3
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	1e59      	subs	r1, r3, #1
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d30f      	bcc.n	800dc84 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	1e5a      	subs	r2, r3, #1
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	425b      	negs	r3, r3
 800dc6c:	401a      	ands	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	699b      	ldr	r3, [r3, #24]
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc82:	e022      	b.n	800dcca <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d119      	bne.n	800dcc4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2100      	movs	r1, #0
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fe fb9d 	bl	800c3d4 <create_chain>
 800dc9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d104      	bne.n	800dcac <f_lseek+0x28a>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2202      	movs	r2, #2
 800dca6:	755a      	strb	r2, [r3, #21]
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e0bf      	b.n	800de2c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb2:	d104      	bne.n	800dcbe <f_lseek+0x29c>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	755a      	strb	r2, [r3, #21]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e0b6      	b.n	800de2c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcc2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcc8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d05d      	beq.n	800dd8c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dcd0:	e03a      	b.n	800dd48 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	603b      	str	r3, [r7, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	699a      	ldr	r2, [r3, #24]
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	441a      	add	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	7d1b      	ldrb	r3, [r3, #20]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fb6c 	bl	800c3d4 <create_chain>
 800dcfc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d108      	bne.n	800dd16 <f_lseek+0x2f4>
							ofs = 0; break;
 800dd04:	2300      	movs	r3, #0
 800dd06:	603b      	str	r3, [r7, #0]
 800dd08:	e022      	b.n	800dd50 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe f967 	bl	800bfe2 <get_fat>
 800dd14:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d104      	bne.n	800dd28 <f_lseek+0x306>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	755a      	strb	r2, [r3, #21]
 800dd24:	2301      	movs	r3, #1
 800dd26:	e081      	b.n	800de2c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d904      	bls.n	800dd38 <f_lseek+0x316>
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d304      	bcc.n	800dd42 <f_lseek+0x320>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	755a      	strb	r2, [r3, #21]
 800dd3e:	2302      	movs	r3, #2
 800dd40:	e074      	b.n	800de2c <f_lseek+0x40a>
					fp->clust = clst;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd46:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	69fb      	ldr	r3, [r7, #28]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d8c0      	bhi.n	800dcd2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	699a      	ldr	r2, [r3, #24]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	441a      	add	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d012      	beq.n	800dd8c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fe f91a 	bl	800bfa4 <clust2sect>
 800dd70:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d104      	bne.n	800dd82 <f_lseek+0x360>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	755a      	strb	r2, [r3, #21]
 800dd7e:	2302      	movs	r3, #2
 800dd80:	e054      	b.n	800de2c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	0a5b      	lsrs	r3, r3, #9
 800dd86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd88:	4413      	add	r3, r2
 800dd8a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	699a      	ldr	r2, [r3, #24]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d90a      	bls.n	800ddae <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	699a      	ldr	r2, [r3, #24]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	7d1b      	ldrb	r3, [r3, #20]
 800dda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d036      	beq.n	800de28 <f_lseek+0x406>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d031      	beq.n	800de28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7d1b      	ldrb	r3, [r3, #20]
 800ddc8:	b25b      	sxtb	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da18      	bge.n	800de00 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	7858      	ldrb	r0, [r3, #1]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a1a      	ldr	r2, [r3, #32]
 800dddc:	2301      	movs	r3, #1
 800ddde:	f7fd fd57 	bl	800b890 <disk_write>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <f_lseek+0x3d0>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	755a      	strb	r2, [r3, #21]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e01c      	b.n	800de2c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	7d1b      	ldrb	r3, [r3, #20]
 800ddf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	7858      	ldrb	r0, [r3, #1]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de0a:	2301      	movs	r3, #1
 800de0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de0e:	f7fd fd1f 	bl	800b850 <disk_read>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d004      	beq.n	800de22 <f_lseek+0x400>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	755a      	strb	r2, [r3, #21]
 800de1e:	2301      	movs	r3, #1
 800de20:	e004      	b.n	800de2c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de26:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800de28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3740      	adds	r7, #64	; 0x40
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de42:	2301      	movs	r3, #1
 800de44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de4a:	4b1f      	ldr	r3, [pc, #124]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de4c:	7a5b      	ldrb	r3, [r3, #9]
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d131      	bne.n	800deb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de54:	4b1c      	ldr	r3, [pc, #112]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de56:	7a5b      	ldrb	r3, [r3, #9]
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	461a      	mov	r2, r3
 800de5c:	4b1a      	ldr	r3, [pc, #104]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de5e:	2100      	movs	r1, #0
 800de60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de62:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de64:	7a5b      	ldrb	r3, [r3, #9]
 800de66:	b2db      	uxtb	r3, r3
 800de68:	4a17      	ldr	r2, [pc, #92]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de72:	4b15      	ldr	r3, [pc, #84]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de74:	7a5b      	ldrb	r3, [r3, #9]
 800de76:	b2db      	uxtb	r3, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de7c:	4413      	add	r3, r2
 800de7e:	79fa      	ldrb	r2, [r7, #7]
 800de80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de82:	4b11      	ldr	r3, [pc, #68]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de84:	7a5b      	ldrb	r3, [r3, #9]
 800de86:	b2db      	uxtb	r3, r3
 800de88:	1c5a      	adds	r2, r3, #1
 800de8a:	b2d1      	uxtb	r1, r2
 800de8c:	4a0e      	ldr	r2, [pc, #56]	; (800dec8 <FATFS_LinkDriverEx+0x94>)
 800de8e:	7251      	strb	r1, [r2, #9]
 800de90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de92:	7dbb      	ldrb	r3, [r7, #22]
 800de94:	3330      	adds	r3, #48	; 0x30
 800de96:	b2da      	uxtb	r2, r3
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	3301      	adds	r3, #1
 800dea0:	223a      	movs	r2, #58	; 0x3a
 800dea2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	3302      	adds	r3, #2
 800dea8:	222f      	movs	r2, #47	; 0x2f
 800deaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	3303      	adds	r3, #3
 800deb0:	2200      	movs	r2, #0
 800deb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800deb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deba:	4618      	mov	r0, r3
 800debc:	371c      	adds	r7, #28
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20001720 	.word	0x20001720

0800decc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ded6:	2200      	movs	r2, #0
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f7ff ffaa 	bl	800de34 <FATFS_LinkDriverEx>
 800dee0:	4603      	mov	r3, r0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800def0:	2201      	movs	r2, #1
 800def2:	490e      	ldr	r1, [pc, #56]	; (800df2c <MX_USB_HOST_Init+0x40>)
 800def4:	480e      	ldr	r0, [pc, #56]	; (800df30 <MX_USB_HOST_Init+0x44>)
 800def6:	f7fc f819 	bl	8009f2c <USBH_Init>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800df00:	f7f3 fba0 	bl	8001644 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800df04:	490b      	ldr	r1, [pc, #44]	; (800df34 <MX_USB_HOST_Init+0x48>)
 800df06:	480a      	ldr	r0, [pc, #40]	; (800df30 <MX_USB_HOST_Init+0x44>)
 800df08:	f7fc f89e 	bl	800a048 <USBH_RegisterClass>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800df12:	f7f3 fb97 	bl	8001644 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800df16:	4806      	ldr	r0, [pc, #24]	; (800df30 <MX_USB_HOST_Init+0x44>)
 800df18:	f7fc f922 	bl	800a160 <USBH_Start>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800df22:	f7f3 fb8f 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800df26:	bf00      	nop
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	0800df4d 	.word	0x0800df4d
 800df30:	2000172c 	.word	0x2000172c
 800df34:	20000020 	.word	0x20000020

0800df38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800df3c:	4802      	ldr	r0, [pc, #8]	; (800df48 <MX_USB_HOST_Process+0x10>)
 800df3e:	f7fc f91f 	bl	800a180 <USBH_Process>
}
 800df42:	bf00      	nop
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	2000172c 	.word	0x2000172c

0800df4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	460b      	mov	r3, r1
 800df56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800df58:	78fb      	ldrb	r3, [r7, #3]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d819      	bhi.n	800df94 <USBH_UserProcess+0x48>
 800df60:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <USBH_UserProcess+0x1c>)
 800df62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df66:	bf00      	nop
 800df68:	0800df95 	.word	0x0800df95
 800df6c:	0800df85 	.word	0x0800df85
 800df70:	0800df95 	.word	0x0800df95
 800df74:	0800df8d 	.word	0x0800df8d
 800df78:	0800df7d 	.word	0x0800df7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800df7c:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <USBH_UserProcess+0x58>)
 800df7e:	2203      	movs	r2, #3
 800df80:	701a      	strb	r2, [r3, #0]
  break;
 800df82:	e008      	b.n	800df96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800df84:	4b07      	ldr	r3, [pc, #28]	; (800dfa4 <USBH_UserProcess+0x58>)
 800df86:	2202      	movs	r2, #2
 800df88:	701a      	strb	r2, [r3, #0]
  break;
 800df8a:	e004      	b.n	800df96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <USBH_UserProcess+0x58>)
 800df8e:	2201      	movs	r2, #1
 800df90:	701a      	strb	r2, [r3, #0]
  break;
 800df92:	e000      	b.n	800df96 <USBH_UserProcess+0x4a>

  default:
  break;
 800df94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	20001b04 	.word	0x20001b04

0800dfa8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08a      	sub	sp, #40	; 0x28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfb0:	f107 0314 	add.w	r3, r7, #20
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	601a      	str	r2, [r3, #0]
 800dfb8:	605a      	str	r2, [r3, #4]
 800dfba:	609a      	str	r2, [r3, #8]
 800dfbc:	60da      	str	r2, [r3, #12]
 800dfbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dfc8:	d147      	bne.n	800e05a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfca:	2300      	movs	r3, #0
 800dfcc:	613b      	str	r3, [r7, #16]
 800dfce:	4b25      	ldr	r3, [pc, #148]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800dfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd2:	4a24      	ldr	r2, [pc, #144]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800dfd4:	f043 0301 	orr.w	r3, r3, #1
 800dfd8:	6313      	str	r3, [r2, #48]	; 0x30
 800dfda:	4b22      	ldr	r3, [pc, #136]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800dfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	613b      	str	r3, [r7, #16]
 800dfe4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dfe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dfec:	2300      	movs	r3, #0
 800dfee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dff0:	2300      	movs	r3, #0
 800dff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dff4:	f107 0314 	add.w	r3, r7, #20
 800dff8:	4619      	mov	r1, r3
 800dffa:	481b      	ldr	r0, [pc, #108]	; (800e068 <HAL_HCD_MspInit+0xc0>)
 800dffc:	f7f4 fb80 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e006:	2302      	movs	r3, #2
 800e008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e00e:	2303      	movs	r3, #3
 800e010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e012:	230a      	movs	r3, #10
 800e014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e016:	f107 0314 	add.w	r3, r7, #20
 800e01a:	4619      	mov	r1, r3
 800e01c:	4812      	ldr	r0, [pc, #72]	; (800e068 <HAL_HCD_MspInit+0xc0>)
 800e01e:	f7f4 fb6f 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e022:	4b10      	ldr	r3, [pc, #64]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800e024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e026:	4a0f      	ldr	r2, [pc, #60]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800e028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e02c:	6353      	str	r3, [r2, #52]	; 0x34
 800e02e:	2300      	movs	r3, #0
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	4b0c      	ldr	r3, [pc, #48]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800e034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e036:	4a0b      	ldr	r2, [pc, #44]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800e038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e03c:	6453      	str	r3, [r2, #68]	; 0x44
 800e03e:	4b09      	ldr	r3, [pc, #36]	; (800e064 <HAL_HCD_MspInit+0xbc>)
 800e040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e04a:	2200      	movs	r2, #0
 800e04c:	2100      	movs	r1, #0
 800e04e:	2043      	movs	r0, #67	; 0x43
 800e050:	f7f3 fecf 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e054:	2043      	movs	r0, #67	; 0x43
 800e056:	f7f3 fee8 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e05a:	bf00      	nop
 800e05c:	3728      	adds	r7, #40	; 0x28
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	40023800 	.word	0x40023800
 800e068:	40020000 	.word	0x40020000

0800e06c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc fc5f 	bl	800a93e <USBH_LL_IncTimer>
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e096:	4618      	mov	r0, r3
 800e098:	f7fc fc97 	bl	800a9ca <USBH_LL_Connect>
}
 800e09c:	bf00      	nop
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fc fca0 	bl	800a9f8 <USBH_LL_Disconnect>
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fc fc51 	bl	800a992 <USBH_LL_PortEnabled>
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e106:	4618      	mov	r0, r3
 800e108:	f7fc fc51 	bl	800a9ae <USBH_LL_PortDisabled>
}
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e122:	2b01      	cmp	r3, #1
 800e124:	d12a      	bne.n	800e17c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e126:	4a18      	ldr	r2, [pc, #96]	; (800e188 <USBH_LL_Init+0x74>)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4a15      	ldr	r2, [pc, #84]	; (800e188 <USBH_LL_Init+0x74>)
 800e132:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e136:	4b14      	ldr	r3, [pc, #80]	; (800e188 <USBH_LL_Init+0x74>)
 800e138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e13c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e13e:	4b12      	ldr	r3, [pc, #72]	; (800e188 <USBH_LL_Init+0x74>)
 800e140:	2208      	movs	r2, #8
 800e142:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e144:	4b10      	ldr	r3, [pc, #64]	; (800e188 <USBH_LL_Init+0x74>)
 800e146:	2201      	movs	r2, #1
 800e148:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e14a:	4b0f      	ldr	r3, [pc, #60]	; (800e188 <USBH_LL_Init+0x74>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e150:	4b0d      	ldr	r3, [pc, #52]	; (800e188 <USBH_LL_Init+0x74>)
 800e152:	2202      	movs	r2, #2
 800e154:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <USBH_LL_Init+0x74>)
 800e158:	2200      	movs	r2, #0
 800e15a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e15c:	480a      	ldr	r0, [pc, #40]	; (800e188 <USBH_LL_Init+0x74>)
 800e15e:	f7f4 fccf 	bl	8002b00 <HAL_HCD_Init>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e168:	f7f3 fa6c 	bl	8001644 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e16c:	4806      	ldr	r0, [pc, #24]	; (800e188 <USBH_LL_Init+0x74>)
 800e16e:	f7f5 f8b2 	bl	80032d6 <HAL_HCD_GetCurrentFrame>
 800e172:	4603      	mov	r3, r0
 800e174:	4619      	mov	r1, r3
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fc fbd2 	bl	800a920 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20001b08 	.word	0x20001b08

0800e18c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7f5 f821 	bl	80031ea <HAL_HCD_Start>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 f982 	bl	800e4b8 <USBH_Get_USB_Status>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b084      	sub	sp, #16
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7f5 f829 	bl	8003230 <HAL_HCD_Stop>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 f967 	bl	800e4b8 <USBH_Get_USB_Status>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e200:	2301      	movs	r3, #1
 800e202:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f5 f871 	bl	80032f2 <HAL_HCD_GetCurrentSpeed>
 800e210:	4603      	mov	r3, r0
 800e212:	2b02      	cmp	r3, #2
 800e214:	d00c      	beq.n	800e230 <USBH_LL_GetSpeed+0x38>
 800e216:	2b02      	cmp	r3, #2
 800e218:	d80d      	bhi.n	800e236 <USBH_LL_GetSpeed+0x3e>
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <USBH_LL_GetSpeed+0x2c>
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d003      	beq.n	800e22a <USBH_LL_GetSpeed+0x32>
 800e222:	e008      	b.n	800e236 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e224:	2300      	movs	r3, #0
 800e226:	73fb      	strb	r3, [r7, #15]
    break;
 800e228:	e008      	b.n	800e23c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e22a:	2301      	movs	r3, #1
 800e22c:	73fb      	strb	r3, [r7, #15]
    break;
 800e22e:	e005      	b.n	800e23c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e230:	2302      	movs	r3, #2
 800e232:	73fb      	strb	r3, [r7, #15]
    break;
 800e234:	e002      	b.n	800e23c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e236:	2301      	movs	r3, #1
 800e238:	73fb      	strb	r3, [r7, #15]
    break;
 800e23a:	bf00      	nop
  }
  return  speed;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e252:	2300      	movs	r3, #0
 800e254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f5 f804 	bl	800326a <HAL_HCD_ResetPort>
 800e262:	4603      	mov	r3, r0
 800e264:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f925 	bl	800e4b8 <USBH_Get_USB_Status>
 800e26e:	4603      	mov	r3, r0
 800e270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e272:	7bbb      	ldrb	r3, [r7, #14]
}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e28e:	78fa      	ldrb	r2, [r7, #3]
 800e290:	4611      	mov	r1, r2
 800e292:	4618      	mov	r0, r3
 800e294:	f7f5 f80b 	bl	80032ae <HAL_HCD_HC_GetXferCount>
 800e298:	4603      	mov	r3, r0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e2a2:	b590      	push	{r4, r7, lr}
 800e2a4:	b089      	sub	sp, #36	; 0x24
 800e2a6:	af04      	add	r7, sp, #16
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	4608      	mov	r0, r1
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	70fb      	strb	r3, [r7, #3]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70bb      	strb	r3, [r7, #2]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e2ca:	787c      	ldrb	r4, [r7, #1]
 800e2cc:	78ba      	ldrb	r2, [r7, #2]
 800e2ce:	78f9      	ldrb	r1, [r7, #3]
 800e2d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2d2:	9302      	str	r3, [sp, #8]
 800e2d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	f7f4 fc6f 	bl	8002bc4 <HAL_HCD_HC_Init>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f000 f8e3 	bl	800e4b8 <USBH_Get_USB_Status>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd90      	pop	{r4, r7, pc}

0800e300 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e31a:	78fa      	ldrb	r2, [r7, #3]
 800e31c:	4611      	mov	r1, r2
 800e31e:	4618      	mov	r0, r3
 800e320:	f7f4 fcdf 	bl	8002ce2 <HAL_HCD_HC_Halt>
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f8c4 	bl	800e4b8 <USBH_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e334:	7bbb      	ldrb	r3, [r7, #14]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e33e:	b590      	push	{r4, r7, lr}
 800e340:	b089      	sub	sp, #36	; 0x24
 800e342:	af04      	add	r7, sp, #16
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	4608      	mov	r0, r1
 800e348:	4611      	mov	r1, r2
 800e34a:	461a      	mov	r2, r3
 800e34c:	4603      	mov	r3, r0
 800e34e:	70fb      	strb	r3, [r7, #3]
 800e350:	460b      	mov	r3, r1
 800e352:	70bb      	strb	r3, [r7, #2]
 800e354:	4613      	mov	r3, r2
 800e356:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e358:	2300      	movs	r3, #0
 800e35a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e35c:	2300      	movs	r3, #0
 800e35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e366:	787c      	ldrb	r4, [r7, #1]
 800e368:	78ba      	ldrb	r2, [r7, #2]
 800e36a:	78f9      	ldrb	r1, [r7, #3]
 800e36c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e370:	9303      	str	r3, [sp, #12]
 800e372:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e374:	9302      	str	r3, [sp, #8]
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	4623      	mov	r3, r4
 800e382:	f7f4 fcd1 	bl	8002d28 <HAL_HCD_HC_SubmitRequest>
 800e386:	4603      	mov	r3, r0
 800e388:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f893 	bl	800e4b8 <USBH_Get_USB_Status>
 800e392:	4603      	mov	r3, r0
 800e394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e396:	7bbb      	ldrb	r3, [r7, #14]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd90      	pop	{r4, r7, pc}

0800e3a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3b2:	78fa      	ldrb	r2, [r7, #3]
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f4 ff65 	bl	8003286 <HAL_HCD_HC_GetURBState>
 800e3bc:	4603      	mov	r3, r0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3708      	adds	r7, #8
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b082      	sub	sp, #8
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800e3d2:	20c8      	movs	r0, #200	; 0xc8
 800e3d4:	f7f3 fc0e 	bl	8001bf4 <HAL_Delay>
  return USBH_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b085      	sub	sp, #20
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	70fb      	strb	r3, [r7, #3]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3f8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e3fa:	78fb      	ldrb	r3, [r7, #3]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	212c      	movs	r1, #44	; 0x2c
 800e400:	fb01 f303 	mul.w	r3, r1, r3
 800e404:	4413      	add	r3, r2
 800e406:	333b      	adds	r3, #59	; 0x3b
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d009      	beq.n	800e422 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e40e:	78fb      	ldrb	r3, [r7, #3]
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	212c      	movs	r1, #44	; 0x2c
 800e414:	fb01 f303 	mul.w	r3, r1, r3
 800e418:	4413      	add	r3, r2
 800e41a:	3354      	adds	r3, #84	; 0x54
 800e41c:	78ba      	ldrb	r2, [r7, #2]
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e008      	b.n	800e434 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e422:	78fb      	ldrb	r3, [r7, #3]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	212c      	movs	r1, #44	; 0x2c
 800e428:	fb01 f303 	mul.w	r3, r1, r3
 800e42c:	4413      	add	r3, r2
 800e42e:	3355      	adds	r3, #85	; 0x55
 800e430:	78ba      	ldrb	r2, [r7, #2]
 800e432:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr

0800e442 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e442:	b480      	push	{r7}
 800e444:	b085      	sub	sp, #20
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
 800e44a:	460b      	mov	r3, r1
 800e44c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e44e:	2300      	movs	r3, #0
 800e450:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e458:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e45a:	78fb      	ldrb	r3, [r7, #3]
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	212c      	movs	r1, #44	; 0x2c
 800e460:	fb01 f303 	mul.w	r3, r1, r3
 800e464:	4413      	add	r3, r2
 800e466:	333b      	adds	r3, #59	; 0x3b
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d009      	beq.n	800e482 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	212c      	movs	r1, #44	; 0x2c
 800e474:	fb01 f303 	mul.w	r3, r1, r3
 800e478:	4413      	add	r3, r2
 800e47a:	3354      	adds	r3, #84	; 0x54
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	73fb      	strb	r3, [r7, #15]
 800e480:	e008      	b.n	800e494 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e482:	78fb      	ldrb	r3, [r7, #3]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	212c      	movs	r1, #44	; 0x2c
 800e488:	fb01 f303 	mul.w	r3, r1, r3
 800e48c:	4413      	add	r3, r2
 800e48e:	3355      	adds	r3, #85	; 0x55
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e494:	7bfb      	ldrb	r3, [r7, #15]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b082      	sub	sp, #8
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7f3 fba2 	bl	8001bf4 <HAL_Delay>
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d817      	bhi.n	800e4fc <USBH_Get_USB_Status+0x44>
 800e4cc:	a201      	add	r2, pc, #4	; (adr r2, 800e4d4 <USBH_Get_USB_Status+0x1c>)
 800e4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d2:	bf00      	nop
 800e4d4:	0800e4e5 	.word	0x0800e4e5
 800e4d8:	0800e4eb 	.word	0x0800e4eb
 800e4dc:	0800e4f1 	.word	0x0800e4f1
 800e4e0:	0800e4f7 	.word	0x0800e4f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4e8:	e00b      	b.n	800e502 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ee:	e008      	b.n	800e502 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4f4:	e005      	b.n	800e502 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e4fa:	e002      	b.n	800e502 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e500:	bf00      	nop
  }
  return usb_status;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <__errno>:
 800e510:	4b01      	ldr	r3, [pc, #4]	; (800e518 <__errno+0x8>)
 800e512:	6818      	ldr	r0, [r3, #0]
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	20000040 	.word	0x20000040

0800e51c <__libc_init_array>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	4d0d      	ldr	r5, [pc, #52]	; (800e554 <__libc_init_array+0x38>)
 800e520:	4c0d      	ldr	r4, [pc, #52]	; (800e558 <__libc_init_array+0x3c>)
 800e522:	1b64      	subs	r4, r4, r5
 800e524:	10a4      	asrs	r4, r4, #2
 800e526:	2600      	movs	r6, #0
 800e528:	42a6      	cmp	r6, r4
 800e52a:	d109      	bne.n	800e540 <__libc_init_array+0x24>
 800e52c:	4d0b      	ldr	r5, [pc, #44]	; (800e55c <__libc_init_array+0x40>)
 800e52e:	4c0c      	ldr	r4, [pc, #48]	; (800e560 <__libc_init_array+0x44>)
 800e530:	f000 fc9e 	bl	800ee70 <_init>
 800e534:	1b64      	subs	r4, r4, r5
 800e536:	10a4      	asrs	r4, r4, #2
 800e538:	2600      	movs	r6, #0
 800e53a:	42a6      	cmp	r6, r4
 800e53c:	d105      	bne.n	800e54a <__libc_init_array+0x2e>
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	f855 3b04 	ldr.w	r3, [r5], #4
 800e544:	4798      	blx	r3
 800e546:	3601      	adds	r6, #1
 800e548:	e7ee      	b.n	800e528 <__libc_init_array+0xc>
 800e54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e54e:	4798      	blx	r3
 800e550:	3601      	adds	r6, #1
 800e552:	e7f2      	b.n	800e53a <__libc_init_array+0x1e>
 800e554:	0800f07c 	.word	0x0800f07c
 800e558:	0800f07c 	.word	0x0800f07c
 800e55c:	0800f07c 	.word	0x0800f07c
 800e560:	0800f080 	.word	0x0800f080

0800e564 <malloc>:
 800e564:	4b02      	ldr	r3, [pc, #8]	; (800e570 <malloc+0xc>)
 800e566:	4601      	mov	r1, r0
 800e568:	6818      	ldr	r0, [r3, #0]
 800e56a:	f000 b88d 	b.w	800e688 <_malloc_r>
 800e56e:	bf00      	nop
 800e570:	20000040 	.word	0x20000040

0800e574 <free>:
 800e574:	4b02      	ldr	r3, [pc, #8]	; (800e580 <free+0xc>)
 800e576:	4601      	mov	r1, r0
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	f000 b819 	b.w	800e5b0 <_free_r>
 800e57e:	bf00      	nop
 800e580:	20000040 	.word	0x20000040

0800e584 <memcpy>:
 800e584:	440a      	add	r2, r1
 800e586:	4291      	cmp	r1, r2
 800e588:	f100 33ff 	add.w	r3, r0, #4294967295
 800e58c:	d100      	bne.n	800e590 <memcpy+0xc>
 800e58e:	4770      	bx	lr
 800e590:	b510      	push	{r4, lr}
 800e592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e59a:	4291      	cmp	r1, r2
 800e59c:	d1f9      	bne.n	800e592 <memcpy+0xe>
 800e59e:	bd10      	pop	{r4, pc}

0800e5a0 <memset>:
 800e5a0:	4402      	add	r2, r0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d100      	bne.n	800e5aa <memset+0xa>
 800e5a8:	4770      	bx	lr
 800e5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ae:	e7f9      	b.n	800e5a4 <memset+0x4>

0800e5b0 <_free_r>:
 800e5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5b2:	2900      	cmp	r1, #0
 800e5b4:	d044      	beq.n	800e640 <_free_r+0x90>
 800e5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ba:	9001      	str	r0, [sp, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f1a1 0404 	sub.w	r4, r1, #4
 800e5c2:	bfb8      	it	lt
 800e5c4:	18e4      	addlt	r4, r4, r3
 800e5c6:	f000 f903 	bl	800e7d0 <__malloc_lock>
 800e5ca:	4a1e      	ldr	r2, [pc, #120]	; (800e644 <_free_r+0x94>)
 800e5cc:	9801      	ldr	r0, [sp, #4]
 800e5ce:	6813      	ldr	r3, [r2, #0]
 800e5d0:	b933      	cbnz	r3, 800e5e0 <_free_r+0x30>
 800e5d2:	6063      	str	r3, [r4, #4]
 800e5d4:	6014      	str	r4, [r2, #0]
 800e5d6:	b003      	add	sp, #12
 800e5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5dc:	f000 b8fe 	b.w	800e7dc <__malloc_unlock>
 800e5e0:	42a3      	cmp	r3, r4
 800e5e2:	d908      	bls.n	800e5f6 <_free_r+0x46>
 800e5e4:	6825      	ldr	r5, [r4, #0]
 800e5e6:	1961      	adds	r1, r4, r5
 800e5e8:	428b      	cmp	r3, r1
 800e5ea:	bf01      	itttt	eq
 800e5ec:	6819      	ldreq	r1, [r3, #0]
 800e5ee:	685b      	ldreq	r3, [r3, #4]
 800e5f0:	1949      	addeq	r1, r1, r5
 800e5f2:	6021      	streq	r1, [r4, #0]
 800e5f4:	e7ed      	b.n	800e5d2 <_free_r+0x22>
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	b10b      	cbz	r3, 800e600 <_free_r+0x50>
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	d9fa      	bls.n	800e5f6 <_free_r+0x46>
 800e600:	6811      	ldr	r1, [r2, #0]
 800e602:	1855      	adds	r5, r2, r1
 800e604:	42a5      	cmp	r5, r4
 800e606:	d10b      	bne.n	800e620 <_free_r+0x70>
 800e608:	6824      	ldr	r4, [r4, #0]
 800e60a:	4421      	add	r1, r4
 800e60c:	1854      	adds	r4, r2, r1
 800e60e:	42a3      	cmp	r3, r4
 800e610:	6011      	str	r1, [r2, #0]
 800e612:	d1e0      	bne.n	800e5d6 <_free_r+0x26>
 800e614:	681c      	ldr	r4, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	6053      	str	r3, [r2, #4]
 800e61a:	4421      	add	r1, r4
 800e61c:	6011      	str	r1, [r2, #0]
 800e61e:	e7da      	b.n	800e5d6 <_free_r+0x26>
 800e620:	d902      	bls.n	800e628 <_free_r+0x78>
 800e622:	230c      	movs	r3, #12
 800e624:	6003      	str	r3, [r0, #0]
 800e626:	e7d6      	b.n	800e5d6 <_free_r+0x26>
 800e628:	6825      	ldr	r5, [r4, #0]
 800e62a:	1961      	adds	r1, r4, r5
 800e62c:	428b      	cmp	r3, r1
 800e62e:	bf04      	itt	eq
 800e630:	6819      	ldreq	r1, [r3, #0]
 800e632:	685b      	ldreq	r3, [r3, #4]
 800e634:	6063      	str	r3, [r4, #4]
 800e636:	bf04      	itt	eq
 800e638:	1949      	addeq	r1, r1, r5
 800e63a:	6021      	streq	r1, [r4, #0]
 800e63c:	6054      	str	r4, [r2, #4]
 800e63e:	e7ca      	b.n	800e5d6 <_free_r+0x26>
 800e640:	b003      	add	sp, #12
 800e642:	bd30      	pop	{r4, r5, pc}
 800e644:	20001e0c 	.word	0x20001e0c

0800e648 <sbrk_aligned>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	4e0e      	ldr	r6, [pc, #56]	; (800e684 <sbrk_aligned+0x3c>)
 800e64c:	460c      	mov	r4, r1
 800e64e:	6831      	ldr	r1, [r6, #0]
 800e650:	4605      	mov	r5, r0
 800e652:	b911      	cbnz	r1, 800e65a <sbrk_aligned+0x12>
 800e654:	f000 f88c 	bl	800e770 <_sbrk_r>
 800e658:	6030      	str	r0, [r6, #0]
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	f000 f887 	bl	800e770 <_sbrk_r>
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	d00a      	beq.n	800e67c <sbrk_aligned+0x34>
 800e666:	1cc4      	adds	r4, r0, #3
 800e668:	f024 0403 	bic.w	r4, r4, #3
 800e66c:	42a0      	cmp	r0, r4
 800e66e:	d007      	beq.n	800e680 <sbrk_aligned+0x38>
 800e670:	1a21      	subs	r1, r4, r0
 800e672:	4628      	mov	r0, r5
 800e674:	f000 f87c 	bl	800e770 <_sbrk_r>
 800e678:	3001      	adds	r0, #1
 800e67a:	d101      	bne.n	800e680 <sbrk_aligned+0x38>
 800e67c:	f04f 34ff 	mov.w	r4, #4294967295
 800e680:	4620      	mov	r0, r4
 800e682:	bd70      	pop	{r4, r5, r6, pc}
 800e684:	20001e10 	.word	0x20001e10

0800e688 <_malloc_r>:
 800e688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e68c:	1ccd      	adds	r5, r1, #3
 800e68e:	f025 0503 	bic.w	r5, r5, #3
 800e692:	3508      	adds	r5, #8
 800e694:	2d0c      	cmp	r5, #12
 800e696:	bf38      	it	cc
 800e698:	250c      	movcc	r5, #12
 800e69a:	2d00      	cmp	r5, #0
 800e69c:	4607      	mov	r7, r0
 800e69e:	db01      	blt.n	800e6a4 <_malloc_r+0x1c>
 800e6a0:	42a9      	cmp	r1, r5
 800e6a2:	d905      	bls.n	800e6b0 <_malloc_r+0x28>
 800e6a4:	230c      	movs	r3, #12
 800e6a6:	603b      	str	r3, [r7, #0]
 800e6a8:	2600      	movs	r6, #0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6b0:	4e2e      	ldr	r6, [pc, #184]	; (800e76c <_malloc_r+0xe4>)
 800e6b2:	f000 f88d 	bl	800e7d0 <__malloc_lock>
 800e6b6:	6833      	ldr	r3, [r6, #0]
 800e6b8:	461c      	mov	r4, r3
 800e6ba:	bb34      	cbnz	r4, 800e70a <_malloc_r+0x82>
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f7ff ffc2 	bl	800e648 <sbrk_aligned>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	d14d      	bne.n	800e766 <_malloc_r+0xde>
 800e6ca:	6834      	ldr	r4, [r6, #0]
 800e6cc:	4626      	mov	r6, r4
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	d140      	bne.n	800e754 <_malloc_r+0xcc>
 800e6d2:	6823      	ldr	r3, [r4, #0]
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	eb04 0803 	add.w	r8, r4, r3
 800e6dc:	f000 f848 	bl	800e770 <_sbrk_r>
 800e6e0:	4580      	cmp	r8, r0
 800e6e2:	d13a      	bne.n	800e75a <_malloc_r+0xd2>
 800e6e4:	6821      	ldr	r1, [r4, #0]
 800e6e6:	3503      	adds	r5, #3
 800e6e8:	1a6d      	subs	r5, r5, r1
 800e6ea:	f025 0503 	bic.w	r5, r5, #3
 800e6ee:	3508      	adds	r5, #8
 800e6f0:	2d0c      	cmp	r5, #12
 800e6f2:	bf38      	it	cc
 800e6f4:	250c      	movcc	r5, #12
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	4638      	mov	r0, r7
 800e6fa:	f7ff ffa5 	bl	800e648 <sbrk_aligned>
 800e6fe:	3001      	adds	r0, #1
 800e700:	d02b      	beq.n	800e75a <_malloc_r+0xd2>
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	442b      	add	r3, r5
 800e706:	6023      	str	r3, [r4, #0]
 800e708:	e00e      	b.n	800e728 <_malloc_r+0xa0>
 800e70a:	6822      	ldr	r2, [r4, #0]
 800e70c:	1b52      	subs	r2, r2, r5
 800e70e:	d41e      	bmi.n	800e74e <_malloc_r+0xc6>
 800e710:	2a0b      	cmp	r2, #11
 800e712:	d916      	bls.n	800e742 <_malloc_r+0xba>
 800e714:	1961      	adds	r1, r4, r5
 800e716:	42a3      	cmp	r3, r4
 800e718:	6025      	str	r5, [r4, #0]
 800e71a:	bf18      	it	ne
 800e71c:	6059      	strne	r1, [r3, #4]
 800e71e:	6863      	ldr	r3, [r4, #4]
 800e720:	bf08      	it	eq
 800e722:	6031      	streq	r1, [r6, #0]
 800e724:	5162      	str	r2, [r4, r5]
 800e726:	604b      	str	r3, [r1, #4]
 800e728:	4638      	mov	r0, r7
 800e72a:	f104 060b 	add.w	r6, r4, #11
 800e72e:	f000 f855 	bl	800e7dc <__malloc_unlock>
 800e732:	f026 0607 	bic.w	r6, r6, #7
 800e736:	1d23      	adds	r3, r4, #4
 800e738:	1af2      	subs	r2, r6, r3
 800e73a:	d0b6      	beq.n	800e6aa <_malloc_r+0x22>
 800e73c:	1b9b      	subs	r3, r3, r6
 800e73e:	50a3      	str	r3, [r4, r2]
 800e740:	e7b3      	b.n	800e6aa <_malloc_r+0x22>
 800e742:	6862      	ldr	r2, [r4, #4]
 800e744:	42a3      	cmp	r3, r4
 800e746:	bf0c      	ite	eq
 800e748:	6032      	streq	r2, [r6, #0]
 800e74a:	605a      	strne	r2, [r3, #4]
 800e74c:	e7ec      	b.n	800e728 <_malloc_r+0xa0>
 800e74e:	4623      	mov	r3, r4
 800e750:	6864      	ldr	r4, [r4, #4]
 800e752:	e7b2      	b.n	800e6ba <_malloc_r+0x32>
 800e754:	4634      	mov	r4, r6
 800e756:	6876      	ldr	r6, [r6, #4]
 800e758:	e7b9      	b.n	800e6ce <_malloc_r+0x46>
 800e75a:	230c      	movs	r3, #12
 800e75c:	603b      	str	r3, [r7, #0]
 800e75e:	4638      	mov	r0, r7
 800e760:	f000 f83c 	bl	800e7dc <__malloc_unlock>
 800e764:	e7a1      	b.n	800e6aa <_malloc_r+0x22>
 800e766:	6025      	str	r5, [r4, #0]
 800e768:	e7de      	b.n	800e728 <_malloc_r+0xa0>
 800e76a:	bf00      	nop
 800e76c:	20001e0c 	.word	0x20001e0c

0800e770 <_sbrk_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4d06      	ldr	r5, [pc, #24]	; (800e78c <_sbrk_r+0x1c>)
 800e774:	2300      	movs	r3, #0
 800e776:	4604      	mov	r4, r0
 800e778:	4608      	mov	r0, r1
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	f7f3 f956 	bl	8001a2c <_sbrk>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_sbrk_r+0x1a>
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b103      	cbz	r3, 800e78a <_sbrk_r+0x1a>
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	20001e14 	.word	0x20001e14

0800e790 <siprintf>:
 800e790:	b40e      	push	{r1, r2, r3}
 800e792:	b500      	push	{lr}
 800e794:	b09c      	sub	sp, #112	; 0x70
 800e796:	ab1d      	add	r3, sp, #116	; 0x74
 800e798:	9002      	str	r0, [sp, #8]
 800e79a:	9006      	str	r0, [sp, #24]
 800e79c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7a0:	4809      	ldr	r0, [pc, #36]	; (800e7c8 <siprintf+0x38>)
 800e7a2:	9107      	str	r1, [sp, #28]
 800e7a4:	9104      	str	r1, [sp, #16]
 800e7a6:	4909      	ldr	r1, [pc, #36]	; (800e7cc <siprintf+0x3c>)
 800e7a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ac:	9105      	str	r1, [sp, #20]
 800e7ae:	6800      	ldr	r0, [r0, #0]
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	a902      	add	r1, sp, #8
 800e7b4:	f000 f874 	bl	800e8a0 <_svfiprintf_r>
 800e7b8:	9b02      	ldr	r3, [sp, #8]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	701a      	strb	r2, [r3, #0]
 800e7be:	b01c      	add	sp, #112	; 0x70
 800e7c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7c4:	b003      	add	sp, #12
 800e7c6:	4770      	bx	lr
 800e7c8:	20000040 	.word	0x20000040
 800e7cc:	ffff0208 	.word	0xffff0208

0800e7d0 <__malloc_lock>:
 800e7d0:	4801      	ldr	r0, [pc, #4]	; (800e7d8 <__malloc_lock+0x8>)
 800e7d2:	f000 baf9 	b.w	800edc8 <__retarget_lock_acquire_recursive>
 800e7d6:	bf00      	nop
 800e7d8:	20001e18 	.word	0x20001e18

0800e7dc <__malloc_unlock>:
 800e7dc:	4801      	ldr	r0, [pc, #4]	; (800e7e4 <__malloc_unlock+0x8>)
 800e7de:	f000 baf4 	b.w	800edca <__retarget_lock_release_recursive>
 800e7e2:	bf00      	nop
 800e7e4:	20001e18 	.word	0x20001e18

0800e7e8 <__ssputs_r>:
 800e7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ec:	688e      	ldr	r6, [r1, #8]
 800e7ee:	429e      	cmp	r6, r3
 800e7f0:	4682      	mov	sl, r0
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	4690      	mov	r8, r2
 800e7f6:	461f      	mov	r7, r3
 800e7f8:	d838      	bhi.n	800e86c <__ssputs_r+0x84>
 800e7fa:	898a      	ldrh	r2, [r1, #12]
 800e7fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e800:	d032      	beq.n	800e868 <__ssputs_r+0x80>
 800e802:	6825      	ldr	r5, [r4, #0]
 800e804:	6909      	ldr	r1, [r1, #16]
 800e806:	eba5 0901 	sub.w	r9, r5, r1
 800e80a:	6965      	ldr	r5, [r4, #20]
 800e80c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e814:	3301      	adds	r3, #1
 800e816:	444b      	add	r3, r9
 800e818:	106d      	asrs	r5, r5, #1
 800e81a:	429d      	cmp	r5, r3
 800e81c:	bf38      	it	cc
 800e81e:	461d      	movcc	r5, r3
 800e820:	0553      	lsls	r3, r2, #21
 800e822:	d531      	bpl.n	800e888 <__ssputs_r+0xa0>
 800e824:	4629      	mov	r1, r5
 800e826:	f7ff ff2f 	bl	800e688 <_malloc_r>
 800e82a:	4606      	mov	r6, r0
 800e82c:	b950      	cbnz	r0, 800e844 <__ssputs_r+0x5c>
 800e82e:	230c      	movs	r3, #12
 800e830:	f8ca 3000 	str.w	r3, [sl]
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83a:	81a3      	strh	r3, [r4, #12]
 800e83c:	f04f 30ff 	mov.w	r0, #4294967295
 800e840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e844:	6921      	ldr	r1, [r4, #16]
 800e846:	464a      	mov	r2, r9
 800e848:	f7ff fe9c 	bl	800e584 <memcpy>
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	6126      	str	r6, [r4, #16]
 800e85a:	6165      	str	r5, [r4, #20]
 800e85c:	444e      	add	r6, r9
 800e85e:	eba5 0509 	sub.w	r5, r5, r9
 800e862:	6026      	str	r6, [r4, #0]
 800e864:	60a5      	str	r5, [r4, #8]
 800e866:	463e      	mov	r6, r7
 800e868:	42be      	cmp	r6, r7
 800e86a:	d900      	bls.n	800e86e <__ssputs_r+0x86>
 800e86c:	463e      	mov	r6, r7
 800e86e:	6820      	ldr	r0, [r4, #0]
 800e870:	4632      	mov	r2, r6
 800e872:	4641      	mov	r1, r8
 800e874:	f000 faaa 	bl	800edcc <memmove>
 800e878:	68a3      	ldr	r3, [r4, #8]
 800e87a:	1b9b      	subs	r3, r3, r6
 800e87c:	60a3      	str	r3, [r4, #8]
 800e87e:	6823      	ldr	r3, [r4, #0]
 800e880:	4433      	add	r3, r6
 800e882:	6023      	str	r3, [r4, #0]
 800e884:	2000      	movs	r0, #0
 800e886:	e7db      	b.n	800e840 <__ssputs_r+0x58>
 800e888:	462a      	mov	r2, r5
 800e88a:	f000 fab9 	bl	800ee00 <_realloc_r>
 800e88e:	4606      	mov	r6, r0
 800e890:	2800      	cmp	r0, #0
 800e892:	d1e1      	bne.n	800e858 <__ssputs_r+0x70>
 800e894:	6921      	ldr	r1, [r4, #16]
 800e896:	4650      	mov	r0, sl
 800e898:	f7ff fe8a 	bl	800e5b0 <_free_r>
 800e89c:	e7c7      	b.n	800e82e <__ssputs_r+0x46>
	...

0800e8a0 <_svfiprintf_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	4698      	mov	r8, r3
 800e8a6:	898b      	ldrh	r3, [r1, #12]
 800e8a8:	061b      	lsls	r3, r3, #24
 800e8aa:	b09d      	sub	sp, #116	; 0x74
 800e8ac:	4607      	mov	r7, r0
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	4614      	mov	r4, r2
 800e8b2:	d50e      	bpl.n	800e8d2 <_svfiprintf_r+0x32>
 800e8b4:	690b      	ldr	r3, [r1, #16]
 800e8b6:	b963      	cbnz	r3, 800e8d2 <_svfiprintf_r+0x32>
 800e8b8:	2140      	movs	r1, #64	; 0x40
 800e8ba:	f7ff fee5 	bl	800e688 <_malloc_r>
 800e8be:	6028      	str	r0, [r5, #0]
 800e8c0:	6128      	str	r0, [r5, #16]
 800e8c2:	b920      	cbnz	r0, 800e8ce <_svfiprintf_r+0x2e>
 800e8c4:	230c      	movs	r3, #12
 800e8c6:	603b      	str	r3, [r7, #0]
 800e8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8cc:	e0d1      	b.n	800ea72 <_svfiprintf_r+0x1d2>
 800e8ce:	2340      	movs	r3, #64	; 0x40
 800e8d0:	616b      	str	r3, [r5, #20]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d6:	2320      	movs	r3, #32
 800e8d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e0:	2330      	movs	r3, #48	; 0x30
 800e8e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea8c <_svfiprintf_r+0x1ec>
 800e8e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8ea:	f04f 0901 	mov.w	r9, #1
 800e8ee:	4623      	mov	r3, r4
 800e8f0:	469a      	mov	sl, r3
 800e8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f6:	b10a      	cbz	r2, 800e8fc <_svfiprintf_r+0x5c>
 800e8f8:	2a25      	cmp	r2, #37	; 0x25
 800e8fa:	d1f9      	bne.n	800e8f0 <_svfiprintf_r+0x50>
 800e8fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e900:	d00b      	beq.n	800e91a <_svfiprintf_r+0x7a>
 800e902:	465b      	mov	r3, fp
 800e904:	4622      	mov	r2, r4
 800e906:	4629      	mov	r1, r5
 800e908:	4638      	mov	r0, r7
 800e90a:	f7ff ff6d 	bl	800e7e8 <__ssputs_r>
 800e90e:	3001      	adds	r0, #1
 800e910:	f000 80aa 	beq.w	800ea68 <_svfiprintf_r+0x1c8>
 800e914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e916:	445a      	add	r2, fp
 800e918:	9209      	str	r2, [sp, #36]	; 0x24
 800e91a:	f89a 3000 	ldrb.w	r3, [sl]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 80a2 	beq.w	800ea68 <_svfiprintf_r+0x1c8>
 800e924:	2300      	movs	r3, #0
 800e926:	f04f 32ff 	mov.w	r2, #4294967295
 800e92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e92e:	f10a 0a01 	add.w	sl, sl, #1
 800e932:	9304      	str	r3, [sp, #16]
 800e934:	9307      	str	r3, [sp, #28]
 800e936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e93a:	931a      	str	r3, [sp, #104]	; 0x68
 800e93c:	4654      	mov	r4, sl
 800e93e:	2205      	movs	r2, #5
 800e940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e944:	4851      	ldr	r0, [pc, #324]	; (800ea8c <_svfiprintf_r+0x1ec>)
 800e946:	f7f1 fc43 	bl	80001d0 <memchr>
 800e94a:	9a04      	ldr	r2, [sp, #16]
 800e94c:	b9d8      	cbnz	r0, 800e986 <_svfiprintf_r+0xe6>
 800e94e:	06d0      	lsls	r0, r2, #27
 800e950:	bf44      	itt	mi
 800e952:	2320      	movmi	r3, #32
 800e954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e958:	0711      	lsls	r1, r2, #28
 800e95a:	bf44      	itt	mi
 800e95c:	232b      	movmi	r3, #43	; 0x2b
 800e95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e962:	f89a 3000 	ldrb.w	r3, [sl]
 800e966:	2b2a      	cmp	r3, #42	; 0x2a
 800e968:	d015      	beq.n	800e996 <_svfiprintf_r+0xf6>
 800e96a:	9a07      	ldr	r2, [sp, #28]
 800e96c:	4654      	mov	r4, sl
 800e96e:	2000      	movs	r0, #0
 800e970:	f04f 0c0a 	mov.w	ip, #10
 800e974:	4621      	mov	r1, r4
 800e976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e97a:	3b30      	subs	r3, #48	; 0x30
 800e97c:	2b09      	cmp	r3, #9
 800e97e:	d94e      	bls.n	800ea1e <_svfiprintf_r+0x17e>
 800e980:	b1b0      	cbz	r0, 800e9b0 <_svfiprintf_r+0x110>
 800e982:	9207      	str	r2, [sp, #28]
 800e984:	e014      	b.n	800e9b0 <_svfiprintf_r+0x110>
 800e986:	eba0 0308 	sub.w	r3, r0, r8
 800e98a:	fa09 f303 	lsl.w	r3, r9, r3
 800e98e:	4313      	orrs	r3, r2
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	46a2      	mov	sl, r4
 800e994:	e7d2      	b.n	800e93c <_svfiprintf_r+0x9c>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	1d19      	adds	r1, r3, #4
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	9103      	str	r1, [sp, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	bfbb      	ittet	lt
 800e9a2:	425b      	neglt	r3, r3
 800e9a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e9a8:	9307      	strge	r3, [sp, #28]
 800e9aa:	9307      	strlt	r3, [sp, #28]
 800e9ac:	bfb8      	it	lt
 800e9ae:	9204      	strlt	r2, [sp, #16]
 800e9b0:	7823      	ldrb	r3, [r4, #0]
 800e9b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b4:	d10c      	bne.n	800e9d0 <_svfiprintf_r+0x130>
 800e9b6:	7863      	ldrb	r3, [r4, #1]
 800e9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ba:	d135      	bne.n	800ea28 <_svfiprintf_r+0x188>
 800e9bc:	9b03      	ldr	r3, [sp, #12]
 800e9be:	1d1a      	adds	r2, r3, #4
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	9203      	str	r2, [sp, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	bfb8      	it	lt
 800e9c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9cc:	3402      	adds	r4, #2
 800e9ce:	9305      	str	r3, [sp, #20]
 800e9d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea9c <_svfiprintf_r+0x1fc>
 800e9d4:	7821      	ldrb	r1, [r4, #0]
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	4650      	mov	r0, sl
 800e9da:	f7f1 fbf9 	bl	80001d0 <memchr>
 800e9de:	b140      	cbz	r0, 800e9f2 <_svfiprintf_r+0x152>
 800e9e0:	2340      	movs	r3, #64	; 0x40
 800e9e2:	eba0 000a 	sub.w	r0, r0, sl
 800e9e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ea:	9b04      	ldr	r3, [sp, #16]
 800e9ec:	4303      	orrs	r3, r0
 800e9ee:	3401      	adds	r4, #1
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f6:	4826      	ldr	r0, [pc, #152]	; (800ea90 <_svfiprintf_r+0x1f0>)
 800e9f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9fc:	2206      	movs	r2, #6
 800e9fe:	f7f1 fbe7 	bl	80001d0 <memchr>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d038      	beq.n	800ea78 <_svfiprintf_r+0x1d8>
 800ea06:	4b23      	ldr	r3, [pc, #140]	; (800ea94 <_svfiprintf_r+0x1f4>)
 800ea08:	bb1b      	cbnz	r3, 800ea52 <_svfiprintf_r+0x1b2>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	3307      	adds	r3, #7
 800ea0e:	f023 0307 	bic.w	r3, r3, #7
 800ea12:	3308      	adds	r3, #8
 800ea14:	9303      	str	r3, [sp, #12]
 800ea16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea18:	4433      	add	r3, r6
 800ea1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1c:	e767      	b.n	800e8ee <_svfiprintf_r+0x4e>
 800ea1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea22:	460c      	mov	r4, r1
 800ea24:	2001      	movs	r0, #1
 800ea26:	e7a5      	b.n	800e974 <_svfiprintf_r+0xd4>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	3401      	adds	r4, #1
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	4619      	mov	r1, r3
 800ea30:	f04f 0c0a 	mov.w	ip, #10
 800ea34:	4620      	mov	r0, r4
 800ea36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3a:	3a30      	subs	r2, #48	; 0x30
 800ea3c:	2a09      	cmp	r2, #9
 800ea3e:	d903      	bls.n	800ea48 <_svfiprintf_r+0x1a8>
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d0c5      	beq.n	800e9d0 <_svfiprintf_r+0x130>
 800ea44:	9105      	str	r1, [sp, #20]
 800ea46:	e7c3      	b.n	800e9d0 <_svfiprintf_r+0x130>
 800ea48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e7f0      	b.n	800ea34 <_svfiprintf_r+0x194>
 800ea52:	ab03      	add	r3, sp, #12
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	462a      	mov	r2, r5
 800ea58:	4b0f      	ldr	r3, [pc, #60]	; (800ea98 <_svfiprintf_r+0x1f8>)
 800ea5a:	a904      	add	r1, sp, #16
 800ea5c:	4638      	mov	r0, r7
 800ea5e:	f3af 8000 	nop.w
 800ea62:	1c42      	adds	r2, r0, #1
 800ea64:	4606      	mov	r6, r0
 800ea66:	d1d6      	bne.n	800ea16 <_svfiprintf_r+0x176>
 800ea68:	89ab      	ldrh	r3, [r5, #12]
 800ea6a:	065b      	lsls	r3, r3, #25
 800ea6c:	f53f af2c 	bmi.w	800e8c8 <_svfiprintf_r+0x28>
 800ea70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea72:	b01d      	add	sp, #116	; 0x74
 800ea74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea78:	ab03      	add	r3, sp, #12
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	462a      	mov	r2, r5
 800ea7e:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <_svfiprintf_r+0x1f8>)
 800ea80:	a904      	add	r1, sp, #16
 800ea82:	4638      	mov	r0, r7
 800ea84:	f000 f87a 	bl	800eb7c <_printf_i>
 800ea88:	e7eb      	b.n	800ea62 <_svfiprintf_r+0x1c2>
 800ea8a:	bf00      	nop
 800ea8c:	0800f040 	.word	0x0800f040
 800ea90:	0800f04a 	.word	0x0800f04a
 800ea94:	00000000 	.word	0x00000000
 800ea98:	0800e7e9 	.word	0x0800e7e9
 800ea9c:	0800f046 	.word	0x0800f046

0800eaa0 <_printf_common>:
 800eaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa4:	4616      	mov	r6, r2
 800eaa6:	4699      	mov	r9, r3
 800eaa8:	688a      	ldr	r2, [r1, #8]
 800eaaa:	690b      	ldr	r3, [r1, #16]
 800eaac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eab0:	4293      	cmp	r3, r2
 800eab2:	bfb8      	it	lt
 800eab4:	4613      	movlt	r3, r2
 800eab6:	6033      	str	r3, [r6, #0]
 800eab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eabc:	4607      	mov	r7, r0
 800eabe:	460c      	mov	r4, r1
 800eac0:	b10a      	cbz	r2, 800eac6 <_printf_common+0x26>
 800eac2:	3301      	adds	r3, #1
 800eac4:	6033      	str	r3, [r6, #0]
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	0699      	lsls	r1, r3, #26
 800eaca:	bf42      	ittt	mi
 800eacc:	6833      	ldrmi	r3, [r6, #0]
 800eace:	3302      	addmi	r3, #2
 800ead0:	6033      	strmi	r3, [r6, #0]
 800ead2:	6825      	ldr	r5, [r4, #0]
 800ead4:	f015 0506 	ands.w	r5, r5, #6
 800ead8:	d106      	bne.n	800eae8 <_printf_common+0x48>
 800eada:	f104 0a19 	add.w	sl, r4, #25
 800eade:	68e3      	ldr	r3, [r4, #12]
 800eae0:	6832      	ldr	r2, [r6, #0]
 800eae2:	1a9b      	subs	r3, r3, r2
 800eae4:	42ab      	cmp	r3, r5
 800eae6:	dc26      	bgt.n	800eb36 <_printf_common+0x96>
 800eae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eaec:	1e13      	subs	r3, r2, #0
 800eaee:	6822      	ldr	r2, [r4, #0]
 800eaf0:	bf18      	it	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	0692      	lsls	r2, r2, #26
 800eaf6:	d42b      	bmi.n	800eb50 <_printf_common+0xb0>
 800eaf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eafc:	4649      	mov	r1, r9
 800eafe:	4638      	mov	r0, r7
 800eb00:	47c0      	blx	r8
 800eb02:	3001      	adds	r0, #1
 800eb04:	d01e      	beq.n	800eb44 <_printf_common+0xa4>
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	68e5      	ldr	r5, [r4, #12]
 800eb0a:	6832      	ldr	r2, [r6, #0]
 800eb0c:	f003 0306 	and.w	r3, r3, #6
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	bf08      	it	eq
 800eb14:	1aad      	subeq	r5, r5, r2
 800eb16:	68a3      	ldr	r3, [r4, #8]
 800eb18:	6922      	ldr	r2, [r4, #16]
 800eb1a:	bf0c      	ite	eq
 800eb1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb20:	2500      	movne	r5, #0
 800eb22:	4293      	cmp	r3, r2
 800eb24:	bfc4      	itt	gt
 800eb26:	1a9b      	subgt	r3, r3, r2
 800eb28:	18ed      	addgt	r5, r5, r3
 800eb2a:	2600      	movs	r6, #0
 800eb2c:	341a      	adds	r4, #26
 800eb2e:	42b5      	cmp	r5, r6
 800eb30:	d11a      	bne.n	800eb68 <_printf_common+0xc8>
 800eb32:	2000      	movs	r0, #0
 800eb34:	e008      	b.n	800eb48 <_printf_common+0xa8>
 800eb36:	2301      	movs	r3, #1
 800eb38:	4652      	mov	r2, sl
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	47c0      	blx	r8
 800eb40:	3001      	adds	r0, #1
 800eb42:	d103      	bne.n	800eb4c <_printf_common+0xac>
 800eb44:	f04f 30ff 	mov.w	r0, #4294967295
 800eb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4c:	3501      	adds	r5, #1
 800eb4e:	e7c6      	b.n	800eade <_printf_common+0x3e>
 800eb50:	18e1      	adds	r1, r4, r3
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	2030      	movs	r0, #48	; 0x30
 800eb56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb5a:	4422      	add	r2, r4
 800eb5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb64:	3302      	adds	r3, #2
 800eb66:	e7c7      	b.n	800eaf8 <_printf_common+0x58>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4622      	mov	r2, r4
 800eb6c:	4649      	mov	r1, r9
 800eb6e:	4638      	mov	r0, r7
 800eb70:	47c0      	blx	r8
 800eb72:	3001      	adds	r0, #1
 800eb74:	d0e6      	beq.n	800eb44 <_printf_common+0xa4>
 800eb76:	3601      	adds	r6, #1
 800eb78:	e7d9      	b.n	800eb2e <_printf_common+0x8e>
	...

0800eb7c <_printf_i>:
 800eb7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	7e0f      	ldrb	r7, [r1, #24]
 800eb82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb84:	2f78      	cmp	r7, #120	; 0x78
 800eb86:	4691      	mov	r9, r2
 800eb88:	4680      	mov	r8, r0
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	469a      	mov	sl, r3
 800eb8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb92:	d807      	bhi.n	800eba4 <_printf_i+0x28>
 800eb94:	2f62      	cmp	r7, #98	; 0x62
 800eb96:	d80a      	bhi.n	800ebae <_printf_i+0x32>
 800eb98:	2f00      	cmp	r7, #0
 800eb9a:	f000 80d8 	beq.w	800ed4e <_printf_i+0x1d2>
 800eb9e:	2f58      	cmp	r7, #88	; 0x58
 800eba0:	f000 80a3 	beq.w	800ecea <_printf_i+0x16e>
 800eba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebac:	e03a      	b.n	800ec24 <_printf_i+0xa8>
 800ebae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebb2:	2b15      	cmp	r3, #21
 800ebb4:	d8f6      	bhi.n	800eba4 <_printf_i+0x28>
 800ebb6:	a101      	add	r1, pc, #4	; (adr r1, 800ebbc <_printf_i+0x40>)
 800ebb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebbc:	0800ec15 	.word	0x0800ec15
 800ebc0:	0800ec29 	.word	0x0800ec29
 800ebc4:	0800eba5 	.word	0x0800eba5
 800ebc8:	0800eba5 	.word	0x0800eba5
 800ebcc:	0800eba5 	.word	0x0800eba5
 800ebd0:	0800eba5 	.word	0x0800eba5
 800ebd4:	0800ec29 	.word	0x0800ec29
 800ebd8:	0800eba5 	.word	0x0800eba5
 800ebdc:	0800eba5 	.word	0x0800eba5
 800ebe0:	0800eba5 	.word	0x0800eba5
 800ebe4:	0800eba5 	.word	0x0800eba5
 800ebe8:	0800ed35 	.word	0x0800ed35
 800ebec:	0800ec59 	.word	0x0800ec59
 800ebf0:	0800ed17 	.word	0x0800ed17
 800ebf4:	0800eba5 	.word	0x0800eba5
 800ebf8:	0800eba5 	.word	0x0800eba5
 800ebfc:	0800ed57 	.word	0x0800ed57
 800ec00:	0800eba5 	.word	0x0800eba5
 800ec04:	0800ec59 	.word	0x0800ec59
 800ec08:	0800eba5 	.word	0x0800eba5
 800ec0c:	0800eba5 	.word	0x0800eba5
 800ec10:	0800ed1f 	.word	0x0800ed1f
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	1d1a      	adds	r2, r3, #4
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	602a      	str	r2, [r5, #0]
 800ec1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec24:	2301      	movs	r3, #1
 800ec26:	e0a3      	b.n	800ed70 <_printf_i+0x1f4>
 800ec28:	6820      	ldr	r0, [r4, #0]
 800ec2a:	6829      	ldr	r1, [r5, #0]
 800ec2c:	0606      	lsls	r6, r0, #24
 800ec2e:	f101 0304 	add.w	r3, r1, #4
 800ec32:	d50a      	bpl.n	800ec4a <_printf_i+0xce>
 800ec34:	680e      	ldr	r6, [r1, #0]
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	2e00      	cmp	r6, #0
 800ec3a:	da03      	bge.n	800ec44 <_printf_i+0xc8>
 800ec3c:	232d      	movs	r3, #45	; 0x2d
 800ec3e:	4276      	negs	r6, r6
 800ec40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec44:	485e      	ldr	r0, [pc, #376]	; (800edc0 <_printf_i+0x244>)
 800ec46:	230a      	movs	r3, #10
 800ec48:	e019      	b.n	800ec7e <_printf_i+0x102>
 800ec4a:	680e      	ldr	r6, [r1, #0]
 800ec4c:	602b      	str	r3, [r5, #0]
 800ec4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec52:	bf18      	it	ne
 800ec54:	b236      	sxthne	r6, r6
 800ec56:	e7ef      	b.n	800ec38 <_printf_i+0xbc>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	6820      	ldr	r0, [r4, #0]
 800ec5c:	1d19      	adds	r1, r3, #4
 800ec5e:	6029      	str	r1, [r5, #0]
 800ec60:	0601      	lsls	r1, r0, #24
 800ec62:	d501      	bpl.n	800ec68 <_printf_i+0xec>
 800ec64:	681e      	ldr	r6, [r3, #0]
 800ec66:	e002      	b.n	800ec6e <_printf_i+0xf2>
 800ec68:	0646      	lsls	r6, r0, #25
 800ec6a:	d5fb      	bpl.n	800ec64 <_printf_i+0xe8>
 800ec6c:	881e      	ldrh	r6, [r3, #0]
 800ec6e:	4854      	ldr	r0, [pc, #336]	; (800edc0 <_printf_i+0x244>)
 800ec70:	2f6f      	cmp	r7, #111	; 0x6f
 800ec72:	bf0c      	ite	eq
 800ec74:	2308      	moveq	r3, #8
 800ec76:	230a      	movne	r3, #10
 800ec78:	2100      	movs	r1, #0
 800ec7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec7e:	6865      	ldr	r5, [r4, #4]
 800ec80:	60a5      	str	r5, [r4, #8]
 800ec82:	2d00      	cmp	r5, #0
 800ec84:	bfa2      	ittt	ge
 800ec86:	6821      	ldrge	r1, [r4, #0]
 800ec88:	f021 0104 	bicge.w	r1, r1, #4
 800ec8c:	6021      	strge	r1, [r4, #0]
 800ec8e:	b90e      	cbnz	r6, 800ec94 <_printf_i+0x118>
 800ec90:	2d00      	cmp	r5, #0
 800ec92:	d04d      	beq.n	800ed30 <_printf_i+0x1b4>
 800ec94:	4615      	mov	r5, r2
 800ec96:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec9a:	fb03 6711 	mls	r7, r3, r1, r6
 800ec9e:	5dc7      	ldrb	r7, [r0, r7]
 800eca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eca4:	4637      	mov	r7, r6
 800eca6:	42bb      	cmp	r3, r7
 800eca8:	460e      	mov	r6, r1
 800ecaa:	d9f4      	bls.n	800ec96 <_printf_i+0x11a>
 800ecac:	2b08      	cmp	r3, #8
 800ecae:	d10b      	bne.n	800ecc8 <_printf_i+0x14c>
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	07de      	lsls	r6, r3, #31
 800ecb4:	d508      	bpl.n	800ecc8 <_printf_i+0x14c>
 800ecb6:	6923      	ldr	r3, [r4, #16]
 800ecb8:	6861      	ldr	r1, [r4, #4]
 800ecba:	4299      	cmp	r1, r3
 800ecbc:	bfde      	ittt	le
 800ecbe:	2330      	movle	r3, #48	; 0x30
 800ecc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecc8:	1b52      	subs	r2, r2, r5
 800ecca:	6122      	str	r2, [r4, #16]
 800eccc:	f8cd a000 	str.w	sl, [sp]
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	aa03      	add	r2, sp, #12
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f7ff fee2 	bl	800eaa0 <_printf_common>
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d14c      	bne.n	800ed7a <_printf_i+0x1fe>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	b004      	add	sp, #16
 800ece6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecea:	4835      	ldr	r0, [pc, #212]	; (800edc0 <_printf_i+0x244>)
 800ecec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ecf0:	6829      	ldr	r1, [r5, #0]
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ecf8:	6029      	str	r1, [r5, #0]
 800ecfa:	061d      	lsls	r5, r3, #24
 800ecfc:	d514      	bpl.n	800ed28 <_printf_i+0x1ac>
 800ecfe:	07df      	lsls	r7, r3, #31
 800ed00:	bf44      	itt	mi
 800ed02:	f043 0320 	orrmi.w	r3, r3, #32
 800ed06:	6023      	strmi	r3, [r4, #0]
 800ed08:	b91e      	cbnz	r6, 800ed12 <_printf_i+0x196>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	f023 0320 	bic.w	r3, r3, #32
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	2310      	movs	r3, #16
 800ed14:	e7b0      	b.n	800ec78 <_printf_i+0xfc>
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	f043 0320 	orr.w	r3, r3, #32
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	2378      	movs	r3, #120	; 0x78
 800ed20:	4828      	ldr	r0, [pc, #160]	; (800edc4 <_printf_i+0x248>)
 800ed22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed26:	e7e3      	b.n	800ecf0 <_printf_i+0x174>
 800ed28:	0659      	lsls	r1, r3, #25
 800ed2a:	bf48      	it	mi
 800ed2c:	b2b6      	uxthmi	r6, r6
 800ed2e:	e7e6      	b.n	800ecfe <_printf_i+0x182>
 800ed30:	4615      	mov	r5, r2
 800ed32:	e7bb      	b.n	800ecac <_printf_i+0x130>
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	6826      	ldr	r6, [r4, #0]
 800ed38:	6961      	ldr	r1, [r4, #20]
 800ed3a:	1d18      	adds	r0, r3, #4
 800ed3c:	6028      	str	r0, [r5, #0]
 800ed3e:	0635      	lsls	r5, r6, #24
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	d501      	bpl.n	800ed48 <_printf_i+0x1cc>
 800ed44:	6019      	str	r1, [r3, #0]
 800ed46:	e002      	b.n	800ed4e <_printf_i+0x1d2>
 800ed48:	0670      	lsls	r0, r6, #25
 800ed4a:	d5fb      	bpl.n	800ed44 <_printf_i+0x1c8>
 800ed4c:	8019      	strh	r1, [r3, #0]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	6123      	str	r3, [r4, #16]
 800ed52:	4615      	mov	r5, r2
 800ed54:	e7ba      	b.n	800eccc <_printf_i+0x150>
 800ed56:	682b      	ldr	r3, [r5, #0]
 800ed58:	1d1a      	adds	r2, r3, #4
 800ed5a:	602a      	str	r2, [r5, #0]
 800ed5c:	681d      	ldr	r5, [r3, #0]
 800ed5e:	6862      	ldr	r2, [r4, #4]
 800ed60:	2100      	movs	r1, #0
 800ed62:	4628      	mov	r0, r5
 800ed64:	f7f1 fa34 	bl	80001d0 <memchr>
 800ed68:	b108      	cbz	r0, 800ed6e <_printf_i+0x1f2>
 800ed6a:	1b40      	subs	r0, r0, r5
 800ed6c:	6060      	str	r0, [r4, #4]
 800ed6e:	6863      	ldr	r3, [r4, #4]
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	2300      	movs	r3, #0
 800ed74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed78:	e7a8      	b.n	800eccc <_printf_i+0x150>
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	4649      	mov	r1, r9
 800ed80:	4640      	mov	r0, r8
 800ed82:	47d0      	blx	sl
 800ed84:	3001      	adds	r0, #1
 800ed86:	d0ab      	beq.n	800ece0 <_printf_i+0x164>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	079b      	lsls	r3, r3, #30
 800ed8c:	d413      	bmi.n	800edb6 <_printf_i+0x23a>
 800ed8e:	68e0      	ldr	r0, [r4, #12]
 800ed90:	9b03      	ldr	r3, [sp, #12]
 800ed92:	4298      	cmp	r0, r3
 800ed94:	bfb8      	it	lt
 800ed96:	4618      	movlt	r0, r3
 800ed98:	e7a4      	b.n	800ece4 <_printf_i+0x168>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	4649      	mov	r1, r9
 800eda0:	4640      	mov	r0, r8
 800eda2:	47d0      	blx	sl
 800eda4:	3001      	adds	r0, #1
 800eda6:	d09b      	beq.n	800ece0 <_printf_i+0x164>
 800eda8:	3501      	adds	r5, #1
 800edaa:	68e3      	ldr	r3, [r4, #12]
 800edac:	9903      	ldr	r1, [sp, #12]
 800edae:	1a5b      	subs	r3, r3, r1
 800edb0:	42ab      	cmp	r3, r5
 800edb2:	dcf2      	bgt.n	800ed9a <_printf_i+0x21e>
 800edb4:	e7eb      	b.n	800ed8e <_printf_i+0x212>
 800edb6:	2500      	movs	r5, #0
 800edb8:	f104 0619 	add.w	r6, r4, #25
 800edbc:	e7f5      	b.n	800edaa <_printf_i+0x22e>
 800edbe:	bf00      	nop
 800edc0:	0800f051 	.word	0x0800f051
 800edc4:	0800f062 	.word	0x0800f062

0800edc8 <__retarget_lock_acquire_recursive>:
 800edc8:	4770      	bx	lr

0800edca <__retarget_lock_release_recursive>:
 800edca:	4770      	bx	lr

0800edcc <memmove>:
 800edcc:	4288      	cmp	r0, r1
 800edce:	b510      	push	{r4, lr}
 800edd0:	eb01 0402 	add.w	r4, r1, r2
 800edd4:	d902      	bls.n	800eddc <memmove+0x10>
 800edd6:	4284      	cmp	r4, r0
 800edd8:	4623      	mov	r3, r4
 800edda:	d807      	bhi.n	800edec <memmove+0x20>
 800eddc:	1e43      	subs	r3, r0, #1
 800edde:	42a1      	cmp	r1, r4
 800ede0:	d008      	beq.n	800edf4 <memmove+0x28>
 800ede2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ede6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edea:	e7f8      	b.n	800edde <memmove+0x12>
 800edec:	4402      	add	r2, r0
 800edee:	4601      	mov	r1, r0
 800edf0:	428a      	cmp	r2, r1
 800edf2:	d100      	bne.n	800edf6 <memmove+0x2a>
 800edf4:	bd10      	pop	{r4, pc}
 800edf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edfe:	e7f7      	b.n	800edf0 <memmove+0x24>

0800ee00 <_realloc_r>:
 800ee00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee04:	4680      	mov	r8, r0
 800ee06:	4614      	mov	r4, r2
 800ee08:	460e      	mov	r6, r1
 800ee0a:	b921      	cbnz	r1, 800ee16 <_realloc_r+0x16>
 800ee0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	4611      	mov	r1, r2
 800ee12:	f7ff bc39 	b.w	800e688 <_malloc_r>
 800ee16:	b92a      	cbnz	r2, 800ee24 <_realloc_r+0x24>
 800ee18:	f7ff fbca 	bl	800e5b0 <_free_r>
 800ee1c:	4625      	mov	r5, r4
 800ee1e:	4628      	mov	r0, r5
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	f000 f81b 	bl	800ee5e <_malloc_usable_size_r>
 800ee28:	4284      	cmp	r4, r0
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	d802      	bhi.n	800ee34 <_realloc_r+0x34>
 800ee2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee32:	d812      	bhi.n	800ee5a <_realloc_r+0x5a>
 800ee34:	4621      	mov	r1, r4
 800ee36:	4640      	mov	r0, r8
 800ee38:	f7ff fc26 	bl	800e688 <_malloc_r>
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d0ed      	beq.n	800ee1e <_realloc_r+0x1e>
 800ee42:	42bc      	cmp	r4, r7
 800ee44:	4622      	mov	r2, r4
 800ee46:	4631      	mov	r1, r6
 800ee48:	bf28      	it	cs
 800ee4a:	463a      	movcs	r2, r7
 800ee4c:	f7ff fb9a 	bl	800e584 <memcpy>
 800ee50:	4631      	mov	r1, r6
 800ee52:	4640      	mov	r0, r8
 800ee54:	f7ff fbac 	bl	800e5b0 <_free_r>
 800ee58:	e7e1      	b.n	800ee1e <_realloc_r+0x1e>
 800ee5a:	4635      	mov	r5, r6
 800ee5c:	e7df      	b.n	800ee1e <_realloc_r+0x1e>

0800ee5e <_malloc_usable_size_r>:
 800ee5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee62:	1f18      	subs	r0, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfbc      	itt	lt
 800ee68:	580b      	ldrlt	r3, [r1, r0]
 800ee6a:	18c0      	addlt	r0, r0, r3
 800ee6c:	4770      	bx	lr
	...

0800ee70 <_init>:
 800ee70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee72:	bf00      	nop
 800ee74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee76:	bc08      	pop	{r3}
 800ee78:	469e      	mov	lr, r3
 800ee7a:	4770      	bx	lr

0800ee7c <_fini>:
 800ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7e:	bf00      	nop
 800ee80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee82:	bc08      	pop	{r3}
 800ee84:	469e      	mov	lr, r3
 800ee86:	4770      	bx	lr
